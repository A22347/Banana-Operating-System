
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 db fb 00 00       	call   c000fbfb <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 d3 84 02 00       	call   c00284f8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb a2 90 02 c0       	mov    ebx,0xc00290a2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb b0 90 02 c0    	cmp    ebx,0xc00290b0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 d7 02 c0       	mov    eax,0xc002d798
c0000049:	3d 98 d7 02 c0       	cmp    eax,0xc002d798
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 d7 02 c0       	push   0xc002d798
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 d7 02 c0       	mov    eax,0xc002d798
c0000075:	2d 98 d7 02 c0       	sub    eax,0xc002d798
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 d7 02 c0       	push   0xc002d798
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c8 dd 02 c0 00 	cmp    BYTE PTR ds:0xc002ddc8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb b8 90 02 c0       	mov    ebx,0xc00290b8
c00000bb:	81 eb b4 90 02 c0    	sub    ebx,0xc00290b4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be b4 90 02 c0       	mov    esi,0xc00290b4
c00000ca:	a1 cc dd 02 c0       	mov    eax,ds:0xc002ddcc
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 cc dd 02 c0       	mov    ds:0xc002ddcc,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 cc dd 02 c0       	mov    eax,ds:0xc002ddcc
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 d7 02 c0       	push   0xc002d798
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c8 dd 02 c0 01 	mov    BYTE PTR ds:0xc002ddc8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d0 dd 02 c0       	push   0xc002ddd0
c000012c:	68 98 d7 02 c0       	push   0xc002d798
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 73 d4 01 00       	call   c001d80e <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 a3 27 01 00       	call   c0012b56 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 51 d4 01 00       	call   c001d80e <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 a4 d8 01 00       	call   c001dc80 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 51 de 01 00       	call   c001e236 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 10 e2 02 c0 	lgdtd  ds:0xc002e210
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 80 44 01 00       	call   c0014a59 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 e8 dd 02 c0       	mov    ds:0xc002dde8,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 e8 dd 02 c0    	mov    DWORD PTR ds:0xc002dde8,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d e8 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dde8
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 c0 90 02 c0 02 	test   BYTE PTR [edx-0x3ffd6f40],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 c0 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6f40],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 c0 90 02 c0 08 	test   BYTE PTR [edx-0x3ffd6f40],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 c0 90 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6f40],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 c0 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6f40],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 00 de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de00
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 00 de 02 c0    	mov    DWORD PTR ds:0xc002de00,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 04 de 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd21fc]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 04 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd21fc],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 00 de 02 c0    	mov    DWORD PTR ds:0xc002de00,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 2c de 02 c0    	cmp    DWORD PTR ds:0xc002de2c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 3c de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de3c
c0000e60:	c7 42 0c 34 de 02 c0 	mov    DWORD PTR [edx+0xc],0xc002de34
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 3c de 02 c0    	mov    DWORD PTR ds:0xc002de3c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 2c de 02 c0    	mov    DWORD PTR ds:0xc002de2c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 00 de 02 c0 02 	test   BYTE PTR ds:0xc002de00,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 00 de 02 c0       	mov    eax,0xc002de00
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 00 de 02 c0    	mov    edi,DWORD PTR ds:0xc002de00
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 00 de 02 c0       	mov    eax,0xc002de00
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 04 de 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd21fc]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 04 de 02 c0 	mov    DWORD PTR [edx*4-0x3ffd21fc],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 34 de 02 c0 	lea    edx,[eax*8-0x3ffd21cc]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 00 de 02 c0       	mov    eax,0xc002de00
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 40 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de40
c00011e2:	81 fb 34 de 02 c0    	cmp    ebx,0xc002de34
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 34 de 02 c0       	cmp    eax,0xc002de34
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 30 de 02 c0    	cmp    DWORD PTR ds:0xc002de30,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 3c de 02 c0       	mov    ds:0xc002de3c,eax
c000121e:	a3 40 de 02 c0       	mov    ds:0xc002de40,eax
c0001223:	a3 30 de 02 c0       	mov    ds:0xc002de30,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 34 de 02 c0 	mov    DWORD PTR [eax+0x8],0xc002de34
c0001231:	c7 40 0c 34 de 02 c0 	mov    DWORD PTR [eax+0xc],0xc002de34
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 40 de 02 c0       	mov    ds:0xc002de40,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 34 de 02 c0 	mov    DWORD PTR [eax+0x8],0xc002de34
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 f8 dd 02 c0 	lea    ebp,[edx*4-0x3ffd2208]
c0001282:	8b 14 95 00 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2200]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 00 de 02 c0 	lea    ecx,[edx*4-0x3ffd2200]
c000129d:	8b 14 95 00 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2200]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 34 e1 02 c0 	or     DWORD PTR [edi*4-0x3ffd1ecc],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 34 de 02 c0 	lea    eax,[eax*8-0x3ffd21cc]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 3c de 02 c0    	mov    DWORD PTR ds:0xc002de3c,ecx
c0001357:	89 0d 40 de 02 c0    	mov    DWORD PTR ds:0xc002de40,ecx
c000135d:	c7 41 08 34 de 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002de34
c0001364:	c7 41 0c 34 de 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002de34
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 2c de 02 c0 	lea    edx,[ecx*8-0x3ffd21d4]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 34 e1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1ecc]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 34 e1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1ecc]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 2c de 02 c0 	lea    edx,[eax*4-0x3ffd21d4]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 34 e1 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1ecc],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 3c de 02 c0    	mov    DWORD PTR ds:0xc002de3c,edi
c000142a:	89 3d 40 de 02 c0    	mov    DWORD PTR ds:0xc002de40,edi
c0001430:	c7 47 08 34 de 02 c0 	mov    DWORD PTR [edi+0x8],0xc002de34
c0001437:	c7 47 0c 34 de 02 c0 	mov    DWORD PTR [edi+0xc],0xc002de34
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 30 de 02 c0    	mov    DWORD PTR ds:0xc002de30,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 2c de 02 c0       	mov    eax,ds:0xc002de2c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 2c de 02 c0    	mov    DWORD PTR ds:0xc002de2c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 00 de 02 c0       	mov    edx,0xc002de00
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 00 de 02 c0 00 	cmp    DWORD PTR ds:0xc002de00,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 00 de 02 c0       	mov    eax,0xc002de00
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 54 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e154
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 54 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e154,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 54 e1 02 c0    	mov    DWORD PTR ds:0xc002e154,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 2c de 02 c0    	cmp    DWORD PTR ds:0xc002de2c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 2c de 02 c0    	mov    DWORD PTR ds:0xc002de2c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 00 de 02 c0 00 	cmp    DWORD PTR ds:0xc002de00,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 00 de 02 c0       	mov    eax,0xc002de00
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 5c e1 02 c0    	push   DWORD PTR ds:0xc002e15c
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 00 de 02 c0 00 	cmp    DWORD PTR ds:0xc002de00,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 00 de 02 c0       	mov    eax,0xc002de00
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 5c e1 02 c0       	mov    eax,ds:0xc002e15c
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 00 de 02 c0       	mov    eax,0xc002de00
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 2c de 02 c0 00 	cmp    DWORD PTR ds:0xc002de2c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 00 de 02 c0       	mov    eax,0xc002de00
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 2c de 02 c0       	mov    eax,ds:0xc002de2c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 04 de 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd21fc]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 34 de 02 c0       	mov    eax,0xc002de34
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 2c e1 02 c0       	cmp    eax,0xc002e12c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 68 e1 02 c0       	mov    eax,ds:0xc002e168
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 50 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e150
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 64 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e164
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 74 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e174
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 00 de 02 c0       	mov    eax,0xc002de00
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 c4 91 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6e3c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 00 de 02 c0       	mov    eax,ds:0xc002de00
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 00 de 02 c0       	mov    ds:0xc002de00,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d 44 e1 02 c0    	mov    DWORD PTR ds:0xc002e144,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d 48 e1 02 c0    	mov    DWORD PTR ds:0xc002e148,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d 4c e1 02 c0    	mov    DWORD PTR ds:0xc002e14c,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 54 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e154,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 e0 18 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce720]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 30 f0 01 00       	jmp    c0020c5c <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 e0 18 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce720]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 61 f0 01 00       	jmp    c0020ca3 <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 e0 18 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce720]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 89 f0 01 00       	jmp    c0020cea <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 18 49 02 00       	call   c002685c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 e0 92 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6d20]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 e0 92 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6d20]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba e0 91 02 c0       	mov    edx,0xc00291e0
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 00 93 02 c0       	mov    edx,0xc0029300
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 24 c6 02 c0       	mov    edx,0xc002c624
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 0c 93 02 c0       	mov    edx,0xc002930c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba f0 92 02 c0       	mov    edx,0xc00292f0
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 a0 e1 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1e60]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 80 e1 02 c0    	mov    ax,ds:0xc002e180
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 80 e1 02 c0    	mov    ds:0xc002e180,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 15 37 02 00       	call   c002685c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 12 93 02 c0       	mov    eax,0xc0029312
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 60 92 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6da0]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 1b 93 02 c0       	mov    eax,0xc002931b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 e0 92 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6d20]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 e0 20 02 00       	call   c002685c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba f0 92 02 c0       	mov    edx,0xc00292f0
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba e0 91 02 c0       	mov    edx,0xc00291e0
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba f0 91 02 c0       	mov    edx,0xc00291f0
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 a0 e1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1e60]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 a0 e1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1e60],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 a7 0a 02 00       	call   c002685c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 8d 0a 02 00       	call   c002685c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 37 92 02 c0       	mov    eax,0xc0029237
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 30 92 02 c0       	mov    eax,0xc0029230
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 a0 e1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1e60]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 20 92 02 c0       	mov    esi,0xc0029220
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 d0 f1 01 00       	call   c002685c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 00 93 02 c0       	mov    edx,0xc0029300
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 00 92 02 c0       	mov    edx,0xc0029200
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 10 92 02 c0       	mov    edx,0xc0029210
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 22 93 02 c0       	mov    edx,0xc0029322
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 2e 93 02 c0       	mov    edx,0xc002932e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 42 93 02 c0       	mov    edx,0xc0029342
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 a0 73 00 00       	call   c000f843 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 9a 73 00 00       	call   c000f853 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 60 96 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029660
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 60 96 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029660
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 60 94 02 c0       	mov    eax,0xc0029460
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 a0 93 02 c0       	mov    eax,0xc00293a0
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 60 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ca0]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 df 70 00 00       	call   c000f853 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c9 70 00 00       	call   c000f853 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 24 fb 01 00       	call   c002832f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 e7 fa 01 00       	call   c0028311 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 bb fa 01 00       	call   c002832f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 6e f1 01 00       	call   c0027a34 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 e8 fb 01 00       	call   c00284c0 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 35 fa 01 00       	call   c002832f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 77 f9 01 00       	call   c002832f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 44 f9 01 00       	call   c0028311 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 31 f8 01 00       	call   c002832f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 f9 f7 01 00       	call   c0028311 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a8 6c 00 00       	call   c000f873 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 43 6c 00 00       	call   c000f853 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 60 97 02 c0       	mov    eax,0xc0029760
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 05 f6 01 00       	call   c002832f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 ca f5 01 00       	call   c0028311 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 c0 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6440]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 da f2 01 00       	call   c00280c3 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 58 ec 01 00       	call   c0027a60 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 14 f5 01 00       	call   c0028333 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 02 f6 01 00       	call   c0028457 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 ec eb 01 00       	call   c0027a60 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 97 f4 01 00       	call   c002832d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 78 f4 01 00       	call   c0028331 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 06 f6 01 00       	call   c00284e0 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 b8 f1 01 00       	call   c00280c3 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 36 eb 01 00       	call   c0027a60 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 f2 f3 01 00       	call   c0028333 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 e0 f4 01 00       	call   c0028457 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 ca ea 01 00       	call   c0027a60 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 75 f3 01 00       	call   c002832d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 55 f3 01 00       	call   c0028331 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 e2 f4 01 00       	call   c00284e0 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 90 f2 01 00       	call   c002832f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 4e f2 01 00       	call   c0028311 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 36 f2 01 00       	call   c002832f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 a8 ef 01 00       	call   c00280c3 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 aa e2 01 00       	call   c00273e3 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 0d e9 01 00       	call   c0027a60 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 5f ef 01 00       	call   c00280c3 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 65 e2 01 00       	call   c00273e3 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 34 ef 01 00       	call   c00280c3 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 84 f1 01 00       	call   c002832d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 61 e8 01 00       	call   c0027a34 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 db f2 01 00       	call   c00284c0 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 0a f1 01 00       	call   c0028311 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 05 e8 01 00       	call   c0027a34 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 83 ee 01 00       	call   c00280c3 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 06 e8 01 00       	call   c0027a60 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 58 ee 01 00       	call   c00280c3 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 bf ea 01 00       	call   c0027d44 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 3e e1 01 00       	call   c00273e3 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 9e da 01 00       	call   c0026d78 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 75 f1 01 00       	call   c0028457 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 5e e7 01 00       	call   c0027a60 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 45 f1 01 00       	call   c0028457 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 b7 e0 01 00       	call   c00273e3 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 f0 ef 01 00       	call   c0028333 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 d8 e9 01 00       	call   c0027d44 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 5e e0 01 00       	call   c00273e3 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 44 f1 01 00       	call   c00284e0 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 1e ed 01 00       	call   c00280c3 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 75 e6 01 00       	call   c0027a34 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 54 ef 01 00       	call   c002832f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 ed df 01 00       	call   c00273e3 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 19 e6 01 00       	call   c0027a34 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 b3 f0 01 00       	call   c00284e0 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 6c ec 01 00       	call   c00280c3 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 e9 e5 01 00       	call   c0027a60 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 3c ec 01 00       	call   c00280c3 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 42 df 01 00       	call   c00273e3 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 12 ec 01 00       	call   c00280c3 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 64 ee 01 00       	call   c002832f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 3b e5 01 00       	call   c0027a34 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 b5 ef 01 00       	call   c00284c0 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 e4 ed 01 00       	call   c0028311 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 de e4 01 00       	call   c0027a34 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 5c eb 01 00       	call   c00280c3 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 df e4 01 00       	call   c0027a60 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 31 eb 01 00       	call   c00280c3 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 98 e7 01 00       	call   c0027d44 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 17 de 01 00       	call   c00273e3 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 67 d7 01 00       	call   c0026d78 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 3e ee 01 00       	call   c0028457 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 27 e4 01 00       	call   c0027a60 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 0e ee 01 00       	call   c0028457 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 80 dd 01 00       	call   c00273e3 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 b9 ec 01 00       	call   c0028333 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 a0 e6 01 00       	call   c0027d44 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 1f dd 01 00       	call   c00273e3 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 05 ee 01 00       	call   c00284e0 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 df e9 01 00       	call   c00280c3 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 36 e3 01 00       	call   c0027a34 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 15 ec 01 00       	call   c002832f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 ae dc 01 00       	call   c00273e3 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 da e2 01 00       	call   c0027a34 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 4f e9 01 00       	call   c00280c3 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 55 dc 01 00       	call   c00273e3 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 20 9c 02 c0       	mov    eax,0xc0029c20
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 34 9c 02 c0       	mov    eax,0xc0029c34
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 dc 5f 00 00       	call   c000f853 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 de 5f 00 00       	call   c000f873 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 ca e7 01 00       	call   c00280c3 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 48 e1 01 00       	call   c0027a60 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 da d3 01 00       	call   c0026d78 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 b1 ea 01 00       	call   c0028457 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 9a e0 01 00       	call   c0027a60 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 7d ea 01 00       	call   c0028457 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 ef d9 01 00       	call   c00273e3 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 4f ea 01 00       	call   c0028457 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 3e e0 01 00       	call   c0027a60 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 a7 d9 01 00       	call   c00273e3 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 c8 d2 01 00       	call   c0026d78 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 9f e9 01 00       	call   c0028457 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 88 df 01 00       	call   c0027a60 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 6b e9 01 00       	call   c0028457 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 dd d8 01 00       	call   c00273e3 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 3d e9 01 00       	call   c0028457 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 2c df 01 00       	call   c0027a60 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 95 d8 01 00       	call   c00273e3 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 73 d8 01 00       	call   c00273e3 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 4f d1 01 00       	call   c0026d78 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 26 e8 01 00       	call   c0028457 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 0f de 01 00       	call   c0027a60 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 f2 e7 01 00       	call   c0028457 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 64 d7 01 00       	call   c00273e3 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 c4 e7 01 00       	call   c0028457 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 ad dd 01 00       	call   c0027a60 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 16 d7 01 00       	call   c00273e3 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 76 e7 01 00       	call   c0028457 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 5f dd 01 00       	call   c0027a60 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 c8 d6 01 00       	call   c00273e3 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 dd cf 01 00       	call   c0026d78 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 b4 e6 01 00       	call   c0028457 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 9d dc 01 00       	call   c0027a60 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 84 e6 01 00       	call   c0028457 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 f6 d5 01 00       	call   c00273e3 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 56 e6 01 00       	call   c0028457 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 3f dc 01 00       	call   c0027a60 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 a8 d5 01 00       	call   c00273e3 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 08 e6 01 00       	call   c0028457 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 f1 db 01 00       	call   c0027a60 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 5a d5 01 00       	call   c00273e3 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 2e d5 01 00       	call   c00273e3 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 8b db 01 00       	call   c0027a60 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 47 e4 01 00       	call   c0028333 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 d6 d4 01 00       	call   c00273e3 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 33 db 01 00       	call   c0027a60 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 ef e3 01 00       	call   c0028333 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 69 cd 01 00       	call   c0026d78 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 40 e4 01 00       	call   c0028457 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 29 da 01 00       	call   c0027a60 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 0c e4 01 00       	call   c0028457 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 7e d3 01 00       	call   c00273e3 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 de e3 01 00       	call   c0028457 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 c7 d9 01 00       	call   c0027a60 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 30 d3 01 00       	call   c00273e3 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 90 e3 01 00       	call   c0028457 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 79 d9 01 00       	call   c0027a60 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 e2 d2 01 00       	call   c00273e3 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 42 e3 01 00       	call   c0028457 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 2b d9 01 00       	call   c0027a60 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 94 d2 01 00       	call   c00273e3 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 f4 e2 01 00       	call   c0028457 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 dd d8 01 00       	call   c0027a60 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 46 d2 01 00       	call   c00273e3 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 48 cb 01 00       	call   c0026d78 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 1f e2 01 00       	call   c0028457 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 08 d8 01 00       	call   c0027a60 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 ef e1 01 00       	call   c0028457 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 61 d1 01 00       	call   c00273e3 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 c1 e1 01 00       	call   c0028457 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 aa d7 01 00       	call   c0027a60 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 13 d1 01 00       	call   c00273e3 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 73 e1 01 00       	call   c0028457 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 5c d7 01 00       	call   c0027a60 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 c5 d0 01 00       	call   c00273e3 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 25 e1 01 00       	call   c0028457 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 0e d7 01 00       	call   c0027a60 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 77 d0 01 00       	call   c00273e3 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 d7 e0 01 00       	call   c0028457 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 c0 d6 01 00       	call   c0027a60 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 29 d0 01 00       	call   c00273e3 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 fd cf 01 00       	call   c00273e3 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 5a d6 01 00       	call   c0027a60 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 16 df 01 00       	call   c0028333 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 a5 cf 01 00       	call   c00273e3 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 02 d6 01 00       	call   c0027a60 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 be de 01 00       	call   c0028333 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 4c cf 01 00       	call   c00273e3 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 a9 d5 01 00       	call   c0027a60 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 65 de 01 00       	call   c0028333 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 f3 ce 01 00       	call   c00273e3 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 50 d5 01 00       	call   c0027a60 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 0c de 01 00       	call   c0028333 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 6a c7 01 00       	call   c0026d78 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 41 de 01 00       	call   c0028457 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 2a d4 01 00       	call   c0027a60 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 0d de 01 00       	call   c0028457 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 7f cd 01 00       	call   c00273e3 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 df dd 01 00       	call   c0028457 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 c8 d3 01 00       	call   c0027a60 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 31 cd 01 00       	call   c00273e3 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 91 dd 01 00       	call   c0028457 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 7a d3 01 00       	call   c0027a60 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 e3 cc 01 00       	call   c00273e3 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 43 dd 01 00       	call   c0028457 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 2c d3 01 00       	call   c0027a60 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 95 cc 01 00       	call   c00273e3 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 f5 dc 01 00       	call   c0028457 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 de d2 01 00       	call   c0027a60 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 47 cc 01 00       	call   c00273e3 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 a7 dc 01 00       	call   c0028457 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 90 d2 01 00       	call   c0027a60 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 f6 cb 01 00       	call   c00273e3 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 56 dc 01 00       	call   c0028457 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 3f d2 01 00       	call   c0027a60 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 a8 cb 01 00       	call   c00273e3 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 a2 c4 01 00       	call   c0026d78 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 79 db 01 00       	call   c0028457 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 62 d1 01 00       	call   c0027a60 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 42 db 01 00       	call   c0028457 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 b4 ca 01 00       	call   c00273e3 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 14 db 01 00       	call   c0028457 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 fd d0 01 00       	call   c0027a60 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 66 ca 01 00       	call   c00273e3 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 c6 da 01 00       	call   c0028457 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 af d0 01 00       	call   c0027a60 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 18 ca 01 00       	call   c00273e3 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 78 da 01 00       	call   c0028457 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 61 d0 01 00       	call   c0027a60 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 ca c9 01 00       	call   c00273e3 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 2a da 01 00       	call   c0028457 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 13 d0 01 00       	call   c0027a60 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 7c c9 01 00       	call   c00273e3 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 dc d9 01 00       	call   c0028457 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 c5 cf 01 00       	call   c0027a60 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 2b c9 01 00       	call   c00273e3 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 8b d9 01 00       	call   c0028457 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 74 cf 01 00       	call   c0027a60 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 e3 c8 01 00       	call   c00273e3 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 bc c8 01 00       	call   c00273e3 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 1a cf 01 00       	call   c0027a60 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 d6 d7 01 00       	call   c0028333 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 65 c8 01 00       	call   c00273e3 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 c3 ce 01 00       	call   c0027a60 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 7f d7 01 00       	call   c0028333 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 0d c8 01 00       	call   c00273e3 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 6b ce 01 00       	call   c0027a60 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 27 d7 01 00       	call   c0028333 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 b5 c7 01 00       	call   c00273e3 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 13 ce 01 00       	call   c0027a60 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 cf d6 01 00       	call   c0028333 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 5d c7 01 00       	call   c00273e3 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 bb cd 01 00       	call   c0027a60 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 77 d6 01 00       	call   c0028333 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 0b c7 01 00       	call   c00273e3 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 69 cd 01 00       	call   c0027a60 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 25 d6 01 00       	call   c0028333 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 39 bf 01 00       	call   c0026d78 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 10 d6 01 00       	call   c0028457 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 f9 cb 01 00       	call   c0027a60 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 e0 d5 01 00       	call   c0028457 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 52 c5 01 00       	call   c00273e3 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 64 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd639c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 86 d5 01 00       	call   c0028457 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 6f cb 01 00       	call   c0027a60 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 da c4 01 00       	call   c00273e3 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 27 d5 01 00       	call   c0028457 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 10 cb 01 00       	call   c0027a60 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 7b c4 01 00       	call   c00273e3 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 c8 d4 01 00       	call   c0028457 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 b1 ca 01 00       	call   c0027a60 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 1c c4 01 00       	call   c00273e3 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 69 d4 01 00       	call   c0028457 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 52 ca 01 00       	call   c0027a60 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 bd c3 01 00       	call   c00273e3 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 0a d4 01 00       	call   c0028457 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 f3 c9 01 00       	call   c0027a60 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 5e c3 01 00       	call   c00273e3 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 ab d3 01 00       	call   c0028457 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 94 c9 01 00       	call   c0027a60 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 ff c2 01 00       	call   c00273e3 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 4c d3 01 00       	call   c0028457 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 35 c9 01 00       	call   c0027a60 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 a0 c2 01 00       	call   c00273e3 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 ed d2 01 00       	call   c0028457 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 d6 c8 01 00       	call   c0027a60 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 41 c2 01 00       	call   c00273e3 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 4b bb 01 00       	call   c0026d78 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 22 d2 01 00       	call   c0028457 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 0b c8 01 00       	call   c0027a60 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 f2 d1 01 00       	call   c0028457 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 64 c1 01 00       	call   c00273e3 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 80 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6380]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 97 d1 01 00       	call   c0028457 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 80 c7 01 00       	call   c0027a60 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 eb c0 01 00       	call   c00273e3 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 37 d1 01 00       	call   c0028457 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 20 c7 01 00       	call   c0027a60 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 8b c0 01 00       	call   c00273e3 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 d7 d0 01 00       	call   c0028457 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 c0 c6 01 00       	call   c0027a60 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 2b c0 01 00       	call   c00273e3 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 77 d0 01 00       	call   c0028457 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 60 c6 01 00       	call   c0027a60 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 cb bf 01 00       	call   c00273e3 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 17 d0 01 00       	call   c0028457 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 00 c6 01 00       	call   c0027a60 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 6b bf 01 00       	call   c00273e3 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 b7 cf 01 00       	call   c0028457 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 a0 c5 01 00       	call   c0027a60 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 0b bf 01 00       	call   c00273e3 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 57 cf 01 00       	call   c0028457 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 40 c5 01 00       	call   c0027a60 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 ab be 01 00       	call   c00273e3 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 f7 ce 01 00       	call   c0028457 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 e0 c4 01 00       	call   c0027a60 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 4b be 01 00       	call   c00273e3 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 9c 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6364]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 f0 bd 01 00       	call   c00273e3 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 4d c4 01 00       	call   c0027a60 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 09 cd 01 00       	call   c0028333 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 93 bd 01 00       	call   c00273e3 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 f0 c3 01 00       	call   c0027a60 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 ac cc 01 00       	call   c0028333 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 36 bd 01 00       	call   c00273e3 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 93 c3 01 00       	call   c0027a60 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 4f cc 01 00       	call   c0028333 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 d9 bc 01 00       	call   c00273e3 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 36 c3 01 00       	call   c0027a60 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 f2 cb 01 00       	call   c0028333 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 7c bc 01 00       	call   c00273e3 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 d9 c2 01 00       	call   c0027a60 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 95 cb 01 00       	call   c0028333 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 1f bc 01 00       	call   c00273e3 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 7c c2 01 00       	call   c0027a60 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 38 cb 01 00       	call   c0028333 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 c2 bb 01 00       	call   c00273e3 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 1f c2 01 00       	call   c0027a60 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 db ca 01 00       	call   c0028333 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 65 bb 01 00       	call   c00273e3 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 c2 c1 01 00       	call   c0027a60 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 7e ca 01 00       	call   c0028333 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 7a c1 01 00       	call   c0027a60 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 ea cb 01 00       	jmp    c00284e0 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 5c c8 01 00       	call   c002832f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 1a c8 01 00       	call   c0028311 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 b1 c5 01 00       	call   c00280c3 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 b2 b8 01 00       	call   c00273e3 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 81 c5 01 00       	call   c00280c3 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 e8 c1 01 00       	call   c0027d44 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 87 c7 01 00       	call   c0028311 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 8a c7 01 00       	call   c002832f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 5d c7 01 00       	call   c002832f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 56 c1 01 00       	call   c0027d44 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 d8 c8 01 00       	call   c00284e0 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 b3 c8 01 00       	call   c00284e0 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 8d c4 01 00       	call   c00280c3 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 e4 bd 01 00       	call   c0027a34 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 c3 c6 01 00       	call   c002832f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 5c b7 01 00       	call   c00273e3 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 80 bd 01 00       	call   c0027a34 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 1a c8 01 00       	call   c00284e0 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 5a c0 01 00       	call   c0027d44 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 d7 b6 01 00       	call   c00273e3 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 03 c3 01 00       	call   c00280c3 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 03 b6 01 00       	call   c00273e3 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 e3 b5 01 00       	call   c00273e3 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 b3 c2 01 00       	call   c00280c3 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 03 c5 01 00       	call   c002832d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 e2 bb 01 00       	call   c0027a34 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 5c c6 01 00       	call   c00284c0 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 8b c4 01 00       	call   c0028311 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 89 bb 01 00       	call   c0027a34 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 07 c2 01 00       	call   c00280c3 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 8a bb 01 00       	call   c0027a60 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 dc c1 01 00       	call   c00280c3 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 43 be 01 00       	call   c0027d44 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 c2 b4 01 00       	call   c00273e3 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 8c c1 01 00       	call   c00280c3 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 d8 c3 01 00       	call   c002832f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 cd ba 01 00       	call   c0027a60 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 9f ba 01 00       	call   c0027a60 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 d8 c0 01 00       	call   c00280c3 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 3c bd 01 00       	call   c0027d44 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 04 bd 01 00       	call   c0027d44 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 83 b3 01 00       	call   c00273e3 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 68 c4 01 00       	call   c00284e0 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 42 c0 01 00       	call   c00280c3 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 99 b9 01 00       	call   c0027a34 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 78 c2 01 00       	call   c002832f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 10 b3 01 00       	call   c00273e3 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 34 b9 01 00       	call   c0027a34 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 ce c3 01 00       	call   c00284e0 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 97 c1 01 00       	call   c002832f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 55 c1 01 00       	call   c0028311 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 ec be 01 00       	call   c00280c3 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 ed b1 01 00       	call   c00273e3 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 bc be 01 00       	call   c00280c3 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 23 bb 01 00       	call   c0027d44 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 c2 c0 01 00       	call   c0028311 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 c5 c0 01 00       	call   c002832f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 98 c0 01 00       	call   c002832f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 91 ba 01 00       	call   c0027d44 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 13 c2 01 00       	call   c00284e0 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 ee c1 01 00       	call   c00284e0 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 c8 bd 01 00       	call   c00280c3 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 1f b7 01 00       	call   c0027a34 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 fe bf 01 00       	call   c002832f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 97 b0 01 00       	call   c00273e3 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 bb b6 01 00       	call   c0027a34 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 55 c1 01 00       	call   c00284e0 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 95 b9 01 00       	call   c0027d44 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 12 b0 01 00       	call   c00273e3 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 3d bc 01 00       	call   c00280c3 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 3d af 01 00       	call   c00273e3 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 1d af 01 00       	call   c00273e3 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 ed bb 01 00       	call   c00280c3 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 3d be 01 00       	call   c002832d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 1b b5 01 00       	call   c0027a34 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 95 bf 01 00       	call   c00284c0 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 c4 bd 01 00       	call   c0028311 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 c1 b4 01 00       	call   c0027a34 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 3f bb 01 00       	call   c00280c3 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 c2 b4 01 00       	call   c0027a60 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 14 bb 01 00       	call   c00280c3 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 7b b7 01 00       	call   c0027d44 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 fa ad 01 00       	call   c00273e3 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 c4 ba 01 00       	call   c00280c3 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 10 bd 01 00       	call   c002832f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 05 b4 01 00       	call   c0027a60 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 d7 b3 01 00       	call   c0027a60 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 0e ba 01 00       	call   c00280c3 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 72 b6 01 00       	call   c0027d44 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 3f b6 01 00       	call   c0027d44 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 be ac 01 00       	call   c00273e3 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 a3 bd 01 00       	call   c00284e0 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 7d b9 01 00       	call   c00280c3 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 d4 b2 01 00       	call   c0027a34 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 b3 bb 01 00       	call   c002832f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 4b ac 01 00       	call   c00273e3 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 6f b2 01 00       	call   c0027a34 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 09 bd 01 00       	call   c00284e0 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 d2 ba 01 00       	call   c002832f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 90 ba 01 00       	call   c0028311 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 27 b8 01 00       	call   c00280c3 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 28 ab 01 00       	call   c00273e3 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 f7 b7 01 00       	call   c00280c3 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 5e b4 01 00       	call   c0027d44 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 fd b9 01 00       	call   c0028311 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 00 ba 01 00       	call   c002832f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 d3 b9 01 00       	call   c002832f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 cc b3 01 00       	call   c0027d44 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 4e bb 01 00       	call   c00284e0 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 29 bb 01 00       	call   c00284e0 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 03 b7 01 00       	call   c00280c3 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 5a b0 01 00       	call   c0027a34 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 39 b9 01 00       	call   c002832f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 d2 a9 01 00       	call   c00273e3 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 f6 af 01 00       	call   c0027a34 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 90 ba 01 00       	call   c00284e0 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 d0 b2 01 00       	call   c0027d44 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 4d a9 01 00       	call   c00273e3 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 78 b5 01 00       	call   c00280c3 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 78 a8 01 00       	call   c00273e3 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 58 a8 01 00       	call   c00273e3 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 28 b5 01 00       	call   c00280c3 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 78 b7 01 00       	call   c002832d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 56 ae 01 00       	call   c0027a34 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 d0 b8 01 00       	call   c00284c0 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 ff b6 01 00       	call   c0028311 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 fc ad 01 00       	call   c0027a34 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 7a b4 01 00       	call   c00280c3 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 fd ad 01 00       	call   c0027a60 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 4f b4 01 00       	call   c00280c3 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 b6 b0 01 00       	call   c0027d44 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 35 a7 01 00       	call   c00273e3 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 ff b3 01 00       	call   c00280c3 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 4b b6 01 00       	call   c002832f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 40 ad 01 00       	call   c0027a60 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 12 ad 01 00       	call   c0027a60 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 49 b3 01 00       	call   c00280c3 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 ad af 01 00       	call   c0027d44 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 7a af 01 00       	call   c0027d44 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 f9 a5 01 00       	call   c00273e3 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 de b6 01 00       	call   c00284e0 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 b8 b2 01 00       	call   c00280c3 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 0f ac 01 00       	call   c0027a34 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 ee b4 01 00       	call   c002832f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 86 a5 01 00       	call   c00273e3 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 aa ab 01 00       	call   c0027a34 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 44 b6 01 00       	call   c00284e0 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 0d b4 01 00       	call   c002832f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 cb b3 01 00       	call   c0028311 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 62 b1 01 00       	call   c00280c3 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 63 a4 01 00       	call   c00273e3 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 32 b1 01 00       	call   c00280c3 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 99 ad 01 00       	call   c0027d44 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 38 b3 01 00       	call   c0028311 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 3b b3 01 00       	call   c002832f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 0e b3 01 00       	call   c002832f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 07 ad 01 00       	call   c0027d44 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 89 b4 01 00       	call   c00284e0 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 64 b4 01 00       	call   c00284e0 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 3e b0 01 00       	call   c00280c3 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 95 a9 01 00       	call   c0027a34 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 74 b2 01 00       	call   c002832f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 0d a3 01 00       	call   c00273e3 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 31 a9 01 00       	call   c0027a34 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 cb b3 01 00       	call   c00284e0 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 0b ac 01 00       	call   c0027d44 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 88 a2 01 00       	call   c00273e3 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 b3 ae 01 00       	call   c00280c3 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 b3 a1 01 00       	call   c00273e3 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 93 a1 01 00       	call   c00273e3 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 63 ae 01 00       	call   c00280c3 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 b3 b0 01 00       	call   c002832d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 91 a7 01 00       	call   c0027a34 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 0b b2 01 00       	call   c00284c0 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 3a b0 01 00       	call   c0028311 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 37 a7 01 00       	call   c0027a34 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 b5 ad 01 00       	call   c00280c3 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 38 a7 01 00       	call   c0027a60 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 8a ad 01 00       	call   c00280c3 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 f1 a9 01 00       	call   c0027d44 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 70 a0 01 00       	call   c00273e3 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 3a ad 01 00       	call   c00280c3 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 86 af 01 00       	call   c002832f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 7b a6 01 00       	call   c0027a60 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 4d a6 01 00       	call   c0027a60 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 84 ac 01 00       	call   c00280c3 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 e8 a8 01 00       	call   c0027d44 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 b5 a8 01 00       	call   c0027d44 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 34 9f 01 00       	call   c00273e3 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 19 b0 01 00       	call   c00284e0 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 f3 ab 01 00       	call   c00280c3 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 4a a5 01 00       	call   c0027a34 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 29 ae 01 00       	call   c002832f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 c1 9e 01 00       	call   c00273e3 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 e5 a4 01 00       	call   c0027a34 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 7f af 01 00       	call   c00284e0 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 45 ad 01 00       	call   c002832f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 03 ad 01 00       	call   c0028311 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 9a aa 01 00       	call   c00280c3 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 9b 9d 01 00       	call   c00273e3 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 6a aa 01 00       	call   c00280c3 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 d1 a6 01 00       	call   c0027d44 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 70 ac 01 00       	call   c0028311 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 73 ac 01 00       	call   c002832f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 46 ac 01 00       	call   c002832f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 3f a6 01 00       	call   c0027d44 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 c1 ad 01 00       	call   c00284e0 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 98 ad 01 00       	call   c00284e0 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 72 a9 01 00       	call   c00280c3 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 c9 a2 01 00       	call   c0027a34 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 a8 ab 01 00       	call   c002832f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 41 9c 01 00       	call   c00273e3 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 69 a2 01 00       	call   c0027a34 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 03 ad 01 00       	call   c00284e0 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 44 a5 01 00       	call   c0027d44 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 c1 9b 01 00       	call   c00273e3 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 ed a7 01 00       	call   c00280c3 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 ed 9a 01 00       	call   c00273e3 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 cd 9a 01 00       	call   c00273e3 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 9d a7 01 00       	call   c00280c3 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 d1 a9 01 00       	call   c0028311 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 c8 a0 01 00       	call   c0027a34 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 42 ab 01 00       	call   c00284c0 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 71 a9 01 00       	call   c0028311 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 6b a0 01 00       	call   c0027a34 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 e9 a6 01 00       	call   c00280c3 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 6c a0 01 00       	call   c0027a60 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 be a6 01 00       	call   c00280c3 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 25 a3 01 00       	call   c0027d44 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 a4 99 01 00       	call   c00273e3 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 6e a6 01 00       	call   c00280c3 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 ba a8 01 00       	call   c002832f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 af 9f 01 00       	call   c0027a60 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 81 9f 01 00       	call   c0027a60 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 c5 a5 01 00       	call   c00280c3 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 2c a2 01 00       	call   c0027d44 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 15 9f 01 00       	call   c0027a60 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 d1 a7 01 00       	call   c0028333 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 c4 a1 01 00       	call   c0027d44 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 43 98 01 00       	call   c00273e3 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 28 a9 01 00       	call   c00284e0 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 02 a5 01 00       	call   c00280c3 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 59 9e 01 00       	call   c0027a34 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 38 a7 01 00       	call   c002832f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 d0 97 01 00       	call   c00273e3 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 f8 9d 01 00       	call   c0027a34 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 92 a8 01 00       	call   c00284e0 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 c4 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd633c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 b8 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6348]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 a2 1b 00 00       	call   c000f853 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 4d a5 01 00       	call   c002832f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 0b a5 01 00       	call   c0028311 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 f7 a4 01 00       	call   c002832f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 69 a2 01 00       	call   c00280c3 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 e7 9b 01 00       	call   c0027a60 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 39 a2 01 00       	call   c00280c3 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 3f 95 01 00       	call   c00273e3 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 0e a2 01 00       	call   c00280c3 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 5e a4 01 00       	call   c002832d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 3f 9b 01 00       	call   c0027a34 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 b9 a5 01 00       	call   c00284c0 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 e8 a3 01 00       	call   c0028311 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 e7 9a 01 00       	call   c0027a34 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 65 a1 01 00       	call   c00280c3 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 e8 9a 01 00       	call   c0027a60 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 3a a1 01 00       	call   c00280c3 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 a1 9d 01 00       	call   c0027d44 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 20 94 01 00       	call   c00273e3 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 48 9d 01 00       	call   c0027d44 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 ce 93 01 00       	call   c00273e3 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 b4 a4 01 00       	call   c00284e0 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 8e a0 01 00       	call   c00280c3 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 e5 99 01 00       	call   c0027a34 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 c4 a2 01 00       	call   c002832f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 5d 93 01 00       	call   c00273e3 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 89 99 01 00       	call   c0027a34 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 23 a4 01 00       	call   c00284e0 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 d8 9f 01 00       	call   c00280c3 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 55 99 01 00       	call   c0027a60 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 a6 9f 01 00       	call   c00280c3 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 ac 92 01 00       	call   c00273e3 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 7c 9f 01 00       	call   c00280c3 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 d0 a1 01 00       	call   c0028331 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 a9 98 01 00       	call   c0027a34 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 23 a3 01 00       	call   c00284c0 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 52 a1 01 00       	call   c0028311 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 50 98 01 00       	call   c0027a34 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 ce 9e 01 00       	call   c00280c3 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 51 98 01 00       	call   c0027a60 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 a3 9e 01 00       	call   c00280c3 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 0a 9b 01 00       	call   c0027d44 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 89 91 01 00       	call   c00273e3 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 a5 9a 01 00       	call   c0027d44 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 24 91 01 00       	call   c00273e3 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 0a a2 01 00       	call   c00284e0 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 e4 9d 01 00       	call   c00280c3 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 3b 97 01 00       	call   c0027a34 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 1a a0 01 00       	call   c002832f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 b3 90 01 00       	call   c00273e3 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 df 96 01 00       	call   c0027a34 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 50 9d 01 00       	call   c00280c3 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 56 90 01 00       	call   c00273e3 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 de 9d 02 c0       	mov    eax,0xc0029dde
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 ef 9d 02 c0       	mov    eax,0xc0029def
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e4 13 00 00       	call   c000f853 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e6 13 00 00       	call   c000f873 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 55 13 00 00       	call   c000f843 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 26 9e 02 c0       	push   0xc0029e26
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 08 e2 02 c0       	mov    eax,0xc002e208
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 2f 9e 02 c0       	push   0xc0029e2f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 5c 68 02 c0       	mov    eax,0xc002685c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 39 9e 02 c0       	push   0xc0029e39
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 90 65 02 c0       	mov    eax,0xc0026590
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 42 9e 02 c0       	push   0xc0029e42
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 4c 9e 02 c0       	push   0xc0029e4c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 dc 66 02 c0       	mov    eax,0xc00266dc
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 55 9e 02 c0       	push   0xc0029e55
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 0c e2 02 c0       	mov    eax,0xc002e20c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 62 9e 02 c0       	push   0xc0029e62
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 0d e2 02 c0       	mov    eax,0xc002e20d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 f1 5c 00 00       	call   c0014314 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 1b 00 00       	push   0x1b3f
c000e654:	e8 ea 11 00 00       	call   c000f843 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 74 17 03 c0    	push   DWORD PTR ds:0xc0031774
c000e668:	68 6f 9e 02 c0       	push   0xc0029e6f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 09 f4 00 00       	call   c001da7e <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 f4 f6 00 00       	call   c001dd7e <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 dd e5 01 c0       	push   0xc001e5dd
c000e693:	ff 35 74 17 03 c0    	push   DWORD PTR ds:0xc0031774
c000e699:	e8 e0 f6 00 00       	call   c001dd7e <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 28 17 03 c0       	mov    ds:0xc0031728,eax
c000e6a6:	c6 05 0d e2 02 c0 01 	mov    BYTE PTR ds:0xc002e20d,0x1
c000e6ad:	e8 ab 02 01 00       	call   c001e95d <Vm::initialise8086()>
c000e6b2:	e8 45 4a 00 00       	call   c00130fc <Fs::initVFS()>
c000e6b7:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 1f dd 00 00       	call   c001c3f2 <Sys::loadSyscalls()>
c000e6d3:	e8 42 bc 00 00       	call   c001a31a <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 7c 9e 02 c0       	push   0xc0029e7c
c000e6e2:	68 85 9e 02 c0       	push   0xc0029e85
c000e6e7:	e8 54 c9 00 00       	call   c001b040 <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 f0 54 00 00       	call   c0013be4 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 e3 5b 00 00       	call   c00142e8 <Device::loadDriversForAll()>
c000e705:	e8 56 b7 00 00       	call   c0019e60 <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 08 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e208
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 8d 9e 02 c0       	push   0xc0029e8d
c000e719:	e8 68 ee 00 00       	call   c001d586 <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 ae f0 00 00       	call   c001d7d5 <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 ae f9 00 00       	call   c001e0e2 <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 a9 9e 02 c0       	push   0xc0029ea9
c000e749:	50                   	push   eax
c000e74a:	e8 3f 5c 00 00       	call   c001438e <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba 48 a0 02 c0       	mov    edx,0xc002a048
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 21 e2 02 c0 04 	test   BYTE PTR ds:0xc002e221,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 43 7c 01 00       	call   c0026526 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 54 a2 00 00       	call   c0018b72 <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 2d a2 00 00       	call   c0018b72 <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 0b a2 00 00       	call   c0018b72 <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 e9 a1 00 00       	call   c0018b72 <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 20 e2 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e220,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 f7 a0 00 00       	call   c0018aee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 d2 a0 00 00       	call   c0018aee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 ad 7a 01 00       	call   c00264e0 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 6a 7a 01 00       	call   c00264c0 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 ee a0 00 00       	call   c0018b72 <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 b9 9e 02 c0       	push   0xc0029eb9
c000eaaf:	e8 c4 42 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 cc 9e 02 c0       	push   0xc0029ecc
c000ead2:	e8 a1 42 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 dd 9e 02 c0       	push   0xc0029edd
c000eaf5:	e8 7e 42 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 ee 9e 02 c0       	push   0xc0029eee
c000eb18:	e8 5b 42 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 ff 9e 02 c0       	push   0xc0029eff
c000eb3b:	e8 38 42 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 10 9f 02 c0       	push   0xc0029f10
c000eb5e:	e8 15 42 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 21 9f 02 c0       	push   0xc0029f21
c000eb81:	e8 f2 41 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 32 9f 02 c0       	push   0xc0029f32
c000eba4:	e8 cf 41 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 43 9f 02 c0       	push   0xc0029f43
c000ebc7:	e8 ac 41 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 54 9f 02 c0       	push   0xc0029f54
c000ebea:	e8 89 41 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 65 9f 02 c0       	push   0xc0029f65
c000ec0d:	e8 66 41 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 76 9f 02 c0       	push   0xc0029f76
c000ec30:	e8 43 41 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 87 9f 02 c0       	push   0xc0029f87
c000ec53:	e8 20 41 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 98 9f 02 c0       	push   0xc0029f98
c000ec76:	e8 fd 40 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 a9 9f 02 c0       	push   0xc0029fa9
c000ec99:	e8 da 40 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 ba 9f 02 c0       	push   0xc0029fba
c000ecbc:	e8 b7 40 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 cb 9f 02 c0       	push   0xc0029fcb
c000ecdf:	e8 94 40 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 dc 9f 02 c0       	push   0xc0029fdc
c000ed02:	e8 71 40 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 ed 9f 02 c0       	push   0xc0029fed
c000ed21:	e8 52 40 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 f0 b8 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b8f0
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 41 40 00 00       	jmp    c0012d78 <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 fe 9f 02 c0       	push   0xc0029ffe
c000ee0a:	e8 44 b6 00 00       	call   c001a453 <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 04 a0 02 c0       	push   0xc002a004
c000ee42:	e8 0c b6 00 00       	call   c001a453 <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 20 e2 02 c0 04 	test   BYTE PTR ds:0xc002e220,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 44 d1 02 c0 	sete   BYTE PTR ds:0xc002d144
c000eea6:	e8 98 09 00 00       	call   c000f843 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 89 91 00 00       	call   c001803e <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 da 52 00 00       	call   c001419e <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 59 09 00 00       	call   c000f843 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 36 9d 00 00       	call   c0018c2a <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 9b 52 00 00       	call   c001419e <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 05 58 00 00       	call   c0014724 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 6b 52 00 00       	call   c001419e <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 29 ef 00 00       	call   c001de7e <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 0a a0 02 c0       	push   0xc002a00a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 d5 3d 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 1b a0 02 c0       	push   0xc002a01b
c000efc0:	e8 8e b4 00 00       	call   c001a453 <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 28 a0 02 c0       	push   0xc002a028
c000efd5:	e8 79 b4 00 00       	call   c001a453 <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 32 a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a032
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 62 b4 00 00       	jmp    c001a453 <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 6c a0 02 c0       	push   0xc002a06c
c000f086:	e8 ed 3c 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 12 e2 02 c0       	mov    ds:0xc002e212,eax
c000f0c7:	66 89 15 10 e2 02 c0 	mov    WORD PTR ds:0xc002e210,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 71 ea 00 00       	call   c001dc4f <unlockScheduler()>
c000f1de:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 08 e2 02 c0    	push   DWORD PTR ds:0xc002e208
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 34 93 01 00       	call   c0028560 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 2b 93 01 00       	call   c0028560 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 18 e2 02 c0 ff 07 	mov    WORD PTR ds:0xc002e218,0x7ff
c000f323:	a3 1a e2 02 c0       	mov    ds:0xc002e21a,eax
c000f328:	0f 01 1d 18 e2 02 c0 	lidtd  ds:0xc002e218
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 d1 27 00 00       	call   c0011de6 <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 e8 2c 00 00       	call   c0012308 <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 15 02 00 00       	call   c000f843 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 32 1e 00 00       	call   c0011470 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 63 1e 00 00       	call   c00114b0 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 08 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e208
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d 38 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d138
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 38 d1 02 c0       	mov    eax,ds:0xc002d138
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 88 a0 02 c0       	push   0xc002a088
c000f6f4:	e8 7f 36 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 38 d1 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d138,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 c7 26 00 00       	call   c0011de6 <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d 38 d1 02 c0    	mov    ebp,DWORD PTR ds:0xc002d138
c000f727:	e8 b4 07 00 00       	call   c000fee0 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 cf 2a 00 00       	call   c0012208 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d 38 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d138
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 b8 a0 02 c0       	push   0xc002a0b8
c000f7ad:	e8 a1 ac 00 00       	call   c001a453 <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 bd a0 02 c0       	push   0xc002a0bd
c000f7c3:	e8 8b ac 00 00       	call   c001a453 <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 74 e4 00 00       	call   c001dc4d <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 65 e4 00 00       	call   c001dc4f <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 eb 25 00 00       	call   c0011de6 <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	68 01 08 00 00       	push   0x801
c000f803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f807:	50                   	push   eax
c000f808:	e8 fb 2a 00 00       	call   c0012308 <VAS::allocatePages(int, int)>
c000f80d:	83 c4 1c             	add    esp,0x1c
c000f810:	c3                   	ret    

c000f811 <liballoc_free(void*, int)>:
c000f811:	83 ec 0c             	sub    esp,0xc
c000f814:	e8 cd 25 00 00       	call   c0011de6 <Virt::getAKernelVAS()>
c000f819:	83 ec 08             	sub    esp,0x8
c000f81c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f820:	50                   	push   eax
c000f821:	e8 9e 27 00 00       	call   c0011fc4 <VAS::freeAllocatedPages(unsigned long)>
c000f826:	b8 00 00 00 00       	mov    eax,0x0
c000f82b:	83 c4 1c             	add    esp,0x1c
c000f82e:	c3                   	ret    

c000f82f <realloc>:
c000f82f:	83 ec 14             	sub    esp,0x14
c000f832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83a:	e8 15 1e ff ff       	call   c0001654 <dlrealloc>
c000f83f:	83 c4 1c             	add    esp,0x1c
c000f842:	c3                   	ret    

c000f843 <malloc>:
c000f843:	83 ec 18             	sub    esp,0x18
c000f846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f84a:	e8 c8 18 ff ff       	call   c0001117 <dlmalloc>
c000f84f:	83 c4 1c             	add    esp,0x1c
c000f852:	c3                   	ret    

c000f853 <free>:
c000f853:	83 ec 18             	sub    esp,0x18
c000f856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f85a:	e8 5d 15 ff ff       	call   c0000dbc <dlfree>
c000f85f:	83 c4 1c             	add    esp,0x1c
c000f862:	c3                   	ret    

c000f863 <rfree>:
c000f863:	83 ec 18             	sub    esp,0x18
c000f866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f86a:	e8 4d 15 ff ff       	call   c0000dbc <dlfree>
c000f86f:	83 c4 1c             	add    esp,0x1c
c000f872:	c3                   	ret    

c000f873 <calloc>:
c000f873:	56                   	push   esi
c000f874:	53                   	push   ebx
c000f875:	83 ec 10             	sub    esp,0x10
c000f878:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f87c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f881:	53                   	push   ebx
c000f882:	e8 bc ff ff ff       	call   c000f843 <malloc>
c000f887:	89 c6                	mov    esi,eax
c000f889:	83 c4 0c             	add    esp,0xc
c000f88c:	53                   	push   ebx
c000f88d:	6a 00                	push   0x0
c000f88f:	50                   	push   eax
c000f890:	e8 e3 0e ff ff       	call   c0000778 <memset>
c000f895:	89 f0                	mov    eax,esi
c000f897:	83 c4 14             	add    esp,0x14
c000f89a:	5b                   	pop    ebx
c000f89b:	5e                   	pop    esi
c000f89c:	c3                   	ret    

c000f89d <hwTextMode_loadInData(VgaText*)>:
c000f89d:	55                   	push   ebp
c000f89e:	a1 40 d1 02 c0       	mov    eax,ds:0xc002d140
c000f8a3:	57                   	push   edi
c000f8a4:	56                   	push   esi
c000f8a5:	53                   	push   ebx
c000f8a6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8aa:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8b0:	85 d2                	test   edx,edx
c000f8b2:	7e 2f                	jle    c000f8e3 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b4:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8ba:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8bd:	31 f6                	xor    esi,esi
c000f8bf:	29 fd                	sub    ebp,edi
c000f8c1:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c4:	31 c0                	xor    eax,eax
c000f8c6:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8ca:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8ce:	40                   	inc    eax
c000f8cf:	83 f8 50             	cmp    eax,0x50
c000f8d2:	75 f2                	jne    c000f8c6 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d4:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8da:	46                   	inc    esi
c000f8db:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8e1:	7f de                	jg     c000f8c1 <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	5f                   	pop    edi
c000f8e6:	5d                   	pop    ebp
c000f8e7:	c3                   	ret    

c000f8e8 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e8:	55                   	push   ebp
c000f8e9:	80 3d a0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2a0,0x0
c000f8f0:	57                   	push   edi
c000f8f1:	56                   	push   esi
c000f8f2:	53                   	push   ebx
c000f8f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f7:	75 50                	jne    c000f949 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f9:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8ff:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f905:	8b 15 40 d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d140
c000f90b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90f:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f915:	eb 0e                	jmp    c000f925 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f917:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91d:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f923:	89 da                	mov    edx,ebx
c000f925:	83 e5 0f             	and    ebp,0xf
c000f928:	c1 e0 04             	shl    eax,0x4
c000f92b:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92e:	0f b6 c0             	movzx  eax,al
c000f931:	41                   	inc    ecx
c000f932:	09 e8                	or     eax,ebp
c000f934:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f938:	c1 e0 08             	shl    eax,0x8
c000f93b:	09 e8                	or     eax,ebp
c000f93d:	39 fb                	cmp    ebx,edi
c000f93f:	66 89 02             	mov    WORD PTR [edx],ax
c000f942:	75 d3                	jne    c000f917 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f944:	5b                   	pop    ebx
c000f945:	5e                   	pop    esi
c000f946:	5f                   	pop    edi
c000f947:	5d                   	pop    ebp
c000f948:	c3                   	ret    
c000f949:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f953:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95d:	31 c0                	xor    eax,eax
c000f95f:	bd 02 00 00 00       	mov    ebp,0x2
c000f964:	eb 9f                	jmp    c000f905 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f966 <hwTextMode_showCursor(VgaText*, bool)>:
c000f966:	56                   	push   esi
c000f967:	80 3d a0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2a0,0x0
c000f96e:	53                   	push   ebx
c000f96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f973:	75 39                	jne    c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f975:	84 c0                	test   al,al
c000f977:	74 38                	je     c000f9b1 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f979:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97e:	b0 0a                	mov    al,0xa
c000f980:	89 da                	mov    edx,ebx
c000f982:	ee                   	out    dx,al
c000f983:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f988:	89 ca                	mov    edx,ecx
c000f98a:	ec                   	in     al,dx
c000f98b:	b2 0f                	mov    dl,0xf
c000f98d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f991:	83 e0 c0             	and    eax,0xffffffc0
c000f994:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f99a:	09 d0                	or     eax,edx
c000f99c:	89 ca                	mov    edx,ecx
c000f99e:	ee                   	out    dx,al
c000f99f:	b0 0b                	mov    al,0xb
c000f9a1:	89 da                	mov    edx,ebx
c000f9a3:	ee                   	out    dx,al
c000f9a4:	89 ca                	mov    edx,ecx
c000f9a6:	ec                   	in     al,dx
c000f9a7:	83 e0 e0             	and    eax,0xffffffe0
c000f9aa:	83 c8 0f             	or     eax,0xf
c000f9ad:	ee                   	out    dx,al
c000f9ae:	5b                   	pop    ebx
c000f9af:	5e                   	pop    esi
c000f9b0:	c3                   	ret    
c000f9b1:	b0 0a                	mov    al,0xa
c000f9b3:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b8:	ee                   	out    dx,al
c000f9b9:	b0 20                	mov    al,0x20
c000f9bb:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9c0:	ee                   	out    dx,al
c000f9c1:	5b                   	pop    ebx
c000f9c2:	5e                   	pop    esi
c000f9c3:	c3                   	ret    

c000f9c4 <hwTextMode_update(VgaText*)>:
c000f9c4:	c3                   	ret    

c000f9c5 <hwTextMode_updateCursor(VgaText*)>:
c000f9c5:	56                   	push   esi
c000f9c6:	80 3d a0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2a0,0x0
c000f9cd:	53                   	push   ebx
c000f9ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9d2:	75 3f                	jne    c000fa13 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d4:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d9:	b9 19 00 00 00       	mov    ecx,0x19
c000f9de:	89 f2                	mov    edx,esi
c000f9e0:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e6:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9ec:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ef:	c1 e1 04             	shl    ecx,0x4
c000f9f2:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f8:	b0 0f                	mov    al,0xf
c000f9fa:	ee                   	out    dx,al
c000f9fb:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa00:	88 c8                	mov    al,cl
c000fa02:	89 da                	mov    edx,ebx
c000fa04:	ee                   	out    dx,al
c000fa05:	b0 0e                	mov    al,0xe
c000fa07:	89 f2                	mov    edx,esi
c000fa09:	ee                   	out    dx,al
c000fa0a:	89 c8                	mov    eax,ecx
c000fa0c:	89 da                	mov    edx,ebx
c000fa0e:	66 c1 e8 08          	shr    ax,0x8
c000fa12:	ee                   	out    dx,al
c000fa13:	5b                   	pop    ebx
c000fa14:	5e                   	pop    esi
c000fa15:	c3                   	ret    

c000fa16 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa1a:	80 3d a0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2a0,0x0
c000fa21:	75 38                	jne    c000fa5b <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa23:	ba da 03 00 00       	mov    edx,0x3da
c000fa28:	84 c0                	test   al,al
c000fa2a:	75 18                	jne    c000fa44 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa2c:	ec                   	in     al,dx
c000fa2d:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa32:	b0 30                	mov    al,0x30
c000fa34:	89 ca                	mov    edx,ecx
c000fa36:	ee                   	out    dx,al
c000fa37:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa3c:	ec                   	in     al,dx
c000fa3d:	83 c8 08             	or     eax,0x8
c000fa40:	89 ca                	mov    edx,ecx
c000fa42:	ee                   	out    dx,al
c000fa43:	c3                   	ret    
c000fa44:	ec                   	in     al,dx
c000fa45:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa4a:	b0 30                	mov    al,0x30
c000fa4c:	89 ca                	mov    edx,ecx
c000fa4e:	ee                   	out    dx,al
c000fa4f:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa54:	ec                   	in     al,dx
c000fa55:	83 e0 f7             	and    eax,0xfffffff7
c000fa58:	89 ca                	mov    edx,ecx
c000fa5a:	ee                   	out    dx,al
c000fa5b:	c3                   	ret    

c000fa5c <hwTextMode_scrollScreen(VgaText*)>:
c000fa5c:	55                   	push   ebp
c000fa5d:	57                   	push   edi
c000fa5e:	56                   	push   esi
c000fa5f:	53                   	push   ebx
c000fa60:	83 ec 1c             	sub    esp,0x1c
c000fa63:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa67:	80 3d a0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2a0,0x0
c000fa6e:	74 14                	je     c000fa84 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa70:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa7a:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa84:	a1 40 d1 02 c0       	mov    eax,ds:0xc002d140
c000fa89:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8e:	05 a0 00 00 00       	add    eax,0xa0
c000fa93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa97:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa9b:	31 c0                	xor    eax,eax
c000fa9d:	eb 0b                	jmp    c000faaa <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9f:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa5:	74 57                	je     c000fafe <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa7:	43                   	inc    ebx
c000faa8:	89 f0                	mov    eax,esi
c000faaa:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fab0:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab6:	88 13                	mov    BYTE PTR [ebx],dl
c000fab8:	8d 70 01             	lea    esi,[eax+0x1]
c000fabb:	83 fd 18             	cmp    ebp,0x18
c000fabe:	75 df                	jne    c000fa9f <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fac0:	a8 01                	test   al,0x1
c000fac2:	75 13                	jne    c000fad7 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac4:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac7:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000facd:	75 d8                	jne    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facf:	83 c4 1c             	add    esp,0x1c
c000fad2:	5b                   	pop    ebx
c000fad3:	5e                   	pop    esi
c000fad4:	5f                   	pop    edi
c000fad5:	5d                   	pop    ebp
c000fad6:	c3                   	ret    
c000fad7:	83 ec 08             	sub    esp,0x8
c000fada:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fae1:	50                   	push   eax
c000fae2:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae6:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faed:	50                   	push   eax
c000faee:	e8 4f 0c 00 00       	call   c0010742 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf3:	83 c4 10             	add    esp,0x10
c000faf6:	88 07                	mov    BYTE PTR [edi],al
c000faf8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fafc:	eb c9                	jmp    c000fac7 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafe:	45                   	inc    ebp
c000faff:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb07:	eb 8e                	jmp    c000fa97 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb09 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb09:	57                   	push   edi
c000fb0a:	80 3d a0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2a0,0x0
c000fb11:	56                   	push   esi
c000fb12:	53                   	push   ebx
c000fb13:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb17:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb1b:	75 65                	jne    c000fb82 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1d:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb22:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb27:	83 ec 08             	sub    esp,0x8
c000fb2a:	52                   	push   edx
c000fb2b:	50                   	push   eax
c000fb2c:	e8 11 0c 00 00       	call   c0010742 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb31:	5a                   	pop    edx
c000fb32:	0f b6 c0             	movzx  eax,al
c000fb35:	59                   	pop    ecx
c000fb36:	50                   	push   eax
c000fb37:	0f be c3             	movsx  eax,bl
c000fb3a:	50                   	push   eax
c000fb3b:	e8 a8 0c 00 00       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb40:	83 c4 10             	add    esp,0x10
c000fb43:	8b 35 40 d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d140
c000fb49:	80 3d a0 e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e2a0,0x0
c000fb50:	74 07                	je     c000fb59 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb52:	66 0f be c3          	movsx  ax,bl
c000fb56:	80 cc 02             	or     ah,0x2
c000fb59:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5d:	ba 19 00 00 00       	mov    edx,0x19
c000fb62:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb68:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb6b:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6e:	c1 e1 04             	shl    ecx,0x4
c000fb71:	c1 e2 04             	shl    edx,0x4
c000fb74:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb78:	01 ca                	add    edx,ecx
c000fb7a:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7e:	5b                   	pop    ebx
c000fb7f:	5e                   	pop    esi
c000fb80:	5f                   	pop    edi
c000fb81:	c3                   	ret    
c000fb82:	b8 02 00 00 00       	mov    eax,0x2
c000fb87:	31 d2                	xor    edx,edx
c000fb89:	eb 9c                	jmp    c000fb27 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb8b <setupTextMode()>:
c000fb8b:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb90:	83 e0 30             	and    eax,0x30
c000fb93:	66 83 f8 30          	cmp    ax,0x30
c000fb97:	75 11                	jne    c000fbaa <setupTextMode()+0x1f>
c000fb99:	81 2d 40 d1 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d140,0x8000
c000fba3:	c6 05 a0 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e2a0,0x1
c000fbaa:	c7 05 d8 e2 02 c0 16 fa 00 c0 	mov    DWORD PTR ds:0xc002e2d8,0xc000fa16
c000fbb4:	c7 05 c4 e2 02 c0 9d f8 00 c0 	mov    DWORD PTR ds:0xc002e2c4,0xc000f89d
c000fbbe:	c7 05 c0 e2 02 c0 e8 f8 00 c0 	mov    DWORD PTR ds:0xc002e2c0,0xc000f8e8
c000fbc8:	c7 05 cc e2 02 c0 5c fa 00 c0 	mov    DWORD PTR ds:0xc002e2cc,0xc000fa5c
c000fbd2:	c7 05 d4 e2 02 c0 66 f9 00 c0 	mov    DWORD PTR ds:0xc002e2d4,0xc000f966
c000fbdc:	c7 05 c8 e2 02 c0 c4 f9 00 c0 	mov    DWORD PTR ds:0xc002e2c8,0xc000f9c4
c000fbe6:	c7 05 d0 e2 02 c0 c5 f9 00 c0 	mov    DWORD PTR ds:0xc002e2d0,0xc000f9c5
c000fbf0:	c7 05 dc e2 02 c0 09 fb 00 c0 	mov    DWORD PTR ds:0xc002e2dc,0xc000fb09
c000fbfa:	c3                   	ret    

c000fbfb <kernel_main>:
c000fbfb:	57                   	push   edi
c000fbfc:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc01:	56                   	push   esi
c000fc02:	31 f6                	xor    esi,esi
c000fc04:	53                   	push   ebx
c000fc05:	83 ec 20             	sub    esp,0x20
c000fc08:	e8 8f 09 00 00       	call   c001059c <installVgaTextImplementation()>
c000fc0d:	e8 79 ff ff ff       	call   c000fb8b <setupTextMode()>
c000fc12:	89 f0                	mov    eax,esi
c000fc14:	89 fa                	mov    edx,edi
c000fc16:	ee                   	out    dx,al
c000fc17:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc1c:	b0 80                	mov    al,0x80
c000fc1e:	89 da                	mov    edx,ebx
c000fc20:	ee                   	out    dx,al
c000fc21:	b1 03                	mov    cl,0x3
c000fc23:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc28:	88 c8                	mov    al,cl
c000fc2a:	ee                   	out    dx,al
c000fc2b:	89 f0                	mov    eax,esi
c000fc2d:	89 fa                	mov    edx,edi
c000fc2f:	ee                   	out    dx,al
c000fc30:	88 c8                	mov    al,cl
c000fc32:	89 da                	mov    edx,ebx
c000fc34:	ee                   	out    dx,al
c000fc35:	b0 c7                	mov    al,0xc7
c000fc37:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc3c:	ee                   	out    dx,al
c000fc3d:	b0 0b                	mov    al,0xb
c000fc3f:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc44:	ee                   	out    dx,al
c000fc45:	83 ec 0c             	sub    esp,0xc
c000fc48:	68 c4 a0 02 c0       	push   0xc002a0c4
c000fc4d:	e8 26 31 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c000fc52:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc57:	05 ff 0f 00 00       	add    eax,0xfff
c000fc5c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc61:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc64:	e8 ee 03 00 00       	call   c0010057 <Phys::physicalMemorySetup(unsigned int)>
c000fc69:	e8 90 20 00 00       	call   c0011cfe <Virt::virtualMemorySetup()>
c000fc6e:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc74:	83 c4 10             	add    esp,0x10
c000fc77:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7d:	75 0e                	jne    c000fc8d <kernel_main+0x92>
c000fc7f:	89 d8                	mov    eax,ebx
c000fc81:	25 48 03 00 00       	and    eax,0x348
c000fc86:	3d 00 03 00 00       	cmp    eax,0x300
c000fc8b:	74 10                	je     c000fc9d <kernel_main+0xa2>
c000fc8d:	83 ec 0c             	sub    esp,0xc
c000fc90:	68 f1 b8 02 c0       	push   0xc002b8f1
c000fc95:	e8 b9 a7 00 00       	call   c001a453 <Krnl::panic(char const*)>
c000fc9a:	83 c4 10             	add    esp,0x10
c000fc9d:	83 ec 0c             	sub    esp,0xc
c000fca0:	89 1d 20 e2 02 c0    	mov    DWORD PTR ds:0xc002e220,ebx
c000fca6:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fcaa:	53                   	push   ebx
c000fcab:	e8 3c 21 00 00       	call   c0011dec <VAS::VAS()>
c000fcb0:	89 1d 8c e3 02 c0    	mov    DWORD PTR ds:0xc002e38c,ebx
c000fcb6:	e8 65 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcbb:	c7 04 24 db a0 02 c0 	mov    DWORD PTR [esp],0xc002a0db
c000fcc2:	e8 b1 30 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c000fcc7:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcce:	e8 70 fb ff ff       	call   c000f843 <malloc>
c000fcd3:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd6:	89 c6                	mov    esi,eax
c000fcd8:	e8 5d ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcdd:	58                   	pop    eax
c000fcde:	89 35 08 e2 02 c0    	mov    DWORD PTR ds:0xc002e208,esi
c000fce4:	5a                   	pop    edx
c000fce5:	56                   	push   esi
c000fce6:	68 f8 a0 02 c0       	push   0xc002a0f8
c000fceb:	e8 88 30 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c000fcf0:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c000fcf5:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf7:	6a 00                	push   0x0
c000fcf9:	6a 00                	push   0x0
c000fcfb:	6a 00                	push   0x0
c000fcfd:	50                   	push   eax
c000fcfe:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd01:	83 c4 14             	add    esp,0x14
c000fd04:	53                   	push   ebx
c000fd05:	e8 92 23 00 00       	call   c001209c <VAS::~VAS()>
c000fd0a:	c7 04 24 0b a1 02 c0 	mov    DWORD PTR [esp],0xc002a10b
c000fd11:	e8 3d a7 00 00       	call   c001a453 <Krnl::panic(char const*)>
c000fd16:	83 c4 30             	add    esp,0x30
c000fd19:	5b                   	pop    ebx
c000fd1a:	5e                   	pop    esi
c000fd1b:	5f                   	pop    edi
c000fd1c:	c3                   	ret    

c000fd1d <Phys::allocateDMA(unsigned long)>:
c000fd1d:	55                   	push   ebp
c000fd1e:	31 d2                	xor    edx,edx
c000fd20:	57                   	push   edi
c000fd21:	31 ed                	xor    ebp,ebp
c000fd23:	56                   	push   esi
c000fd24:	31 c9                	xor    ecx,ecx
c000fd26:	53                   	push   ebx
c000fd27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd31:	31 c0                	xor    eax,eax
c000fd33:	c1 ee 0c             	shr    esi,0xc
c000fd36:	eb 17                	jmp    c000fd4f <Phys::allocateDMA(unsigned long)+0x32>
c000fd38:	85 c9                	test   ecx,ecx
c000fd3a:	75 04                	jne    c000fd40 <Phys::allocateDMA(unsigned long)+0x23>
c000fd3c:	89 d5                	mov    ebp,edx
c000fd3e:	89 d0                	mov    eax,edx
c000fd40:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd43:	39 de                	cmp    esi,ebx
c000fd45:	74 20                	je     c000fd67 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd47:	42                   	inc    edx
c000fd48:	89 d9                	mov    ecx,ebx
c000fd4a:	83 fa 2f             	cmp    edx,0x2f
c000fd4d:	7f 11                	jg     c000fd60 <Phys::allocateDMA(unsigned long)+0x43>
c000fd4f:	80 ba 60 e2 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1da0],0x0
c000fd56:	74 e0                	je     c000fd38 <Phys::allocateDMA(unsigned long)+0x1b>
c000fd58:	31 c9                	xor    ecx,ecx
c000fd5a:	42                   	inc    edx
c000fd5b:	83 fa 2f             	cmp    edx,0x2f
c000fd5e:	7e ef                	jle    c000fd4f <Phys::allocateDMA(unsigned long)+0x32>
c000fd60:	5b                   	pop    ebx
c000fd61:	31 c0                	xor    eax,eax
c000fd63:	5e                   	pop    esi
c000fd64:	5f                   	pop    edi
c000fd65:	5d                   	pop    ebp
c000fd66:	c3                   	ret    
c000fd67:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6a:	89 d7                	mov    edi,edx
c000fd6c:	4f                   	dec    edi
c000fd6d:	79 03                	jns    c000fd72 <Phys::allocateDMA(unsigned long)+0x55>
c000fd6f:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd72:	c1 ff 04             	sar    edi,0x4
c000fd75:	89 c2                	mov    edx,eax
c000fd77:	c1 fa 04             	sar    edx,0x4
c000fd7a:	39 fa                	cmp    edx,edi
c000fd7c:	75 2f                	jne    c000fdad <Phys::allocateDMA(unsigned long)+0x90>
c000fd7e:	85 db                	test   ebx,ebx
c000fd80:	74 1a                	je     c000fd9c <Phys::allocateDMA(unsigned long)+0x7f>
c000fd82:	be 60 e2 02 c0       	mov    esi,0xc002e260
c000fd87:	8d 90 60 e2 02 c0    	lea    edx,[eax-0x3ffd1da0]
c000fd8d:	f7 d6                	not    esi
c000fd8f:	29 c6                	sub    esi,eax
c000fd91:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd94:	42                   	inc    edx
c000fd95:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd98:	39 d9                	cmp    ecx,ebx
c000fd9a:	7f f5                	jg     c000fd91 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9c:	85 ff                	test   edi,edi
c000fd9e:	74 13                	je     c000fdb3 <Phys::allocateDMA(unsigned long)+0x96>
c000fda0:	5b                   	pop    ebx
c000fda1:	05 50 20 0c 00       	add    eax,0xc2050
c000fda6:	5e                   	pop    esi
c000fda7:	c1 e0 0c             	shl    eax,0xc
c000fdaa:	5f                   	pop    edi
c000fdab:	5d                   	pop    ebp
c000fdac:	c3                   	ret    
c000fdad:	89 ea                	mov    edx,ebp
c000fdaf:	31 c9                	xor    ecx,ecx
c000fdb1:	eb a7                	jmp    c000fd5a <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb3:	5b                   	pop    ebx
c000fdb4:	c1 e0 0c             	shl    eax,0xc
c000fdb7:	5e                   	pop    esi
c000fdb8:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdbd:	5f                   	pop    edi
c000fdbe:	5d                   	pop    ebp
c000fdbf:	c3                   	ret    

c000fdc0 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdc8:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdce:	c1 e9 0c             	shr    ecx,0xc
c000fdd1:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd6:	76 25                	jbe    c000fdfd <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdd8:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fddd:	c1 e8 0c             	shr    eax,0xc
c000fde0:	8d 50 10             	lea    edx,[eax+0x10]
c000fde3:	85 c9                	test   ecx,ecx
c000fde5:	74 15                	je     c000fdfc <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde7:	8d 82 60 e2 02 c0    	lea    eax,[edx-0x3ffd1da0]
c000fded:	8d 94 11 60 e2 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1da0]
c000fdf4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf7:	40                   	inc    eax
c000fdf8:	39 d0                	cmp    eax,edx
c000fdfa:	75 f8                	jne    c000fdf4 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdfc:	c3                   	ret    
c000fdfd:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe03:	c1 ea 0c             	shr    edx,0xc
c000fe06:	eb db                	jmp    c000fde3 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe08 <Phys::setPageState(unsigned long, bool)>:
c000fe08:	56                   	push   esi
c000fe09:	ba 01 00 00 00       	mov    edx,0x1
c000fe0e:	53                   	push   ebx
c000fe0f:	8b 35 3c d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d13c
c000fe15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe19:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1d:	89 c8                	mov    eax,ecx
c000fe1f:	83 e1 07             	and    ecx,0x7
c000fe22:	c1 e8 03             	shr    eax,0x3
c000fe25:	d3 e3                	shl    ebx,cl
c000fe27:	01 c6                	add    esi,eax
c000fe29:	d3 e2                	shl    edx,cl
c000fe2b:	f7 d2                	not    edx
c000fe2d:	20 16                	and    BYTE PTR [esi],dl
c000fe2f:	03 05 3c d1 02 c0    	add    eax,DWORD PTR ds:0xc002d13c
c000fe35:	08 18                	or     BYTE PTR [eax],bl
c000fe37:	5b                   	pop    ebx
c000fe38:	5e                   	pop    esi
c000fe39:	c3                   	ret    

c000fe3a <Phys::getPageState(unsigned long)>:
c000fe3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe3e:	8b 15 3c d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d13c
c000fe44:	89 c8                	mov    eax,ecx
c000fe46:	83 e1 07             	and    ecx,0x7
c000fe49:	c1 e8 03             	shr    eax,0x3
c000fe4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe50:	d3 f8                	sar    eax,cl
c000fe52:	83 e0 01             	and    eax,0x1
c000fe55:	c3                   	ret    

c000fe56 <Phys::freePage(unsigned long)>:
c000fe56:	53                   	push   ebx
c000fe57:	83 ec 08             	sub    esp,0x8
c000fe5a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe5e:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe64:	76 57                	jbe    c000febd <Phys::freePage(unsigned long)+0x67>
c000fe66:	c1 eb 0c             	shr    ebx,0xc
c000fe69:	53                   	push   ebx
c000fe6a:	e8 cb ff ff ff       	call   c000fe3a <Phys::getPageState(unsigned long)>
c000fe6f:	5a                   	pop    edx
c000fe70:	84 c0                	test   al,al
c000fe72:	74 5b                	je     c000fecf <Phys::freePage(unsigned long)+0x79>
c000fe74:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c000fe79:	48                   	dec    eax
c000fe7a:	a3 50 e2 02 c0       	mov    ds:0xc002e250,eax
c000fe7f:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe82:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe85:	c1 e0 02             	shl    eax,0x2
c000fe88:	99                   	cdq    
c000fe89:	f7 3d 54 e2 02 c0    	idiv   DWORD PTR ds:0xc002e254
c000fe8f:	39 05 4c e2 02 c0    	cmp    DWORD PTR ds:0xc002e24c,eax
c000fe95:	75 13                	jne    c000feaa <Phys::freePage(unsigned long)+0x54>
c000fe97:	83 ec 08             	sub    esp,0x8
c000fe9a:	6a 00                	push   0x0
c000fe9c:	53                   	push   ebx
c000fe9d:	e8 66 ff ff ff       	call   c000fe08 <Phys::setPageState(unsigned long, bool)>
c000fea2:	83 c4 10             	add    esp,0x10
c000fea5:	83 c4 08             	add    esp,0x8
c000fea8:	5b                   	pop    ebx
c000fea9:	c3                   	ret    
c000feaa:	83 ec 0c             	sub    esp,0xc
c000fead:	a3 4c e2 02 c0       	mov    ds:0xc002e24c,eax
c000feb2:	50                   	push   eax
c000feb3:	e8 78 0a 00 00       	call   c0010930 <VgaText::updateRAMUsageDisplay(int)>
c000feb8:	83 c4 10             	add    esp,0x10
c000febb:	eb da                	jmp    c000fe97 <Phys::freePage(unsigned long)+0x41>
c000febd:	68 00 10 00 00       	push   0x1000
c000fec2:	53                   	push   ebx
c000fec3:	e8 f8 fe ff ff       	call   c000fdc0 <Phys::freeDMA(unsigned long, unsigned long)>
c000fec8:	59                   	pop    ecx
c000fec9:	5b                   	pop    ebx
c000feca:	83 c4 08             	add    esp,0x8
c000fecd:	5b                   	pop    ebx
c000fece:	c3                   	ret    
c000fecf:	c7 44 24 10 26 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a126
c000fed7:	83 c4 08             	add    esp,0x8
c000feda:	5b                   	pop    ebx
c000fedb:	e9 73 a5 00 00       	jmp    c001a453 <Krnl::panic(char const*)>

c000fee0 <Phys::allocatePage()>:
c000fee0:	56                   	push   esi
c000fee1:	53                   	push   ebx
c000fee2:	51                   	push   ecx
c000fee3:	8b 35 44 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e244
c000fee9:	89 f3                	mov    ebx,esi
c000feeb:	eb 0a                	jmp    c000fef7 <Phys::allocatePage()+0x17>
c000feed:	89 1d 44 e2 02 c0    	mov    DWORD PTR ds:0xc002e244,ebx
c000fef3:	39 de                	cmp    esi,ebx
c000fef5:	74 24                	je     c000ff1b <Phys::allocatePage()+0x3b>
c000fef7:	53                   	push   ebx
c000fef8:	e8 3d ff ff ff       	call   c000fe3a <Phys::getPageState(unsigned long)>
c000fefd:	5a                   	pop    edx
c000fefe:	84 c0                	test   al,al
c000ff00:	74 77                	je     c000ff79 <Phys::allocatePage()+0x99>
c000ff02:	43                   	inc    ebx
c000ff03:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff09:	75 e2                	jne    c000feed <Phys::allocatePage()+0xd>
c000ff0b:	31 db                	xor    ebx,ebx
c000ff0d:	c7 05 44 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e244,0x0
c000ff17:	39 de                	cmp    esi,ebx
c000ff19:	75 dc                	jne    c000fef7 <Phys::allocatePage()+0x17>
c000ff1b:	83 ec 0c             	sub    esp,0xc
c000ff1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff23:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff26:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c000ff2c:	e8 43 2b 00 00       	call   c0012a74 <VAS::scanForEviction()>
c000ff31:	83 c4 10             	add    esp,0x10
c000ff34:	85 c0                	test   eax,eax
c000ff36:	75 76                	jne    c000ffae <Phys::allocatePage()+0xce>
c000ff38:	83 ec 0c             	sub    esp,0xc
c000ff3b:	68 3c a1 02 c0       	push   0xc002a13c
c000ff40:	e8 33 2e 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c000ff45:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff4c:	e8 cc fd ff ff       	call   c000fd1d <Phys::allocateDMA(unsigned long)>
c000ff51:	83 c4 10             	add    esp,0x10
c000ff54:	85 c0                	test   eax,eax
c000ff56:	75 56                	jne    c000ffae <Phys::allocatePage()+0xce>
c000ff58:	83 ec 0c             	sub    esp,0xc
c000ff5b:	68 4d a1 02 c0       	push   0xc002a14d
c000ff60:	e8 ee a4 00 00       	call   c001a453 <Krnl::panic(char const*)>
c000ff65:	83 c4 10             	add    esp,0x10
c000ff68:	8b 1d 44 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e244
c000ff6e:	53                   	push   ebx
c000ff6f:	e8 c6 fe ff ff       	call   c000fe3a <Phys::getPageState(unsigned long)>
c000ff74:	5a                   	pop    edx
c000ff75:	84 c0                	test   al,al
c000ff77:	75 89                	jne    c000ff02 <Phys::allocatePage()+0x22>
c000ff79:	6a 01                	push   0x1
c000ff7b:	53                   	push   ebx
c000ff7c:	e8 87 fe ff ff       	call   c000fe08 <Phys::setPageState(unsigned long, bool)>
c000ff81:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c000ff86:	59                   	pop    ecx
c000ff87:	40                   	inc    eax
c000ff88:	5b                   	pop    ebx
c000ff89:	a3 50 e2 02 c0       	mov    ds:0xc002e250,eax
c000ff8e:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff91:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff94:	c1 e0 02             	shl    eax,0x2
c000ff97:	99                   	cdq    
c000ff98:	f7 3d 54 e2 02 c0    	idiv   DWORD PTR ds:0xc002e254
c000ff9e:	39 05 4c e2 02 c0    	cmp    DWORD PTR ds:0xc002e24c,eax
c000ffa4:	75 0c                	jne    c000ffb2 <Phys::allocatePage()+0xd2>
c000ffa6:	a1 44 e2 02 c0       	mov    eax,ds:0xc002e244
c000ffab:	c1 e0 0c             	shl    eax,0xc
c000ffae:	5a                   	pop    edx
c000ffaf:	5b                   	pop    ebx
c000ffb0:	5e                   	pop    esi
c000ffb1:	c3                   	ret    
c000ffb2:	83 ec 0c             	sub    esp,0xc
c000ffb5:	a3 4c e2 02 c0       	mov    ds:0xc002e24c,eax
c000ffba:	50                   	push   eax
c000ffbb:	e8 70 09 00 00       	call   c0010930 <VgaText::updateRAMUsageDisplay(int)>
c000ffc0:	83 c4 10             	add    esp,0x10
c000ffc3:	eb e1                	jmp    c000ffa6 <Phys::allocatePage()+0xc6>

c000ffc5 <Phys::allocateContiguousPages(int)>:
c000ffc5:	57                   	push   edi
c000ffc6:	56                   	push   esi
c000ffc7:	53                   	push   ebx
c000ffc8:	31 db                	xor    ebx,ebx
c000ffca:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffce:	e8 7a dc 00 00       	call   c001dc4d <lockScheduler()>
c000ffd3:	85 db                	test   ebx,ebx
c000ffd5:	75 11                	jne    c000ffe8 <Phys::allocateContiguousPages(int)+0x23>
c000ffd7:	e8 04 ff ff ff       	call   c000fee0 <Phys::allocatePage()>
c000ffdc:	83 ff 01             	cmp    edi,0x1
c000ffdf:	89 c6                	mov    esi,eax
c000ffe1:	74 21                	je     c0010004 <Phys::allocateContiguousPages(int)+0x3f>
c000ffe3:	bb 01 00 00 00       	mov    ebx,0x1
c000ffe8:	e8 f3 fe ff ff       	call   c000fee0 <Phys::allocatePage()>
c000ffed:	89 da                	mov    edx,ebx
c000ffef:	c1 e2 0c             	shl    edx,0xc
c000fff2:	01 f2                	add    edx,esi
c000fff4:	39 c2                	cmp    edx,eax
c000fff6:	74 17                	je     c001000f <Phys::allocateContiguousPages(int)+0x4a>
c000fff8:	bb 01 00 00 00       	mov    ebx,0x1
c000fffd:	89 c6                	mov    esi,eax
c000ffff:	83 ff 01             	cmp    edi,0x1
c0010002:	75 e4                	jne    c000ffe8 <Phys::allocateContiguousPages(int)+0x23>
c0010004:	e8 46 dc 00 00       	call   c001dc4f <unlockScheduler()>
c0010009:	89 f0                	mov    eax,esi
c001000b:	5b                   	pop    ebx
c001000c:	5e                   	pop    esi
c001000d:	5f                   	pop    edi
c001000e:	c3                   	ret    
c001000f:	43                   	inc    ebx
c0010010:	39 fb                	cmp    ebx,edi
c0010012:	75 bf                	jne    c000ffd3 <Phys::allocateContiguousPages(int)+0xe>
c0010014:	e8 36 dc 00 00       	call   c001dc4f <unlockScheduler()>
c0010019:	89 f0                	mov    eax,esi
c001001b:	5b                   	pop    ebx
c001001c:	5e                   	pop    esi
c001001d:	5f                   	pop    edi
c001001e:	c3                   	ret    

c001001f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001001f:	56                   	push   esi
c0010020:	53                   	push   ebx
c0010021:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010025:	39 1d 48 e2 02 c0    	cmp    DWORD PTR ds:0xc002e248,ebx
c001002b:	73 06                	jae    c0010033 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001002d:	89 1d 48 e2 02 c0    	mov    DWORD PTR ds:0xc002e248,ebx
c0010033:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010037:	c1 eb 0c             	shr    ebx,0xc
c001003a:	c1 e8 0c             	shr    eax,0xc
c001003d:	39 d8                	cmp    eax,ebx
c001003f:	73 13                	jae    c0010054 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010041:	6a 00                	push   0x0
c0010043:	8d 70 01             	lea    esi,[eax+0x1]
c0010046:	50                   	push   eax
c0010047:	e8 bc fd ff ff       	call   c000fe08 <Phys::setPageState(unsigned long, bool)>
c001004c:	5a                   	pop    edx
c001004d:	89 f0                	mov    eax,esi
c001004f:	59                   	pop    ecx
c0010050:	39 f3                	cmp    ebx,esi
c0010052:	75 ed                	jne    c0010041 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010054:	5b                   	pop    ebx
c0010055:	5e                   	pop    esi
c0010056:	c3                   	ret    

c0010057 <Phys::physicalMemorySetup(unsigned int)>:
c0010057:	55                   	push   ebp
c0010058:	57                   	push   edi
c0010059:	56                   	push   esi
c001005a:	53                   	push   ebx
c001005b:	31 db                	xor    ebx,ebx
c001005d:	83 ec 40             	sub    esp,0x40
c0010060:	6a 30                	push   0x30
c0010062:	6a 00                	push   0x0
c0010064:	68 60 e2 02 c0       	push   0xc002e260
c0010069:	e8 0a 07 ff ff       	call   c0000778 <memset>
c001006e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010072:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010077:	05 00 10 00 00       	add    eax,0x1000
c001007c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010080:	83 c4 10             	add    esp,0x10
c0010083:	83 ec 08             	sub    esp,0x8
c0010086:	6a 01                	push   0x1
c0010088:	53                   	push   ebx
c0010089:	43                   	inc    ebx
c001008a:	e8 79 fd ff ff       	call   c000fe08 <Phys::setPageState(unsigned long, bool)>
c001008f:	83 c4 10             	add    esp,0x10
c0010092:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010098:	75 e9                	jne    c0010083 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c001009a:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100a1:	66 85 c0             	test   ax,ax
c00100a4:	0f 84 8e 01 00 00    	je     c0010238 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100aa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100ae:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100b6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100ba:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100c3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100cb:	eb 15                	jmp    c00100e2 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100cd:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100d1:	83 c3 18             	add    ebx,0x18
c00100d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100dc:	0f 84 66 01 00 00    	je     c0010248 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100e2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100e5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100e8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100ef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00100f3:	8b 33                	mov    esi,DWORD PTR [ebx]
c00100f5:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00100f8:	01 f0                	add    eax,esi
c00100fa:	55                   	push   ebp
c00100fb:	11 fa                	adc    edx,edi
c00100fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010101:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010105:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010109:	56                   	push   esi
c001010a:	68 88 a1 02 c0       	push   0xc002a188
c001010f:	e8 64 2c 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0010114:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010118:	83 c4 10             	add    esp,0x10
c001011b:	09 f8                	or     eax,edi
c001011d:	0f 85 25 01 00 00    	jne    c0010248 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010123:	4d                   	dec    ebp
c0010124:	75 a7                	jne    c00100cd <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010126:	ba 00 00 08 00       	mov    edx,0x80000
c001012b:	89 c1                	mov    ecx,eax
c001012d:	39 f2                	cmp    edx,esi
c001012f:	19 f9                	sbb    ecx,edi
c0010131:	0f 82 a7 00 00 00    	jb     c00101de <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010137:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001013b:	89 c1                	mov    ecx,eax
c001013d:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010141:	0f 83 97 00 00 00    	jae    c00101de <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010147:	ba 00 00 0a 00       	mov    edx,0xa0000
c001014c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010150:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010154:	39 fa                	cmp    edx,edi
c0010156:	19 e8                	sbb    eax,ebp
c0010158:	0f 82 14 01 00 00    	jb     c0010272 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c001015e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010162:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010166:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c001016c:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010171:	83 d5 ff             	adc    ebp,0xffffffff
c0010174:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010178:	31 c0                	xor    eax,eax
c001017a:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c001017e:	39 fa                	cmp    edx,edi
c0010180:	89 c1                	mov    ecx,eax
c0010182:	19 e9                	sbb    ecx,ebp
c0010184:	0f 83 43 ff ff ff    	jae    c00100cd <Phys::physicalMemorySetup(unsigned int)+0x76>
c001018a:	be 00 00 08 00       	mov    esi,0x80000
c001018f:	50                   	push   eax
c0010190:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010194:	57                   	push   edi
c0010195:	56                   	push   esi
c0010196:	68 ac a1 02 c0       	push   0xc002a1ac
c001019b:	e8 d8 2b 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00101a0:	5a                   	pop    edx
c00101a1:	59                   	pop    ecx
c00101a2:	57                   	push   edi
c00101a3:	56                   	push   esi
c00101a4:	e8 76 fe ff ff       	call   c001001f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101a9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101b1:	83 c4 0c             	add    esp,0xc
c00101b4:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101b8:	03 05 54 e2 02 c0    	add    eax,DWORD PTR ds:0xc002e254
c00101be:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101c5:	a3 54 e2 02 c0       	mov    ds:0xc002e254,eax
c00101ca:	52                   	push   edx
c00101cb:	50                   	push   eax
c00101cc:	68 69 a1 02 c0       	push   0xc002a169
c00101d1:	e8 a2 2b 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00101d6:	83 c4 10             	add    esp,0x10
c00101d9:	e9 ef fe ff ff       	jmp    c00100cd <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101de:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101ea:	39 ea                	cmp    edx,ebp
c00101ec:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101f0:	0f 82 d7 fe ff ff    	jb     c00100cd <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101f6:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101fb:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00101ff:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010203:	0f 83 c4 fe ff ff    	jae    c00100cd <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010209:	39 ee                	cmp    esi,ebp
c001020b:	89 f8                	mov    eax,edi
c001020d:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010211:	0f 83 78 ff ff ff    	jae    c001018f <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010217:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001021b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001021f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010223:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010227:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001022b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001022f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010233:	e9 57 ff ff ff       	jmp    c001018f <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010238:	83 ec 0c             	sub    esp,0xc
c001023b:	68 5b a1 02 c0       	push   0xc002a15b
c0010240:	e8 0e a2 00 00       	call   c001a453 <Krnl::panic(char const*)>
c0010245:	83 c4 10             	add    esp,0x10
c0010248:	bb 40 01 00 00       	mov    ebx,0x140
c001024d:	83 ec 08             	sub    esp,0x8
c0010250:	6a 00                	push   0x0
c0010252:	53                   	push   ebx
c0010253:	43                   	inc    ebx
c0010254:	e8 af fb ff ff       	call   c000fe08 <Phys::setPageState(unsigned long, bool)>
c0010259:	ff 05 54 e2 02 c0    	inc    DWORD PTR ds:0xc002e254
c001025f:	83 c4 10             	add    esp,0x10
c0010262:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010268:	75 e3                	jne    c001024d <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c001026a:	83 c4 3c             	add    esp,0x3c
c001026d:	5b                   	pop    ebx
c001026e:	5e                   	pop    esi
c001026f:	5f                   	pop    edi
c0010270:	5d                   	pop    ebp
c0010271:	c3                   	ret    
c0010272:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c001027a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010282:	e9 d7 fe ff ff       	jmp    c001015e <Phys::physicalMemorySetup(unsigned int)+0x107>
c0010287:	90                   	nop

c0010288 <Pipe::isAtty()>:
c0010288:	31 c0                	xor    eax,eax
c001028a:	c3                   	ret    
c001028b:	90                   	nop

c001028c <Pipe::~Pipe()>:
c001028c:	83 ec 0c             	sub    esp,0xc
c001028f:	ba 18 a2 02 c0       	mov    edx,0xc002a218
c0010294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010298:	89 10                	mov    DWORD PTR [eax],edx
c001029a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001029e:	83 ec 0c             	sub    esp,0xc
c00102a1:	50                   	push   eax
c00102a2:	e8 37 16 00 00       	call   c00118de <UnixFile::~UnixFile()>
c00102a7:	83 c4 10             	add    esp,0x10
c00102aa:	90                   	nop
c00102ab:	83 c4 0c             	add    esp,0xc
c00102ae:	c3                   	ret    
c00102af:	90                   	nop

c00102b0 <Pipe::~Pipe()>:
c00102b0:	83 ec 0c             	sub    esp,0xc
c00102b3:	83 ec 0c             	sub    esp,0xc
c00102b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102ba:	e8 cd ff ff ff       	call   c001028c <Pipe::~Pipe()>
c00102bf:	83 c4 10             	add    esp,0x10
c00102c2:	83 ec 08             	sub    esp,0x8
c00102c5:	6a 20                	push   0x20
c00102c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102cb:	e8 c8 29 00 00       	call   c0012c98 <operator delete(void*, unsigned long)>
c00102d0:	83 c4 10             	add    esp,0x10
c00102d3:	83 c4 0c             	add    esp,0xc
c00102d6:	c3                   	ret    
c00102d7:	90                   	nop

c00102d8 <Pipe::read(unsigned long long, void*, int*)>:
c00102d8:	55                   	push   ebp
c00102d9:	57                   	push   edi
c00102da:	56                   	push   esi
c00102db:	53                   	push   ebx
c00102dc:	83 ec 1c             	sub    esp,0x1c
c00102df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102e3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102e7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102eb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102ee:	89 c8                	mov    eax,ecx
c00102f0:	99                   	cdq    
c00102f1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00102f5:	74 19                	je     c0010310 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102f7:	39 f9                	cmp    ecx,edi
c00102f9:	89 d1                	mov    ecx,edx
c00102fb:	19 f1                	sbb    ecx,esi
c00102fd:	73 11                	jae    c0010310 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102ff:	e8 49 d9 00 00       	call   c001dc4d <lockScheduler()>
c0010304:	e8 7f dc 00 00       	call   c001df88 <schedule()>
c0010309:	e8 41 d9 00 00       	call   c001dc4f <unlockScheduler()>
c001030e:	eb db                	jmp    c00102eb <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010310:	39 f8                	cmp    eax,edi
c0010312:	89 d1                	mov    ecx,edx
c0010314:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010318:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001031c:	19 f1                	sbb    ecx,esi
c001031e:	73 08                	jae    c0010328 <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010320:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010324:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010328:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001032b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001032e:	29 c6                	sub    esi,eax
c0010330:	89 f1                	mov    ecx,esi
c0010332:	c1 f9 1f             	sar    ecx,0x1f
c0010335:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010339:	89 ca                	mov    edx,ecx
c001033b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001033f:	19 d1                	sbb    ecx,edx
c0010341:	73 04                	jae    c0010347 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c0010343:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010347:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001034b:	89 fd                	mov    ebp,edi
c001034d:	29 f5                	sub    ebp,esi
c001034f:	85 f6                	test   esi,esi
c0010351:	74 12                	je     c0010365 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c0010353:	52                   	push   edx
c0010354:	56                   	push   esi
c0010355:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010358:	50                   	push   eax
c0010359:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001035d:	e8 e2 03 ff ff       	call   c0000744 <memcpy>
c0010362:	83 c4 10             	add    esp,0x10
c0010365:	85 ed                	test   ebp,ebp
c0010367:	74 12                	je     c001037b <Pipe::read(unsigned long long, void*, int*)+0xa3>
c0010369:	50                   	push   eax
c001036a:	55                   	push   ebp
c001036b:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001036e:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010372:	56                   	push   esi
c0010373:	e8 cc 03 ff ff       	call   c0000744 <memcpy>
c0010378:	83 c4 10             	add    esp,0x10
c001037b:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c001037e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010381:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010384:	99                   	cdq    
c0010385:	89 f7                	mov    edi,esi
c0010387:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001038b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001038f:	c1 ff 1f             	sar    edi,0x1f
c0010392:	57                   	push   edi
c0010393:	56                   	push   esi
c0010394:	52                   	push   edx
c0010395:	50                   	push   eax
c0010396:	e8 c1 65 01 00       	call   c002695c <__umoddi3>
c001039b:	83 c4 10             	add    esp,0x10
c001039e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103a1:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103a6:	75 10                	jne    c00103b8 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00103a8:	83 ec 0c             	sub    esp,0xc
c00103ab:	68 d5 a1 02 c0       	push   0xc002a1d5
c00103b0:	e8 9e a0 00 00       	call   c001a453 <Krnl::panic(char const*)>
c00103b5:	83 c4 10             	add    esp,0x10
c00103b8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103c0:	89 10                	mov    DWORD PTR [eax],edx
c00103c2:	83 c4 1c             	add    esp,0x1c
c00103c5:	31 c0                	xor    eax,eax
c00103c7:	5b                   	pop    ebx
c00103c8:	5e                   	pop    esi
c00103c9:	5f                   	pop    edi
c00103ca:	5d                   	pop    ebp
c00103cb:	c3                   	ret    

c00103cc <Pipe::write(unsigned long long, void*, int*)>:
c00103cc:	55                   	push   ebp
c00103cd:	57                   	push   edi
c00103ce:	56                   	push   esi
c00103cf:	53                   	push   ebx
c00103d0:	83 ec 1c             	sub    esp,0x1c
c00103d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103d7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103db:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103df:	89 04 24             	mov    DWORD PTR [esp],eax
c00103e2:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00103e5:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00103e8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103ec:	89 de                	mov    esi,ebx
c00103ee:	89 df                	mov    edi,ebx
c00103f0:	c1 ff 1f             	sar    edi,0x1f
c00103f3:	01 c6                	add    esi,eax
c00103f5:	89 c8                	mov    eax,ecx
c00103f7:	11 d7                	adc    edi,edx
c00103f9:	99                   	cdq    
c00103fa:	39 f1                	cmp    ecx,esi
c00103fc:	89 d0                	mov    eax,edx
c00103fe:	19 f8                	sbb    eax,edi
c0010400:	b8 01 00 00 00       	mov    eax,0x1
c0010405:	0f 82 80 00 00 00    	jb     c001048b <Pipe::write(unsigned long long, void*, int*)+0xbf>
c001040b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001040e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010411:	01 d8                	add    eax,ebx
c0010413:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010417:	99                   	cdq    
c0010418:	f7 f9                	idiv   ecx
c001041a:	29 d1                	sub    ecx,edx
c001041c:	89 d7                	mov    edi,edx
c001041e:	89 c8                	mov    eax,ecx
c0010420:	99                   	cdq    
c0010421:	39 ce                	cmp    esi,ecx
c0010423:	19 d3                	sbb    ebx,edx
c0010425:	bb 00 00 00 00       	mov    ebx,0x0
c001042a:	72 04                	jb     c0010430 <Pipe::write(unsigned long long, void*, int*)+0x64>
c001042c:	89 f3                	mov    ebx,esi
c001042e:	29 cb                	sub    ebx,ecx
c0010430:	89 f1                	mov    ecx,esi
c0010432:	29 d9                	sub    ecx,ebx
c0010434:	74 1a                	je     c0010450 <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010436:	52                   	push   edx
c0010437:	51                   	push   ecx
c0010438:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001043c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010440:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010443:	57                   	push   edi
c0010444:	e8 fb 02 ff ff       	call   c0000744 <memcpy>
c0010449:	83 c4 10             	add    esp,0x10
c001044c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010450:	85 db                	test   ebx,ebx
c0010452:	74 12                	je     c0010466 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010454:	50                   	push   eax
c0010455:	53                   	push   ebx
c0010456:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c001045a:	51                   	push   ecx
c001045b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001045e:	e8 e1 02 ff ff       	call   c0000744 <memcpy>
c0010463:	83 c4 10             	add    esp,0x10
c0010466:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c0010469:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001046e:	75 10                	jne    c0010480 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010470:	83 ec 0c             	sub    esp,0xc
c0010473:	68 f1 a1 02 c0       	push   0xc002a1f1
c0010478:	e8 d6 9f 00 00       	call   c001a453 <Krnl::panic(char const*)>
c001047d:	83 c4 10             	add    esp,0x10
c0010480:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010484:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010487:	89 38                	mov    DWORD PTR [eax],edi
c0010489:	31 c0                	xor    eax,eax
c001048b:	83 c4 1c             	add    esp,0x1c
c001048e:	5b                   	pop    ebx
c001048f:	5e                   	pop    esi
c0010490:	5f                   	pop    edi
c0010491:	5d                   	pop    ebp
c0010492:	c3                   	ret    
c0010493:	90                   	nop

c0010494 <Pipe::Pipe(int)>:
c0010494:	83 ec 0c             	sub    esp,0xc
c0010497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001049b:	83 ec 08             	sub    esp,0x8
c001049e:	6a 00                	push   0x0
c00104a0:	50                   	push   eax
c00104a1:	e8 56 12 00 00       	call   c00116fc <UnixFile::UnixFile(int)>
c00104a6:	83 c4 10             	add    esp,0x10
c00104a9:	ba 18 a2 02 c0       	mov    edx,0xc002a218
c00104ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b2:	89 10                	mov    DWORD PTR [eax],edx
c00104b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104bc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ce:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104d9:	83 ec 0c             	sub    esp,0xc
c00104dc:	50                   	push   eax
c00104dd:	e8 61 f3 ff ff       	call   c000f843 <malloc>
c00104e2:	83 c4 10             	add    esp,0x10
c00104e5:	89 c2                	mov    edx,eax
c00104e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104eb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00104f6:	90                   	nop
c00104f7:	83 c4 0c             	add    esp,0xc
c00104fa:	c3                   	ret    
c00104fb:	90                   	nop

c00104fc <VgaText::isAtty()>:
c00104fc:	b0 01                	mov    al,0x1
c00104fe:	c3                   	ret    
c00104ff:	90                   	nop

c0010500 <VgaText::~VgaText()>:
c0010500:	83 ec 0c             	sub    esp,0xc
c0010503:	ba d4 a2 02 c0       	mov    edx,0xc002a2d4
c0010508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050c:	89 10                	mov    DWORD PTR [eax],edx
c001050e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010512:	83 ec 0c             	sub    esp,0xc
c0010515:	50                   	push   eax
c0010516:	e8 c3 13 00 00       	call   c00118de <UnixFile::~UnixFile()>
c001051b:	83 c4 10             	add    esp,0x10
c001051e:	90                   	nop
c001051f:	83 c4 0c             	add    esp,0xc
c0010522:	c3                   	ret    
c0010523:	90                   	nop

c0010524 <VgaText::~VgaText()>:
c0010524:	83 ec 0c             	sub    esp,0xc
c0010527:	83 ec 0c             	sub    esp,0xc
c001052a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001052e:	e8 cd ff ff ff       	call   c0010500 <VgaText::~VgaText()>
c0010533:	83 c4 10             	add    esp,0x10
c0010536:	83 ec 08             	sub    esp,0x8
c0010539:	68 60 12 00 00       	push   0x1260
c001053e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010542:	e8 51 27 00 00       	call   c0012c98 <operator delete(void*, unsigned long)>
c0010547:	83 c4 10             	add    esp,0x10
c001054a:	83 c4 0c             	add    esp,0xc
c001054d:	c3                   	ret    

c001054e <VgaText::read(unsigned long long, void*, int*)>:
c001054e:	83 ec 10             	sub    esp,0x10
c0010551:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010555:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010559:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001055d:	e8 ee 5b 00 00       	call   c0016150 <readKeyboard(VgaText*, char*, unsigned long)>
c0010562:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010566:	89 02                	mov    DWORD PTR [edx],eax
c0010568:	31 c0                	xor    eax,eax
c001056a:	83 c4 1c             	add    esp,0x1c
c001056d:	c3                   	ret    

c001056e <setTerminalScrollLock(bool)>:
c001056e:	c3                   	ret    

c001056f <addToTerminalCycle(VgaText*)>:
c001056f:	8b 15 e0 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e2e0
c0010575:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010579:	85 d2                	test   edx,edx
c001057b:	75 0c                	jne    c0010589 <addToTerminalCycle(VgaText*)+0x1a>
c001057d:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010583:	a3 e0 e2 02 c0       	mov    ds:0xc002e2e0,eax
c0010588:	c3                   	ret    
c0010589:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c001058f:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c0010595:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c001059b:	c3                   	ret    

c001059c <installVgaTextImplementation()>:
c001059c:	83 ec 10             	sub    esp,0x10
c001059f:	6a 20                	push   0x20
c00105a1:	6a 00                	push   0x0
c00105a3:	68 c0 e2 02 c0       	push   0xc002e2c0
c00105a8:	e8 cb 01 ff ff       	call   c0000778 <memset>
c00105ad:	83 c4 1c             	add    esp,0x1c
c00105b0:	c3                   	ret    

c00105b1 <scrollTerminalScrollLock(int)>:
c00105b1:	c3                   	ret    

c00105b2 <VgaText::load()>:
c00105b2:	53                   	push   ebx
c00105b3:	31 c0                	xor    eax,eax
c00105b5:	83 ec 58             	sub    esp,0x58
c00105b8:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105bc:	89 e2                	mov    edx,esp
c00105be:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105c2:	40                   	inc    eax
c00105c3:	83 f8 50             	cmp    eax,0x50
c00105c6:	75 f6                	jne    c00105be <VgaText::load()+0xc>
c00105c8:	31 c0                	xor    eax,eax
c00105ca:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00105d1:	84 c9                	test   cl,cl
c00105d3:	74 06                	je     c00105db <VgaText::load()+0x29>
c00105d5:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105d8:	40                   	inc    eax
c00105d9:	eb ef                	jmp    c00105ca <VgaText::load()+0x18>
c00105db:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00105e1:	85 c0                	test   eax,eax
c00105e3:	74 09                	je     c00105ee <VgaText::load()+0x3c>
c00105e5:	51                   	push   ecx
c00105e6:	51                   	push   ecx
c00105e7:	52                   	push   edx
c00105e8:	53                   	push   ebx
c00105e9:	ff d0                	call   eax
c00105eb:	83 c4 10             	add    esp,0x10
c00105ee:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00105f4:	85 c0                	test   eax,eax
c00105f6:	74 09                	je     c0010601 <VgaText::load()+0x4f>
c00105f8:	83 ec 0c             	sub    esp,0xc
c00105fb:	53                   	push   ebx
c00105fc:	ff d0                	call   eax
c00105fe:	83 c4 10             	add    esp,0x10
c0010601:	83 c4 58             	add    esp,0x58
c0010604:	5b                   	pop    ebx
c0010605:	c3                   	ret    

c0010606 <VgaText::updateCursor()>:
c0010606:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001060a:	39 05 e4 e2 02 c0    	cmp    DWORD PTR ds:0xc002e2e4,eax
c0010610:	75 0c                	jne    c001061e <VgaText::updateCursor()+0x18>
c0010612:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010618:	85 c0                	test   eax,eax
c001061a:	74 02                	je     c001061e <VgaText::updateCursor()+0x18>
c001061c:	ff e0                	jmp    eax
c001061e:	c3                   	ret    
c001061f:	90                   	nop

c0010620 <VgaText::showCursor(bool)>:
c0010620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010624:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010628:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001062e:	c3                   	ret    
c001062f:	90                   	nop

c0010630 <VgaText::disableBlink(bool)>:
c0010630:	56                   	push   esi
c0010631:	53                   	push   ebx
c0010632:	51                   	push   ecx
c0010633:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010637:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001063b:	39 1d e4 e2 02 c0    	cmp    DWORD PTR ds:0xc002e2e4,ebx
c0010641:	75 18                	jne    c001065b <VgaText::disableBlink(bool)+0x2b>
c0010643:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010649:	85 c0                	test   eax,eax
c001064b:	74 0e                	je     c001065b <VgaText::disableBlink(bool)+0x2b>
c001064d:	89 f1                	mov    ecx,esi
c001064f:	52                   	push   edx
c0010650:	52                   	push   edx
c0010651:	0f b6 d1             	movzx  edx,cl
c0010654:	52                   	push   edx
c0010655:	53                   	push   ebx
c0010656:	ff d0                	call   eax
c0010658:	83 c4 10             	add    esp,0x10
c001065b:	89 f0                	mov    eax,esi
c001065d:	83 f0 01             	xor    eax,0x1
c0010660:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c0010666:	58                   	pop    eax
c0010667:	5b                   	pop    ebx
c0010668:	5e                   	pop    esi
c0010669:	c3                   	ret    

c001066a <VgaText::doANSI_SGR(int)>:
c001066a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001066e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010672:	85 d2                	test   edx,edx
c0010674:	75 14                	jne    c001068a <VgaText::doANSI_SGR(int)+0x20>
c0010676:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c001067c:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010682:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010688:	eb 65                	jmp    c00106ef <VgaText::doANSI_SGR(int)+0x85>
c001068a:	83 fa 07             	cmp    edx,0x7
c001068d:	75 14                	jne    c00106a3 <VgaText::doANSI_SGR(int)+0x39>
c001068f:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c0010695:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c001069b:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00106a1:	eb 4c                	jmp    c00106ef <VgaText::doANSI_SGR(int)+0x85>
c00106a3:	83 fa 1b             	cmp    edx,0x1b
c00106a6:	74 ce                	je     c0010676 <VgaText::doANSI_SGR(int)+0xc>
c00106a8:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106ab:	83 f9 07             	cmp    ecx,0x7
c00106ae:	77 09                	ja     c00106b9 <VgaText::doANSI_SGR(int)+0x4f>
c00106b0:	8b 14 8d 60 d1 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2ea0]
c00106b7:	eb 20                	jmp    c00106d9 <VgaText::doANSI_SGR(int)+0x6f>
c00106b9:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106bc:	83 f9 07             	cmp    ecx,0x7
c00106bf:	77 09                	ja     c00106ca <VgaText::doANSI_SGR(int)+0x60>
c00106c1:	8b 14 8d 60 d1 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2ea0]
c00106c8:	eb 25                	jmp    c00106ef <VgaText::doANSI_SGR(int)+0x85>
c00106ca:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106cd:	83 f9 07             	cmp    ecx,0x7
c00106d0:	77 0e                	ja     c00106e0 <VgaText::doANSI_SGR(int)+0x76>
c00106d2:	8b 14 95 18 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2fe8]
c00106d9:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106df:	c3                   	ret    
c00106e0:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106e3:	83 f9 07             	cmp    ecx,0x7
c00106e6:	77 0d                	ja     c00106f5 <VgaText::doANSI_SGR(int)+0x8b>
c00106e8:	8b 14 95 f0 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3010]
c00106ef:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00106f5:	c3                   	ret    

c00106f6 <VgaText::setDefaultBgColour(VgaColour)>:
c00106f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106fe:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010704:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001070a:	c3                   	ret    
c001070b:	90                   	nop

c001070c <VgaText::setDefaultFgColour(VgaColour)>:
c001070c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010710:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010714:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001071a:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010720:	c3                   	ret    
c0010721:	90                   	nop

c0010722 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010722:	53                   	push   ebx
c0010723:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010727:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001072b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001072f:	51                   	push   ecx
c0010730:	e8 c1 ff ff ff       	call   c00106f6 <VgaText::setDefaultBgColour(VgaColour)>
c0010735:	58                   	pop    eax
c0010736:	5a                   	pop    edx
c0010737:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001073b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001073f:	5b                   	pop    ebx
c0010740:	eb ca                	jmp    c001070c <VgaText::setDefaultFgColour(VgaColour)>

c0010742 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010742:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010746:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001074b:	83 e0 0f             	and    eax,0xf
c001074e:	c1 e2 04             	shl    edx,0x4
c0010751:	09 d0                	or     eax,edx
c0010753:	c3                   	ret    

c0010754 <VgaText::scrollScreen()>:
c0010754:	57                   	push   edi
c0010755:	56                   	push   esi
c0010756:	be 01 00 00 00       	mov    esi,0x1
c001075b:	53                   	push   ebx
c001075c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010760:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010766:	31 ff                	xor    edi,edi
c0010768:	01 d9                	add    ecx,ebx
c001076a:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c001076d:	83 fe 17             	cmp    esi,0x17
c0010770:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c0010776:	75 28                	jne    c00107a0 <VgaText::scrollScreen()+0x4c>
c0010778:	f7 c7 01 00 00 00    	test   edi,0x1
c001077e:	74 1c                	je     c001079c <VgaText::scrollScreen()+0x48>
c0010780:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010787:	50                   	push   eax
c0010788:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c001078f:	50                   	push   eax
c0010790:	e8 ad ff ff ff       	call   c0010742 <VgaText::combineColours(unsigned char, unsigned char)>
c0010795:	5a                   	pop    edx
c0010796:	5a                   	pop    edx
c0010797:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c001079a:	eb 04                	jmp    c00107a0 <VgaText::scrollScreen()+0x4c>
c001079c:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00107a0:	47                   	inc    edi
c00107a1:	41                   	inc    ecx
c00107a2:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107a8:	75 c0                	jne    c001076a <VgaText::scrollScreen()+0x16>
c00107aa:	46                   	inc    esi
c00107ab:	83 fe 18             	cmp    esi,0x18
c00107ae:	75 b0                	jne    c0010760 <VgaText::scrollScreen()+0xc>
c00107b0:	39 1d e4 e2 02 c0    	cmp    DWORD PTR ds:0xc002e2e4,ebx
c00107b6:	75 24                	jne    c00107dc <VgaText::scrollScreen()+0x88>
c00107b8:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00107bf:	74 08                	je     c00107c9 <VgaText::scrollScreen()+0x75>
c00107c1:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00107c7:	eb 13                	jmp    c00107dc <VgaText::scrollScreen()+0x88>
c00107c9:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00107cf:	85 c0                	test   eax,eax
c00107d1:	74 09                	je     c00107dc <VgaText::scrollScreen()+0x88>
c00107d3:	83 ec 0c             	sub    esp,0xc
c00107d6:	53                   	push   ebx
c00107d7:	ff d0                	call   eax
c00107d9:	83 c4 10             	add    esp,0x10
c00107dc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107e0:	5b                   	pop    ebx
c00107e1:	5e                   	pop    esi
c00107e2:	5f                   	pop    edi
c00107e3:	e9 1e fe ff ff       	jmp    c0010606 <VgaText::updateCursor()>

c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00107e8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107ed:	c1 e0 08             	shl    eax,0x8
c00107f0:	89 c2                	mov    edx,eax
c00107f2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00107f7:	09 d0                	or     eax,edx
c00107f9:	c3                   	ret    

c00107fa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00107fa:	53                   	push   ebx
c00107fb:	83 ec 08             	sub    esp,0x8
c00107fe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010802:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010807:	50                   	push   eax
c0010808:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001080d:	50                   	push   eax
c001080e:	e8 2f ff ff ff       	call   c0010742 <VgaText::combineColours(unsigned char, unsigned char)>
c0010813:	5a                   	pop    edx
c0010814:	0f b6 c0             	movzx  eax,al
c0010817:	5b                   	pop    ebx
c0010818:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001081d:	50                   	push   eax
c001081e:	53                   	push   ebx
c001081f:	e8 c4 ff ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010824:	5a                   	pop    edx
c0010825:	5a                   	pop    edx
c0010826:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001082c:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010830:	0f b7 d2             	movzx  edx,dx
c0010833:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010838:	39 0d e4 e2 02 c0    	cmp    DWORD PTR ds:0xc002e2e4,ecx
c001083e:	75 14                	jne    c0010854 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010840:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010846:	85 c0                	test   eax,eax
c0010848:	74 0a                	je     c0010854 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001084a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001084e:	83 c4 08             	add    esp,0x8
c0010851:	5b                   	pop    ebx
c0010852:	ff e0                	jmp    eax
c0010854:	83 c4 08             	add    esp,0x8
c0010857:	5b                   	pop    ebx
c0010858:	c3                   	ret    
c0010859:	90                   	nop

c001085a <VgaText::getCursorX()>:
c001085a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001085e:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010864:	c3                   	ret    
c0010865:	90                   	nop

c0010866 <VgaText::getCursorY()>:
c0010866:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001086a:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010870:	c3                   	ret    
c0010871:	90                   	nop

c0010872 <VgaText::setCursor(int, int)>:
c0010872:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010876:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001087a:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010880:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010884:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c001088a:	e9 77 fd ff ff       	jmp    c0010606 <VgaText::updateCursor()>
c001088f:	90                   	nop

c0010890 <VgaText::setCursorX(int)>:
c0010890:	83 ec 10             	sub    esp,0x10
c0010893:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010897:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c001089d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108a1:	50                   	push   eax
c00108a2:	e8 cb ff ff ff       	call   c0010872 <VgaText::setCursor(int, int)>
c00108a7:	83 c4 1c             	add    esp,0x1c
c00108aa:	c3                   	ret    
c00108ab:	90                   	nop

c00108ac <VgaText::setCursorY(int)>:
c00108ac:	83 ec 10             	sub    esp,0x10
c00108af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108b7:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00108bd:	50                   	push   eax
c00108be:	e8 af ff ff ff       	call   c0010872 <VgaText::setCursor(int, int)>
c00108c3:	83 c4 1c             	add    esp,0x1c
c00108c6:	c3                   	ret    
c00108c7:	90                   	nop

c00108c8 <VgaText::incrementCursor(bool)>:
c00108c8:	56                   	push   esi
c00108c9:	53                   	push   ebx
c00108ca:	51                   	push   ecx
c00108cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108cf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108d3:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00108d9:	40                   	inc    eax
c00108da:	83 f8 50             	cmp    eax,0x50
c00108dd:	74 08                	je     c00108e7 <VgaText::incrementCursor(bool)+0x1f>
c00108df:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00108e5:	eb 33                	jmp    c001091a <VgaText::incrementCursor(bool)+0x52>
c00108e7:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00108ed:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00108f7:	8d 50 01             	lea    edx,[eax+0x1]
c00108fa:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010900:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010906:	75 12                	jne    c001091a <VgaText::incrementCursor(bool)+0x52>
c0010908:	83 ec 0c             	sub    esp,0xc
c001090b:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010911:	53                   	push   ebx
c0010912:	e8 3d fe ff ff       	call   c0010754 <VgaText::scrollScreen()>
c0010917:	83 c4 10             	add    esp,0x10
c001091a:	89 f0                	mov    eax,esi
c001091c:	84 c0                	test   al,al
c001091e:	74 0c                	je     c001092c <VgaText::incrementCursor(bool)+0x64>
c0010920:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010924:	5a                   	pop    edx
c0010925:	5b                   	pop    ebx
c0010926:	5e                   	pop    esi
c0010927:	e9 da fc ff ff       	jmp    c0010606 <VgaText::updateCursor()>
c001092c:	58                   	pop    eax
c001092d:	5b                   	pop    ebx
c001092e:	5e                   	pop    esi
c001092f:	c3                   	ret    

c0010930 <VgaText::updateRAMUsageDisplay(int)>:
c0010930:	56                   	push   esi
c0010931:	8b 35 40 d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d140
c0010937:	53                   	push   ebx
c0010938:	bb 0a 00 00 00       	mov    ebx,0xa
c001093d:	6a 0f                	push   0xf
c001093f:	6a 00                	push   0x0
c0010941:	e8 fc fd ff ff       	call   c0010742 <VgaText::combineColours(unsigned char, unsigned char)>
c0010946:	5a                   	pop    edx
c0010947:	59                   	pop    ecx
c0010948:	0f b6 c8             	movzx  ecx,al
c001094b:	51                   	push   ecx
c001094c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010950:	99                   	cdq    
c0010951:	f7 fb                	idiv   ebx
c0010953:	89 d3                	mov    ebx,edx
c0010955:	83 c0 30             	add    eax,0x30
c0010958:	83 c3 30             	add    ebx,0x30
c001095b:	0f be c0             	movsx  eax,al
c001095e:	0f b6 db             	movzx  ebx,bl
c0010961:	50                   	push   eax
c0010962:	e8 81 fe ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010967:	5a                   	pop    edx
c0010968:	5a                   	pop    edx
c0010969:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010970:	51                   	push   ecx
c0010971:	53                   	push   ebx
c0010972:	e8 71 fe ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010977:	5b                   	pop    ebx
c0010978:	5a                   	pop    edx
c0010979:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010980:	51                   	push   ecx
c0010981:	6a 25                	push   0x25
c0010983:	e8 60 fe ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010988:	59                   	pop    ecx
c0010989:	5b                   	pop    ebx
c001098a:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010991:	5b                   	pop    ebx
c0010992:	5e                   	pop    esi
c0010993:	c3                   	ret    

c0010994 <VgaText::updateDiskUsage()>:
c0010994:	55                   	push   ebp
c0010995:	bd 10 27 00 00       	mov    ebp,0x2710
c001099a:	57                   	push   edi
c001099b:	8b 3d 40 d1 02 c0    	mov    edi,DWORD PTR ds:0xc002d140
c00109a1:	56                   	push   esi
c00109a2:	53                   	push   ebx
c00109a3:	6a 0f                	push   0xf
c00109a5:	6a 00                	push   0x0
c00109a7:	e8 96 fd ff ff       	call   c0010742 <VgaText::combineColours(unsigned char, unsigned char)>
c00109ac:	5a                   	pop    edx
c00109ad:	0f b6 d8             	movzx  ebx,al
c00109b0:	59                   	pop    ecx
c00109b1:	8b 35 68 25 03 c0    	mov    esi,DWORD PTR ds:0xc0032568
c00109b7:	53                   	push   ebx
c00109b8:	b9 0a 00 00 00       	mov    ecx,0xa
c00109bd:	89 f0                	mov    eax,esi
c00109bf:	99                   	cdq    
c00109c0:	f7 fd                	idiv   ebp
c00109c2:	99                   	cdq    
c00109c3:	f7 f9                	idiv   ecx
c00109c5:	8d 42 30             	lea    eax,[edx+0x30]
c00109c8:	0f b6 c0             	movzx  eax,al
c00109cb:	50                   	push   eax
c00109cc:	e8 17 fe ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c00109d1:	5d                   	pop    ebp
c00109d2:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109d7:	5a                   	pop    edx
c00109d8:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109dc:	53                   	push   ebx
c00109dd:	89 f0                	mov    eax,esi
c00109df:	99                   	cdq    
c00109e0:	f7 fd                	idiv   ebp
c00109e2:	99                   	cdq    
c00109e3:	f7 f9                	idiv   ecx
c00109e5:	8d 42 30             	lea    eax,[edx+0x30]
c00109e8:	0f b6 c0             	movzx  eax,al
c00109eb:	50                   	push   eax
c00109ec:	e8 f7 fd ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c00109f1:	5d                   	pop    ebp
c00109f2:	bd 64 00 00 00       	mov    ebp,0x64
c00109f7:	5a                   	pop    edx
c00109f8:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00109ff:	53                   	push   ebx
c0010a00:	89 f0                	mov    eax,esi
c0010a02:	99                   	cdq    
c0010a03:	f7 fd                	idiv   ebp
c0010a05:	99                   	cdq    
c0010a06:	f7 f9                	idiv   ecx
c0010a08:	8d 42 30             	lea    eax,[edx+0x30]
c0010a0b:	0f b6 c0             	movzx  eax,al
c0010a0e:	50                   	push   eax
c0010a0f:	e8 d4 fd ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a14:	5d                   	pop    ebp
c0010a15:	5a                   	pop    edx
c0010a16:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a1d:	53                   	push   ebx
c0010a1e:	89 f0                	mov    eax,esi
c0010a20:	99                   	cdq    
c0010a21:	f7 f9                	idiv   ecx
c0010a23:	89 d6                	mov    esi,edx
c0010a25:	99                   	cdq    
c0010a26:	f7 f9                	idiv   ecx
c0010a28:	8d 42 30             	lea    eax,[edx+0x30]
c0010a2b:	0f b6 c0             	movzx  eax,al
c0010a2e:	50                   	push   eax
c0010a2f:	e8 b4 fd ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a34:	5d                   	pop    ebp
c0010a35:	5a                   	pop    edx
c0010a36:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a3d:	53                   	push   ebx
c0010a3e:	8d 46 30             	lea    eax,[esi+0x30]
c0010a41:	0f b6 f0             	movzx  esi,al
c0010a44:	56                   	push   esi
c0010a45:	e8 9e fd ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a4a:	5e                   	pop    esi
c0010a4b:	8b 35 64 25 03 c0    	mov    esi,DWORD PTR ds:0xc0032564
c0010a51:	5d                   	pop    ebp
c0010a52:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a59:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a5e:	53                   	push   ebx
c0010a5f:	89 f0                	mov    eax,esi
c0010a61:	99                   	cdq    
c0010a62:	f7 fd                	idiv   ebp
c0010a64:	99                   	cdq    
c0010a65:	f7 f9                	idiv   ecx
c0010a67:	8d 42 30             	lea    eax,[edx+0x30]
c0010a6a:	0f b6 c0             	movzx  eax,al
c0010a6d:	50                   	push   eax
c0010a6e:	e8 75 fd ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a73:	5a                   	pop    edx
c0010a74:	5d                   	pop    ebp
c0010a75:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a7c:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a81:	53                   	push   ebx
c0010a82:	89 f0                	mov    eax,esi
c0010a84:	99                   	cdq    
c0010a85:	f7 fd                	idiv   ebp
c0010a87:	99                   	cdq    
c0010a88:	f7 f9                	idiv   ecx
c0010a8a:	8d 42 30             	lea    eax,[edx+0x30]
c0010a8d:	0f b6 c0             	movzx  eax,al
c0010a90:	50                   	push   eax
c0010a91:	e8 52 fd ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a96:	5a                   	pop    edx
c0010a97:	5d                   	pop    ebp
c0010a98:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a9f:	bd 64 00 00 00       	mov    ebp,0x64
c0010aa4:	53                   	push   ebx
c0010aa5:	89 f0                	mov    eax,esi
c0010aa7:	99                   	cdq    
c0010aa8:	f7 fd                	idiv   ebp
c0010aaa:	99                   	cdq    
c0010aab:	f7 f9                	idiv   ecx
c0010aad:	83 c2 30             	add    edx,0x30
c0010ab0:	0f b6 d2             	movzx  edx,dl
c0010ab3:	52                   	push   edx
c0010ab4:	e8 2f fd ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ab9:	5a                   	pop    edx
c0010aba:	5d                   	pop    ebp
c0010abb:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010ac2:	53                   	push   ebx
c0010ac3:	89 f0                	mov    eax,esi
c0010ac5:	99                   	cdq    
c0010ac6:	f7 f9                	idiv   ecx
c0010ac8:	89 d6                	mov    esi,edx
c0010aca:	99                   	cdq    
c0010acb:	f7 f9                	idiv   ecx
c0010acd:	8d 42 30             	lea    eax,[edx+0x30]
c0010ad0:	0f b6 c0             	movzx  eax,al
c0010ad3:	50                   	push   eax
c0010ad4:	e8 0f fd ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad9:	5a                   	pop    edx
c0010ada:	59                   	pop    ecx
c0010adb:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010ae2:	53                   	push   ebx
c0010ae3:	8d 46 30             	lea    eax,[esi+0x30]
c0010ae6:	0f b6 f0             	movzx  esi,al
c0010ae9:	56                   	push   esi
c0010aea:	e8 f9 fc ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aef:	5b                   	pop    ebx
c0010af0:	5e                   	pop    esi
c0010af1:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010af8:	5b                   	pop    ebx
c0010af9:	5e                   	pop    esi
c0010afa:	5f                   	pop    edi
c0010afb:	5d                   	pop    ebp
c0010afc:	c3                   	ret    
c0010afd:	90                   	nop

c0010afe <VgaText::updateTitle()>:
c0010afe:	53                   	push   ebx
c0010aff:	31 c0                	xor    eax,eax
c0010b01:	83 ec 58             	sub    esp,0x58
c0010b04:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b08:	89 e1                	mov    ecx,esp
c0010b0a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b0e:	40                   	inc    eax
c0010b0f:	83 f8 50             	cmp    eax,0x50
c0010b12:	75 f6                	jne    c0010b0a <VgaText::updateTitle()+0xc>
c0010b14:	31 c0                	xor    eax,eax
c0010b16:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b1d:	84 db                	test   bl,bl
c0010b1f:	74 06                	je     c0010b27 <VgaText::updateTitle()+0x29>
c0010b21:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b24:	40                   	inc    eax
c0010b25:	eb ef                	jmp    c0010b16 <VgaText::updateTitle()+0x18>
c0010b27:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b2d:	85 c0                	test   eax,eax
c0010b2f:	74 09                	je     c0010b3a <VgaText::updateTitle()+0x3c>
c0010b31:	53                   	push   ebx
c0010b32:	53                   	push   ebx
c0010b33:	51                   	push   ecx
c0010b34:	52                   	push   edx
c0010b35:	ff d0                	call   eax
c0010b37:	83 c4 10             	add    esp,0x10
c0010b3a:	e8 55 fe ff ff       	call   c0010994 <VgaText::updateDiskUsage()>
c0010b3f:	83 c4 58             	add    esp,0x58
c0010b42:	5b                   	pop    ebx
c0010b43:	c3                   	ret    

c0010b44 <VgaText::setTitleTextColour(VgaColour)>:
c0010b44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b4c:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b52:	eb aa                	jmp    c0010afe <VgaText::updateTitle()>

c0010b54 <VgaText::setTitleColour(VgaColour)>:
c0010b54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b5c:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010b62:	eb 9a                	jmp    c0010afe <VgaText::updateTitle()>

c0010b64 <VgaText::setTitle(char*)>:
c0010b64:	53                   	push   ebx
c0010b65:	83 ec 10             	sub    esp,0x10
c0010b68:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b70:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010b76:	50                   	push   eax
c0010b77:	e8 b8 fc fe ff       	call   c0000834 <strcpy>
c0010b7c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b80:	83 c4 18             	add    esp,0x18
c0010b83:	5b                   	pop    ebx
c0010b84:	e9 75 ff ff ff       	jmp    c0010afe <VgaText::updateTitle()>
c0010b89:	90                   	nop

c0010b8a <VgaText::decrementCursor(bool)>:
c0010b8a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b8e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b92:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010b98:	85 c0                	test   eax,eax
c0010b9a:	74 07                	je     c0010ba3 <VgaText::decrementCursor(bool)+0x19>
c0010b9c:	48                   	dec    eax
c0010b9d:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010ba3:	84 c9                	test   cl,cl
c0010ba5:	74 09                	je     c0010bb0 <VgaText::decrementCursor(bool)+0x26>
c0010ba7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010bab:	e9 56 fa ff ff       	jmp    c0010606 <VgaText::updateCursor()>
c0010bb0:	c3                   	ret    
c0010bb1:	90                   	nop

c0010bb2 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bb2:	53                   	push   ebx
c0010bb3:	83 ec 08             	sub    esp,0x8
c0010bb6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bbe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010bc2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010bc6:	3c 07                	cmp    al,0x7
c0010bc8:	75 2a                	jne    c0010bf4 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010bca:	a1 94 e3 02 c0       	mov    eax,ds:0xc002e394
c0010bcf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010bd7:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010bdf:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010be7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010beb:	83 c4 08             	add    esp,0x8
c0010bee:	5b                   	pop    ebx
c0010bef:	e9 82 2f 00 00       	jmp    c0013b76 <Buzzer::beep(int, int, bool)>
c0010bf4:	3c 0d                	cmp    al,0xd
c0010bf6:	75 0c                	jne    c0010c04 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010bf8:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c02:	eb 3b                	jmp    c0010c3f <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c04:	3c 0a                	cmp    al,0xa
c0010c06:	75 40                	jne    c0010c48 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c08:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c0e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c18:	8d 50 01             	lea    edx,[eax+0x1]
c0010c1b:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c21:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c27:	75 12                	jne    c0010c3b <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c29:	83 ec 0c             	sub    esp,0xc
c0010c2c:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c32:	53                   	push   ebx
c0010c33:	e8 1c fb ff ff       	call   c0010754 <VgaText::scrollScreen()>
c0010c38:	83 c4 10             	add    esp,0x10
c0010c3b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c3f:	83 c4 08             	add    esp,0x8
c0010c42:	5b                   	pop    ebx
c0010c43:	e9 be f9 ff ff       	jmp    c0010606 <VgaText::updateCursor()>
c0010c48:	3c 08                	cmp    al,0x8
c0010c4a:	75 31                	jne    c0010c7d <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c4c:	50                   	push   eax
c0010c4d:	50                   	push   eax
c0010c4e:	6a 01                	push   0x1
c0010c50:	53                   	push   ebx
c0010c51:	e8 34 ff ff ff       	call   c0010b8a <VgaText::decrementCursor(bool)>
c0010c56:	5a                   	pop    edx
c0010c57:	59                   	pop    ecx
c0010c58:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c5e:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c64:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c6a:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c70:	6a 20                	push   0x20
c0010c72:	53                   	push   ebx
c0010c73:	e8 82 fb ff ff       	call   c00107fa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c78:	83 c4 28             	add    esp,0x28
c0010c7b:	5b                   	pop    ebx
c0010c7c:	c3                   	ret    
c0010c7d:	83 ec 08             	sub    esp,0x8
c0010c80:	0f be c0             	movsx  eax,al
c0010c83:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c89:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c8f:	51                   	push   ecx
c0010c90:	52                   	push   edx
c0010c91:	50                   	push   eax
c0010c92:	53                   	push   ebx
c0010c93:	e8 62 fb ff ff       	call   c00107fa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c98:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c9c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010ca4:	83 c4 28             	add    esp,0x28
c0010ca7:	5b                   	pop    ebx
c0010ca8:	e9 1b fc ff ff       	jmp    c00108c8 <VgaText::incrementCursor(bool)>
c0010cad:	90                   	nop

c0010cae <VgaText::isShowingCursor()>:
c0010cae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cb2:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010cb8:	c3                   	ret    
c0010cb9:	90                   	nop

c0010cba <VgaText::isBlinkDisabled()>:
c0010cba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cbe:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010cc4:	83 f0 01             	xor    eax,0x1
c0010cc7:	c3                   	ret    

c0010cc8 <VgaText::setCursorHeight(int)>:
c0010cc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ccc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cd0:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010cd6:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010cdd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ce1:	e9 3a f9 ff ff       	jmp    c0010620 <VgaText::showCursor(bool)>

c0010ce6 <VgaText::getCursorHeight()>:
c0010ce6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cea:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010cf0:	c3                   	ret    

c0010cf1 <setActiveTerminal(VgaText*)>:
c0010cf1:	53                   	push   ebx
c0010cf2:	83 ec 08             	sub    esp,0x8
c0010cf5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cf9:	85 db                	test   ebx,ebx
c0010cfb:	75 11                	jne    c0010d0e <setActiveTerminal(VgaText*)+0x1d>
c0010cfd:	c7 44 24 10 2c a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a22c
c0010d05:	83 c4 08             	add    esp,0x8
c0010d08:	5b                   	pop    ebx
c0010d09:	e9 45 97 00 00       	jmp    c001a453 <Krnl::panic(char const*)>
c0010d0e:	50                   	push   eax
c0010d0f:	50                   	push   eax
c0010d10:	53                   	push   ebx
c0010d11:	68 3a a2 02 c0       	push   0xc002a23a
c0010d16:	e8 5d 20 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0010d1b:	a1 e4 e2 02 c0       	mov    eax,ds:0xc002e2e4
c0010d20:	83 c4 10             	add    esp,0x10
c0010d23:	85 c0                	test   eax,eax
c0010d25:	74 0c                	je     c0010d33 <setActiveTerminal(VgaText*)+0x42>
c0010d27:	83 ec 0c             	sub    esp,0xc
c0010d2a:	50                   	push   eax
c0010d2b:	e8 d6 f8 ff ff       	call   c0010606 <VgaText::updateCursor()>
c0010d30:	83 c4 10             	add    esp,0x10
c0010d33:	89 1d e4 e2 02 c0    	mov    DWORD PTR ds:0xc002e2e4,ebx
c0010d39:	51                   	push   ecx
c0010d3a:	51                   	push   ecx
c0010d3b:	53                   	push   ebx
c0010d3c:	68 52 a2 02 c0       	push   0xc002a252
c0010d41:	e8 32 20 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0010d46:	83 c4 0c             	add    esp,0xc
c0010d49:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d4f:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d55:	53                   	push   ebx
c0010d56:	e8 17 fb ff ff       	call   c0010872 <VgaText::setCursor(int, int)>
c0010d5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d5e:	e8 57 ff ff ff       	call   c0010cba <VgaText::isBlinkDisabled()>
c0010d63:	5a                   	pop    edx
c0010d64:	0f b6 c0             	movzx  eax,al
c0010d67:	59                   	pop    ecx
c0010d68:	50                   	push   eax
c0010d69:	53                   	push   ebx
c0010d6a:	e8 c1 f8 ff ff       	call   c0010630 <VgaText::disableBlink(bool)>
c0010d6f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d72:	e8 6f ff ff ff       	call   c0010ce6 <VgaText::getCursorHeight()>
c0010d77:	5a                   	pop    edx
c0010d78:	59                   	pop    ecx
c0010d79:	50                   	push   eax
c0010d7a:	53                   	push   ebx
c0010d7b:	e8 48 ff ff ff       	call   c0010cc8 <VgaText::setCursorHeight(int)>
c0010d80:	83 c4 10             	add    esp,0x10
c0010d83:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010d8a:	75 0a                	jne    c0010d96 <setActiveTerminal(VgaText*)+0xa5>
c0010d8c:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010d96:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d9a:	83 c4 08             	add    esp,0x8
c0010d9d:	5b                   	pop    ebx
c0010d9e:	e9 0f f8 ff ff       	jmp    c00105b2 <VgaText::load()>

c0010da3 <doTerminalCycle()>:
c0010da3:	83 ec 18             	sub    esp,0x18
c0010da6:	a1 e0 e2 02 c0       	mov    eax,ds:0xc002e2e0
c0010dab:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010db1:	50                   	push   eax
c0010db2:	a3 e0 e2 02 c0       	mov    ds:0xc002e2e0,eax
c0010db7:	e8 35 ff ff ff       	call   c0010cf1 <setActiveTerminal(VgaText*)>
c0010dbc:	83 c4 1c             	add    esp,0x1c
c0010dbf:	c3                   	ret    

c0010dc0 <VgaText::doUpdate()>:
c0010dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dc4:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010dca:	85 c0                	test   eax,eax
c0010dcc:	74 02                	je     c0010dd0 <VgaText::doUpdate()+0x10>
c0010dce:	ff e0                	jmp    eax
c0010dd0:	c3                   	ret    
c0010dd1:	90                   	nop

c0010dd2 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010dd2:	55                   	push   ebp
c0010dd3:	57                   	push   edi
c0010dd4:	56                   	push   esi
c0010dd5:	53                   	push   ebx
c0010dd6:	83 ec 1c             	sub    esp,0x1c
c0010dd9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010ddd:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010de2:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010de9:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010dec:	50                   	push   eax
c0010ded:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010df2:	50                   	push   eax
c0010df3:	e8 4a f9 ff ff       	call   c0010742 <VgaText::combineColours(unsigned char, unsigned char)>
c0010df8:	59                   	pop    ecx
c0010df9:	0f b6 c0             	movzx  eax,al
c0010dfc:	5b                   	pop    ebx
c0010dfd:	31 c9                	xor    ecx,ecx
c0010dff:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e07:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e0b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e15:	0f b7 db             	movzx  ebx,bx
c0010e18:	01 db                	add    ebx,ebx
c0010e1a:	01 fb                	add    ebx,edi
c0010e1c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e1f:	84 c0                	test   al,al
c0010e21:	0f 84 38 01 00 00    	je     c0010f5f <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e27:	3c 0d                	cmp    al,0xd
c0010e29:	75 0f                	jne    c0010e3a <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e2b:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e35:	e9 1f 01 00 00       	jmp    c0010f59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e3a:	3c 0a                	cmp    al,0xa
c0010e3c:	75 5b                	jne    c0010e99 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e3e:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e44:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e4e:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e51:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e57:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e5d:	75 12                	jne    c0010e71 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e5f:	83 ec 0c             	sub    esp,0xc
c0010e62:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010e68:	55                   	push   ebp
c0010e69:	e8 e6 f8 ff ff       	call   c0010754 <VgaText::scrollScreen()>
c0010e6e:	83 c4 10             	add    esp,0x10
c0010e71:	83 ec 0c             	sub    esp,0xc
c0010e74:	55                   	push   ebp
c0010e75:	e8 8c f7 ff ff       	call   c0010606 <VgaText::updateCursor()>
c0010e7a:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e82:	83 c4 10             	add    esp,0x10
c0010e85:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e8b:	31 c9                	xor    ecx,ecx
c0010e8d:	0f b7 db             	movzx  ebx,bx
c0010e90:	01 db                	add    ebx,ebx
c0010e92:	01 fb                	add    ebx,edi
c0010e94:	e9 c0 00 00 00       	jmp    c0010f59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e99:	3c 08                	cmp    al,0x8
c0010e9b:	75 4e                	jne    c0010eeb <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010e9d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010ea1:	53                   	push   ebx
c0010ea2:	53                   	push   ebx
c0010ea3:	6a 01                	push   0x1
c0010ea5:	55                   	push   ebp
c0010ea6:	e8 df fc ff ff       	call   c0010b8a <VgaText::decrementCursor(bool)>
c0010eab:	58                   	pop    eax
c0010eac:	5a                   	pop    edx
c0010ead:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010eb3:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010eb9:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010ebf:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010ec5:	6a 20                	push   0x20
c0010ec7:	55                   	push   ebp
c0010ec8:	e8 2d f9 ff ff       	call   c00107fa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ecd:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ed5:	83 c4 20             	add    esp,0x20
c0010ed8:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ede:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010ee2:	0f b7 db             	movzx  ebx,bx
c0010ee5:	01 db                	add    ebx,ebx
c0010ee7:	01 fb                	add    ebx,edi
c0010ee9:	eb 6e                	jmp    c0010f59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010eeb:	51                   	push   ecx
c0010eec:	51                   	push   ecx
c0010eed:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ef1:	50                   	push   eax
c0010ef2:	e8 f1 f8 ff ff       	call   c00107e8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ef7:	83 c4 10             	add    esp,0x10
c0010efa:	66 89 03             	mov    WORD PTR [ebx],ax
c0010efd:	39 2d e4 e2 02 c0    	cmp    DWORD PTR ds:0xc002e2e4,ebp
c0010f03:	75 2a                	jne    c0010f2f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f05:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f0b:	85 c0                	test   eax,eax
c0010f0d:	74 20                	je     c0010f2f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f0f:	52                   	push   edx
c0010f10:	52                   	push   edx
c0010f11:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f17:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f1d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f25:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f28:	51                   	push   ecx
c0010f29:	55                   	push   ebp
c0010f2a:	ff d0                	call   eax
c0010f2c:	83 c4 20             	add    esp,0x20
c0010f2f:	83 c3 02             	add    ebx,0x2
c0010f32:	50                   	push   eax
c0010f33:	50                   	push   eax
c0010f34:	6a 00                	push   0x0
c0010f36:	55                   	push   ebp
c0010f37:	e8 8c f9 ff ff       	call   c00108c8 <VgaText::incrementCursor(bool)>
c0010f3c:	83 c4 10             	add    esp,0x10
c0010f3f:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f46:	75 0f                	jne    c0010f57 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f48:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f50:	0f b7 db             	movzx  ebx,bx
c0010f53:	01 db                	add    ebx,ebx
c0010f55:	01 fb                	add    ebx,edi
c0010f57:	b1 01                	mov    cl,0x1
c0010f59:	46                   	inc    esi
c0010f5a:	e9 bd fe ff ff       	jmp    c0010e1c <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f5f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010f63:	83 ec 0c             	sub    esp,0xc
c0010f66:	55                   	push   ebp
c0010f67:	e8 9a f6 ff ff       	call   c0010606 <VgaText::updateCursor()>
c0010f6c:	83 c4 10             	add    esp,0x10
c0010f6f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010f73:	84 c9                	test   cl,cl
c0010f75:	74 0c                	je     c0010f83 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010f77:	83 ec 0c             	sub    esp,0xc
c0010f7a:	55                   	push   ebp
c0010f7b:	e8 40 fe ff ff       	call   c0010dc0 <VgaText::doUpdate()>
c0010f80:	83 c4 10             	add    esp,0x10
c0010f83:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010f8a:	83 c4 1c             	add    esp,0x1c
c0010f8d:	5b                   	pop    ebx
c0010f8e:	5e                   	pop    esi
c0010f8f:	5f                   	pop    edi
c0010f90:	5d                   	pop    ebp
c0010f91:	c3                   	ret    

c0010f92 <VgaText::clearScreen()>:
c0010f92:	57                   	push   edi
c0010f93:	56                   	push   esi
c0010f94:	31 f6                	xor    esi,esi
c0010f96:	53                   	push   ebx
c0010f97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f9b:	52                   	push   edx
c0010f9c:	6a 00                	push   0x0
c0010f9e:	6a 00                	push   0x0
c0010fa0:	53                   	push   ebx
c0010fa1:	e8 cc f8 ff ff       	call   c0010872 <VgaText::setCursor(int, int)>
c0010fa6:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010fad:	83 c4 10             	add    esp,0x10
c0010fb0:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010fb6:	7e 26                	jle    c0010fde <VgaText::clearScreen()+0x4c>
c0010fb8:	31 ff                	xor    edi,edi
c0010fba:	50                   	push   eax
c0010fbb:	50                   	push   eax
c0010fbc:	56                   	push   esi
c0010fbd:	57                   	push   edi
c0010fbe:	47                   	inc    edi
c0010fbf:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010fc5:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010fcb:	6a 20                	push   0x20
c0010fcd:	53                   	push   ebx
c0010fce:	e8 27 f8 ff ff       	call   c00107fa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010fd3:	83 c4 20             	add    esp,0x20
c0010fd6:	83 ff 50             	cmp    edi,0x50
c0010fd9:	75 df                	jne    c0010fba <VgaText::clearScreen()+0x28>
c0010fdb:	46                   	inc    esi
c0010fdc:	eb d2                	jmp    c0010fb0 <VgaText::clearScreen()+0x1e>
c0010fde:	83 ec 0c             	sub    esp,0xc
c0010fe1:	53                   	push   ebx
c0010fe2:	e8 d9 fd ff ff       	call   c0010dc0 <VgaText::doUpdate()>
c0010fe7:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010fee:	83 c4 10             	add    esp,0x10
c0010ff1:	5b                   	pop    ebx
c0010ff2:	5e                   	pop    esi
c0010ff3:	5f                   	pop    edi
c0010ff4:	c3                   	ret    
c0010ff5:	90                   	nop

c0010ff6 <VgaText::putchar(char)>:
c0010ff6:	56                   	push   esi
c0010ff7:	53                   	push   ebx
c0010ff8:	83 ec 14             	sub    esp,0x14
c0010ffb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010fff:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011003:	3c 5b                	cmp    al,0x5b
c0011005:	75 21                	jne    c0011028 <VgaText::putchar(char)+0x32>
c0011007:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001100e:	74 28                	je     c0011038 <VgaText::putchar(char)+0x42>
c0011010:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011019:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0011023:	e9 e2 00 00 00       	jmp    c001110a <VgaText::putchar(char)+0x114>
c0011028:	3c 1b                	cmp    al,0x1b
c001102a:	75 0c                	jne    c0011038 <VgaText::putchar(char)+0x42>
c001102c:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0011033:	e9 d2 00 00 00       	jmp    c001110a <VgaText::putchar(char)+0x114>
c0011038:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001103e:	84 c9                	test   cl,cl
c0011040:	0f 84 ab 00 00 00    	je     c00110f1 <VgaText::putchar(char)+0xfb>
c0011046:	8d 50 c0             	lea    edx,[eax-0x40]
c0011049:	80 fa 3e             	cmp    dl,0x3e
c001104c:	0f 87 82 00 00 00    	ja     c00110d4 <VgaText::putchar(char)+0xde>
c0011052:	3c 6d                	cmp    al,0x6d
c0011054:	75 4d                	jne    c00110a3 <VgaText::putchar(char)+0xad>
c0011056:	31 f6                	xor    esi,esi
c0011058:	31 d2                	xor    edx,edx
c001105a:	31 c0                	xor    eax,eax
c001105c:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0011062:	7e 30                	jle    c0011094 <VgaText::putchar(char)+0x9e>
c0011064:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c001106c:	80 fa 3b             	cmp    dl,0x3b
c001106f:	75 17                	jne    c0011088 <VgaText::putchar(char)+0x92>
c0011071:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011075:	50                   	push   eax
c0011076:	53                   	push   ebx
c0011077:	e8 ee f5 ff ff       	call   c001066a <VgaText::doANSI_SGR(int)>
c001107c:	59                   	pop    ecx
c001107d:	31 d2                	xor    edx,edx
c001107f:	58                   	pop    eax
c0011080:	31 c0                	xor    eax,eax
c0011082:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011086:	eb 09                	jmp    c0011091 <VgaText::putchar(char)+0x9b>
c0011088:	6b c0 0a             	imul   eax,eax,0xa
c001108b:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001108f:	88 ca                	mov    dl,cl
c0011091:	46                   	inc    esi
c0011092:	eb c8                	jmp    c001105c <VgaText::putchar(char)+0x66>
c0011094:	84 d2                	test   dl,dl
c0011096:	74 31                	je     c00110c9 <VgaText::putchar(char)+0xd3>
c0011098:	50                   	push   eax
c0011099:	53                   	push   ebx
c001109a:	e8 cb f5 ff ff       	call   c001066a <VgaText::doANSI_SGR(int)>
c001109f:	58                   	pop    eax
c00110a0:	5a                   	pop    edx
c00110a1:	eb 26                	jmp    c00110c9 <VgaText::putchar(char)+0xd3>
c00110a3:	3c 4a                	cmp    al,0x4a
c00110a5:	75 22                	jne    c00110c9 <VgaText::putchar(char)+0xd3>
c00110a7:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00110ae:	75 19                	jne    c00110c9 <VgaText::putchar(char)+0xd3>
c00110b0:	83 ec 0c             	sub    esp,0xc
c00110b3:	53                   	push   ebx
c00110b4:	e8 d9 fe ff ff       	call   c0010f92 <VgaText::clearScreen()>
c00110b9:	83 c4 0c             	add    esp,0xc
c00110bc:	6a 00                	push   0x0
c00110be:	6a 00                	push   0x0
c00110c0:	53                   	push   ebx
c00110c1:	e8 ac f7 ff ff       	call   c0010872 <VgaText::setCursor(int, int)>
c00110c6:	83 c4 10             	add    esp,0x10
c00110c9:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c00110d2:	eb 36                	jmp    c001110a <VgaText::putchar(char)+0x114>
c00110d4:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c00110da:	83 fa 0e             	cmp    edx,0xe
c00110dd:	7f 2b                	jg     c001110a <VgaText::putchar(char)+0x114>
c00110df:	8d 4a 01             	lea    ecx,[edx+0x1]
c00110e2:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c00110e8:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00110ef:	eb 19                	jmp    c001110a <VgaText::putchar(char)+0x114>
c00110f1:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00110f7:	0f be c0             	movsx  eax,al
c00110fa:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011100:	50                   	push   eax
c0011101:	53                   	push   ebx
c0011102:	e8 ab fa ff ff       	call   c0010bb2 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011107:	83 c4 10             	add    esp,0x10
c001110a:	83 c4 14             	add    esp,0x14
c001110d:	5b                   	pop    ebx
c001110e:	5e                   	pop    esi
c001110f:	c3                   	ret    

c0011110 <VgaText::puts(char const*)>:
c0011110:	53                   	push   ebx
c0011111:	83 ec 08             	sub    esp,0x8
c0011114:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011118:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001111b:	84 c0                	test   al,al
c001111d:	74 12                	je     c0011131 <VgaText::puts(char const*)+0x21>
c001111f:	43                   	inc    ebx
c0011120:	51                   	push   ecx
c0011121:	51                   	push   ecx
c0011122:	50                   	push   eax
c0011123:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011127:	e8 ca fe ff ff       	call   c0010ff6 <VgaText::putchar(char)>
c001112c:	83 c4 10             	add    esp,0x10
c001112f:	eb e7                	jmp    c0011118 <VgaText::puts(char const*)+0x8>
c0011131:	83 c4 08             	add    esp,0x8
c0011134:	5b                   	pop    ebx
c0011135:	c3                   	ret    

c0011136 <VgaText::putx(unsigned int)>:
c0011136:	57                   	push   edi
c0011137:	b9 11 00 00 00       	mov    ecx,0x11
c001113c:	56                   	push   esi
c001113d:	be 6e a2 02 c0       	mov    esi,0xc002a26e
c0011142:	53                   	push   ebx
c0011143:	83 ec 20             	sub    esp,0x20
c0011146:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001114a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001114e:	fc                   	cld    
c001114f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011151:	be 08 00 00 00       	mov    esi,0x8
c0011156:	50                   	push   eax
c0011157:	50                   	push   eax
c0011158:	89 d8                	mov    eax,ebx
c001115a:	c1 e3 04             	shl    ebx,0x4
c001115d:	c1 e8 1c             	shr    eax,0x1c
c0011160:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011165:	50                   	push   eax
c0011166:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001116a:	e8 87 fe ff ff       	call   c0010ff6 <VgaText::putchar(char)>
c001116f:	83 c4 10             	add    esp,0x10
c0011172:	4e                   	dec    esi
c0011173:	75 e1                	jne    c0011156 <VgaText::putx(unsigned int)+0x20>
c0011175:	83 c4 20             	add    esp,0x20
c0011178:	5b                   	pop    ebx
c0011179:	5e                   	pop    esi
c001117a:	5f                   	pop    edi
c001117b:	c3                   	ret    

c001117c <VgaText::VgaText(char const*)>:
c001117c:	57                   	push   edi
c001117d:	56                   	push   esi
c001117e:	53                   	push   ebx
c001117f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011183:	83 ec 08             	sub    esp,0x8
c0011186:	6a 00                	push   0x0
c0011188:	50                   	push   eax
c0011189:	e8 6e 05 00 00       	call   c00116fc <UnixFile::UnixFile(int)>
c001118e:	83 c4 10             	add    esp,0x10
c0011191:	ba d4 a2 02 c0       	mov    edx,0xc002a2d4
c0011196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001119a:	89 10                	mov    DWORD PTR [eax],edx
c001119c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111a0:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00111aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ae:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c00111b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111bc:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00111c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c7:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c00111ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d2:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c00111dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e0:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c00111ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ee:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c00111f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111f9:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0011200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011204:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c001120a:	bb c0 e2 02 c0       	mov    ebx,0xc002e2c0
c001120f:	b8 08 00 00 00       	mov    eax,0x8
c0011214:	fc                   	cld    
c0011215:	89 d7                	mov    edi,edx
c0011217:	89 de                	mov    esi,ebx
c0011219:	89 c1                	mov    ecx,eax
c001121b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001121d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011221:	05 1e 10 00 00       	add    eax,0x101e
c0011226:	83 ec 08             	sub    esp,0x8
c0011229:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001122d:	50                   	push   eax
c001122e:	e8 01 f6 fe ff       	call   c0000834 <strcpy>
c0011233:	83 c4 10             	add    esp,0x10
c0011236:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001123a:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011248:	83 c0 0c             	add    eax,0xc
c001124b:	83 ec 04             	sub    esp,0x4
c001124e:	68 00 0f 00 00       	push   0xf00
c0011253:	6a 00                	push   0x0
c0011255:	50                   	push   eax
c0011256:	e8 1d f5 fe ff       	call   c0000778 <memset>
c001125b:	83 c4 10             	add    esp,0x10
c001125e:	83 ec 04             	sub    esp,0x4
c0011261:	6a 00                	push   0x0
c0011263:	6a 07                	push   0x7
c0011265:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011269:	e8 b4 f4 ff ff       	call   c0010722 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001126e:	83 c4 10             	add    esp,0x10
c0011271:	83 ec 08             	sub    esp,0x8
c0011274:	6a 02                	push   0x2
c0011276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001127a:	e8 49 fa ff ff       	call   c0010cc8 <VgaText::setCursorHeight(int)>
c001127f:	83 c4 10             	add    esp,0x10
c0011282:	83 ec 04             	sub    esp,0x4
c0011285:	6a 00                	push   0x0
c0011287:	6a 00                	push   0x0
c0011289:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001128d:	e8 e0 f5 ff ff       	call   c0010872 <VgaText::setCursor(int, int)>
c0011292:	83 c4 10             	add    esp,0x10
c0011295:	83 ec 08             	sub    esp,0x8
c0011298:	6a 01                	push   0x1
c001129a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001129e:	e8 7d f3 ff ff       	call   c0010620 <VgaText::showCursor(bool)>
c00112a3:	83 c4 10             	add    esp,0x10
c00112a6:	83 ec 08             	sub    esp,0x8
c00112a9:	6a 01                	push   0x1
c00112ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112af:	e8 7c f3 ff ff       	call   c0010630 <VgaText::disableBlink(bool)>
c00112b4:	83 c4 10             	add    esp,0x10
c00112b7:	83 ec 0c             	sub    esp,0xc
c00112ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112be:	e8 cf fc ff ff       	call   c0010f92 <VgaText::clearScreen()>
c00112c3:	83 c4 10             	add    esp,0x10
c00112c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112ca:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c00112d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112d5:	05 9e 10 00 00       	add    eax,0x109e
c00112da:	83 ec 04             	sub    esp,0x4
c00112dd:	68 96 00 00 00       	push   0x96
c00112e2:	6a 00                	push   0x0
c00112e4:	50                   	push   eax
c00112e5:	e8 8e f4 fe ff       	call   c0000778 <memset>
c00112ea:	83 c4 10             	add    esp,0x10
c00112ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112f1:	05 34 11 00 00       	add    eax,0x1134
c00112f6:	83 ec 04             	sub    esp,0x4
c00112f9:	68 2c 01 00 00       	push   0x12c
c00112fe:	6a 00                	push   0x0
c0011300:	50                   	push   eax
c0011301:	e8 72 f4 fe ff       	call   c0000778 <memset>
c0011306:	83 c4 10             	add    esp,0x10
c0011309:	90                   	nop
c001130a:	5b                   	pop    ebx
c001130b:	5e                   	pop    esi
c001130c:	5f                   	pop    edi
c001130d:	c3                   	ret    

c001130e <VgaText::receiveKey(unsigned char)>:
c001130e:	55                   	push   ebp
c001130f:	57                   	push   edi
c0011310:	56                   	push   esi
c0011311:	53                   	push   ebx
c0011312:	83 ec 1c             	sub    esp,0x1c
c0011315:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011319:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001131d:	84 db                	test   bl,bl
c001131f:	0f 84 c9 00 00 00    	je     c00113ee <VgaText::receiveKey(unsigned char)+0xe0>
c0011325:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c001132b:	80 fb 08             	cmp    bl,0x8
c001132e:	75 2c                	jne    c001135c <VgaText::receiveKey(unsigned char)+0x4e>
c0011330:	83 ec 0c             	sub    esp,0xc
c0011333:	57                   	push   edi
c0011334:	e8 5b f4 fe ff       	call   c0000794 <strlen>
c0011339:	83 c4 10             	add    esp,0x10
c001133c:	85 c0                	test   eax,eax
c001133e:	74 41                	je     c0011381 <VgaText::receiveKey(unsigned char)+0x73>
c0011340:	50                   	push   eax
c0011341:	50                   	push   eax
c0011342:	6a 08                	push   0x8
c0011344:	56                   	push   esi
c0011345:	e8 ac fc ff ff       	call   c0010ff6 <VgaText::putchar(char)>
c001134a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001134d:	e8 42 f4 fe ff       	call   c0000794 <strlen>
c0011352:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c001135a:	eb 22                	jmp    c001137e <VgaText::receiveKey(unsigned char)+0x70>
c001135c:	0f be c3             	movsx  eax,bl
c001135f:	52                   	push   edx
c0011360:	52                   	push   edx
c0011361:	50                   	push   eax
c0011362:	56                   	push   esi
c0011363:	e8 8e fc ff ff       	call   c0010ff6 <VgaText::putchar(char)>
c0011368:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c001136c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011371:	59                   	pop    ecx
c0011372:	5d                   	pop    ebp
c0011373:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011377:	50                   	push   eax
c0011378:	57                   	push   edi
c0011379:	e8 f6 f5 fe ff       	call   c0000974 <strcat>
c001137e:	83 c4 10             	add    esp,0x10
c0011381:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0011388:	75 05                	jne    c001138f <VgaText::receiveKey(unsigned char)+0x81>
c001138a:	80 fb 0a             	cmp    bl,0xa
c001138d:	75 53                	jne    c00113e2 <VgaText::receiveKey(unsigned char)+0xd4>
c001138f:	83 ec 0c             	sub    esp,0xc
c0011392:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0011398:	53                   	push   ebx
c0011399:	e8 f6 f3 fe ff       	call   c0000794 <strlen>
c001139e:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113a1:	89 c5                	mov    ebp,eax
c00113a3:	e8 ec f3 fe ff       	call   c0000794 <strlen>
c00113a8:	83 c4 10             	add    esp,0x10
c00113ab:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00113af:	3d 2c 01 00 00       	cmp    eax,0x12c
c00113b4:	76 10                	jbe    c00113c6 <VgaText::receiveKey(unsigned char)+0xb8>
c00113b6:	83 ec 0c             	sub    esp,0xc
c00113b9:	68 7f a2 02 c0       	push   0xc002a27f
c00113be:	e8 90 90 00 00       	call   c001a453 <Krnl::panic(char const*)>
c00113c3:	83 c4 10             	add    esp,0x10
c00113c6:	50                   	push   eax
c00113c7:	50                   	push   eax
c00113c8:	57                   	push   edi
c00113c9:	53                   	push   ebx
c00113ca:	e8 a5 f5 fe ff       	call   c0000974 <strcat>
c00113cf:	83 c4 0c             	add    esp,0xc
c00113d2:	68 96 00 00 00       	push   0x96
c00113d7:	6a 00                	push   0x0
c00113d9:	57                   	push   edi
c00113da:	e8 99 f3 fe ff       	call   c0000778 <memset>
c00113df:	83 c4 10             	add    esp,0x10
c00113e2:	83 ec 0c             	sub    esp,0xc
c00113e5:	56                   	push   esi
c00113e6:	e8 d5 f9 ff ff       	call   c0010dc0 <VgaText::doUpdate()>
c00113eb:	83 c4 10             	add    esp,0x10
c00113ee:	83 c4 1c             	add    esp,0x1c
c00113f1:	5b                   	pop    ebx
c00113f2:	5e                   	pop    esi
c00113f3:	5f                   	pop    edi
c00113f4:	5d                   	pop    ebp
c00113f5:	c3                   	ret    

c00113f6 <VgaText::write(unsigned long long, void*, int*)>:
c00113f6:	55                   	push   ebp
c00113f7:	57                   	push   edi
c00113f8:	56                   	push   esi
c00113f9:	53                   	push   ebx
c00113fa:	83 ec 0c             	sub    esp,0xc
c00113fd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011401:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011405:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011409:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011410:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011413:	39 eb                	cmp    ebx,ebp
c0011415:	74 13                	je     c001142a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011417:	43                   	inc    ebx
c0011418:	50                   	push   eax
c0011419:	50                   	push   eax
c001141a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001141e:	50                   	push   eax
c001141f:	56                   	push   esi
c0011420:	e8 d1 fb ff ff       	call   c0010ff6 <VgaText::putchar(char)>
c0011425:	83 c4 10             	add    esp,0x10
c0011428:	eb e9                	jmp    c0011413 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001142a:	83 ec 0c             	sub    esp,0xc
c001142d:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011434:	56                   	push   esi
c0011435:	e8 86 f9 ff ff       	call   c0010dc0 <VgaText::doUpdate()>
c001143a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001143e:	89 38                	mov    DWORD PTR [eax],edi
c0011440:	83 c4 1c             	add    esp,0x1c
c0011443:	31 c0                	xor    eax,eax
c0011445:	5b                   	pop    ebx
c0011446:	5e                   	pop    esi
c0011447:	5f                   	pop    edi
c0011448:	5d                   	pop    ebp
c0011449:	c3                   	ret    

c001144a <newTerminal(char*)>:
c001144a:	83 ec 28             	sub    esp,0x28
c001144d:	68 60 12 00 00       	push   0x1260
c0011452:	e8 ec e3 ff ff       	call   c000f843 <malloc>
c0011457:	5a                   	pop    edx
c0011458:	59                   	pop    ecx
c0011459:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001145d:	50                   	push   eax
c001145e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011462:	e8 15 fd ff ff       	call   c001117c <VgaText::VgaText(char const*)>
c0011467:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001146b:	83 c4 2c             	add    esp,0x2c
c001146e:	c3                   	ret    
c001146f:	90                   	nop

c0011470 <TSS::TSS()>:
c0011470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011474:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001147b:	90                   	nop
c001147c:	c3                   	ret    
c001147d:	90                   	nop

c001147e <TSS::setESP(unsigned long)>:
c001147e:	55                   	push   ebp
c001147f:	89 e5                	mov    ebp,esp
c0011481:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011484:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011487:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001148a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001148d:	90                   	nop
c001148e:	5d                   	pop    ebp
c001148f:	c3                   	ret    

c0011490 <TSS::flush()>:
c0011490:	55                   	push   ebp
c0011491:	89 e5                	mov    ebp,esp
c0011493:	83 ec 10             	sub    esp,0x10
c0011496:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011499:	8b 00                	mov    eax,DWORD PTR [eax]
c001149b:	83 c8 03             	or     eax,0x3
c001149e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00114a2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114a6:	66 89 d0             	mov    ax,dx
c00114a9:	0f 00 d8             	ltr    ax
c00114ac:	90                   	nop
c00114ad:	c9                   	leave  
c00114ae:	c3                   	ret    
c00114af:	90                   	nop

c00114b0 <TSS::setup(unsigned long, unsigned long)>:
c00114b0:	55                   	push   ebp
c00114b1:	89 e5                	mov    ebp,esp
c00114b3:	83 ec 18             	sub    esp,0x18
c00114b6:	83 ec 0c             	sub    esp,0xc
c00114b9:	6a 68                	push   0x68
c00114bb:	e8 83 e3 ff ff       	call   c000f843 <malloc>
c00114c0:	83 c4 10             	add    esp,0x10
c00114c3:	89 c2                	mov    edx,eax
c00114c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114d1:	83 ec 04             	sub    esp,0x4
c00114d4:	6a 68                	push   0x68
c00114d6:	6a 00                	push   0x0
c00114d8:	50                   	push   eax
c00114d9:	e8 9a f2 fe ff       	call   c0000778 <memset>
c00114de:	83 c4 10             	add    esp,0x10
c00114e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114e7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00114ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114f3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00114f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114ff:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011502:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011508:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001150b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011514:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011517:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001151d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011520:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011523:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001152f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011535:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011538:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011544:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011547:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001154d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011550:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011553:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011556:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001155c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001155f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011562:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011568:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011572:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011575:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011578:	0f 20 da             	mov    edx,cr3
c001157b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001157e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011581:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011584:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011587:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001158a:	83 ec 08             	sub    esp,0x8
c001158d:	50                   	push   eax
c001158e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011591:	50                   	push   eax
c0011592:	e8 87 da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c0011597:	83 c4 10             	add    esp,0x10
c001159a:	83 ec 08             	sub    esp,0x8
c001159d:	6a 68                	push   0x68
c001159f:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115a2:	50                   	push   eax
c00115a3:	e8 92 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c00115a8:	83 c4 10             	add    esp,0x10
c00115ab:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00115af:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115b2:	83 e0 0f             	and    eax,0xf
c00115b5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115b8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115bb:	83 c8 40             	or     eax,0x40
c00115be:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115c1:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c00115c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115cc:	05 78 01 00 00       	add    eax,0x178
c00115d1:	83 ec 04             	sub    esp,0x4
c00115d4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00115d7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00115da:	50                   	push   eax
c00115db:	e8 8e da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c00115e0:	83 c4 10             	add    esp,0x10
c00115e3:	89 c2                	mov    edx,eax
c00115e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115e8:	89 10                	mov    DWORD PTR [eax],edx
c00115ea:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c00115ef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115f5:	05 78 01 00 00       	add    eax,0x178
c00115fa:	83 ec 0c             	sub    esp,0xc
c00115fd:	50                   	push   eax
c00115fe:	e8 af da ff ff       	call   c000f0b2 <GDT::flush()>
c0011603:	83 c4 10             	add    esp,0x10
c0011606:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011609:	8b 00                	mov    eax,DWORD PTR [eax]
c001160b:	83 ec 08             	sub    esp,0x8
c001160e:	50                   	push   eax
c001160f:	68 e8 a2 02 c0       	push   0xc002a2e8
c0011614:	e8 5f 17 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0011619:	83 c4 10             	add    esp,0x10
c001161c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001161f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011621:	c9                   	leave  
c0011622:	c3                   	ret    
c0011623:	90                   	nop

c0011624 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011628:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001162c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001162f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011634:	75 08                	jne    c001163e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011636:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001163c:	eb 38                	jmp    c0011676 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001163e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011643:	75 17                	jne    c001165c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011645:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001164a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001164d:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c0011653:	8b 10                	mov    edx,DWORD PTR [eax]
c0011655:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011659:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001165c:	89 c1                	mov    ecx,eax
c001165e:	83 e1 fd             	and    ecx,0xfffffffd
c0011661:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011667:	74 cd                	je     c0011636 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011669:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001166e:	83 e0 ef             	and    eax,0xffffffef
c0011671:	83 f8 08             	cmp    eax,0x8
c0011674:	76 c0                	jbe    c0011636 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011676:	31 c0                	xor    eax,eax
c0011678:	c3                   	ret    
c0011679:	90                   	nop

c001167a <ReservedFilename::isAtty()>:
c001167a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001167e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011681:	31 c0                	xor    eax,eax
c0011683:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011689:	74 09                	je     c0011694 <ReservedFilename::isAtty()+0x1a>
c001168b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011691:	0f 94 c0             	sete   al
c0011694:	c3                   	ret    
c0011695:	90                   	nop

c0011696 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011696:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001169a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001169e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116a5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116aa:	75 08                	jne    c00116b4 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00116ac:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116b2:	eb 3d                	jmp    c00116f1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116b4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116b9:	75 17                	jne    c00116d2 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00116bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116c0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116c3:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c00116c9:	8b 10                	mov    edx,DWORD PTR [eax]
c00116cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116cf:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00116d2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00116d7:	75 04                	jne    c00116dd <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00116d9:	89 0a                	mov    DWORD PTR [edx],ecx
c00116db:	eb 14                	jmp    c00116f1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116dd:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00116e2:	74 c8                	je     c00116ac <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116e4:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116e9:	83 e0 ef             	and    eax,0xffffffef
c00116ec:	83 f8 08             	cmp    eax,0x8
c00116ef:	76 bb                	jbe    c00116ac <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116f1:	31 c0                	xor    eax,eax
c00116f3:	c3                   	ret    

c00116f4 <UnixFile::getFileDescriptor()>:
c00116f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116fb:	c3                   	ret    

c00116fc <UnixFile::UnixFile(int)>:
c00116fc:	53                   	push   ebx
c00116fd:	83 ec 28             	sub    esp,0x28
c0011700:	ba d4 a3 02 c0       	mov    edx,0xc002a3d4
c0011705:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011709:	89 10                	mov    DWORD PTR [eax],edx
c001170b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011713:	0f 8f 8c 01 00 00    	jg     c00118a5 <UnixFile::UnixFile(int)+0x1a9>
c0011719:	a1 a0 d1 02 c0       	mov    eax,ds:0xc002d1a0
c001171e:	8d 50 01             	lea    edx,[eax+0x1]
c0011721:	89 15 a0 d1 02 c0    	mov    DWORD PTR ds:0xc002d1a0,edx
c0011727:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001172b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001172e:	83 ec 08             	sub    esp,0x8
c0011731:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011735:	68 78 e3 02 c0       	push   0xc002e378
c001173a:	e8 91 6e 01 00       	call   c00285d0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001173f:	83 c4 10             	add    esp,0x10
c0011742:	a0 74 e3 02 c0       	mov    al,ds:0xc002e374
c0011747:	83 f0 01             	xor    eax,0x1
c001174a:	84 c0                	test   al,al
c001174c:	0f 84 54 01 00 00    	je     c00118a6 <UnixFile::UnixFile(int)+0x1aa>
c0011752:	c6 05 74 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e374,0x1
c0011759:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011761:	83 ec 0c             	sub    esp,0xc
c0011764:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011768:	e8 d6 e0 ff ff       	call   c000f843 <malloc>
c001176d:	83 c4 10             	add    esp,0x10
c0011770:	89 c3                	mov    ebx,eax
c0011772:	83 ec 08             	sub    esp,0x8
c0011775:	68 03 ff ff 0f       	push   0xfffff03
c001177a:	53                   	push   ebx
c001177b:	e8 2c 01 00 00       	call   c00118ac <ReservedFilename::ReservedFilename(int)>
c0011780:	83 c4 10             	add    esp,0x10
c0011783:	89 1d 6c e3 02 c0    	mov    DWORD PTR ds:0xc002e36c,ebx
c0011789:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011791:	83 ec 0c             	sub    esp,0xc
c0011794:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011798:	e8 a6 e0 ff ff       	call   c000f843 <malloc>
c001179d:	83 c4 10             	add    esp,0x10
c00117a0:	89 c3                	mov    ebx,eax
c00117a2:	83 ec 08             	sub    esp,0x8
c00117a5:	68 01 ff ff 0f       	push   0xfffff01
c00117aa:	53                   	push   ebx
c00117ab:	e8 fc 00 00 00       	call   c00118ac <ReservedFilename::ReservedFilename(int)>
c00117b0:	83 c4 10             	add    esp,0x10
c00117b3:	89 1d 70 e3 02 c0    	mov    DWORD PTR ds:0xc002e370,ebx
c00117b9:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00117c1:	83 ec 0c             	sub    esp,0xc
c00117c4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117c8:	e8 76 e0 ff ff       	call   c000f843 <malloc>
c00117cd:	83 c4 10             	add    esp,0x10
c00117d0:	89 c3                	mov    ebx,eax
c00117d2:	83 ec 08             	sub    esp,0x8
c00117d5:	68 00 ff ff 0f       	push   0xfffff00
c00117da:	53                   	push   ebx
c00117db:	e8 cc 00 00 00       	call   c00118ac <ReservedFilename::ReservedFilename(int)>
c00117e0:	83 c4 10             	add    esp,0x10
c00117e3:	89 1d 64 e3 02 c0    	mov    DWORD PTR ds:0xc002e364,ebx
c00117e9:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00117f1:	83 ec 0c             	sub    esp,0xc
c00117f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00117f8:	e8 46 e0 ff ff       	call   c000f843 <malloc>
c00117fd:	83 c4 10             	add    esp,0x10
c0011800:	89 c3                	mov    ebx,eax
c0011802:	83 ec 08             	sub    esp,0x8
c0011805:	68 02 ff ff 0f       	push   0xfffff02
c001180a:	53                   	push   ebx
c001180b:	e8 9c 00 00 00       	call   c00118ac <ReservedFilename::ReservedFilename(int)>
c0011810:	83 c4 10             	add    esp,0x10
c0011813:	89 1d 68 e3 02 c0    	mov    DWORD PTR ds:0xc002e368,ebx
c0011819:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011821:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011826:	7f 7e                	jg     c00118a6 <UnixFile::UnixFile(int)+0x1aa>
c0011828:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011830:	83 ec 0c             	sub    esp,0xc
c0011833:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011837:	e8 07 e0 ff ff       	call   c000f843 <malloc>
c001183c:	83 c4 10             	add    esp,0x10
c001183f:	89 c3                	mov    ebx,eax
c0011841:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011845:	05 10 ff ff 0f       	add    eax,0xfffff10
c001184a:	83 ec 08             	sub    esp,0x8
c001184d:	50                   	push   eax
c001184e:	53                   	push   ebx
c001184f:	e8 58 00 00 00       	call   c00118ac <ReservedFilename::ReservedFilename(int)>
c0011854:	83 c4 10             	add    esp,0x10
c0011857:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001185b:	89 1c 85 40 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1cc0],ebx
c0011862:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001186a:	83 ec 0c             	sub    esp,0xc
c001186d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011871:	e8 cd df ff ff       	call   c000f843 <malloc>
c0011876:	83 c4 10             	add    esp,0x10
c0011879:	89 c3                	mov    ebx,eax
c001187b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001187f:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011884:	83 ec 08             	sub    esp,0x8
c0011887:	50                   	push   eax
c0011888:	53                   	push   ebx
c0011889:	e8 1e 00 00 00       	call   c00118ac <ReservedFilename::ReservedFilename(int)>
c001188e:	83 c4 10             	add    esp,0x10
c0011891:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011895:	89 1c 85 00 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d00],ebx
c001189c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118a0:	e9 7c ff ff ff       	jmp    c0011821 <UnixFile::UnixFile(int)+0x125>
c00118a5:	90                   	nop
c00118a6:	83 c4 28             	add    esp,0x28
c00118a9:	5b                   	pop    ebx
c00118aa:	c3                   	ret    
c00118ab:	90                   	nop

c00118ac <ReservedFilename::ReservedFilename(int)>:
c00118ac:	83 ec 0c             	sub    esp,0xc
c00118af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b3:	83 ec 08             	sub    esp,0x8
c00118b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118ba:	50                   	push   eax
c00118bb:	e8 3c fe ff ff       	call   c00116fc <UnixFile::UnixFile(int)>
c00118c0:	83 c4 10             	add    esp,0x10
c00118c3:	ba f0 a3 02 c0       	mov    edx,0xc002a3f0
c00118c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118cc:	89 10                	mov    DWORD PTR [eax],edx
c00118ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00118d6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118d9:	90                   	nop
c00118da:	83 c4 0c             	add    esp,0xc
c00118dd:	c3                   	ret    

c00118de <UnixFile::~UnixFile()>:
c00118de:	83 ec 1c             	sub    esp,0x1c
c00118e1:	ba d4 a3 02 c0       	mov    edx,0xc002a3d4
c00118e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118ea:	89 10                	mov    DWORD PTR [eax],edx
c00118ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118f3:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00118f8:	7f 73                	jg     c001196d <UnixFile::~UnixFile()+0x8f>
c00118fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011902:	83 ec 0c             	sub    esp,0xc
c0011905:	68 78 e3 02 c0       	push   0xc002e378
c001190a:	e8 95 6d 01 00       	call   c00286a4 <LinkedList<UnixFile>::getFirstElement()>
c001190f:	83 c4 10             	add    esp,0x10
c0011912:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011916:	83 ec 0c             	sub    esp,0xc
c0011919:	68 78 e3 02 c0       	push   0xc002e378
c001191e:	e8 89 6d 01 00       	call   c00286ac <LinkedList<UnixFile>::removeFirst()>
c0011923:	83 c4 10             	add    esp,0x10
c0011926:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001192a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001192e:	74 40                	je     c0011970 <UnixFile::~UnixFile()+0x92>
c0011930:	83 ec 08             	sub    esp,0x8
c0011933:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011937:	68 78 e3 02 c0       	push   0xc002e378
c001193c:	e8 8f 6c 01 00       	call   c00285d0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011941:	83 c4 10             	add    esp,0x10
c0011944:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011948:	8d 50 01             	lea    edx,[eax+0x1]
c001194b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001194f:	3d 88 13 00 00       	cmp    eax,0x1388
c0011954:	0f 94 c0             	sete   al
c0011957:	84 c0                	test   al,al
c0011959:	74 a7                	je     c0011902 <UnixFile::~UnixFile()+0x24>
c001195b:	83 ec 0c             	sub    esp,0xc
c001195e:	68 ac a3 02 c0       	push   0xc002a3ac
c0011963:	e8 eb 8a 00 00       	call   c001a453 <Krnl::panic(char const*)>
c0011968:	83 c4 10             	add    esp,0x10
c001196b:	eb 95                	jmp    c0011902 <UnixFile::~UnixFile()+0x24>
c001196d:	90                   	nop
c001196e:	eb 01                	jmp    c0011971 <UnixFile::~UnixFile()+0x93>
c0011970:	90                   	nop
c0011971:	90                   	nop
c0011972:	83 c4 1c             	add    esp,0x1c
c0011975:	c3                   	ret    

c0011976 <UnixFile::~UnixFile()>:
c0011976:	83 ec 0c             	sub    esp,0xc
c0011979:	83 ec 0c             	sub    esp,0xc
c001197c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011980:	e8 59 ff ff ff       	call   c00118de <UnixFile::~UnixFile()>
c0011985:	83 c4 10             	add    esp,0x10
c0011988:	83 ec 08             	sub    esp,0x8
c001198b:	6a 0c                	push   0xc
c001198d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011991:	e8 02 13 00 00       	call   c0012c98 <operator delete(void*, unsigned long)>
c0011996:	83 c4 10             	add    esp,0x10
c0011999:	83 c4 0c             	add    esp,0xc
c001199c:	c3                   	ret    
c001199d:	90                   	nop

c001199e <ReservedFilename::~ReservedFilename()>:
c001199e:	83 ec 0c             	sub    esp,0xc
c00119a1:	ba f0 a3 02 c0       	mov    edx,0xc002a3f0
c00119a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119aa:	89 10                	mov    DWORD PTR [eax],edx
c00119ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119b0:	83 ec 0c             	sub    esp,0xc
c00119b3:	50                   	push   eax
c00119b4:	e8 25 ff ff ff       	call   c00118de <UnixFile::~UnixFile()>
c00119b9:	83 c4 10             	add    esp,0x10
c00119bc:	90                   	nop
c00119bd:	83 c4 0c             	add    esp,0xc
c00119c0:	c3                   	ret    
c00119c1:	90                   	nop

c00119c2 <ReservedFilename::~ReservedFilename()>:
c00119c2:	83 ec 0c             	sub    esp,0xc
c00119c5:	83 ec 0c             	sub    esp,0xc
c00119c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119cc:	e8 cd ff ff ff       	call   c001199e <ReservedFilename::~ReservedFilename()>
c00119d1:	83 c4 10             	add    esp,0x10
c00119d4:	83 ec 08             	sub    esp,0x8
c00119d7:	6a 0c                	push   0xc
c00119d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119dd:	e8 b6 12 00 00       	call   c0012c98 <operator delete(void*, unsigned long)>
c00119e2:	83 c4 10             	add    esp,0x10
c00119e5:	83 c4 0c             	add    esp,0xc
c00119e8:	c3                   	ret    

c00119e9 <getFromFileDescriptor(int)>:
c00119e9:	53                   	push   ebx
c00119ea:	83 ec 08             	sub    esp,0x8
c00119ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119f1:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00119f7:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00119fd:	7f 2c                	jg     c0011a2b <getFromFileDescriptor(int)+0x42>
c00119ff:	83 ec 0c             	sub    esp,0xc
c0011a02:	68 78 e3 02 c0       	push   0xc002e378
c0011a07:	e8 98 6c 01 00       	call   c00286a4 <LinkedList<UnixFile>::getFirstElement()>
c0011a0c:	83 c4 10             	add    esp,0x10
c0011a0f:	85 c0                	test   eax,eax
c0011a11:	75 04                	jne    c0011a17 <getFromFileDescriptor(int)+0x2e>
c0011a13:	31 c0                	xor    eax,eax
c0011a15:	eb 6e                	jmp    c0011a85 <getFromFileDescriptor(int)+0x9c>
c0011a17:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a1a:	74 69                	je     c0011a85 <getFromFileDescriptor(int)+0x9c>
c0011a1c:	52                   	push   edx
c0011a1d:	52                   	push   edx
c0011a1e:	50                   	push   eax
c0011a1f:	68 78 e3 02 c0       	push   0xc002e378
c0011a24:	e8 25 6d 01 00       	call   c002874e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a29:	eb e1                	jmp    c0011a0c <getFromFileDescriptor(int)+0x23>
c0011a2b:	a1 6c e3 02 c0       	mov    eax,ds:0xc002e36c
c0011a30:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a36:	74 4d                	je     c0011a85 <getFromFileDescriptor(int)+0x9c>
c0011a38:	a1 70 e3 02 c0       	mov    eax,ds:0xc002e370
c0011a3d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a43:	74 40                	je     c0011a85 <getFromFileDescriptor(int)+0x9c>
c0011a45:	a1 68 e3 02 c0       	mov    eax,ds:0xc002e368
c0011a4a:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a50:	74 33                	je     c0011a85 <getFromFileDescriptor(int)+0x9c>
c0011a52:	a1 64 e3 02 c0       	mov    eax,ds:0xc002e364
c0011a57:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a5d:	74 26                	je     c0011a85 <getFromFileDescriptor(int)+0x9c>
c0011a5f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011a65:	83 f8 08             	cmp    eax,0x8
c0011a68:	77 09                	ja     c0011a73 <getFromFileDescriptor(int)+0x8a>
c0011a6a:	8b 04 85 40 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1cc0]
c0011a71:	eb 12                	jmp    c0011a85 <getFromFileDescriptor(int)+0x9c>
c0011a73:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011a79:	83 fb 08             	cmp    ebx,0x8
c0011a7c:	77 95                	ja     c0011a13 <getFromFileDescriptor(int)+0x2a>
c0011a7e:	8b 04 9d 00 e3 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1d00]
c0011a85:	83 c4 08             	add    esp,0x8
c0011a88:	5b                   	pop    ebx
c0011a89:	c3                   	ret    

c0011a8a <__static_initialization_and_destruction_0(int, int)>:
c0011a8a:	83 ec 0c             	sub    esp,0xc
c0011a8d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011a92:	75 34                	jne    c0011ac8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a94:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011a9c:	75 2a                	jne    c0011ac8 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a9e:	83 ec 0c             	sub    esp,0xc
c0011aa1:	68 78 e3 02 c0       	push   0xc002e378
c0011aa6:	e8 cd 6a 01 00       	call   c0028578 <LinkedList<UnixFile>::LinkedList()>
c0011aab:	83 c4 10             	add    esp,0x10
c0011aae:	83 ec 04             	sub    esp,0x4
c0011ab1:	68 34 d1 02 c0       	push   0xc002d134
c0011ab6:	68 78 e3 02 c0       	push   0xc002e378
c0011abb:	68 76 85 02 c0       	push   0xc0028576
c0011ac0:	e8 4d 11 00 00       	call   c0012c12 <__cxa_atexit>
c0011ac5:	83 c4 10             	add    esp,0x10
c0011ac8:	90                   	nop
c0011ac9:	83 c4 0c             	add    esp,0xc
c0011acc:	c3                   	ret    

c0011acd <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011acd:	83 ec 0c             	sub    esp,0xc
c0011ad0:	83 ec 08             	sub    esp,0x8
c0011ad3:	68 ff ff 00 00       	push   0xffff
c0011ad8:	6a 01                	push   0x1
c0011ada:	e8 ab ff ff ff       	call   c0011a8a <__static_initialization_and_destruction_0(int, int)>
c0011adf:	83 c4 10             	add    esp,0x10
c0011ae2:	83 c4 0c             	add    esp,0xc
c0011ae5:	c3                   	ret    

c0011ae6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011ae6:	53                   	push   ebx
c0011ae7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011aeb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011aef:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011af5:	89 c8                	mov    eax,ecx
c0011af7:	d1 e8                	shr    eax,1
c0011af9:	03 05 a8 d1 02 c0    	add    eax,DWORD PTR ds:0xc002d1a8
c0011aff:	83 e1 01             	and    ecx,0x1
c0011b02:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b04:	75 09                	jne    c0011b0f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b06:	83 e2 f0             	and    edx,0xfffffff0
c0011b09:	09 da                	or     edx,ebx
c0011b0b:	88 10                	mov    BYTE PTR [eax],dl
c0011b0d:	5b                   	pop    ebx
c0011b0e:	c3                   	ret    
c0011b0f:	c1 e3 04             	shl    ebx,0x4
c0011b12:	83 e2 0f             	and    edx,0xf
c0011b15:	09 da                	or     edx,ebx
c0011b17:	88 10                	mov    BYTE PTR [eax],dl
c0011b19:	5b                   	pop    ebx
c0011b1a:	c3                   	ret    

c0011b1b <Virt::getPageState(unsigned long)>:
c0011b1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b1f:	8b 0d a8 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d1a8
c0011b25:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b2b:	89 d0                	mov    eax,edx
c0011b2d:	d1 e8                	shr    eax,1
c0011b2f:	83 e2 01             	and    edx,0x1
c0011b32:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b35:	75 04                	jne    c0011b3b <Virt::getPageState(unsigned long)+0x20>
c0011b37:	83 e0 0f             	and    eax,0xf
c0011b3a:	c3                   	ret    
c0011b3b:	c0 e8 04             	shr    al,0x4
c0011b3e:	c3                   	ret    

c0011b3f <Virt::allocateKernelVirtualPages(int)>:
c0011b3f:	55                   	push   ebp
c0011b40:	31 ed                	xor    ebp,ebp
c0011b42:	57                   	push   edi
c0011b43:	56                   	push   esi
c0011b44:	53                   	push   ebx
c0011b45:	31 db                	xor    ebx,ebx
c0011b47:	83 ec 1c             	sub    esp,0x1c
c0011b4a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b4e:	8b 3d a4 d1 02 c0    	mov    edi,DWORD PTR ds:0xc002d1a4
c0011b54:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b59:	57                   	push   edi
c0011b5a:	e8 bc ff ff ff       	call   c0011b1b <Virt::getPageState(unsigned long)>
c0011b5f:	5a                   	pop    edx
c0011b60:	84 c0                	test   al,al
c0011b62:	75 3a                	jne    c0011b9e <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011b64:	85 db                	test   ebx,ebx
c0011b66:	75 02                	jne    c0011b6a <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011b68:	89 fd                	mov    ebp,edi
c0011b6a:	43                   	inc    ebx
c0011b6b:	39 f3                	cmp    ebx,esi
c0011b6d:	74 5a                	je     c0011bc9 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011b6f:	47                   	inc    edi
c0011b70:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b76:	76 31                	jbe    c0011ba9 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011b78:	c7 05 a4 d1 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d1a4,0xc8000
c0011b82:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011b87:	75 28                	jne    c0011bb1 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011b89:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011b8e:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011b93:	57                   	push   edi
c0011b94:	e8 82 ff ff ff       	call   c0011b1b <Virt::getPageState(unsigned long)>
c0011b99:	5a                   	pop    edx
c0011b9a:	84 c0                	test   al,al
c0011b9c:	74 c6                	je     c0011b64 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011b9e:	31 db                	xor    ebx,ebx
c0011ba0:	47                   	inc    edi
c0011ba1:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011ba7:	77 cf                	ja     c0011b78 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011ba9:	89 3d a4 d1 02 c0    	mov    DWORD PTR ds:0xc002d1a4,edi
c0011baf:	eb a8                	jmp    c0011b59 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bb1:	83 ec 0c             	sub    esp,0xc
c0011bb4:	68 04 a4 02 c0       	push   0xc002a404
c0011bb9:	e8 95 88 00 00       	call   c001a453 <Krnl::panic(char const*)>
c0011bbe:	8b 3d a4 d1 02 c0    	mov    edi,DWORD PTR ds:0xc002d1a4
c0011bc4:	83 c4 10             	add    esp,0x10
c0011bc7:	eb 90                	jmp    c0011b59 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bc9:	89 2d a4 d1 02 c0    	mov    DWORD PTR ds:0xc002d1a4,ebp
c0011bcf:	4b                   	dec    ebx
c0011bd0:	74 5f                	je     c0011c31 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011bd2:	85 f6                	test   esi,esi
c0011bd4:	74 3d                	je     c0011c13 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bd6:	89 e8                	mov    eax,ebp
c0011bd8:	31 db                	xor    ebx,ebx
c0011bda:	8d 7e ff             	lea    edi,[esi-0x1]
c0011bdd:	eb 14                	jmp    c0011bf3 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011bdf:	6a 01                	push   0x1
c0011be1:	43                   	inc    ebx
c0011be2:	50                   	push   eax
c0011be3:	e8 fe fe ff ff       	call   c0011ae6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011be8:	58                   	pop    eax
c0011be9:	39 f3                	cmp    ebx,esi
c0011beb:	5a                   	pop    edx
c0011bec:	74 25                	je     c0011c13 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bee:	a1 a4 d1 02 c0       	mov    eax,ds:0xc002d1a4
c0011bf3:	8d 50 01             	lea    edx,[eax+0x1]
c0011bf6:	85 db                	test   ebx,ebx
c0011bf8:	89 15 a4 d1 02 c0    	mov    DWORD PTR ds:0xc002d1a4,edx
c0011bfe:	74 20                	je     c0011c20 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c00:	39 df                	cmp    edi,ebx
c0011c02:	75 db                	jne    c0011bdf <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c04:	6a 03                	push   0x3
c0011c06:	43                   	inc    ebx
c0011c07:	50                   	push   eax
c0011c08:	e8 d9 fe ff ff       	call   c0011ae6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c0d:	59                   	pop    ecx
c0011c0e:	39 f3                	cmp    ebx,esi
c0011c10:	58                   	pop    eax
c0011c11:	75 db                	jne    c0011bee <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c13:	83 c4 1c             	add    esp,0x1c
c0011c16:	89 e8                	mov    eax,ebp
c0011c18:	5b                   	pop    ebx
c0011c19:	c1 e0 0c             	shl    eax,0xc
c0011c1c:	5e                   	pop    esi
c0011c1d:	5f                   	pop    edi
c0011c1e:	5d                   	pop    ebp
c0011c1f:	c3                   	ret    
c0011c20:	6a 02                	push   0x2
c0011c22:	bb 01 00 00 00       	mov    ebx,0x1
c0011c27:	50                   	push   eax
c0011c28:	e8 b9 fe ff ff       	call   c0011ae6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c2d:	58                   	pop    eax
c0011c2e:	5a                   	pop    edx
c0011c2f:	eb bd                	jmp    c0011bee <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c31:	6a 04                	push   0x4
c0011c33:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c36:	55                   	push   ebp
c0011c37:	a3 a4 d1 02 c0       	mov    ds:0xc002d1a4,eax
c0011c3c:	e8 a5 fe ff ff       	call   c0011ae6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c41:	59                   	pop    ecx
c0011c42:	89 e8                	mov    eax,ebp
c0011c44:	5b                   	pop    ebx
c0011c45:	c1 e0 0c             	shl    eax,0xc
c0011c48:	83 c4 1c             	add    esp,0x1c
c0011c4b:	5b                   	pop    ebx
c0011c4c:	5e                   	pop    esi
c0011c4d:	5f                   	pop    edi
c0011c4e:	5d                   	pop    ebp
c0011c4f:	c3                   	ret    

c0011c50 <Virt::freeSwapfilePage(unsigned long)>:
c0011c50:	53                   	push   ebx
c0011c51:	8b 15 88 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e388
c0011c57:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c5b:	b8 01 00 00 00       	mov    eax,0x1
c0011c60:	89 cb                	mov    ebx,ecx
c0011c62:	d3 e0                	shl    eax,cl
c0011c64:	c1 eb 05             	shr    ebx,0x5
c0011c67:	f7 d0                	not    eax
c0011c69:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011c6c:	5b                   	pop    ebx
c0011c6d:	c3                   	ret    

c0011c6e <Virt::swapIDToSector(unsigned long)>:
c0011c6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c72:	0f af 05 ac d1 02 c0 	imul   eax,DWORD PTR ds:0xc002d1ac
c0011c79:	03 05 b4 d1 02 c0    	add    eax,DWORD PTR ds:0xc002d1b4
c0011c7f:	c3                   	ret    

c0011c80 <Virt::allocateSwapfilePage()>:
c0011c80:	55                   	push   ebp
c0011c81:	31 d2                	xor    edx,edx
c0011c83:	57                   	push   edi
c0011c84:	56                   	push   esi
c0011c85:	53                   	push   ebx
c0011c86:	83 ec 0c             	sub    esp,0xc
c0011c89:	8b 0d ac d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d1ac
c0011c8f:	a1 b0 d1 02 c0       	mov    eax,ds:0xc002d1b0
c0011c94:	f7 f1                	div    ecx
c0011c96:	39 0d b0 d1 02 c0    	cmp    DWORD PTR ds:0xc002d1b0,ecx
c0011c9c:	72 2d                	jb     c0011ccb <Virt::allocateSwapfilePage()+0x4b>
c0011c9e:	8b 35 88 e3 02 c0    	mov    esi,DWORD PTR ds:0xc002e388
c0011ca4:	8b 16                	mov    edx,DWORD PTR [esi]
c0011ca6:	f6 c2 01             	test   dl,0x1
c0011ca9:	74 3c                	je     c0011ce7 <Virt::allocateSwapfilePage()+0x67>
c0011cab:	31 c9                	xor    ecx,ecx
c0011cad:	bf 01 00 00 00       	mov    edi,0x1
c0011cb2:	eb 12                	jmp    c0011cc6 <Virt::allocateSwapfilePage()+0x46>
c0011cb4:	89 fd                	mov    ebp,edi
c0011cb6:	89 ca                	mov    edx,ecx
c0011cb8:	d3 e5                	shl    ebp,cl
c0011cba:	c1 ea 05             	shr    edx,0x5
c0011cbd:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011cc0:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011cc2:	85 ea                	test   edx,ebp
c0011cc4:	74 2a                	je     c0011cf0 <Virt::allocateSwapfilePage()+0x70>
c0011cc6:	41                   	inc    ecx
c0011cc7:	39 c8                	cmp    eax,ecx
c0011cc9:	77 e9                	ja     c0011cb4 <Virt::allocateSwapfilePage()+0x34>
c0011ccb:	83 ec 0c             	sub    esp,0xc
c0011cce:	68 8b a5 02 c0       	push   0xc002a58b
c0011cd3:	e8 7b 87 00 00       	call   c001a453 <Krnl::panic(char const*)>
c0011cd8:	83 c4 10             	add    esp,0x10
c0011cdb:	31 c9                	xor    ecx,ecx
c0011cdd:	83 c4 0c             	add    esp,0xc
c0011ce0:	89 c8                	mov    eax,ecx
c0011ce2:	5b                   	pop    ebx
c0011ce3:	5e                   	pop    esi
c0011ce4:	5f                   	pop    edi
c0011ce5:	5d                   	pop    ebp
c0011ce6:	c3                   	ret    
c0011ce7:	89 f3                	mov    ebx,esi
c0011ce9:	bd 01 00 00 00       	mov    ebp,0x1
c0011cee:	31 c9                	xor    ecx,ecx
c0011cf0:	09 ea                	or     edx,ebp
c0011cf2:	89 c8                	mov    eax,ecx
c0011cf4:	89 13                	mov    DWORD PTR [ebx],edx
c0011cf6:	83 c4 0c             	add    esp,0xc
c0011cf9:	5b                   	pop    ebx
c0011cfa:	5e                   	pop    esi
c0011cfb:	5f                   	pop    edi
c0011cfc:	5d                   	pop    ebp
c0011cfd:	c3                   	ret    

c0011cfe <Virt::virtualMemorySetup()>:
c0011cfe:	53                   	push   ebx
c0011cff:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d04:	83 ec 08             	sub    esp,0x8
c0011d07:	6a 0f                	push   0xf
c0011d09:	53                   	push   ebx
c0011d0a:	43                   	inc    ebx
c0011d0b:	e8 d6 fd ff ff       	call   c0011ae6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d10:	59                   	pop    ecx
c0011d11:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d17:	58                   	pop    eax
c0011d18:	75 ed                	jne    c0011d07 <Virt::virtualMemorySetup()+0x9>
c0011d1a:	83 ec 08             	sub    esp,0x8
c0011d1d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d22:	68 00 00 00 c8       	push   0xc8000000
c0011d27:	68 a2 a5 02 c0       	push   0xc002a5a2
c0011d2c:	e8 47 10 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0011d31:	58                   	pop    eax
c0011d32:	5a                   	pop    edx
c0011d33:	68 00 f0 ff ef       	push   0xeffff000
c0011d38:	68 b6 a5 02 c0       	push   0xc002a5b6
c0011d3d:	e8 36 10 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0011d42:	83 c4 10             	add    esp,0x10
c0011d45:	83 ec 08             	sub    esp,0x8
c0011d48:	6a 00                	push   0x0
c0011d4a:	53                   	push   ebx
c0011d4b:	43                   	inc    ebx
c0011d4c:	e8 95 fd ff ff       	call   c0011ae6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d51:	83 c4 10             	add    esp,0x10
c0011d54:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d5a:	75 e9                	jne    c0011d45 <Virt::virtualMemorySetup()+0x47>
c0011d5c:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011d61:	83 ec 08             	sub    esp,0x8
c0011d64:	6a 0f                	push   0xf
c0011d66:	53                   	push   ebx
c0011d67:	43                   	inc    ebx
c0011d68:	e8 79 fd ff ff       	call   c0011ae6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d6d:	83 c4 10             	add    esp,0x10
c0011d70:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011d76:	75 e9                	jne    c0011d61 <Virt::virtualMemorySetup()+0x63>
c0011d78:	83 c4 08             	add    esp,0x8
c0011d7b:	5b                   	pop    ebx
c0011d7c:	c3                   	ret    

c0011d7d <Virt::swappingSetup()>:
c0011d7d:	83 ec 18             	sub    esp,0x18
c0011d80:	68 ca a5 02 c0       	push   0xc002a5ca
c0011d85:	e8 ee 0f 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0011d8a:	58                   	pop    eax
c0011d8b:	a1 b0 d1 02 c0       	mov    eax,ds:0xc002d1b0
c0011d90:	5a                   	pop    edx
c0011d91:	31 d2                	xor    edx,edx
c0011d93:	f7 35 ac d1 02 c0    	div    DWORD PTR ds:0xc002d1ac
c0011d99:	c1 e8 05             	shr    eax,0x5
c0011d9c:	50                   	push   eax
c0011d9d:	68 e0 a5 02 c0       	push   0xc002a5e0
c0011da2:	e8 d1 0f 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0011da7:	a1 b0 d1 02 c0       	mov    eax,ds:0xc002d1b0
c0011dac:	31 d2                	xor    edx,edx
c0011dae:	f7 35 ac d1 02 c0    	div    DWORD PTR ds:0xc002d1ac
c0011db4:	c1 e8 05             	shr    eax,0x5
c0011db7:	89 04 24             	mov    DWORD PTR [esp],eax
c0011dba:	e8 84 da ff ff       	call   c000f843 <malloc>
c0011dbf:	83 c4 0c             	add    esp,0xc
c0011dc2:	89 c1                	mov    ecx,eax
c0011dc4:	a3 88 e3 02 c0       	mov    ds:0xc002e388,eax
c0011dc9:	31 d2                	xor    edx,edx
c0011dcb:	a1 b0 d1 02 c0       	mov    eax,ds:0xc002d1b0
c0011dd0:	f7 35 ac d1 02 c0    	div    DWORD PTR ds:0xc002d1ac
c0011dd6:	c1 e8 05             	shr    eax,0x5
c0011dd9:	50                   	push   eax
c0011dda:	6a 00                	push   0x0
c0011ddc:	51                   	push   ecx
c0011ddd:	e8 96 e9 fe ff       	call   c0000778 <memset>
c0011de2:	83 c4 1c             	add    esp,0x1c
c0011de5:	c3                   	ret    

c0011de6 <Virt::getAKernelVAS()>:
c0011de6:	a1 8c e3 02 c0       	mov    eax,ds:0xc002e38c
c0011deb:	c3                   	ret    

c0011dec <VAS::VAS()>:
c0011dec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011df0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011df7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dfb:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011e02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e06:	a3 8c e3 02 c0       	mov    ds:0xc002e38c,eax
c0011e0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e0f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e17:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e1e:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011e25:	90                   	nop
c0011e26:	c3                   	ret    
c0011e27:	90                   	nop

c0011e28 <VAS::VAS(VAS*)>:
c0011e28:	83 ec 0c             	sub    esp,0xc
c0011e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e2f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e3a:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011e41:	83 ec 0c             	sub    esp,0xc
c0011e44:	68 24 a4 02 c0       	push   0xc002a424
c0011e49:	e8 05 86 00 00       	call   c001a453 <Krnl::panic(char const*)>
c0011e4e:	83 c4 10             	add    esp,0x10
c0011e51:	90                   	nop
c0011e52:	83 c4 0c             	add    esp,0xc
c0011e55:	c3                   	ret    

c0011e56 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011e56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e5a:	89 c2                	mov    edx,eax
c0011e5c:	c1 e8 0a             	shr    eax,0xa
c0011e5f:	c1 ea 16             	shr    edx,0x16
c0011e62:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e67:	19 c9                	sbb    ecx,ecx
c0011e69:	c1 e2 0c             	shl    edx,0xc
c0011e6c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011e72:	25 fc 0f 00 00       	and    eax,0xffc
c0011e77:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011e7e:	01 d0                	add    eax,edx
c0011e80:	c3                   	ret    
c0011e81:	90                   	nop

c0011e82 <VAS::getPageTableEntry(unsigned long)>:
c0011e82:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011e86:	89 ca                	mov    edx,ecx
c0011e88:	c1 e9 0a             	shr    ecx,0xa
c0011e8b:	c1 ea 16             	shr    edx,0x16
c0011e8e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011e94:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011e9a:	c1 e0 0c             	shl    eax,0xc
c0011e9d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011ea0:	c3                   	ret    

c0011ea1 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011ea1:	57                   	push   edi
c0011ea2:	56                   	push   esi
c0011ea3:	be 01 00 00 00       	mov    esi,0x1
c0011ea8:	53                   	push   ebx
c0011ea9:	83 ec 10             	sub    esp,0x10
c0011eac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011eb0:	c1 eb 0c             	shr    ebx,0xc
c0011eb3:	eb 3f                	jmp    c0011ef4 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011eb5:	e8 2c ff ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0011eba:	83 ec 08             	sub    esp,0x8
c0011ebd:	57                   	push   edi
c0011ebe:	50                   	push   eax
c0011ebf:	e8 be ff ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c0011ec4:	83 c4 10             	add    esp,0x10
c0011ec7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ec9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011ecd:	f6 c4 04             	test   ah,0x4
c0011ed0:	75 5f                	jne    c0011f31 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011ed2:	80 fa 04             	cmp    dl,0x4
c0011ed5:	74 78                	je     c0011f4f <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011ed7:	80 fa 02             	cmp    dl,0x2
c0011eda:	0f 84 88 00 00 00    	je     c0011f68 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011ee0:	80 fa 03             	cmp    dl,0x3
c0011ee3:	0f 84 ad 00 00 00    	je     c0011f96 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011ee9:	fe ca                	dec    dl
c0011eeb:	0f 84 92 00 00 00    	je     c0011f83 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011ef1:	43                   	inc    ebx
c0011ef2:	31 f6                	xor    esi,esi
c0011ef4:	53                   	push   ebx
c0011ef5:	e8 21 fc ff ff       	call   c0011b1b <Virt::getPageState(unsigned long)>
c0011efa:	5f                   	pop    edi
c0011efb:	89 df                	mov    edi,ebx
c0011efd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011f01:	c1 e7 0c             	shl    edi,0xc
c0011f04:	84 c0                	test   al,al
c0011f06:	75 ad                	jne    c0011eb5 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011f08:	83 ec 0c             	sub    esp,0xc
c0011f0b:	68 fb a5 02 c0       	push   0xc002a5fb
c0011f10:	e8 3e 85 00 00       	call   c001a453 <Krnl::panic(char const*)>
c0011f15:	e8 cc fe ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0011f1a:	5a                   	pop    edx
c0011f1b:	59                   	pop    ecx
c0011f1c:	57                   	push   edi
c0011f1d:	50                   	push   eax
c0011f1e:	e8 5f ff ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c0011f23:	83 c4 10             	add    esp,0x10
c0011f26:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f28:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f2c:	f6 c4 04             	test   ah,0x4
c0011f2f:	74 c0                	je     c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f31:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011f35:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f3a:	83 ec 0c             	sub    esp,0xc
c0011f3d:	50                   	push   eax
c0011f3e:	e8 13 df ff ff       	call   c000fe56 <Phys::freePage(unsigned long)>
c0011f43:	83 c4 10             	add    esp,0x10
c0011f46:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f4a:	80 fa 04             	cmp    dl,0x4
c0011f4d:	75 88                	jne    c0011ed7 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011f4f:	89 f0                	mov    eax,esi
c0011f51:	84 c0                	test   al,al
c0011f53:	75 47                	jne    c0011f9c <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011f55:	c7 44 24 20 48 a4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a448
c0011f5d:	83 c4 10             	add    esp,0x10
c0011f60:	5b                   	pop    ebx
c0011f61:	5e                   	pop    esi
c0011f62:	5f                   	pop    edi
c0011f63:	e9 eb 84 00 00       	jmp    c001a453 <Krnl::panic(char const*)>
c0011f68:	89 f0                	mov    eax,esi
c0011f6a:	84 c0                	test   al,al
c0011f6c:	75 15                	jne    c0011f83 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f6e:	83 ec 0c             	sub    esp,0xc
c0011f71:	68 17 a6 02 c0       	push   0xc002a617
c0011f76:	e8 d8 84 00 00       	call   c001a453 <Krnl::panic(char const*)>
c0011f7b:	83 c4 10             	add    esp,0x10
c0011f7e:	e9 6e ff ff ff       	jmp    c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f83:	83 ec 08             	sub    esp,0x8
c0011f86:	6a 00                	push   0x0
c0011f88:	53                   	push   ebx
c0011f89:	e8 58 fb ff ff       	call   c0011ae6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011f8e:	83 c4 10             	add    esp,0x10
c0011f91:	e9 5b ff ff ff       	jmp    c0011ef1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f96:	89 f0                	mov    eax,esi
c0011f98:	84 c0                	test   al,al
c0011f9a:	75 15                	jne    c0011fb1 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011f9c:	83 ec 08             	sub    esp,0x8
c0011f9f:	6a 00                	push   0x0
c0011fa1:	53                   	push   ebx
c0011fa2:	e8 3f fb ff ff       	call   c0011ae6 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011fa7:	83 c4 10             	add    esp,0x10
c0011faa:	83 c4 10             	add    esp,0x10
c0011fad:	5b                   	pop    ebx
c0011fae:	5e                   	pop    esi
c0011faf:	5f                   	pop    edi
c0011fb0:	c3                   	ret    
c0011fb1:	c7 44 24 20 33 a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a633
c0011fb9:	83 c4 10             	add    esp,0x10
c0011fbc:	5b                   	pop    ebx
c0011fbd:	5e                   	pop    esi
c0011fbe:	5f                   	pop    edi
c0011fbf:	e9 8f 84 00 00       	jmp    c001a453 <Krnl::panic(char const*)>

c0011fc4 <VAS::freeAllocatedPages(unsigned long)>:
c0011fc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011fcc:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011fd0:	74 09                	je     c0011fdb <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011fd2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011fd6:	e9 c6 fe ff ff       	jmp    c0011ea1 <Virt::freeKernelVirtualPages(unsigned long)>
c0011fdb:	c7 44 24 04 6c a4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a46c
c0011fe3:	e9 90 0d 00 00       	jmp    c0012d78 <Dbg::kprintf(char const*, ...)>

c0011fe8 <VAS::virtualToPhysical(unsigned long)>:
c0011fe8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011fec:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011ff0:	e8 8d fe ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c0011ff5:	5a                   	pop    edx
c0011ff6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ff8:	59                   	pop    ecx
c0011ff9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ffe:	c3                   	ret    
c0011fff:	90                   	nop

c0012000 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012000:	55                   	push   ebp
c0012001:	57                   	push   edi
c0012002:	56                   	push   esi
c0012003:	53                   	push   ebx
c0012004:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012008:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001200c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012010:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012014:	85 db                	test   ebx,ebx
c0012016:	7e 22                	jle    c001203a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012018:	c1 e3 0c             	shl    ebx,0xc
c001201b:	01 f3                	add    ebx,esi
c001201d:	56                   	push   esi
c001201e:	81 c6 00 10 00 00    	add    esi,0x1000
c0012024:	55                   	push   ebp
c0012025:	e8 58 fe ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c001202a:	5a                   	pop    edx
c001202b:	59                   	pop    ecx
c001202c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001202e:	21 f9                	and    ecx,edi
c0012030:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012034:	39 f3                	cmp    ebx,esi
c0012036:	89 08                	mov    DWORD PTR [eax],ecx
c0012038:	75 e3                	jne    c001201d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001203a:	5b                   	pop    ebx
c001203b:	5e                   	pop    esi
c001203c:	5f                   	pop    edi
c001203d:	5d                   	pop    ebp
c001203e:	c3                   	ret    
c001203f:	90                   	nop

c0012040 <VAS::setToWriteCombining(unsigned long, int)>:
c0012040:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0012045:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001204b:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0012052:	75 01                	jne    c0012055 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0012054:	c3                   	ret    
c0012055:	68 80 00 00 00       	push   0x80
c001205a:	6a ff                	push   0xffffffff
c001205c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012064:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012068:	e8 93 ff ff ff       	call   c0012000 <VAS::reflagRange(unsigned long, int, int, int)>
c001206d:	83 c4 14             	add    esp,0x14
c0012070:	c3                   	ret    
c0012071:	90                   	nop

c0012072 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012072:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0012077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001207b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001207e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012082:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0012085:	19 c0                	sbb    eax,eax
c0012087:	83 ca 03             	or     edx,0x3
c001208a:	83 e0 fc             	and    eax,0xfffffffc
c001208d:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012094:	0f 20 d8             	mov    eax,cr3
c0012097:	0f 22 d8             	mov    cr3,eax
c001209a:	c3                   	ret    
c001209b:	90                   	nop

c001209c <VAS::~VAS()>:
c001209c:	83 ec 2c             	sub    esp,0x2c
c001209f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00120a7:	e8 a1 bb 00 00       	call   c001dc4d <lockScheduler()>
c00120ac:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00120b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00120b3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00120b6:	8b 80 32 19 00 00    	mov    eax,DWORD PTR [eax+0x1932]
c00120bc:	83 ec 04             	sub    esp,0x4
c00120bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00120c3:	6a 01                	push   0x1
c00120c5:	50                   	push   eax
c00120c6:	e8 a7 ff ff ff       	call   c0012072 <VAS::mapOtherVASIn(bool, VAS*)>
c00120cb:	83 c4 10             	add    esp,0x10
c00120ce:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00120d6:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00120de:	0f 8f d7 00 00 00    	jg     c00121bb <VAS::~VAS()+0x11f>
c00120e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00120eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00120ef:	c1 e2 02             	shl    edx,0x2
c00120f2:	01 d0                	add    eax,edx
c00120f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00120f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120fe:	83 e0 01             	and    eax,0x1
c0012101:	0f 84 ab 00 00 00    	je     c00121b2 <VAS::~VAS()+0x116>
c0012107:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001210f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012117:	7f 75                	jg     c001218e <VAS::~VAS()+0xf2>
c0012119:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001211d:	c1 e0 0a             	shl    eax,0xa
c0012120:	89 c2                	mov    edx,eax
c0012122:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012126:	01 d0                	add    eax,edx
c0012128:	c1 e0 0c             	shl    eax,0xc
c001212b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001212f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012134:	8b 00                	mov    eax,DWORD PTR [eax]
c0012136:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012139:	8b 80 32 19 00 00    	mov    eax,DWORD PTR [eax+0x1932]
c001213f:	83 ec 04             	sub    esp,0x4
c0012142:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012146:	6a 01                	push   0x1
c0012148:	50                   	push   eax
c0012149:	e8 08 fd ff ff       	call   c0011e56 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001214e:	83 c4 10             	add    esp,0x10
c0012151:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012155:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012159:	8b 00                	mov    eax,DWORD PTR [eax]
c001215b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001215f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012163:	25 01 04 00 00       	and    eax,0x401
c0012168:	3d 01 04 00 00       	cmp    eax,0x401
c001216d:	75 19                	jne    c0012188 <VAS::~VAS()+0xec>
c001216f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012173:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012178:	83 ec 0c             	sub    esp,0xc
c001217b:	50                   	push   eax
c001217c:	e8 d5 dc ff ff       	call   c000fe56 <Phys::freePage(unsigned long)>
c0012181:	83 c4 10             	add    esp,0x10
c0012184:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012188:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001218c:	eb 81                	jmp    c001210f <VAS::~VAS()+0x73>
c001218e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012192:	25 00 04 00 00       	and    eax,0x400
c0012197:	74 19                	je     c00121b2 <VAS::~VAS()+0x116>
c0012199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001219d:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121a2:	83 ec 0c             	sub    esp,0xc
c00121a5:	50                   	push   eax
c00121a6:	e8 ab dc ff ff       	call   c000fe56 <Phys::freePage(unsigned long)>
c00121ab:	83 c4 10             	add    esp,0x10
c00121ae:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121b2:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00121b6:	e9 1b ff ff ff       	jmp    c00120d6 <VAS::~VAS()+0x3a>
c00121bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121bf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00121c2:	83 ec 0c             	sub    esp,0xc
c00121c5:	50                   	push   eax
c00121c6:	e8 d6 fc ff ff       	call   c0011ea1 <Virt::freeKernelVirtualPages(unsigned long)>
c00121cb:	83 c4 10             	add    esp,0x10
c00121ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121d2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121d5:	83 ec 0c             	sub    esp,0xc
c00121d8:	50                   	push   eax
c00121d9:	e8 78 dc ff ff       	call   c000fe56 <Phys::freePage(unsigned long)>
c00121de:	83 c4 10             	add    esp,0x10
c00121e1:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00121e9:	c1 e0 02             	shl    eax,0x2
c00121ec:	83 ec 08             	sub    esp,0x8
c00121ef:	50                   	push   eax
c00121f0:	68 90 a4 02 c0       	push   0xc002a490
c00121f5:	e8 7e 0b 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00121fa:	83 c4 10             	add    esp,0x10
c00121fd:	e8 4d ba 00 00       	call   c001dc4f <unlockScheduler()>
c0012202:	90                   	nop
c0012203:	83 c4 2c             	add    esp,0x2c
c0012206:	c3                   	ret    
c0012207:	90                   	nop

c0012208 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012208:	55                   	push   ebp
c0012209:	57                   	push   edi
c001220a:	56                   	push   esi
c001220b:	53                   	push   ebx
c001220c:	83 ec 1c             	sub    esp,0x1c
c001220f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012213:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012217:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001221d:	77 08                	ja     c0012227 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001221f:	0f 20 d8             	mov    eax,cr3
c0012222:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012225:	75 47                	jne    c001226e <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012227:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001222b:	09 d8                	or     eax,ebx
c001222d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012232:	75 57                	jne    c001228b <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012234:	89 de                	mov    esi,ebx
c0012236:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012239:	c1 ee 16             	shr    esi,0x16
c001223c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012243:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012247:	74 54                	je     c001229d <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001224d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012253:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012257:	c1 e6 0c             	shl    esi,0xc
c001225a:	c1 eb 0a             	shr    ebx,0xa
c001225d:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0012263:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012266:	83 c4 1c             	add    esp,0x1c
c0012269:	5b                   	pop    ebx
c001226a:	5e                   	pop    esi
c001226b:	5f                   	pop    edi
c001226c:	5d                   	pop    ebp
c001226d:	c3                   	ret    
c001226e:	83 ec 0c             	sub    esp,0xc
c0012271:	68 b0 a4 02 c0       	push   0xc002a4b0
c0012276:	e8 fd 0a 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001227b:	83 c4 10             	add    esp,0x10
c001227e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012282:	09 d8                	or     eax,ebx
c0012284:	a9 ff 0f 00 00       	test   eax,0xfff
c0012289:	74 a9                	je     c0012234 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001228b:	83 ec 0c             	sub    esp,0xc
c001228e:	68 18 a5 02 c0       	push   0xc002a518
c0012293:	e8 bb 81 00 00       	call   c001a453 <Krnl::panic(char const*)>
c0012298:	83 c4 10             	add    esp,0x10
c001229b:	eb 97                	jmp    c0012234 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001229d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00122a1:	e8 3a dc ff ff       	call   c000fee0 <Phys::allocatePage()>
c00122a6:	89 c5                	mov    ebp,eax
c00122a8:	e8 39 fb ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c00122ad:	83 ec 0c             	sub    esp,0xc
c00122b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122b4:	6a 01                	push   0x1
c00122b6:	e8 84 f8 ff ff       	call   c0011b3f <Virt::allocateKernelVirtualPages(int)>
c00122bb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00122c2:	6a 01                	push   0x1
c00122c4:	50                   	push   eax
c00122c5:	55                   	push   ebp
c00122c6:	81 cd 07 04 00 00    	or     ebp,0x407
c00122cc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00122d0:	51                   	push   ecx
c00122d1:	e8 26 02 00 00       	call   c00124fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122d6:	83 c4 1c             	add    esp,0x1c
c00122d9:	68 00 10 00 00       	push   0x1000
c00122de:	6a 00                	push   0x0
c00122e0:	50                   	push   eax
c00122e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122e5:	e8 8e e4 fe ff       	call   c0000778 <memset>
c00122ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00122ee:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00122f1:	e8 ab fb ff ff       	call   c0011ea1 <Virt::freeKernelVirtualPages(unsigned long)>
c00122f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00122fa:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00122fd:	83 c4 10             	add    esp,0x10
c0012300:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012303:	e9 41 ff ff ff       	jmp    c0012249 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012308 <VAS::allocatePages(int, int)>:
c0012308:	55                   	push   ebp
c0012309:	57                   	push   edi
c001230a:	56                   	push   esi
c001230b:	53                   	push   ebx
c001230c:	83 ec 1c             	sub    esp,0x1c
c001230f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012313:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0012318:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001231e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012324:	83 e0 01             	and    eax,0x1
c0012327:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001232b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001232f:	0f 85 cc 00 00 00    	jne    c0012401 <VAS::allocatePages(int, int)+0xf9>
c0012335:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012338:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001233c:	85 c0                	test   eax,eax
c001233e:	0f 84 a1 00 00 00    	je     c00123e5 <VAS::allocatePages(int, int)+0xdd>
c0012344:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012348:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001234c:	c1 e6 0c             	shl    esi,0xc
c001234f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012353:	85 c0                	test   eax,eax
c0012355:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012358:	7e 33                	jle    c001238d <VAS::allocatePages(int, int)+0x85>
c001235a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001235e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012362:	81 cd 00 04 00 00    	or     ebp,0x400
c0012368:	e8 73 db ff ff       	call   c000fee0 <Phys::allocatePage()>
c001236d:	55                   	push   ebp
c001236e:	53                   	push   ebx
c001236f:	50                   	push   eax
c0012370:	57                   	push   edi
c0012371:	e8 92 fe ff ff       	call   c0012208 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012376:	83 c4 10             	add    esp,0x10
c0012379:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001237e:	74 03                	je     c0012383 <VAS::allocatePages(int, int)+0x7b>
c0012380:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012383:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012389:	39 de                	cmp    esi,ebx
c001238b:	75 db                	jne    c0012368 <VAS::allocatePages(int, int)+0x60>
c001238d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012392:	75 12                	jne    c00123a6 <VAS::allocatePages(int, int)+0x9e>
c0012394:	0f 20 d8             	mov    eax,cr3
c0012397:	0f 22 d8             	mov    cr3,eax
c001239a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001239e:	83 c4 1c             	add    esp,0x1c
c00123a1:	5b                   	pop    ebx
c00123a2:	5e                   	pop    esi
c00123a3:	5f                   	pop    edi
c00123a4:	5d                   	pop    ebp
c00123a5:	c3                   	ret    
c00123a6:	c1 ee 0a             	shr    esi,0xa
c00123a9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123ad:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00123b3:	c1 eb 0a             	shr    ebx,0xa
c00123b6:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00123bc:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00123c2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00123c8:	39 c3                	cmp    ebx,eax
c00123ca:	77 ce                	ja     c001239a <VAS::allocatePages(int, int)+0x92>
c00123cc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123cf:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123d5:	39 d8                	cmp    eax,ebx
c00123d7:	73 f3                	jae    c00123cc <VAS::allocatePages(int, int)+0xc4>
c00123d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123dd:	83 c4 1c             	add    esp,0x1c
c00123e0:	5b                   	pop    ebx
c00123e1:	5e                   	pop    esi
c00123e2:	5f                   	pop    edi
c00123e3:	5d                   	pop    ebp
c00123e4:	c3                   	ret    
c00123e5:	83 ec 0c             	sub    esp,0xc
c00123e8:	68 3c a5 02 c0       	push   0xc002a53c
c00123ed:	e8 61 80 00 00       	call   c001a453 <Krnl::panic(char const*)>
c00123f2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00123f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00123f9:	83 c4 10             	add    esp,0x10
c00123fc:	e9 43 ff ff ff       	jmp    c0012344 <VAS::allocatePages(int, int)+0x3c>
c0012401:	83 ec 0c             	sub    esp,0xc
c0012404:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012408:	e8 32 f7 ff ff       	call   c0011b3f <Virt::allocateKernelVirtualPages(int)>
c001240d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012411:	83 c4 10             	add    esp,0x10
c0012414:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012419:	0f 87 9b 00 00 00    	ja     c00124ba <VAS::allocatePages(int, int)+0x1b2>
c001241f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012423:	85 d2                	test   edx,edx
c0012425:	7e 3c                	jle    c0012463 <VAS::allocatePages(int, int)+0x15b>
c0012427:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001242b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001242f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012433:	c1 e5 0c             	shl    ebp,0xc
c0012436:	81 ce 00 04 00 00    	or     esi,0x400
c001243c:	01 dd                	add    ebp,ebx
c001243e:	e8 9d da ff ff       	call   c000fee0 <Phys::allocatePage()>
c0012443:	56                   	push   esi
c0012444:	53                   	push   ebx
c0012445:	50                   	push   eax
c0012446:	57                   	push   edi
c0012447:	e8 bc fd ff ff       	call   c0012208 <VAS::mapPage(unsigned long, unsigned long, int)>
c001244c:	83 c4 10             	add    esp,0x10
c001244f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012454:	74 03                	je     c0012459 <VAS::allocatePages(int, int)+0x151>
c0012456:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012459:	81 c3 00 10 00 00    	add    ebx,0x1000
c001245f:	39 dd                	cmp    ebp,ebx
c0012461:	75 db                	jne    c001243e <VAS::allocatePages(int, int)+0x136>
c0012463:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012468:	0f 84 26 ff ff ff    	je     c0012394 <VAS::allocatePages(int, int)+0x8c>
c001246e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012472:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012476:	89 d3                	mov    ebx,edx
c0012478:	c1 e0 0c             	shl    eax,0xc
c001247b:	c1 eb 0a             	shr    ebx,0xa
c001247e:	01 d0                	add    eax,edx
c0012480:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012486:	c1 e8 0a             	shr    eax,0xa
c0012489:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001248f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012494:	2d 00 00 40 00       	sub    eax,0x400000
c0012499:	39 c3                	cmp    ebx,eax
c001249b:	0f 87 f9 fe ff ff    	ja     c001239a <VAS::allocatePages(int, int)+0x92>
c00124a1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124a4:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124aa:	39 d8                	cmp    eax,ebx
c00124ac:	73 f3                	jae    c00124a1 <VAS::allocatePages(int, int)+0x199>
c00124ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124b2:	83 c4 1c             	add    esp,0x1c
c00124b5:	5b                   	pop    ebx
c00124b6:	5e                   	pop    esi
c00124b7:	5f                   	pop    edi
c00124b8:	5d                   	pop    ebp
c00124b9:	c3                   	ret    
c00124ba:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c00124bf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124c5:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00124cc:	0f 84 4d ff ff ff    	je     c001241f <VAS::allocatePages(int, int)+0x117>
c00124d2:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00124da:	e9 40 ff ff ff       	jmp    c001241f <VAS::allocatePages(int, int)+0x117>
c00124df:	90                   	nop

c00124e0 <VAS::setCPUSpecific(unsigned long)>:
c00124e0:	83 ec 0c             	sub    esp,0xc
c00124e3:	6a 05                	push   0x5
c00124e5:	68 00 00 40 c2       	push   0xc2400000
c00124ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124f2:	e8 11 fd ff ff       	call   c0012208 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124f7:	83 c4 1c             	add    esp,0x1c
c00124fa:	c3                   	ret    
c00124fb:	90                   	nop

c00124fc <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00124fc:	55                   	push   ebp
c00124fd:	57                   	push   edi
c00124fe:	56                   	push   esi
c00124ff:	53                   	push   ebx
c0012500:	83 ec 1c             	sub    esp,0x1c
c0012503:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0012508:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001250c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012512:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012516:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001251c:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012520:	83 e0 01             	and    eax,0x1
c0012523:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012527:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001252b:	85 c0                	test   eax,eax
c001252d:	7e 39                	jle    c0012568 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001252f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012533:	89 f3                	mov    ebx,esi
c0012535:	c1 e0 0c             	shl    eax,0xc
c0012538:	01 f0                	add    eax,esi
c001253a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001253e:	55                   	push   ebp
c001253f:	53                   	push   ebx
c0012540:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012544:	29 f0                	sub    eax,esi
c0012546:	01 d8                	add    eax,ebx
c0012548:	50                   	push   eax
c0012549:	57                   	push   edi
c001254a:	e8 b9 fc ff ff       	call   c0012208 <VAS::mapPage(unsigned long, unsigned long, int)>
c001254f:	83 c4 10             	add    esp,0x10
c0012552:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012557:	74 03                	je     c001255c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012559:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001255c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012562:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012566:	75 d6                	jne    c001253e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012568:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001256d:	75 10                	jne    c001257f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c001256f:	0f 20 d8             	mov    eax,cr3
c0012572:	0f 22 d8             	mov    cr3,eax
c0012575:	83 c4 1c             	add    esp,0x1c
c0012578:	89 f0                	mov    eax,esi
c001257a:	5b                   	pop    ebx
c001257b:	5e                   	pop    esi
c001257c:	5f                   	pop    edi
c001257d:	5d                   	pop    ebp
c001257e:	c3                   	ret    
c001257f:	89 f3                	mov    ebx,esi
c0012581:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012585:	c1 eb 0a             	shr    ebx,0xa
c0012588:	c1 e0 0c             	shl    eax,0xc
c001258b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012591:	01 f0                	add    eax,esi
c0012593:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012599:	c1 e8 0a             	shr    eax,0xa
c001259c:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125a1:	2d 00 00 40 00       	sub    eax,0x400000
c00125a6:	39 c3                	cmp    ebx,eax
c00125a8:	77 cb                	ja     c0012575 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00125aa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125ad:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125b3:	39 d8                	cmp    eax,ebx
c00125b5:	73 f3                	jae    c00125aa <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00125b7:	83 c4 1c             	add    esp,0x1c
c00125ba:	89 f0                	mov    eax,esi
c00125bc:	5b                   	pop    ebx
c00125bd:	5e                   	pop    esi
c00125be:	5f                   	pop    edi
c00125bf:	5d                   	pop    ebp
c00125c0:	c3                   	ret    
c00125c1:	90                   	nop

c00125c2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00125c2:	55                   	push   ebp
c00125c3:	57                   	push   edi
c00125c4:	56                   	push   esi
c00125c5:	53                   	push   ebx
c00125c6:	83 ec 1c             	sub    esp,0x1c
c00125c9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125cd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00125d1:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00125d5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00125d9:	a9 ff 0f 00 00       	test   eax,0xfff
c00125de:	75 4a                	jne    c001262a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00125e0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00125e4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00125e7:	c1 eb 16             	shr    ebx,0x16
c00125ea:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00125f1:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00125f5:	74 4d                	je     c0012644 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00125f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125fb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00125ff:	c1 e8 0a             	shr    eax,0xa
c0012602:	80 fa 01             	cmp    dl,0x1
c0012605:	19 d2                	sbb    edx,edx
c0012607:	c1 e3 0c             	shl    ebx,0xc
c001260a:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001260e:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012614:	25 fc 0f 00 00       	and    eax,0xffc
c0012619:	01 d8                	add    eax,ebx
c001261b:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012622:	83 c4 1c             	add    esp,0x1c
c0012625:	5b                   	pop    ebx
c0012626:	5e                   	pop    esi
c0012627:	5f                   	pop    edi
c0012628:	5d                   	pop    ebp
c0012629:	c3                   	ret    
c001262a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001262e:	83 ec 0c             	sub    esp,0xc
c0012631:	68 68 a5 02 c0       	push   0xc002a568
c0012636:	e8 18 7e 00 00       	call   c001a453 <Krnl::panic(char const*)>
c001263b:	83 c4 10             	add    esp,0x10
c001263e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012642:	eb 9c                	jmp    c00125e0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012644:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012648:	e8 93 d8 ff ff       	call   c000fee0 <Phys::allocatePage()>
c001264d:	89 c5                	mov    ebp,eax
c001264f:	e8 92 f7 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0012654:	83 ec 0c             	sub    esp,0xc
c0012657:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001265b:	6a 01                	push   0x1
c001265d:	e8 dd f4 ff ff       	call   c0011b3f <Virt::allocateKernelVirtualPages(int)>
c0012662:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012669:	6a 01                	push   0x1
c001266b:	50                   	push   eax
c001266c:	55                   	push   ebp
c001266d:	81 cd 07 04 00 00    	or     ebp,0x407
c0012673:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012677:	51                   	push   ecx
c0012678:	e8 7f fe ff ff       	call   c00124fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001267d:	83 c4 1c             	add    esp,0x1c
c0012680:	68 00 10 00 00       	push   0x1000
c0012685:	6a 00                	push   0x0
c0012687:	50                   	push   eax
c0012688:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001268c:	e8 e7 e0 fe ff       	call   c0000778 <memset>
c0012691:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012695:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012698:	e8 04 f8 ff ff       	call   c0011ea1 <Virt::freeKernelVirtualPages(unsigned long)>
c001269d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00126a0:	83 c4 10             	add    esp,0x10
c00126a3:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00126a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00126aa:	e9 48 ff ff ff       	jmp    c00125f7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00126af:	90                   	nop

c00126b0 <VAS::VAS(bool)>:
c00126b0:	53                   	push   ebx
c00126b1:	83 ec 28             	sub    esp,0x28
c00126b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126b8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00126bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00126c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126cb:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00126d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126d6:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00126da:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00126dd:	e8 fe d7 ff ff       	call   c000fee0 <Phys::allocatePage()>
c00126e2:	89 c2                	mov    edx,eax
c00126e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126e8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00126eb:	e8 f6 f6 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c00126f0:	89 c3                	mov    ebx,eax
c00126f2:	83 ec 0c             	sub    esp,0xc
c00126f5:	6a 01                	push   0x1
c00126f7:	e8 43 f4 ff ff       	call   c0011b3f <Virt::allocateKernelVirtualPages(int)>
c00126fc:	83 c4 10             	add    esp,0x10
c00126ff:	89 c2                	mov    edx,eax
c0012701:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012705:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012708:	83 ec 0c             	sub    esp,0xc
c001270b:	6a 03                	push   0x3
c001270d:	6a 01                	push   0x1
c001270f:	52                   	push   edx
c0012710:	50                   	push   eax
c0012711:	53                   	push   ebx
c0012712:	e8 e5 fd ff ff       	call   c00124fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012717:	83 c4 20             	add    esp,0x20
c001271a:	89 c2                	mov    edx,eax
c001271c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012720:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012723:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001272b:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012733:	7f 1c                	jg     c0012751 <VAS::VAS(bool)+0xa1>
c0012735:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012739:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001273c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012740:	c1 e2 02             	shl    edx,0x2
c0012743:	01 d0                	add    eax,edx
c0012745:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001274b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001274f:	eb da                	jmp    c001272b <VAS::VAS(bool)+0x7b>
c0012751:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012759:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012761:	7f 7a                	jg     c00127dd <VAS::VAS(bool)+0x12d>
c0012763:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012767:	2d 00 02 00 00       	sub    eax,0x200
c001276c:	c1 e0 0c             	shl    eax,0xc
c001276f:	83 c8 03             	or     eax,0x3
c0012772:	89 c2                	mov    edx,eax
c0012774:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0012779:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001277f:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012785:	83 e0 10             	and    eax,0x10
c0012788:	84 c0                	test   al,al
c001278a:	74 07                	je     c0012793 <VAS::VAS(bool)+0xe3>
c001278c:	b8 00 01 00 00       	mov    eax,0x100
c0012791:	eb 05                	jmp    c0012798 <VAS::VAS(bool)+0xe8>
c0012793:	b8 00 00 00 00       	mov    eax,0x0
c0012798:	09 d0                	or     eax,edx
c001279a:	89 c1                	mov    ecx,eax
c001279c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00127a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127a7:	c1 e2 02             	shl    edx,0x2
c00127aa:	01 d0                	add    eax,edx
c00127ac:	89 ca                	mov    edx,ecx
c00127ae:	89 10                	mov    DWORD PTR [eax],edx
c00127b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127b4:	2d 40 03 00 00       	sub    eax,0x340
c00127b9:	83 f8 7f             	cmp    eax,0x7f
c00127bc:	77 16                	ja     c00127d4 <VAS::VAS(bool)+0x124>
c00127be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127c2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00127c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127c9:	c1 e2 02             	shl    edx,0x2
c00127cc:	01 d0                	add    eax,edx
c00127ce:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127d4:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00127d8:	e9 7c ff ff ff       	jmp    c0012759 <VAS::VAS(bool)+0xa9>
c00127dd:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c00127e2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127e8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00127ee:	83 e0 10             	and    eax,0x10
c00127f1:	84 c0                	test   al,al
c00127f3:	74 07                	je     c00127fc <VAS::VAS(bool)+0x14c>
c00127f5:	b8 03 41 00 00       	mov    eax,0x4103
c00127fa:	eb 05                	jmp    c0012801 <VAS::VAS(bool)+0x151>
c00127fc:	b8 03 40 00 00       	mov    eax,0x4003
c0012801:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012805:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012808:	81 c2 20 0c 00 00    	add    edx,0xc20
c001280e:	89 02                	mov    DWORD PTR [edx],eax
c0012810:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0012815:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001281b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012821:	83 ec 08             	sub    esp,0x8
c0012824:	50                   	push   eax
c0012825:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012829:	e8 b2 fc ff ff       	call   c00124e0 <VAS::setCPUSpecific(unsigned long)>
c001282e:	83 c4 10             	add    esp,0x10
c0012831:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012835:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012838:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c001283d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012843:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012849:	83 e0 10             	and    eax,0x10
c001284c:	84 c0                	test   al,al
c001284e:	74 07                	je     c0012857 <VAS::VAS(bool)+0x1a7>
c0012850:	b8 00 01 00 00       	mov    eax,0x100
c0012855:	eb 05                	jmp    c001285c <VAS::VAS(bool)+0x1ac>
c0012857:	b8 00 00 00 00       	mov    eax,0x0
c001285c:	09 c2                	or     edx,eax
c001285e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012862:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012865:	05 fc 0f 00 00       	add    eax,0xffc
c001286a:	83 ca 03             	or     edx,0x3
c001286d:	89 10                	mov    DWORD PTR [eax],edx
c001286f:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0012874:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001287a:	83 ec 0c             	sub    esp,0xc
c001287d:	50                   	push   eax
c001287e:	e8 07 1c 00 00       	call   c001448a <Device::getName()>
c0012883:	83 c4 10             	add    esp,0x10
c0012886:	83 ec 08             	sub    esp,0x8
c0012889:	68 4d a6 02 c0       	push   0xc002a64d
c001288e:	50                   	push   eax
c001288f:	e8 2c e0 fe ff       	call   c00008c0 <strcmp>
c0012894:	83 c4 10             	add    esp,0x10
c0012897:	85 c0                	test   eax,eax
c0012899:	0f 94 c0             	sete   al
c001289c:	84 c0                	test   al,al
c001289e:	74 70                	je     c0012910 <VAS::VAS(bool)+0x260>
c00128a0:	e8 8b b3 00 00       	call   c001dc30 <disableIRQs()>
c00128a5:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c00128aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128b0:	05 7c 09 00 00       	add    eax,0x97c
c00128b5:	83 ec 0c             	sub    esp,0xc
c00128b8:	50                   	push   eax
c00128b9:	e8 fe c9 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128be:	83 c4 10             	add    esp,0x10
c00128c1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128c6:	89 c3                	mov    ebx,eax
c00128c8:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c00128cd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128d3:	05 7c 09 00 00       	add    eax,0x97c
c00128d8:	83 ec 0c             	sub    esp,0xc
c00128db:	50                   	push   eax
c00128dc:	e8 db c9 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128e1:	83 c4 10             	add    esp,0x10
c00128e4:	83 ec 08             	sub    esp,0x8
c00128e7:	50                   	push   eax
c00128e8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128ec:	e8 91 f5 ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c00128f1:	83 c4 10             	add    esp,0x10
c00128f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00128f6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128fb:	6a 11                	push   0x11
c00128fd:	53                   	push   ebx
c00128fe:	50                   	push   eax
c00128ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012903:	e8 00 f9 ff ff       	call   c0012208 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012908:	83 c4 10             	add    esp,0x10
c001290b:	e8 2e b3 00 00       	call   c001dc3e <enableIRQs()>
c0012910:	90                   	nop
c0012911:	83 c4 28             	add    esp,0x28
c0012914:	5b                   	pop    ebx
c0012915:	c3                   	ret    

c0012916 <VAS::evict(unsigned long)>:
c0012916:	55                   	push   ebp
c0012917:	57                   	push   edi
c0012918:	56                   	push   esi
c0012919:	53                   	push   ebx
c001291a:	83 ec 0c             	sub    esp,0xc
c001291d:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0012921:	e8 5a f3 ff ff       	call   c0011c80 <Virt::allocateSwapfilePage()>
c0012926:	89 c7                	mov    edi,eax
c0012928:	a1 ac d1 02 c0       	mov    eax,ds:0xc002d1ac
c001292d:	85 c0                	test   eax,eax
c001292f:	7e 3d                	jle    c001296e <VAS::evict(unsigned long)+0x58>
c0012931:	89 ee                	mov    esi,ebp
c0012933:	31 db                	xor    ebx,ebx
c0012935:	83 ec 0c             	sub    esp,0xc
c0012938:	57                   	push   edi
c0012939:	e8 30 f3 ff ff       	call   c0011c6e <Virt::swapIDToSector(unsigned long)>
c001293e:	89 34 24             	mov    DWORD PTR [esp],esi
c0012941:	01 d8                	add    eax,ebx
c0012943:	6a 01                	push   0x1
c0012945:	31 d2                	xor    edx,edx
c0012947:	43                   	inc    ebx
c0012948:	52                   	push   edx
c0012949:	81 c6 00 02 00 00    	add    esi,0x200
c001294f:	50                   	push   eax
c0012950:	0f be 05 b8 d1 02 c0 	movsx  eax,BYTE PTR ds:0xc002d1b8
c0012957:	ff 34 85 1c e7 02 c0 	push   DWORD PTR [eax*4-0x3ffd18e4]
c001295e:	e8 c7 3c 00 00       	call   c001662a <LogicalDisk::write(unsigned long long, int, void*)>
c0012963:	83 c4 20             	add    esp,0x20
c0012966:	39 1d ac d1 02 c0    	cmp    DWORD PTR ds:0xc002d1ac,ebx
c001296c:	7f c7                	jg     c0012935 <VAS::evict(unsigned long)+0x1f>
c001296e:	83 ec 08             	sub    esp,0x8
c0012971:	c1 e7 0b             	shl    edi,0xb
c0012974:	55                   	push   ebp
c0012975:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012979:	e8 04 f5 ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c001297e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012980:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012986:	09 d7                	or     edi,edx
c0012988:	89 38                	mov    DWORD PTR [eax],edi
c001298a:	ff 05 84 e3 02 c0    	inc    DWORD PTR ds:0xc002e384
c0012990:	0f 20 d8             	mov    eax,cr3
c0012993:	0f 22 d8             	mov    cr3,eax
c0012996:	83 c4 1c             	add    esp,0x1c
c0012999:	5b                   	pop    ebx
c001299a:	5e                   	pop    esi
c001299b:	5f                   	pop    edi
c001299c:	5d                   	pop    ebp
c001299d:	c3                   	ret    

c001299e <VAS::tryLoadBackOffDisk(unsigned long)>:
c001299e:	57                   	push   edi
c001299f:	56                   	push   esi
c00129a0:	53                   	push   ebx
c00129a1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00129a5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00129ab:	74 1c                	je     c00129c9 <VAS::tryLoadBackOffDisk(unsigned long)+0x2b>
c00129ad:	53                   	push   ebx
c00129ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00129b2:	e8 cb f4 ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c00129b7:	5a                   	pop    edx
c00129b8:	89 c6                	mov    esi,eax
c00129ba:	59                   	pop    ecx
c00129bb:	85 c0                	test   eax,eax
c00129bd:	74 0a                	je     c00129c9 <VAS::tryLoadBackOffDisk(unsigned long)+0x2b>
c00129bf:	8b 38                	mov    edi,DWORD PTR [eax]
c00129c1:	f7 c7 01 00 00 00    	test   edi,0x1
c00129c7:	74 06                	je     c00129cf <VAS::tryLoadBackOffDisk(unsigned long)+0x31>
c00129c9:	31 c0                	xor    eax,eax
c00129cb:	5b                   	pop    ebx
c00129cc:	5e                   	pop    esi
c00129cd:	5f                   	pop    edi
c00129ce:	c3                   	ret    
c00129cf:	e8 0c d5 ff ff       	call   c000fee0 <Phys::allocatePage()>
c00129d4:	c1 ef 0b             	shr    edi,0xb
c00129d7:	8b 16                	mov    edx,DWORD PTR [esi]
c00129d9:	81 e2 ff 0f 00 00    	and    edx,0xfff
c00129df:	09 c2                	or     edx,eax
c00129e1:	81 ca 01 08 00 00    	or     edx,0x801
c00129e7:	89 16                	mov    DWORD PTR [esi],edx
c00129e9:	0f 20 d8             	mov    eax,cr3
c00129ec:	0f 22 d8             	mov    cr3,eax
c00129ef:	a1 ac d1 02 c0       	mov    eax,ds:0xc002d1ac
c00129f4:	85 c0                	test   eax,eax
c00129f6:	7e 3b                	jle    c0012a33 <VAS::tryLoadBackOffDisk(unsigned long)+0x95>
c00129f8:	31 f6                	xor    esi,esi
c00129fa:	83 ec 0c             	sub    esp,0xc
c00129fd:	57                   	push   edi
c00129fe:	e8 6b f2 ff ff       	call   c0011c6e <Virt::swapIDToSector(unsigned long)>
c0012a03:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a06:	01 f0                	add    eax,esi
c0012a08:	6a 01                	push   0x1
c0012a0a:	31 d2                	xor    edx,edx
c0012a0c:	46                   	inc    esi
c0012a0d:	52                   	push   edx
c0012a0e:	81 c3 00 02 00 00    	add    ebx,0x200
c0012a14:	50                   	push   eax
c0012a15:	0f be 05 b8 d1 02 c0 	movsx  eax,BYTE PTR ds:0xc002d1b8
c0012a1c:	ff 34 85 1c e7 02 c0 	push   DWORD PTR [eax*4-0x3ffd18e4]
c0012a23:	e8 96 3b 00 00       	call   c00165be <LogicalDisk::read(unsigned long long, int, void*)>
c0012a28:	83 c4 20             	add    esp,0x20
c0012a2b:	39 35 ac d1 02 c0    	cmp    DWORD PTR ds:0xc002d1ac,esi
c0012a31:	7f c7                	jg     c00129fa <VAS::tryLoadBackOffDisk(unsigned long)+0x5c>
c0012a33:	83 ec 0c             	sub    esp,0xc
c0012a36:	ff 0d 84 e3 02 c0    	dec    DWORD PTR ds:0xc002e384
c0012a3c:	57                   	push   edi
c0012a3d:	e8 0e f2 ff ff       	call   c0011c50 <Virt::freeSwapfilePage(unsigned long)>
c0012a42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a46:	83 c4 10             	add    esp,0x10
c0012a49:	25 ff 0f 00 00       	and    eax,0xfff
c0012a4e:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012a53:	77 07                	ja     c0012a5c <VAS::tryLoadBackOffDisk(unsigned long)+0xbe>
c0012a55:	b0 01                	mov    al,0x1
c0012a57:	e9 6f ff ff ff       	jmp    c00129cb <VAS::tryLoadBackOffDisk(unsigned long)+0x2d>
c0012a5c:	83 ec 0c             	sub    esp,0xc
c0012a5f:	68 5b a6 02 c0       	push   0xc002a65b
c0012a64:	e8 0f 03 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0012a69:	83 c4 10             	add    esp,0x10
c0012a6c:	b0 01                	mov    al,0x1
c0012a6e:	e9 58 ff ff ff       	jmp    c00129cb <VAS::tryLoadBackOffDisk(unsigned long)+0x2d>
c0012a73:	90                   	nop

c0012a74 <VAS::scanForEviction()>:
c0012a74:	55                   	push   ebp
c0012a75:	57                   	push   edi
c0012a76:	31 ff                	xor    edi,edi
c0012a78:	56                   	push   esi
c0012a79:	31 f6                	xor    esi,esi
c0012a7b:	53                   	push   ebx
c0012a7c:	83 ec 1c             	sub    esp,0x1c
c0012a7f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012a83:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0012a86:	89 d8                	mov    eax,ebx
c0012a88:	39 c3                	cmp    ebx,eax
c0012a8a:	74 72                	je     c0012afe <VAS::scanForEviction()+0x8a>
c0012a8c:	a9 ff ff 3f 00       	test   eax,0x3fffff
c0012a91:	75 0e                	jne    c0012aa1 <VAS::scanForEviction()+0x2d>
c0012a93:	89 c1                	mov    ecx,eax
c0012a95:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012a98:	c1 e9 16             	shr    ecx,0x16
c0012a9b:	f6 04 8a 01          	test   BYTE PTR [edx+ecx*4],0x1
c0012a9f:	74 51                	je     c0012af2 <VAS::scanForEviction()+0x7e>
c0012aa1:	50                   	push   eax
c0012aa2:	55                   	push   ebp
c0012aa3:	e8 da f3 ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c0012aa8:	5a                   	pop    edx
c0012aa9:	8b 10                	mov    edx,DWORD PTR [eax]
c0012aab:	59                   	pop    ecx
c0012aac:	89 d1                	mov    ecx,edx
c0012aae:	81 e1 00 0c 00 00    	and    ecx,0xc00
c0012ab4:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c0012aba:	74 54                	je     c0012b10 <VAS::scanForEviction()+0x9c>
c0012abc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0012abf:	05 00 10 00 00       	add    eax,0x1000
c0012ac4:	3d ff ff bf ff       	cmp    eax,0xffbfffff
c0012ac9:	76 3d                	jbe    c0012b08 <VAS::scanForEviction()+0x94>
c0012acb:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
c0012ad2:	85 db                	test   ebx,ebx
c0012ad4:	74 79                	je     c0012b4f <VAS::scanForEviction()+0xdb>
c0012ad6:	31 c0                	xor    eax,eax
c0012ad8:	be 01 00 00 00       	mov    esi,0x1
c0012add:	a9 ff ff 3f 00       	test   eax,0x3fffff
c0012ae2:	75 bd                	jne    c0012aa1 <VAS::scanForEviction()+0x2d>
c0012ae4:	89 c1                	mov    ecx,eax
c0012ae6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012ae9:	c1 e9 16             	shr    ecx,0x16
c0012aec:	f6 04 8a 01          	test   BYTE PTR [edx+ecx*4],0x1
c0012af0:	75 af                	jne    c0012aa1 <VAS::scanForEviction()+0x2d>
c0012af2:	05 00 00 40 00       	add    eax,0x400000
c0012af7:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0012afa:	39 c3                	cmp    ebx,eax
c0012afc:	75 8e                	jne    c0012a8c <VAS::scanForEviction()+0x18>
c0012afe:	89 f1                	mov    ecx,esi
c0012b00:	84 c9                	test   cl,cl
c0012b02:	74 88                	je     c0012a8c <VAS::scanForEviction()+0x18>
c0012b04:	89 f7                	mov    edi,esi
c0012b06:	eb 84                	jmp    c0012a8c <VAS::scanForEviction()+0x18>
c0012b08:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0012b0b:	e9 78 ff ff ff       	jmp    c0012a88 <VAS::scanForEviction()+0x14>
c0012b10:	f6 c2 01             	test   dl,0x1
c0012b13:	74 a7                	je     c0012abc <VAS::scanForEviction()+0x48>
c0012b15:	f6 c2 40             	test   dl,0x40
c0012b18:	74 0b                	je     c0012b25 <VAS::scanForEviction()+0xb1>
c0012b1a:	83 e2 bf             	and    edx,0xffffffbf
c0012b1d:	89 10                	mov    DWORD PTR [eax],edx
c0012b1f:	89 f8                	mov    eax,edi
c0012b21:	84 c0                	test   al,al
c0012b23:	74 97                	je     c0012abc <VAS::scanForEviction()+0x48>
c0012b25:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b29:	83 ec 08             	sub    esp,0x8
c0012b2c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0012b2f:	55                   	push   ebp
c0012b30:	e8 e1 fd ff ff       	call   c0012916 <VAS::evict(unsigned long)>
c0012b35:	81 45 10 00 10 00 00 	add    DWORD PTR [ebp+0x10],0x1000
c0012b3c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012b40:	83 c4 2c             	add    esp,0x2c
c0012b43:	89 d0                	mov    eax,edx
c0012b45:	5b                   	pop    ebx
c0012b46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b4b:	5e                   	pop    esi
c0012b4c:	5f                   	pop    edi
c0012b4d:	5d                   	pop    ebp
c0012b4e:	c3                   	ret    
c0012b4f:	bf 01 00 00 00       	mov    edi,0x1
c0012b54:	eb 80                	jmp    c0012ad6 <VAS::scanForEviction()+0x62>

c0012b56 <mapVASFirstTime>:
c0012b56:	55                   	push   ebp
c0012b57:	57                   	push   edi
c0012b58:	56                   	push   esi
c0012b59:	53                   	push   ebx
c0012b5a:	83 ec 0c             	sub    esp,0xc
c0012b5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b62:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012b65:	4a                   	dec    edx
c0012b66:	0f 84 8e 00 00 00    	je     c0012bfa <mapVASFirstTime+0xa4>
c0012b6c:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012b6f:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012b72:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012b77:	c1 e5 15             	shl    ebp,0x15
c0012b7a:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012b7f:	8b ba 32 19 00 00    	mov    edi,DWORD PTR [edx+0x1932]
c0012b85:	29 eb                	sub    ebx,ebp
c0012b87:	29 ee                	sub    esi,ebp
c0012b89:	e8 52 d3 ff ff       	call   c000fee0 <Phys::allocatePage()>
c0012b8e:	83 ec 0c             	sub    esp,0xc
c0012b91:	68 03 04 00 00       	push   0x403
c0012b96:	6a 01                	push   0x1
c0012b98:	53                   	push   ebx
c0012b99:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012b9f:	50                   	push   eax
c0012ba0:	57                   	push   edi
c0012ba1:	e8 56 f9 ff ff       	call   c00124fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012ba6:	83 c4 20             	add    esp,0x20
c0012ba9:	39 f3                	cmp    ebx,esi
c0012bab:	75 dc                	jne    c0012b89 <mapVASFirstTime+0x33>
c0012bad:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012bb2:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012bb7:	29 ee                	sub    esi,ebp
c0012bb9:	29 e8                	sub    eax,ebp
c0012bbb:	89 c5                	mov    ebp,eax
c0012bbd:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012bc1:	19 db                	sbb    ebx,ebx
c0012bc3:	e8 18 d3 ff ff       	call   c000fee0 <Phys::allocatePage()>
c0012bc8:	83 e3 04             	and    ebx,0x4
c0012bcb:	83 ec 0c             	sub    esp,0xc
c0012bce:	81 c3 03 04 00 00    	add    ebx,0x403
c0012bd4:	53                   	push   ebx
c0012bd5:	6a 01                	push   0x1
c0012bd7:	56                   	push   esi
c0012bd8:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012bde:	50                   	push   eax
c0012bdf:	57                   	push   edi
c0012be0:	e8 17 f9 ff ff       	call   c00124fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012be5:	83 c4 20             	add    esp,0x20
c0012be8:	39 f5                	cmp    ebp,esi
c0012bea:	75 d1                	jne    c0012bbd <mapVASFirstTime+0x67>
c0012bec:	0f 20 d8             	mov    eax,cr3
c0012bef:	0f 22 d8             	mov    cr3,eax
c0012bf2:	83 c4 0c             	add    esp,0xc
c0012bf5:	5b                   	pop    ebx
c0012bf6:	5e                   	pop    esi
c0012bf7:	5f                   	pop    edi
c0012bf8:	5d                   	pop    ebp
c0012bf9:	c3                   	ret    
c0012bfa:	83 ec 0c             	sub    esp,0xc
c0012bfd:	68 6f a6 02 c0       	push   0xc002a66f
c0012c02:	e8 71 01 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0012c07:	83 c4 10             	add    esp,0x10
c0012c0a:	83 c4 0c             	add    esp,0xc
c0012c0d:	5b                   	pop    ebx
c0012c0e:	5e                   	pop    esi
c0012c0f:	5f                   	pop    edi
c0012c10:	5d                   	pop    ebp
c0012c11:	c3                   	ret    

c0012c12 <__cxa_atexit>:
c0012c12:	31 c0                	xor    eax,eax
c0012c14:	c3                   	ret    

c0012c15 <__cxa_finalize>:
c0012c15:	c3                   	ret    

c0012c16 <__stack_chk_fail>:
c0012c16:	55                   	push   ebp
c0012c17:	89 e5                	mov    ebp,esp
c0012c19:	83 ec 14             	sub    esp,0x14
c0012c1c:	68 88 a6 02 c0       	push   0xc002a688
c0012c21:	e8 52 01 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0012c26:	58                   	pop    eax
c0012c27:	5a                   	pop    edx
c0012c28:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012c2b:	68 d8 a6 02 c0       	push   0xc002a6d8
c0012c30:	e8 43 01 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0012c35:	59                   	pop    ecx
c0012c36:	58                   	pop    eax
c0012c37:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c3a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012c3d:	68 d8 a6 02 c0       	push   0xc002a6d8
c0012c42:	e8 31 01 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0012c47:	5a                   	pop    edx
c0012c48:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c4b:	59                   	pop    ecx
c0012c4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c4e:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012c51:	68 d8 a6 02 c0       	push   0xc002a6d8
c0012c56:	e8 1d 01 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0012c5b:	5a                   	pop    edx
c0012c5c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c5f:	59                   	pop    ecx
c0012c60:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c62:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c64:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012c67:	68 d8 a6 02 c0       	push   0xc002a6d8
c0012c6c:	e8 07 01 00 00       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0012c71:	c7 04 24 e0 a6 02 c0 	mov    DWORD PTR [esp],0xc002a6e0
c0012c78:	e8 d6 77 00 00       	call   c001a453 <Krnl::panic(char const*)>
c0012c7d:	83 c4 10             	add    esp,0x10
c0012c80:	c9                   	leave  
c0012c81:	c3                   	ret    

c0012c82 <__cxa_pure_virtual>:
c0012c82:	83 ec 18             	sub    esp,0x18
c0012c85:	68 f8 a6 02 c0       	push   0xc002a6f8
c0012c8a:	e8 c4 77 00 00       	call   c001a453 <Krnl::panic(char const*)>
c0012c8f:	83 c4 1c             	add    esp,0x1c
c0012c92:	c3                   	ret    

c0012c93 <operator new[](unsigned long)>:
c0012c93:	e9 ab cb ff ff       	jmp    c000f843 <malloc>

c0012c98 <operator delete(void*, unsigned long)>:
c0012c98:	e9 c6 cb ff ff       	jmp    c000f863 <rfree>

c0012c9d <operator delete[](void*)>:
c0012c9d:	e9 c1 cb ff ff       	jmp    c000f863 <rfree>

c0012ca2 <operator delete[](void*, unsigned long)>:
c0012ca2:	e9 bc cb ff ff       	jmp    c000f863 <rfree>

c0012ca7 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012ca7:	57                   	push   edi
c0012ca8:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012cad:	56                   	push   esi
c0012cae:	be 0c a7 02 c0       	mov    esi,0xc002a70c
c0012cb3:	53                   	push   ebx
c0012cb4:	83 ec 40             	sub    esp,0x40
c0012cb7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012cbb:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012cbf:	fc                   	cld    
c0012cc0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012cc2:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012cc6:	83 f9 3e             	cmp    ecx,0x3e
c0012cc9:	7e 05                	jle    c0012cd0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012ccb:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012cd0:	89 df                	mov    edi,ebx
c0012cd2:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012cd6:	eb 02                	jmp    c0012cda <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012cd8:	89 c7                	mov    edi,eax
c0012cda:	31 d2                	xor    edx,edx
c0012cdc:	46                   	inc    esi
c0012cdd:	89 f8                	mov    eax,edi
c0012cdf:	f7 f1                	div    ecx
c0012ce1:	39 cf                	cmp    edi,ecx
c0012ce3:	73 f3                	jae    c0012cd8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012ce5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012ce8:	eb 02                	jmp    c0012cec <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012cea:	89 c3                	mov    ebx,eax
c0012cec:	31 d2                	xor    edx,edx
c0012cee:	4e                   	dec    esi
c0012cef:	89 d8                	mov    eax,ebx
c0012cf1:	f7 f1                	div    ecx
c0012cf3:	39 cb                	cmp    ebx,ecx
c0012cf5:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012cf9:	88 16                	mov    BYTE PTR [esi],dl
c0012cfb:	73 ed                	jae    c0012cea <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012cfd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012d01:	83 c4 40             	add    esp,0x40
c0012d04:	5b                   	pop    ebx
c0012d05:	5e                   	pop    esi
c0012d06:	5f                   	pop    edi
c0012d07:	c3                   	ret    

c0012d08 <Dbg::logc(char)>:
c0012d08:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012d0c:	ba fd 03 00 00       	mov    edx,0x3fd
c0012d11:	ec                   	in     al,dx
c0012d12:	a8 20                	test   al,0x20
c0012d14:	74 fb                	je     c0012d11 <Dbg::logc(char)+0x9>
c0012d16:	ba f8 03 00 00       	mov    edx,0x3f8
c0012d1b:	88 c8                	mov    al,cl
c0012d1d:	ee                   	out    dx,al
c0012d1e:	c3                   	ret    

c0012d1f <Dbg::logs(char*)>:
c0012d1f:	53                   	push   ebx
c0012d20:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012d24:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012d27:	84 c0                	test   al,al
c0012d29:	74 0f                	je     c0012d3a <Dbg::logs(char*)+0x1b>
c0012d2b:	50                   	push   eax
c0012d2c:	43                   	inc    ebx
c0012d2d:	e8 d6 ff ff ff       	call   c0012d08 <Dbg::logc(char)>
c0012d32:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012d35:	5a                   	pop    edx
c0012d36:	84 c0                	test   al,al
c0012d38:	75 f1                	jne    c0012d2b <Dbg::logs(char*)+0xc>
c0012d3a:	5b                   	pop    ebx
c0012d3b:	c3                   	ret    

c0012d3c <Dbg::logWriteInt(unsigned int)>:
c0012d3c:	83 ec 10             	sub    esp,0x10
c0012d3f:	6a 0a                	push   0xa
c0012d41:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012d45:	50                   	push   eax
c0012d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d4a:	e8 58 ff ff ff       	call   c0012ca7 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012d4f:	50                   	push   eax
c0012d50:	e8 ca ff ff ff       	call   c0012d1f <Dbg::logs(char*)>
c0012d55:	83 c4 20             	add    esp,0x20
c0012d58:	c3                   	ret    

c0012d59 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012d59:	83 ec 10             	sub    esp,0x10
c0012d5c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d60:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012d64:	50                   	push   eax
c0012d65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d69:	e8 39 ff ff ff       	call   c0012ca7 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012d6e:	50                   	push   eax
c0012d6f:	e8 ab ff ff ff       	call   c0012d1f <Dbg::logs(char*)>
c0012d74:	83 c4 20             	add    esp,0x20
c0012d77:	c3                   	ret    

c0012d78 <Dbg::kprintf(char const*, ...)>:
c0012d78:	55                   	push   ebp
c0012d79:	57                   	push   edi
c0012d7a:	56                   	push   esi
c0012d7b:	53                   	push   ebx
c0012d7c:	83 ec 0c             	sub    esp,0xc
c0012d7f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012d83:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012d87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012d8b:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012d8e:	84 c0                	test   al,al
c0012d90:	74 4a                	je     c0012ddc <Dbg::kprintf(char const*, ...)+0x64>
c0012d92:	31 db                	xor    ebx,ebx
c0012d94:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012d97:	3c 25                	cmp    al,0x25
c0012d99:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012d9c:	0f 85 e4 00 00 00    	jne    c0012e86 <Dbg::kprintf(char const*, ...)+0x10e>
c0012da2:	83 c3 02             	add    ebx,0x2
c0012da5:	8a 07                	mov    al,BYTE PTR [edi]
c0012da7:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012daa:	83 e8 25             	sub    eax,0x25
c0012dad:	3c 53                	cmp    al,0x53
c0012daf:	0f 87 ba 00 00 00    	ja     c0012e6f <Dbg::kprintf(char const*, ...)+0xf7>
c0012db5:	0f b6 c0             	movzx  eax,al
c0012db8:	ff 24 85 4c a7 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd58b4]
c0012dbf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012dc3:	89 c8                	mov    eax,ecx
c0012dc5:	83 c1 04             	add    ecx,0x4
c0012dc8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012dcc:	ff 30                	push   DWORD PTR [eax]
c0012dce:	e8 4c ff ff ff       	call   c0012d1f <Dbg::logs(char*)>
c0012dd3:	58                   	pop    eax
c0012dd4:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012dd8:	84 c0                	test   al,al
c0012dda:	75 b8                	jne    c0012d94 <Dbg::kprintf(char const*, ...)+0x1c>
c0012ddc:	83 c4 0c             	add    esp,0xc
c0012ddf:	5b                   	pop    ebx
c0012de0:	5e                   	pop    esi
c0012de1:	5f                   	pop    edi
c0012de2:	5d                   	pop    ebp
c0012de3:	c3                   	ret    
c0012de4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012de8:	89 d0                	mov    eax,edx
c0012dea:	83 c2 04             	add    edx,0x4
c0012ded:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012df1:	ff 30                	push   DWORD PTR [eax]
c0012df3:	e8 44 ff ff ff       	call   c0012d3c <Dbg::logWriteInt(unsigned int)>
c0012df8:	58                   	pop    eax
c0012df9:	eb d9                	jmp    c0012dd4 <Dbg::kprintf(char const*, ...)+0x5c>
c0012dfb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012dff:	89 d0                	mov    eax,edx
c0012e01:	83 c2 04             	add    edx,0x4
c0012e04:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012e07:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e0b:	50                   	push   eax
c0012e0c:	e8 f7 fe ff ff       	call   c0012d08 <Dbg::logc(char)>
c0012e11:	58                   	pop    eax
c0012e12:	eb c0                	jmp    c0012dd4 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e14:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e18:	89 c8                	mov    eax,ecx
c0012e1a:	83 c1 04             	add    ecx,0x4
c0012e1d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e21:	ff 30                	push   DWORD PTR [eax]
c0012e23:	e8 14 ff ff ff       	call   c0012d3c <Dbg::logWriteInt(unsigned int)>
c0012e28:	5f                   	pop    edi
c0012e29:	eb a9                	jmp    c0012dd4 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e2b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e2f:	89 c8                	mov    eax,ecx
c0012e31:	83 c1 04             	add    ecx,0x4
c0012e34:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e38:	6a 10                	push   0x10
c0012e3a:	ff 30                	push   DWORD PTR [eax]
c0012e3c:	e8 18 ff ff ff       	call   c0012d59 <Dbg::logWriteIntBase(unsigned int, int)>
c0012e41:	59                   	pop    ecx
c0012e42:	5f                   	pop    edi
c0012e43:	eb 8f                	jmp    c0012dd4 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e45:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e49:	89 d0                	mov    eax,edx
c0012e4b:	83 c2 08             	add    edx,0x8
c0012e4e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e52:	6a 10                	push   0x10
c0012e54:	ff 30                	push   DWORD PTR [eax]
c0012e56:	e8 fe fe ff ff       	call   c0012d59 <Dbg::logWriteIntBase(unsigned int, int)>
c0012e5b:	58                   	pop    eax
c0012e5c:	5a                   	pop    edx
c0012e5d:	e9 72 ff ff ff       	jmp    c0012dd4 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e62:	6a 25                	push   0x25
c0012e64:	e8 9f fe ff ff       	call   c0012d08 <Dbg::logc(char)>
c0012e69:	58                   	pop    eax
c0012e6a:	e9 65 ff ff ff       	jmp    c0012dd4 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e6f:	6a 25                	push   0x25
c0012e71:	e8 92 fe ff ff       	call   c0012d08 <Dbg::logc(char)>
c0012e76:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012e79:	50                   	push   eax
c0012e7a:	e8 89 fe ff ff       	call   c0012d08 <Dbg::logc(char)>
c0012e7f:	5a                   	pop    edx
c0012e80:	59                   	pop    ecx
c0012e81:	e9 4e ff ff ff       	jmp    c0012dd4 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e86:	50                   	push   eax
c0012e87:	89 eb                	mov    ebx,ebp
c0012e89:	e8 7a fe ff ff       	call   c0012d08 <Dbg::logc(char)>
c0012e8e:	89 fd                	mov    ebp,edi
c0012e90:	58                   	pop    eax
c0012e91:	e9 3e ff ff ff       	jmp    c0012dd4 <Dbg::kprintf(char const*, ...)+0x5c>

c0012e96 <File::read(unsigned long long, void*, int*)>:
c0012e96:	53                   	push   ebx
c0012e97:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012e9b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012e9f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ea6:	3c 19                	cmp    al,0x19
c0012ea8:	77 35                	ja     c0012edf <File::read(unsigned long long, void*, int*)+0x49>
c0012eaa:	8b 04 85 20 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17e0]
c0012eb1:	85 c0                	test   eax,eax
c0012eb3:	74 2a                	je     c0012edf <File::read(unsigned long long, void*, int*)+0x49>
c0012eb5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012ebb:	85 c0                	test   eax,eax
c0012ebd:	74 20                	je     c0012edf <File::read(unsigned long long, void*, int*)+0x49>
c0012ebf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ec3:	74 21                	je     c0012ee6 <File::read(unsigned long long, void*, int*)+0x50>
c0012ec5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012ec7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012ecb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012ed1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012ed5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012ed9:	5b                   	pop    ebx
c0012eda:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012edd:	ff e0                	jmp    eax
c0012edf:	b8 0b 00 00 00       	mov    eax,0xb
c0012ee4:	eb 05                	jmp    c0012eeb <File::read(unsigned long long, void*, int*)+0x55>
c0012ee6:	b8 05 00 00 00       	mov    eax,0x5
c0012eeb:	5b                   	pop    ebx
c0012eec:	c3                   	ret    
c0012eed:	90                   	nop

c0012eee <File::write(unsigned long long, void*, int*)>:
c0012eee:	53                   	push   ebx
c0012eef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ef3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ef7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012efe:	3c 19                	cmp    al,0x19
c0012f00:	77 35                	ja     c0012f37 <File::write(unsigned long long, void*, int*)+0x49>
c0012f02:	8b 04 85 20 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17e0]
c0012f09:	85 c0                	test   eax,eax
c0012f0b:	74 2a                	je     c0012f37 <File::write(unsigned long long, void*, int*)+0x49>
c0012f0d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f13:	85 c0                	test   eax,eax
c0012f15:	74 20                	je     c0012f37 <File::write(unsigned long long, void*, int*)+0x49>
c0012f17:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f1b:	74 21                	je     c0012f3e <File::write(unsigned long long, void*, int*)+0x50>
c0012f1d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f1f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f23:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f2d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012f31:	5b                   	pop    ebx
c0012f32:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012f35:	ff e0                	jmp    eax
c0012f37:	b8 0b 00 00 00       	mov    eax,0xb
c0012f3c:	eb 05                	jmp    c0012f43 <File::write(unsigned long long, void*, int*)+0x55>
c0012f3e:	b8 05 00 00 00       	mov    eax,0x5
c0012f43:	5b                   	pop    ebx
c0012f44:	c3                   	ret    
c0012f45:	90                   	nop

c0012f46 <Directory::read(unsigned long long, void*, int*)>:
c0012f46:	53                   	push   ebx
c0012f47:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f4b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f4f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f56:	3c 19                	cmp    al,0x19
c0012f58:	77 35                	ja     c0012f8f <Directory::read(unsigned long long, void*, int*)+0x49>
c0012f5a:	8b 04 85 20 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17e0]
c0012f61:	85 c0                	test   eax,eax
c0012f63:	74 2a                	je     c0012f8f <Directory::read(unsigned long long, void*, int*)+0x49>
c0012f65:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f6b:	85 c0                	test   eax,eax
c0012f6d:	74 20                	je     c0012f8f <Directory::read(unsigned long long, void*, int*)+0x49>
c0012f6f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f73:	74 21                	je     c0012f96 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012f75:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f77:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f7b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012f81:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f85:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012f89:	5b                   	pop    ebx
c0012f8a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012f8d:	ff e0                	jmp    eax
c0012f8f:	b8 0b 00 00 00       	mov    eax,0xb
c0012f94:	eb 05                	jmp    c0012f9b <Directory::read(unsigned long long, void*, int*)+0x55>
c0012f96:	b8 05 00 00 00       	mov    eax,0x5
c0012f9b:	5b                   	pop    ebx
c0012f9c:	c3                   	ret    
c0012f9d:	90                   	nop

c0012f9e <Directory::write(unsigned long long, void*, int*)>:
c0012f9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012fa2:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012fa9:	b8 0b 00 00 00       	mov    eax,0xb
c0012fae:	80 fa 19             	cmp    dl,0x19
c0012fb1:	77 18                	ja     c0012fcb <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012fb3:	8b 14 95 20 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17e0]
c0012fba:	85 d2                	test   edx,edx
c0012fbc:	74 0d                	je     c0012fcb <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012fbe:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012fc5:	19 c0                	sbb    eax,eax
c0012fc7:	83 e0 0a             	and    eax,0xa
c0012fca:	40                   	inc    eax
c0012fcb:	c3                   	ret    

c0012fcc <File::isAtty()>:
c0012fcc:	31 c0                	xor    eax,eax
c0012fce:	c3                   	ret    
c0012fcf:	90                   	nop

c0012fd0 <Directory::isAtty()>:
c0012fd0:	31 c0                	xor    eax,eax
c0012fd2:	c3                   	ret    
c0012fd3:	90                   	nop

c0012fd4 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012fd4:	b8 0a 00 00 00       	mov    eax,0xa
c0012fd9:	c3                   	ret    

c0012fda <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012fda:	b8 0a 00 00 00       	mov    eax,0xa
c0012fdf:	c3                   	ret    

c0012fe0 <File::~File()>:
c0012fe0:	83 ec 0c             	sub    esp,0xc
c0012fe3:	ba 08 a9 02 c0       	mov    edx,0xc002a908
c0012fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fec:	89 10                	mov    DWORD PTR [eax],edx
c0012fee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ff2:	83 ec 0c             	sub    esp,0xc
c0012ff5:	50                   	push   eax
c0012ff6:	e8 e3 e8 ff ff       	call   c00118de <UnixFile::~UnixFile()>
c0012ffb:	83 c4 10             	add    esp,0x10
c0012ffe:	90                   	nop
c0012fff:	83 c4 0c             	add    esp,0xc
c0013002:	c3                   	ret    
c0013003:	90                   	nop

c0013004 <File::~File()>:
c0013004:	83 ec 0c             	sub    esp,0xc
c0013007:	83 ec 0c             	sub    esp,0xc
c001300a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001300e:	e8 cd ff ff ff       	call   c0012fe0 <File::~File()>
c0013013:	83 c4 10             	add    esp,0x10
c0013016:	83 ec 08             	sub    esp,0x8
c0013019:	68 14 01 00 00       	push   0x114
c001301e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013022:	e8 71 fc ff ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0013027:	83 c4 10             	add    esp,0x10
c001302a:	83 c4 0c             	add    esp,0xc
c001302d:	c3                   	ret    

c001302e <Directory::~Directory()>:
c001302e:	83 ec 0c             	sub    esp,0xc
c0013031:	ba 24 a9 02 c0       	mov    edx,0xc002a924
c0013036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001303a:	89 10                	mov    DWORD PTR [eax],edx
c001303c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013040:	83 ec 0c             	sub    esp,0xc
c0013043:	50                   	push   eax
c0013044:	e8 95 e8 ff ff       	call   c00118de <UnixFile::~UnixFile()>
c0013049:	83 c4 10             	add    esp,0x10
c001304c:	90                   	nop
c001304d:	83 c4 0c             	add    esp,0xc
c0013050:	c3                   	ret    
c0013051:	90                   	nop

c0013052 <Directory::~Directory()>:
c0013052:	83 ec 0c             	sub    esp,0xc
c0013055:	83 ec 0c             	sub    esp,0xc
c0013058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001305c:	e8 cd ff ff ff       	call   c001302e <Directory::~Directory()>
c0013061:	83 c4 10             	add    esp,0x10
c0013064:	83 ec 08             	sub    esp,0x8
c0013067:	68 14 01 00 00       	push   0x114
c001306c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013070:	e8 23 fc ff ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0013075:	83 c4 10             	add    esp,0x10
c0013078:	83 c4 0c             	add    esp,0xc
c001307b:	c3                   	ret    

c001307c <Filesystem::Filesystem()>:
c001307c:	ba a4 a8 02 c0       	mov    edx,0xc002a8a4
c0013081:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013085:	89 10                	mov    DWORD PTR [eax],edx
c0013087:	8b 15 90 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e390
c001308d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013091:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013098:	a3 90 e3 02 c0       	mov    ds:0xc002e390,eax
c001309d:	90                   	nop
c001309e:	c3                   	ret    
c001309f:	90                   	nop

c00130a0 <Filesystem::~Filesystem()>:
c00130a0:	ba a4 a8 02 c0       	mov    edx,0xc002a8a4
c00130a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130a9:	89 10                	mov    DWORD PTR [eax],edx
c00130ab:	90                   	nop
c00130ac:	c3                   	ret    
c00130ad:	90                   	nop

c00130ae <Filesystem::~Filesystem()>:
c00130ae:	83 ec 0c             	sub    esp,0xc
c00130b1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00130b5:	e8 e6 ff ff ff       	call   c00130a0 <Filesystem::~Filesystem()>
c00130ba:	83 c4 04             	add    esp,0x4
c00130bd:	83 ec 08             	sub    esp,0x8
c00130c0:	6a 08                	push   0x8
c00130c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130c6:	e8 cd fb ff ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c00130cb:	83 c4 10             	add    esp,0x10
c00130ce:	83 c4 0c             	add    esp,0xc
c00130d1:	c3                   	ret    

c00130d2 <Fs::getcwd(Process*, char*, int)>:
c00130d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130d6:	31 c0                	xor    eax,eax
c00130d8:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00130db:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00130df:	7d 15                	jge    c00130f6 <Fs::getcwd(Process*, char*, int)+0x24>
c00130e1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00130e5:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00130ec:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00130ef:	84 c9                	test   cl,cl
c00130f1:	74 06                	je     c00130f9 <Fs::getcwd(Process*, char*, int)+0x27>
c00130f3:	40                   	inc    eax
c00130f4:	eb e2                	jmp    c00130d8 <Fs::getcwd(Process*, char*, int)+0x6>
c00130f6:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00130f9:	31 c0                	xor    eax,eax
c00130fb:	c3                   	ret    

c00130fc <Fs::initVFS()>:
c00130fc:	83 ec 18             	sub    esp,0x18
c00130ff:	6a 08                	push   0x8
c0013101:	e8 3d c7 ff ff       	call   c000f843 <malloc>
c0013106:	89 04 24             	mov    DWORD PTR [esp],eax
c0013109:	e8 e0 dc 00 00       	call   c0020dee <FAT::FAT()>
c001310e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013115:	e8 29 c7 ff ff       	call   c000f843 <malloc>
c001311a:	89 04 24             	mov    DWORD PTR [esp],eax
c001311d:	e8 24 ef 00 00       	call   c0022046 <ISO9660::ISO9660()>
c0013122:	83 c4 1c             	add    esp,0x1c
c0013125:	c3                   	ret    

c0013126 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013126:	55                   	push   ebp
c0013127:	57                   	push   edi
c0013128:	56                   	push   esi
c0013129:	53                   	push   ebx
c001312a:	81 ec 10 04 00 00    	sub    esp,0x410
c0013130:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013137:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c001313e:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013145:	68 00 04 00 00       	push   0x400
c001314a:	6a 00                	push   0x0
c001314c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013150:	56                   	push   esi
c0013151:	e8 22 d6 fe ff       	call   c0000778 <memset>
c0013156:	83 c4 10             	add    esp,0x10
c0013159:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001315d:	75 0b                	jne    c001316a <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c001315f:	50                   	push   eax
c0013160:	50                   	push   eax
c0013161:	57                   	push   edi
c0013162:	56                   	push   esi
c0013163:	e8 cc d6 fe ff       	call   c0000834 <strcpy>
c0013168:	eb 41                	jmp    c00131ab <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c001316a:	8a 07                	mov    al,BYTE PTR [edi]
c001316c:	3c 5c                	cmp    al,0x5c
c001316e:	74 04                	je     c0013174 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013170:	3c 2f                	cmp    al,0x2f
c0013172:	75 18                	jne    c001318c <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0013174:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0013177:	3c 60                	cmp    al,0x60
c0013179:	7e 03                	jle    c001317e <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c001317b:	83 e8 20             	sub    eax,0x20
c001317e:	88 04 24             	mov    BYTE PTR [esp],al
c0013181:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013188:	50                   	push   eax
c0013189:	50                   	push   eax
c001318a:	eb 18                	jmp    c00131a4 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c001318c:	50                   	push   eax
c001318d:	50                   	push   eax
c001318e:	55                   	push   ebp
c001318f:	56                   	push   esi
c0013190:	e8 9f d6 fe ff       	call   c0000834 <strcpy>
c0013195:	5a                   	pop    edx
c0013196:	59                   	pop    ecx
c0013197:	68 f8 bf 02 c0       	push   0xc002bff8
c001319c:	56                   	push   esi
c001319d:	e8 d2 d7 fe ff       	call   c0000974 <strcat>
c00131a2:	5d                   	pop    ebp
c00131a3:	58                   	pop    eax
c00131a4:	57                   	push   edi
c00131a5:	56                   	push   esi
c00131a6:	e8 c9 d7 fe ff       	call   c0000974 <strcat>
c00131ab:	83 c4 10             	add    esp,0x10
c00131ae:	8a 04 24             	mov    al,BYTE PTR [esp]
c00131b1:	3c 60                	cmp    al,0x60
c00131b3:	7e 03                	jle    c00131b8 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c00131b5:	83 e8 20             	sub    eax,0x20
c00131b8:	88 04 24             	mov    BYTE PTR [esp],al
c00131bb:	88 03                	mov    BYTE PTR [ebx],al
c00131bd:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00131c4:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00131ca:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00131ce:	bf 03 00 00 00       	mov    edi,0x3
c00131d3:	b8 03 00 00 00       	mov    eax,0x3
c00131d8:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00131db:	84 d2                	test   dl,dl
c00131dd:	0f 84 91 00 00 00    	je     c0013274 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00131e3:	8d 4f 01             	lea    ecx,[edi+0x1]
c00131e6:	80 fa 5c             	cmp    dl,0x5c
c00131e9:	74 05                	je     c00131f0 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00131eb:	80 fa 2f             	cmp    dl,0x2f
c00131ee:	75 12                	jne    c0013202 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00131f0:	89 c5                	mov    ebp,eax
c00131f2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00131f7:	74 09                	je     c0013202 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00131f9:	40                   	inc    eax
c00131fa:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00131fe:	89 cf                	mov    edi,ecx
c0013200:	eb d6                	jmp    c00131d8 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013202:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013207:	75 5b                	jne    c0013264 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013209:	80 fa 2e             	cmp    dl,0x2e
c001320c:	75 56                	jne    c0013264 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001320e:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013212:	74 19                	je     c001322d <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013214:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013219:	74 53                	je     c001326e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001321b:	89 f9                	mov    ecx,edi
c001321d:	41                   	inc    ecx
c001321e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013221:	80 fa 2f             	cmp    dl,0x2f
c0013224:	74 f7                	je     c001321d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013226:	80 fa 5c             	cmp    dl,0x5c
c0013229:	74 f2                	je     c001321d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001322b:	eb d1                	jmp    c00131fe <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001322d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013232:	74 3a                	je     c001326e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013234:	83 f8 03             	cmp    eax,0x3
c0013237:	74 c5                	je     c00131fe <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013239:	41                   	inc    ecx
c001323a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001323d:	80 fa 2f             	cmp    dl,0x2f
c0013240:	74 f7                	je     c0013239 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013242:	80 fa 5c             	cmp    dl,0x5c
c0013245:	74 f2                	je     c0013239 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013247:	48                   	dec    eax
c0013248:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001324c:	75 06                	jne    c0013254 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001324e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013252:	eb f3                	jmp    c0013247 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013254:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013258:	74 07                	je     c0013261 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c001325a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001325e:	48                   	dec    eax
c001325f:	eb f3                	jmp    c0013254 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013261:	40                   	inc    eax
c0013262:	eb 9a                	jmp    c00131fe <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013264:	80 fa 2f             	cmp    dl,0x2f
c0013267:	74 95                	je     c00131fe <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013269:	80 fa 5c             	cmp    dl,0x5c
c001326c:	74 90                	je     c00131fe <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001326e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013271:	40                   	inc    eax
c0013272:	eb 8a                	jmp    c00131fe <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013274:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013278:	83 ec 0c             	sub    esp,0xc
c001327b:	53                   	push   ebx
c001327c:	e8 13 d5 fe ff       	call   c0000794 <strlen>
c0013281:	83 c4 10             	add    esp,0x10
c0013284:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0013289:	75 26                	jne    c00132b1 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c001328b:	83 ec 0c             	sub    esp,0xc
c001328e:	53                   	push   ebx
c001328f:	e8 00 d5 fe ff       	call   c0000794 <strlen>
c0013294:	83 c4 10             	add    esp,0x10
c0013297:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001329c:	74 26                	je     c00132c4 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c001329e:	83 ec 0c             	sub    esp,0xc
c00132a1:	53                   	push   ebx
c00132a2:	e8 ed d4 fe ff       	call   c0000794 <strlen>
c00132a7:	83 c4 10             	add    esp,0x10
c00132aa:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00132af:	eb c7                	jmp    c0013278 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c00132b1:	83 ec 0c             	sub    esp,0xc
c00132b4:	53                   	push   ebx
c00132b5:	e8 da d4 fe ff       	call   c0000794 <strlen>
c00132ba:	83 c4 10             	add    esp,0x10
c00132bd:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00132c2:	74 c7                	je     c001328b <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00132c4:	81 c4 0c 04 00 00    	add    esp,0x40c
c00132ca:	5b                   	pop    ebx
c00132cb:	5e                   	pop    esi
c00132cc:	5f                   	pop    edi
c00132cd:	5d                   	pop    ebp
c00132ce:	c3                   	ret    
c00132cf:	90                   	nop

c00132d0 <File::File(char const*, Process*)>:
c00132d0:	83 ec 0c             	sub    esp,0xc
c00132d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132d7:	83 ec 08             	sub    esp,0x8
c00132da:	6a 00                	push   0x0
c00132dc:	50                   	push   eax
c00132dd:	e8 1a e4 ff ff       	call   c00116fc <UnixFile::UnixFile(int)>
c00132e2:	83 c4 10             	add    esp,0x10
c00132e5:	ba 08 a9 02 c0       	mov    edx,0xc002a908
c00132ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132ee:	89 10                	mov    DWORD PTR [eax],edx
c00132f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132f4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00132fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132fe:	83 c0 0d             	add    eax,0xd
c0013301:	83 ec 04             	sub    esp,0x4
c0013304:	52                   	push   edx
c0013305:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013309:	50                   	push   eax
c001330a:	e8 17 fe ff ff       	call   c0013126 <Fs::standardiseFiles(char*, char const*, char const*)>
c001330f:	83 c4 10             	add    esp,0x10
c0013312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013316:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013319:	8d 50 bf             	lea    edx,[eax-0x41]
c001331c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013320:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001332a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001332e:	90                   	nop
c001332f:	83 c4 0c             	add    esp,0xc
c0013332:	c3                   	ret    
c0013333:	90                   	nop

c0013334 <File::open(FileOpenMode)>:
c0013334:	53                   	push   ebx
c0013335:	b8 0b 00 00 00       	mov    eax,0xb
c001333a:	83 ec 08             	sub    esp,0x8
c001333d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013341:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013348:	80 fa 19             	cmp    dl,0x19
c001334b:	77 40                	ja     c001338d <File::open(FileOpenMode)+0x59>
c001334d:	8b 14 95 20 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17e0]
c0013354:	85 d2                	test   edx,edx
c0013356:	74 35                	je     c001338d <File::open(FileOpenMode)+0x59>
c0013358:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001335e:	85 d2                	test   edx,edx
c0013360:	74 2b                	je     c001338d <File::open(FileOpenMode)+0x59>
c0013362:	b8 06 00 00 00       	mov    eax,0x6
c0013367:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001336b:	75 20                	jne    c001338d <File::open(FileOpenMode)+0x59>
c001336d:	8b 02                	mov    eax,DWORD PTR [edx]
c001336f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013375:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013379:	51                   	push   ecx
c001337a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001337d:	51                   	push   ecx
c001337e:	52                   	push   edx
c001337f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013382:	83 c4 10             	add    esp,0x10
c0013385:	85 c0                	test   eax,eax
c0013387:	75 04                	jne    c001338d <File::open(FileOpenMode)+0x59>
c0013389:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001338d:	83 c4 08             	add    esp,0x8
c0013390:	5b                   	pop    ebx
c0013391:	c3                   	ret    

c0013392 <File::close()>:
c0013392:	53                   	push   ebx
c0013393:	b8 0b 00 00 00       	mov    eax,0xb
c0013398:	83 ec 08             	sub    esp,0x8
c001339b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001339f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133a6:	80 fa 19             	cmp    dl,0x19
c00133a9:	77 41                	ja     c00133ec <File::close()+0x5a>
c00133ab:	8b 1c 95 20 e8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd17e0]
c00133b2:	85 db                	test   ebx,ebx
c00133b4:	74 36                	je     c00133ec <File::close()+0x5a>
c00133b6:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00133bd:	74 2d                	je     c00133ec <File::close()+0x5a>
c00133bf:	b8 05 00 00 00       	mov    eax,0x5
c00133c4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00133c8:	74 22                	je     c00133ec <File::close()+0x5a>
c00133ca:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00133ce:	8b 04 95 20 e8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd17e0]
c00133d5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00133db:	53                   	push   ebx
c00133dc:	53                   	push   ebx
c00133dd:	8b 10                	mov    edx,DWORD PTR [eax]
c00133df:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00133e5:	50                   	push   eax
c00133e6:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00133e9:	83 c4 10             	add    esp,0x10
c00133ec:	83 c4 08             	add    esp,0x8
c00133ef:	5b                   	pop    ebx
c00133f0:	c3                   	ret    
c00133f1:	90                   	nop

c00133f2 <File::seek(unsigned long long)>:
c00133f2:	56                   	push   esi
c00133f3:	53                   	push   ebx
c00133f4:	b8 0b 00 00 00       	mov    eax,0xb
c00133f9:	51                   	push   ecx
c00133fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00133fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013402:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013409:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001340d:	80 fa 19             	cmp    dl,0x19
c0013410:	77 31                	ja     c0013443 <File::seek(unsigned long long)+0x51>
c0013412:	8b 14 95 20 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17e0]
c0013419:	85 d2                	test   edx,edx
c001341b:	74 26                	je     c0013443 <File::seek(unsigned long long)+0x51>
c001341d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013423:	85 d2                	test   edx,edx
c0013425:	74 1c                	je     c0013443 <File::seek(unsigned long long)+0x51>
c0013427:	b8 05 00 00 00       	mov    eax,0x5
c001342c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013430:	74 11                	je     c0013443 <File::seek(unsigned long long)+0x51>
c0013432:	8b 02                	mov    eax,DWORD PTR [edx]
c0013434:	53                   	push   ebx
c0013435:	51                   	push   ecx
c0013436:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001343c:	52                   	push   edx
c001343d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013440:	83 c4 10             	add    esp,0x10
c0013443:	5a                   	pop    edx
c0013444:	5b                   	pop    ebx
c0013445:	5e                   	pop    esi
c0013446:	c3                   	ret    
c0013447:	90                   	nop

c0013448 <File::tell(unsigned long long*)>:
c0013448:	83 ec 0c             	sub    esp,0xc
c001344b:	b8 0b 00 00 00       	mov    eax,0xb
c0013450:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013454:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001345b:	80 fa 19             	cmp    dl,0x19
c001345e:	77 34                	ja     c0013494 <File::tell(unsigned long long*)+0x4c>
c0013460:	8b 14 95 20 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17e0]
c0013467:	85 d2                	test   edx,edx
c0013469:	74 29                	je     c0013494 <File::tell(unsigned long long*)+0x4c>
c001346b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013471:	85 d2                	test   edx,edx
c0013473:	74 1f                	je     c0013494 <File::tell(unsigned long long*)+0x4c>
c0013475:	b8 05 00 00 00       	mov    eax,0x5
c001347a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001347e:	74 14                	je     c0013494 <File::tell(unsigned long long*)+0x4c>
c0013480:	50                   	push   eax
c0013481:	8b 02                	mov    eax,DWORD PTR [edx]
c0013483:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013487:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001348d:	52                   	push   edx
c001348e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013491:	83 c4 10             	add    esp,0x10
c0013494:	83 c4 0c             	add    esp,0xc
c0013497:	c3                   	ret    

c0013498 <File::rewind()>:
c0013498:	83 ec 10             	sub    esp,0x10
c001349b:	6a 00                	push   0x0
c001349d:	6a 00                	push   0x0
c001349f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134a3:	e8 4a ff ff ff       	call   c00133f2 <File::seek(unsigned long long)>
c00134a8:	83 c4 1c             	add    esp,0x1c
c00134ab:	c3                   	ret    

c00134ac <File::unlink()>:
c00134ac:	83 ec 0c             	sub    esp,0xc
c00134af:	b8 0b 00 00 00       	mov    eax,0xb
c00134b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134b8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134bf:	80 f9 19             	cmp    cl,0x19
c00134c2:	77 2f                	ja     c00134f3 <File::unlink()+0x47>
c00134c4:	8b 0c 8d 20 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17e0]
c00134cb:	85 c9                	test   ecx,ecx
c00134cd:	74 24                	je     c00134f3 <File::unlink()+0x47>
c00134cf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00134d5:	85 c9                	test   ecx,ecx
c00134d7:	74 1a                	je     c00134f3 <File::unlink()+0x47>
c00134d9:	b8 06 00 00 00       	mov    eax,0x6
c00134de:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00134e2:	75 0f                	jne    c00134f3 <File::unlink()+0x47>
c00134e4:	83 c2 0d             	add    edx,0xd
c00134e7:	50                   	push   eax
c00134e8:	50                   	push   eax
c00134e9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134eb:	52                   	push   edx
c00134ec:	51                   	push   ecx
c00134ed:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00134f0:	83 c4 10             	add    esp,0x10
c00134f3:	83 c4 0c             	add    esp,0xc
c00134f6:	c3                   	ret    
c00134f7:	90                   	nop

c00134f8 <File::rename(char const*)>:
c00134f8:	83 ec 0c             	sub    esp,0xc
c00134fb:	b8 0b 00 00 00       	mov    eax,0xb
c0013500:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013504:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001350b:	80 f9 19             	cmp    cl,0x19
c001350e:	77 32                	ja     c0013542 <File::rename(char const*)+0x4a>
c0013510:	8b 0c 8d 20 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17e0]
c0013517:	85 c9                	test   ecx,ecx
c0013519:	74 27                	je     c0013542 <File::rename(char const*)+0x4a>
c001351b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013521:	85 c9                	test   ecx,ecx
c0013523:	74 1d                	je     c0013542 <File::rename(char const*)+0x4a>
c0013525:	b8 06 00 00 00       	mov    eax,0x6
c001352a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001352e:	75 12                	jne    c0013542 <File::rename(char const*)+0x4a>
c0013530:	83 c2 0d             	add    edx,0xd
c0013533:	50                   	push   eax
c0013534:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013536:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001353a:	52                   	push   edx
c001353b:	51                   	push   ecx
c001353c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001353f:	83 c4 10             	add    esp,0x10
c0013542:	83 c4 0c             	add    esp,0xc
c0013545:	c3                   	ret    

c0013546 <File::chfatattr(unsigned char, unsigned char)>:
c0013546:	57                   	push   edi
c0013547:	b8 0b 00 00 00       	mov    eax,0xb
c001354c:	56                   	push   esi
c001354d:	53                   	push   ebx
c001354e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013552:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013556:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001355d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013561:	80 f9 19             	cmp    cl,0x19
c0013564:	77 37                	ja     c001359d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013566:	8b 0c 8d 20 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17e0]
c001356d:	85 c9                	test   ecx,ecx
c001356f:	74 2c                	je     c001359d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013571:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013577:	85 c9                	test   ecx,ecx
c0013579:	74 22                	je     c001359d <File::chfatattr(unsigned char, unsigned char)+0x57>
c001357b:	b8 06 00 00 00       	mov    eax,0x6
c0013580:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013584:	75 17                	jne    c001359d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013586:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013588:	89 f0                	mov    eax,esi
c001358a:	83 c2 0d             	add    edx,0xd
c001358d:	0f b6 f0             	movzx  esi,al
c0013590:	0f b6 db             	movzx  ebx,bl
c0013593:	56                   	push   esi
c0013594:	53                   	push   ebx
c0013595:	52                   	push   edx
c0013596:	51                   	push   ecx
c0013597:	ff 57 34             	call   DWORD PTR [edi+0x34]
c001359a:	83 c4 10             	add    esp,0x10
c001359d:	5b                   	pop    ebx
c001359e:	5e                   	pop    esi
c001359f:	5f                   	pop    edi
c00135a0:	c3                   	ret    
c00135a1:	90                   	nop

c00135a2 <File::exists()>:
c00135a2:	83 ec 0c             	sub    esp,0xc
c00135a5:	31 c0                	xor    eax,eax
c00135a7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135ab:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135b2:	80 f9 19             	cmp    cl,0x19
c00135b5:	77 24                	ja     c00135db <File::exists()+0x39>
c00135b7:	8b 0c 8d 20 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17e0]
c00135be:	85 c9                	test   ecx,ecx
c00135c0:	74 19                	je     c00135db <File::exists()+0x39>
c00135c2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135c8:	85 c9                	test   ecx,ecx
c00135ca:	74 0f                	je     c00135db <File::exists()+0x39>
c00135cc:	83 c2 0d             	add    edx,0xd
c00135cf:	50                   	push   eax
c00135d0:	50                   	push   eax
c00135d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135d3:	52                   	push   edx
c00135d4:	51                   	push   ecx
c00135d5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00135d8:	83 c4 10             	add    esp,0x10
c00135db:	83 c4 0c             	add    esp,0xc
c00135de:	c3                   	ret    
c00135df:	90                   	nop

c00135e0 <File::stat(unsigned long long*, bool*)>:
c00135e0:	56                   	push   esi
c00135e1:	53                   	push   ebx
c00135e2:	50                   	push   eax
c00135e3:	b8 0b 00 00 00       	mov    eax,0xb
c00135e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135ec:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00135f0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135f7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00135fb:	80 f9 19             	cmp    cl,0x19
c00135fe:	77 3d                	ja     c001363d <File::stat(unsigned long long*, bool*)+0x5d>
c0013600:	8b 0c 8d 20 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17e0]
c0013607:	85 c9                	test   ecx,ecx
c0013609:	74 32                	je     c001363d <File::stat(unsigned long long*, bool*)+0x5d>
c001360b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013611:	85 c9                	test   ecx,ecx
c0013613:	74 28                	je     c001363d <File::stat(unsigned long long*, bool*)+0x5d>
c0013615:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013617:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001361b:	74 13                	je     c0013630 <File::stat(unsigned long long*, bool*)+0x50>
c001361d:	83 ec 04             	sub    esp,0x4
c0013620:	56                   	push   esi
c0013621:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013627:	51                   	push   ecx
c0013628:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001362b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001362e:	eb 0a                	jmp    c001363a <File::stat(unsigned long long*, bool*)+0x5a>
c0013630:	53                   	push   ebx
c0013631:	83 c2 0d             	add    edx,0xd
c0013634:	56                   	push   esi
c0013635:	52                   	push   edx
c0013636:	51                   	push   ecx
c0013637:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001363a:	83 c4 10             	add    esp,0x10
c001363d:	5a                   	pop    edx
c001363e:	5b                   	pop    ebx
c001363f:	5e                   	pop    esi
c0013640:	c3                   	ret    

c0013641 <Fs::setcwd(Process*, char*)>:
c0013641:	55                   	push   ebp
c0013642:	57                   	push   edi
c0013643:	56                   	push   esi
c0013644:	53                   	push   ebx
c0013645:	81 ec 20 02 00 00    	sub    esp,0x220
c001364b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013652:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013658:	57                   	push   edi
c0013659:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013660:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013664:	56                   	push   esi
c0013665:	e8 bc fa ff ff       	call   c0013126 <Fs::standardiseFiles(char*, char const*, char const*)>
c001366a:	89 34 24             	mov    DWORD PTR [esp],esi
c001366d:	e8 22 d1 fe ff       	call   c0000794 <strlen>
c0013672:	83 c4 10             	add    esp,0x10
c0013675:	83 f8 02             	cmp    eax,0x2
c0013678:	77 17                	ja     c0013691 <Fs::setcwd(Process*, char*)+0x50>
c001367a:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c001367f:	83 e8 41             	sub    eax,0x41
c0013682:	83 f8 19             	cmp    eax,0x19
c0013685:	76 24                	jbe    c00136ab <Fs::setcwd(Process*, char*)+0x6a>
c0013687:	b8 03 00 00 00       	mov    eax,0x3
c001368c:	e9 e0 00 00 00       	jmp    c0013771 <Fs::setcwd(Process*, char*)+0x130>
c0013691:	83 ec 0c             	sub    esp,0xc
c0013694:	56                   	push   esi
c0013695:	e8 fa d0 fe ff       	call   c0000794 <strlen>
c001369a:	83 c4 10             	add    esp,0x10
c001369d:	83 f8 03             	cmp    eax,0x3
c00136a0:	75 34                	jne    c00136d6 <Fs::setcwd(Process*, char*)+0x95>
c00136a2:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00136a7:	75 2d                	jne    c00136d6 <Fs::setcwd(Process*, char*)+0x95>
c00136a9:	eb cf                	jmp    c001367a <Fs::setcwd(Process*, char*)+0x39>
c00136ab:	8b 14 85 20 e8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd17e0]
c00136b2:	b8 05 00 00 00       	mov    eax,0x5
c00136b7:	85 d2                	test   edx,edx
c00136b9:	0f 84 b2 00 00 00    	je     c0013771 <Fs::setcwd(Process*, char*)+0x130>
c00136bf:	b8 06 00 00 00       	mov    eax,0x6
c00136c4:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00136cb:	0f 85 92 00 00 00    	jne    c0013763 <Fs::setcwd(Process*, char*)+0x122>
c00136d1:	e9 9b 00 00 00       	jmp    c0013771 <Fs::setcwd(Process*, char*)+0x130>
c00136d6:	83 ec 0c             	sub    esp,0xc
c00136d9:	68 14 01 00 00       	push   0x114
c00136de:	e8 60 c1 ff ff       	call   c000f843 <malloc>
c00136e3:	83 c4 0c             	add    esp,0xc
c00136e6:	89 c3                	mov    ebx,eax
c00136e8:	55                   	push   ebp
c00136e9:	56                   	push   esi
c00136ea:	50                   	push   eax
c00136eb:	e8 e0 fb ff ff       	call   c00132d0 <File::File(char const*, Process*)>
c00136f0:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00136f5:	83 c4 0c             	add    esp,0xc
c00136f8:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00136fc:	50                   	push   eax
c00136fd:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013701:	50                   	push   eax
c0013702:	53                   	push   ebx
c0013703:	e8 d8 fe ff ff       	call   c00135e0 <File::stat(unsigned long long*, bool*)>
c0013708:	83 c4 10             	add    esp,0x10
c001370b:	83 f8 02             	cmp    eax,0x2
c001370e:	74 04                	je     c0013714 <Fs::setcwd(Process*, char*)+0xd3>
c0013710:	85 c0                	test   eax,eax
c0013712:	74 1c                	je     c0013730 <Fs::setcwd(Process*, char*)+0xef>
c0013714:	b8 01 00 00 00       	mov    eax,0x1
c0013719:	85 db                	test   ebx,ebx
c001371b:	74 54                	je     c0013771 <Fs::setcwd(Process*, char*)+0x130>
c001371d:	83 ec 0c             	sub    esp,0xc
c0013720:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013722:	53                   	push   ebx
c0013723:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013726:	83 c4 10             	add    esp,0x10
c0013729:	b8 01 00 00 00       	mov    eax,0x1
c001372e:	eb 41                	jmp    c0013771 <Fs::setcwd(Process*, char*)+0x130>
c0013730:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013735:	75 1c                	jne    c0013753 <Fs::setcwd(Process*, char*)+0x112>
c0013737:	b8 02 00 00 00       	mov    eax,0x2
c001373c:	85 db                	test   ebx,ebx
c001373e:	74 31                	je     c0013771 <Fs::setcwd(Process*, char*)+0x130>
c0013740:	83 ec 0c             	sub    esp,0xc
c0013743:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013745:	53                   	push   ebx
c0013746:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013749:	83 c4 10             	add    esp,0x10
c001374c:	b8 02 00 00 00       	mov    eax,0x2
c0013751:	eb 1e                	jmp    c0013771 <Fs::setcwd(Process*, char*)+0x130>
c0013753:	85 db                	test   ebx,ebx
c0013755:	74 0c                	je     c0013763 <Fs::setcwd(Process*, char*)+0x122>
c0013757:	83 ec 0c             	sub    esp,0xc
c001375a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001375c:	53                   	push   ebx
c001375d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013760:	83 c4 10             	add    esp,0x10
c0013763:	50                   	push   eax
c0013764:	50                   	push   eax
c0013765:	56                   	push   esi
c0013766:	57                   	push   edi
c0013767:	e8 c8 d0 fe ff       	call   c0000834 <strcpy>
c001376c:	83 c4 10             	add    esp,0x10
c001376f:	31 c0                	xor    eax,eax
c0013771:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013777:	5b                   	pop    ebx
c0013778:	5e                   	pop    esi
c0013779:	5f                   	pop    edi
c001377a:	5d                   	pop    ebp
c001377b:	c3                   	ret    

c001377c <Directory::Directory(char const*, Process*)>:
c001377c:	83 ec 0c             	sub    esp,0xc
c001377f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013783:	83 ec 08             	sub    esp,0x8
c0013786:	6a 00                	push   0x0
c0013788:	50                   	push   eax
c0013789:	e8 6e df ff ff       	call   c00116fc <UnixFile::UnixFile(int)>
c001378e:	83 c4 10             	add    esp,0x10
c0013791:	ba 24 a9 02 c0       	mov    edx,0xc002a924
c0013796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001379a:	89 10                	mov    DWORD PTR [eax],edx
c001379c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137a0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00137a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137aa:	83 c0 0d             	add    eax,0xd
c00137ad:	83 ec 04             	sub    esp,0x4
c00137b0:	52                   	push   edx
c00137b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137b5:	50                   	push   eax
c00137b6:	e8 6b f9 ff ff       	call   c0013126 <Fs::standardiseFiles(char*, char const*, char const*)>
c00137bb:	83 c4 10             	add    esp,0x10
c00137be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137c2:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00137c5:	8d 50 bf             	lea    edx,[eax-0x41]
c00137c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137cc:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00137d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00137da:	90                   	nop
c00137db:	83 c4 0c             	add    esp,0xc
c00137de:	c3                   	ret    
c00137df:	90                   	nop

c00137e0 <Directory::open()>:
c00137e0:	53                   	push   ebx
c00137e1:	b8 0b 00 00 00       	mov    eax,0xb
c00137e6:	83 ec 08             	sub    esp,0x8
c00137e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00137ed:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00137f4:	80 fa 19             	cmp    dl,0x19
c00137f7:	77 3d                	ja     c0013836 <Directory::open()+0x56>
c00137f9:	8b 14 95 20 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17e0]
c0013800:	85 d2                	test   edx,edx
c0013802:	74 32                	je     c0013836 <Directory::open()+0x56>
c0013804:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001380a:	85 d2                	test   edx,edx
c001380c:	74 28                	je     c0013836 <Directory::open()+0x56>
c001380e:	b8 06 00 00 00       	mov    eax,0x6
c0013813:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013817:	75 1d                	jne    c0013836 <Directory::open()+0x56>
c0013819:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001381f:	50                   	push   eax
c0013820:	8b 02                	mov    eax,DWORD PTR [edx]
c0013822:	51                   	push   ecx
c0013823:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013826:	51                   	push   ecx
c0013827:	52                   	push   edx
c0013828:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001382b:	83 c4 10             	add    esp,0x10
c001382e:	85 c0                	test   eax,eax
c0013830:	75 04                	jne    c0013836 <Directory::open()+0x56>
c0013832:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013836:	83 c4 08             	add    esp,0x8
c0013839:	5b                   	pop    ebx
c001383a:	c3                   	ret    
c001383b:	90                   	nop

c001383c <Directory::close()>:
c001383c:	53                   	push   ebx
c001383d:	b8 0b 00 00 00       	mov    eax,0xb
c0013842:	83 ec 08             	sub    esp,0x8
c0013845:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013849:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013850:	80 fa 19             	cmp    dl,0x19
c0013853:	77 41                	ja     c0013896 <Directory::close()+0x5a>
c0013855:	8b 1c 95 20 e8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd17e0]
c001385c:	85 db                	test   ebx,ebx
c001385e:	74 36                	je     c0013896 <Directory::close()+0x5a>
c0013860:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013867:	74 2d                	je     c0013896 <Directory::close()+0x5a>
c0013869:	b8 05 00 00 00       	mov    eax,0x5
c001386e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013872:	74 22                	je     c0013896 <Directory::close()+0x5a>
c0013874:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013878:	8b 04 95 20 e8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd17e0]
c001387f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013885:	53                   	push   ebx
c0013886:	53                   	push   ebx
c0013887:	8b 10                	mov    edx,DWORD PTR [eax]
c0013889:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001388f:	50                   	push   eax
c0013890:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013893:	83 c4 10             	add    esp,0x10
c0013896:	83 c4 08             	add    esp,0x8
c0013899:	5b                   	pop    ebx
c001389a:	c3                   	ret    
c001389b:	90                   	nop

c001389c <Directory::unlink()>:
c001389c:	83 ec 0c             	sub    esp,0xc
c001389f:	b8 0b 00 00 00       	mov    eax,0xb
c00138a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138a8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00138af:	80 f9 19             	cmp    cl,0x19
c00138b2:	77 2f                	ja     c00138e3 <Directory::unlink()+0x47>
c00138b4:	8b 0c 8d 20 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17e0]
c00138bb:	85 c9                	test   ecx,ecx
c00138bd:	74 24                	je     c00138e3 <Directory::unlink()+0x47>
c00138bf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00138c5:	85 c9                	test   ecx,ecx
c00138c7:	74 1a                	je     c00138e3 <Directory::unlink()+0x47>
c00138c9:	b8 06 00 00 00       	mov    eax,0x6
c00138ce:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00138d2:	75 0f                	jne    c00138e3 <Directory::unlink()+0x47>
c00138d4:	83 c2 0d             	add    edx,0xd
c00138d7:	50                   	push   eax
c00138d8:	50                   	push   eax
c00138d9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00138db:	52                   	push   edx
c00138dc:	51                   	push   ecx
c00138dd:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00138e0:	83 c4 10             	add    esp,0x10
c00138e3:	83 c4 0c             	add    esp,0xc
c00138e6:	c3                   	ret    
c00138e7:	90                   	nop

c00138e8 <Directory::rename(char const*)>:
c00138e8:	83 ec 0c             	sub    esp,0xc
c00138eb:	b8 0b 00 00 00       	mov    eax,0xb
c00138f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138f4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00138fb:	80 f9 19             	cmp    cl,0x19
c00138fe:	77 32                	ja     c0013932 <Directory::rename(char const*)+0x4a>
c0013900:	8b 0c 8d 20 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17e0]
c0013907:	85 c9                	test   ecx,ecx
c0013909:	74 27                	je     c0013932 <Directory::rename(char const*)+0x4a>
c001390b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013911:	85 c9                	test   ecx,ecx
c0013913:	74 1d                	je     c0013932 <Directory::rename(char const*)+0x4a>
c0013915:	b8 06 00 00 00       	mov    eax,0x6
c001391a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001391e:	75 12                	jne    c0013932 <Directory::rename(char const*)+0x4a>
c0013920:	83 c2 0d             	add    edx,0xd
c0013923:	50                   	push   eax
c0013924:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013926:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001392a:	52                   	push   edx
c001392b:	51                   	push   ecx
c001392c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001392f:	83 c4 10             	add    esp,0x10
c0013932:	83 c4 0c             	add    esp,0xc
c0013935:	c3                   	ret    

c0013936 <Directory::exists()>:
c0013936:	83 ec 0c             	sub    esp,0xc
c0013939:	31 c0                	xor    eax,eax
c001393b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001393f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013946:	80 f9 19             	cmp    cl,0x19
c0013949:	77 24                	ja     c001396f <Directory::exists()+0x39>
c001394b:	8b 0c 8d 20 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17e0]
c0013952:	85 c9                	test   ecx,ecx
c0013954:	74 19                	je     c001396f <Directory::exists()+0x39>
c0013956:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001395c:	85 c9                	test   ecx,ecx
c001395e:	74 0f                	je     c001396f <Directory::exists()+0x39>
c0013960:	83 c2 0d             	add    edx,0xd
c0013963:	50                   	push   eax
c0013964:	50                   	push   eax
c0013965:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013967:	52                   	push   edx
c0013968:	51                   	push   ecx
c0013969:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001396c:	83 c4 10             	add    esp,0x10
c001396f:	83 c4 0c             	add    esp,0xc
c0013972:	c3                   	ret    
c0013973:	90                   	nop

c0013974 <Directory::read(dirent*)>:
c0013974:	83 ec 1c             	sub    esp,0x1c
c0013977:	b8 0b 00 00 00       	mov    eax,0xb
c001397c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013980:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013987:	80 fa 19             	cmp    dl,0x19
c001398a:	77 30                	ja     c00139bc <Directory::read(dirent*)+0x48>
c001398c:	8b 14 95 20 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd17e0]
c0013993:	85 d2                	test   edx,edx
c0013995:	74 25                	je     c00139bc <Directory::read(dirent*)+0x48>
c0013997:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001399e:	74 1c                	je     c00139bc <Directory::read(dirent*)+0x48>
c00139a0:	83 ec 0c             	sub    esp,0xc
c00139a3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139a5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00139a9:	52                   	push   edx
c00139aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00139ae:	6a 00                	push   0x0
c00139b0:	68 10 01 00 00       	push   0x110
c00139b5:	51                   	push   ecx
c00139b6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00139b9:	83 c4 20             	add    esp,0x20
c00139bc:	83 c4 1c             	add    esp,0x1c
c00139bf:	c3                   	ret    

c00139c0 <Directory::create()>:
c00139c0:	83 ec 0c             	sub    esp,0xc
c00139c3:	b8 0b 00 00 00       	mov    eax,0xb
c00139c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139cc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139d3:	80 f9 19             	cmp    cl,0x19
c00139d6:	77 2f                	ja     c0013a07 <Directory::create()+0x47>
c00139d8:	8b 0c 8d 20 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17e0]
c00139df:	85 c9                	test   ecx,ecx
c00139e1:	74 24                	je     c0013a07 <Directory::create()+0x47>
c00139e3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139e9:	85 c9                	test   ecx,ecx
c00139eb:	74 1a                	je     c0013a07 <Directory::create()+0x47>
c00139ed:	b8 06 00 00 00       	mov    eax,0x6
c00139f2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00139f6:	75 0f                	jne    c0013a07 <Directory::create()+0x47>
c00139f8:	83 c2 0d             	add    edx,0xd
c00139fb:	50                   	push   eax
c00139fc:	50                   	push   eax
c00139fd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139ff:	52                   	push   edx
c0013a00:	51                   	push   ecx
c0013a01:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013a04:	83 c4 10             	add    esp,0x10
c0013a07:	83 c4 0c             	add    esp,0xc
c0013a0a:	c3                   	ret    
c0013a0b:	90                   	nop

c0013a0c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013a0c:	b8 0a 00 00 00       	mov    eax,0xa
c0013a11:	c3                   	ret    

c0013a12 <Bus::Bus(char const*)>:
c0013a12:	83 ec 0c             	sub    esp,0xc
c0013a15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a19:	83 ec 08             	sub    esp,0x8
c0013a1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a20:	50                   	push   eax
c0013a21:	e8 68 09 00 00       	call   c001438e <Device::Device(char const*)>
c0013a26:	83 c4 10             	add    esp,0x10
c0013a29:	ba 40 a9 02 c0       	mov    edx,0xc002a940
c0013a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a32:	89 10                	mov    DWORD PTR [eax],edx
c0013a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a38:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013a42:	90                   	nop
c0013a43:	83 c4 0c             	add    esp,0xc
c0013a46:	c3                   	ret    
c0013a47:	90                   	nop

c0013a48 <Bus::~Bus()>:
c0013a48:	83 ec 0c             	sub    esp,0xc
c0013a4b:	ba 40 a9 02 c0       	mov    edx,0xc002a940
c0013a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a54:	89 10                	mov    DWORD PTR [eax],edx
c0013a56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a5a:	83 ec 0c             	sub    esp,0xc
c0013a5d:	50                   	push   eax
c0013a5e:	e8 0d 06 00 00       	call   c0014070 <Device::~Device()>
c0013a63:	83 c4 10             	add    esp,0x10
c0013a66:	90                   	nop
c0013a67:	83 c4 0c             	add    esp,0xc
c0013a6a:	c3                   	ret    
c0013a6b:	90                   	nop

c0013a6c <Bus::~Bus()>:
c0013a6c:	83 ec 0c             	sub    esp,0xc
c0013a6f:	83 ec 0c             	sub    esp,0xc
c0013a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a76:	e8 cd ff ff ff       	call   c0013a48 <Bus::~Bus()>
c0013a7b:	83 c4 10             	add    esp,0x10
c0013a7e:	83 ec 08             	sub    esp,0x8
c0013a81:	68 58 01 00 00       	push   0x158
c0013a86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a8a:	e8 09 f2 ff ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0013a8f:	83 c4 10             	add    esp,0x10
c0013a92:	83 c4 0c             	add    esp,0xc
c0013a95:	c3                   	ret    

c0013a96 <Buzzer::Buzzer(char const*)>:
c0013a96:	83 ec 0c             	sub    esp,0xc
c0013a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a9d:	83 ec 08             	sub    esp,0x8
c0013aa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013aa4:	50                   	push   eax
c0013aa5:	e8 e4 08 00 00       	call   c001438e <Device::Device(char const*)>
c0013aaa:	83 c4 10             	add    esp,0x10
c0013aad:	ba 6c a9 02 c0       	mov    edx,0xc002a96c
c0013ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ab6:	89 10                	mov    DWORD PTR [eax],edx
c0013ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013abc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aca:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013ad4:	90                   	nop
c0013ad5:	83 c4 0c             	add    esp,0xc
c0013ad8:	c3                   	ret    
c0013ad9:	90                   	nop

c0013ada <Buzzer::~Buzzer()>:
c0013ada:	83 ec 0c             	sub    esp,0xc
c0013add:	ba 6c a9 02 c0       	mov    edx,0xc002a96c
c0013ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ae6:	89 10                	mov    DWORD PTR [eax],edx
c0013ae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aec:	83 ec 0c             	sub    esp,0xc
c0013aef:	50                   	push   eax
c0013af0:	e8 7b 05 00 00       	call   c0014070 <Device::~Device()>
c0013af5:	83 c4 10             	add    esp,0x10
c0013af8:	90                   	nop
c0013af9:	83 c4 0c             	add    esp,0xc
c0013afc:	c3                   	ret    
c0013afd:	90                   	nop

c0013afe <Buzzer::~Buzzer()>:
c0013afe:	83 ec 0c             	sub    esp,0xc
c0013b01:	83 ec 0c             	sub    esp,0xc
c0013b04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b08:	e8 cd ff ff ff       	call   c0013ada <Buzzer::~Buzzer()>
c0013b0d:	83 c4 10             	add    esp,0x10
c0013b10:	83 ec 08             	sub    esp,0x8
c0013b13:	68 5c 01 00 00       	push   0x15c
c0013b18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b1c:	e8 77 f1 ff ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0013b21:	83 c4 10             	add    esp,0x10
c0013b24:	83 c4 0c             	add    esp,0xc
c0013b27:	c3                   	ret    

c0013b28 <Buzzer::stop()>:
c0013b28:	83 ec 14             	sub    esp,0x14
c0013b2b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b2f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b31:	6a 00                	push   0x0
c0013b33:	50                   	push   eax
c0013b34:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013b37:	83 c4 1c             	add    esp,0x1c
c0013b3a:	c3                   	ret    

c0013b3b <beepThread(void*)>:
c0013b3b:	53                   	push   ebx
c0013b3c:	83 ec 08             	sub    esp,0x8
c0013b3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b43:	e8 07 a1 00 00       	call   c001dc4f <unlockScheduler()>
c0013b48:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013b4d:	52                   	push   edx
c0013b4e:	52                   	push   edx
c0013b4f:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013b55:	52                   	push   edx
c0013b56:	50                   	push   eax
c0013b57:	e8 40 a6 00 00       	call   c001e19c <nanoSleep(unsigned long long)>
c0013b5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013b5f:	e8 c4 ff ff ff       	call   c0013b28 <Buzzer::stop()>
c0013b64:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013b6c:	83 c4 18             	add    esp,0x18
c0013b6f:	5b                   	pop    ebx
c0013b70:	e9 6d a5 00 00       	jmp    c001e0e2 <blockTask(TaskState)>
c0013b75:	90                   	nop

c0013b76 <Buzzer::beep(int, int, bool)>:
c0013b76:	57                   	push   edi
c0013b77:	56                   	push   esi
c0013b78:	53                   	push   ebx
c0013b79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b7d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013b81:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013b85:	52                   	push   edx
c0013b86:	52                   	push   edx
c0013b87:	8b 06                	mov    eax,DWORD PTR [esi]
c0013b89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b8d:	56                   	push   esi
c0013b8e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013b91:	83 c4 10             	add    esp,0x10
c0013b94:	89 f8                	mov    eax,edi
c0013b96:	84 c0                	test   al,al
c0013b98:	74 1f                	je     c0013bb9 <Buzzer::beep(int, int, bool)+0x43>
c0013b9a:	50                   	push   eax
c0013b9b:	50                   	push   eax
c0013b9c:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013ba2:	99                   	cdq    
c0013ba3:	52                   	push   edx
c0013ba4:	50                   	push   eax
c0013ba5:	e8 f2 a5 00 00       	call   c001e19c <nanoSleep(unsigned long long)>
c0013baa:	83 c4 10             	add    esp,0x10
c0013bad:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013bb1:	5b                   	pop    ebx
c0013bb2:	5e                   	pop    esi
c0013bb3:	5f                   	pop    edi
c0013bb4:	e9 6f ff ff ff       	jmp    c0013b28 <Buzzer::stop()>
c0013bb9:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013bbf:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0013bc4:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013bd0:	c7 44 24 14 3b 3b 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013b3b
c0013bd8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013bdc:	5b                   	pop    ebx
c0013bdd:	5e                   	pop    esi
c0013bde:	5f                   	pop    edi
c0013bdf:	e9 9a a1 00 00       	jmp    c001dd7e <Process::createThread(void (*)(void*), void*, int)>

c0013be4 <User::loadClockSettings(int)>:
c0013be4:	53                   	push   ebx
c0013be5:	83 ec 14             	sub    esp,0x14
c0013be8:	68 14 01 00 00       	push   0x114
c0013bed:	e8 51 bc ff ff       	call   c000f843 <malloc>
c0013bf2:	83 c4 0c             	add    esp,0xc
c0013bf5:	89 c3                	mov    ebx,eax
c0013bf7:	ff 35 74 17 03 c0    	push   DWORD PTR ds:0xc0031774
c0013bfd:	68 94 a9 02 c0       	push   0xc002a994
c0013c02:	50                   	push   eax
c0013c03:	e8 c8 f6 ff ff       	call   c00132d0 <File::File(char const*, Process*)>
c0013c08:	58                   	pop    eax
c0013c09:	5a                   	pop    edx
c0013c0a:	6a 01                	push   0x1
c0013c0c:	53                   	push   ebx
c0013c0d:	e8 22 f7 ff ff       	call   c0013334 <File::open(FileOpenMode)>
c0013c12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c15:	e8 78 f7 ff ff       	call   c0013392 <File::close()>
c0013c1a:	83 c4 10             	add    esp,0x10
c0013c1d:	85 db                	test   ebx,ebx
c0013c1f:	74 0f                	je     c0013c30 <User::loadClockSettings(int)+0x4c>
c0013c21:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c23:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013c27:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013c2a:	83 c4 08             	add    esp,0x8
c0013c2d:	5b                   	pop    ebx
c0013c2e:	ff e0                	jmp    eax
c0013c30:	83 c4 08             	add    esp,0x8
c0013c33:	5b                   	pop    ebx
c0013c34:	c3                   	ret    
c0013c35:	90                   	nop

c0013c36 <Clock::Clock(char const*)>:
c0013c36:	83 ec 0c             	sub    esp,0xc
c0013c39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c3d:	83 ec 08             	sub    esp,0x8
c0013c40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c44:	50                   	push   eax
c0013c45:	e8 44 07 00 00       	call   c001438e <Device::Device(char const*)>
c0013c4a:	83 c4 10             	add    esp,0x10
c0013c4d:	ba bc a9 02 c0       	mov    edx,0xc002a9bc
c0013c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c56:	89 10                	mov    DWORD PTR [eax],edx
c0013c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c5c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013c66:	90                   	nop
c0013c67:	83 c4 0c             	add    esp,0xc
c0013c6a:	c3                   	ret    
c0013c6b:	90                   	nop

c0013c6c <Clock::~Clock()>:
c0013c6c:	83 ec 0c             	sub    esp,0xc
c0013c6f:	ba bc a9 02 c0       	mov    edx,0xc002a9bc
c0013c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c78:	89 10                	mov    DWORD PTR [eax],edx
c0013c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c7e:	83 ec 0c             	sub    esp,0xc
c0013c81:	50                   	push   eax
c0013c82:	e8 e9 03 00 00       	call   c0014070 <Device::~Device()>
c0013c87:	83 c4 10             	add    esp,0x10
c0013c8a:	90                   	nop
c0013c8b:	83 c4 0c             	add    esp,0xc
c0013c8e:	c3                   	ret    
c0013c8f:	90                   	nop

c0013c90 <Clock::~Clock()>:
c0013c90:	83 ec 0c             	sub    esp,0xc
c0013c93:	83 ec 0c             	sub    esp,0xc
c0013c96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c9a:	e8 cd ff ff ff       	call   c0013c6c <Clock::~Clock()>
c0013c9f:	83 c4 10             	add    esp,0x10
c0013ca2:	83 ec 08             	sub    esp,0x8
c0013ca5:	68 58 01 00 00       	push   0x158
c0013caa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cae:	e8 e5 ef ff ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0013cb3:	83 c4 10             	add    esp,0x10
c0013cb6:	83 c4 0c             	add    esp,0xc
c0013cb9:	c3                   	ret    

c0013cba <Clock::timeInSecondsLocal()>:
c0013cba:	53                   	push   ebx
c0013cbb:	83 ec 14             	sub    esp,0x14
c0013cbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cc2:	8b 10                	mov    edx,DWORD PTR [eax]
c0013cc4:	50                   	push   eax
c0013cc5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013cc8:	0f b6 0d 98 e3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e398
c0013ccf:	03 0d 9c e3 02 c0    	add    ecx,DWORD PTR ds:0xc002e39c
c0013cd5:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013cdb:	89 cb                	mov    ebx,ecx
c0013cdd:	c1 fb 1f             	sar    ebx,0x1f
c0013ce0:	01 c8                	add    eax,ecx
c0013ce2:	11 da                	adc    edx,ebx
c0013ce4:	83 c4 10             	add    esp,0x10
c0013ce7:	31 c9                	xor    ecx,ecx
c0013ce9:	80 3d 99 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e399,0x0
c0013cf0:	74 05                	je     c0013cf7 <Clock::timeInSecondsLocal()+0x3d>
c0013cf2:	b9 08 07 00 00       	mov    ecx,0x708
c0013cf7:	31 db                	xor    ebx,ebx
c0013cf9:	01 c8                	add    eax,ecx
c0013cfb:	11 da                	adc    edx,ebx
c0013cfd:	83 c4 08             	add    esp,0x8
c0013d00:	5b                   	pop    ebx
c0013d01:	c3                   	ret    

c0013d02 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013d02:	57                   	push   edi
c0013d03:	56                   	push   esi
c0013d04:	53                   	push   ebx
c0013d05:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013d09:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d0d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013d0f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d13:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013d16:	0f b6 05 98 e3 02 c0 	movzx  eax,BYTE PTR ds:0xc002e398
c0013d1d:	03 05 9c e3 02 c0    	add    eax,DWORD PTR ds:0xc002e39c
c0013d23:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013d29:	99                   	cdq    
c0013d2a:	29 c6                	sub    esi,eax
c0013d2c:	19 d7                	sbb    edi,edx
c0013d2e:	89 f0                	mov    eax,esi
c0013d30:	89 fa                	mov    edx,edi
c0013d32:	31 f6                	xor    esi,esi
c0013d34:	80 3d 99 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e399,0x0
c0013d3b:	74 05                	je     c0013d42 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013d3d:	be 08 07 00 00       	mov    esi,0x708
c0013d42:	31 ff                	xor    edi,edi
c0013d44:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013d48:	29 f0                	sub    eax,esi
c0013d4a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d4e:	19 fa                	sbb    edx,edi
c0013d50:	89 d8                	mov    eax,ebx
c0013d52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013d56:	5b                   	pop    ebx
c0013d57:	5e                   	pop    esi
c0013d58:	5f                   	pop    edi
c0013d59:	ff e0                	jmp    eax

c0013d5b <datetimeToSeconds(datetime_t)>:
c0013d5b:	55                   	push   ebp
c0013d5c:	57                   	push   edi
c0013d5d:	56                   	push   esi
c0013d5e:	53                   	push   ebx
c0013d5f:	83 ec 14             	sub    esp,0x14
c0013d62:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013d66:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013d6a:	89 d3                	mov    ebx,edx
c0013d6c:	0f b6 c6             	movzx  eax,dh
c0013d6f:	c1 eb 10             	shr    ebx,0x10
c0013d72:	48                   	dec    eax
c0013d73:	66 81 eb 6c 07       	sub    bx,0x76c
c0013d78:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013d7c:	0f b6 f5             	movzx  esi,ch
c0013d7f:	89 cf                	mov    edi,ecx
c0013d81:	6b f6 3c             	imul   esi,esi,0x3c
c0013d84:	c1 ef 10             	shr    edi,0x10
c0013d87:	0f b6 c9             	movzx  ecx,cl
c0013d8a:	89 f8                	mov    eax,edi
c0013d8c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013d92:	0f b6 f8             	movzx  edi,al
c0013d95:	0f b6 d2             	movzx  edx,dl
c0013d98:	01 fe                	add    esi,edi
c0013d9a:	01 f1                	add    ecx,esi
c0013d9c:	0f b7 f3             	movzx  esi,bx
c0013d9f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013da3:	c1 f9 1f             	sar    ecx,0x1f
c0013da6:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013dab:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013daf:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013db4:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0013dbb:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013dbf:	76 29                	jbe    c0013dea <datetimeToSeconds(datetime_t)+0x8f>
c0013dc1:	f6 c3 03             	test   bl,0x3
c0013dc4:	75 24                	jne    c0013dea <datetimeToSeconds(datetime_t)+0x8f>
c0013dc6:	31 d2                	xor    edx,edx
c0013dc8:	bf 64 00 00 00       	mov    edi,0x64
c0013dcd:	89 d8                	mov    eax,ebx
c0013dcf:	66 f7 f7             	div    di
c0013dd2:	66 85 d2             	test   dx,dx
c0013dd5:	75 12                	jne    c0013de9 <datetimeToSeconds(datetime_t)+0x8e>
c0013dd7:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013ddd:	bf 90 01 00 00       	mov    edi,0x190
c0013de2:	99                   	cdq    
c0013de3:	f7 ff                	idiv   edi
c0013de5:	85 d2                	test   edx,edx
c0013de7:	75 01                	jne    c0013dea <datetimeToSeconds(datetime_t)+0x8f>
c0013de9:	41                   	inc    ecx
c0013dea:	66 83 fb 46          	cmp    bx,0x46
c0013dee:	76 45                	jbe    c0013e35 <datetimeToSeconds(datetime_t)+0xda>
c0013df0:	bb 46 00 00 00       	mov    ebx,0x46
c0013df5:	bf 64 00 00 00       	mov    edi,0x64
c0013dfa:	bd 90 01 00 00       	mov    ebp,0x190
c0013dff:	b8 6d 01 00 00       	mov    eax,0x16d
c0013e04:	f6 c3 03             	test   bl,0x3
c0013e07:	75 23                	jne    c0013e2c <datetimeToSeconds(datetime_t)+0xd1>
c0013e09:	89 d8                	mov    eax,ebx
c0013e0b:	99                   	cdq    
c0013e0c:	f7 ff                	idiv   edi
c0013e0e:	b8 6e 01 00 00       	mov    eax,0x16e
c0013e13:	85 d2                	test   edx,edx
c0013e15:	75 15                	jne    c0013e2c <datetimeToSeconds(datetime_t)+0xd1>
c0013e17:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013e1d:	99                   	cdq    
c0013e1e:	f7 fd                	idiv   ebp
c0013e20:	83 fa 01             	cmp    edx,0x1
c0013e23:	19 c0                	sbb    eax,eax
c0013e25:	f7 d0                	not    eax
c0013e27:	05 6e 01 00 00       	add    eax,0x16e
c0013e2c:	01 c1                	add    ecx,eax
c0013e2e:	43                   	inc    ebx
c0013e2f:	39 f3                	cmp    ebx,esi
c0013e31:	7c cc                	jl     c0013dff <datetimeToSeconds(datetime_t)+0xa4>
c0013e33:	eb 35                	jmp    c0013e6a <datetimeToSeconds(datetime_t)+0x10f>
c0013e35:	74 33                	je     c0013e6a <datetimeToSeconds(datetime_t)+0x10f>
c0013e37:	b8 45 00 00 00       	mov    eax,0x45
c0013e3c:	89 c2                	mov    edx,eax
c0013e3e:	83 e2 03             	and    edx,0x3
c0013e41:	39 f0                	cmp    eax,esi
c0013e43:	7e 0f                	jle    c0013e54 <datetimeToSeconds(datetime_t)+0xf9>
c0013e45:	83 fa 01             	cmp    edx,0x1
c0013e48:	19 d2                	sbb    edx,edx
c0013e4a:	48                   	dec    eax
c0013e4b:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013e52:	eb e8                	jmp    c0013e3c <datetimeToSeconds(datetime_t)+0xe1>
c0013e54:	b8 6d 01 00 00       	mov    eax,0x16d
c0013e59:	85 d2                	test   edx,edx
c0013e5b:	75 0b                	jne    c0013e68 <datetimeToSeconds(datetime_t)+0x10d>
c0013e5d:	66 83 fb 01          	cmp    bx,0x1
c0013e61:	19 c0                	sbb    eax,eax
c0013e63:	05 6e 01 00 00       	add    eax,0x16e
c0013e68:	29 c1                	sub    ecx,eax
c0013e6a:	b8 80 51 01 00       	mov    eax,0x15180
c0013e6f:	f7 e9                	imul   ecx
c0013e71:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013e75:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013e79:	83 c4 14             	add    esp,0x14
c0013e7c:	5b                   	pop    ebx
c0013e7d:	5e                   	pop    esi
c0013e7e:	5f                   	pop    edi
c0013e7f:	5d                   	pop    ebp
c0013e80:	c3                   	ret    
c0013e81:	90                   	nop

c0013e82 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013e82:	57                   	push   edi
c0013e83:	56                   	push   esi
c0013e84:	53                   	push   ebx
c0013e85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e89:	8b 06                	mov    eax,DWORD PTR [esi]
c0013e8b:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013e8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e96:	e8 c0 fe ff ff       	call   c0013d5b <datetimeToSeconds(datetime_t)>
c0013e9b:	59                   	pop    ecx
c0013e9c:	0f b6 0d 98 e3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e398
c0013ea3:	5b                   	pop    ebx
c0013ea4:	03 0d 9c e3 02 c0    	add    ecx,DWORD PTR ds:0xc002e39c
c0013eaa:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013eb0:	89 cb                	mov    ebx,ecx
c0013eb2:	c1 fb 1f             	sar    ebx,0x1f
c0013eb5:	29 c8                	sub    eax,ecx
c0013eb7:	19 da                	sbb    edx,ebx
c0013eb9:	31 c9                	xor    ecx,ecx
c0013ebb:	80 3d 99 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e399,0x0
c0013ec2:	74 05                	je     c0013ec9 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013ec4:	b9 08 07 00 00       	mov    ecx,0x708
c0013ec9:	31 db                	xor    ebx,ebx
c0013ecb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013ecf:	29 c8                	sub    eax,ecx
c0013ed1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ed5:	19 da                	sbb    edx,ebx
c0013ed7:	89 f8                	mov    eax,edi
c0013ed9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013edd:	5b                   	pop    ebx
c0013ede:	5e                   	pop    esi
c0013edf:	5f                   	pop    edi
c0013ee0:	ff e0                	jmp    eax

c0013ee2 <secondsToDatetime(unsigned long long)>:
c0013ee2:	55                   	push   ebp
c0013ee3:	57                   	push   edi
c0013ee4:	56                   	push   esi
c0013ee5:	53                   	push   ebx
c0013ee6:	83 ec 1c             	sub    esp,0x1c
c0013ee9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013eed:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013ef1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013ef5:	6a 00                	push   0x0
c0013ef7:	68 80 51 01 00       	push   0x15180
c0013efc:	55                   	push   ebp
c0013efd:	57                   	push   edi
c0013efe:	e8 59 29 01 00       	call   c002685c <__udivdi3>
c0013f03:	83 c4 10             	add    esp,0x10
c0013f06:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013f0c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013f10:	6a 00                	push   0x0
c0013f12:	68 80 51 01 00       	push   0x15180
c0013f17:	55                   	push   ebp
c0013f18:	57                   	push   edi
c0013f19:	bf 10 0e 00 00       	mov    edi,0xe10
c0013f1e:	e8 39 2a 01 00       	call   c002695c <__umoddi3>
c0013f23:	83 c4 10             	add    esp,0x10
c0013f26:	99                   	cdq    
c0013f27:	f7 ff                	idiv   edi
c0013f29:	bf 3c 00 00 00       	mov    edi,0x3c
c0013f2e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013f31:	89 d0                	mov    eax,edx
c0013f33:	99                   	cdq    
c0013f34:	f7 ff                	idiv   edi
c0013f36:	85 db                	test   ebx,ebx
c0013f38:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013f3b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013f3e:	79 11                	jns    c0013f51 <secondsToDatetime(unsigned long long)+0x6f>
c0013f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013f44:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013f4a:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013f4f:	eb 07                	jmp    c0013f58 <secondsToDatetime(unsigned long long)+0x76>
c0013f51:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013f56:	89 d8                	mov    eax,ebx
c0013f58:	bf b4 05 00 00       	mov    edi,0x5b4
c0013f5d:	99                   	cdq    
c0013f5e:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013f63:	f7 f9                	idiv   ecx
c0013f65:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013f6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013f6e:	31 d2                	xor    edx,edx
c0013f70:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013f78:	01 c3                	add    ebx,eax
c0013f7a:	89 d8                	mov    eax,ebx
c0013f7c:	f7 f1                	div    ecx
c0013f7e:	31 d2                	xor    edx,edx
c0013f80:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013f83:	89 d8                	mov    eax,ebx
c0013f85:	f7 f7                	div    edi
c0013f87:	31 d2                	xor    edx,edx
c0013f89:	29 c1                	sub    ecx,eax
c0013f8b:	89 d8                	mov    eax,ebx
c0013f8d:	f7 f5                	div    ebp
c0013f8f:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013f94:	29 c1                	sub    ecx,eax
c0013f96:	31 d2                	xor    edx,edx
c0013f98:	89 c8                	mov    eax,ecx
c0013f9a:	f7 f5                	div    ebp
c0013f9c:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013fa1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013fa5:	31 d2                	xor    edx,edx
c0013fa7:	89 c8                	mov    eax,ecx
c0013fa9:	f7 f5                	div    ebp
c0013fab:	31 d2                	xor    edx,edx
c0013fad:	01 c3                	add    ebx,eax
c0013faf:	89 c8                	mov    eax,ecx
c0013fb1:	f7 f7                	div    edi
c0013fb3:	bf 99 00 00 00       	mov    edi,0x99
c0013fb8:	29 c3                	sub    ebx,eax
c0013fba:	31 d2                	xor    edx,edx
c0013fbc:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013fc4:	29 c3                	sub    ebx,eax
c0013fc6:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013fc9:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013fcc:	bb 05 00 00 00       	mov    ebx,0x5
c0013fd1:	83 c1 02             	add    ecx,0x2
c0013fd4:	89 c8                	mov    eax,ecx
c0013fd6:	f7 f7                	div    edi
c0013fd8:	31 d2                	xor    edx,edx
c0013fda:	89 c7                	mov    edi,eax
c0013fdc:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013fe2:	83 c0 02             	add    eax,0x2
c0013fe5:	f7 f3                	div    ebx
c0013fe7:	89 eb                	mov    ebx,ebp
c0013fe9:	29 c3                	sub    ebx,eax
c0013feb:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013ff1:	88 1e                	mov    BYTE PTR [esi],bl
c0013ff3:	19 c0                	sbb    eax,eax
c0013ff5:	31 d2                	xor    edx,edx
c0013ff7:	83 e0 0c             	and    eax,0xc
c0013ffa:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013ffe:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014006:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001400a:	83 f9 01             	cmp    ecx,0x1
c001400d:	0f 96 c2             	setbe  dl
c0014010:	41                   	inc    ecx
c0014011:	01 d0                	add    eax,edx
c0014013:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014016:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001401a:	83 c4 1c             	add    esp,0x1c
c001401d:	89 f0                	mov    eax,esi
c001401f:	5b                   	pop    ebx
c0014020:	5e                   	pop    esi
c0014021:	5f                   	pop    edi
c0014022:	5d                   	pop    ebp
c0014023:	c2 04 00             	ret    0x4

c0014026 <Clock::timeInDatetimeLocal()>:
c0014026:	53                   	push   ebx
c0014027:	83 ec 14             	sub    esp,0x14
c001402a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001402e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014032:	e8 83 fc ff ff       	call   c0013cba <Clock::timeInSecondsLocal()>
c0014037:	83 c4 0c             	add    esp,0xc
c001403a:	52                   	push   edx
c001403b:	50                   	push   eax
c001403c:	53                   	push   ebx
c001403d:	e8 a0 fe ff ff       	call   c0013ee2 <secondsToDatetime(unsigned long long)>
c0014042:	89 d8                	mov    eax,ebx
c0014044:	83 c4 14             	add    esp,0x14
c0014047:	5b                   	pop    ebx
c0014048:	c2 04 00             	ret    0x4
c001404b:	90                   	nop

c001404c <Device::hibernate()>:
c001404c:	c3                   	ret    
c001404d:	90                   	nop

c001404e <Device::wake()>:
c001404e:	c3                   	ret    
c001404f:	90                   	nop

c0014050 <Device::detect()>:
c0014050:	c3                   	ret    
c0014051:	90                   	nop

c0014052 <Device::disableLegacy()>:
c0014052:	c3                   	ret    
c0014053:	90                   	nop

c0014054 <Device::powerSaving(PowerSavingLevel)>:
c0014054:	c3                   	ret    
c0014055:	90                   	nop

c0014056 <DriverlessDevice::close(int, int, void*)>:
c0014056:	31 c0                	xor    eax,eax
c0014058:	c3                   	ret    
c0014059:	90                   	nop

c001405a <DriverlessDevice::detect()>:
c001405a:	c3                   	ret    
c001405b:	90                   	nop

c001405c <DriverlessDevice::open(int, int, void*)>:
c001405c:	83 ec 18             	sub    esp,0x18
c001405f:	68 30 aa 02 c0       	push   0xc002aa30
c0014064:	e8 ea 63 00 00       	call   c001a453 <Krnl::panic(char const*)>
c0014069:	83 c8 ff             	or     eax,0xffffffff
c001406c:	83 c4 1c             	add    esp,0x1c
c001406f:	c3                   	ret    

c0014070 <Device::~Device()>:
c0014070:	ba 58 aa 02 c0       	mov    edx,0xc002aa58
c0014075:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014079:	89 10                	mov    DWORD PTR [eax],edx
c001407b:	90                   	nop
c001407c:	c3                   	ret    
c001407d:	90                   	nop

c001407e <Device::~Device()>:
c001407e:	83 ec 0c             	sub    esp,0xc
c0014081:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014085:	e8 e6 ff ff ff       	call   c0014070 <Device::~Device()>
c001408a:	83 c4 04             	add    esp,0x4
c001408d:	83 ec 08             	sub    esp,0x8
c0014090:	68 58 01 00 00       	push   0x158
c0014095:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014099:	e8 fa eb ff ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c001409e:	83 c4 10             	add    esp,0x10
c00140a1:	83 c4 0c             	add    esp,0xc
c00140a4:	c3                   	ret    
c00140a5:	90                   	nop

c00140a6 <Device::findAndLoadDriver()>:
c00140a6:	c3                   	ret    
c00140a7:	90                   	nop

c00140a8 <Device::preOpenPCI(PCIDeviceInfo)>:
c00140a8:	57                   	push   edi
c00140a9:	b9 09 00 00 00       	mov    ecx,0x9
c00140ae:	56                   	push   esi
c00140af:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00140b3:	8d 74 24 10          	lea    esi,[esp+0x10]
c00140b7:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00140c1:	81 c7 18 01 00 00    	add    edi,0x118
c00140c7:	fc                   	cld    
c00140c8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00140ca:	5e                   	pop    esi
c00140cb:	5f                   	pop    edi
c00140cc:	c3                   	ret    
c00140cd:	90                   	nop

c00140ce <Device::preOpenACPI(void*, char*, char*)>:
c00140ce:	56                   	push   esi
c00140cf:	53                   	push   ebx
c00140d0:	83 ec 08             	sub    esp,0x8
c00140d3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00140d7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00140db:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00140e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00140e9:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00140ef:	6a 1e                	push   0x1e
c00140f1:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00140f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00140fb:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0014101:	50                   	push   eax
c0014102:	e8 3d c6 fe ff       	call   c0000744 <memcpy>
c0014107:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001410b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001410f:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014117:	83 c4 14             	add    esp,0x14
c001411a:	5b                   	pop    ebx
c001411b:	5e                   	pop    esi
c001411c:	e9 23 c6 fe ff       	jmp    c0000744 <memcpy>
c0014121:	90                   	nop

c0014122 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014122:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014126:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001412b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014132:	75 0b                	jne    c001413f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014134:	8b 00                	mov    eax,DWORD PTR [eax]
c0014136:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001413a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001413d:	eb 1e                	jmp    c001415d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c001413f:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0014144:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001414a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014150:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014152:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014156:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001415a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001415d:	ff e0                	jmp    eax
c001415f:	90                   	nop

c0014160 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014160:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014164:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014169:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014170:	75 0b                	jne    c001417d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0014172:	8b 00                	mov    eax,DWORD PTR [eax]
c0014174:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014178:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001417b:	eb 1e                	jmp    c001419b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001417d:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0014182:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014188:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001418e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014190:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014194:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014198:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c001419b:	ff e0                	jmp    eax
c001419d:	90                   	nop

c001419e <Device::addChild(Device*)>:
c001419e:	53                   	push   ebx
c001419f:	83 ec 08             	sub    esp,0x8
c00141a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00141a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00141aa:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00141b0:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00141b6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00141b8:	85 d2                	test   edx,edx
c00141ba:	74 04                	je     c00141c0 <Device::addChild(Device*)+0x22>
c00141bc:	89 d3                	mov    ebx,edx
c00141be:	eb f6                	jmp    c00141b6 <Device::addChild(Device*)+0x18>
c00141c0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00141c3:	83 ec 0c             	sub    esp,0xc
c00141c6:	6a 08                	push   0x8
c00141c8:	e8 76 b6 ff ff       	call   c000f843 <malloc>
c00141cd:	89 03                	mov    DWORD PTR [ebx],eax
c00141cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00141d5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00141dc:	83 c4 18             	add    esp,0x18
c00141df:	5b                   	pop    ebx
c00141e0:	c3                   	ret    
c00141e1:	90                   	nop

c00141e2 <Device::removeAllChildren()>:
c00141e2:	56                   	push   esi
c00141e3:	53                   	push   ebx
c00141e4:	52                   	push   edx
c00141e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00141e9:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00141ef:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00141f2:	74 17                	je     c001420b <Device::removeAllChildren()+0x29>
c00141f4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00141f7:	85 c0                	test   eax,eax
c00141f9:	74 0c                	je     c0014207 <Device::removeAllChildren()+0x25>
c00141fb:	83 ec 0c             	sub    esp,0xc
c00141fe:	8b 10                	mov    edx,DWORD PTR [eax]
c0014200:	50                   	push   eax
c0014201:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014204:	83 c4 10             	add    esp,0x10
c0014207:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014209:	eb e4                	jmp    c00141ef <Device::removeAllChildren()+0xd>
c001420b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014211:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014217:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001421d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014224:	58                   	pop    eax
c0014225:	5b                   	pop    ebx
c0014226:	5e                   	pop    esi
c0014227:	c3                   	ret    

c0014228 <Device::hibernateAll()>:
c0014228:	53                   	push   ebx
c0014229:	83 ec 14             	sub    esp,0x14
c001422c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014230:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014232:	53                   	push   ebx
c0014233:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014236:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001423c:	83 c4 10             	add    esp,0x10
c001423f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014242:	74 0f                	je     c0014253 <Device::hibernateAll()+0x2b>
c0014244:	83 ec 0c             	sub    esp,0xc
c0014247:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001424a:	e8 d9 ff ff ff       	call   c0014228 <Device::hibernateAll()>
c001424f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014251:	eb e9                	jmp    c001423c <Device::hibernateAll()+0x14>
c0014253:	83 c4 08             	add    esp,0x8
c0014256:	5b                   	pop    ebx
c0014257:	c3                   	ret    

c0014258 <Device::wakeAll()>:
c0014258:	53                   	push   ebx
c0014259:	83 ec 14             	sub    esp,0x14
c001425c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014260:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014262:	53                   	push   ebx
c0014263:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014266:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001426c:	83 c4 10             	add    esp,0x10
c001426f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014272:	74 0f                	je     c0014283 <Device::wakeAll()+0x2b>
c0014274:	83 ec 0c             	sub    esp,0xc
c0014277:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001427a:	e8 d9 ff ff ff       	call   c0014258 <Device::wakeAll()>
c001427f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014281:	eb e9                	jmp    c001426c <Device::wakeAll()+0x14>
c0014283:	83 c4 08             	add    esp,0x8
c0014286:	5b                   	pop    ebx
c0014287:	c3                   	ret    

c0014288 <Device::detectAll()>:
c0014288:	53                   	push   ebx
c0014289:	83 ec 14             	sub    esp,0x14
c001428c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014290:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014292:	53                   	push   ebx
c0014293:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014296:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001429c:	83 c4 10             	add    esp,0x10
c001429f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142a2:	74 0f                	je     c00142b3 <Device::detectAll()+0x2b>
c00142a4:	83 ec 0c             	sub    esp,0xc
c00142a7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142aa:	e8 d9 ff ff ff       	call   c0014288 <Device::detectAll()>
c00142af:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142b1:	eb e9                	jmp    c001429c <Device::detectAll()+0x14>
c00142b3:	83 c4 08             	add    esp,0x8
c00142b6:	5b                   	pop    ebx
c00142b7:	c3                   	ret    

c00142b8 <Device::disableLegacyAll()>:
c00142b8:	53                   	push   ebx
c00142b9:	83 ec 14             	sub    esp,0x14
c00142bc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142c2:	53                   	push   ebx
c00142c3:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00142c6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142cc:	83 c4 10             	add    esp,0x10
c00142cf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142d2:	74 0f                	je     c00142e3 <Device::disableLegacyAll()+0x2b>
c00142d4:	83 ec 0c             	sub    esp,0xc
c00142d7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142da:	e8 d9 ff ff ff       	call   c00142b8 <Device::disableLegacyAll()>
c00142df:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142e1:	eb e9                	jmp    c00142cc <Device::disableLegacyAll()+0x14>
c00142e3:	83 c4 08             	add    esp,0x8
c00142e6:	5b                   	pop    ebx
c00142e7:	c3                   	ret    

c00142e8 <Device::loadDriversForAll()>:
c00142e8:	53                   	push   ebx
c00142e9:	83 ec 08             	sub    esp,0x8
c00142ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142f0:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00142f6:	8b 18                	mov    ebx,DWORD PTR [eax]
c00142f8:	85 db                	test   ebx,ebx
c00142fa:	74 12                	je     c001430e <Device::loadDriversForAll()+0x26>
c00142fc:	83 ec 0c             	sub    esp,0xc
c00142ff:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014302:	e8 e1 ff ff ff       	call   c00142e8 <Device::loadDriversForAll()>
c0014307:	83 c4 10             	add    esp,0x10
c001430a:	89 d8                	mov    eax,ebx
c001430c:	eb e8                	jmp    c00142f6 <Device::loadDriversForAll()+0xe>
c001430e:	83 c4 08             	add    esp,0x8
c0014311:	5b                   	pop    ebx
c0014312:	c3                   	ret    
c0014313:	90                   	nop

c0014314 <Device::closeAll()>:
c0014314:	53                   	push   ebx
c0014315:	83 ec 08             	sub    esp,0x8
c0014318:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001431c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001431e:	6a 00                	push   0x0
c0014320:	6a 00                	push   0x0
c0014322:	6a 00                	push   0x0
c0014324:	53                   	push   ebx
c0014325:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014328:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001432e:	83 c4 10             	add    esp,0x10
c0014331:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014334:	74 0f                	je     c0014345 <Device::closeAll()+0x31>
c0014336:	83 ec 0c             	sub    esp,0xc
c0014339:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001433c:	e8 d3 ff ff ff       	call   c0014314 <Device::closeAll()>
c0014341:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014343:	eb e9                	jmp    c001432e <Device::closeAll()+0x1a>
c0014345:	83 c4 08             	add    esp,0x8
c0014348:	5b                   	pop    ebx
c0014349:	c3                   	ret    

c001434a <Device::powerSavingAll(PowerSavingLevel)>:
c001434a:	56                   	push   esi
c001434b:	53                   	push   ebx
c001434c:	83 ec 0c             	sub    esp,0xc
c001434f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014353:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014357:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014359:	56                   	push   esi
c001435a:	53                   	push   ebx
c001435b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001435e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014364:	83 c4 10             	add    esp,0x10
c0014367:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001436a:	74 0f                	je     c001437b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001436c:	52                   	push   edx
c001436d:	52                   	push   edx
c001436e:	56                   	push   esi
c001436f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014372:	e8 d3 ff ff ff       	call   c001434a <Device::powerSavingAll(PowerSavingLevel)>
c0014377:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014379:	eb e9                	jmp    c0014364 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001437b:	58                   	pop    eax
c001437c:	5b                   	pop    ebx
c001437d:	5e                   	pop    esi
c001437e:	c3                   	ret    
c001437f:	90                   	nop

c0014380 <Device::setName(char const*)>:
c0014380:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014388:	e9 a7 c4 fe ff       	jmp    c0000834 <strcpy>
c001438d:	90                   	nop

c001438e <Device::Device(char const*)>:
c001438e:	83 ec 1c             	sub    esp,0x1c
c0014391:	ba 58 aa 02 c0       	mov    edx,0xc002aa58
c0014396:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001439a:	89 10                	mov    DWORD PTR [eax],edx
c001439c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143a0:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00143aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143ae:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00143b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143bc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00143c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143ca:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00143d4:	83 ec 08             	sub    esp,0x8
c00143d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00143db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00143df:	e8 9c ff ff ff       	call   c0014380 <Device::setName(char const*)>
c00143e4:	83 c4 10             	add    esp,0x10
c00143e7:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00143ef:	83 ec 0c             	sub    esp,0xc
c00143f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00143f6:	e8 48 b4 ff ff       	call   c000f843 <malloc>
c00143fb:	83 c4 10             	add    esp,0x10
c00143fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014404:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001440b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001440f:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014415:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014419:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001441f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014425:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014429:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001442f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014436:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001443a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014441:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014445:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001444c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014450:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001445a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001445e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014468:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001446c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014476:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001447a:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014484:	90                   	nop
c0014485:	83 c4 1c             	add    esp,0x1c
c0014488:	c3                   	ret    
c0014489:	90                   	nop

c001448a <Device::getName()>:
c001448a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001448e:	05 d0 00 00 00       	add    eax,0xd0
c0014493:	c3                   	ret    

c0014494 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014494:	83 ec 0c             	sub    esp,0xc
c0014497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001449b:	83 ec 08             	sub    esp,0x8
c001449e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144a2:	50                   	push   eax
c00144a3:	e8 e6 fe ff ff       	call   c001438e <Device::Device(char const*)>
c00144a8:	83 c4 10             	add    esp,0x10
c00144ab:	ba 84 aa 02 c0       	mov    edx,0xc002aa84
c00144b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144b4:	89 10                	mov    DWORD PTR [eax],edx
c00144b6:	90                   	nop
c00144b7:	83 c4 0c             	add    esp,0xc
c00144ba:	c3                   	ret    
c00144bb:	90                   	nop

c00144bc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00144bc:	57                   	push   edi
c00144bd:	56                   	push   esi
c00144be:	53                   	push   ebx
c00144bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144c3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00144c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00144cb:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00144d1:	75 0c                	jne    c00144df <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00144d3:	52                   	push   edx
c00144d4:	52                   	push   edx
c00144d5:	53                   	push   ebx
c00144d6:	56                   	push   esi
c00144d7:	e8 be 42 01 00       	call   c002879a <LinkedList<Device>::addElement(Device*)>
c00144dc:	83 c4 10             	add    esp,0x10
c00144df:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144e5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144e8:	74 12                	je     c00144fc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00144ea:	50                   	push   eax
c00144eb:	57                   	push   edi
c00144ec:	56                   	push   esi
c00144ed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144f0:	e8 c7 ff ff ff       	call   c00144bc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00144f5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144f7:	83 c4 10             	add    esp,0x10
c00144fa:	eb e9                	jmp    c00144e5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00144fc:	5b                   	pop    ebx
c00144fd:	5e                   	pop    esi
c00144fe:	5f                   	pop    edi
c00144ff:	c3                   	ret    

c0014500 <getDevicesOfType(DeviceType)>:
c0014500:	53                   	push   ebx
c0014501:	83 ec 14             	sub    esp,0x14
c0014504:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014508:	53                   	push   ebx
c0014509:	e8 68 43 01 00       	call   c0028876 <LinkedList<Device>::LinkedList()>
c001450e:	83 c4 0c             	add    esp,0xc
c0014511:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014515:	53                   	push   ebx
c0014516:	ff 35 08 e2 02 c0    	push   DWORD PTR ds:0xc002e208
c001451c:	e8 9b ff ff ff       	call   c00144bc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014521:	89 d8                	mov    eax,ebx
c0014523:	83 c4 18             	add    esp,0x18
c0014526:	5b                   	pop    ebx
c0014527:	c2 04 00             	ret    0x4

c001452a <HardDiskController::HardDiskController(char const*)>:
c001452a:	83 ec 0c             	sub    esp,0xc
c001452d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014531:	83 ec 08             	sub    esp,0x8
c0014534:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014538:	50                   	push   eax
c0014539:	e8 50 fe ff ff       	call   c001438e <Device::Device(char const*)>
c001453e:	83 c4 10             	add    esp,0x10
c0014541:	ba b0 aa 02 c0       	mov    edx,0xc002aab0
c0014546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001454a:	89 10                	mov    DWORD PTR [eax],edx
c001454c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014550:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001455a:	90                   	nop
c001455b:	83 c4 0c             	add    esp,0xc
c001455e:	c3                   	ret    
c001455f:	90                   	nop

c0014560 <HardDiskController::~HardDiskController()>:
c0014560:	83 ec 0c             	sub    esp,0xc
c0014563:	ba b0 aa 02 c0       	mov    edx,0xc002aab0
c0014568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001456c:	89 10                	mov    DWORD PTR [eax],edx
c001456e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014572:	83 ec 0c             	sub    esp,0xc
c0014575:	50                   	push   eax
c0014576:	e8 f5 fa ff ff       	call   c0014070 <Device::~Device()>
c001457b:	83 c4 10             	add    esp,0x10
c001457e:	90                   	nop
c001457f:	83 c4 0c             	add    esp,0xc
c0014582:	c3                   	ret    
c0014583:	90                   	nop

c0014584 <HardDiskController::~HardDiskController()>:
c0014584:	83 ec 0c             	sub    esp,0xc
c0014587:	83 ec 0c             	sub    esp,0xc
c001458a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001458e:	e8 cd ff ff ff       	call   c0014560 <HardDiskController::~HardDiskController()>
c0014593:	83 c4 10             	add    esp,0x10
c0014596:	83 ec 08             	sub    esp,0x8
c0014599:	68 58 01 00 00       	push   0x158
c001459e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145a2:	e8 f1 e6 ff ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c00145a7:	83 c4 10             	add    esp,0x10
c00145aa:	83 c4 0c             	add    esp,0xc
c00145ad:	c3                   	ret    

c00145ae <PhysicalDisk::eject()>:
c00145ae:	83 ec 18             	sub    esp,0x18
c00145b1:	68 d4 aa 02 c0       	push   0xc002aad4
c00145b6:	e8 bd e7 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00145bb:	83 c8 ff             	or     eax,0xffffffff
c00145be:	83 c4 1c             	add    esp,0x1c
c00145c1:	c3                   	ret    

c00145c2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00145c2:	83 ec 0c             	sub    esp,0xc
c00145c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145c9:	83 ec 08             	sub    esp,0x8
c00145cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145d0:	50                   	push   eax
c00145d1:	e8 b8 fd ff ff       	call   c001438e <Device::Device(char const*)>
c00145d6:	83 c4 10             	add    esp,0x10
c00145d9:	ba 04 ab 02 c0       	mov    edx,0xc002ab04
c00145de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145e2:	89 10                	mov    DWORD PTR [eax],edx
c00145e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145e8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00145ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145f3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00145fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145fe:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001460c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014610:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001461a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014624:	90                   	nop
c0014625:	83 c4 0c             	add    esp,0xc
c0014628:	c3                   	ret    
c0014629:	90                   	nop

c001462a <PhysicalDisk::startCache()>:
c001462a:	56                   	push   esi
c001462b:	53                   	push   ebx
c001462c:	83 ec 10             	sub    esp,0x10
c001462f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014633:	6a 44                	push   0x44
c0014635:	e8 09 b2 ff ff       	call   c000f843 <malloc>
c001463a:	89 c6                	mov    esi,eax
c001463c:	58                   	pop    eax
c001463d:	5a                   	pop    edx
c001463e:	53                   	push   ebx
c001463f:	56                   	push   esi
c0014640:	e8 5f 27 00 00       	call   c0016da4 <VCache::VCache(PhysicalDisk*)>
c0014645:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001464b:	83 c4 14             	add    esp,0x14
c001464e:	5b                   	pop    ebx
c001464f:	5e                   	pop    esi
c0014650:	c3                   	ret    
c0014651:	90                   	nop

c0014652 <PhysicalDisk::~PhysicalDisk()>:
c0014652:	83 ec 0c             	sub    esp,0xc
c0014655:	ba 04 ab 02 c0       	mov    edx,0xc002ab04
c001465a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001465e:	89 10                	mov    DWORD PTR [eax],edx
c0014660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014664:	83 ec 0c             	sub    esp,0xc
c0014667:	50                   	push   eax
c0014668:	e8 03 fa ff ff       	call   c0014070 <Device::~Device()>
c001466d:	83 c4 10             	add    esp,0x10
c0014670:	90                   	nop
c0014671:	83 c4 0c             	add    esp,0xc
c0014674:	c3                   	ret    
c0014675:	90                   	nop

c0014676 <PhysicalDisk::~PhysicalDisk()>:
c0014676:	83 ec 0c             	sub    esp,0xc
c0014679:	83 ec 0c             	sub    esp,0xc
c001467c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014680:	e8 cd ff ff ff       	call   c0014652 <PhysicalDisk::~PhysicalDisk()>
c0014685:	83 c4 10             	add    esp,0x10
c0014688:	83 ec 08             	sub    esp,0x8
c001468b:	68 6c 01 00 00       	push   0x16c
c0014690:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014694:	e8 ff e5 ff ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0014699:	83 c4 10             	add    esp,0x10
c001469c:	83 c4 0c             	add    esp,0xc
c001469f:	c3                   	ret    

c00146a0 <FPU::FPU(char const*)>:
c00146a0:	83 ec 0c             	sub    esp,0xc
c00146a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146a7:	83 ec 08             	sub    esp,0x8
c00146aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146ae:	50                   	push   eax
c00146af:	e8 da fc ff ff       	call   c001438e <Device::Device(char const*)>
c00146b4:	83 c4 10             	add    esp,0x10
c00146b7:	ba 48 ab 02 c0       	mov    edx,0xc002ab48
c00146bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146c0:	89 10                	mov    DWORD PTR [eax],edx
c00146c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146c6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00146d0:	90                   	nop
c00146d1:	83 c4 0c             	add    esp,0xc
c00146d4:	c3                   	ret    
c00146d5:	90                   	nop

c00146d6 <FPU::~FPU()>:
c00146d6:	83 ec 0c             	sub    esp,0xc
c00146d9:	ba 48 ab 02 c0       	mov    edx,0xc002ab48
c00146de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e2:	89 10                	mov    DWORD PTR [eax],edx
c00146e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e8:	83 ec 0c             	sub    esp,0xc
c00146eb:	50                   	push   eax
c00146ec:	e8 7f f9 ff ff       	call   c0014070 <Device::~Device()>
c00146f1:	83 c4 10             	add    esp,0x10
c00146f4:	90                   	nop
c00146f5:	83 c4 0c             	add    esp,0xc
c00146f8:	c3                   	ret    
c00146f9:	90                   	nop

c00146fa <FPU::~FPU()>:
c00146fa:	83 ec 0c             	sub    esp,0xc
c00146fd:	83 ec 0c             	sub    esp,0xc
c0014700:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014704:	e8 cd ff ff ff       	call   c00146d6 <FPU::~FPU()>
c0014709:	83 c4 10             	add    esp,0x10
c001470c:	83 ec 08             	sub    esp,0x8
c001470f:	68 58 01 00 00       	push   0x158
c0014714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014718:	e8 7b e5 ff ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c001471d:	83 c4 10             	add    esp,0x10
c0014720:	83 c4 0c             	add    esp,0xc
c0014723:	c3                   	ret    

c0014724 <setupFPU()>:
c0014724:	53                   	push   ebx
c0014725:	83 ec 08             	sub    esp,0x8
c0014728:	8b 15 08 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e208
c001472e:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014735:	74 19                	je     c0014750 <setupFPU()+0x2c>
c0014737:	83 ec 0c             	sub    esp,0xc
c001473a:	68 58 01 00 00       	push   0x158
c001473f:	e8 ff b0 ff ff       	call   c000f843 <malloc>
c0014744:	89 c3                	mov    ebx,eax
c0014746:	89 04 24             	mov    DWORD PTR [esp],eax
c0014749:	e8 92 0c 01 00       	call   c00253e0 <AVX::AVX()>
c001474e:	eb 5b                	jmp    c00147ab <setupFPU()+0x87>
c0014750:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014756:	84 c0                	test   al,al
c0014758:	79 19                	jns    c0014773 <setupFPU()+0x4f>
c001475a:	83 ec 0c             	sub    esp,0xc
c001475d:	68 58 01 00 00       	push   0x158
c0014762:	e8 dc b0 ff ff       	call   c000f843 <malloc>
c0014767:	89 c3                	mov    ebx,eax
c0014769:	89 04 24             	mov    DWORD PTR [esp],eax
c001476c:	e8 95 0d 01 00       	call   c0025506 <SSE::SSE()>
c0014771:	eb 38                	jmp    c00147ab <setupFPU()+0x87>
c0014773:	a8 20                	test   al,0x20
c0014775:	74 19                	je     c0014790 <setupFPU()+0x6c>
c0014777:	83 ec 0c             	sub    esp,0xc
c001477a:	68 58 01 00 00       	push   0x158
c001477f:	e8 bf b0 ff ff       	call   c000f843 <malloc>
c0014784:	89 c3                	mov    ebx,eax
c0014786:	89 04 24             	mov    DWORD PTR [esp],eax
c0014789:	e8 e2 0c 01 00       	call   c0025470 <MMX::MMX()>
c001478e:	eb 1b                	jmp    c00147ab <setupFPU()+0x87>
c0014790:	a8 10                	test   al,0x10
c0014792:	74 1c                	je     c00147b0 <setupFPU()+0x8c>
c0014794:	83 ec 0c             	sub    esp,0xc
c0014797:	68 58 01 00 00       	push   0x158
c001479c:	e8 a2 b0 ff ff       	call   c000f843 <malloc>
c00147a1:	89 c3                	mov    ebx,eax
c00147a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00147a6:	e8 e9 0d 01 00       	call   c0025594 <x87::x87()>
c00147ab:	83 c4 10             	add    esp,0x10
c00147ae:	eb 24                	jmp    c00147d4 <setupFPU()+0xb0>
c00147b0:	83 e0 ef             	and    eax,0xffffffef
c00147b3:	83 ec 0c             	sub    esp,0xc
c00147b6:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00147bc:	68 34 ab 02 c0       	push   0xc002ab34
c00147c1:	e8 b2 e5 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00147c6:	0f 20 c0             	mov    eax,cr0
c00147c9:	83 c8 04             	or     eax,0x4
c00147cc:	0f 22 c0             	mov    cr0,eax
c00147cf:	31 db                	xor    ebx,ebx
c00147d1:	83 c4 10             	add    esp,0x10
c00147d4:	89 d8                	mov    eax,ebx
c00147d6:	83 c4 08             	add    esp,0x8
c00147d9:	5b                   	pop    ebx
c00147da:	c3                   	ret    
c00147db:	90                   	nop

c00147dc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00147dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00147e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00147e4:	c1 e0 04             	shl    eax,0x4
c00147e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00147eb:	8d 50 10             	lea    edx,[eax+0x10]
c00147ee:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00147f4:	74 08                	je     c00147fe <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00147f6:	83 c0 04             	add    eax,0x4
c00147f9:	39 d0                	cmp    eax,edx
c00147fb:	75 f1                	jne    c00147ee <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00147fd:	c3                   	ret    
c00147fe:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014808:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014812:	eb e2                	jmp    c00147f6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014814 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014814:	57                   	push   edi
c0014815:	31 c0                	xor    eax,eax
c0014817:	56                   	push   esi
c0014818:	53                   	push   ebx
c0014819:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001481d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014821:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014825:	89 da                	mov    edx,ebx
c0014827:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001482b:	c1 e2 04             	shl    edx,0x4
c001482e:	01 ca                	add    edx,ecx
c0014830:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014838:	74 16                	je     c0014850 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001483a:	40                   	inc    eax
c001483b:	83 f8 04             	cmp    eax,0x4
c001483e:	75 f0                	jne    c0014830 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014840:	c7 44 24 10 78 ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ab78
c0014848:	5b                   	pop    ebx
c0014849:	5e                   	pop    esi
c001484a:	5f                   	pop    edi
c001484b:	e9 03 5c 00 00       	jmp    c001a453 <Krnl::panic(char const*)>
c0014850:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014853:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014856:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c001485c:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014862:	5b                   	pop    ebx
c0014863:	5e                   	pop    esi
c0014864:	5f                   	pop    edi
c0014865:	c3                   	ret    

c0014866 <doubleFault(regs*, void*)>:
c0014866:	55                   	push   ebp
c0014867:	89 e5                	mov    ebp,esp
c0014869:	83 ec 08             	sub    esp,0x8
c001486c:	83 ec 0c             	sub    esp,0xc
c001486f:	68 b3 ab 02 c0       	push   0xc002abb3
c0014874:	e8 da 5b 00 00       	call   c001a453 <Krnl::panic(char const*)>
c0014879:	83 c4 10             	add    esp,0x10
c001487c:	90                   	nop
c001487d:	c9                   	leave  
c001487e:	c3                   	ret    
c001487f:	90                   	nop

c0014880 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014880:	56                   	push   esi
c0014881:	53                   	push   ebx
c0014882:	50                   	push   eax
c0014883:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014887:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001488b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014890:	75 35                	jne    c00148c7 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014892:	8d 43 20             	lea    eax,[ebx+0x20]
c0014895:	31 d2                	xor    edx,edx
c0014897:	89 c1                	mov    ecx,eax
c0014899:	c1 e1 04             	shl    ecx,0x4
c001489c:	01 f1                	add    ecx,esi
c001489e:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00148a6:	74 3e                	je     c00148e6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00148a8:	42                   	inc    edx
c00148a9:	83 fa 04             	cmp    edx,0x4
c00148ac:	75 f0                	jne    c001489e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00148ae:	83 ec 0c             	sub    esp,0xc
c00148b1:	68 f8 ab 02 c0       	push   0xc002abf8
c00148b6:	e8 98 5b 00 00       	call   c001a453 <Krnl::panic(char const*)>
c00148bb:	83 c4 10             	add    esp,0x10
c00148be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00148c3:	5a                   	pop    edx
c00148c4:	5b                   	pop    ebx
c00148c5:	5e                   	pop    esi
c00148c6:	c3                   	ret    
c00148c7:	83 ec 0c             	sub    esp,0xc
c00148ca:	56                   	push   esi
c00148cb:	e8 ba fb ff ff       	call   c001448a <Device::getName()>
c00148d0:	83 c4 10             	add    esp,0x10
c00148d3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00148d6:	75 ba                	jne    c0014892 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00148d8:	83 fb 0f             	cmp    ebx,0xf
c00148db:	7f 29                	jg     c0014906 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00148dd:	0f b6 9b 60 d4 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2ba0]
c00148e4:	eb ac                	jmp    c0014892 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00148e6:	8d 04 82             	lea    eax,[edx+eax*4]
c00148e9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00148ed:	8d 04 86             	lea    eax,[esi+eax*4]
c00148f0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00148f6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00148fa:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014900:	89 d8                	mov    eax,ebx
c0014902:	5a                   	pop    edx
c0014903:	5b                   	pop    ebx
c0014904:	5e                   	pop    esi
c0014905:	c3                   	ret    
c0014906:	83 ec 0c             	sub    esp,0xc
c0014909:	68 c0 ab 02 c0       	push   0xc002abc0
c001490e:	e8 40 5b 00 00       	call   c001a453 <Krnl::panic(char const*)>
c0014913:	83 c4 10             	add    esp,0x10
c0014916:	e9 77 ff ff ff       	jmp    c0014892 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001491b:	90                   	nop

c001491c <InterruptController::clearAllHandlers(int, bool)>:
c001491c:	56                   	push   esi
c001491d:	53                   	push   ebx
c001491e:	52                   	push   edx
c001491f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014923:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014927:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001492c:	75 61                	jne    c001498f <InterruptController::clearAllHandlers(int, bool)+0x73>
c001492e:	8d 46 20             	lea    eax,[esi+0x20]
c0014931:	c1 e6 04             	shl    esi,0x4
c0014934:	c1 e0 04             	shl    eax,0x4
c0014937:	01 de                	add    esi,ebx
c0014939:	01 d8                	add    eax,ebx
c001493b:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014945:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c001494f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014959:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014963:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c001496d:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014977:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014981:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c001498b:	58                   	pop    eax
c001498c:	5b                   	pop    ebx
c001498d:	5e                   	pop    esi
c001498e:	c3                   	ret    
c001498f:	83 ec 0c             	sub    esp,0xc
c0014992:	53                   	push   ebx
c0014993:	e8 f2 fa ff ff       	call   c001448a <Device::getName()>
c0014998:	83 c4 10             	add    esp,0x10
c001499b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001499e:	75 8e                	jne    c001492e <InterruptController::clearAllHandlers(int, bool)+0x12>
c00149a0:	83 fe 0f             	cmp    esi,0xf
c00149a3:	7f 09                	jg     c00149ae <InterruptController::clearAllHandlers(int, bool)+0x92>
c00149a5:	0f b6 b6 60 d4 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2ba0]
c00149ac:	eb 80                	jmp    c001492e <InterruptController::clearAllHandlers(int, bool)+0x12>
c00149ae:	83 ec 0c             	sub    esp,0xc
c00149b1:	68 34 ac 02 c0       	push   0xc002ac34
c00149b6:	e8 98 5a 00 00       	call   c001a453 <Krnl::panic(char const*)>
c00149bb:	83 c4 10             	add    esp,0x10
c00149be:	e9 6b ff ff ff       	jmp    c001492e <InterruptController::clearAllHandlers(int, bool)+0x12>
c00149c3:	90                   	nop

c00149c4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00149c4:	56                   	push   esi
c00149c5:	53                   	push   ebx
c00149c6:	52                   	push   edx
c00149c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00149cb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00149cf:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00149d4:	75 3a                	jne    c0014a10 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00149d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00149da:	8d 50 20             	lea    edx,[eax+0x20]
c00149dd:	c1 e2 04             	shl    edx,0x4
c00149e0:	8d 04 16             	lea    eax,[esi+edx*1]
c00149e3:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00149e7:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00149ed:	74 0b                	je     c00149fa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00149ef:	83 c0 04             	add    eax,0x4
c00149f2:	39 d0                	cmp    eax,edx
c00149f4:	75 f1                	jne    c00149e7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00149f6:	58                   	pop    eax
c00149f7:	5b                   	pop    ebx
c00149f8:	5e                   	pop    esi
c00149f9:	c3                   	ret    
c00149fa:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014a04:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014a0e:	eb df                	jmp    c00149ef <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014a10:	83 ec 0c             	sub    esp,0xc
c0014a13:	56                   	push   esi
c0014a14:	e8 71 fa ff ff       	call   c001448a <Device::getName()>
c0014a19:	83 c4 10             	add    esp,0x10
c0014a1c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a1f:	75 b5                	jne    c00149d6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014a21:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014a26:	7f 11                	jg     c0014a39 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014a28:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a2c:	0f b6 80 60 d4 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2ba0]
c0014a33:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a37:	eb 9d                	jmp    c00149d6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014a39:	83 ec 0c             	sub    esp,0xc
c0014a3c:	68 34 ac 02 c0       	push   0xc002ac34
c0014a41:	e8 0d 5a 00 00       	call   c001a453 <Krnl::panic(char const*)>
c0014a46:	83 c4 10             	add    esp,0x10
c0014a49:	eb 8b                	jmp    c00149d6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014a4b <nmiHandler(regs*, void*)>:
c0014a4b:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0014a50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014a54:	e9 33 a5 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014a59 <int_handler>:
c0014a59:	55                   	push   ebp
c0014a5a:	57                   	push   edi
c0014a5b:	56                   	push   esi
c0014a5c:	53                   	push   ebx
c0014a5d:	83 ec 0c             	sub    esp,0xc
c0014a60:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014a64:	80 3d 64 0d 03 c0 00 	cmp    BYTE PTR ds:0xc0030d64,0x0
c0014a6b:	74 0b                	je     c0014a78 <int_handler+0x1f>
c0014a6d:	fa                   	cli    
c0014a6e:	f4                   	hlt    
c0014a6f:	80 3d 64 0d 03 c0 00 	cmp    BYTE PTR ds:0xc0030d64,0x0
c0014a76:	75 f5                	jne    c0014a6d <int_handler+0x14>
c0014a78:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0014a7d:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014a80:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014a86:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014a8c:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014a8f:	83 f8 17             	cmp    eax,0x17
c0014a92:	77 13                	ja     c0014aa7 <int_handler+0x4e>
c0014a94:	83 ec 08             	sub    esp,0x8
c0014a97:	8b 17                	mov    edx,DWORD PTR [edi]
c0014a99:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014a9c:	0f b6 c0             	movzx  eax,al
c0014a9f:	50                   	push   eax
c0014aa0:	57                   	push   edi
c0014aa1:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014aa4:	83 c4 10             	add    esp,0x10
c0014aa7:	83 c3 15             	add    ebx,0x15
c0014aaa:	c1 e3 04             	shl    ebx,0x4
c0014aad:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014ab1:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014ab8:	31 db                	xor    ebx,ebx
c0014aba:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014abe:	85 c0                	test   eax,eax
c0014ac0:	74 13                	je     c0014ad5 <int_handler+0x7c>
c0014ac2:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014ac5:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014ac9:	74 1c                	je     c0014ae7 <int_handler+0x8e>
c0014acb:	83 ec 08             	sub    esp,0x8
c0014ace:	52                   	push   edx
c0014acf:	56                   	push   esi
c0014ad0:	ff d0                	call   eax
c0014ad2:	83 c4 10             	add    esp,0x10
c0014ad5:	43                   	inc    ebx
c0014ad6:	83 fb 04             	cmp    ebx,0x4
c0014ad9:	75 df                	jne    c0014aba <int_handler+0x61>
c0014adb:	83 c4 0c             	add    esp,0xc
c0014ade:	31 c0                	xor    eax,eax
c0014ae0:	5b                   	pop    ebx
c0014ae1:	31 d2                	xor    edx,edx
c0014ae3:	5e                   	pop    esi
c0014ae4:	5f                   	pop    edi
c0014ae5:	5d                   	pop    ebp
c0014ae6:	c3                   	ret    
c0014ae7:	83 ec 08             	sub    esp,0x8
c0014aea:	52                   	push   edx
c0014aeb:	56                   	push   esi
c0014aec:	ff d0                	call   eax
c0014aee:	83 c4 10             	add    esp,0x10
c0014af1:	83 c4 0c             	add    esp,0xc
c0014af4:	5b                   	pop    ebx
c0014af5:	5e                   	pop    esi
c0014af6:	5f                   	pop    edi
c0014af7:	5d                   	pop    ebp
c0014af8:	c3                   	ret    
c0014af9:	90                   	nop

c0014afa <InterruptController::InterruptController(char const*)>:
c0014afa:	83 ec 1c             	sub    esp,0x1c
c0014afd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b01:	83 ec 08             	sub    esp,0x8
c0014b04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b08:	50                   	push   eax
c0014b09:	e8 80 f8 ff ff       	call   c001438e <Device::Device(char const*)>
c0014b0e:	83 c4 10             	add    esp,0x10
c0014b11:	ba f0 ae 02 c0       	mov    edx,0xc002aef0
c0014b16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b1a:	89 10                	mov    DWORD PTR [eax],edx
c0014b1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b20:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014b2a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014b32:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014b3a:	7f 5e                	jg     c0014b9a <InterruptController::InterruptController(char const*)+0xa0>
c0014b3c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014b44:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014b49:	7f 49                	jg     c0014b94 <InterruptController::InterruptController(char const*)+0x9a>
c0014b4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b4f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014b53:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014b5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014b5e:	01 ca                	add    edx,ecx
c0014b60:	83 c2 54             	add    edx,0x54
c0014b63:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014b6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014b73:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014b7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014b7e:	01 ca                	add    edx,ecx
c0014b80:	81 c2 54 04 00 00    	add    edx,0x454
c0014b86:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014b8e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014b92:	eb b0                	jmp    c0014b44 <InterruptController::InterruptController(char const*)+0x4a>
c0014b94:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014b98:	eb 98                	jmp    c0014b32 <InterruptController::InterruptController(char const*)+0x38>
c0014b9a:	90                   	nop
c0014b9b:	83 c4 1c             	add    esp,0x1c
c0014b9e:	c3                   	ret    
c0014b9f:	90                   	nop

c0014ba0 <InterruptController::~InterruptController()>:
c0014ba0:	83 ec 0c             	sub    esp,0xc
c0014ba3:	ba f0 ae 02 c0       	mov    edx,0xc002aef0
c0014ba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014bac:	89 10                	mov    DWORD PTR [eax],edx
c0014bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014bb2:	83 ec 0c             	sub    esp,0xc
c0014bb5:	50                   	push   eax
c0014bb6:	e8 b5 f4 ff ff       	call   c0014070 <Device::~Device()>
c0014bbb:	83 c4 10             	add    esp,0x10
c0014bbe:	90                   	nop
c0014bbf:	83 c4 0c             	add    esp,0xc
c0014bc2:	c3                   	ret    
c0014bc3:	90                   	nop

c0014bc4 <InterruptController::~InterruptController()>:
c0014bc4:	83 ec 0c             	sub    esp,0xc
c0014bc7:	83 ec 0c             	sub    esp,0xc
c0014bca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bce:	e8 cd ff ff ff       	call   c0014ba0 <InterruptController::~InterruptController()>
c0014bd3:	83 c4 10             	add    esp,0x10
c0014bd6:	83 ec 08             	sub    esp,0x8
c0014bd9:	68 58 21 00 00       	push   0x2158
c0014bde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014be2:	e8 b1 e0 ff ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0014be7:	83 c4 10             	add    esp,0x10
c0014bea:	83 c4 0c             	add    esp,0xc
c0014bed:	c3                   	ret    

c0014bee <displayDebugInfo(regs*)>:
c0014bee:	55                   	push   ebp
c0014bef:	57                   	push   edi
c0014bf0:	56                   	push   esi
c0014bf1:	53                   	push   ebx
c0014bf2:	83 ec 24             	sub    esp,0x24
c0014bf5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014bf9:	0f 20 c2             	mov    edx,cr0
c0014bfc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014c00:	0f 20 d7             	mov    edi,cr2
c0014c03:	0f 20 de             	mov    esi,cr3
c0014c06:	0f 20 e5             	mov    ebp,cr4
c0014c09:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014c0c:	68 6e ac 02 c0       	push   0xc002ac6e
c0014c11:	e8 62 e1 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0014c16:	59                   	pop    ecx
c0014c17:	58                   	pop    eax
c0014c18:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014c1b:	68 79 ac 02 c0       	push   0xc002ac79
c0014c20:	e8 53 e1 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0014c25:	58                   	pop    eax
c0014c26:	5a                   	pop    edx
c0014c27:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014c2a:	68 84 ac 02 c0       	push   0xc002ac84
c0014c2f:	e8 44 e1 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0014c34:	59                   	pop    ecx
c0014c35:	58                   	pop    eax
c0014c36:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014c39:	68 8f ac 02 c0       	push   0xc002ac8f
c0014c3e:	e8 35 e1 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0014c43:	58                   	pop    eax
c0014c44:	5a                   	pop    edx
c0014c45:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014c48:	68 9a ac 02 c0       	push   0xc002ac9a
c0014c4d:	e8 26 e1 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0014c52:	59                   	pop    ecx
c0014c53:	58                   	pop    eax
c0014c54:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014c57:	68 a5 ac 02 c0       	push   0xc002aca5
c0014c5c:	e8 17 e1 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0014c61:	58                   	pop    eax
c0014c62:	5a                   	pop    edx
c0014c63:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014c66:	68 b0 ac 02 c0       	push   0xc002acb0
c0014c6b:	e8 08 e1 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0014c70:	59                   	pop    ecx
c0014c71:	58                   	pop    eax
c0014c72:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014c75:	68 bb ac 02 c0       	push   0xc002acbb
c0014c7a:	e8 f9 e0 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0014c7f:	58                   	pop    eax
c0014c80:	5a                   	pop    edx
c0014c81:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014c84:	68 c6 ac 02 c0       	push   0xc002acc6
c0014c89:	e8 ea e0 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0014c8e:	59                   	pop    ecx
c0014c8f:	58                   	pop    eax
c0014c90:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014c93:	68 d5 ac 02 c0       	push   0xc002acd5
c0014c98:	e8 db e0 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0014c9d:	58                   	pop    eax
c0014c9e:	5a                   	pop    edx
c0014c9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014ca2:	68 e0 ac 02 c0       	push   0xc002ace0
c0014ca7:	e8 cc e0 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0014cac:	59                   	pop    ecx
c0014cad:	58                   	pop    eax
c0014cae:	57                   	push   edi
c0014caf:	68 eb ac 02 c0       	push   0xc002aceb
c0014cb4:	e8 bf e0 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0014cb9:	58                   	pop    eax
c0014cba:	5a                   	pop    edx
c0014cbb:	56                   	push   esi
c0014cbc:	68 f6 ac 02 c0       	push   0xc002acf6
c0014cc1:	e8 b2 e0 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0014cc6:	59                   	pop    ecx
c0014cc7:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014ccc:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014cd2:	e8 1a c0 ff ff       	call   c0010cf1 <setActiveTerminal(VgaText*)>
c0014cd7:	58                   	pop    eax
c0014cd8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014cdb:	5a                   	pop    edx
c0014cdc:	c1 e0 05             	shl    eax,0x5
c0014cdf:	05 c0 d1 02 c0       	add    eax,0xc002d1c0
c0014ce4:	50                   	push   eax
c0014ce5:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014cea:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014cf0:	e8 1b c4 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014cf5:	59                   	pop    ecx
c0014cf6:	58                   	pop    eax
c0014cf7:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014cfc:	68 01 ad 02 c0       	push   0xc002ad01
c0014d01:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d07:	e8 04 c4 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014d0c:	58                   	pop    eax
c0014d0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d12:	5a                   	pop    edx
c0014d13:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014d16:	83 c0 0c             	add    eax,0xc
c0014d19:	50                   	push   eax
c0014d1a:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014d1f:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d25:	e8 e6 c3 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014d2a:	59                   	pop    ecx
c0014d2b:	58                   	pop    eax
c0014d2c:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014d31:	68 0a ad 02 c0       	push   0xc002ad0a
c0014d36:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d3c:	e8 cf c3 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014d41:	58                   	pop    eax
c0014d42:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014d47:	5a                   	pop    edx
c0014d48:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d4b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d51:	e8 e0 c3 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014d56:	59                   	pop    ecx
c0014d57:	58                   	pop    eax
c0014d58:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014d5d:	68 12 ad 02 c0       	push   0xc002ad12
c0014d62:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d68:	e8 a3 c3 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014d6d:	58                   	pop    eax
c0014d6e:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014d73:	5a                   	pop    edx
c0014d74:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014d77:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d7d:	e8 b4 c3 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014d82:	59                   	pop    ecx
c0014d83:	58                   	pop    eax
c0014d84:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014d89:	68 1a ad 02 c0       	push   0xc002ad1a
c0014d8e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d94:	e8 77 c3 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014d99:	58                   	pop    eax
c0014d9a:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014d9f:	5a                   	pop    edx
c0014da0:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014da3:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014da9:	e8 88 c3 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014dae:	59                   	pop    ecx
c0014daf:	58                   	pop    eax
c0014db0:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014db5:	68 22 ad 02 c0       	push   0xc002ad22
c0014dba:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014dc0:	e8 4b c3 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014dc5:	58                   	pop    eax
c0014dc6:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014dcb:	5a                   	pop    edx
c0014dcc:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014dcf:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014dd5:	e8 5c c3 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014dda:	59                   	pop    ecx
c0014ddb:	58                   	pop    eax
c0014ddc:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014de1:	68 2a ad 02 c0       	push   0xc002ad2a
c0014de6:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014dec:	e8 1f c3 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014df1:	58                   	pop    eax
c0014df2:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014df7:	5a                   	pop    edx
c0014df8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014dfb:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e01:	e8 30 c3 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014e06:	59                   	pop    ecx
c0014e07:	58                   	pop    eax
c0014e08:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014e0d:	68 32 ad 02 c0       	push   0xc002ad32
c0014e12:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e18:	e8 f3 c2 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014e1d:	58                   	pop    eax
c0014e1e:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014e23:	5a                   	pop    edx
c0014e24:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014e27:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e2d:	e8 04 c3 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014e32:	59                   	pop    ecx
c0014e33:	58                   	pop    eax
c0014e34:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014e39:	68 3a ad 02 c0       	push   0xc002ad3a
c0014e3e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e44:	e8 c7 c2 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014e49:	58                   	pop    eax
c0014e4a:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014e4f:	5a                   	pop    edx
c0014e50:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014e54:	52                   	push   edx
c0014e55:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e5b:	e8 d6 c2 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014e60:	59                   	pop    ecx
c0014e61:	58                   	pop    eax
c0014e62:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014e67:	68 43 ad 02 c0       	push   0xc002ad43
c0014e6c:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e72:	e8 99 c2 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014e77:	58                   	pop    eax
c0014e78:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014e7d:	5a                   	pop    edx
c0014e7e:	57                   	push   edi
c0014e7f:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e85:	e8 ac c2 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014e8a:	59                   	pop    ecx
c0014e8b:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014e90:	5f                   	pop    edi
c0014e91:	68 4b ad 02 c0       	push   0xc002ad4b
c0014e96:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e9c:	e8 6f c2 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014ea1:	58                   	pop    eax
c0014ea2:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014ea7:	5a                   	pop    edx
c0014ea8:	56                   	push   esi
c0014ea9:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014eaf:	e8 82 c2 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014eb4:	59                   	pop    ecx
c0014eb5:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014eba:	5e                   	pop    esi
c0014ebb:	68 53 ad 02 c0       	push   0xc002ad53
c0014ec0:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ec6:	e8 45 c2 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014ecb:	5f                   	pop    edi
c0014ecc:	58                   	pop    eax
c0014ecd:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014ed2:	55                   	push   ebp
c0014ed3:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ed9:	e8 58 c2 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014ede:	58                   	pop    eax
c0014edf:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014ee4:	5a                   	pop    edx
c0014ee5:	68 5b ad 02 c0       	push   0xc002ad5b
c0014eea:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ef0:	e8 1b c2 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014ef5:	0f 21 c0             	mov    eax,db0
c0014ef8:	59                   	pop    ecx
c0014ef9:	5e                   	pop    esi
c0014efa:	50                   	push   eax
c0014efb:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014f00:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f06:	e8 2b c2 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014f0b:	5f                   	pop    edi
c0014f0c:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014f11:	5d                   	pop    ebp
c0014f12:	68 64 ad 02 c0       	push   0xc002ad64
c0014f17:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f1d:	e8 ee c1 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014f22:	0f 21 c8             	mov    eax,db1
c0014f25:	5a                   	pop    edx
c0014f26:	59                   	pop    ecx
c0014f27:	50                   	push   eax
c0014f28:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014f2d:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f33:	e8 fe c1 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014f38:	5e                   	pop    esi
c0014f39:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014f3e:	5f                   	pop    edi
c0014f3f:	68 6c ad 02 c0       	push   0xc002ad6c
c0014f44:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f4a:	e8 c1 c1 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014f4f:	0f 21 d0             	mov    eax,db2
c0014f52:	5d                   	pop    ebp
c0014f53:	5a                   	pop    edx
c0014f54:	50                   	push   eax
c0014f55:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014f5a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f60:	e8 d1 c1 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014f65:	59                   	pop    ecx
c0014f66:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014f6b:	5e                   	pop    esi
c0014f6c:	68 74 ad 02 c0       	push   0xc002ad74
c0014f71:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f77:	e8 94 c1 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014f7c:	0f 21 d8             	mov    eax,db3
c0014f7f:	5f                   	pop    edi
c0014f80:	5d                   	pop    ebp
c0014f81:	50                   	push   eax
c0014f82:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014f87:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f8d:	e8 a4 c1 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014f92:	58                   	pop    eax
c0014f93:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014f98:	5a                   	pop    edx
c0014f99:	68 7c ad 02 c0       	push   0xc002ad7c
c0014f9e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fa4:	e8 67 c1 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014fa9:	0f 21 f0             	mov    eax,db6
c0014fac:	59                   	pop    ecx
c0014fad:	5e                   	pop    esi
c0014fae:	50                   	push   eax
c0014faf:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014fb4:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fba:	e8 77 c1 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014fbf:	5f                   	pop    edi
c0014fc0:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014fc5:	5d                   	pop    ebp
c0014fc6:	68 84 ad 02 c0       	push   0xc002ad84
c0014fcb:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fd1:	e8 3a c1 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0014fd6:	0f 21 f8             	mov    eax,db7
c0014fd9:	5a                   	pop    edx
c0014fda:	59                   	pop    ecx
c0014fdb:	50                   	push   eax
c0014fdc:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0014fe1:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fe7:	e8 4a c1 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0014fec:	5e                   	pop    esi
c0014fed:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ff0:	e8 40 85 00 00       	call   c001d535 <Thr::getDriverNameFromAddress(unsigned long)>
c0014ff5:	83 c4 10             	add    esp,0x10
c0014ff8:	85 c0                	test   eax,eax
c0014ffa:	74 7d                	je     c0015079 <displayDebugInfo(regs*)+0x48b>
c0014ffc:	89 c6                	mov    esi,eax
c0014ffe:	50                   	push   eax
c0014fff:	50                   	push   eax
c0015000:	56                   	push   esi
c0015001:	68 8c ad 02 c0       	push   0xc002ad8c
c0015006:	e8 6d dd ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001500b:	5a                   	pop    edx
c001500c:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0015011:	59                   	pop    ecx
c0015012:	68 9a ad 02 c0       	push   0xc002ad9a
c0015017:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001501d:	e8 ee c0 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0015022:	5f                   	pop    edi
c0015023:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0015028:	5d                   	pop    ebp
c0015029:	56                   	push   esi
c001502a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015030:	e8 db c0 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c0015035:	58                   	pop    eax
c0015036:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001503b:	5a                   	pop    edx
c001503c:	68 a6 ad 02 c0       	push   0xc002ada6
c0015041:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015047:	e8 c4 c0 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001504c:	59                   	pop    ecx
c001504d:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0015052:	8b b8 26 19 00 00    	mov    edi,DWORD PTR [eax+0x1926]
c0015058:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001505b:	e8 0c 85 00 00       	call   c001d56c <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015060:	5b                   	pop    ebx
c0015061:	5d                   	pop    ebp
c0015062:	50                   	push   eax
c0015063:	57                   	push   edi
c0015064:	e8 cd c0 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c0015069:	58                   	pop    eax
c001506a:	5a                   	pop    edx
c001506b:	56                   	push   esi
c001506c:	68 b2 ad 02 c0       	push   0xc002adb2
c0015071:	e8 02 dd ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0015076:	83 c4 10             	add    esp,0x10
c0015079:	fa                   	cli    
c001507a:	f4                   	hlt    
c001507b:	eb fe                	jmp    c001507b <displayDebugInfo(regs*)+0x48d>

c001507d <x87EmulHandler(regs*, void*)>:
c001507d:	53                   	push   ebx
c001507e:	83 ec 14             	sub    esp,0x14
c0015081:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015085:	53                   	push   ebx
c0015086:	e8 83 a8 00 00       	call   c001f90e <Vm::x87Handler(regs*)>
c001508b:	83 c4 10             	add    esp,0x10
c001508e:	84 c0                	test   al,al
c0015090:	74 05                	je     c0015097 <x87EmulHandler(regs*, void*)+0x1a>
c0015092:	83 c4 08             	add    esp,0x8
c0015095:	5b                   	pop    ebx
c0015096:	c3                   	ret    
c0015097:	83 ec 0c             	sub    esp,0xc
c001509a:	68 c2 ad 02 c0       	push   0xc002adc2
c001509f:	e8 d4 dc ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00150a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150a7:	e8 42 fb ff ff       	call   c0014bee <displayDebugInfo(regs*)>

c00150ac <gpFault(regs*, void*)>:
c00150ac:	53                   	push   ebx
c00150ad:	83 ec 14             	sub    esp,0x14
c00150b0:	c7 05 b8 e3 02 c0 5d ec 01 c0 	mov    DWORD PTR ds:0xc002e3b8,0xc001ec5d
c00150ba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00150be:	53                   	push   ebx
c00150bf:	e8 99 9b 00 00       	call   c001ec5d <Vm::faultHandler(regs*)>
c00150c4:	83 c4 10             	add    esp,0x10
c00150c7:	84 c0                	test   al,al
c00150c9:	74 05                	je     c00150d0 <gpFault(regs*, void*)+0x24>
c00150cb:	83 c4 08             	add    esp,0x8
c00150ce:	5b                   	pop    ebx
c00150cf:	c3                   	ret    
c00150d0:	83 ec 0c             	sub    esp,0xc
c00150d3:	68 d8 ad 02 c0       	push   0xc002add8
c00150d8:	e8 9b dc ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00150dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150e0:	e8 09 fb ff ff       	call   c0014bee <displayDebugInfo(regs*)>

c00150e5 <pgFault(regs*, void*)>:
c00150e5:	83 ec 14             	sub    esp,0x14
c00150e8:	0f 20 d0             	mov    eax,cr2
c00150eb:	50                   	push   eax
c00150ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150f1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00150f4:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c00150fa:	e8 9f d8 ff ff       	call   c001299e <VAS::tryLoadBackOffDisk(unsigned long)>
c00150ff:	83 c4 10             	add    esp,0x10
c0015102:	84 c0                	test   al,al
c0015104:	74 04                	je     c001510a <pgFault(regs*, void*)+0x25>
c0015106:	83 c4 0c             	add    esp,0xc
c0015109:	c3                   	ret    
c001510a:	83 ec 0c             	sub    esp,0xc
c001510d:	68 f3 ad 02 c0       	push   0xc002adf3
c0015112:	e8 61 dc ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0015117:	58                   	pop    eax
c0015118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001511c:	e8 cd fa ff ff       	call   c0014bee <displayDebugInfo(regs*)>

c0015121 <otherISRHandler(regs*, void*)>:
c0015121:	53                   	push   ebx
c0015122:	83 ec 0c             	sub    esp,0xc
c0015125:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015129:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001512c:	50                   	push   eax
c001512d:	50                   	push   eax
c001512e:	68 05 ae 02 c0       	push   0xc002ae05
c0015133:	e8 40 dc ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0015138:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001513b:	e8 ae fa ff ff       	call   c0014bee <displayDebugInfo(regs*)>

c0015140 <opcodeFault(regs*, void*)>:
c0015140:	55                   	push   ebp
c0015141:	89 e5                	mov    ebp,esp
c0015143:	56                   	push   esi
c0015144:	53                   	push   ebx
c0015145:	83 ec 40             	sub    esp,0x40
c0015148:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c001514d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015153:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015159:	84 c0                	test   al,al
c001515b:	74 24                	je     c0015181 <opcodeFault(regs*, void*)+0x41>
c001515d:	83 ec 0c             	sub    esp,0xc
c0015160:	68 24 ae 02 c0       	push   0xc002ae24
c0015165:	e8 0e dc ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001516a:	83 c4 10             	add    esp,0x10
c001516d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015170:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015173:	8d 50 19             	lea    edx,[eax+0x19]
c0015176:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015179:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001517c:	e9 be 05 00 00       	jmp    c001573f <opcodeFault(regs*, void*)+0x5ff>
c0015181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015184:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015187:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001518a:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001518e:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015192:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015195:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015198:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001519b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001519e:	8a 00                	mov    al,BYTE PTR [eax]
c00151a0:	3c f0                	cmp    al,0xf0
c00151a2:	75 17                	jne    c00151bb <opcodeFault(regs*, void*)+0x7b>
c00151a4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00151a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151aa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151ad:	8d 50 01             	lea    edx,[eax+0x1]
c00151b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151b3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151b6:	e9 da 00 00 00       	jmp    c0015295 <opcodeFault(regs*, void*)+0x155>
c00151bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151be:	8a 00                	mov    al,BYTE PTR [eax]
c00151c0:	3c f2                	cmp    al,0xf2
c00151c2:	74 09                	je     c00151cd <opcodeFault(regs*, void*)+0x8d>
c00151c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151c7:	8a 00                	mov    al,BYTE PTR [eax]
c00151c9:	3c f3                	cmp    al,0xf3
c00151cb:	75 1b                	jne    c00151e8 <opcodeFault(regs*, void*)+0xa8>
c00151cd:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00151d1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00151d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151da:	8d 50 01             	lea    edx,[eax+0x1]
c00151dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151e3:	e9 ad 00 00 00       	jmp    c0015295 <opcodeFault(regs*, void*)+0x155>
c00151e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151eb:	8a 00                	mov    al,BYTE PTR [eax]
c00151ed:	3c 66                	cmp    al,0x66
c00151ef:	75 1f                	jne    c0015210 <opcodeFault(regs*, void*)+0xd0>
c00151f1:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00151f5:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00151f9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00151fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ff:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015202:	8d 50 01             	lea    edx,[eax+0x1]
c0015205:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015208:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001520b:	e9 85 00 00 00       	jmp    c0015295 <opcodeFault(regs*, void*)+0x155>
c0015210:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015213:	8a 00                	mov    al,BYTE PTR [eax]
c0015215:	3c 67                	cmp    al,0x67
c0015217:	75 18                	jne    c0015231 <opcodeFault(regs*, void*)+0xf1>
c0015219:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001521d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015220:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015223:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015226:	8d 50 01             	lea    edx,[eax+0x1]
c0015229:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001522c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001522f:	eb 64                	jmp    c0015295 <opcodeFault(regs*, void*)+0x155>
c0015231:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015234:	8a 00                	mov    al,BYTE PTR [eax]
c0015236:	3c 2e                	cmp    al,0x2e
c0015238:	74 09                	je     c0015243 <opcodeFault(regs*, void*)+0x103>
c001523a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001523d:	8a 00                	mov    al,BYTE PTR [eax]
c001523f:	3c 3e                	cmp    al,0x3e
c0015241:	75 18                	jne    c001525b <opcodeFault(regs*, void*)+0x11b>
c0015243:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015247:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001524a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001524d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015250:	8d 50 01             	lea    edx,[eax+0x1]
c0015253:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015256:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015259:	eb 3a                	jmp    c0015295 <opcodeFault(regs*, void*)+0x155>
c001525b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001525e:	8a 00                	mov    al,BYTE PTR [eax]
c0015260:	3c 36                	cmp    al,0x36
c0015262:	74 1b                	je     c001527f <opcodeFault(regs*, void*)+0x13f>
c0015264:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015267:	8a 00                	mov    al,BYTE PTR [eax]
c0015269:	3c 26                	cmp    al,0x26
c001526b:	74 12                	je     c001527f <opcodeFault(regs*, void*)+0x13f>
c001526d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015270:	8a 00                	mov    al,BYTE PTR [eax]
c0015272:	3c 64                	cmp    al,0x64
c0015274:	74 09                	je     c001527f <opcodeFault(regs*, void*)+0x13f>
c0015276:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015279:	8a 00                	mov    al,BYTE PTR [eax]
c001527b:	3c 65                	cmp    al,0x65
c001527d:	75 16                	jne    c0015295 <opcodeFault(regs*, void*)+0x155>
c001527f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015283:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015286:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015289:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001528c:	8d 50 01             	lea    edx,[eax+0x1]
c001528f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015292:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015295:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015298:	8a 00                	mov    al,BYTE PTR [eax]
c001529a:	3c 0f                	cmp    al,0xf
c001529c:	0f 85 ad 00 00 00    	jne    c001534f <opcodeFault(regs*, void*)+0x20f>
c00152a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152a5:	40                   	inc    eax
c00152a6:	8a 00                	mov    al,BYTE PTR [eax]
c00152a8:	3c c2                	cmp    al,0xc2
c00152aa:	74 0e                	je     c00152ba <opcodeFault(regs*, void*)+0x17a>
c00152ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152af:	40                   	inc    eax
c00152b0:	8a 00                	mov    al,BYTE PTR [eax]
c00152b2:	3c c3                	cmp    al,0xc3
c00152b4:	0f 85 95 00 00 00    	jne    c001534f <opcodeFault(regs*, void*)+0x20f>
c00152ba:	83 ec 0c             	sub    esp,0xc
c00152bd:	68 47 ae 02 c0       	push   0xc002ae47
c00152c2:	e8 b1 da ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00152c7:	83 c4 10             	add    esp,0x10
c00152ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152cd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152d0:	8d 50 01             	lea    edx,[eax+0x1]
c00152d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152d9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152df:	8a 00                	mov    al,BYTE PTR [eax]
c00152e1:	8d 50 fe             	lea    edx,[eax-0x2]
c00152e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e7:	88 10                	mov    BYTE PTR [eax],dl
c00152e9:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00152ec:	50                   	push   eax
c00152ed:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00152f0:	50                   	push   eax
c00152f1:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00152f4:	50                   	push   eax
c00152f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00152f8:	e8 1d 48 00 00       	call   c0019b1a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00152fd:	83 c4 10             	add    esp,0x10
c0015300:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015303:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015306:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015309:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001530c:	01 d0                	add    eax,edx
c001530e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015314:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015317:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001531a:	48                   	dec    eax
c001531b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001531e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015321:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015324:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015327:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001532a:	83 ec 04             	sub    esp,0x4
c001532d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015330:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015333:	50                   	push   eax
c0015334:	e8 7b ae fe ff       	call   c00001b4 <voodooXADD>
c0015339:	83 c4 10             	add    esp,0x10
c001533c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001533f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015342:	01 c2                	add    edx,eax
c0015344:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015347:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001534a:	e9 f0 03 00 00       	jmp    c001573f <opcodeFault(regs*, void*)+0x5ff>
c001534f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015352:	8a 00                	mov    al,BYTE PTR [eax]
c0015354:	3c 0f                	cmp    al,0xf
c0015356:	0f 85 8b 01 00 00    	jne    c00154e7 <opcodeFault(regs*, void*)+0x3a7>
c001535c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001535f:	40                   	inc    eax
c0015360:	8a 00                	mov    al,BYTE PTR [eax]
c0015362:	3c c7                	cmp    al,0xc7
c0015364:	0f 86 7d 01 00 00    	jbe    c00154e7 <opcodeFault(regs*, void*)+0x3a7>
c001536a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001536d:	40                   	inc    eax
c001536e:	8a 00                	mov    al,BYTE PTR [eax]
c0015370:	3c cf                	cmp    al,0xcf
c0015372:	0f 87 6f 01 00 00    	ja     c00154e7 <opcodeFault(regs*, void*)+0x3a7>
c0015378:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001537b:	40                   	inc    eax
c001537c:	8a 00                	mov    al,BYTE PTR [eax]
c001537e:	83 c0 38             	add    eax,0x38
c0015381:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015384:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015388:	75 0b                	jne    c0015395 <opcodeFault(regs*, void*)+0x255>
c001538a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015390:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015393:	eb 75                	jmp    c001540a <opcodeFault(regs*, void*)+0x2ca>
c0015395:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015399:	75 0b                	jne    c00153a6 <opcodeFault(regs*, void*)+0x266>
c001539b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001539e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00153a1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00153a4:	eb 64                	jmp    c001540a <opcodeFault(regs*, void*)+0x2ca>
c00153a6:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00153aa:	75 0b                	jne    c00153b7 <opcodeFault(regs*, void*)+0x277>
c00153ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153af:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00153b2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00153b5:	eb 53                	jmp    c001540a <opcodeFault(regs*, void*)+0x2ca>
c00153b7:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00153bb:	75 0b                	jne    c00153c8 <opcodeFault(regs*, void*)+0x288>
c00153bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00153c3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00153c6:	eb 42                	jmp    c001540a <opcodeFault(regs*, void*)+0x2ca>
c00153c8:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00153cc:	75 0b                	jne    c00153d9 <opcodeFault(regs*, void*)+0x299>
c00153ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d1:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00153d4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00153d7:	eb 31                	jmp    c001540a <opcodeFault(regs*, void*)+0x2ca>
c00153d9:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00153dd:	75 0b                	jne    c00153ea <opcodeFault(regs*, void*)+0x2aa>
c00153df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00153e5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00153e8:	eb 20                	jmp    c001540a <opcodeFault(regs*, void*)+0x2ca>
c00153ea:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00153ee:	75 0b                	jne    c00153fb <opcodeFault(regs*, void*)+0x2bb>
c00153f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00153f6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00153f9:	eb 0f                	jmp    c001540a <opcodeFault(regs*, void*)+0x2ca>
c00153fb:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00153ff:	75 09                	jne    c001540a <opcodeFault(regs*, void*)+0x2ca>
c0015401:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015404:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015407:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001540a:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001540e:	74 10                	je     c0015420 <opcodeFault(regs*, void*)+0x2e0>
c0015410:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015417:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001541e:	eb 2d                	jmp    c001544d <opcodeFault(regs*, void*)+0x30d>
c0015420:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015423:	c1 e0 18             	shl    eax,0x18
c0015426:	89 c2                	mov    edx,eax
c0015428:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001542b:	c1 e0 08             	shl    eax,0x8
c001542e:	25 00 00 ff 00       	and    eax,0xff0000
c0015433:	09 c2                	or     edx,eax
c0015435:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015438:	c1 e8 08             	shr    eax,0x8
c001543b:	25 00 ff 00 00       	and    eax,0xff00
c0015440:	09 c2                	or     edx,eax
c0015442:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015445:	c1 e8 18             	shr    eax,0x18
c0015448:	09 d0                	or     eax,edx
c001544a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001544d:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015451:	75 0b                	jne    c001545e <opcodeFault(regs*, void*)+0x31e>
c0015453:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015456:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015459:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001545c:	eb 75                	jmp    c00154d3 <opcodeFault(regs*, void*)+0x393>
c001545e:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015462:	75 0b                	jne    c001546f <opcodeFault(regs*, void*)+0x32f>
c0015464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015467:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001546a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001546d:	eb 64                	jmp    c00154d3 <opcodeFault(regs*, void*)+0x393>
c001546f:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015473:	75 0b                	jne    c0015480 <opcodeFault(regs*, void*)+0x340>
c0015475:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015478:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001547b:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001547e:	eb 53                	jmp    c00154d3 <opcodeFault(regs*, void*)+0x393>
c0015480:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015484:	75 0b                	jne    c0015491 <opcodeFault(regs*, void*)+0x351>
c0015486:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015489:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001548c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001548f:	eb 42                	jmp    c00154d3 <opcodeFault(regs*, void*)+0x393>
c0015491:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015495:	75 0b                	jne    c00154a2 <opcodeFault(regs*, void*)+0x362>
c0015497:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001549a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001549d:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00154a0:	eb 31                	jmp    c00154d3 <opcodeFault(regs*, void*)+0x393>
c00154a2:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00154a6:	75 0b                	jne    c00154b3 <opcodeFault(regs*, void*)+0x373>
c00154a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ab:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154ae:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00154b1:	eb 20                	jmp    c00154d3 <opcodeFault(regs*, void*)+0x393>
c00154b3:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00154b7:	75 0b                	jne    c00154c4 <opcodeFault(regs*, void*)+0x384>
c00154b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154bc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154bf:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00154c2:	eb 0f                	jmp    c00154d3 <opcodeFault(regs*, void*)+0x393>
c00154c4:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00154c8:	75 09                	jne    c00154d3 <opcodeFault(regs*, void*)+0x393>
c00154ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154cd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154d0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00154d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154d9:	8d 50 02             	lea    edx,[eax+0x2]
c00154dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154df:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154e2:	e9 58 02 00 00       	jmp    c001573f <opcodeFault(regs*, void*)+0x5ff>
c00154e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ea:	8a 00                	mov    al,BYTE PTR [eax]
c00154ec:	3c 0f                	cmp    al,0xf
c00154ee:	0f 85 76 01 00 00    	jne    c001566a <opcodeFault(regs*, void*)+0x52a>
c00154f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f7:	40                   	inc    eax
c00154f8:	8a 00                	mov    al,BYTE PTR [eax]
c00154fa:	3c c7                	cmp    al,0xc7
c00154fc:	0f 85 68 01 00 00    	jne    c001566a <opcodeFault(regs*, void*)+0x52a>
c0015502:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015508:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001550b:	8d 50 01             	lea    edx,[eax+0x1]
c001550e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015511:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015514:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015517:	50                   	push   eax
c0015518:	8d 45 bb             	lea    eax,[ebp-0x45]
c001551b:	50                   	push   eax
c001551c:	8d 45 bc             	lea    eax,[ebp-0x44]
c001551f:	50                   	push   eax
c0015520:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015523:	e8 f2 45 00 00       	call   c0019b1a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015528:	83 c4 10             	add    esp,0x10
c001552b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001552e:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015531:	83 f0 01             	xor    eax,0x1
c0015534:	84 c0                	test   al,al
c0015536:	0f 84 2e 01 00 00    	je     c001566a <opcodeFault(regs*, void*)+0x52a>
c001553c:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001553f:	3c 01                	cmp    al,0x1
c0015541:	0f 85 23 01 00 00    	jne    c001566a <opcodeFault(regs*, void*)+0x52a>
c0015547:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001554a:	83 f0 01             	xor    eax,0x1
c001554d:	84 c0                	test   al,al
c001554f:	0f 84 15 01 00 00    	je     c001566a <opcodeFault(regs*, void*)+0x52a>
c0015555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015558:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001555b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001555e:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015565:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015568:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001556b:	89 c2                	mov    edx,eax
c001556d:	b8 00 00 00 00       	mov    eax,0x0
c0015572:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015575:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015578:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001557b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001557e:	ba 00 00 00 00       	mov    edx,0x0
c0015583:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015586:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001558c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001558f:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015592:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015599:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001559c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001559f:	89 c2                	mov    edx,eax
c00155a1:	b8 00 00 00 00       	mov    eax,0x0
c00155a6:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00155a9:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00155ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155af:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00155b2:	ba 00 00 00 00       	mov    edx,0x0
c00155b7:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00155ba:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00155bd:	e8 8b 86 00 00       	call   c001dc4d <lockScheduler()>
c00155c2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00155c5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00155c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ca:	89 c1                	mov    ecx,eax
c00155cc:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00155cf:	89 cb                	mov    ebx,ecx
c00155d1:	89 d0                	mov    eax,edx
c00155d3:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00155d6:	89 c6                	mov    esi,eax
c00155d8:	89 f0                	mov    eax,esi
c00155da:	09 d8                	or     eax,ebx
c00155dc:	85 c0                	test   eax,eax
c00155de:	75 21                	jne    c0015601 <opcodeFault(regs*, void*)+0x4c1>
c00155e0:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00155e3:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00155e6:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00155e9:	89 01                	mov    DWORD PTR [ecx],eax
c00155eb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00155ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00155f4:	83 c8 40             	or     eax,0x40
c00155f7:	89 c2                	mov    edx,eax
c00155f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155fc:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00155ff:	eb 3e                	jmp    c001563f <opcodeFault(regs*, void*)+0x4ff>
c0015601:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015604:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015607:	8b 00                	mov    eax,DWORD PTR [eax]
c0015609:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001560c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001560f:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015612:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015615:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015618:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001561b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001561e:	89 d0                	mov    eax,edx
c0015620:	31 d2                	xor    edx,edx
c0015622:	89 c3                	mov    ebx,eax
c0015624:	89 d6                	mov    esi,edx
c0015626:	89 da                	mov    edx,ebx
c0015628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562b:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001562e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015631:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015634:	83 e0 bf             	and    eax,0xffffffbf
c0015637:	89 c2                	mov    edx,eax
c0015639:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001563f:	e8 0b 86 00 00       	call   c001dc4f <unlockScheduler()>
c0015644:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015647:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001564a:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001564d:	01 c2                	add    edx,eax
c001564f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015652:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015655:	83 ec 0c             	sub    esp,0xc
c0015658:	68 56 ae 02 c0       	push   0xc002ae56
c001565d:	e8 16 d7 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0015662:	83 c4 10             	add    esp,0x10
c0015665:	e9 d5 00 00 00       	jmp    c001573f <opcodeFault(regs*, void*)+0x5ff>
c001566a:	83 ec 0c             	sub    esp,0xc
c001566d:	68 69 ae 02 c0       	push   0xc002ae69
c0015672:	e8 01 d7 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0015677:	83 c4 10             	add    esp,0x10
c001567a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001567d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015680:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015683:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015686:	c1 e0 04             	shl    eax,0x4
c0015689:	01 d0                	add    eax,edx
c001568b:	83 c0 03             	add    eax,0x3
c001568e:	8a 00                	mov    al,BYTE PTR [eax]
c0015690:	0f b6 d8             	movzx  ebx,al
c0015693:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015696:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015699:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001569c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001569f:	c1 e0 04             	shl    eax,0x4
c00156a2:	01 d0                	add    eax,edx
c00156a4:	83 c0 02             	add    eax,0x2
c00156a7:	8a 00                	mov    al,BYTE PTR [eax]
c00156a9:	0f b6 c8             	movzx  ecx,al
c00156ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156af:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00156b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00156b8:	c1 e0 04             	shl    eax,0x4
c00156bb:	01 d0                	add    eax,edx
c00156bd:	40                   	inc    eax
c00156be:	8a 00                	mov    al,BYTE PTR [eax]
c00156c0:	0f b6 d0             	movzx  edx,al
c00156c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c6:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00156c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156cc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00156cf:	c1 e0 04             	shl    eax,0x4
c00156d2:	01 f0                	add    eax,esi
c00156d4:	8a 00                	mov    al,BYTE PTR [eax]
c00156d6:	0f b6 c0             	movzx  eax,al
c00156d9:	83 ec 0c             	sub    esp,0xc
c00156dc:	53                   	push   ebx
c00156dd:	51                   	push   ecx
c00156de:	52                   	push   edx
c00156df:	50                   	push   eax
c00156e0:	68 7c ae 02 c0       	push   0xc002ae7c
c00156e5:	e8 8e d6 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00156ea:	83 c4 20             	add    esp,0x20
c00156ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156f3:	83 c0 03             	add    eax,0x3
c00156f6:	8a 00                	mov    al,BYTE PTR [eax]
c00156f8:	0f b6 d8             	movzx  ebx,al
c00156fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156fe:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015701:	83 c0 02             	add    eax,0x2
c0015704:	8a 00                	mov    al,BYTE PTR [eax]
c0015706:	0f b6 c8             	movzx  ecx,al
c0015709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001570f:	40                   	inc    eax
c0015710:	8a 00                	mov    al,BYTE PTR [eax]
c0015712:	0f b6 d0             	movzx  edx,al
c0015715:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015718:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001571b:	8a 00                	mov    al,BYTE PTR [eax]
c001571d:	0f b6 c0             	movzx  eax,al
c0015720:	83 ec 0c             	sub    esp,0xc
c0015723:	53                   	push   ebx
c0015724:	51                   	push   ecx
c0015725:	52                   	push   edx
c0015726:	50                   	push   eax
c0015727:	68 a4 ae 02 c0       	push   0xc002aea4
c001572c:	e8 47 d6 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0015731:	83 c4 20             	add    esp,0x20
c0015734:	83 ec 0c             	sub    esp,0xc
c0015737:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001573a:	e8 af f4 ff ff       	call   c0014bee <displayDebugInfo(regs*)>
c001573f:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015742:	5b                   	pop    ebx
c0015743:	5e                   	pop    esi
c0015744:	5d                   	pop    ebp
c0015745:	c3                   	ret    

c0015746 <displayProgramFault(char const*)>:
c0015746:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001574b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001574e:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c0015754:	85 c0                	test   eax,eax
c0015756:	74 15                	je     c001576d <displayProgramFault(char const*)+0x27>
c0015758:	83 ec 0c             	sub    esp,0xc
c001575b:	6a 04                	push   0x4
c001575d:	6a 0f                	push   0xf
c001575f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015763:	50                   	push   eax
c0015764:	e8 69 b6 ff ff       	call   c0010dd2 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015769:	83 c4 1c             	add    esp,0x1c
c001576c:	c3                   	ret    
c001576d:	c3                   	ret    

c001576e <setupInterruptController()>:
c001576e:	55                   	push   ebp
c001576f:	89 e5                	mov    ebp,esp
c0015771:	53                   	push   ebx
c0015772:	83 ec 24             	sub    esp,0x24
c0015775:	b8 00 00 00 00       	mov    eax,0x0
c001577a:	85 c0                	test   eax,eax
c001577c:	0f 95 c0             	setne  al
c001577f:	84 c0                	test   al,al
c0015781:	74 5b                	je     c00157de <setupInterruptController()+0x70>
c0015783:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c001578a:	83 ec 0c             	sub    esp,0xc
c001578d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015790:	e8 ae a0 ff ff       	call   c000f843 <malloc>
c0015795:	83 c4 10             	add    esp,0x10
c0015798:	89 c3                	mov    ebx,eax
c001579a:	83 ec 0c             	sub    esp,0xc
c001579d:	53                   	push   ebx
c001579e:	e8 2f 00 01 00       	call   c00257d2 <APIC::APIC()>
c00157a3:	83 c4 10             	add    esp,0x10
c00157a6:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00157a9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00157ac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00157af:	8b 00                	mov    eax,DWORD PTR [eax]
c00157b1:	83 c0 08             	add    eax,0x8
c00157b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00157b6:	6a 00                	push   0x0
c00157b8:	6a 00                	push   0x0
c00157ba:	6a 00                	push   0x0
c00157bc:	52                   	push   edx
c00157bd:	ff d0                	call   eax
c00157bf:	83 c4 10             	add    esp,0x10
c00157c2:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c00157c7:	83 ec 08             	sub    esp,0x8
c00157ca:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00157cd:	50                   	push   eax
c00157ce:	e8 cb e9 ff ff       	call   c001419e <Device::addChild(Device*)>
c00157d3:	83 c4 10             	add    esp,0x10
c00157d6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00157d9:	e9 88 03 00 00       	jmp    c0015b66 <setupInterruptController()+0x3f8>
c00157de:	a0 a0 0b 03 c0       	mov    al,ds:0xc0030ba0
c00157e3:	0f b6 c0             	movzx  eax,al
c00157e6:	83 ec 08             	sub    esp,0x8
c00157e9:	50                   	push   eax
c00157ea:	68 c9 ae 02 c0       	push   0xc002aec9
c00157ef:	e8 84 d5 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00157f4:	83 c4 10             	add    esp,0x10
c00157f7:	a0 a0 0b 03 c0       	mov    al,ds:0xc0030ba0
c00157fc:	84 c0                	test   al,al
c00157fe:	75 14                	jne    c0015814 <setupInterruptController()+0xa6>
c0015800:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0015805:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001580b:	83 e2 fe             	and    edx,0xfffffffe
c001580e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015814:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0015819:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001581f:	83 e0 01             	and    eax,0x1
c0015822:	84 c0                	test   al,al
c0015824:	0f 95 c0             	setne  al
c0015827:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001582a:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015831:	83 ec 0c             	sub    esp,0xc
c0015834:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015837:	e8 07 a0 ff ff       	call   c000f843 <malloc>
c001583c:	83 c4 10             	add    esp,0x10
c001583f:	89 c3                	mov    ebx,eax
c0015841:	83 ec 0c             	sub    esp,0xc
c0015844:	53                   	push   ebx
c0015845:	e8 e0 04 01 00       	call   c0025d2a <PIC::PIC()>
c001584a:	83 c4 10             	add    esp,0x10
c001584d:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015850:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015853:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015856:	8b 00                	mov    eax,DWORD PTR [eax]
c0015858:	83 c0 08             	add    eax,0x8
c001585b:	8b 00                	mov    eax,DWORD PTR [eax]
c001585d:	6a 00                	push   0x0
c001585f:	6a 00                	push   0x0
c0015861:	6a 00                	push   0x0
c0015863:	52                   	push   edx
c0015864:	ff d0                	call   eax
c0015866:	83 c4 10             	add    esp,0x10
c0015869:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001586d:	74 73                	je     c00158e2 <setupInterruptController()+0x174>
c001586f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015872:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015875:	8b 00                	mov    eax,DWORD PTR [eax]
c0015877:	83 c0 0c             	add    eax,0xc
c001587a:	8b 00                	mov    eax,DWORD PTR [eax]
c001587c:	6a 00                	push   0x0
c001587e:	6a 00                	push   0x0
c0015880:	6a 00                	push   0x0
c0015882:	52                   	push   edx
c0015883:	ff d0                	call   eax
c0015885:	83 c4 10             	add    esp,0x10
c0015888:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001588c:	74 15                	je     c00158a3 <setupInterruptController()+0x135>
c001588e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015891:	8b 00                	mov    eax,DWORD PTR [eax]
c0015893:	83 c0 04             	add    eax,0x4
c0015896:	8b 00                	mov    eax,DWORD PTR [eax]
c0015898:	83 ec 0c             	sub    esp,0xc
c001589b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001589e:	ff d0                	call   eax
c00158a0:	83 c4 10             	add    esp,0x10
c00158a3:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00158aa:	83 ec 0c             	sub    esp,0xc
c00158ad:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00158b0:	e8 8e 9f ff ff       	call   c000f843 <malloc>
c00158b5:	83 c4 10             	add    esp,0x10
c00158b8:	89 c3                	mov    ebx,eax
c00158ba:	83 ec 0c             	sub    esp,0xc
c00158bd:	53                   	push   ebx
c00158be:	e8 0f ff 00 00       	call   c00257d2 <APIC::APIC()>
c00158c3:	83 c4 10             	add    esp,0x10
c00158c6:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00158c9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00158cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00158d1:	83 c0 08             	add    eax,0x8
c00158d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00158d6:	6a 00                	push   0x0
c00158d8:	6a 00                	push   0x0
c00158da:	6a 00                	push   0x0
c00158dc:	52                   	push   edx
c00158dd:	ff d0                	call   eax
c00158df:	83 c4 10             	add    esp,0x10
c00158e2:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c00158e7:	83 ec 08             	sub    esp,0x8
c00158ea:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158ed:	50                   	push   eax
c00158ee:	e8 ab e8 ff ff       	call   c001419e <Device::addChild(Device*)>
c00158f3:	83 c4 10             	add    esp,0x10
c00158f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00158fb:	83 c0 24             	add    eax,0x24
c00158fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015900:	6a 00                	push   0x0
c0015902:	68 21 51 01 c0       	push   0xc0015121
c0015907:	6a 00                	push   0x0
c0015909:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001590c:	ff d0                	call   eax
c001590e:	83 c4 10             	add    esp,0x10
c0015911:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015914:	8b 00                	mov    eax,DWORD PTR [eax]
c0015916:	83 c0 24             	add    eax,0x24
c0015919:	8b 00                	mov    eax,DWORD PTR [eax]
c001591b:	6a 00                	push   0x0
c001591d:	68 21 51 01 c0       	push   0xc0015121
c0015922:	6a 01                	push   0x1
c0015924:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015927:	ff d0                	call   eax
c0015929:	83 c4 10             	add    esp,0x10
c001592c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001592f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015931:	83 c0 24             	add    eax,0x24
c0015934:	8b 00                	mov    eax,DWORD PTR [eax]
c0015936:	6a 00                	push   0x0
c0015938:	68 4b 4a 01 c0       	push   0xc0014a4b
c001593d:	6a 02                	push   0x2
c001593f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015942:	ff d0                	call   eax
c0015944:	83 c4 10             	add    esp,0x10
c0015947:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001594a:	8b 00                	mov    eax,DWORD PTR [eax]
c001594c:	83 c0 24             	add    eax,0x24
c001594f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015951:	6a 00                	push   0x0
c0015953:	68 21 51 01 c0       	push   0xc0015121
c0015958:	6a 03                	push   0x3
c001595a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001595d:	ff d0                	call   eax
c001595f:	83 c4 10             	add    esp,0x10
c0015962:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015965:	8b 00                	mov    eax,DWORD PTR [eax]
c0015967:	83 c0 24             	add    eax,0x24
c001596a:	8b 00                	mov    eax,DWORD PTR [eax]
c001596c:	6a 00                	push   0x0
c001596e:	68 21 51 01 c0       	push   0xc0015121
c0015973:	6a 04                	push   0x4
c0015975:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015978:	ff d0                	call   eax
c001597a:	83 c4 10             	add    esp,0x10
c001597d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015980:	8b 00                	mov    eax,DWORD PTR [eax]
c0015982:	83 c0 24             	add    eax,0x24
c0015985:	8b 00                	mov    eax,DWORD PTR [eax]
c0015987:	6a 00                	push   0x0
c0015989:	68 21 51 01 c0       	push   0xc0015121
c001598e:	6a 05                	push   0x5
c0015990:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015993:	ff d0                	call   eax
c0015995:	83 c4 10             	add    esp,0x10
c0015998:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001599b:	8b 00                	mov    eax,DWORD PTR [eax]
c001599d:	83 c0 24             	add    eax,0x24
c00159a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00159a2:	6a 00                	push   0x0
c00159a4:	68 40 51 01 c0       	push   0xc0015140
c00159a9:	6a 06                	push   0x6
c00159ab:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159ae:	ff d0                	call   eax
c00159b0:	83 c4 10             	add    esp,0x10
c00159b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00159b8:	83 c0 24             	add    eax,0x24
c00159bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00159bd:	6a 00                	push   0x0
c00159bf:	68 7d 50 01 c0       	push   0xc001507d
c00159c4:	6a 07                	push   0x7
c00159c6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159c9:	ff d0                	call   eax
c00159cb:	83 c4 10             	add    esp,0x10
c00159ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00159d3:	83 c0 24             	add    eax,0x24
c00159d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00159d8:	6a 00                	push   0x0
c00159da:	68 66 48 01 c0       	push   0xc0014866
c00159df:	6a 08                	push   0x8
c00159e1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159e4:	ff d0                	call   eax
c00159e6:	83 c4 10             	add    esp,0x10
c00159e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00159ee:	83 c0 24             	add    eax,0x24
c00159f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f3:	6a 00                	push   0x0
c00159f5:	68 21 51 01 c0       	push   0xc0015121
c00159fa:	6a 09                	push   0x9
c00159fc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159ff:	ff d0                	call   eax
c0015a01:	83 c4 10             	add    esp,0x10
c0015a04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a07:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a09:	83 c0 24             	add    eax,0x24
c0015a0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a0e:	6a 00                	push   0x0
c0015a10:	68 21 51 01 c0       	push   0xc0015121
c0015a15:	6a 0a                	push   0xa
c0015a17:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a1a:	ff d0                	call   eax
c0015a1c:	83 c4 10             	add    esp,0x10
c0015a1f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a22:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a24:	83 c0 24             	add    eax,0x24
c0015a27:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a29:	6a 00                	push   0x0
c0015a2b:	68 21 51 01 c0       	push   0xc0015121
c0015a30:	6a 0b                	push   0xb
c0015a32:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a35:	ff d0                	call   eax
c0015a37:	83 c4 10             	add    esp,0x10
c0015a3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a3f:	83 c0 24             	add    eax,0x24
c0015a42:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a44:	6a 00                	push   0x0
c0015a46:	68 21 51 01 c0       	push   0xc0015121
c0015a4b:	6a 0c                	push   0xc
c0015a4d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a50:	ff d0                	call   eax
c0015a52:	83 c4 10             	add    esp,0x10
c0015a55:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a58:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a5a:	83 c0 24             	add    eax,0x24
c0015a5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a5f:	6a 00                	push   0x0
c0015a61:	68 ac 50 01 c0       	push   0xc00150ac
c0015a66:	6a 0d                	push   0xd
c0015a68:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a6b:	ff d0                	call   eax
c0015a6d:	83 c4 10             	add    esp,0x10
c0015a70:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a73:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a75:	83 c0 24             	add    eax,0x24
c0015a78:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7a:	6a 00                	push   0x0
c0015a7c:	68 e5 50 01 c0       	push   0xc00150e5
c0015a81:	6a 0e                	push   0xe
c0015a83:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a86:	ff d0                	call   eax
c0015a88:	83 c4 10             	add    esp,0x10
c0015a8b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a90:	83 c0 24             	add    eax,0x24
c0015a93:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a95:	6a 00                	push   0x0
c0015a97:	68 21 51 01 c0       	push   0xc0015121
c0015a9c:	6a 0f                	push   0xf
c0015a9e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aa1:	ff d0                	call   eax
c0015aa3:	83 c4 10             	add    esp,0x10
c0015aa6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aab:	83 c0 24             	add    eax,0x24
c0015aae:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab0:	6a 00                	push   0x0
c0015ab2:	68 21 51 01 c0       	push   0xc0015121
c0015ab7:	6a 10                	push   0x10
c0015ab9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015abc:	ff d0                	call   eax
c0015abe:	83 c4 10             	add    esp,0x10
c0015ac1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac6:	83 c0 24             	add    eax,0x24
c0015ac9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015acb:	6a 00                	push   0x0
c0015acd:	68 21 51 01 c0       	push   0xc0015121
c0015ad2:	6a 11                	push   0x11
c0015ad4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ad7:	ff d0                	call   eax
c0015ad9:	83 c4 10             	add    esp,0x10
c0015adc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015adf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae1:	83 c0 24             	add    eax,0x24
c0015ae4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae6:	6a 00                	push   0x0
c0015ae8:	68 21 51 01 c0       	push   0xc0015121
c0015aed:	6a 12                	push   0x12
c0015aef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015af2:	ff d0                	call   eax
c0015af4:	83 c4 10             	add    esp,0x10
c0015af7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015afa:	8b 00                	mov    eax,DWORD PTR [eax]
c0015afc:	83 c0 24             	add    eax,0x24
c0015aff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b01:	6a 00                	push   0x0
c0015b03:	68 21 51 01 c0       	push   0xc0015121
c0015b08:	6a 13                	push   0x13
c0015b0a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b0d:	ff d0                	call   eax
c0015b0f:	83 c4 10             	add    esp,0x10
c0015b12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b15:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b17:	83 c0 24             	add    eax,0x24
c0015b1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1c:	6a 00                	push   0x0
c0015b1e:	68 21 51 01 c0       	push   0xc0015121
c0015b23:	6a 14                	push   0x14
c0015b25:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b28:	ff d0                	call   eax
c0015b2a:	83 c4 10             	add    esp,0x10
c0015b2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b30:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b32:	83 c0 24             	add    eax,0x24
c0015b35:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b37:	6a 00                	push   0x0
c0015b39:	68 21 51 01 c0       	push   0xc0015121
c0015b3e:	6a 1e                	push   0x1e
c0015b40:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b43:	ff d0                	call   eax
c0015b45:	83 c4 10             	add    esp,0x10
c0015b48:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4d:	83 c0 24             	add    eax,0x24
c0015b50:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b52:	6a 00                	push   0x0
c0015b54:	68 dd c5 01 c0       	push   0xc001c5dd
c0015b59:	6a 60                	push   0x60
c0015b5b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b5e:	ff d0                	call   eax
c0015b60:	83 c4 10             	add    esp,0x10
c0015b63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b66:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015b69:	c9                   	leave  
c0015b6a:	c3                   	ret    
c0015b6b:	90                   	nop

c0015b6c <InterruptController::convertLegacyIRQNumber(int)>:
c0015b6c:	55                   	push   ebp
c0015b6d:	89 e5                	mov    ebp,esp
c0015b6f:	83 ec 08             	sub    esp,0x8
c0015b72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b75:	83 ec 0c             	sub    esp,0xc
c0015b78:	50                   	push   eax
c0015b79:	e8 0c e9 ff ff       	call   c001448a <Device::getName()>
c0015b7e:	83 c4 10             	add    esp,0x10
c0015b81:	8a 00                	mov    al,BYTE PTR [eax]
c0015b83:	3c 41                	cmp    al,0x41
c0015b85:	0f 94 c0             	sete   al
c0015b88:	84 c0                	test   al,al
c0015b8a:	74 28                	je     c0015bb4 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015b8c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015b90:	7f 12                	jg     c0015ba4 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015b92:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015b95:	05 60 d4 02 c0       	add    eax,0xc002d460
c0015b9a:	8a 00                	mov    al,BYTE PTR [eax]
c0015b9c:	0f b6 c0             	movzx  eax,al
c0015b9f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015ba2:	eb 10                	jmp    c0015bb4 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015ba4:	83 ec 0c             	sub    esp,0xc
c0015ba7:	68 c0 ab 02 c0       	push   0xc002abc0
c0015bac:	e8 a2 48 00 00       	call   c001a453 <Krnl::panic(char const*)>
c0015bb1:	83 c4 10             	add    esp,0x10
c0015bb4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015bb7:	c9                   	leave  
c0015bb8:	c3                   	ret    
c0015bb9:	90                   	nop

c0015bba <startGUI(void*)>:
c0015bba:	55                   	push   ebp
c0015bbb:	89 e5                	mov    ebp,esp
c0015bbd:	53                   	push   ebx
c0015bbe:	83 ec 04             	sub    esp,0x4
c0015bc1:	e8 89 80 00 00       	call   c001dc4f <unlockScheduler()>
c0015bc6:	8b 1d 08 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e208
c0015bcc:	83 ec 08             	sub    esp,0x8
c0015bcf:	6a 01                	push   0x1
c0015bd1:	68 30 af 02 c0       	push   0xc002af30
c0015bd6:	e8 ab 79 00 00       	call   c001d586 <Thr::loadDLL(char const*, bool)>
c0015bdb:	83 c4 10             	add    esp,0x10
c0015bde:	83 ec 08             	sub    esp,0x8
c0015be1:	53                   	push   ebx
c0015be2:	50                   	push   eax
c0015be3:	e8 ed 7b 00 00       	call   c001d7d5 <Thr::executeDLL(unsigned long, void*)>
c0015be8:	83 c4 10             	add    esp,0x10
c0015beb:	8b 1d 08 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e208
c0015bf1:	83 ec 08             	sub    esp,0x8
c0015bf4:	6a 01                	push   0x1
c0015bf6:	68 4a af 02 c0       	push   0xc002af4a
c0015bfb:	e8 86 79 00 00       	call   c001d586 <Thr::loadDLL(char const*, bool)>
c0015c00:	83 c4 10             	add    esp,0x10
c0015c03:	83 ec 08             	sub    esp,0x8
c0015c06:	53                   	push   ebx
c0015c07:	50                   	push   eax
c0015c08:	e8 c8 7b 00 00       	call   c001d7d5 <Thr::executeDLL(unsigned long, void*)>
c0015c0d:	83 c4 10             	add    esp,0x10
c0015c10:	90                   	nop
c0015c11:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015c14:	c9                   	leave  
c0015c15:	c3                   	ret    

c0015c16 <startGUIVESA(void*)>:
c0015c16:	55                   	push   ebp
c0015c17:	89 e5                	mov    ebp,esp
c0015c19:	53                   	push   ebx
c0015c1a:	83 ec 04             	sub    esp,0x4
c0015c1d:	e8 2d 80 00 00       	call   c001dc4f <unlockScheduler()>
c0015c22:	8b 1d 08 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e208
c0015c28:	83 ec 08             	sub    esp,0x8
c0015c2b:	6a 01                	push   0x1
c0015c2d:	68 64 af 02 c0       	push   0xc002af64
c0015c32:	e8 4f 79 00 00       	call   c001d586 <Thr::loadDLL(char const*, bool)>
c0015c37:	83 c4 10             	add    esp,0x10
c0015c3a:	83 ec 08             	sub    esp,0x8
c0015c3d:	53                   	push   ebx
c0015c3e:	50                   	push   eax
c0015c3f:	e8 91 7b 00 00       	call   c001d7d5 <Thr::executeDLL(unsigned long, void*)>
c0015c44:	83 c4 10             	add    esp,0x10
c0015c47:	8b 1d 08 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e208
c0015c4d:	83 ec 08             	sub    esp,0x8
c0015c50:	6a 01                	push   0x1
c0015c52:	68 4a af 02 c0       	push   0xc002af4a
c0015c57:	e8 2a 79 00 00       	call   c001d586 <Thr::loadDLL(char const*, bool)>
c0015c5c:	83 c4 10             	add    esp,0x10
c0015c5f:	83 ec 08             	sub    esp,0x8
c0015c62:	53                   	push   ebx
c0015c63:	50                   	push   eax
c0015c64:	e8 6c 7b 00 00       	call   c001d7d5 <Thr::executeDLL(unsigned long, void*)>
c0015c69:	83 c4 10             	add    esp,0x10
c0015c6c:	90                   	nop
c0015c6d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015c70:	c9                   	leave  
c0015c71:	c3                   	ret    

c0015c72 <sendKeyToTerminal(unsigned char)>:
c0015c72:	55                   	push   ebp
c0015c73:	89 e5                	mov    ebp,esp
c0015c75:	83 ec 28             	sub    esp,0x28
c0015c78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c7b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015c7e:	a1 e4 e2 02 c0       	mov    eax,ds:0xc002e2e4
c0015c83:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015c87:	83 ec 08             	sub    esp,0x8
c0015c8a:	52                   	push   edx
c0015c8b:	50                   	push   eax
c0015c8c:	e8 7d b6 ff ff       	call   c001130e <VgaText::receiveKey(unsigned char)>
c0015c91:	83 c4 10             	add    esp,0x10
c0015c94:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015c98:	75 41                	jne    c0015cdb <sendKeyToTerminal(unsigned char)+0x69>
c0015c9a:	e8 d5 7f 00 00       	call   c001dc74 <lockStuff()>
c0015c9f:	a1 c0 e3 02 c0       	mov    eax,ds:0xc002e3c0
c0015ca4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015ca7:	c7 05 c0 e3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e3c0,0x0
c0015cb1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015cb5:	74 1f                	je     c0015cd6 <sendKeyToTerminal(unsigned char)+0x64>
c0015cb7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cba:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015cbd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015cc0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015cc3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015cc6:	83 ec 0c             	sub    esp,0xc
c0015cc9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015ccc:	e8 93 85 00 00       	call   c001e264 <unblockTask(ThreadControlBlock*)>
c0015cd1:	83 c4 10             	add    esp,0x10
c0015cd4:	eb db                	jmp    c0015cb1 <sendKeyToTerminal(unsigned char)+0x3f>
c0015cd6:	e8 32 83 00 00       	call   c001e00d <unlockStuff()>
c0015cdb:	90                   	nop
c0015cdc:	c9                   	leave  
c0015cdd:	c3                   	ret    

c0015cde <sendKeyboardToken(KeyboardToken)>:
c0015cde:	55                   	push   ebp
c0015cdf:	89 e5                	mov    ebp,esp
c0015ce1:	83 ec 18             	sub    esp,0x18
c0015ce4:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015ce7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cea:	0f b7 c0             	movzx  eax,ax
c0015ced:	83 f2 01             	xor    edx,0x1
c0015cf0:	88 90 e0 e3 02 c0    	mov    BYTE PTR [eax-0x3ffd1c20],dl
c0015cf6:	a1 c8 e3 02 c0       	mov    eax,ds:0xc002e3c8
c0015cfb:	85 c0                	test   eax,eax
c0015cfd:	74 24                	je     c0015d23 <sendKeyboardToken(KeyboardToken)+0x45>
c0015cff:	8b 0d c8 e3 02 c0    	mov    ecx,DWORD PTR ds:0xc002e3c8
c0015d05:	83 ec 04             	sub    esp,0x4
c0015d08:	68 e0 e3 02 c0       	push   0xc002e3e0
c0015d0d:	83 ec 08             	sub    esp,0x8
c0015d10:	89 e2                	mov    edx,esp
c0015d12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d15:	89 02                	mov    DWORD PTR [edx],eax
c0015d17:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d1a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015d1e:	ff d1                	call   ecx
c0015d20:	83 c4 10             	add    esp,0x10
c0015d23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d26:	66 3d 03 02          	cmp    ax,0x203
c0015d2a:	75 07                	jne    c0015d33 <sendKeyboardToken(KeyboardToken)+0x55>
c0015d2c:	a0 e0 e4 02 c0       	mov    al,ds:0xc002e4e0
c0015d31:	84 c0                	test   al,al
c0015d33:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015d37:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015d3a:	a0 e8 e7 02 c0       	mov    al,ds:0xc002e7e8
c0015d3f:	38 c2                	cmp    dl,al
c0015d41:	74 1c                	je     c0015d5f <sendKeyboardToken(KeyboardToken)+0x81>
c0015d43:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015d46:	a2 e8 e7 02 c0       	mov    ds:0xc002e7e8,al
c0015d4b:	a0 e8 e7 02 c0       	mov    al,ds:0xc002e7e8
c0015d50:	0f b6 c0             	movzx  eax,al
c0015d53:	83 ec 0c             	sub    esp,0xc
c0015d56:	50                   	push   eax
c0015d57:	e8 12 a8 ff ff       	call   c001056e <setTerminalScrollLock(bool)>
c0015d5c:	83 c4 10             	add    esp,0x10
c0015d5f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015d62:	84 c0                	test   al,al
c0015d64:	0f 84 ae 00 00 00    	je     c0015e18 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015d6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d6d:	66 3d 10 03          	cmp    ax,0x310
c0015d71:	75 06                	jne    c0015d79 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015d73:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015d79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d7c:	66 3d 11 03          	cmp    ax,0x311
c0015d80:	75 06                	jne    c0015d88 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015d82:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015d88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d8b:	66 3d 12 03          	cmp    ax,0x312
c0015d8f:	75 06                	jne    c0015d97 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015d91:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015d97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d9a:	66 3d 13 03          	cmp    ax,0x313
c0015d9e:	75 06                	jne    c0015da6 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015da0:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015da6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015da9:	66 3d 14 03          	cmp    ax,0x314
c0015dad:	75 06                	jne    c0015db5 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015daf:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015db5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015db8:	66 3d 15 03          	cmp    ax,0x315
c0015dbc:	75 06                	jne    c0015dc4 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015dbe:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015dc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dc7:	66 3d 16 03          	cmp    ax,0x316
c0015dcb:	75 06                	jne    c0015dd3 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015dcd:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015dd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dd6:	66 3d 17 03          	cmp    ax,0x317
c0015dda:	75 06                	jne    c0015de2 <sendKeyboardToken(KeyboardToken)+0x104>
c0015ddc:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015de2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015de5:	66 3d 18 03          	cmp    ax,0x318
c0015de9:	75 06                	jne    c0015df1 <sendKeyboardToken(KeyboardToken)+0x113>
c0015deb:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015df1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015df4:	66 3d 19 03          	cmp    ax,0x319
c0015df8:	75 06                	jne    c0015e00 <sendKeyboardToken(KeyboardToken)+0x122>
c0015dfa:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015e00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e03:	66 3d 1a 03          	cmp    ax,0x31a
c0015e07:	0f 85 c9 00 00 00    	jne    c0015ed6 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015e0d:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015e13:	e9 be 00 00 00       	jmp    c0015ed6 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015e18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e1b:	66 3d 10 03          	cmp    ax,0x310
c0015e1f:	75 0a                	jne    c0015e2b <sendKeyboardToken(KeyboardToken)+0x14d>
c0015e21:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015e27:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e2e:	66 3d 11 03          	cmp    ax,0x311
c0015e32:	75 0a                	jne    c0015e3e <sendKeyboardToken(KeyboardToken)+0x160>
c0015e34:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015e3a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e41:	66 3d 12 03          	cmp    ax,0x312
c0015e45:	75 0a                	jne    c0015e51 <sendKeyboardToken(KeyboardToken)+0x173>
c0015e47:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015e4d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e54:	66 3d 13 03          	cmp    ax,0x313
c0015e58:	75 0a                	jne    c0015e64 <sendKeyboardToken(KeyboardToken)+0x186>
c0015e5a:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015e60:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e67:	66 3d 14 03          	cmp    ax,0x314
c0015e6b:	75 0a                	jne    c0015e77 <sendKeyboardToken(KeyboardToken)+0x199>
c0015e6d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015e73:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e7a:	66 3d 15 03          	cmp    ax,0x315
c0015e7e:	75 0a                	jne    c0015e8a <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015e80:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015e86:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e8d:	66 3d 16 03          	cmp    ax,0x316
c0015e91:	75 0a                	jne    c0015e9d <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015e93:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015e99:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ea0:	66 3d 17 03          	cmp    ax,0x317
c0015ea4:	75 0a                	jne    c0015eb0 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015ea6:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015eac:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015eb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eb3:	66 3d 18 03          	cmp    ax,0x318
c0015eb7:	75 0a                	jne    c0015ec3 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015eb9:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015ebf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ec3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec6:	66 3d 19 03          	cmp    ax,0x319
c0015eca:	75 0a                	jne    c0015ed6 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015ecc:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015ed2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ed6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed9:	66 3d 00 02          	cmp    ax,0x200
c0015edd:	75 2c                	jne    c0015f0b <sendKeyboardToken(KeyboardToken)+0x22d>
c0015edf:	a0 e0 e7 02 c0       	mov    al,ds:0xc002e7e0
c0015ee4:	83 f0 01             	xor    eax,0x1
c0015ee7:	84 c0                	test   al,al
c0015ee9:	74 20                	je     c0015f0b <sendKeyboardToken(KeyboardToken)+0x22d>
c0015eeb:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0015ef0:	6a 01                	push   0x1
c0015ef2:	6a 00                	push   0x0
c0015ef4:	68 ba 5b 01 c0       	push   0xc0015bba
c0015ef9:	50                   	push   eax
c0015efa:	e8 7f 7e 00 00       	call   c001dd7e <Process::createThread(void (*)(void*), void*, int)>
c0015eff:	83 c4 10             	add    esp,0x10
c0015f02:	c6 05 e0 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e7e0,0x1
c0015f09:	eb 33                	jmp    c0015f3e <sendKeyboardToken(KeyboardToken)+0x260>
c0015f0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f0e:	66 3d 01 02          	cmp    ax,0x201
c0015f12:	75 2a                	jne    c0015f3e <sendKeyboardToken(KeyboardToken)+0x260>
c0015f14:	a0 e0 e7 02 c0       	mov    al,ds:0xc002e7e0
c0015f19:	83 f0 01             	xor    eax,0x1
c0015f1c:	84 c0                	test   al,al
c0015f1e:	74 1e                	je     c0015f3e <sendKeyboardToken(KeyboardToken)+0x260>
c0015f20:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0015f25:	6a 01                	push   0x1
c0015f27:	6a 00                	push   0x0
c0015f29:	68 16 5c 01 c0       	push   0xc0015c16
c0015f2e:	50                   	push   eax
c0015f2f:	e8 4a 7e 00 00       	call   c001dd7e <Process::createThread(void (*)(void*), void*, int)>
c0015f34:	83 c4 10             	add    esp,0x10
c0015f37:	c6 05 e0 e7 02 c0 01 	mov    BYTE PTR ds:0xc002e7e0,0x1
c0015f3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f41:	66 3d 1d 03          	cmp    ax,0x31d
c0015f45:	75 06                	jne    c0015f4d <sendKeyboardToken(KeyboardToken)+0x26f>
c0015f47:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015f4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f50:	66 3d 1c 03          	cmp    ax,0x31c
c0015f54:	75 06                	jne    c0015f5c <sendKeyboardToken(KeyboardToken)+0x27e>
c0015f56:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f5f:	66 3d 1b 03          	cmp    ax,0x31b
c0015f63:	75 06                	jne    c0015f6b <sendKeyboardToken(KeyboardToken)+0x28d>
c0015f65:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015f6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6e:	66 3d 1e 03          	cmp    ax,0x31e
c0015f72:	75 06                	jne    c0015f7a <sendKeyboardToken(KeyboardToken)+0x29c>
c0015f74:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015f7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f7d:	66 3d 1f 03          	cmp    ax,0x31f
c0015f81:	75 06                	jne    c0015f89 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015f83:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015f89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f8c:	66 3d 1a 03          	cmp    ax,0x31a
c0015f90:	75 06                	jne    c0015f98 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015f92:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015f98:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015f9c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015f9f:	83 f0 01             	xor    eax,0x1
c0015fa2:	84 c0                	test   al,al
c0015fa4:	74 77                	je     c001601d <sendKeyboardToken(KeyboardToken)+0x33f>
c0015fa6:	a0 e1 e4 02 c0       	mov    al,ds:0xc002e4e1
c0015fab:	84 c0                	test   al,al
c0015fad:	74 41                	je     c0015ff0 <sendKeyboardToken(KeyboardToken)+0x312>
c0015faf:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015fb3:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015fb7:	74 2b                	je     c0015fe4 <sendKeyboardToken(KeyboardToken)+0x306>
c0015fb9:	8b 15 e4 e7 02 c0    	mov    edx,DWORD PTR ds:0xc002e7e4
c0015fbf:	89 d0                	mov    eax,edx
c0015fc1:	c1 e0 02             	shl    eax,0x2
c0015fc4:	01 d0                	add    eax,edx
c0015fc6:	01 c0                	add    eax,eax
c0015fc8:	a3 e4 e7 02 c0       	mov    ds:0xc002e7e4,eax
c0015fcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd0:	0f b7 c0             	movzx  eax,ax
c0015fd3:	8d 50 d0             	lea    edx,[eax-0x30]
c0015fd6:	a1 e4 e7 02 c0       	mov    eax,ds:0xc002e7e4
c0015fdb:	01 d0                	add    eax,edx
c0015fdd:	a3 e4 e7 02 c0       	mov    ds:0xc002e7e4,eax
c0015fe2:	eb 6d                	jmp    c0016051 <sendKeyboardToken(KeyboardToken)+0x373>
c0015fe4:	c7 05 e4 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e7e4,0x0
c0015fee:	eb 61                	jmp    c0016051 <sendKeyboardToken(KeyboardToken)+0x373>
c0015ff0:	a1 e4 e7 02 c0       	mov    eax,ds:0xc002e7e4
c0015ff5:	85 c0                	test   eax,eax
c0015ff7:	74 18                	je     c0016011 <sendKeyboardToken(KeyboardToken)+0x333>
c0015ff9:	a1 e4 e7 02 c0       	mov    eax,ds:0xc002e7e4
c0015ffe:	0f b6 c0             	movzx  eax,al
c0016001:	83 ec 0c             	sub    esp,0xc
c0016004:	50                   	push   eax
c0016005:	e8 68 fc ff ff       	call   c0015c72 <sendKeyToTerminal(unsigned char)>
c001600a:	83 c4 10             	add    esp,0x10
c001600d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016011:	c7 05 e4 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e7e4,0x0
c001601b:	eb 34                	jmp    c0016051 <sendKeyboardToken(KeyboardToken)+0x373>
c001601d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016020:	66 3d 01 01          	cmp    ax,0x101
c0016024:	75 2b                	jne    c0016051 <sendKeyboardToken(KeyboardToken)+0x373>
c0016026:	a1 e4 e7 02 c0       	mov    eax,ds:0xc002e7e4
c001602b:	85 c0                	test   eax,eax
c001602d:	74 18                	je     c0016047 <sendKeyboardToken(KeyboardToken)+0x369>
c001602f:	a1 e4 e7 02 c0       	mov    eax,ds:0xc002e7e4
c0016034:	0f b6 c0             	movzx  eax,al
c0016037:	83 ec 0c             	sub    esp,0xc
c001603a:	50                   	push   eax
c001603b:	e8 32 fc ff ff       	call   c0015c72 <sendKeyToTerminal(unsigned char)>
c0016040:	83 c4 10             	add    esp,0x10
c0016043:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016047:	c7 05 e4 e7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e7e4,0x0
c0016051:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016054:	83 f0 01             	xor    eax,0x1
c0016057:	84 c0                	test   al,al
c0016059:	74 4c                	je     c00160a7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001605b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001605e:	83 f0 01             	xor    eax,0x1
c0016061:	84 c0                	test   al,al
c0016063:	74 42                	je     c00160a7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016065:	a0 e0 e4 02 c0       	mov    al,ds:0xc002e4e0
c001606a:	83 f0 01             	xor    eax,0x1
c001606d:	84 c0                	test   al,al
c001606f:	74 36                	je     c00160a7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016074:	66 83 f8 1f          	cmp    ax,0x1f
c0016078:	76 09                	jbe    c0016083 <sendKeyboardToken(KeyboardToken)+0x3a5>
c001607a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001607d:	66 83 f8 7e          	cmp    ax,0x7e
c0016081:	76 12                	jbe    c0016095 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016083:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016086:	66 83 f8 0a          	cmp    ax,0xa
c001608a:	74 09                	je     c0016095 <sendKeyboardToken(KeyboardToken)+0x3b7>
c001608c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001608f:	66 83 f8 08          	cmp    ax,0x8
c0016093:	75 12                	jne    c00160a7 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016095:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016098:	0f b6 c0             	movzx  eax,al
c001609b:	83 ec 0c             	sub    esp,0xc
c001609e:	50                   	push   eax
c001609f:	e8 ce fb ff ff       	call   c0015c72 <sendKeyToTerminal(unsigned char)>
c00160a4:	83 c4 10             	add    esp,0x10
c00160a7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00160aa:	83 f0 01             	xor    eax,0x1
c00160ad:	84 c0                	test   al,al
c00160af:	74 4f                	je     c0016100 <sendKeyboardToken(KeyboardToken)+0x422>
c00160b1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00160b4:	83 f0 01             	xor    eax,0x1
c00160b7:	84 c0                	test   al,al
c00160b9:	74 45                	je     c0016100 <sendKeyboardToken(KeyboardToken)+0x422>
c00160bb:	a0 e0 e4 02 c0       	mov    al,ds:0xc002e4e0
c00160c0:	84 c0                	test   al,al
c00160c2:	74 3c                	je     c0016100 <sendKeyboardToken(KeyboardToken)+0x422>
c00160c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c7:	66 83 f8 3f          	cmp    ax,0x3f
c00160cb:	76 33                	jbe    c0016100 <sendKeyboardToken(KeyboardToken)+0x422>
c00160cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160d0:	66 83 f8 7f          	cmp    ax,0x7f
c00160d4:	77 2a                	ja     c0016100 <sendKeyboardToken(KeyboardToken)+0x422>
c00160d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160d9:	88 c2                	mov    dl,al
c00160db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160de:	66 83 f8 5f          	cmp    ax,0x5f
c00160e2:	76 04                	jbe    c00160e8 <sendKeyboardToken(KeyboardToken)+0x40a>
c00160e4:	b0 20                	mov    al,0x20
c00160e6:	eb 02                	jmp    c00160ea <sendKeyboardToken(KeyboardToken)+0x40c>
c00160e8:	b0 00                	mov    al,0x0
c00160ea:	29 c2                	sub    edx,eax
c00160ec:	88 d0                	mov    al,dl
c00160ee:	83 e8 40             	sub    eax,0x40
c00160f1:	0f b6 c0             	movzx  eax,al
c00160f4:	83 ec 0c             	sub    esp,0xc
c00160f7:	50                   	push   eax
c00160f8:	e8 75 fb ff ff       	call   c0015c72 <sendKeyToTerminal(unsigned char)>
c00160fd:	83 c4 10             	add    esp,0x10
c0016100:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016103:	66 3d 00 03          	cmp    ax,0x300
c0016107:	75 0f                	jne    c0016118 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016109:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001610c:	83 f0 01             	xor    eax,0x1
c001610f:	84 c0                	test   al,al
c0016111:	74 05                	je     c0016118 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016113:	e8 8b ac ff ff       	call   c0010da3 <doTerminalCycle()>
c0016118:	90                   	nop
c0016119:	c9                   	leave  
c001611a:	c3                   	ret    

c001611b <clearInternalKeybuffer(VgaText*)>:
c001611b:	55                   	push   ebp
c001611c:	89 e5                	mov    ebp,esp
c001611e:	83 ec 08             	sub    esp,0x8
c0016121:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016124:	05 34 11 00 00       	add    eax,0x1134
c0016129:	83 ec 0c             	sub    esp,0xc
c001612c:	50                   	push   eax
c001612d:	e8 62 a6 fe ff       	call   c0000794 <strlen>
c0016132:	83 c4 10             	add    esp,0x10
c0016135:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016138:	81 c2 34 11 00 00    	add    edx,0x1134
c001613e:	83 ec 04             	sub    esp,0x4
c0016141:	50                   	push   eax
c0016142:	6a 00                	push   0x0
c0016144:	52                   	push   edx
c0016145:	e8 2e a6 fe ff       	call   c0000778 <memset>
c001614a:	83 c4 10             	add    esp,0x10
c001614d:	90                   	nop
c001614e:	c9                   	leave  
c001614f:	c3                   	ret    

c0016150 <readKeyboard(VgaText*, char*, unsigned long)>:
c0016150:	55                   	push   ebp
c0016151:	89 e5                	mov    ebp,esp
c0016153:	83 ec 18             	sub    esp,0x18
c0016156:	fb                   	sti    
c0016157:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001615e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016162:	0f 84 8a 00 00 00    	je     c00161f2 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0016168:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001616b:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016171:	84 c0                	test   al,al
c0016173:	75 11                	jne    c0016186 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0016175:	e8 d3 7a 00 00       	call   c001dc4d <lockScheduler()>
c001617a:	e8 09 7e 00 00       	call   c001df88 <schedule()>
c001617f:	e8 cb 7a 00 00       	call   c001dc4f <unlockScheduler()>
c0016184:	eb e2                	jmp    c0016168 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0016186:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016189:	8d 50 01             	lea    edx,[eax+0x1]
c001618c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001618f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016192:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0016198:	88 10                	mov    BYTE PTR [eax],dl
c001619a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001619d:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00161a3:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00161a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161a9:	05 34 11 00 00       	add    eax,0x1134
c00161ae:	83 ec 0c             	sub    esp,0xc
c00161b1:	50                   	push   eax
c00161b2:	e8 dd a5 fe ff       	call   c0000794 <strlen>
c00161b7:	83 c4 10             	add    esp,0x10
c00161ba:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00161bd:	81 c2 34 11 00 00    	add    edx,0x1134
c00161c3:	8d 4a 01             	lea    ecx,[edx+0x1]
c00161c6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00161c9:	81 c2 34 11 00 00    	add    edx,0x1134
c00161cf:	83 ec 04             	sub    esp,0x4
c00161d2:	50                   	push   eax
c00161d3:	51                   	push   ecx
c00161d4:	52                   	push   edx
c00161d5:	e8 a2 a4 fe ff       	call   c000067c <memmove>
c00161da:	83 c4 10             	add    esp,0x10
c00161dd:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00161e0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00161e3:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00161e7:	0f 85 71 ff ff ff    	jne    c001615e <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00161ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00161f0:	eb 03                	jmp    c00161f5 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c00161f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00161f5:	c9                   	leave  
c00161f6:	c3                   	ret    
c00161f7:	90                   	nop

c00161f8 <Keyboard::Keyboard(char const*)>:
c00161f8:	83 ec 0c             	sub    esp,0xc
c00161fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161ff:	83 ec 08             	sub    esp,0x8
c0016202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016206:	50                   	push   eax
c0016207:	e8 82 e1 ff ff       	call   c001438e <Device::Device(char const*)>
c001620c:	83 c4 10             	add    esp,0x10
c001620f:	ba 88 af 02 c0       	mov    edx,0xc002af88
c0016214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016218:	89 10                	mov    DWORD PTR [eax],edx
c001621a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001621e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016228:	c6 05 c4 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e3c4,0x1
c001622f:	90                   	nop
c0016230:	83 c4 0c             	add    esp,0xc
c0016233:	c3                   	ret    

c0016234 <Keyboard::~Keyboard()>:
c0016234:	83 ec 0c             	sub    esp,0xc
c0016237:	ba 88 af 02 c0       	mov    edx,0xc002af88
c001623c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016240:	89 10                	mov    DWORD PTR [eax],edx
c0016242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016246:	83 ec 0c             	sub    esp,0xc
c0016249:	50                   	push   eax
c001624a:	e8 21 de ff ff       	call   c0014070 <Device::~Device()>
c001624f:	83 c4 10             	add    esp,0x10
c0016252:	90                   	nop
c0016253:	83 c4 0c             	add    esp,0xc
c0016256:	c3                   	ret    
c0016257:	90                   	nop

c0016258 <Keyboard::~Keyboard()>:
c0016258:	83 ec 0c             	sub    esp,0xc
c001625b:	83 ec 0c             	sub    esp,0xc
c001625e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016262:	e8 cd ff ff ff       	call   c0016234 <Keyboard::~Keyboard()>
c0016267:	83 c4 10             	add    esp,0x10
c001626a:	83 ec 08             	sub    esp,0x8
c001626d:	68 5c 01 00 00       	push   0x15c
c0016272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016276:	e8 1d ca ff ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c001627b:	83 c4 10             	add    esp,0x10
c001627e:	83 c4 0c             	add    esp,0xc
c0016281:	c3                   	ret    

c0016282 <LogicalDisk::close(int, int, void*)>:
c0016282:	83 c8 ff             	or     eax,0xffffffff
c0016285:	c3                   	ret    

c0016286 <LogicalDisk::~LogicalDisk()>:
c0016286:	83 ec 0c             	sub    esp,0xc
c0016289:	ba 38 b0 02 c0       	mov    edx,0xc002b038
c001628e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016292:	89 10                	mov    DWORD PTR [eax],edx
c0016294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016298:	83 ec 0c             	sub    esp,0xc
c001629b:	50                   	push   eax
c001629c:	e8 cf dd ff ff       	call   c0014070 <Device::~Device()>
c00162a1:	83 c4 10             	add    esp,0x10
c00162a4:	90                   	nop
c00162a5:	83 c4 0c             	add    esp,0xc
c00162a8:	c3                   	ret    
c00162a9:	90                   	nop

c00162aa <LogicalDisk::~LogicalDisk()>:
c00162aa:	83 ec 0c             	sub    esp,0xc
c00162ad:	83 ec 0c             	sub    esp,0xc
c00162b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162b4:	e8 cd ff ff ff       	call   c0016286 <LogicalDisk::~LogicalDisk()>
c00162b9:	83 c4 10             	add    esp,0x10
c00162bc:	83 ec 08             	sub    esp,0x8
c00162bf:	68 74 01 00 00       	push   0x174
c00162c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162c8:	e8 cb c9 ff ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c00162cd:	83 c4 10             	add    esp,0x10
c00162d0:	83 c4 0c             	add    esp,0xc
c00162d3:	c3                   	ret    

c00162d4 <LogicalDisk::open(int, int, void*)>:
c00162d4:	83 ec 18             	sub    esp,0x18
c00162d7:	68 b4 af 02 c0       	push   0xc002afb4
c00162dc:	e8 72 41 00 00       	call   c001a453 <Krnl::panic(char const*)>
c00162e1:	83 c8 ff             	or     eax,0xffffffff
c00162e4:	83 c4 1c             	add    esp,0x1c
c00162e7:	c3                   	ret    

c00162e8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00162e8:	53                   	push   ebx
c00162e9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00162ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00162f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162f5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00162fb:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016301:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016307:	77 10                	ja     c0016319 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016309:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001630f:	89 d3                	mov    ebx,edx
c0016311:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016317:	72 05                	jb     c001631e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016319:	83 c8 ff             	or     eax,0xffffffff
c001631c:	89 c2                	mov    edx,eax
c001631e:	5b                   	pop    ebx
c001631f:	c3                   	ret    

c0016320 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016320:	56                   	push   esi
c0016321:	83 c8 ff             	or     eax,0xffffffff
c0016324:	53                   	push   ebx
c0016325:	89 c2                	mov    edx,eax
c0016327:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001632b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001632f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016333:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016339:	77 27                	ja     c0016362 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001633b:	89 d8                	mov    eax,ebx
c001633d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016343:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016349:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001634e:	89 c2                	mov    edx,eax
c0016350:	73 10                	jae    c0016362 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016352:	89 c8                	mov    eax,ecx
c0016354:	89 da                	mov    edx,ebx
c0016356:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001635c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016362:	5b                   	pop    ebx
c0016363:	5e                   	pop    esi
c0016364:	c3                   	ret    
c0016365:	90                   	nop

c0016366 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016366:	83 ec 1c             	sub    esp,0x1c
c0016369:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001636d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016371:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016375:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016379:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001637d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016380:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016384:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001638c:	83 ec 08             	sub    esp,0x8
c001638f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016393:	50                   	push   eax
c0016394:	e8 f5 df ff ff       	call   c001438e <Device::Device(char const*)>
c0016399:	83 c4 10             	add    esp,0x10
c001639c:	ba 38 b0 02 c0       	mov    edx,0xc002b038
c00163a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163a5:	89 10                	mov    DWORD PTR [eax],edx
c00163a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163ab:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00163b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163b6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00163bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163c1:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00163cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00163cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163d7:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00163dd:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00163e3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00163e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00163ea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00163ee:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00163f4:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00163fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016402:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016408:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001640c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016416:	90                   	nop
c0016417:	83 c4 1c             	add    esp,0x1c
c001641a:	c3                   	ret    
c001641b:	90                   	nop

c001641c <LogicalDisk::assignDriveLetter()>:
c001641c:	55                   	push   ebp
c001641d:	57                   	push   edi
c001641e:	56                   	push   esi
c001641f:	53                   	push   ebx
c0016420:	83 ec 14             	sub    esp,0x14
c0016423:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016427:	8b 3d 00 e8 02 c0    	mov    edi,DWORD PTR ds:0xc002e800
c001642d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016433:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016437:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001643d:	8b 3d 04 e8 02 c0    	mov    edi,DWORD PTR ds:0xc002e804
c0016443:	3c 01                	cmp    al,0x1
c0016445:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016449:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001644d:	19 c0                	sbb    eax,eax
c001644f:	83 e0 02             	and    eax,0x2
c0016452:	83 c0 41             	add    eax,0x41
c0016455:	0f be e8             	movsx  ebp,al
c0016458:	3c 43                	cmp    al,0x43
c001645a:	75 10                	jne    c001646c <LogicalDisk::assignDriveLetter()+0x50>
c001645c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016463:	75 5d                	jne    c00164c2 <LogicalDisk::assignDriveLetter()+0xa6>
c0016465:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001646a:	75 56                	jne    c00164c2 <LogicalDisk::assignDriveLetter()+0xa6>
c001646c:	8d 75 bf             	lea    esi,[ebp-0x41]
c001646f:	ba 01 00 00 00       	mov    edx,0x1
c0016474:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016478:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001647c:	d3 e2                	shl    edx,cl
c001647e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016482:	89 d7                	mov    edi,edx
c0016484:	89 d6                	mov    esi,edx
c0016486:	c1 ff 1f             	sar    edi,0x1f
c0016489:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001648d:	21 f9                	and    ecx,edi
c001648f:	09 d1                	or     ecx,edx
c0016491:	75 2f                	jne    c00164c2 <LogicalDisk::assignDriveLetter()+0xa6>
c0016493:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016497:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001649b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00164a1:	09 f2                	or     edx,esi
c00164a3:	89 15 00 e8 02 c0    	mov    DWORD PTR ds:0xc002e800,edx
c00164a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164ad:	09 fa                	or     edx,edi
c00164af:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00164b3:	89 15 04 e8 02 c0    	mov    DWORD PTR ds:0xc002e804,edx
c00164b9:	89 1c bd 20 e8 02 c0 	mov    DWORD PTR [edi*4-0x3ffd17e0],ebx
c00164c0:	eb 08                	jmp    c00164ca <LogicalDisk::assignDriveLetter()+0xae>
c00164c2:	45                   	inc    ebp
c00164c3:	40                   	inc    eax
c00164c4:	3c 5b                	cmp    al,0x5b
c00164c6:	75 90                	jne    c0016458 <LogicalDisk::assignDriveLetter()+0x3c>
c00164c8:	31 c0                	xor    eax,eax
c00164ca:	83 c4 14             	add    esp,0x14
c00164cd:	5b                   	pop    ebx
c00164ce:	5e                   	pop    esi
c00164cf:	5f                   	pop    edi
c00164d0:	5d                   	pop    ebp
c00164d1:	c3                   	ret    

c00164d2 <LogicalDisk::mount()>:
c00164d2:	56                   	push   esi
c00164d3:	53                   	push   ebx
c00164d4:	51                   	push   ecx
c00164d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00164d9:	8b 1d 90 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e390
c00164df:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00164e9:	85 db                	test   ebx,ebx
c00164eb:	74 50                	je     c001653d <LogicalDisk::mount()+0x6b>
c00164ed:	e8 46 77 00 00       	call   c001dc38 <getIRQNestingLevel()>
c00164f2:	52                   	push   edx
c00164f3:	52                   	push   edx
c00164f4:	50                   	push   eax
c00164f5:	68 d8 af 02 c0       	push   0xc002afd8
c00164fa:	e8 79 c8 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00164ff:	83 c4 0c             	add    esp,0xc
c0016502:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016509:	8b 13                	mov    edx,DWORD PTR [ebx]
c001650b:	83 e8 41             	sub    eax,0x41
c001650e:	50                   	push   eax
c001650f:	56                   	push   esi
c0016510:	53                   	push   ebx
c0016511:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016514:	83 c4 10             	add    esp,0x10
c0016517:	84 c0                	test   al,al
c0016519:	74 08                	je     c0016523 <LogicalDisk::mount()+0x51>
c001651b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016521:	eb 1c                	jmp    c001653f <LogicalDisk::mount()+0x6d>
c0016523:	e8 10 77 00 00       	call   c001dc38 <getIRQNestingLevel()>
c0016528:	51                   	push   ecx
c0016529:	51                   	push   ecx
c001652a:	50                   	push   eax
c001652b:	68 f3 af 02 c0       	push   0xc002aff3
c0016530:	e8 43 c8 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0016535:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016538:	83 c4 10             	add    esp,0x10
c001653b:	eb ac                	jmp    c00164e9 <LogicalDisk::mount()+0x17>
c001653d:	31 c0                	xor    eax,eax
c001653f:	5a                   	pop    edx
c0016540:	5b                   	pop    ebx
c0016541:	5e                   	pop    esi
c0016542:	c3                   	ret    
c0016543:	90                   	nop

c0016544 <LogicalDisk::unmount()>:
c0016544:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016548:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016552:	c3                   	ret    
c0016553:	90                   	nop

c0016554 <LogicalDisk::eject()>:
c0016554:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016558:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001655e:	8b 10                	mov    edx,DWORD PTR [eax]
c0016560:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016564:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016567:	90                   	nop

c0016568 <LogicalDisk::unassignDriveLetter()>:
c0016568:	57                   	push   edi
c0016569:	56                   	push   esi
c001656a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001656e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016575:	84 c9                	test   cl,cl
c0016577:	75 0f                	jne    c0016588 <LogicalDisk::unassignDriveLetter()+0x20>
c0016579:	c7 44 24 0c 0e b0 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b00e
c0016581:	5e                   	pop    esi
c0016582:	5f                   	pop    edi
c0016583:	e9 cb 3e 00 00       	jmp    c001a453 <Krnl::panic(char const*)>
c0016588:	83 e9 41             	sub    ecx,0x41
c001658b:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016592:	b8 01 00 00 00       	mov    eax,0x1
c0016597:	c7 04 8d 20 e8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd17e0],0x0
c00165a2:	d3 e0                	shl    eax,cl
c00165a4:	89 c7                	mov    edi,eax
c00165a6:	f7 d0                	not    eax
c00165a8:	c1 ff 1f             	sar    edi,0x1f
c00165ab:	21 05 00 e8 02 c0    	and    DWORD PTR ds:0xc002e800,eax
c00165b1:	89 fe                	mov    esi,edi
c00165b3:	f7 d6                	not    esi
c00165b5:	21 35 04 e8 02 c0    	and    DWORD PTR ds:0xc002e804,esi
c00165bb:	5e                   	pop    esi
c00165bc:	5f                   	pop    edi
c00165bd:	c3                   	ret    

c00165be <LogicalDisk::read(unsigned long long, int, void*)>:
c00165be:	57                   	push   edi
c00165bf:	56                   	push   esi
c00165c0:	53                   	push   ebx
c00165c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00165c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00165c9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00165cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165d1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00165d7:	77 41                	ja     c001661a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00165d9:	99                   	cdq    
c00165da:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00165e0:	01 c8                	add    eax,ecx
c00165e2:	11 da                	adc    edx,ebx
c00165e4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00165ea:	19 d7                	sbb    edi,edx
c00165ec:	72 33                	jb     c0016621 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00165ee:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00165f4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00165fa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00165fe:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016602:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016608:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001660e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016612:	5b                   	pop    ebx
c0016613:	5e                   	pop    esi
c0016614:	5f                   	pop    edi
c0016615:	e9 b0 0a 00 00       	jmp    c00170ca <VCache::read(unsigned long long, int, void*)>
c001661a:	b8 05 00 00 00       	mov    eax,0x5
c001661f:	eb 05                	jmp    c0016626 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016621:	b8 07 00 00 00       	mov    eax,0x7
c0016626:	5b                   	pop    ebx
c0016627:	5e                   	pop    esi
c0016628:	5f                   	pop    edi
c0016629:	c3                   	ret    

c001662a <LogicalDisk::write(unsigned long long, int, void*)>:
c001662a:	57                   	push   edi
c001662b:	56                   	push   esi
c001662c:	53                   	push   ebx
c001662d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016631:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016635:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001663d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016643:	77 41                	ja     c0016686 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016645:	99                   	cdq    
c0016646:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001664c:	01 c8                	add    eax,ecx
c001664e:	11 da                	adc    edx,ebx
c0016650:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016656:	19 d7                	sbb    edi,edx
c0016658:	72 33                	jb     c001668d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001665a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016660:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016666:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001666a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001666e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016674:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001667a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001667e:	5b                   	pop    ebx
c001667f:	5e                   	pop    esi
c0016680:	5f                   	pop    edi
c0016681:	e9 4e 09 00 00       	jmp    c0016fd4 <VCache::write(unsigned long long, int, void*)>
c0016686:	b8 05 00 00 00       	mov    eax,0x5
c001668b:	eb 05                	jmp    c0016692 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001668d:	b8 07 00 00 00       	mov    eax,0x7
c0016692:	5b                   	pop    ebx
c0016693:	5e                   	pop    esi
c0016694:	5f                   	pop    edi
c0016695:	c3                   	ret    

c0016696 <Mouse::Mouse(char const*)>:
c0016696:	83 ec 0c             	sub    esp,0xc
c0016699:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001669d:	83 ec 08             	sub    esp,0x8
c00166a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166a4:	50                   	push   eax
c00166a5:	e8 e4 dc ff ff       	call   c001438e <Device::Device(char const*)>
c00166aa:	83 c4 10             	add    esp,0x10
c00166ad:	ba 64 b0 02 c0       	mov    edx,0xc002b064
c00166b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166b6:	89 10                	mov    DWORD PTR [eax],edx
c00166b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166bc:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00166c6:	90                   	nop
c00166c7:	83 c4 0c             	add    esp,0xc
c00166ca:	c3                   	ret    
c00166cb:	90                   	nop

c00166cc <Mouse::~Mouse()>:
c00166cc:	83 ec 0c             	sub    esp,0xc
c00166cf:	ba 64 b0 02 c0       	mov    edx,0xc002b064
c00166d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166d8:	89 10                	mov    DWORD PTR [eax],edx
c00166da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166de:	83 ec 0c             	sub    esp,0xc
c00166e1:	50                   	push   eax
c00166e2:	e8 89 d9 ff ff       	call   c0014070 <Device::~Device()>
c00166e7:	83 c4 10             	add    esp,0x10
c00166ea:	90                   	nop
c00166eb:	83 c4 0c             	add    esp,0xc
c00166ee:	c3                   	ret    
c00166ef:	90                   	nop

c00166f0 <Mouse::~Mouse()>:
c00166f0:	83 ec 0c             	sub    esp,0xc
c00166f3:	83 ec 0c             	sub    esp,0xc
c00166f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166fa:	e8 cd ff ff ff       	call   c00166cc <Mouse::~Mouse()>
c00166ff:	83 c4 10             	add    esp,0x10
c0016702:	83 ec 08             	sub    esp,0x8
c0016705:	68 58 01 00 00       	push   0x158
c001670a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001670e:	e8 85 c5 ff ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0016713:	83 c4 10             	add    esp,0x10
c0016716:	83 c4 0c             	add    esp,0xc
c0016719:	c3                   	ret    

c001671a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001671a:	55                   	push   ebp
c001671b:	57                   	push   edi
c001671c:	56                   	push   esi
c001671d:	53                   	push   ebx
c001671e:	81 ec 28 01 00 00    	sub    esp,0x128
c0016724:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001672b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016732:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016739:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016740:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016744:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016748:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001674f:	e8 36 dd ff ff       	call   c001448a <Device::getName()>
c0016754:	5a                   	pop    edx
c0016755:	59                   	pop    ecx
c0016756:	50                   	push   eax
c0016757:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001675b:	55                   	push   ebp
c001675c:	e8 d3 a0 fe ff       	call   c0000834 <strcpy>
c0016761:	5b                   	pop    ebx
c0016762:	58                   	pop    eax
c0016763:	68 88 b0 02 c0       	push   0xc002b088
c0016768:	55                   	push   ebp
c0016769:	e8 06 a2 fe ff       	call   c0000974 <strcat>
c001676e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016775:	e8 c9 90 ff ff       	call   c000f843 <malloc>
c001677a:	83 c4 0c             	add    esp,0xc
c001677d:	89 c3                	mov    ebx,eax
c001677f:	57                   	push   edi
c0016780:	56                   	push   esi
c0016781:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016785:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016789:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016790:	55                   	push   ebp
c0016791:	50                   	push   eax
c0016792:	e8 cf fb ff ff       	call   c0016366 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016797:	83 c4 14             	add    esp,0x14
c001679a:	53                   	push   ebx
c001679b:	e8 7c fc ff ff       	call   c001641c <LogicalDisk::assignDriveLetter()>
c00167a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00167a3:	89 c6                	mov    esi,eax
c00167a5:	e8 28 fd ff ff       	call   c00164d2 <LogicalDisk::mount()>
c00167aa:	58                   	pop    eax
c00167ab:	5a                   	pop    edx
c00167ac:	53                   	push   ebx
c00167ad:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00167b4:	e8 e5 d9 ff ff       	call   c001419e <Device::addChild(Device*)>
c00167b9:	59                   	pop    ecx
c00167ba:	89 f0                	mov    eax,esi
c00167bc:	5b                   	pop    ebx
c00167bd:	0f be f0             	movsx  esi,al
c00167c0:	56                   	push   esi
c00167c1:	68 93 b0 02 c0       	push   0xc002b093
c00167c6:	e8 ad c5 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00167cb:	81 c4 2c 01 00 00    	add    esp,0x12c
c00167d1:	5b                   	pop    ebx
c00167d2:	5e                   	pop    esi
c00167d3:	5f                   	pop    edi
c00167d4:	5d                   	pop    ebp
c00167d5:	c3                   	ret    

c00167d6 <createPartitionsForDisk(PhysicalDisk*)>:
c00167d6:	55                   	push   ebp
c00167d7:	57                   	push   edi
c00167d8:	56                   	push   esi
c00167d9:	53                   	push   ebx
c00167da:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00167e0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00167e7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00167ed:	3d 00 02 00 00       	cmp    eax,0x200
c00167f2:	74 27                	je     c001681b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00167f4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00167fa:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016800:	83 ec 10             	sub    esp,0x10
c0016803:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016807:	99                   	cdq    
c0016808:	c1 e6 0a             	shl    esi,0xa
c001680b:	52                   	push   edx
c001680c:	89 fd                	mov    ebp,edi
c001680e:	50                   	push   eax
c001680f:	55                   	push   ebp
c0016810:	56                   	push   esi
c0016811:	e8 46 00 01 00       	call   c002685c <__udivdi3>
c0016816:	e9 b1 00 00 00       	jmp    c00168cc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001681b:	83 ec 0c             	sub    esp,0xc
c001681e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016820:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016824:	56                   	push   esi
c0016825:	6a 01                	push   0x1
c0016827:	6a 00                	push   0x0
c0016829:	6a 00                	push   0x0
c001682b:	53                   	push   ebx
c001682c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001682f:	83 c4 20             	add    esp,0x20
c0016832:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001683a:	75 0a                	jne    c0016846 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001683c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016844:	74 2c                	je     c0016872 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016846:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001684c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016852:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016858:	83 ec 10             	sub    esp,0x10
c001685b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001685f:	89 f7                	mov    edi,esi
c0016861:	c1 e0 0a             	shl    eax,0xa
c0016864:	c1 ff 1f             	sar    edi,0x1f
c0016867:	57                   	push   edi
c0016868:	56                   	push   esi
c0016869:	52                   	push   edx
c001686a:	50                   	push   eax
c001686b:	e8 ec ff 00 00       	call   c002685c <__udivdi3>
c0016870:	eb 5a                	jmp    c00168cc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016872:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016879:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016880:	83 e1 7f             	and    ecx,0x7f
c0016883:	83 e0 7f             	and    eax,0x7f
c0016886:	01 c1                	add    ecx,eax
c0016888:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001688f:	83 e0 7f             	and    eax,0x7f
c0016892:	01 c1                	add    ecx,eax
c0016894:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001689b:	83 e0 7f             	and    eax,0x7f
c001689e:	00 c1                	add    cl,al
c00168a0:	74 41                	je     c00168e3 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00168a2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00168a8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00168ae:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00168b4:	83 ec 10             	sub    esp,0x10
c00168b7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00168bb:	89 f7                	mov    edi,esi
c00168bd:	c1 e0 0a             	shl    eax,0xa
c00168c0:	c1 ff 1f             	sar    edi,0x1f
c00168c3:	57                   	push   edi
c00168c4:	56                   	push   esi
c00168c5:	52                   	push   edx
c00168c6:	50                   	push   eax
c00168c7:	e8 90 ff 00 00       	call   c002685c <__udivdi3>
c00168cc:	83 c4 14             	add    esp,0x14
c00168cf:	52                   	push   edx
c00168d0:	50                   	push   eax
c00168d1:	6a 00                	push   0x0
c00168d3:	6a 00                	push   0x0
c00168d5:	53                   	push   ebx
c00168d6:	e8 3f fe ff ff       	call   c001671a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00168db:	83 c4 20             	add    esp,0x20
c00168de:	e9 79 01 00 00       	jmp    c0016a5c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00168e3:	89 f0                	mov    eax,esi
c00168e5:	31 f6                	xor    esi,esi
c00168e7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00168ee:	75 02                	jne    c00168f2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00168f0:	89 f1                	mov    ecx,esi
c00168f2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00168f9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016900:	c1 e2 08             	shl    edx,0x8
c0016903:	c1 e7 10             	shl    edi,0x10
c0016906:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001690e:	09 fa                	or     edx,edi
c0016910:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016918:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001691f:	83 c0 10             	add    eax,0x10
c0016922:	09 fa                	or     edx,edi
c0016924:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001692b:	c1 e7 18             	shl    edi,0x18
c001692e:	09 fa                	or     edx,edi
c0016930:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016937:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001693b:	c1 e7 10             	shl    edi,0x10
c001693e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016945:	c1 e2 08             	shl    edx,0x8
c0016948:	09 fa                	or     edx,edi
c001694a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016951:	09 fa                	or     edx,edi
c0016953:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001695a:	c1 e7 18             	shl    edi,0x18
c001695d:	09 fa                	or     edx,edi
c001695f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016963:	46                   	inc    esi
c0016964:	83 fe 04             	cmp    esi,0x4
c0016967:	0f 85 7a ff ff ff    	jne    c00168e7 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001696d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016971:	83 f0 01             	xor    eax,0x1
c0016974:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016978:	75 57                	jne    c00169d1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001697a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001697e:	83 f0 01             	xor    eax,0x1
c0016981:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016985:	75 4a                	jne    c00169d1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016987:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001698b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016993:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001699b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00169a1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00169a7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00169ad:	0f a4 c2 0a          	shld   edx,eax,0xa
c00169b1:	89 f7                	mov    edi,esi
c00169b3:	c1 e0 0a             	shl    eax,0xa
c00169b6:	c1 ff 1f             	sar    edi,0x1f
c00169b9:	57                   	push   edi
c00169ba:	56                   	push   esi
c00169bb:	52                   	push   edx
c00169bc:	50                   	push   eax
c00169bd:	e8 9a fe 00 00       	call   c002685c <__udivdi3>
c00169c2:	83 c4 10             	add    esp,0x10
c00169c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00169c9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00169cd:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00169d1:	84 c9                	test   cl,cl
c00169d3:	74 53                	je     c0016a28 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00169d5:	0f b6 c9             	movzx  ecx,cl
c00169d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00169e0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00169e4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00169e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00169ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00169f0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00169f4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00169f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00169fc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016a00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016a08:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016a0c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016a10:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016a14:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016a18:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016a1c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016a20:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016a24:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016a28:	31 ed                	xor    ebp,ebp
c0016a2a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016a2e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016a32:	89 f8                	mov    eax,edi
c0016a34:	09 f0                	or     eax,esi
c0016a36:	74 1e                	je     c0016a56 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016a38:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016a3c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016a40:	89 d1                	mov    ecx,edx
c0016a42:	09 c1                	or     ecx,eax
c0016a44:	74 10                	je     c0016a56 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016a46:	83 ec 0c             	sub    esp,0xc
c0016a49:	57                   	push   edi
c0016a4a:	56                   	push   esi
c0016a4b:	52                   	push   edx
c0016a4c:	50                   	push   eax
c0016a4d:	53                   	push   ebx
c0016a4e:	e8 c7 fc ff ff       	call   c001671a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a53:	83 c4 20             	add    esp,0x20
c0016a56:	45                   	inc    ebp
c0016a57:	83 fd 04             	cmp    ebp,0x4
c0016a5a:	75 ce                	jne    c0016a2a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016a5c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016a62:	5b                   	pop    ebx
c0016a63:	5e                   	pop    esi
c0016a64:	5f                   	pop    edi
c0016a65:	5d                   	pop    ebp
c0016a66:	c3                   	ret    
c0016a67:	90                   	nop

c0016a68 <Serial::Serial(char const*)>:
c0016a68:	83 ec 0c             	sub    esp,0xc
c0016a6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a6f:	83 ec 08             	sub    esp,0x8
c0016a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a76:	50                   	push   eax
c0016a77:	e8 12 d9 ff ff       	call   c001438e <Device::Device(char const*)>
c0016a7c:	83 c4 10             	add    esp,0x10
c0016a7f:	ba c0 b0 02 c0       	mov    edx,0xc002b0c0
c0016a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a88:	89 10                	mov    DWORD PTR [eax],edx
c0016a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a8e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016a98:	90                   	nop
c0016a99:	83 c4 0c             	add    esp,0xc
c0016a9c:	c3                   	ret    
c0016a9d:	90                   	nop

c0016a9e <Serial::~Serial()>:
c0016a9e:	83 ec 0c             	sub    esp,0xc
c0016aa1:	ba c0 b0 02 c0       	mov    edx,0xc002b0c0
c0016aa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016aaa:	89 10                	mov    DWORD PTR [eax],edx
c0016aac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ab0:	83 ec 0c             	sub    esp,0xc
c0016ab3:	50                   	push   eax
c0016ab4:	e8 b7 d5 ff ff       	call   c0014070 <Device::~Device()>
c0016ab9:	83 c4 10             	add    esp,0x10
c0016abc:	90                   	nop
c0016abd:	83 c4 0c             	add    esp,0xc
c0016ac0:	c3                   	ret    
c0016ac1:	90                   	nop

c0016ac2 <Serial::~Serial()>:
c0016ac2:	83 ec 0c             	sub    esp,0xc
c0016ac5:	83 ec 0c             	sub    esp,0xc
c0016ac8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016acc:	e8 cd ff ff ff       	call   c0016a9e <Serial::~Serial()>
c0016ad1:	83 c4 10             	add    esp,0x10
c0016ad4:	83 ec 08             	sub    esp,0x8
c0016ad7:	68 58 01 00 00       	push   0x158
c0016adc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ae0:	e8 b3 c1 ff ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0016ae5:	83 c4 10             	add    esp,0x10
c0016ae8:	83 c4 0c             	add    esp,0xc
c0016aeb:	c3                   	ret    

c0016aec <Timer::Timer(char const*)>:
c0016aec:	83 ec 0c             	sub    esp,0xc
c0016aef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016af3:	83 ec 08             	sub    esp,0x8
c0016af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016afa:	50                   	push   eax
c0016afb:	e8 8e d8 ff ff       	call   c001438e <Device::Device(char const*)>
c0016b00:	83 c4 10             	add    esp,0x10
c0016b03:	ba 04 b1 02 c0       	mov    edx,0xc002b104
c0016b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b0c:	89 10                	mov    DWORD PTR [eax],edx
c0016b0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b12:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016b1c:	90                   	nop
c0016b1d:	83 c4 0c             	add    esp,0xc
c0016b20:	c3                   	ret    
c0016b21:	90                   	nop

c0016b22 <Timer::~Timer()>:
c0016b22:	83 ec 0c             	sub    esp,0xc
c0016b25:	ba 04 b1 02 c0       	mov    edx,0xc002b104
c0016b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b2e:	89 10                	mov    DWORD PTR [eax],edx
c0016b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b34:	83 ec 0c             	sub    esp,0xc
c0016b37:	50                   	push   eax
c0016b38:	e8 33 d5 ff ff       	call   c0014070 <Device::~Device()>
c0016b3d:	83 c4 10             	add    esp,0x10
c0016b40:	90                   	nop
c0016b41:	83 c4 0c             	add    esp,0xc
c0016b44:	c3                   	ret    
c0016b45:	90                   	nop

c0016b46 <Timer::~Timer()>:
c0016b46:	83 ec 0c             	sub    esp,0xc
c0016b49:	83 ec 0c             	sub    esp,0xc
c0016b4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b50:	e8 cd ff ff ff       	call   c0016b22 <Timer::~Timer()>
c0016b55:	83 c4 10             	add    esp,0x10
c0016b58:	83 ec 08             	sub    esp,0x8
c0016b5b:	68 5c 01 00 00       	push   0x15c
c0016b60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b64:	e8 2f c1 ff ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0016b69:	83 c4 10             	add    esp,0x10
c0016b6c:	83 c4 0c             	add    esp,0xc
c0016b6f:	c3                   	ret    

c0016b70 <Timer::read()>:
c0016b70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b74:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016b7a:	c3                   	ret    

c0016b7b <timerHandler(unsigned long long)>:
c0016b7b:	55                   	push   ebp
c0016b7c:	57                   	push   edi
c0016b7d:	56                   	push   esi
c0016b7e:	53                   	push   ebx
c0016b7f:	83 ec 0c             	sub    esp,0xc
c0016b82:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016b86:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016b8a:	01 35 90 e8 02 c0    	add    DWORD PTR ds:0xc002e890,esi
c0016b90:	11 3d 94 e8 02 c0    	adc    DWORD PTR ds:0xc002e894,edi
c0016b96:	80 3d 0d e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e20d,0x0
c0016b9d:	0f 84 07 01 00 00    	je     c0016caa <timerHandler(unsigned long long)+0x12f>
c0016ba3:	e8 cc 70 00 00       	call   c001dc74 <lockStuff()>
c0016ba8:	83 ec 0c             	sub    esp,0xc
c0016bab:	68 5c 17 03 c0       	push   0xc003175c
c0016bb0:	e8 19 1d 01 00       	call   c00288ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016bb5:	c7 04 24 5c 17 03 c0 	mov    DWORD PTR [esp],0xc003175c
c0016bbc:	89 c3                	mov    ebx,eax
c0016bbe:	e8 13 1d 01 00       	call   c00288d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016bc3:	83 c4 10             	add    esp,0x10
c0016bc6:	84 c0                	test   al,al
c0016bc8:	74 60                	je     c0016c2a <timerHandler(unsigned long long)+0xaf>
c0016bca:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016bd0:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016bd3:	85 c0                	test   eax,eax
c0016bd5:	0f 85 91 00 00 00    	jne    c0016c6c <timerHandler(unsigned long long)+0xf1>
c0016bdb:	e9 be 00 00 00       	jmp    c0016c9e <timerHandler(unsigned long long)+0x123>
c0016be0:	83 ec 0c             	sub    esp,0xc
c0016be3:	55                   	push   ebp
c0016be4:	e8 7b 76 00 00       	call   c001e264 <unblockTask(ThreadControlBlock*)>
c0016be9:	83 c4 10             	add    esp,0x10
c0016bec:	39 eb                	cmp    ebx,ebp
c0016bee:	75 12                	jne    c0016c02 <timerHandler(unsigned long long)+0x87>
c0016bf0:	83 ec 0c             	sub    esp,0xc
c0016bf3:	68 5c 17 03 c0       	push   0xc003175c
c0016bf8:	e8 d1 1c 01 00       	call   c00288ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016bfd:	89 c3                	mov    ebx,eax
c0016bff:	83 c4 10             	add    esp,0x10
c0016c02:	83 ec 0c             	sub    esp,0xc
c0016c05:	68 5c 17 03 c0       	push   0xc003175c
c0016c0a:	e8 c7 1c 01 00       	call   c00288d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016c0f:	83 c4 10             	add    esp,0x10
c0016c12:	84 c0                	test   al,al
c0016c14:	75 b4                	jne    c0016bca <timerHandler(unsigned long long)+0x4f>
c0016c16:	83 ec 0c             	sub    esp,0xc
c0016c19:	68 5c 17 03 c0       	push   0xc003175c
c0016c1e:	e8 ab 1c 01 00       	call   c00288ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c23:	83 c4 10             	add    esp,0x10
c0016c26:	39 d8                	cmp    eax,ebx
c0016c28:	74 a0                	je     c0016bca <timerHandler(unsigned long long)+0x4f>
c0016c2a:	83 ec 0c             	sub    esp,0xc
c0016c2d:	68 5c 17 03 c0       	push   0xc003175c
c0016c32:	e8 97 1c 01 00       	call   c00288ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c37:	c7 04 24 5c 17 03 c0 	mov    DWORD PTR [esp],0xc003175c
c0016c3e:	89 c5                	mov    ebp,eax
c0016c40:	e8 ad 1c 01 00       	call   c00288f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016c45:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016c48:	83 c4 10             	add    esp,0x10
c0016c4b:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016c4e:	39 15 90 e8 02 c0    	cmp    DWORD PTR ds:0xc002e890,edx
c0016c54:	a1 94 e8 02 c0       	mov    eax,ds:0xc002e894
c0016c59:	19 c8                	sbb    eax,ecx
c0016c5b:	73 83                	jae    c0016be0 <timerHandler(unsigned long long)+0x65>
c0016c5d:	50                   	push   eax
c0016c5e:	50                   	push   eax
c0016c5f:	55                   	push   ebp
c0016c60:	68 5c 17 03 c0       	push   0xc003175c
c0016c65:	e8 36 1d 01 00       	call   c00289a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016c6a:	eb 93                	jmp    c0016bff <timerHandler(unsigned long long)+0x84>
c0016c6c:	80 3d 0c e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e20c,0x0
c0016c73:	74 29                	je     c0016c9e <timerHandler(unsigned long long)+0x123>
c0016c75:	39 c6                	cmp    esi,eax
c0016c77:	bb 00 00 00 00       	mov    ebx,0x0
c0016c7c:	19 df                	sbb    edi,ebx
c0016c7e:	72 19                	jb     c0016c99 <timerHandler(unsigned long long)+0x11e>
c0016c80:	e8 c8 6f 00 00       	call   c001dc4d <lockScheduler()>
c0016c85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c8a:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016c8d:	e8 f6 72 00 00       	call   c001df88 <schedule()>
c0016c92:	e8 b8 6f 00 00       	call   c001dc4f <unlockScheduler()>
c0016c97:	eb 05                	jmp    c0016c9e <timerHandler(unsigned long long)+0x123>
c0016c99:	29 f0                	sub    eax,esi
c0016c9b:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016c9e:	83 c4 0c             	add    esp,0xc
c0016ca1:	5b                   	pop    ebx
c0016ca2:	5e                   	pop    esi
c0016ca3:	5f                   	pop    edi
c0016ca4:	5d                   	pop    ebp
c0016ca5:	e9 63 73 00 00       	jmp    c001e00d <unlockStuff()>
c0016caa:	83 c4 0c             	add    esp,0xc
c0016cad:	5b                   	pop    ebx
c0016cae:	5e                   	pop    esi
c0016caf:	5f                   	pop    edi
c0016cb0:	5d                   	pop    ebp
c0016cb1:	c3                   	ret    

c0016cb2 <setupTimer(int)>:
c0016cb2:	57                   	push   edi
c0016cb3:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0016cb8:	56                   	push   esi
c0016cb9:	53                   	push   ebx
c0016cba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016cbe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016cc4:	83 ec 0c             	sub    esp,0xc
c0016cc7:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016ccd:	e8 b8 d7 ff ff       	call   c001448a <Device::getName()>
c0016cd2:	83 c4 10             	add    esp,0x10
c0016cd5:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016cd8:	0f 85 8d 00 00 00    	jne    c0016d6b <setupTimer(int)+0xb9>
c0016cde:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0016ce3:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016cea:	74 7f                	je     c0016d6b <setupTimer(int)+0xb9>
c0016cec:	83 ec 0c             	sub    esp,0xc
c0016cef:	68 5c 01 00 00       	push   0x15c
c0016cf4:	e8 4a 8b ff ff       	call   c000f843 <malloc>
c0016cf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0016cfc:	89 c3                	mov    ebx,eax
c0016cfe:	e8 31 f7 00 00       	call   c0026434 <PIT::PIT()>
c0016d03:	59                   	pop    ecx
c0016d04:	5f                   	pop    edi
c0016d05:	53                   	push   ebx
c0016d06:	ff 35 08 e2 02 c0    	push   DWORD PTR ds:0xc002e208
c0016d0c:	e8 8d d4 ff ff       	call   c001419e <Device::addChild(Device*)>
c0016d11:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d13:	6a 00                	push   0x0
c0016d15:	6a 00                	push   0x0
c0016d17:	56                   	push   esi
c0016d18:	53                   	push   ebx
c0016d19:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016d1c:	83 c4 14             	add    esp,0x14
c0016d1f:	68 60 01 00 00       	push   0x160
c0016d24:	e8 1a 8b ff ff       	call   c000f843 <malloc>
c0016d29:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d2c:	89 c7                	mov    edi,eax
c0016d2e:	e8 b1 f5 00 00       	call   c00262e4 <APICTimer::APICTimer()>
c0016d33:	6a 00                	push   0x0
c0016d35:	6a 00                	push   0x0
c0016d37:	56                   	push   esi
c0016d38:	57                   	push   edi
c0016d39:	e8 a8 f4 00 00       	call   c00261e6 <APICTimer::open(int, int, void*)>
c0016d3e:	83 c4 20             	add    esp,0x20
c0016d41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d43:	6a 00                	push   0x0
c0016d45:	6a 00                	push   0x0
c0016d47:	6a 00                	push   0x0
c0016d49:	53                   	push   ebx
c0016d4a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016d4d:	58                   	pop    eax
c0016d4e:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0016d53:	5a                   	pop    edx
c0016d54:	57                   	push   edi
c0016d55:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016d5b:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016d61:	e8 38 d4 ff ff       	call   c001419e <Device::addChild(Device*)>
c0016d66:	83 c4 10             	add    esp,0x10
c0016d69:	eb 33                	jmp    c0016d9e <setupTimer(int)+0xec>
c0016d6b:	83 ec 0c             	sub    esp,0xc
c0016d6e:	68 5c 01 00 00       	push   0x15c
c0016d73:	e8 cb 8a ff ff       	call   c000f843 <malloc>
c0016d78:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d7b:	89 c3                	mov    ebx,eax
c0016d7d:	e8 b2 f6 00 00       	call   c0026434 <PIT::PIT()>
c0016d82:	58                   	pop    eax
c0016d83:	5a                   	pop    edx
c0016d84:	53                   	push   ebx
c0016d85:	ff 35 08 e2 02 c0    	push   DWORD PTR ds:0xc002e208
c0016d8b:	e8 0e d4 ff ff       	call   c001419e <Device::addChild(Device*)>
c0016d90:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d92:	6a 00                	push   0x0
c0016d94:	6a 00                	push   0x0
c0016d96:	56                   	push   esi
c0016d97:	53                   	push   ebx
c0016d98:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016d9b:	83 c4 20             	add    esp,0x20
c0016d9e:	89 d8                	mov    eax,ebx
c0016da0:	5b                   	pop    ebx
c0016da1:	5e                   	pop    esi
c0016da2:	5f                   	pop    edi
c0016da3:	c3                   	ret    

c0016da4 <VCache::VCache(PhysicalDisk*)>:
c0016da4:	53                   	push   ebx
c0016da5:	83 ec 18             	sub    esp,0x18
c0016da8:	ba 34 b1 02 c0       	mov    edx,0xc002b134
c0016dad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016db1:	89 10                	mov    DWORD PTR [eax],edx
c0016db3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016db7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016dbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016dc2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016dc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016dcd:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016dd4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016ddb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ddf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016de6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016ded:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016df1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016df8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016dfc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016e00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e04:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016e0b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016e12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e16:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016e1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e1e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016e22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e26:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016e2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e2e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016e35:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016e3d:	83 ec 0c             	sub    esp,0xc
c0016e40:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e44:	e8 fa 89 ff ff       	call   c000f843 <malloc>
c0016e49:	83 c4 10             	add    esp,0x10
c0016e4c:	89 c3                	mov    ebx,eax
c0016e4e:	83 ec 0c             	sub    esp,0xc
c0016e51:	53                   	push   ebx
c0016e52:	e8 15 6f 00 00       	call   c001dd6c <Mutex::Mutex()>
c0016e57:	83 c4 10             	add    esp,0x10
c0016e5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e5e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016e61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e65:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016e69:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016e6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e70:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016e77:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016e7b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016e81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e85:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016e88:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016e8c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016e92:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016e98:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016e9c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016e9f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016ea2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ea6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016eaa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016eae:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016eb4:	05 00 01 00 00       	add    eax,0x100
c0016eb9:	c1 e0 04             	shl    eax,0x4
c0016ebc:	83 ec 0c             	sub    esp,0xc
c0016ebf:	50                   	push   eax
c0016ec0:	e8 7e 89 ff ff       	call   c000f843 <malloc>
c0016ec5:	83 c4 10             	add    esp,0x10
c0016ec8:	89 c2                	mov    edx,eax
c0016eca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ece:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ed5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016edc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ee0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016ee4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ee8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016eee:	c1 e0 07             	shl    eax,0x7
c0016ef1:	83 ec 0c             	sub    esp,0xc
c0016ef4:	50                   	push   eax
c0016ef5:	e8 49 89 ff ff       	call   c000f843 <malloc>
c0016efa:	83 c4 10             	add    esp,0x10
c0016efd:	89 c2                	mov    edx,eax
c0016eff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f03:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016f06:	90                   	nop
c0016f07:	83 c4 18             	add    esp,0x18
c0016f0a:	5b                   	pop    ebx
c0016f0b:	c3                   	ret    

c0016f0c <VCache::invalidateReadBuffer()>:
c0016f0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f10:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016f16:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016f1a:	c3                   	ret    
c0016f1b:	90                   	nop

c0016f1c <VCache::writeWriteBuffer()>:
c0016f1c:	53                   	push   ebx
c0016f1d:	83 ec 14             	sub    esp,0x14
c0016f20:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016f24:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f27:	8b 10                	mov    edx,DWORD PTR [eax]
c0016f29:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016f2c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f2f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016f32:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016f35:	50                   	push   eax
c0016f36:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016f39:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016f40:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016f47:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016f4b:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016f52:	83 c4 28             	add    esp,0x28
c0016f55:	5b                   	pop    ebx
c0016f56:	c3                   	ret    
c0016f57:	90                   	nop

c0016f58 <VCache::~VCache()>:
c0016f58:	83 ec 0c             	sub    esp,0xc
c0016f5b:	ba 34 b1 02 c0       	mov    edx,0xc002b134
c0016f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f64:	89 10                	mov    DWORD PTR [eax],edx
c0016f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f6a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016f6d:	84 c0                	test   al,al
c0016f6f:	74 0f                	je     c0016f80 <VCache::~VCache()+0x28>
c0016f71:	83 ec 0c             	sub    esp,0xc
c0016f74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016f78:	e8 9f ff ff ff       	call   c0016f1c <VCache::writeWriteBuffer()>
c0016f7d:	83 c4 10             	add    esp,0x10
c0016f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f84:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016f87:	83 ec 0c             	sub    esp,0xc
c0016f8a:	50                   	push   eax
c0016f8b:	e8 c3 88 ff ff       	call   c000f853 <free>
c0016f90:	83 c4 10             	add    esp,0x10
c0016f93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f97:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016f9a:	83 ec 0c             	sub    esp,0xc
c0016f9d:	50                   	push   eax
c0016f9e:	e8 b0 88 ff ff       	call   c000f853 <free>
c0016fa3:	83 c4 10             	add    esp,0x10
c0016fa6:	90                   	nop
c0016fa7:	83 c4 0c             	add    esp,0xc
c0016faa:	c3                   	ret    
c0016fab:	90                   	nop

c0016fac <VCache::~VCache()>:
c0016fac:	83 ec 0c             	sub    esp,0xc
c0016faf:	83 ec 0c             	sub    esp,0xc
c0016fb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016fb6:	e8 9d ff ff ff       	call   c0016f58 <VCache::~VCache()>
c0016fbb:	83 c4 10             	add    esp,0x10
c0016fbe:	83 ec 08             	sub    esp,0x8
c0016fc1:	6a 44                	push   0x44
c0016fc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016fc7:	e8 cc bc ff ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0016fcc:	83 c4 10             	add    esp,0x10
c0016fcf:	83 c4 0c             	add    esp,0xc
c0016fd2:	c3                   	ret    
c0016fd3:	90                   	nop

c0016fd4 <VCache::write(unsigned long long, int, void*)>:
c0016fd4:	55                   	push   ebp
c0016fd5:	57                   	push   edi
c0016fd6:	56                   	push   esi
c0016fd7:	53                   	push   ebx
c0016fd8:	83 ec 28             	sub    esp,0x28
c0016fdb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016fdf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016fe3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016fe7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016feb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016fee:	e8 db 71 00 00       	call   c001e1ce <Semaphore::acquire()>
c0016ff3:	83 c4 10             	add    esp,0x10
c0016ff6:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016ffa:	74 0c                	je     c0017008 <VCache::write(unsigned long long, int, void*)+0x34>
c0016ffc:	83 ec 0c             	sub    esp,0xc
c0016fff:	53                   	push   ebx
c0017000:	e8 07 ff ff ff       	call   c0016f0c <VCache::invalidateReadBuffer()>
c0017005:	83 c4 10             	add    esp,0x10
c0017008:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001700c:	74 66                	je     c0017074 <VCache::write(unsigned long long, int, void*)+0xa0>
c001700e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017011:	99                   	cdq    
c0017012:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017016:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017019:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001701c:	89 c1                	mov    ecx,eax
c001701e:	89 d0                	mov    eax,edx
c0017020:	31 f1                	xor    ecx,esi
c0017022:	31 f8                	xor    eax,edi
c0017024:	89 ca                	mov    edx,ecx
c0017026:	09 c2                	or     edx,eax
c0017028:	75 3e                	jne    c0017068 <VCache::write(unsigned long long, int, void*)+0x94>
c001702a:	83 fd 01             	cmp    ebp,0x1
c001702d:	75 39                	jne    c0017068 <VCache::write(unsigned long long, int, void*)+0x94>
c001702f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017032:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017038:	51                   	push   ecx
c0017039:	50                   	push   eax
c001703a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001703e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0017042:	0f af c8             	imul   ecx,eax
c0017045:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0017048:	51                   	push   ecx
c0017049:	e8 f6 96 fe ff       	call   c0000744 <memcpy>
c001704e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017051:	83 c4 10             	add    esp,0x10
c0017054:	40                   	inc    eax
c0017055:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017058:	83 c0 80             	add    eax,0xffffff80
c001705b:	75 57                	jne    c00170b4 <VCache::write(unsigned long long, int, void*)+0xe0>
c001705d:	83 ec 0c             	sub    esp,0xc
c0017060:	53                   	push   ebx
c0017061:	e8 b6 fe ff ff       	call   c0016f1c <VCache::writeWriteBuffer()>
c0017066:	eb 34                	jmp    c001709c <VCache::write(unsigned long long, int, void*)+0xc8>
c0017068:	83 ec 0c             	sub    esp,0xc
c001706b:	53                   	push   ebx
c001706c:	e8 ab fe ff ff       	call   c0016f1c <VCache::writeWriteBuffer()>
c0017071:	83 c4 10             	add    esp,0x10
c0017074:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017077:	83 fd 7f             	cmp    ebp,0x7f
c001707a:	7f 25                	jg     c00170a1 <VCache::write(unsigned long long, int, void*)+0xcd>
c001707c:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001707f:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0017082:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0017085:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0017089:	52                   	push   edx
c001708a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0017090:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017094:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017097:	e8 a8 96 fe ff       	call   c0000744 <memcpy>
c001709c:	83 c4 10             	add    esp,0x10
c001709f:	eb 13                	jmp    c00170b4 <VCache::write(unsigned long long, int, void*)+0xe0>
c00170a1:	83 ec 0c             	sub    esp,0xc
c00170a4:	8b 10                	mov    edx,DWORD PTR [eax]
c00170a6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00170aa:	55                   	push   ebp
c00170ab:	57                   	push   edi
c00170ac:	56                   	push   esi
c00170ad:	50                   	push   eax
c00170ae:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00170b1:	83 c4 20             	add    esp,0x20
c00170b4:	83 ec 0c             	sub    esp,0xc
c00170b7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00170ba:	e8 bd 76 00 00       	call   c001e77c <Semaphore::release()>
c00170bf:	83 c4 2c             	add    esp,0x2c
c00170c2:	31 c0                	xor    eax,eax
c00170c4:	5b                   	pop    ebx
c00170c5:	5e                   	pop    esi
c00170c6:	5f                   	pop    edi
c00170c7:	5d                   	pop    ebp
c00170c8:	c3                   	ret    
c00170c9:	90                   	nop

c00170ca <VCache::read(unsigned long long, int, void*)>:
c00170ca:	55                   	push   ebp
c00170cb:	57                   	push   edi
c00170cc:	56                   	push   esi
c00170cd:	53                   	push   ebx
c00170ce:	83 ec 28             	sub    esp,0x28
c00170d1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00170d5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00170d9:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00170dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00170e1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00170e5:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00170e9:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00170ed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00170f0:	e8 d9 70 00 00       	call   c001e1ce <Semaphore::acquire()>
c00170f5:	83 c4 10             	add    esp,0x10
c00170f8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00170fc:	74 0c                	je     c001710a <VCache::read(unsigned long long, int, void*)+0x40>
c00170fe:	83 ec 0c             	sub    esp,0xc
c0017101:	53                   	push   ebx
c0017102:	e8 15 fe ff ff       	call   c0016f1c <VCache::writeWriteBuffer()>
c0017107:	83 c4 10             	add    esp,0x10
c001710a:	83 fe 01             	cmp    esi,0x1
c001710d:	0f 85 80 00 00 00    	jne    c0017193 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017113:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017116:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001711d:	75 74                	jne    c0017193 <VCache::read(unsigned long long, int, void*)+0xc9>
c001711f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017122:	89 d1                	mov    ecx,edx
c0017124:	f7 d9                	neg    ecx
c0017126:	89 cf                	mov    edi,ecx
c0017128:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001712c:	c1 ff 1f             	sar    edi,0x1f
c001712f:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0017132:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0017136:	89 ce                	mov    esi,ecx
c0017138:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001713c:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0017140:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017144:	89 cf                	mov    edi,ecx
c0017146:	74 0a                	je     c0017152 <VCache::read(unsigned long long, int, void*)+0x88>
c0017148:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001714b:	75 05                	jne    c0017152 <VCache::read(unsigned long long, int, void*)+0x88>
c001714d:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0017150:	74 1c                	je     c001716e <VCache::read(unsigned long long, int, void*)+0xa4>
c0017152:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017156:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0017159:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c001715c:	83 ec 0c             	sub    esp,0xc
c001715f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017161:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0017164:	52                   	push   edx
c0017165:	57                   	push   edi
c0017166:	56                   	push   esi
c0017167:	50                   	push   eax
c0017168:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001716b:	83 c4 20             	add    esp,0x20
c001716e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017171:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017177:	50                   	push   eax
c0017178:	52                   	push   edx
c0017179:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001717c:	48                   	dec    eax
c001717d:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0017181:	0f af c2             	imul   eax,edx
c0017184:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017187:	50                   	push   eax
c0017188:	55                   	push   ebp
c0017189:	e8 b6 95 fe ff       	call   c0000744 <memcpy>
c001718e:	83 c4 10             	add    esp,0x10
c0017191:	eb 21                	jmp    c00171b4 <VCache::read(unsigned long long, int, void*)+0xea>
c0017193:	83 ec 0c             	sub    esp,0xc
c0017196:	53                   	push   ebx
c0017197:	e8 70 fd ff ff       	call   c0016f0c <VCache::invalidateReadBuffer()>
c001719c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001719f:	8b 10                	mov    edx,DWORD PTR [eax]
c00171a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00171a4:	56                   	push   esi
c00171a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171ad:	50                   	push   eax
c00171ae:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00171b1:	83 c4 20             	add    esp,0x20
c00171b4:	83 ec 0c             	sub    esp,0xc
c00171b7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00171ba:	e8 bd 75 00 00       	call   c001e77c <Semaphore::release()>
c00171bf:	83 c4 2c             	add    esp,0x2c
c00171c2:	31 c0                	xor    eax,eax
c00171c4:	5b                   	pop    ebx
c00171c5:	5e                   	pop    esi
c00171c6:	5f                   	pop    edi
c00171c7:	5d                   	pop    ebp
c00171c8:	c3                   	ret    
c00171c9:	90                   	nop

c00171ca <Video::putrect(int, int, int, int, unsigned int)>:
c00171ca:	55                   	push   ebp
c00171cb:	57                   	push   edi
c00171cc:	56                   	push   esi
c00171cd:	53                   	push   ebx
c00171ce:	83 ec 1c             	sub    esp,0x1c
c00171d1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00171d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00171d9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00171dd:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00171e1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00171e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171e9:	01 df                	add    edi,ebx
c00171eb:	39 fb                	cmp    ebx,edi
c00171ed:	7d 1f                	jge    c001720e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00171ef:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00171f3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00171f7:	7d 12                	jge    c001720b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00171f9:	8b 16                	mov    edx,DWORD PTR [esi]
c00171fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00171ff:	53                   	push   ebx
c0017200:	55                   	push   ebp
c0017201:	45                   	inc    ebp
c0017202:	56                   	push   esi
c0017203:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017206:	83 c4 10             	add    esp,0x10
c0017209:	eb e8                	jmp    c00171f3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001720b:	43                   	inc    ebx
c001720c:	eb dd                	jmp    c00171eb <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001720e:	83 c4 1c             	add    esp,0x1c
c0017211:	5b                   	pop    ebx
c0017212:	5e                   	pop    esi
c0017213:	5f                   	pop    edi
c0017214:	5d                   	pop    ebp
c0017215:	c3                   	ret    

c0017216 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017216:	55                   	push   ebp
c0017217:	57                   	push   edi
c0017218:	31 ff                	xor    edi,edi
c001721a:	56                   	push   esi
c001721b:	53                   	push   ebx
c001721c:	83 ec 1c             	sub    esp,0x1c
c001721f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017223:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017227:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001722e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017233:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017237:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001723b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001723f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017242:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017246:	01 f9                	add    ecx,edi
c0017248:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001724c:	7d 2f                	jge    c001727d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001724e:	31 f6                	xor    esi,esi
c0017250:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017254:	01 f2                	add    edx,esi
c0017256:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001725a:	7d 1a                	jge    c0017276 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001725c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001725f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017262:	46                   	inc    esi
c0017263:	51                   	push   ecx
c0017264:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017268:	52                   	push   edx
c0017269:	55                   	push   ebp
c001726a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001726d:	83 c4 10             	add    esp,0x10
c0017270:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017274:	eb da                	jmp    c0017250 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017276:	47                   	inc    edi
c0017277:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001727b:	eb c5                	jmp    c0017242 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001727d:	83 c4 1c             	add    esp,0x1c
c0017280:	5b                   	pop    ebx
c0017281:	5e                   	pop    esi
c0017282:	5f                   	pop    edi
c0017283:	5d                   	pop    ebp
c0017284:	c3                   	ret    
c0017285:	90                   	nop

c0017286 <Video::blit(unsigned int*, int, int, int, int)>:
c0017286:	55                   	push   ebp
c0017287:	57                   	push   edi
c0017288:	56                   	push   esi
c0017289:	53                   	push   ebx
c001728a:	83 ec 1c             	sub    esp,0x1c
c001728d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017291:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017295:	85 c0                	test   eax,eax
c0017297:	79 02                	jns    c001729b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017299:	31 c0                	xor    eax,eax
c001729b:	c1 e0 02             	shl    eax,0x2
c001729e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00172a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172a6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00172aa:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00172ae:	39 d8                	cmp    eax,ebx
c00172b0:	7e 49                	jle    c00172fb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00172b2:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00172b8:	7c 41                	jl     c00172fb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00172ba:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00172be:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00172c2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00172c6:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00172ca:	39 f9                	cmp    ecx,edi
c00172cc:	7e 22                	jle    c00172f0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00172ce:	83 c5 04             	add    ebp,0x4
c00172d1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00172d7:	7c 14                	jl     c00172ed <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00172d9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00172db:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00172de:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00172e2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00172e6:	56                   	push   esi
c00172e7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00172ea:	83 c4 10             	add    esp,0x10
c00172ed:	47                   	inc    edi
c00172ee:	eb d2                	jmp    c00172c2 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00172f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00172f4:	43                   	inc    ebx
c00172f5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00172f9:	eb ab                	jmp    c00172a6 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00172fb:	83 c4 1c             	add    esp,0x1c
c00172fe:	5b                   	pop    ebx
c00172ff:	5e                   	pop    esi
c0017300:	5f                   	pop    edi
c0017301:	5d                   	pop    ebp
c0017302:	c3                   	ret    
c0017303:	90                   	nop

c0017304 <Video::clearScreen(unsigned int)>:
c0017304:	57                   	push   edi
c0017305:	56                   	push   esi
c0017306:	53                   	push   ebx
c0017307:	31 db                	xor    ebx,ebx
c0017309:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001730d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017313:	7e 1f                	jle    c0017334 <Video::clearScreen(unsigned int)+0x30>
c0017315:	31 ff                	xor    edi,edi
c0017317:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001731d:	7e 12                	jle    c0017331 <Video::clearScreen(unsigned int)+0x2d>
c001731f:	8b 06                	mov    eax,DWORD PTR [esi]
c0017321:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017325:	53                   	push   ebx
c0017326:	57                   	push   edi
c0017327:	47                   	inc    edi
c0017328:	56                   	push   esi
c0017329:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001732c:	83 c4 10             	add    esp,0x10
c001732f:	eb e6                	jmp    c0017317 <Video::clearScreen(unsigned int)+0x13>
c0017331:	43                   	inc    ebx
c0017332:	eb d9                	jmp    c001730d <Video::clearScreen(unsigned int)+0x9>
c0017334:	5b                   	pop    ebx
c0017335:	5e                   	pop    esi
c0017336:	5f                   	pop    edi
c0017337:	c3                   	ret    

c0017338 <Video::putpixel(int, int, unsigned int)>:
c0017338:	c7 44 24 04 3c b1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b13c
c0017340:	e9 0e 31 00 00       	jmp    c001a453 <Krnl::panic(char const*)>
c0017345:	90                   	nop

c0017346 <Video::Video(char const*)>:
c0017346:	83 ec 0c             	sub    esp,0xc
c0017349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001734d:	83 ec 08             	sub    esp,0x8
c0017350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017354:	50                   	push   eax
c0017355:	e8 34 d0 ff ff       	call   c001438e <Device::Device(char const*)>
c001735a:	83 c4 10             	add    esp,0x10
c001735d:	ba c0 b1 02 c0       	mov    edx,0xc002b1c0
c0017362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017366:	89 10                	mov    DWORD PTR [eax],edx
c0017368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001736c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017376:	90                   	nop
c0017377:	83 c4 0c             	add    esp,0xc
c001737a:	c3                   	ret    
c001737b:	90                   	nop

c001737c <Video::~Video()>:
c001737c:	83 ec 0c             	sub    esp,0xc
c001737f:	ba c0 b1 02 c0       	mov    edx,0xc002b1c0
c0017384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017388:	89 10                	mov    DWORD PTR [eax],edx
c001738a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001738e:	83 ec 0c             	sub    esp,0xc
c0017391:	50                   	push   eax
c0017392:	e8 d9 cc ff ff       	call   c0014070 <Device::~Device()>
c0017397:	83 c4 10             	add    esp,0x10
c001739a:	90                   	nop
c001739b:	83 c4 0c             	add    esp,0xc
c001739e:	c3                   	ret    
c001739f:	90                   	nop

c00173a0 <Video::~Video()>:
c00173a0:	83 ec 0c             	sub    esp,0xc
c00173a3:	83 ec 0c             	sub    esp,0xc
c00173a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173aa:	e8 cd ff ff ff       	call   c001737c <Video::~Video()>
c00173af:	83 c4 10             	add    esp,0x10
c00173b2:	83 ec 08             	sub    esp,0x8
c00173b5:	68 64 01 00 00       	push   0x164
c00173ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173be:	e8 d5 b8 ff ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c00173c3:	83 c4 10             	add    esp,0x10
c00173c6:	83 c4 0c             	add    esp,0xc
c00173c9:	c3                   	ret    

c00173ca <Video::isMonochrome()>:
c00173ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00173ce:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00173d4:	c3                   	ret    
c00173d5:	90                   	nop

c00173d6 <Video::getWidth()>:
c00173d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00173da:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00173e0:	c3                   	ret    
c00173e1:	90                   	nop

c00173e2 <Video::getHeight()>:
c00173e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00173e6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00173ec:	c3                   	ret    
c00173ed:	90                   	nop

c00173ee <Video::drawCursor(int, int, unsigned char*, int)>:
c00173ee:	55                   	push   ebp
c00173ef:	57                   	push   edi
c00173f0:	56                   	push   esi
c00173f1:	53                   	push   ebx
c00173f2:	83 ec 2c             	sub    esp,0x2c
c00173f5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00173f9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00173fd:	83 f8 01             	cmp    eax,0x1
c0017400:	19 c9                	sbb    ecx,ecx
c0017402:	31 db                	xor    ebx,ebx
c0017404:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017408:	89 cd                	mov    ebp,ecx
c001740a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017412:	f7 d5                	not    ebp
c0017414:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001741a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001741e:	01 d8                	add    eax,ebx
c0017420:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017424:	56                   	push   esi
c0017425:	e8 b8 ff ff ff       	call   c00173e2 <Video::getHeight()>
c001742a:	59                   	pop    ecx
c001742b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001742f:	7e 70                	jle    c00174a1 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017431:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017435:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017439:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001743c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017440:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017444:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001744b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001744f:	89 f8                	mov    eax,edi
c0017451:	83 c0 20             	add    eax,0x20
c0017454:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017458:	56                   	push   esi
c0017459:	e8 78 ff ff ff       	call   c00173d6 <Video::getWidth()>
c001745e:	5a                   	pop    edx
c001745f:	39 c7                	cmp    edi,eax
c0017461:	7d 34                	jge    c0017497 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017463:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017468:	74 05                	je     c001746f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001746a:	8b 06                	mov    eax,DWORD PTR [esi]
c001746c:	55                   	push   ebp
c001746d:	eb 0d                	jmp    c001747c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001746f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017474:	74 12                	je     c0017488 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017476:	8b 06                	mov    eax,DWORD PTR [esi]
c0017478:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001747c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017480:	57                   	push   edi
c0017481:	56                   	push   esi
c0017482:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017485:	83 c4 10             	add    esp,0x10
c0017488:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001748c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017490:	47                   	inc    edi
c0017491:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017495:	75 c1                	jne    c0017458 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017497:	43                   	inc    ebx
c0017498:	83 fb 20             	cmp    ebx,0x20
c001749b:	0f 85 79 ff ff ff    	jne    c001741a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00174a1:	83 c4 2c             	add    esp,0x2c
c00174a4:	5b                   	pop    ebx
c00174a5:	5e                   	pop    esi
c00174a6:	5f                   	pop    edi
c00174a7:	5d                   	pop    ebp
c00174a8:	c3                   	ret    
c00174a9:	90                   	nop

c00174aa <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00174aa:	55                   	push   ebp
c00174ab:	57                   	push   edi
c00174ac:	56                   	push   esi
c00174ad:	53                   	push   ebx
c00174ae:	83 ec 28             	sub    esp,0x28
c00174b1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00174b5:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00174b9:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00174bd:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00174c1:	c1 e7 08             	shl    edi,0x8
c00174c4:	01 c7                	add    edi,eax
c00174c6:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00174ca:	c1 e0 08             	shl    eax,0x8
c00174cd:	01 d0                	add    eax,edx
c00174cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174d7:	0f af c7             	imul   eax,edi
c00174da:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00174e1:	50                   	push   eax
c00174e2:	e8 5c 83 ff ff       	call   c000f843 <malloc>
c00174e7:	83 c4 10             	add    esp,0x10
c00174ea:	89 c5                	mov    ebp,eax
c00174ec:	85 c0                	test   eax,eax
c00174ee:	75 15                	jne    c0017505 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00174f0:	83 ec 0c             	sub    esp,0xc
c00174f3:	68 5d b1 02 c0       	push   0xc002b15d
c00174f8:	e8 7b b8 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00174fd:	83 c4 10             	add    esp,0x10
c0017500:	e9 1c 01 00 00       	jmp    c0017621 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017505:	be 12 00 00 00       	mov    esi,0x12
c001750a:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001750e:	74 11                	je     c0017521 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017510:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017514:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017518:	c1 fe 03             	sar    esi,0x3
c001751b:	0f af f0             	imul   esi,eax
c001751e:	83 c6 12             	add    esi,0x12
c0017521:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017525:	74 04                	je     c001752b <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017527:	85 ff                	test   edi,edi
c0017529:	75 12                	jne    c001753d <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c001752b:	83 ec 0c             	sub    esp,0xc
c001752e:	68 74 b1 02 c0       	push   0xc002b174
c0017533:	e8 40 b8 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0017538:	e9 ce 00 00 00       	jmp    c001760b <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c001753d:	52                   	push   edx
c001753e:	52                   	push   edx
c001753f:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017543:	50                   	push   eax
c0017544:	68 89 b1 02 c0       	push   0xc002b189
c0017549:	e8 2a b8 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001754e:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017552:	83 c4 10             	add    esp,0x10
c0017555:	80 fa 02             	cmp    dl,0x2
c0017558:	0f 85 98 00 00 00    	jne    c00175f6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c001755e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017563:	75 10                	jne    c0017575 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017565:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017569:	75 0a                	jne    c0017575 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001756b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001756e:	83 e8 18             	sub    eax,0x18
c0017571:	a8 f7                	test   al,0xf7
c0017573:	74 0a                	je     c001757f <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017575:	83 ec 0c             	sub    esp,0xc
c0017578:	68 96 b1 02 c0       	push   0xc002b196
c001757d:	eb 7f                	jmp    c00175fe <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c001757f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017587:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001758f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017593:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001759b:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001759f:	75 0c                	jne    c00175ad <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00175a1:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00175a6:	c1 e0 18             	shl    eax,0x18
c00175a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00175ad:	41                   	inc    ecx
c00175ae:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00175b3:	c1 e2 10             	shl    edx,0x10
c00175b6:	89 d0                	mov    eax,edx
c00175b8:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00175bd:	c1 e2 08             	shl    edx,0x8
c00175c0:	09 c2                	or     edx,eax
c00175c2:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00175c6:	09 c2                	or     edx,eax
c00175c8:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00175cc:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00175d0:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00175d4:	c1 f8 03             	sar    eax,0x3
c00175d7:	01 c6                	add    esi,eax
c00175d9:	89 c8                	mov    eax,ecx
c00175db:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00175df:	39 c7                	cmp    edi,eax
c00175e1:	7f b0                	jg     c0017593 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00175e3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00175e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00175eb:	39 14 24             	cmp    DWORD PTR [esp],edx
c00175ee:	7e 22                	jle    c0017612 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00175f0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00175f4:	eb 99                	jmp    c001758f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00175f6:	50                   	push   eax
c00175f7:	50                   	push   eax
c00175f8:	52                   	push   edx
c00175f9:	68 a4 b1 02 c0       	push   0xc002b1a4
c00175fe:	e8 75 b7 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0017603:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017606:	e8 48 82 ff ff       	call   c000f853 <free>
c001760b:	83 c4 10             	add    esp,0x10
c001760e:	31 ed                	xor    ebp,ebp
c0017610:	eb 0f                	jmp    c0017621 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017612:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017616:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017619:	89 38                	mov    DWORD PTR [eax],edi
c001761b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001761f:	89 08                	mov    DWORD PTR [eax],ecx
c0017621:	83 c4 1c             	add    esp,0x1c
c0017624:	89 e8                	mov    eax,ebp
c0017626:	5b                   	pop    ebx
c0017627:	5e                   	pop    esi
c0017628:	5f                   	pop    edi
c0017629:	5d                   	pop    ebp
c001762a:	c3                   	ret    
c001762b:	90                   	nop

c001762c <Video::putTGA(int, int, unsigned char*, int)>:
c001762c:	55                   	push   ebp
c001762d:	57                   	push   edi
c001762e:	56                   	push   esi
c001762f:	53                   	push   ebx
c0017630:	83 ec 28             	sub    esp,0x28
c0017633:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017637:	8d 44 24 18          	lea    eax,[esp+0x18]
c001763b:	50                   	push   eax
c001763c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017640:	50                   	push   eax
c0017641:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017645:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017649:	56                   	push   esi
c001764a:	e8 5b fe ff ff       	call   c00174aa <Video::tgaParse(unsigned char*, int, int*, int*)>
c001764f:	83 c4 20             	add    esp,0x20
c0017652:	85 c0                	test   eax,eax
c0017654:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017658:	74 35                	je     c001768f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001765a:	89 c7                	mov    edi,eax
c001765c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017660:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017664:	39 d8                	cmp    eax,ebx
c0017666:	7e 27                	jle    c001768f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017668:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001766c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017670:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017674:	39 e8                	cmp    eax,ebp
c0017676:	7e 14                	jle    c001768c <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017678:	8b 06                	mov    eax,DWORD PTR [esi]
c001767a:	83 c7 04             	add    edi,0x4
c001767d:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017680:	53                   	push   ebx
c0017681:	55                   	push   ebp
c0017682:	45                   	inc    ebp
c0017683:	56                   	push   esi
c0017684:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017687:	83 c4 10             	add    esp,0x10
c001768a:	eb e0                	jmp    c001766c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001768c:	43                   	inc    ebx
c001768d:	eb cd                	jmp    c001765c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001768f:	83 c4 1c             	add    esp,0x1c
c0017692:	5b                   	pop    ebx
c0017693:	5e                   	pop    esi
c0017694:	5f                   	pop    edi
c0017695:	5d                   	pop    ebp
c0017696:	c3                   	ret    
c0017697:	90                   	nop

c0017698 <ACPI::close(int, int, void*)>:
c0017698:	83 ec 1c             	sub    esp,0x1c
c001769b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00176a3:	74 0a                	je     c00176af <ACPI::close(int, int, void*)+0x17>
c00176a5:	b8 00 00 00 00       	mov    eax,0x0
c00176aa:	e9 9a 00 00 00       	jmp    c0017749 <ACPI::close(int, int, void*)+0xb1>
c00176af:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00176b4:	75 37                	jne    c00176ed <ACPI::close(int, int, void*)+0x55>
c00176b6:	83 ec 0c             	sub    esp,0xc
c00176b9:	68 00 b2 02 c0       	push   0xc002b200
c00176be:	e8 b5 b6 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00176c3:	83 c4 10             	add    esp,0x10
c00176c6:	a1 c8 08 03 c0       	mov    eax,ds:0xc00308c8
c00176cb:	85 c0                	test   eax,eax
c00176cd:	74 07                	je     c00176d6 <ACPI::close(int, int, void*)+0x3e>
c00176cf:	a1 c8 08 03 c0       	mov    eax,ds:0xc00308c8
c00176d4:	ff d0                	call   eax
c00176d6:	83 ec 0c             	sub    esp,0xc
c00176d9:	68 24 b3 02 c0       	push   0xc002b324
c00176de:	e8 70 2d 00 00       	call   c001a453 <Krnl::panic(char const*)>
c00176e3:	83 c4 10             	add    esp,0x10
c00176e6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00176eb:	eb 5c                	jmp    c0017749 <ACPI::close(int, int, void*)+0xb1>
c00176ed:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00176f2:	75 50                	jne    c0017744 <ACPI::close(int, int, void*)+0xac>
c00176f4:	a1 c4 08 03 c0       	mov    eax,ds:0xc00308c4
c00176f9:	85 c0                	test   eax,eax
c00176fb:	74 07                	je     c0017704 <ACPI::close(int, int, void*)+0x6c>
c00176fd:	a1 c4 08 03 c0       	mov    eax,ds:0xc00308c4
c0017702:	ff d0                	call   eax
c0017704:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017709:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001770e:	83 e0 02             	and    eax,0x2
c0017711:	74 1c                	je     c001772f <ACPI::close(int, int, void*)+0x97>
c0017713:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001771a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001771e:	89 c2                	mov    edx,eax
c0017720:	ec                   	in     al,dx
c0017721:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017725:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017729:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001772d:	eb da                	jmp    c0017709 <ACPI::close(int, int, void*)+0x71>
c001772f:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017736:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001773b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001773f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017743:	ee                   	out    dx,al
c0017744:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017749:	83 c4 1c             	add    esp,0x1c
c001774c:	c3                   	ret    

c001774d <findRSDP()>:
c001774d:	83 ec 1c             	sub    esp,0x1c
c0017750:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0017755:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001775b:	83 e0 04             	and    eax,0x4
c001775e:	84 c0                	test   al,al
c0017760:	75 07                	jne    c0017769 <findRSDP()+0x1c>
c0017762:	b8 00 00 00 00       	mov    eax,0x0
c0017767:	eb 6a                	jmp    c00177d3 <findRSDP()+0x86>
c0017769:	a1 54 e2 02 c0       	mov    eax,ds:0xc002e254
c001776e:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017773:	7f 1b                	jg     c0017790 <findRSDP()+0x43>
c0017775:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c001777a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017780:	83 e2 fb             	and    edx,0xfffffffb
c0017783:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017789:	b8 00 00 00 00       	mov    eax,0x0
c001778e:	eb 43                	jmp    c00177d3 <findRSDP()+0x86>
c0017790:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017798:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00177a0:	77 2c                	ja     c00177ce <findRSDP()+0x81>
c00177a2:	83 ec 04             	sub    esp,0x4
c00177a5:	6a 08                	push   0x8
c00177a7:	68 0d b2 02 c0       	push   0xc002b20d
c00177ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00177b0:	e8 8b 8e fe ff       	call   c0000640 <memcmp>
c00177b5:	83 c4 10             	add    esp,0x10
c00177b8:	85 c0                	test   eax,eax
c00177ba:	0f 94 c0             	sete   al
c00177bd:	84 c0                	test   al,al
c00177bf:	74 06                	je     c00177c7 <findRSDP()+0x7a>
c00177c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00177c5:	eb 0c                	jmp    c00177d3 <findRSDP()+0x86>
c00177c7:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00177cc:	eb ca                	jmp    c0017798 <findRSDP()+0x4b>
c00177ce:	b8 00 00 00 00       	mov    eax,0x0
c00177d3:	83 c4 1c             	add    esp,0x1c
c00177d6:	c3                   	ret    

c00177d7 <loadACPITables(unsigned char*)>:
c00177d7:	56                   	push   esi
c00177d8:	53                   	push   ebx
c00177d9:	83 ec 44             	sub    esp,0x44
c00177dc:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c00177e1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00177e7:	83 e0 04             	and    eax,0x4
c00177ea:	84 c0                	test   al,al
c00177ec:	0f 84 05 02 00 00    	je     c00179f7 <loadACPITables(unsigned char*)+0x220>
c00177f2:	a0 e0 0a 03 c0       	mov    al,ds:0xc0030ae0
c00177f7:	84 c0                	test   al,al
c00177f9:	74 75                	je     c0017870 <loadACPITables(unsigned char*)+0x99>
c00177fb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00177ff:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017803:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017807:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001780a:	83 e8 24             	sub    eax,0x24
c001780d:	c1 e8 03             	shr    eax,0x3
c0017810:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017814:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001781c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017820:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017824:	0f 8d b2 00 00 00    	jge    c00178dc <loadACPITables(unsigned char*)+0x105>
c001782a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001782e:	83 c0 24             	add    eax,0x24
c0017831:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017835:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017839:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001783d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017841:	c1 e0 03             	shl    eax,0x3
c0017844:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017848:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001784c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001784f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017851:	89 c1                	mov    ecx,eax
c0017853:	a1 cc 08 03 c0       	mov    eax,ds:0xc00308cc
c0017858:	8d 50 01             	lea    edx,[eax+0x1]
c001785b:	89 15 cc 08 03 c0    	mov    DWORD PTR ds:0xc00308cc,edx
c0017861:	89 ca                	mov    edx,ecx
c0017863:	89 14 c5 e4 08 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf71c],edx
c001786a:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c001786e:	eb ac                	jmp    c001781c <loadACPITables(unsigned char*)+0x45>
c0017870:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017874:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017878:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001787c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001787f:	83 e8 24             	sub    eax,0x24
c0017882:	c1 e8 02             	shr    eax,0x2
c0017885:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017889:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017891:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017895:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017899:	7d 41                	jge    c00178dc <loadACPITables(unsigned char*)+0x105>
c001789b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001789f:	83 c0 24             	add    eax,0x24
c00178a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00178a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00178aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00178ae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178b2:	c1 e0 02             	shl    eax,0x2
c00178b5:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00178b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00178bd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00178bf:	a1 cc 08 03 c0       	mov    eax,ds:0xc00308cc
c00178c4:	8d 50 01             	lea    edx,[eax+0x1]
c00178c7:	89 15 cc 08 03 c0    	mov    DWORD PTR ds:0xc00308cc,edx
c00178cd:	89 ca                	mov    edx,ecx
c00178cf:	89 14 c5 e4 08 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf71c],edx
c00178d6:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00178da:	eb b5                	jmp    c0017891 <loadACPITables(unsigned char*)+0xba>
c00178dc:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00178e4:	a1 cc 08 03 c0       	mov    eax,ds:0xc00308cc
c00178e9:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c00178ed:	0f 8d 05 01 00 00    	jge    c00179f8 <loadACPITables(unsigned char*)+0x221>
c00178f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178f7:	8b 04 c5 e4 08 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf71c]
c00178fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001790a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001790e:	25 ff 0f 00 00       	and    eax,0xfff
c0017913:	89 c6                	mov    esi,eax
c0017915:	e8 cc a4 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c001791a:	89 c3                	mov    ebx,eax
c001791c:	83 ec 0c             	sub    esp,0xc
c001791f:	6a 01                	push   0x1
c0017921:	e8 19 a2 ff ff       	call   c0011b3f <Virt::allocateKernelVirtualPages(int)>
c0017926:	83 c4 10             	add    esp,0x10
c0017929:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001792d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017933:	83 ec 0c             	sub    esp,0xc
c0017936:	6a 01                	push   0x1
c0017938:	6a 01                	push   0x1
c001793a:	50                   	push   eax
c001793b:	52                   	push   edx
c001793c:	53                   	push   ebx
c001793d:	e8 ba ab ff ff       	call   c00124fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017942:	83 c4 20             	add    esp,0x20
c0017945:	09 f0                	or     eax,esi
c0017947:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001794b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001794f:	c1 e0 03             	shl    eax,0x3
c0017952:	05 e0 08 03 c0       	add    eax,0xc00308e0
c0017957:	83 ec 04             	sub    esp,0x4
c001795a:	6a 04                	push   0x4
c001795c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017960:	50                   	push   eax
c0017961:	e8 de 8d fe ff       	call   c0000744 <memcpy>
c0017966:	83 c4 10             	add    esp,0x10
c0017969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001796d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017970:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017974:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017978:	05 00 10 00 00       	add    eax,0x1000
c001797d:	c1 e8 0c             	shr    eax,0xc
c0017980:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017988:	89 04 24             	mov    DWORD PTR [esp],eax
c001798b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001798f:	25 ff 0f 00 00       	and    eax,0xfff
c0017994:	89 c6                	mov    esi,eax
c0017996:	e8 4b a4 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c001799b:	89 c3                	mov    ebx,eax
c001799d:	83 ec 0c             	sub    esp,0xc
c00179a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00179a4:	e8 96 a1 ff ff       	call   c0011b3f <Virt::allocateKernelVirtualPages(int)>
c00179a9:	83 c4 10             	add    esp,0x10
c00179ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00179b0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00179b6:	83 ec 0c             	sub    esp,0xc
c00179b9:	6a 01                	push   0x1
c00179bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00179bf:	50                   	push   eax
c00179c0:	52                   	push   edx
c00179c1:	53                   	push   ebx
c00179c2:	e8 35 ab ff ff       	call   c00124fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00179c7:	83 c4 20             	add    esp,0x20
c00179ca:	09 f0                	or     eax,esi
c00179cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00179d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00179d3:	83 ec 0c             	sub    esp,0xc
c00179d6:	50                   	push   eax
c00179d7:	e8 c5 a4 ff ff       	call   c0011ea1 <Virt::freeKernelVirtualPages(unsigned long)>
c00179dc:	83 c4 10             	add    esp,0x10
c00179df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00179e7:	89 14 c5 e4 08 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf71c],edx
c00179ee:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c00179f2:	e9 ed fe ff ff       	jmp    c00178e4 <loadACPITables(unsigned char*)+0x10d>
c00179f7:	90                   	nop
c00179f8:	83 c4 44             	add    esp,0x44
c00179fb:	5b                   	pop    ebx
c00179fc:	5e                   	pop    esi
c00179fd:	c3                   	ret    

c00179fe <findRSDT(unsigned char*)>:
c00179fe:	56                   	push   esi
c00179ff:	53                   	push   ebx
c0017a00:	83 ec 44             	sub    esp,0x44
c0017a03:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0017a08:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a0e:	83 e0 04             	and    eax,0x4
c0017a11:	84 c0                	test   al,al
c0017a13:	75 0a                	jne    c0017a1f <findRSDT(unsigned char*)+0x21>
c0017a15:	b8 00 00 00 00       	mov    eax,0x0
c0017a1a:	e9 f7 00 00 00       	jmp    c0017b16 <findRSDT(unsigned char*)+0x118>
c0017a1f:	83 ec 04             	sub    esp,0x4
c0017a22:	6a 24                	push   0x24
c0017a24:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017a28:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017a2c:	50                   	push   eax
c0017a2d:	e8 12 8d fe ff       	call   c0000744 <memcpy>
c0017a32:	83 c4 10             	add    esp,0x10
c0017a35:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017a39:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017a3d:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017a45:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a49:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a4d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017a51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017a59:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a5d:	25 ff 0f 00 00       	and    eax,0xfff
c0017a62:	89 c6                	mov    esi,eax
c0017a64:	e8 7d a3 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0017a69:	89 c3                	mov    ebx,eax
c0017a6b:	83 ec 0c             	sub    esp,0xc
c0017a6e:	6a 02                	push   0x2
c0017a70:	e8 ca a0 ff ff       	call   c0011b3f <Virt::allocateKernelVirtualPages(int)>
c0017a75:	83 c4 10             	add    esp,0x10
c0017a78:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017a7c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017a82:	83 ec 0c             	sub    esp,0xc
c0017a85:	6a 01                	push   0x1
c0017a87:	6a 02                	push   0x2
c0017a89:	50                   	push   eax
c0017a8a:	52                   	push   edx
c0017a8b:	53                   	push   ebx
c0017a8c:	e8 6b aa ff ff       	call   c00124fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017a91:	83 c4 20             	add    esp,0x20
c0017a94:	09 f0                	or     eax,esi
c0017a96:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017a9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a9e:	25 ff 0f 00 00       	and    eax,0xfff
c0017aa3:	89 c6                	mov    esi,eax
c0017aa5:	e8 3c a3 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0017aaa:	89 c3                	mov    ebx,eax
c0017aac:	83 ec 0c             	sub    esp,0xc
c0017aaf:	6a 02                	push   0x2
c0017ab1:	e8 89 a0 ff ff       	call   c0011b3f <Virt::allocateKernelVirtualPages(int)>
c0017ab6:	83 c4 10             	add    esp,0x10
c0017ab9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017abd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017ac3:	83 ec 0c             	sub    esp,0xc
c0017ac6:	6a 01                	push   0x1
c0017ac8:	6a 02                	push   0x2
c0017aca:	50                   	push   eax
c0017acb:	52                   	push   edx
c0017acc:	53                   	push   ebx
c0017acd:	e8 2a aa ff ff       	call   c00124fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017ad2:	83 c4 20             	add    esp,0x20
c0017ad5:	09 f0                	or     eax,esi
c0017ad7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017adb:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017ae0:	75 11                	jne    c0017af3 <findRSDT(unsigned char*)+0xf5>
c0017ae2:	c6 05 e0 0a 03 c0 00 	mov    BYTE PTR ds:0xc0030ae0,0x0
c0017ae9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017aed:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017af1:	eb 1f                	jmp    c0017b12 <findRSDT(unsigned char*)+0x114>
c0017af3:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017af8:	75 11                	jne    c0017b0b <findRSDT(unsigned char*)+0x10d>
c0017afa:	c6 05 e0 0a 03 c0 01 	mov    BYTE PTR ds:0xc0030ae0,0x1
c0017b01:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b05:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017b09:	eb 07                	jmp    c0017b12 <findRSDT(unsigned char*)+0x114>
c0017b0b:	b8 00 00 00 00       	mov    eax,0x0
c0017b10:	eb 04                	jmp    c0017b16 <findRSDT(unsigned char*)+0x118>
c0017b12:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017b16:	83 c4 44             	add    esp,0x44
c0017b19:	5b                   	pop    ebx
c0017b1a:	5e                   	pop    esi
c0017b1b:	c3                   	ret    

c0017b1c <findDataTable(unsigned char*, char*)>:
c0017b1c:	83 ec 1c             	sub    esp,0x1c
c0017b1f:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0017b24:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b2a:	83 e0 04             	and    eax,0x4
c0017b2d:	84 c0                	test   al,al
c0017b2f:	75 07                	jne    c0017b38 <findDataTable(unsigned char*, char*)+0x1c>
c0017b31:	b8 00 00 00 00       	mov    eax,0x0
c0017b36:	eb 7c                	jmp    c0017bb4 <findDataTable(unsigned char*, char*)+0x98>
c0017b38:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017b40:	a1 cc 08 03 c0       	mov    eax,ds:0xc00308cc
c0017b45:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017b49:	7d 3a                	jge    c0017b85 <findDataTable(unsigned char*, char*)+0x69>
c0017b4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b4f:	c1 e0 03             	shl    eax,0x3
c0017b52:	05 e0 08 03 c0       	add    eax,0xc00308e0
c0017b57:	83 ec 04             	sub    esp,0x4
c0017b5a:	6a 04                	push   0x4
c0017b5c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b60:	50                   	push   eax
c0017b61:	e8 da 8a fe ff       	call   c0000640 <memcmp>
c0017b66:	83 c4 10             	add    esp,0x10
c0017b69:	85 c0                	test   eax,eax
c0017b6b:	0f 94 c0             	sete   al
c0017b6e:	84 c0                	test   al,al
c0017b70:	74 0d                	je     c0017b7f <findDataTable(unsigned char*, char*)+0x63>
c0017b72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b76:	8b 04 c5 e4 08 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf71c]
c0017b7d:	eb 35                	jmp    c0017bb4 <findDataTable(unsigned char*, char*)+0x98>
c0017b7f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017b83:	eb bb                	jmp    c0017b40 <findDataTable(unsigned char*, char*)+0x24>
c0017b85:	a0 e0 0a 03 c0       	mov    al,ds:0xc0030ae0
c0017b8a:	84 c0                	test   al,al
c0017b8c:	74 07                	je     c0017b95 <findDataTable(unsigned char*, char*)+0x79>
c0017b8e:	b8 58 00 00 00       	mov    eax,0x58
c0017b93:	eb 05                	jmp    c0017b9a <findDataTable(unsigned char*, char*)+0x7e>
c0017b95:	b8 52 00 00 00       	mov    eax,0x52
c0017b9a:	83 ec 04             	sub    esp,0x4
c0017b9d:	50                   	push   eax
c0017b9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ba2:	68 48 b3 02 c0       	push   0xc002b348
c0017ba7:	e8 cc b1 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0017bac:	83 c4 10             	add    esp,0x10
c0017baf:	b8 00 00 00 00       	mov    eax,0x0
c0017bb4:	83 c4 1c             	add    esp,0x1c
c0017bb7:	c3                   	ret    

c0017bb8 <scanMADT()>:
c0017bb8:	53                   	push   ebx
c0017bb9:	83 ec 38             	sub    esp,0x38
c0017bbc:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0017bc1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017bc7:	83 e0 04             	and    eax,0x4
c0017bca:	84 c0                	test   al,al
c0017bcc:	0f 84 63 04 00 00    	je     c0018035 <scanMADT()+0x47d>
c0017bd2:	e8 76 fb ff ff       	call   c001774d <findRSDP()>
c0017bd7:	a3 ec 0a 03 c0       	mov    ds:0xc0030aec,eax
c0017bdc:	a1 ec 0a 03 c0       	mov    eax,ds:0xc0030aec
c0017be1:	85 c0                	test   eax,eax
c0017be3:	75 19                	jne    c0017bfe <scanMADT()+0x46>
c0017be5:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0017bea:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017bf0:	83 e2 fb             	and    edx,0xfffffffb
c0017bf3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017bf9:	e9 3b 04 00 00       	jmp    c0018039 <scanMADT()+0x481>
c0017bfe:	a1 ec 0a 03 c0       	mov    eax,ds:0xc0030aec
c0017c03:	83 ec 0c             	sub    esp,0xc
c0017c06:	50                   	push   eax
c0017c07:	e8 f2 fd ff ff       	call   c00179fe <findRSDT(unsigned char*)>
c0017c0c:	83 c4 10             	add    esp,0x10
c0017c0f:	a3 e8 0a 03 c0       	mov    ds:0xc0030ae8,eax
c0017c14:	a1 e8 0a 03 c0       	mov    eax,ds:0xc0030ae8
c0017c19:	85 c0                	test   eax,eax
c0017c1b:	75 19                	jne    c0017c36 <scanMADT()+0x7e>
c0017c1d:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0017c22:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017c28:	83 e2 fb             	and    edx,0xfffffffb
c0017c2b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017c31:	e9 03 04 00 00       	jmp    c0018039 <scanMADT()+0x481>
c0017c36:	a1 e8 0a 03 c0       	mov    eax,ds:0xc0030ae8
c0017c3b:	83 ec 0c             	sub    esp,0xc
c0017c3e:	50                   	push   eax
c0017c3f:	e8 93 fb ff ff       	call   c00177d7 <loadACPITables(unsigned char*)>
c0017c44:	83 c4 10             	add    esp,0x10
c0017c47:	a1 e8 0a 03 c0       	mov    eax,ds:0xc0030ae8
c0017c4c:	83 ec 08             	sub    esp,0x8
c0017c4f:	68 16 b2 02 c0       	push   0xc002b216
c0017c54:	50                   	push   eax
c0017c55:	e8 c2 fe ff ff       	call   c0017b1c <findDataTable(unsigned char*, char*)>
c0017c5a:	83 c4 10             	add    esp,0x10
c0017c5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017c61:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017c66:	75 19                	jne    c0017c81 <scanMADT()+0xc9>
c0017c68:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0017c6d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017c73:	83 e2 fe             	and    edx,0xfffffffe
c0017c76:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017c7c:	e9 b8 03 00 00       	jmp    c0018039 <scanMADT()+0x481>
c0017c81:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017c89:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c8d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c90:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017c94:	0f 87 9f 03 00 00    	ja     c0018039 <scanMADT()+0x481>
c0017c9a:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017ca2:	0f 87 91 03 00 00    	ja     c0018039 <scanMADT()+0x481>
c0017ca8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cac:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017cb0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cb4:	8d 50 01             	lea    edx,[eax+0x1]
c0017cb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017cbb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cbf:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017cc3:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017cc7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ccb:	8d 50 01             	lea    edx,[eax+0x1]
c0017cce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017cd2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cd6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017cda:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017cde:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017ce3:	0f 86 4f 03 00 00    	jbe    c0018038 <scanMADT()+0x480>
c0017ce9:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017cee:	75 57                	jne    c0017d47 <scanMADT()+0x18f>
c0017cf0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cf4:	8d 50 01             	lea    edx,[eax+0x1]
c0017cf7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017cfb:	8a 15 e0 0c 03 c0    	mov    dl,BYTE PTR ds:0xc0030ce0
c0017d01:	0f b6 d2             	movzx  edx,dl
c0017d04:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017d08:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017d0c:	88 82 20 0d 03 c0    	mov    BYTE PTR [edx-0x3ffcf2e0],al
c0017d12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d16:	8d 50 01             	lea    edx,[eax+0x1]
c0017d19:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d1d:	8a 15 e0 0c 03 c0    	mov    dl,BYTE PTR ds:0xc0030ce0
c0017d23:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017d26:	88 0d e0 0c 03 c0    	mov    BYTE PTR ds:0xc0030ce0,cl
c0017d2c:	0f b6 d2             	movzx  edx,dl
c0017d2f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017d33:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017d37:	88 82 00 0d 03 c0    	mov    BYTE PTR [edx-0x3ffcf300],al
c0017d3d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017d42:	e9 da 02 00 00       	jmp    c0018021 <scanMADT()+0x469>
c0017d47:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017d4c:	0f 85 14 01 00 00    	jne    c0017e66 <scanMADT()+0x2ae>
c0017d52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d56:	8d 50 01             	lea    edx,[eax+0x1]
c0017d59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d5d:	8a 15 a0 0b 03 c0    	mov    dl,BYTE PTR ds:0xc0030ba0
c0017d63:	0f b6 d2             	movzx  edx,dl
c0017d66:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017d6a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017d6e:	88 82 c0 0b 03 c0    	mov    BYTE PTR [edx-0x3ffcf440],al
c0017d74:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017d78:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d7c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d80:	01 d0                	add    eax,edx
c0017d82:	83 c0 2c             	add    eax,0x2c
c0017d85:	8a 00                	mov    al,BYTE PTR [eax]
c0017d87:	0f b6 d0             	movzx  edx,al
c0017d8a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d8e:	8d 48 01             	lea    ecx,[eax+0x1]
c0017d91:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d95:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017d99:	0f b6 c0             	movzx  eax,al
c0017d9c:	c1 e0 08             	shl    eax,0x8
c0017d9f:	89 d1                	mov    ecx,edx
c0017da1:	09 c1                	or     ecx,eax
c0017da3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017da7:	8d 50 02             	lea    edx,[eax+0x2]
c0017daa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017dae:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017db2:	0f b6 c0             	movzx  eax,al
c0017db5:	c1 e0 10             	shl    eax,0x10
c0017db8:	09 c1                	or     ecx,eax
c0017dba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dbe:	8d 50 03             	lea    edx,[eax+0x3]
c0017dc1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017dc5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017dc9:	0f b6 c0             	movzx  eax,al
c0017dcc:	c1 e0 18             	shl    eax,0x18
c0017dcf:	09 c1                	or     ecx,eax
c0017dd1:	89 ca                	mov    edx,ecx
c0017dd3:	a0 a0 0b 03 c0       	mov    al,ds:0xc0030ba0
c0017dd8:	0f b6 c0             	movzx  eax,al
c0017ddb:	89 14 85 e0 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf420],edx
c0017de2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017de7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017deb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017def:	01 d0                	add    eax,edx
c0017df1:	83 c0 2c             	add    eax,0x2c
c0017df4:	8a 00                	mov    al,BYTE PTR [eax]
c0017df6:	0f b6 d0             	movzx  edx,al
c0017df9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dfd:	8d 48 01             	lea    ecx,[eax+0x1]
c0017e00:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e04:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017e08:	0f b6 c0             	movzx  eax,al
c0017e0b:	c1 e0 08             	shl    eax,0x8
c0017e0e:	89 d1                	mov    ecx,edx
c0017e10:	09 c1                	or     ecx,eax
c0017e12:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e16:	8d 50 02             	lea    edx,[eax+0x2]
c0017e19:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e1d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e21:	0f b6 c0             	movzx  eax,al
c0017e24:	c1 e0 10             	shl    eax,0x10
c0017e27:	09 c1                	or     ecx,eax
c0017e29:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e2d:	8d 50 03             	lea    edx,[eax+0x3]
c0017e30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e34:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e38:	0f b6 c0             	movzx  eax,al
c0017e3b:	c1 e0 18             	shl    eax,0x18
c0017e3e:	09 c1                	or     ecx,eax
c0017e40:	89 ca                	mov    edx,ecx
c0017e42:	a0 a0 0b 03 c0       	mov    al,ds:0xc0030ba0
c0017e47:	0f b6 c0             	movzx  eax,al
c0017e4a:	89 14 85 60 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf3a0],edx
c0017e51:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e56:	a0 a0 0b 03 c0       	mov    al,ds:0xc0030ba0
c0017e5b:	40                   	inc    eax
c0017e5c:	a2 a0 0b 03 c0       	mov    ds:0xc0030ba0,al
c0017e61:	e9 bb 01 00 00       	jmp    c0018021 <scanMADT()+0x469>
c0017e66:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017e6b:	0f 85 e9 00 00 00    	jne    c0017f5a <scanMADT()+0x3a2>
c0017e71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e75:	8d 50 01             	lea    edx,[eax+0x1]
c0017e78:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e7c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e80:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e84:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017e88:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e8c:	8d 50 01             	lea    edx,[eax+0x1]
c0017e8f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017e93:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e97:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e9b:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017e9f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ea3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ea7:	01 d0                	add    eax,edx
c0017ea9:	83 c0 2c             	add    eax,0x2c
c0017eac:	8a 00                	mov    al,BYTE PTR [eax]
c0017eae:	0f b6 d0             	movzx  edx,al
c0017eb1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eb5:	8d 48 01             	lea    ecx,[eax+0x1]
c0017eb8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ebc:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ec0:	0f b6 c0             	movzx  eax,al
c0017ec3:	c1 e0 08             	shl    eax,0x8
c0017ec6:	89 d1                	mov    ecx,edx
c0017ec8:	09 c1                	or     ecx,eax
c0017eca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ece:	8d 50 02             	lea    edx,[eax+0x2]
c0017ed1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ed5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ed9:	0f b6 c0             	movzx  eax,al
c0017edc:	c1 e0 10             	shl    eax,0x10
c0017edf:	09 c1                	or     ecx,eax
c0017ee1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ee5:	8d 50 03             	lea    edx,[eax+0x3]
c0017ee8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017eec:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ef0:	0f b6 c0             	movzx  eax,al
c0017ef3:	c1 e0 18             	shl    eax,0x18
c0017ef6:	09 c8                	or     eax,ecx
c0017ef8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017efc:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f01:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f05:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f09:	01 d0                	add    eax,edx
c0017f0b:	83 c0 2c             	add    eax,0x2c
c0017f0e:	8a 00                	mov    al,BYTE PTR [eax]
c0017f10:	0f b6 c0             	movzx  eax,al
c0017f13:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017f17:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017f1a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f1e:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017f22:	0f b6 d2             	movzx  edx,dl
c0017f25:	c1 e2 08             	shl    edx,0x8
c0017f28:	09 d0                	or     eax,edx
c0017f2a:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017f2f:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017f34:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017f39:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f3d:	88 90 60 d4 02 c0    	mov    BYTE PTR [eax-0x3ffd2ba0],dl
c0017f43:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017f48:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017f4d:	66 89 84 12 80 0b 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf480],ax
c0017f55:	e9 c7 00 00 00       	jmp    c0018021 <scanMADT()+0x469>
c0017f5a:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017f5f:	0f 85 b0 00 00 00    	jne    c0018015 <scanMADT()+0x45d>
c0017f65:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f69:	8d 50 01             	lea    edx,[eax+0x1]
c0017f6c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f70:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f74:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f78:	0f b6 c0             	movzx  eax,al
c0017f7b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017f7f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f87:	01 d0                	add    eax,edx
c0017f89:	83 c0 2c             	add    eax,0x2c
c0017f8c:	8a 00                	mov    al,BYTE PTR [eax]
c0017f8e:	0f b6 d0             	movzx  edx,al
c0017f91:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f95:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f98:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f9c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fa0:	0f b6 c0             	movzx  eax,al
c0017fa3:	c1 e0 08             	shl    eax,0x8
c0017fa6:	09 d0                	or     eax,edx
c0017fa8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017fac:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017fb1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fb5:	8d 50 01             	lea    edx,[eax+0x1]
c0017fb8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fbc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fc0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fc4:	0f b6 c0             	movzx  eax,al
c0017fc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fcf:	c1 e0 08             	shl    eax,0x8
c0017fd2:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017fd6:	89 c1                	mov    ecx,eax
c0017fd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017fdc:	c1 e0 18             	shl    eax,0x18
c0017fdf:	89 c3                	mov    ebx,eax
c0017fe1:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c0017fe6:	8d 50 01             	lea    edx,[eax+0x1]
c0017fe9:	89 15 f0 0a 03 c0    	mov    DWORD PTR ds:0xc0030af0,edx
c0017fef:	09 d9                	or     ecx,ebx
c0017ff1:	89 ca                	mov    edx,ecx
c0017ff3:	89 14 85 00 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf500],edx
c0017ffa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017ffe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018006:	68 78 b3 02 c0       	push   0xc002b378
c001800b:	e8 68 ad ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0018010:	83 c4 10             	add    esp,0x10
c0018013:	eb 0c                	jmp    c0018021 <scanMADT()+0x469>
c0018015:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001801a:	75 05                	jne    c0018021 <scanMADT()+0x469>
c001801c:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0018021:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018026:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001802a:	01 d0                	add    eax,edx
c001802c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018030:	e9 54 fc ff ff       	jmp    c0017c89 <scanMADT()+0xd1>
c0018035:	90                   	nop
c0018036:	eb 01                	jmp    c0018039 <scanMADT()+0x481>
c0018038:	90                   	nop
c0018039:	83 c4 38             	add    esp,0x38
c001803c:	5b                   	pop    ebx
c001803d:	c3                   	ret    

c001803e <ACPI::ACPI()>:
c001803e:	83 ec 0c             	sub    esp,0xc
c0018041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018045:	83 ec 08             	sub    esp,0x8
c0018048:	68 1b b2 02 c0       	push   0xc002b21b
c001804d:	50                   	push   eax
c001804e:	e8 3b c3 ff ff       	call   c001438e <Device::Device(char const*)>
c0018053:	83 c4 10             	add    esp,0x10
c0018056:	ba ec b3 02 c0       	mov    edx,0xc002b3ec
c001805b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001805f:	89 10                	mov    DWORD PTR [eax],edx
c0018061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018065:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001806c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018070:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001807a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001807e:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0018088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001808c:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018097:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001809e:	e8 15 fb ff ff       	call   c0017bb8 <scanMADT()>
c00180a3:	90                   	nop
c00180a4:	83 c4 0c             	add    esp,0xc
c00180a7:	c3                   	ret    

c00180a8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00180a8:	83 ec 2c             	sub    esp,0x2c
c00180ab:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00180af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00180b3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00180b7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00180bb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00180c0:	88 d0                	mov    al,dl
c00180c2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00180c6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00180cb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00180d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00180d7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00180dd:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00180e1:	0f 8d 97 00 00 00    	jge    c001817e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00180e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00180eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00180ef:	83 c2 2a             	add    edx,0x2a
c00180f2:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00180f6:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00180fb:	75 78                	jne    c0018175 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00180fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018101:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018105:	83 c2 2a             	add    edx,0x2a
c0018108:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001810c:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0018110:	75 63                	jne    c0018175 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018112:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018117:	74 3a                	je     c0018153 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018119:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001811d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018121:	83 c2 2a             	add    edx,0x2a
c0018124:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018128:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001812c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001812f:	39 c2                	cmp    edx,eax
c0018131:	74 10                	je     c0018143 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018133:	83 ec 0c             	sub    esp,0xc
c0018136:	68 b4 b3 02 c0       	push   0xc002b3b4
c001813b:	e8 13 23 00 00       	call   c001a453 <Krnl::panic(char const*)>
c0018140:	83 c4 10             	add    esp,0x10
c0018143:	83 ec 0c             	sub    esp,0xc
c0018146:	68 20 b2 02 c0       	push   0xc002b220
c001814b:	e8 03 23 00 00       	call   c001a453 <Krnl::panic(char const*)>
c0018150:	83 c4 10             	add    esp,0x10
c0018153:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018157:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001815b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001815f:	83 c2 2a             	add    edx,0x2a
c0018162:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018166:	8b 02                	mov    eax,DWORD PTR [edx]
c0018168:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001816b:	89 01                	mov    DWORD PTR [ecx],eax
c001816d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018170:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018175:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018179:	e9 55 ff ff ff       	jmp    c00180d3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001817e:	90                   	nop
c001817f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018183:	83 c4 2c             	add    esp,0x2c
c0018186:	c2 04 00             	ret    0x4
c0018189:	90                   	nop

c001818a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001818a:	83 ec 1c             	sub    esp,0x1c
c001818d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018191:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018195:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018199:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001819e:	88 c8                	mov    al,cl
c00181a0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00181a4:	88 d0                	mov    al,dl
c00181a6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00181aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181ae:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00181b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181b8:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00181bb:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00181bf:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00181c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181c7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00181cd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00181d1:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00181d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181d8:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00181dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181e1:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00181e7:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00181eb:	8d 48 01             	lea    ecx,[eax+0x1]
c00181ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181f2:	83 c2 2a             	add    edx,0x2a
c00181f5:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00181f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181fd:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018203:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018207:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001820a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001820e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018212:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018216:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001821c:	8d 50 01             	lea    edx,[eax+0x1]
c001821f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018223:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018229:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001822d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018233:	3d 00 02 00 00       	cmp    eax,0x200
c0018238:	75 10                	jne    c001824a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c001823a:	83 ec 0c             	sub    esp,0xc
c001823d:	68 2f b2 02 c0       	push   0xc002b22f
c0018242:	e8 0c 22 00 00       	call   c001a453 <Krnl::panic(char const*)>
c0018247:	83 c4 10             	add    esp,0x10
c001824a:	90                   	nop
c001824b:	83 c4 1c             	add    esp,0x1c
c001824e:	c3                   	ret    
c001824f:	90                   	nop

c0018250 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018250:	b8 00 00 00 00       	mov    eax,0x0
c0018255:	c3                   	ret    

c0018256 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018256:	83 ec 1c             	sub    esp,0x1c
c0018259:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001825d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018260:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018264:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0018269:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001826e:	83 ec 08             	sub    esp,0x8
c0018271:	52                   	push   edx
c0018272:	50                   	push   eax
c0018273:	e8 e0 6b ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c0018278:	83 c4 10             	add    esp,0x10
c001827b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001827f:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0018284:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018289:	83 ec 04             	sub    esp,0x4
c001828c:	6a 01                	push   0x1
c001828e:	52                   	push   edx
c001828f:	50                   	push   eax
c0018290:	e8 d9 6c ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c0018295:	83 c4 10             	add    esp,0x10
c0018298:	90                   	nop
c0018299:	83 c4 1c             	add    esp,0x1c
c001829c:	c3                   	ret    
c001829d:	90                   	nop

c001829e <ACPI::open(int, int, void*)>:
c001829e:	53                   	push   ebx
c001829f:	83 ec 28             	sub    esp,0x28
c00182a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182a6:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00182ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182b1:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00182b8:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c00182bd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00182c3:	83 e0 04             	and    eax,0x4
c00182c6:	84 c0                	test   al,al
c00182c8:	74 47                	je     c0018311 <ACPI::open(int, int, void*)+0x73>
c00182ca:	a1 e8 0a 03 c0       	mov    eax,ds:0xc0030ae8
c00182cf:	83 ec 08             	sub    esp,0x8
c00182d2:	68 4c b2 02 c0       	push   0xc002b24c
c00182d7:	50                   	push   eax
c00182d8:	e8 3f f8 ff ff       	call   c0017b1c <findDataTable(unsigned char*, char*)>
c00182dd:	83 c4 10             	add    esp,0x10
c00182e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00182e4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00182e9:	74 26                	je     c0018311 <ACPI::open(int, int, void*)+0x73>
c00182eb:	83 ec 0c             	sub    esp,0xc
c00182ee:	68 51 b2 02 c0       	push   0xc002b251
c00182f3:	e8 80 aa ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00182f8:	83 c4 10             	add    esp,0x10
c00182fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182ff:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018306:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001830a:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018311:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018319:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001831d:	8a 00                	mov    al,BYTE PTR [eax]
c001831f:	3c 01                	cmp    al,0x1
c0018321:	75 28                	jne    c001834b <ACPI::open(int, int, void*)+0xad>
c0018323:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018327:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001832e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018332:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018339:	83 ec 0c             	sub    esp,0xc
c001833c:	68 62 b2 02 c0       	push   0xc002b262
c0018341:	e8 32 aa ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0018346:	83 c4 10             	add    esp,0x10
c0018349:	eb 25                	jmp    c0018370 <ACPI::open(int, int, void*)+0xd2>
c001834b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001834f:	8a 00                	mov    al,BYTE PTR [eax]
c0018351:	3c 02                	cmp    al,0x2
c0018353:	75 1b                	jne    c0018370 <ACPI::open(int, int, void*)+0xd2>
c0018355:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018359:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018360:	83 ec 0c             	sub    esp,0xc
c0018363:	68 6a b2 02 c0       	push   0xc002b26a
c0018368:	e8 0b aa ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001836d:	83 c4 10             	add    esp,0x10
c0018370:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018374:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001837a:	83 f0 01             	xor    eax,0x1
c001837d:	84 c0                	test   al,al
c001837f:	74 6a                	je     c00183eb <ACPI::open(int, int, void*)+0x14d>
c0018381:	83 ec 0c             	sub    esp,0xc
c0018384:	68 72 b2 02 c0       	push   0xc002b272
c0018389:	e8 ea a9 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001838e:	83 c4 10             	add    esp,0x10
c0018391:	e8 ba 7d fe ff       	call   c0000150 <manualPCIProbe>
c0018396:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001839a:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c001839f:	75 28                	jne    c00183c9 <ACPI::open(int, int, void*)+0x12b>
c00183a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183a5:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00183ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183b0:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00183b7:	83 ec 0c             	sub    esp,0xc
c00183ba:	68 80 b2 02 c0       	push   0xc002b280
c00183bf:	e8 b4 a9 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00183c4:	83 c4 10             	add    esp,0x10
c00183c7:	eb 22                	jmp    c00183eb <ACPI::open(int, int, void*)+0x14d>
c00183c9:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00183ce:	75 1b                	jne    c00183eb <ACPI::open(int, int, void*)+0x14d>
c00183d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183d4:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00183db:	83 ec 0c             	sub    esp,0xc
c00183de:	68 8a b2 02 c0       	push   0xc002b28a
c00183e3:	e8 90 a9 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00183e8:	83 c4 10             	add    esp,0x10
c00183eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183ef:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00183f5:	84 c0                	test   al,al
c00183f7:	74 13                	je     c001840c <ACPI::open(int, int, void*)+0x16e>
c00183f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183fd:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018403:	83 f0 01             	xor    eax,0x1
c0018406:	0f b6 c0             	movzx  eax,al
c0018409:	40                   	inc    eax
c001840a:	eb 05                	jmp    c0018411 <ACPI::open(int, int, void*)+0x173>
c001840c:	b8 00 00 00 00       	mov    eax,0x0
c0018411:	83 ec 08             	sub    esp,0x8
c0018414:	50                   	push   eax
c0018415:	68 94 b2 02 c0       	push   0xc002b294
c001841a:	e8 59 a9 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001841f:	83 c4 10             	add    esp,0x10
c0018422:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018426:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001842c:	84 c0                	test   al,al
c001842e:	74 67                	je     c0018497 <ACPI::open(int, int, void*)+0x1f9>
c0018430:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0018438:	83 ec 0c             	sub    esp,0xc
c001843b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001843f:	e8 ff 73 ff ff       	call   c000f843 <malloc>
c0018444:	83 c4 10             	add    esp,0x10
c0018447:	89 c3                	mov    ebx,eax
c0018449:	83 ec 0c             	sub    esp,0xc
c001844c:	53                   	push   ebx
c001844d:	e8 2c a3 00 00       	call   c002277e <PCI::PCI()>
c0018452:	83 c4 10             	add    esp,0x10
c0018455:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018459:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001845d:	83 ec 08             	sub    esp,0x8
c0018460:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018464:	50                   	push   eax
c0018465:	e8 34 bd ff ff       	call   c001419e <Device::addChild(Device*)>
c001846a:	83 c4 10             	add    esp,0x10
c001846d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018471:	8b 00                	mov    eax,DWORD PTR [eax]
c0018473:	83 c0 08             	add    eax,0x8
c0018476:	8b 00                	mov    eax,DWORD PTR [eax]
c0018478:	6a 00                	push   0x0
c001847a:	6a 00                	push   0x0
c001847c:	6a 00                	push   0x0
c001847e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018482:	ff d0                	call   eax
c0018484:	83 c4 10             	add    esp,0x10
c0018487:	83 ec 0c             	sub    esp,0xc
c001848a:	68 9d b2 02 c0       	push   0xc002b29d
c001848f:	e8 e4 a8 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0018494:	83 c4 10             	add    esp,0x10
c0018497:	e8 e1 98 ff ff       	call   c0011d7d <Virt::swappingSetup()>
c001849c:	83 ec 0c             	sub    esp,0xc
c001849f:	68 a8 b2 02 c0       	push   0xc002b2a8
c00184a4:	e8 80 46 00 00       	call   c001cb29 <Thr::loadKernelSymbolTable(char const*)>
c00184a9:	83 c4 10             	add    esp,0x10
c00184ac:	8b 1d 08 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e208
c00184b2:	83 ec 08             	sub    esp,0x8
c00184b5:	6a 01                	push   0x1
c00184b7:	68 c6 b2 02 c0       	push   0xc002b2c6
c00184bc:	e8 c5 50 00 00       	call   c001d586 <Thr::loadDLL(char const*, bool)>
c00184c1:	83 c4 10             	add    esp,0x10
c00184c4:	83 ec 08             	sub    esp,0x8
c00184c7:	53                   	push   ebx
c00184c8:	50                   	push   eax
c00184c9:	e8 07 53 00 00       	call   c001d7d5 <Thr::executeDLL(unsigned long, void*)>
c00184ce:	83 c4 10             	add    esp,0x10
c00184d1:	8b 1d 08 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e208
c00184d7:	83 ec 08             	sub    esp,0x8
c00184da:	6a 01                	push   0x1
c00184dc:	68 e3 b2 02 c0       	push   0xc002b2e3
c00184e1:	e8 a0 50 00 00       	call   c001d586 <Thr::loadDLL(char const*, bool)>
c00184e6:	83 c4 10             	add    esp,0x10
c00184e9:	83 ec 08             	sub    esp,0x8
c00184ec:	53                   	push   ebx
c00184ed:	50                   	push   eax
c00184ee:	e8 e2 52 00 00       	call   c001d7d5 <Thr::executeDLL(unsigned long, void*)>
c00184f3:	83 c4 10             	add    esp,0x10
c00184f6:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c00184fb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018501:	83 e0 04             	and    eax,0x4
c0018504:	84 c0                	test   al,al
c0018506:	0f 84 d2 00 00 00    	je     c00185de <ACPI::open(int, int, void*)+0x340>
c001850c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018513:	83 ec 0c             	sub    esp,0xc
c0018516:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001851a:	e8 24 73 ff ff       	call   c000f843 <malloc>
c001851f:	83 c4 10             	add    esp,0x10
c0018522:	89 c3                	mov    ebx,eax
c0018524:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c0018529:	83 ec 04             	sub    esp,0x4
c001852c:	50                   	push   eax
c001852d:	68 00 b3 02 c0       	push   0xc002b300
c0018532:	53                   	push   ebx
c0018533:	e8 98 ad ff ff       	call   c00132d0 <File::File(char const*, Process*)>
c0018538:	83 c4 10             	add    esp,0x10
c001853b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001853f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018544:	74 17                	je     c001855d <ACPI::open(int, int, void*)+0x2bf>
c0018546:	83 ec 0c             	sub    esp,0xc
c0018549:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001854d:	e8 50 b0 ff ff       	call   c00135a2 <File::exists()>
c0018552:	83 c4 10             	add    esp,0x10
c0018555:	84 c0                	test   al,al
c0018557:	74 04                	je     c001855d <ACPI::open(int, int, void*)+0x2bf>
c0018559:	b0 01                	mov    al,0x1
c001855b:	eb 02                	jmp    c001855f <ACPI::open(int, int, void*)+0x2c1>
c001855d:	b0 00                	mov    al,0x0
c001855f:	84 c0                	test   al,al
c0018561:	74 22                	je     c0018585 <ACPI::open(int, int, void*)+0x2e7>
c0018563:	83 ec 08             	sub    esp,0x8
c0018566:	6a 01                	push   0x1
c0018568:	68 00 b3 02 c0       	push   0xc002b300
c001856d:	e8 14 50 00 00       	call   c001d586 <Thr::loadDLL(char const*, bool)>
c0018572:	83 c4 10             	add    esp,0x10
c0018575:	83 ec 08             	sub    esp,0x8
c0018578:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001857c:	50                   	push   eax
c001857d:	e8 53 52 00 00       	call   c001d7d5 <Thr::executeDLL(unsigned long, void*)>
c0018582:	83 c4 10             	add    esp,0x10
c0018585:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001858a:	74 1e                	je     c00185aa <ACPI::open(int, int, void*)+0x30c>
c001858c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018591:	74 17                	je     c00185aa <ACPI::open(int, int, void*)+0x30c>
c0018593:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018597:	8b 00                	mov    eax,DWORD PTR [eax]
c0018599:	83 c0 08             	add    eax,0x8
c001859c:	8b 00                	mov    eax,DWORD PTR [eax]
c001859e:	83 ec 0c             	sub    esp,0xc
c00185a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00185a5:	ff d0                	call   eax
c00185a7:	83 c4 10             	add    esp,0x10
c00185aa:	a1 e8 0a 03 c0       	mov    eax,ds:0xc0030ae8
c00185af:	83 ec 08             	sub    esp,0x8
c00185b2:	68 1d b3 02 c0       	push   0xc002b31d
c00185b7:	50                   	push   eax
c00185b8:	e8 5f f5 ff ff       	call   c0017b1c <findDataTable(unsigned char*, char*)>
c00185bd:	83 c4 10             	add    esp,0x10
c00185c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00185c4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00185c9:	74 13                	je     c00185de <ACPI::open(int, int, void*)+0x340>
c00185cb:	83 ec 08             	sub    esp,0x8
c00185ce:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00185d2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00185d6:	e8 7b fc ff ff       	call   c0018256 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00185db:	83 c4 10             	add    esp,0x10
c00185de:	b8 00 00 00 00       	mov    eax,0x0
c00185e3:	83 c4 28             	add    esp,0x28
c00185e6:	5b                   	pop    ebx
c00185e7:	c3                   	ret    

c00185e8 <ACPI::sleep()>:
c00185e8:	83 ec 0c             	sub    esp,0xc
c00185eb:	a1 c0 08 03 c0       	mov    eax,ds:0xc00308c0
c00185f0:	85 c0                	test   eax,eax
c00185f2:	74 07                	je     c00185fb <ACPI::sleep()+0x13>
c00185f4:	a1 c0 08 03 c0       	mov    eax,ds:0xc00308c0
c00185f9:	ff d0                	call   eax
c00185fb:	90                   	nop
c00185fc:	83 c4 0c             	add    esp,0xc
c00185ff:	c3                   	ret    

c0018600 <CPU::close(int, int, void*)>:
c0018600:	31 c0                	xor    eax,eax
c0018602:	c3                   	ret    
c0018603:	90                   	nop

c0018604 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018604:	55                   	push   ebp
c0018605:	57                   	push   edi
c0018606:	56                   	push   esi
c0018607:	53                   	push   ebx
c0018608:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001860c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018610:	89 ce                	mov    esi,ecx
c0018612:	89 d5                	mov    ebp,edx
c0018614:	80 f9 04             	cmp    cl,0x4
c0018617:	75 28                	jne    c0018641 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018619:	8d 42 f9             	lea    eax,[edx-0x7]
c001861c:	3c 03                	cmp    al,0x3
c001861e:	0f 86 63 01 00 00    	jbe    c0018787 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018624:	80 fa 03             	cmp    dl,0x3
c0018627:	0f 84 5a 01 00 00    	je     c0018787 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001862d:	8d 7a f2             	lea    edi,[edx-0xe]
c0018630:	b8 30 d6 02 c0       	mov    eax,0xc002d630
c0018635:	89 fb                	mov    ebx,edi
c0018637:	80 fb 01             	cmp    bl,0x1
c001863a:	77 4e                	ja     c001868a <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001863c:	e9 52 01 00 00       	jmp    c0018793 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018641:	80 f9 05             	cmp    cl,0x5
c0018644:	75 4d                	jne    c0018693 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018646:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c001864b:	80 fa 03             	cmp    dl,0x3
c001864e:	0f 86 3f 01 00 00    	jbe    c0018793 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018654:	8d 7a fa             	lea    edi,[edx-0x6]
c0018657:	b8 50 d6 02 c0       	mov    eax,0xc002d650
c001865c:	89 fb                	mov    ebx,edi
c001865e:	80 fb 01             	cmp    bl,0x1
c0018661:	0f 86 2c 01 00 00    	jbe    c0018793 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018667:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c001866c:	80 fa 08             	cmp    dl,0x8
c001866f:	0f 84 1e 01 00 00    	je     c0018793 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018675:	89 d7                	mov    edi,edx
c0018677:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c001867c:	83 e7 fb             	and    edi,0xfffffffb
c001867f:	89 fb                	mov    ebx,edi
c0018681:	80 fb 09             	cmp    bl,0x9
c0018684:	0f 84 09 01 00 00    	je     c0018793 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001868a:	31 c0                	xor    eax,eax
c001868c:	89 eb                	mov    ebx,ebp
c001868e:	0f b6 fb             	movzx  edi,bl
c0018691:	eb 30                	jmp    c00186c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018693:	31 c0                	xor    eax,eax
c0018695:	80 f9 06             	cmp    cl,0x6
c0018698:	75 f2                	jne    c001868c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001869a:	80 fa 0a             	cmp    dl,0xa
c001869d:	77 ed                	ja     c001868c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001869f:	bf de 05 00 00       	mov    edi,0x5de
c00186a4:	0f a3 d7             	bt     edi,edx
c00186a7:	73 e3                	jae    c001868c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00186a9:	b8 80 d6 02 c0       	mov    eax,0xc002d680
c00186ae:	e9 e0 00 00 00       	jmp    c0018793 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186b3:	39 c7                	cmp    edi,eax
c00186b5:	0f 84 d3 00 00 00    	je     c001878e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00186bb:	40                   	inc    eax
c00186bc:	3d d0 00 00 00       	cmp    eax,0xd0
c00186c1:	74 09                	je     c00186cc <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00186c3:	89 f3                	mov    ebx,esi
c00186c5:	80 fb 0f             	cmp    bl,0xf
c00186c8:	75 f1                	jne    c00186bb <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00186ca:	eb e7                	jmp    c00186b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00186cc:	80 f9 10             	cmp    cl,0x10
c00186cf:	75 14                	jne    c00186e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00186d1:	8d 42 fc             	lea    eax,[edx-0x4]
c00186d4:	83 e0 fb             	and    eax,0xfffffffb
c00186d7:	3c 02                	cmp    al,0x2
c00186d9:	76 34                	jbe    c001870f <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00186db:	b8 02 b7 02 c0       	mov    eax,0xc002b702
c00186e0:	80 fa 02             	cmp    dl,0x2
c00186e3:	eb 24                	jmp    c0018709 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00186e5:	80 f9 11             	cmp    cl,0x11
c00186e8:	75 13                	jne    c00186fd <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00186ea:	b8 02 b7 02 c0       	mov    eax,0xc002b702
c00186ef:	80 fa 03             	cmp    dl,0x3
c00186f2:	0f 85 9b 00 00 00    	jne    c0018793 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186f8:	e9 91 00 00 00       	jmp    c001878e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00186fd:	80 f9 12             	cmp    cl,0x12
c0018700:	75 14                	jne    c0018716 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018702:	b8 02 b7 02 c0       	mov    eax,0xc002b702
c0018707:	fe ca                	dec    dl
c0018709:	0f 85 84 00 00 00    	jne    c0018793 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001870f:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c0018714:	eb 7d                	jmp    c0018793 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018716:	80 f9 14             	cmp    cl,0x14
c0018719:	75 12                	jne    c001872d <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001871b:	4a                   	dec    edx
c001871c:	b8 02 b7 02 c0       	mov    eax,0xc002b702
c0018721:	80 fa 01             	cmp    dl,0x1
c0018724:	77 6d                	ja     c0018793 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018726:	b8 b0 d6 02 c0       	mov    eax,0xc002d6b0
c001872b:	eb 66                	jmp    c0018793 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001872d:	80 f9 15             	cmp    cl,0x15
c0018730:	75 31                	jne    c0018763 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018732:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0018737:	80 fa 01             	cmp    dl,0x1
c001873a:	74 57                	je     c0018793 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001873c:	b8 02 b7 02 c0       	mov    eax,0xc002b702
c0018741:	80 fa 13             	cmp    dl,0x13
c0018744:	76 0c                	jbe    c0018752 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018746:	80 fa 30             	cmp    dl,0x30
c0018749:	75 48                	jne    c0018793 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001874b:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c0018750:	eb 41                	jmp    c0018793 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018752:	b9 04 00 09 00       	mov    ecx,0x90004
c0018757:	0f a3 d1             	bt     ecx,edx
c001875a:	73 37                	jae    c0018793 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001875c:	b8 d0 d6 02 c0       	mov    eax,0xc002d6d0
c0018761:	eb 30                	jmp    c0018793 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018763:	b8 02 b7 02 c0       	mov    eax,0xc002b702
c0018768:	80 f9 16             	cmp    cl,0x16
c001876b:	75 26                	jne    c0018793 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001876d:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c0018772:	84 d2                	test   dl,dl
c0018774:	74 1d                	je     c0018793 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018776:	b8 02 b7 02 c0       	mov    eax,0xc002b702
c001877b:	80 fa 30             	cmp    dl,0x30
c001877e:	75 13                	jne    c0018793 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018780:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c0018785:	eb 0c                	jmp    c0018793 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018787:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c001878c:	eb 05                	jmp    c0018793 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001878e:	b8 90 d6 02 c0       	mov    eax,0xc002d690
c0018793:	5b                   	pop    ebx
c0018794:	5e                   	pop    esi
c0018795:	5f                   	pop    edi
c0018796:	5d                   	pop    ebp
c0018797:	c3                   	ret    

c0018798 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018798:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001879c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00187a0:	80 f9 04             	cmp    cl,0x4
c00187a3:	75 6b                	jne    c0018810 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00187a5:	b8 80 d4 02 c0       	mov    eax,0xc002d480
c00187aa:	80 fa 01             	cmp    dl,0x1
c00187ad:	0f 86 92 02 00 00    	jbe    c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187b3:	b8 90 d4 02 c0       	mov    eax,0xc002d490
c00187b8:	80 fa 02             	cmp    dl,0x2
c00187bb:	0f 84 84 02 00 00    	je     c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187c1:	b8 a0 d4 02 c0       	mov    eax,0xc002d4a0
c00187c6:	80 fa 03             	cmp    dl,0x3
c00187c9:	0f 84 76 02 00 00    	je     c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187cf:	b8 b0 d4 02 c0       	mov    eax,0xc002d4b0
c00187d4:	80 fa 04             	cmp    dl,0x4
c00187d7:	0f 84 68 02 00 00    	je     c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187dd:	b8 c0 d4 02 c0       	mov    eax,0xc002d4c0
c00187e2:	80 fa 05             	cmp    dl,0x5
c00187e5:	0f 84 5a 02 00 00    	je     c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187eb:	b8 a0 d4 02 c0       	mov    eax,0xc002d4a0
c00187f0:	80 fa 07             	cmp    dl,0x7
c00187f3:	0f 84 4c 02 00 00    	je     c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187f9:	83 ea 08             	sub    edx,0x8
c00187fc:	b8 02 b7 02 c0       	mov    eax,0xc002b702
c0018801:	80 fa 01             	cmp    dl,0x1
c0018804:	0f 87 3b 02 00 00    	ja     c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001880a:	b8 d0 d4 02 c0       	mov    eax,0xc002d4d0
c001880f:	c3                   	ret    
c0018810:	80 f9 05             	cmp    cl,0x5
c0018813:	75 45                	jne    c001885a <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018815:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018818:	b8 e0 d4 02 c0       	mov    eax,0xc002d4e0
c001881d:	80 f9 02             	cmp    cl,0x2
c0018820:	0f 86 1f 02 00 00    	jbe    c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018826:	80 fa 04             	cmp    dl,0x4
c0018829:	0f 84 f3 01 00 00    	je     c0018a22 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001882f:	80 fa 07             	cmp    dl,0x7
c0018832:	0f 84 0d 02 00 00    	je     c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018838:	b8 f0 d4 02 c0       	mov    eax,0xc002d4f0
c001883d:	80 fa 08             	cmp    dl,0x8
c0018840:	0f 84 ff 01 00 00    	je     c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018846:	b8 02 b7 02 c0       	mov    eax,0xc002b702
c001884b:	80 fa 09             	cmp    dl,0x9
c001884e:	0f 85 f1 01 00 00    	jne    c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018854:	b8 00 d5 02 c0       	mov    eax,0xc002d500
c0018859:	c3                   	ret    
c001885a:	80 f9 06             	cmp    cl,0x6
c001885d:	0f 85 85 01 00 00    	jne    c00189e8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018863:	b8 10 d5 02 c0       	mov    eax,0xc002d510
c0018868:	80 fa 01             	cmp    dl,0x1
c001886b:	0f 84 d4 01 00 00    	je     c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018871:	8d 42 fb             	lea    eax,[edx-0x5]
c0018874:	3c 01                	cmp    al,0x1
c0018876:	0f 86 ac 01 00 00    	jbe    c0018a28 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001887c:	80 fa 03             	cmp    dl,0x3
c001887f:	0f 84 a3 01 00 00    	je     c0018a28 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018885:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018888:	b8 30 d5 02 c0       	mov    eax,0xc002d530
c001888d:	80 f9 01             	cmp    cl,0x1
c0018890:	0f 86 af 01 00 00    	jbe    c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018896:	80 fa 09             	cmp    dl,0x9
c0018899:	0f 84 8f 01 00 00    	je     c0018a2e <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001889f:	8d 4a f6             	lea    ecx,[edx-0xa]
c00188a2:	80 f9 01             	cmp    cl,0x1
c00188a5:	0f 86 9a 01 00 00    	jbe    c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188ab:	b8 40 d5 02 c0       	mov    eax,0xc002d540
c00188b0:	80 fa 0d             	cmp    dl,0xd
c00188b3:	0f 84 8c 01 00 00    	je     c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188b9:	b8 50 d5 02 c0       	mov    eax,0xc002d550
c00188be:	80 fa 0e             	cmp    dl,0xe
c00188c1:	0f 84 7e 01 00 00    	je     c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188c7:	b8 60 d5 02 c0       	mov    eax,0xc002d560
c00188cc:	80 fa 0f             	cmp    dl,0xf
c00188cf:	0f 84 70 01 00 00    	je     c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188d5:	b8 40 d5 02 c0       	mov    eax,0xc002d540
c00188da:	80 fa 15             	cmp    dl,0x15
c00188dd:	0f 84 62 01 00 00    	je     c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188e3:	8d 4a ea             	lea    ecx,[edx-0x16]
c00188e6:	b8 60 d5 02 c0       	mov    eax,0xc002d560
c00188eb:	80 f9 01             	cmp    cl,0x1
c00188ee:	0f 86 51 01 00 00    	jbe    c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188f4:	80 fa 1a             	cmp    dl,0x1a
c00188f7:	0f 84 37 01 00 00    	je     c0018a34 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00188fd:	80 fa 1c             	cmp    dl,0x1c
c0018900:	0f 84 34 01 00 00    	je     c0018a3a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018906:	80 fa 1d             	cmp    dl,0x1d
c0018909:	0f 84 36 01 00 00    	je     c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001890f:	b8 90 d5 02 c0       	mov    eax,0xc002d590
c0018914:	80 fa 25             	cmp    dl,0x25
c0018917:	0f 84 28 01 00 00    	je     c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001891d:	8d 4a da             	lea    ecx,[edx-0x26]
c0018920:	b8 80 d5 02 c0       	mov    eax,0xc002d580
c0018925:	80 f9 01             	cmp    cl,0x1
c0018928:	0f 86 17 01 00 00    	jbe    c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001892e:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c0018933:	80 fa 2a             	cmp    dl,0x2a
c0018936:	0f 84 09 01 00 00    	je     c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001893c:	b8 90 d5 02 c0       	mov    eax,0xc002d590
c0018941:	80 fa 2c             	cmp    dl,0x2c
c0018944:	0f 84 fb 00 00 00    	je     c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001894a:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c001894f:	80 fa 2d             	cmp    dl,0x2d
c0018952:	0f 84 ed 00 00 00    	je     c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018958:	b8 70 d5 02 c0       	mov    eax,0xc002d570
c001895d:	80 fa 2e             	cmp    dl,0x2e
c0018960:	0f 84 df 00 00 00    	je     c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018966:	b8 90 d5 02 c0       	mov    eax,0xc002d590
c001896b:	80 fa 2f             	cmp    dl,0x2f
c001896e:	0f 84 d1 00 00 00    	je     c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018974:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018977:	b8 80 d5 02 c0       	mov    eax,0xc002d580
c001897c:	80 f9 01             	cmp    cl,0x1
c001897f:	0f 86 c0 00 00 00    	jbe    c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018985:	b8 b0 d5 02 c0       	mov    eax,0xc002d5b0
c001898a:	80 fa 37             	cmp    dl,0x37
c001898d:	0f 84 b2 00 00 00    	je     c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018993:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c0018998:	80 fa 3a             	cmp    dl,0x3a
c001899b:	0f 84 a4 00 00 00    	je     c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189a1:	b8 d0 d5 02 c0       	mov    eax,0xc002d5d0
c00189a6:	80 fa 3c             	cmp    dl,0x3c
c00189a9:	0f 84 96 00 00 00    	je     c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189af:	b8 e0 d5 02 c0       	mov    eax,0xc002d5e0
c00189b4:	80 fa 3d             	cmp    dl,0x3d
c00189b7:	0f 84 88 00 00 00    	je     c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189bd:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c00189c2:	80 fa 3e             	cmp    dl,0x3e
c00189c5:	74 7e                	je     c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c7:	8d 42 bb             	lea    eax,[edx-0x45]
c00189ca:	3c 01                	cmp    al,0x1
c00189cc:	76 72                	jbe    c0018a40 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00189ce:	80 fa 3f             	cmp    dl,0x3f
c00189d1:	74 6d                	je     c0018a40 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00189d3:	80 fa 4a             	cmp    dl,0x4a
c00189d6:	74 0a                	je     c00189e2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00189d8:	b8 02 b7 02 c0       	mov    eax,0xc002b702
c00189dd:	80 fa 4d             	cmp    dl,0x4d
c00189e0:	75 63                	jne    c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e2:	b8 b0 d5 02 c0       	mov    eax,0xc002d5b0
c00189e7:	c3                   	ret    
c00189e8:	b8 02 b7 02 c0       	mov    eax,0xc002b702
c00189ed:	80 f9 0b             	cmp    cl,0xb
c00189f0:	75 0a                	jne    c00189fc <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00189f2:	fe ca                	dec    dl
c00189f4:	75 4f                	jne    c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189f6:	b8 f0 d5 02 c0       	mov    eax,0xc002d5f0
c00189fb:	c3                   	ret    
c00189fc:	80 f9 0f             	cmp    cl,0xf
c00189ff:	75 44                	jne    c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a01:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c0018a06:	80 fa 02             	cmp    dl,0x2
c0018a09:	76 3a                	jbe    c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a0b:	8d 42 fd             	lea    eax,[edx-0x3]
c0018a0e:	3c 01                	cmp    al,0x1
c0018a10:	76 0a                	jbe    c0018a1c <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018a12:	b8 02 b7 02 c0       	mov    eax,0xc002b702
c0018a17:	80 fa 06             	cmp    dl,0x6
c0018a1a:	75 29                	jne    c0018a45 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a1c:	b8 10 d6 02 c0       	mov    eax,0xc002d610
c0018a21:	c3                   	ret    
c0018a22:	b8 f0 d4 02 c0       	mov    eax,0xc002d4f0
c0018a27:	c3                   	ret    
c0018a28:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c0018a2d:	c3                   	ret    
c0018a2e:	b8 40 d5 02 c0       	mov    eax,0xc002d540
c0018a33:	c3                   	ret    
c0018a34:	b8 70 d5 02 c0       	mov    eax,0xc002d570
c0018a39:	c3                   	ret    
c0018a3a:	b8 80 d5 02 c0       	mov    eax,0xc002d580
c0018a3f:	c3                   	ret    
c0018a40:	b8 d0 d5 02 c0       	mov    eax,0xc002d5d0
c0018a45:	c3                   	ret    

c0018a46 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018a46:	60                   	pusha  
c0018a47:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a4f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018a53:	9c                   	pushf  
c0018a54:	fa                   	cli    
c0018a55:	0f 09                	wbinvd 
c0018a57:	0f 30                	wrmsr  
c0018a59:	9d                   	popf   
c0018a5a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018a5e:	89 02                	mov    DWORD PTR [edx],eax
c0018a60:	61                   	popa   
c0018a61:	c3                   	ret    

c0018a62 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018a62:	60                   	pusha  
c0018a63:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018a67:	9c                   	pushf  
c0018a68:	fa                   	cli    
c0018a69:	0f 09                	wbinvd 
c0018a6b:	31 c0                	xor    eax,eax
c0018a6d:	31 d2                	xor    edx,edx
c0018a6f:	0f 32                	rdmsr  
c0018a71:	9d                   	popf   
c0018a72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018a76:	89 02                	mov    DWORD PTR [edx],eax
c0018a78:	61                   	popa   
c0018a79:	c3                   	ret    

c0018a7a <CPU::AMD_K6_writeback(int, int, int)>:
c0018a7a:	56                   	push   esi
c0018a7b:	53                   	push   ebx
c0018a7c:	83 ec 10             	sub    esp,0x10
c0018a7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a83:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018a88:	75 5d                	jne    c0018ae7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018a8a:	83 f8 08             	cmp    eax,0x8
c0018a8d:	75 09                	jne    c0018a98 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018a8f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018a94:	7e 13                	jle    c0018aa9 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018a96:	eb 30                	jmp    c0018ac8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018a98:	83 f8 06             	cmp    eax,0x6
c0018a9b:	7c 4a                	jl     c0018ae7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018a9d:	83 f8 07             	cmp    eax,0x7
c0018aa0:	7e 07                	jle    c0018aa9 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018aa2:	83 f8 09             	cmp    eax,0x9
c0018aa5:	74 21                	je     c0018ac8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018aa7:	eb 3e                	jmp    c0018ae7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018aa9:	89 e6                	mov    esi,esp
c0018aab:	8b 1d 48 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e248
c0018ab1:	56                   	push   esi
c0018ab2:	c1 eb 15             	shr    ebx,0x15
c0018ab5:	68 82 00 00 c0       	push   0xc0000082
c0018aba:	83 e3 7e             	and    ebx,0x7e
c0018abd:	e8 a0 ff ff ff       	call   c0018a62 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018ac2:	56                   	push   esi
c0018ac3:	6a 00                	push   0x0
c0018ac5:	53                   	push   ebx
c0018ac6:	eb 12                	jmp    c0018ada <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018ac8:	89 e3                	mov    ebx,esp
c0018aca:	53                   	push   ebx
c0018acb:	68 82 00 00 c0       	push   0xc0000082
c0018ad0:	e8 8d ff ff ff       	call   c0018a62 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018ad5:	53                   	push   ebx
c0018ad6:	6a 00                	push   0x0
c0018ad8:	6a 00                	push   0x0
c0018ada:	68 82 00 00 c0       	push   0xc0000082
c0018adf:	e8 62 ff ff ff       	call   c0018a46 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018ae4:	83 c4 18             	add    esp,0x18
c0018ae7:	83 c4 10             	add    esp,0x10
c0018aea:	5b                   	pop    ebx
c0018aeb:	5e                   	pop    esi
c0018aec:	c3                   	ret    
c0018aed:	90                   	nop

c0018aee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018aee:	55                   	push   ebp
c0018aef:	57                   	push   edi
c0018af0:	56                   	push   esi
c0018af1:	53                   	push   ebx
c0018af2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018af6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018afa:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018afe:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018b02:	39 05 20 d7 02 c0    	cmp    DWORD PTR ds:0xc002d720,eax
c0018b08:	75 23                	jne    c0018b2d <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018b0a:	a1 4c 0d 03 c0       	mov    eax,ds:0xc0030d4c
c0018b0f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018b13:	89 06                	mov    DWORD PTR [esi],eax
c0018b15:	a1 48 0d 03 c0       	mov    eax,ds:0xc0030d48
c0018b1a:	89 07                	mov    DWORD PTR [edi],eax
c0018b1c:	a1 44 0d 03 c0       	mov    eax,ds:0xc0030d44
c0018b21:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018b24:	a1 40 0d 03 c0       	mov    eax,ds:0xc0030d40
c0018b29:	89 02                	mov    DWORD PTR [edx],eax
c0018b2b:	eb 3f                	jmp    c0018b6c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018b2d:	31 c9                	xor    ecx,ecx
c0018b2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b33:	0f a2                	cpuid  
c0018b35:	89 06                	mov    DWORD PTR [esi],eax
c0018b37:	89 1f                	mov    DWORD PTR [edi],ebx
c0018b39:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018b3d:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018b40:	89 10                	mov    DWORD PTR [eax],edx
c0018b42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b46:	a3 20 d7 02 c0       	mov    ds:0xc002d720,eax
c0018b4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0018b4d:	a3 4c 0d 03 c0       	mov    ds:0xc0030d4c,eax
c0018b52:	8b 07                	mov    eax,DWORD PTR [edi]
c0018b54:	a3 48 0d 03 c0       	mov    ds:0xc0030d48,eax
c0018b59:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018b5c:	a3 44 0d 03 c0       	mov    ds:0xc0030d44,eax
c0018b61:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018b65:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b67:	a3 40 0d 03 c0       	mov    ds:0xc0030d40,eax
c0018b6c:	5b                   	pop    ebx
c0018b6d:	5e                   	pop    esi
c0018b6e:	5f                   	pop    edi
c0018b6f:	5d                   	pop    ebp
c0018b70:	c3                   	ret    
c0018b71:	90                   	nop

c0018b72 <CPU::cpuidCheckEDX(unsigned int)>:
c0018b72:	83 ec 10             	sub    esp,0x10
c0018b75:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b79:	50                   	push   eax
c0018b7a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b7e:	50                   	push   eax
c0018b7f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b83:	50                   	push   eax
c0018b84:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b88:	50                   	push   eax
c0018b89:	6a 01                	push   0x1
c0018b8b:	e8 5e ff ff ff       	call   c0018aee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b90:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b94:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018b98:	0f 95 c0             	setne  al
c0018b9b:	83 c4 24             	add    esp,0x24
c0018b9e:	c3                   	ret    
c0018b9f:	90                   	nop

c0018ba0 <CPU::cpuidCheckECX(unsigned int)>:
c0018ba0:	83 ec 10             	sub    esp,0x10
c0018ba3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ba7:	50                   	push   eax
c0018ba8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bac:	50                   	push   eax
c0018bad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bb1:	50                   	push   eax
c0018bb2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bb6:	50                   	push   eax
c0018bb7:	6a 01                	push   0x1
c0018bb9:	e8 30 ff ff ff       	call   c0018aee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018bbe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bc2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018bc6:	0f 95 c0             	setne  al
c0018bc9:	83 c4 24             	add    esp,0x24
c0018bcc:	c3                   	ret    
c0018bcd:	90                   	nop

c0018bce <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018bce:	83 ec 10             	sub    esp,0x10
c0018bd1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bd5:	50                   	push   eax
c0018bd6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bda:	50                   	push   eax
c0018bdb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bdf:	50                   	push   eax
c0018be0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018be4:	50                   	push   eax
c0018be5:	6a 07                	push   0x7
c0018be7:	e8 02 ff ff ff       	call   c0018aee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018bec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bf0:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018bf4:	0f 95 c0             	setne  al
c0018bf7:	83 c4 24             	add    esp,0x24
c0018bfa:	c3                   	ret    
c0018bfb:	90                   	nop

c0018bfc <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018bfc:	83 ec 10             	sub    esp,0x10
c0018bff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c03:	50                   	push   eax
c0018c04:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c08:	50                   	push   eax
c0018c09:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c0d:	50                   	push   eax
c0018c0e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c12:	50                   	push   eax
c0018c13:	6a 07                	push   0x7
c0018c15:	e8 d4 fe ff ff       	call   c0018aee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c1e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018c22:	0f 95 c0             	setne  al
c0018c25:	83 c4 24             	add    esp,0x24
c0018c28:	c3                   	ret    
c0018c29:	90                   	nop

c0018c2a <CPU::CPU()>:
c0018c2a:	83 ec 0c             	sub    esp,0xc
c0018c2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c31:	83 ec 08             	sub    esp,0x8
c0018c34:	68 02 b7 02 c0       	push   0xc002b702
c0018c39:	50                   	push   eax
c0018c3a:	e8 4f b7 ff ff       	call   c001438e <Device::Device(char const*)>
c0018c3f:	83 c4 10             	add    esp,0x10
c0018c42:	ba dc b7 02 c0       	mov    edx,0xc002b7dc
c0018c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c4b:	89 10                	mov    DWORD PTR [eax],edx
c0018c4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c51:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c5f:	05 78 01 00 00       	add    eax,0x178
c0018c64:	83 ec 0c             	sub    esp,0xc
c0018c67:	50                   	push   eax
c0018c68:	e8 eb 63 ff ff       	call   c000f058 <GDT::GDT()>
c0018c6d:	83 c4 10             	add    esp,0x10
c0018c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c74:	05 7c 09 00 00       	add    eax,0x97c
c0018c79:	83 ec 0c             	sub    esp,0xc
c0018c7c:	50                   	push   eax
c0018c7d:	e8 38 66 ff ff       	call   c000f2ba <IDT::IDT()>
c0018c82:	83 c4 10             	add    esp,0x10
c0018c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c89:	05 7c 11 00 00       	add    eax,0x117c
c0018c8e:	83 ec 0c             	sub    esp,0xc
c0018c91:	50                   	push   eax
c0018c92:	e8 d9 87 ff ff       	call   c0011470 <TSS::TSS()>
c0018c97:	83 c4 10             	add    esp,0x10
c0018c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c9e:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018ca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ca9:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018cb3:	90                   	nop
c0018cb4:	83 c4 0c             	add    esp,0xc
c0018cb7:	c3                   	ret    

c0018cb8 <CPU::displayFeatures()>:
c0018cb8:	53                   	push   ebx
c0018cb9:	83 ec 10             	sub    esp,0x10
c0018cbc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018cc0:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018cc6:	68 10 b4 02 c0       	push   0xc002b410
c0018ccb:	e8 a8 a0 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0018cd0:	59                   	pop    ecx
c0018cd1:	58                   	pop    eax
c0018cd2:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018cd8:	50                   	push   eax
c0018cd9:	68 21 b4 02 c0       	push   0xc002b421
c0018cde:	e8 95 a0 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0018ce3:	58                   	pop    eax
c0018ce4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018cea:	5a                   	pop    edx
c0018ceb:	c1 e8 0e             	shr    eax,0xe
c0018cee:	0f b6 c0             	movzx  eax,al
c0018cf1:	50                   	push   eax
c0018cf2:	68 32 b4 02 c0       	push   0xc002b432
c0018cf7:	e8 7c a0 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0018cfc:	59                   	pop    ecx
c0018cfd:	58                   	pop    eax
c0018cfe:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018d04:	66 c1 e8 06          	shr    ax,0x6
c0018d08:	0f b6 c0             	movzx  eax,al
c0018d0b:	50                   	push   eax
c0018d0c:	68 43 b4 02 c0       	push   0xc002b443
c0018d11:	e8 62 a0 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0018d16:	c7 04 24 f0 b8 02 c0 	mov    DWORD PTR [esp],0xc002b8f0
c0018d1d:	e8 56 a0 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0018d22:	83 c4 10             	add    esp,0x10
c0018d25:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c0018d2a:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018d31:	74 05                	je     c0018d38 <CPU::displayFeatures()+0x80>
c0018d33:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c0018d38:	52                   	push   edx
c0018d39:	52                   	push   edx
c0018d3a:	50                   	push   eax
c0018d3b:	68 54 b4 02 c0       	push   0xc002b454
c0018d40:	e8 33 a0 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0018d45:	83 c4 10             	add    esp,0x10
c0018d48:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c0018d4d:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018d54:	78 05                	js     c0018d5b <CPU::displayFeatures()+0xa3>
c0018d56:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c0018d5b:	51                   	push   ecx
c0018d5c:	51                   	push   ecx
c0018d5d:	50                   	push   eax
c0018d5e:	68 6b b4 02 c0       	push   0xc002b46b
c0018d63:	e8 10 a0 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0018d68:	83 c4 10             	add    esp,0x10
c0018d6b:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c0018d70:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018d77:	75 05                	jne    c0018d7e <CPU::displayFeatures()+0xc6>
c0018d79:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c0018d7e:	52                   	push   edx
c0018d7f:	52                   	push   edx
c0018d80:	50                   	push   eax
c0018d81:	68 82 b4 02 c0       	push   0xc002b482
c0018d86:	e8 ed 9f ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0018d8b:	83 c4 10             	add    esp,0x10
c0018d8e:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c0018d93:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018d9a:	75 05                	jne    c0018da1 <CPU::displayFeatures()+0xe9>
c0018d9c:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c0018da1:	51                   	push   ecx
c0018da2:	51                   	push   ecx
c0018da3:	50                   	push   eax
c0018da4:	68 99 b4 02 c0       	push   0xc002b499
c0018da9:	e8 ca 9f ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0018dae:	83 c4 10             	add    esp,0x10
c0018db1:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c0018db6:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018dbd:	75 05                	jne    c0018dc4 <CPU::displayFeatures()+0x10c>
c0018dbf:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c0018dc4:	52                   	push   edx
c0018dc5:	52                   	push   edx
c0018dc6:	50                   	push   eax
c0018dc7:	68 b0 b4 02 c0       	push   0xc002b4b0
c0018dcc:	e8 a7 9f ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0018dd1:	83 c4 10             	add    esp,0x10
c0018dd4:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c0018dd9:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018de0:	75 05                	jne    c0018de7 <CPU::displayFeatures()+0x12f>
c0018de2:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c0018de7:	51                   	push   ecx
c0018de8:	51                   	push   ecx
c0018de9:	50                   	push   eax
c0018dea:	68 c7 b4 02 c0       	push   0xc002b4c7
c0018def:	e8 84 9f ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0018df4:	83 c4 10             	add    esp,0x10
c0018df7:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c0018dfc:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018e03:	75 05                	jne    c0018e0a <CPU::displayFeatures()+0x152>
c0018e05:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c0018e0a:	52                   	push   edx
c0018e0b:	52                   	push   edx
c0018e0c:	50                   	push   eax
c0018e0d:	68 de b4 02 c0       	push   0xc002b4de
c0018e12:	e8 61 9f ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0018e17:	83 c4 10             	add    esp,0x10
c0018e1a:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c0018e1f:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018e26:	75 05                	jne    c0018e2d <CPU::displayFeatures()+0x175>
c0018e28:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c0018e2d:	51                   	push   ecx
c0018e2e:	51                   	push   ecx
c0018e2f:	50                   	push   eax
c0018e30:	68 f5 b4 02 c0       	push   0xc002b4f5
c0018e35:	e8 3e 9f ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0018e3a:	83 c4 10             	add    esp,0x10
c0018e3d:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c0018e42:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018e49:	75 05                	jne    c0018e50 <CPU::displayFeatures()+0x198>
c0018e4b:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c0018e50:	52                   	push   edx
c0018e51:	52                   	push   edx
c0018e52:	50                   	push   eax
c0018e53:	68 0c b5 02 c0       	push   0xc002b50c
c0018e58:	e8 1b 9f ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0018e5d:	83 c4 10             	add    esp,0x10
c0018e60:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c0018e65:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018e6c:	75 05                	jne    c0018e73 <CPU::displayFeatures()+0x1bb>
c0018e6e:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c0018e73:	51                   	push   ecx
c0018e74:	51                   	push   ecx
c0018e75:	50                   	push   eax
c0018e76:	68 23 b5 02 c0       	push   0xc002b523
c0018e7b:	e8 f8 9e ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0018e80:	83 c4 10             	add    esp,0x10
c0018e83:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c0018e88:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018e8f:	75 05                	jne    c0018e96 <CPU::displayFeatures()+0x1de>
c0018e91:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c0018e96:	52                   	push   edx
c0018e97:	52                   	push   edx
c0018e98:	50                   	push   eax
c0018e99:	68 3a b5 02 c0       	push   0xc002b53a
c0018e9e:	e8 d5 9e ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0018ea3:	83 c4 10             	add    esp,0x10
c0018ea6:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c0018eab:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018eb2:	75 05                	jne    c0018eb9 <CPU::displayFeatures()+0x201>
c0018eb4:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c0018eb9:	51                   	push   ecx
c0018eba:	51                   	push   ecx
c0018ebb:	50                   	push   eax
c0018ebc:	68 51 b5 02 c0       	push   0xc002b551
c0018ec1:	e8 b2 9e ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0018ec6:	83 c4 10             	add    esp,0x10
c0018ec9:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c0018ece:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018ed5:	75 05                	jne    c0018edc <CPU::displayFeatures()+0x224>
c0018ed7:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c0018edc:	52                   	push   edx
c0018edd:	52                   	push   edx
c0018ede:	50                   	push   eax
c0018edf:	68 68 b5 02 c0       	push   0xc002b568
c0018ee4:	e8 8f 9e ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0018ee9:	83 c4 10             	add    esp,0x10
c0018eec:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c0018ef1:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018ef8:	78 05                	js     c0018eff <CPU::displayFeatures()+0x247>
c0018efa:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c0018eff:	51                   	push   ecx
c0018f00:	51                   	push   ecx
c0018f01:	50                   	push   eax
c0018f02:	68 7f b5 02 c0       	push   0xc002b57f
c0018f07:	e8 6c 9e ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0018f0c:	83 c4 10             	add    esp,0x10
c0018f0f:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c0018f14:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018f1b:	75 05                	jne    c0018f22 <CPU::displayFeatures()+0x26a>
c0018f1d:	b8 b6 9e 02 c0       	mov    eax,0xc0029eb6
c0018f22:	52                   	push   edx
c0018f23:	52                   	push   edx
c0018f24:	50                   	push   eax
c0018f25:	68 96 b5 02 c0       	push   0xc002b596
c0018f2a:	e8 49 9e ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0018f2f:	83 c4 18             	add    esp,0x18
c0018f32:	5b                   	pop    ebx
c0018f33:	c3                   	ret    

c0018f34 <CPU::detectFeatures()>:
c0018f34:	55                   	push   ebp
c0018f35:	57                   	push   edi
c0018f36:	56                   	push   esi
c0018f37:	53                   	push   ebx
c0018f38:	83 ec 50             	sub    esp,0x50
c0018f3b:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018f3f:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018f49:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018f50:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018f56:	6a 0d                	push   0xd
c0018f58:	6a 00                	push   0x0
c0018f5a:	57                   	push   edi
c0018f5b:	e8 18 78 fe ff       	call   c0000778 <memset>
c0018f60:	83 c4 10             	add    esp,0x10
c0018f63:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0018f68:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018f6f:	0f 84 20 09 00 00    	je     c0019895 <CPU::detectFeatures()+0x961>
c0018f75:	83 ec 0c             	sub    esp,0xc
c0018f78:	6a 10                	push   0x10
c0018f7a:	e8 f3 fb ff ff       	call   c0018b72 <CPU::cpuidCheckEDX(unsigned int)>
c0018f7f:	83 e0 01             	and    eax,0x1
c0018f82:	8d 14 00             	lea    edx,[eax+eax*1]
c0018f85:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f8b:	83 e0 fd             	and    eax,0xfffffffd
c0018f8e:	09 d0                	or     eax,edx
c0018f90:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f96:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018f9d:	e8 d0 fb ff ff       	call   c0018b72 <CPU::cpuidCheckEDX(unsigned int)>
c0018fa2:	83 e0 01             	and    eax,0x1
c0018fa5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018fac:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018fb2:	83 e0 fb             	and    eax,0xfffffffb
c0018fb5:	09 d0                	or     eax,edx
c0018fb7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018fbd:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018fc4:	e8 a9 fb ff ff       	call   c0018b72 <CPU::cpuidCheckEDX(unsigned int)>
c0018fc9:	83 e0 01             	and    eax,0x1
c0018fcc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018fd3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018fd9:	83 e0 f7             	and    eax,0xfffffff7
c0018fdc:	09 d0                	or     eax,edx
c0018fde:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018fe4:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018feb:	e8 82 fb ff ff       	call   c0018b72 <CPU::cpuidCheckEDX(unsigned int)>
c0018ff0:	83 e0 01             	and    eax,0x1
c0018ff3:	c1 e0 04             	shl    eax,0x4
c0018ff6:	88 c2                	mov    dl,al
c0018ff8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ffe:	83 e0 ef             	and    eax,0xffffffef
c0019001:	09 d0                	or     eax,edx
c0019003:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019009:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0019010:	e8 5d fb ff ff       	call   c0018b72 <CPU::cpuidCheckEDX(unsigned int)>
c0019015:	83 e0 01             	and    eax,0x1
c0019018:	c1 e0 05             	shl    eax,0x5
c001901b:	88 c2                	mov    dl,al
c001901d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019023:	83 e0 df             	and    eax,0xffffffdf
c0019026:	09 d0                	or     eax,edx
c0019028:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001902e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0019035:	e8 38 fb ff ff       	call   c0018b72 <CPU::cpuidCheckEDX(unsigned int)>
c001903a:	83 e0 01             	and    eax,0x1
c001903d:	8d 14 00             	lea    edx,[eax+eax*1]
c0019040:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019046:	83 e0 fd             	and    eax,0xfffffffd
c0019049:	09 d0                	or     eax,edx
c001904b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019051:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019058:	e8 15 fb ff ff       	call   c0018b72 <CPU::cpuidCheckEDX(unsigned int)>
c001905d:	83 e0 01             	and    eax,0x1
c0019060:	c1 e0 06             	shl    eax,0x6
c0019063:	88 c2                	mov    dl,al
c0019065:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001906b:	83 e0 bf             	and    eax,0xffffffbf
c001906e:	09 d0                	or     eax,edx
c0019070:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019076:	58                   	pop    eax
c0019077:	8d 74 24 28          	lea    esi,[esp+0x28]
c001907b:	56                   	push   esi
c001907c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019080:	55                   	push   ebp
c0019081:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019085:	50                   	push   eax
c0019086:	8d 54 24 28          	lea    edx,[esp+0x28]
c001908a:	52                   	push   edx
c001908b:	6a 00                	push   0x0
c001908d:	e8 5c fa ff ff       	call   c0018aee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019092:	83 c4 1c             	add    esp,0x1c
c0019095:	6a 04                	push   0x4
c0019097:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001909b:	50                   	push   eax
c001909c:	57                   	push   edi
c001909d:	e8 a2 76 fe ff       	call   c0000744 <memcpy>
c00190a2:	83 c4 0c             	add    esp,0xc
c00190a5:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00190ab:	6a 04                	push   0x4
c00190ad:	56                   	push   esi
c00190ae:	50                   	push   eax
c00190af:	e8 90 76 fe ff       	call   c0000744 <memcpy>
c00190b4:	83 c4 0c             	add    esp,0xc
c00190b7:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00190bd:	6a 04                	push   0x4
c00190bf:	55                   	push   ebp
c00190c0:	50                   	push   eax
c00190c1:	e8 7e 76 fe ff       	call   c0000744 <memcpy>
c00190c6:	58                   	pop    eax
c00190c7:	5a                   	pop    edx
c00190c8:	68 ad b5 02 c0       	push   0xc002b5ad
c00190cd:	57                   	push   edi
c00190ce:	e8 ed 77 fe ff       	call   c00008c0 <strcmp>
c00190d3:	83 c4 10             	add    esp,0x10
c00190d6:	85 c0                	test   eax,eax
c00190d8:	75 0f                	jne    c00190e9 <CPU::detectFeatures()+0x1b5>
c00190da:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00190e4:	e9 22 02 00 00       	jmp    c001930b <CPU::detectFeatures()+0x3d7>
c00190e9:	50                   	push   eax
c00190ea:	50                   	push   eax
c00190eb:	68 ba b5 02 c0       	push   0xc002b5ba
c00190f0:	57                   	push   edi
c00190f1:	e8 ca 77 fe ff       	call   c00008c0 <strcmp>
c00190f6:	83 c4 10             	add    esp,0x10
c00190f9:	85 c0                	test   eax,eax
c00190fb:	74 dd                	je     c00190da <CPU::detectFeatures()+0x1a6>
c00190fd:	51                   	push   ecx
c00190fe:	51                   	push   ecx
c00190ff:	68 c7 b5 02 c0       	push   0xc002b5c7
c0019104:	57                   	push   edi
c0019105:	e8 b6 77 fe ff       	call   c00008c0 <strcmp>
c001910a:	83 c4 10             	add    esp,0x10
c001910d:	85 c0                	test   eax,eax
c001910f:	74 2a                	je     c001913b <CPU::detectFeatures()+0x207>
c0019111:	52                   	push   edx
c0019112:	52                   	push   edx
c0019113:	68 d4 b5 02 c0       	push   0xc002b5d4
c0019118:	57                   	push   edi
c0019119:	e8 a2 77 fe ff       	call   c00008c0 <strcmp>
c001911e:	83 c4 10             	add    esp,0x10
c0019121:	85 c0                	test   eax,eax
c0019123:	74 16                	je     c001913b <CPU::detectFeatures()+0x207>
c0019125:	50                   	push   eax
c0019126:	50                   	push   eax
c0019127:	68 e1 b5 02 c0       	push   0xc002b5e1
c001912c:	57                   	push   edi
c001912d:	e8 8e 77 fe ff       	call   c00008c0 <strcmp>
c0019132:	83 c4 10             	add    esp,0x10
c0019135:	85 c0                	test   eax,eax
c0019137:	74 48                	je     c0019181 <CPU::detectFeatures()+0x24d>
c0019139:	eb 0f                	jmp    c001914a <CPU::detectFeatures()+0x216>
c001913b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019145:	e9 c1 01 00 00       	jmp    c001930b <CPU::detectFeatures()+0x3d7>
c001914a:	50                   	push   eax
c001914b:	50                   	push   eax
c001914c:	68 ee b5 02 c0       	push   0xc002b5ee
c0019151:	57                   	push   edi
c0019152:	e8 69 77 fe ff       	call   c00008c0 <strcmp>
c0019157:	83 c4 10             	add    esp,0x10
c001915a:	85 c0                	test   eax,eax
c001915c:	74 23                	je     c0019181 <CPU::detectFeatures()+0x24d>
c001915e:	50                   	push   eax
c001915f:	50                   	push   eax
c0019160:	68 fb b5 02 c0       	push   0xc002b5fb
c0019165:	57                   	push   edi
c0019166:	e8 55 77 fe ff       	call   c00008c0 <strcmp>
c001916b:	83 c4 10             	add    esp,0x10
c001916e:	85 c0                	test   eax,eax
c0019170:	75 1e                	jne    c0019190 <CPU::detectFeatures()+0x25c>
c0019172:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001917c:	e9 8a 01 00 00       	jmp    c001930b <CPU::detectFeatures()+0x3d7>
c0019181:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001918b:	e9 7b 01 00 00       	jmp    c001930b <CPU::detectFeatures()+0x3d7>
c0019190:	50                   	push   eax
c0019191:	50                   	push   eax
c0019192:	68 08 b6 02 c0       	push   0xc002b608
c0019197:	57                   	push   edi
c0019198:	e8 23 77 fe ff       	call   c00008c0 <strcmp>
c001919d:	83 c4 10             	add    esp,0x10
c00191a0:	85 c0                	test   eax,eax
c00191a2:	75 0f                	jne    c00191b3 <CPU::detectFeatures()+0x27f>
c00191a4:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00191ae:	e9 58 01 00 00       	jmp    c001930b <CPU::detectFeatures()+0x3d7>
c00191b3:	50                   	push   eax
c00191b4:	50                   	push   eax
c00191b5:	68 c7 b5 02 c0       	push   0xc002b5c7
c00191ba:	57                   	push   edi
c00191bb:	e8 00 77 fe ff       	call   c00008c0 <strcmp>
c00191c0:	83 c4 10             	add    esp,0x10
c00191c3:	85 c0                	test   eax,eax
c00191c5:	75 0f                	jne    c00191d6 <CPU::detectFeatures()+0x2a2>
c00191c7:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00191d1:	e9 35 01 00 00       	jmp    c001930b <CPU::detectFeatures()+0x3d7>
c00191d6:	50                   	push   eax
c00191d7:	50                   	push   eax
c00191d8:	68 15 b6 02 c0       	push   0xc002b615
c00191dd:	57                   	push   edi
c00191de:	e8 dd 76 fe ff       	call   c00008c0 <strcmp>
c00191e3:	83 c4 10             	add    esp,0x10
c00191e6:	85 c0                	test   eax,eax
c00191e8:	75 0f                	jne    c00191f9 <CPU::detectFeatures()+0x2c5>
c00191ea:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00191f4:	e9 12 01 00 00       	jmp    c001930b <CPU::detectFeatures()+0x3d7>
c00191f9:	51                   	push   ecx
c00191fa:	51                   	push   ecx
c00191fb:	68 22 b6 02 c0       	push   0xc002b622
c0019200:	57                   	push   edi
c0019201:	e8 ba 76 fe ff       	call   c00008c0 <strcmp>
c0019206:	83 c4 10             	add    esp,0x10
c0019209:	85 c0                	test   eax,eax
c001920b:	75 0f                	jne    c001921c <CPU::detectFeatures()+0x2e8>
c001920d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019217:	e9 ef 00 00 00       	jmp    c001930b <CPU::detectFeatures()+0x3d7>
c001921c:	52                   	push   edx
c001921d:	52                   	push   edx
c001921e:	68 2f b6 02 c0       	push   0xc002b62f
c0019223:	57                   	push   edi
c0019224:	e8 97 76 fe ff       	call   c00008c0 <strcmp>
c0019229:	83 c4 10             	add    esp,0x10
c001922c:	85 c0                	test   eax,eax
c001922e:	75 0f                	jne    c001923f <CPU::detectFeatures()+0x30b>
c0019230:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001923a:	e9 cc 00 00 00       	jmp    c001930b <CPU::detectFeatures()+0x3d7>
c001923f:	50                   	push   eax
c0019240:	50                   	push   eax
c0019241:	68 3c b6 02 c0       	push   0xc002b63c
c0019246:	57                   	push   edi
c0019247:	e8 74 76 fe ff       	call   c00008c0 <strcmp>
c001924c:	83 c4 10             	add    esp,0x10
c001924f:	85 c0                	test   eax,eax
c0019251:	75 0f                	jne    c0019262 <CPU::detectFeatures()+0x32e>
c0019253:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001925d:	e9 a9 00 00 00       	jmp    c001930b <CPU::detectFeatures()+0x3d7>
c0019262:	50                   	push   eax
c0019263:	50                   	push   eax
c0019264:	68 49 b6 02 c0       	push   0xc002b649
c0019269:	57                   	push   edi
c001926a:	e8 51 76 fe ff       	call   c00008c0 <strcmp>
c001926f:	83 c4 10             	add    esp,0x10
c0019272:	85 c0                	test   eax,eax
c0019274:	75 0f                	jne    c0019285 <CPU::detectFeatures()+0x351>
c0019276:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019280:	e9 86 00 00 00       	jmp    c001930b <CPU::detectFeatures()+0x3d7>
c0019285:	50                   	push   eax
c0019286:	50                   	push   eax
c0019287:	68 56 b6 02 c0       	push   0xc002b656
c001928c:	57                   	push   edi
c001928d:	e8 2e 76 fe ff       	call   c00008c0 <strcmp>
c0019292:	83 c4 10             	add    esp,0x10
c0019295:	85 c0                	test   eax,eax
c0019297:	75 0c                	jne    c00192a5 <CPU::detectFeatures()+0x371>
c0019299:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00192a3:	eb 66                	jmp    c001930b <CPU::detectFeatures()+0x3d7>
c00192a5:	50                   	push   eax
c00192a6:	50                   	push   eax
c00192a7:	68 63 b6 02 c0       	push   0xc002b663
c00192ac:	57                   	push   edi
c00192ad:	e8 0e 76 fe ff       	call   c00008c0 <strcmp>
c00192b2:	83 c4 10             	add    esp,0x10
c00192b5:	85 c0                	test   eax,eax
c00192b7:	75 0c                	jne    c00192c5 <CPU::detectFeatures()+0x391>
c00192b9:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00192c3:	eb 46                	jmp    c001930b <CPU::detectFeatures()+0x3d7>
c00192c5:	50                   	push   eax
c00192c6:	50                   	push   eax
c00192c7:	68 70 b6 02 c0       	push   0xc002b670
c00192cc:	57                   	push   edi
c00192cd:	e8 ee 75 fe ff       	call   c00008c0 <strcmp>
c00192d2:	83 c4 10             	add    esp,0x10
c00192d5:	85 c0                	test   eax,eax
c00192d7:	74 e0                	je     c00192b9 <CPU::detectFeatures()+0x385>
c00192d9:	50                   	push   eax
c00192da:	50                   	push   eax
c00192db:	68 7d b6 02 c0       	push   0xc002b67d
c00192e0:	57                   	push   edi
c00192e1:	e8 da 75 fe ff       	call   c00008c0 <strcmp>
c00192e6:	83 c4 10             	add    esp,0x10
c00192e9:	85 c0                	test   eax,eax
c00192eb:	74 cc                	je     c00192b9 <CPU::detectFeatures()+0x385>
c00192ed:	51                   	push   ecx
c00192ee:	51                   	push   ecx
c00192ef:	68 8a b6 02 c0       	push   0xc002b68a
c00192f4:	57                   	push   edi
c00192f5:	e8 c6 75 fe ff       	call   c00008c0 <strcmp>
c00192fa:	83 c4 10             	add    esp,0x10
c00192fd:	85 c0                	test   eax,eax
c00192ff:	74 b8                	je     c00192b9 <CPU::detectFeatures()+0x385>
c0019301:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001930b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019310:	0f 86 be 00 00 00    	jbe    c00193d4 <CPU::detectFeatures()+0x4a0>
c0019316:	83 ec 0c             	sub    esp,0xc
c0019319:	68 80 00 00 00       	push   0x80
c001931e:	e8 ab f8 ff ff       	call   c0018bce <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019323:	83 e0 01             	and    eax,0x1
c0019326:	c1 e0 06             	shl    eax,0x6
c0019329:	88 c2                	mov    dl,al
c001932b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019331:	83 e0 bf             	and    eax,0xffffffbf
c0019334:	09 d0                	or     eax,edx
c0019336:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001933c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019343:	e8 86 f8 ff ff       	call   c0018bce <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019348:	83 e0 01             	and    eax,0x1
c001934b:	c1 e0 04             	shl    eax,0x4
c001934e:	88 c2                	mov    dl,al
c0019350:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019356:	83 e0 ef             	and    eax,0xffffffef
c0019359:	09 d0                	or     eax,edx
c001935b:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019361:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019368:	e8 61 f8 ff ff       	call   c0018bce <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001936d:	c1 e0 07             	shl    eax,0x7
c0019370:	88 c2                	mov    dl,al
c0019372:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019378:	83 e0 7f             	and    eax,0x7f
c001937b:	09 d0                	or     eax,edx
c001937d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019383:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001938a:	e8 6d f8 ff ff       	call   c0018bfc <CPU::cpuidCheckExtendedECX(unsigned int)>
c001938f:	83 e0 01             	and    eax,0x1
c0019392:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019399:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001939f:	83 e0 f7             	and    eax,0xfffffff7
c00193a2:	09 d0                	or     eax,edx
c00193a4:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00193aa:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00193b1:	e8 46 f8 ff ff       	call   c0018bfc <CPU::cpuidCheckExtendedECX(unsigned int)>
c00193b6:	83 c4 10             	add    esp,0x10
c00193b9:	83 e0 01             	and    eax,0x1
c00193bc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00193c3:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00193c9:	83 e0 fb             	and    eax,0xfffffffb
c00193cc:	09 d0                	or     eax,edx
c00193ce:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00193d4:	83 ec 0c             	sub    esp,0xc
c00193d7:	56                   	push   esi
c00193d8:	55                   	push   ebp
c00193d9:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00193dd:	57                   	push   edi
c00193de:	8d 44 24 28          	lea    eax,[esp+0x28]
c00193e2:	50                   	push   eax
c00193e3:	6a 01                	push   0x1
c00193e5:	e8 04 f7 ff ff       	call   c0018aee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00193ea:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00193ee:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00193f4:	88 ca                	mov    dl,cl
c00193f6:	83 e0 f0             	and    eax,0xfffffff0
c00193f9:	83 e2 0f             	and    edx,0xf
c00193fc:	09 d0                	or     eax,edx
c00193fe:	88 ca                	mov    dl,cl
c0019400:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019406:	c0 ea 04             	shr    dl,0x4
c0019409:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001940d:	0f b6 c2             	movzx  eax,dl
c0019410:	83 c4 20             	add    esp,0x20
c0019413:	c1 e0 06             	shl    eax,0x6
c0019416:	89 c5                	mov    ebp,eax
c0019418:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001941e:	66 25 3f c0          	and    ax,0xc03f
c0019422:	09 e8                	or     eax,ebp
c0019424:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001942b:	89 c8                	mov    eax,ecx
c001942d:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0019433:	c1 e8 08             	shr    eax,0x8
c0019436:	83 e2 3f             	and    edx,0x3f
c0019439:	83 e0 0f             	and    eax,0xf
c001943c:	89 c5                	mov    ebp,eax
c001943e:	c1 e5 06             	shl    ebp,0x6
c0019441:	09 d5                	or     ebp,edx
c0019443:	89 ea                	mov    edx,ebp
c0019445:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001944b:	88 c2                	mov    dl,al
c001944d:	c0 ea 02             	shr    dl,0x2
c0019450:	89 d5                	mov    ebp,edx
c0019452:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019458:	83 e2 c0             	and    edx,0xffffffc0
c001945b:	09 d5                	or     ebp,edx
c001945d:	89 ea                	mov    edx,ebp
c001945f:	89 cd                	mov    ebp,ecx
c0019461:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019467:	c1 ed 0c             	shr    ebp,0xc
c001946a:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019470:	83 e5 03             	and    ebp,0x3
c0019473:	83 e2 cf             	and    edx,0xffffffcf
c0019476:	c1 e5 04             	shl    ebp,0x4
c0019479:	09 d5                	or     ebp,edx
c001947b:	3c 06                	cmp    al,0x6
c001947d:	89 ea                	mov    edx,ebp
c001947f:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019485:	74 04                	je     c001948b <CPU::detectFeatures()+0x557>
c0019487:	3c 0f                	cmp    al,0xf
c0019489:	75 5c                	jne    c00194e7 <CPU::detectFeatures()+0x5b3>
c001948b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001948f:	89 cd                	mov    ebp,ecx
c0019491:	c1 ed 10             	shr    ebp,0x10
c0019494:	c1 e5 04             	shl    ebp,0x4
c0019497:	09 ea                	or     edx,ebp
c0019499:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001949f:	0f b6 d2             	movzx  edx,dl
c00194a2:	66 81 e5 3f c0       	and    bp,0xc03f
c00194a7:	c1 e2 06             	shl    edx,0x6
c00194aa:	09 ea                	or     edx,ebp
c00194ac:	3c 0f                	cmp    al,0xf
c00194ae:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00194b5:	75 30                	jne    c00194e7 <CPU::detectFeatures()+0x5b3>
c00194b7:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00194bd:	c1 e9 14             	shr    ecx,0x14
c00194c0:	83 e0 3f             	and    eax,0x3f
c00194c3:	83 c1 0f             	add    ecx,0xf
c00194c6:	88 ca                	mov    dl,cl
c00194c8:	c0 e9 02             	shr    cl,0x2
c00194cb:	c1 e2 06             	shl    edx,0x6
c00194ce:	09 d0                	or     eax,edx
c00194d0:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00194d6:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00194dc:	83 e0 c0             	and    eax,0xffffffc0
c00194df:	09 c1                	or     ecx,eax
c00194e1:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00194e7:	83 ec 0c             	sub    esp,0xc
c00194ea:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00194f1:	56                   	push   esi
c00194f2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00194f6:	50                   	push   eax
c00194f7:	57                   	push   edi
c00194f8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00194fc:	55                   	push   ebp
c00194fd:	68 00 00 00 80       	push   0x80000000
c0019502:	e8 e7 f5 ff ff       	call   c0018aee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019507:	83 c4 20             	add    esp,0x20
c001950a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019512:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019516:	76 1e                	jbe    c0019536 <CPU::detectFeatures()+0x602>
c0019518:	83 ec 0c             	sub    esp,0xc
c001951b:	56                   	push   esi
c001951c:	50                   	push   eax
c001951d:	57                   	push   edi
c001951e:	55                   	push   ebp
c001951f:	68 01 00 00 80       	push   0x80000001
c0019524:	e8 c5 f5 ff ff       	call   c0018aee <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019529:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019533:	83 c4 20             	add    esp,0x20
c0019536:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001953c:	83 f8 01             	cmp    eax,0x1
c001953f:	75 6f                	jne    c00195b0 <CPU::detectFeatures()+0x67c>
c0019541:	51                   	push   ecx
c0019542:	51                   	push   ecx
c0019543:	68 96 b6 02 c0       	push   0xc002b696
c0019548:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001954c:	56                   	push   esi
c001954d:	e8 e2 72 fe ff       	call   c0000834 <strcpy>
c0019552:	5f                   	pop    edi
c0019553:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019559:	5d                   	pop    ebp
c001955a:	66 c1 e8 06          	shr    ax,0x6
c001955e:	0f b6 c0             	movzx  eax,al
c0019561:	50                   	push   eax
c0019562:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019568:	c1 e8 0e             	shr    eax,0xe
c001956b:	0f b6 c0             	movzx  eax,al
c001956e:	50                   	push   eax
c001956f:	e8 24 f2 ff ff       	call   c0018798 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019574:	5a                   	pop    edx
c0019575:	59                   	pop    ecx
c0019576:	50                   	push   eax
c0019577:	56                   	push   esi
c0019578:	e8 f7 73 fe ff       	call   c0000974 <strcat>
c001957d:	5f                   	pop    edi
c001957e:	5d                   	pop    ebp
c001957f:	56                   	push   esi
c0019580:	53                   	push   ebx
c0019581:	e8 fa ad ff ff       	call   c0014380 <Device::setName(char const*)>
c0019586:	58                   	pop    eax
c0019587:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001958d:	5a                   	pop    edx
c001958e:	68 9d b6 02 c0       	push   0xc002b69d
c0019593:	50                   	push   eax
c0019594:	e8 27 73 fe ff       	call   c00008c0 <strcmp>
c0019599:	83 c4 10             	add    esp,0x10
c001959c:	85 c0                	test   eax,eax
c001959e:	0f 85 71 03 00 00    	jne    c0019915 <CPU::detectFeatures()+0x9e1>
c00195a4:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00195ab:	e9 65 03 00 00       	jmp    c0019915 <CPU::detectFeatures()+0x9e1>
c00195b0:	83 f8 02             	cmp    eax,0x2
c00195b3:	0f 85 b5 00 00 00    	jne    c001966e <CPU::detectFeatures()+0x73a>
c00195b9:	57                   	push   edi
c00195ba:	57                   	push   edi
c00195bb:	68 af b6 02 c0       	push   0xc002b6af
c00195c0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00195c4:	56                   	push   esi
c00195c5:	e8 6a 72 fe ff       	call   c0000834 <strcpy>
c00195ca:	5d                   	pop    ebp
c00195cb:	58                   	pop    eax
c00195cc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195d2:	66 c1 e8 06          	shr    ax,0x6
c00195d6:	0f b6 c0             	movzx  eax,al
c00195d9:	50                   	push   eax
c00195da:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195e0:	c1 e8 0e             	shr    eax,0xe
c00195e3:	0f b6 c0             	movzx  eax,al
c00195e6:	50                   	push   eax
c00195e7:	e8 18 f0 ff ff       	call   c0018604 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00195ec:	5a                   	pop    edx
c00195ed:	59                   	pop    ecx
c00195ee:	50                   	push   eax
c00195ef:	56                   	push   esi
c00195f0:	e8 7f 73 fe ff       	call   c0000974 <strcat>
c00195f5:	5f                   	pop    edi
c00195f6:	5d                   	pop    ebp
c00195f7:	56                   	push   esi
c00195f8:	53                   	push   ebx
c00195f9:	e8 82 ad ff ff       	call   c0014380 <Device::setName(char const*)>
c00195fe:	58                   	pop    eax
c00195ff:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019605:	5a                   	pop    edx
c0019606:	68 b4 b6 02 c0       	push   0xc002b6b4
c001960b:	50                   	push   eax
c001960c:	e8 af 72 fe ff       	call   c00008c0 <strcmp>
c0019611:	83 c4 10             	add    esp,0x10
c0019614:	85 c0                	test   eax,eax
c0019616:	75 20                	jne    c0019638 <CPU::detectFeatures()+0x704>
c0019618:	8b 15 08 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e208
c001961e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019624:	a8 01                	test   al,0x1
c0019626:	74 10                	je     c0019638 <CPU::detectFeatures()+0x704>
c0019628:	83 e0 fe             	and    eax,0xfffffffe
c001962b:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019631:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019638:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001963e:	c1 e8 0e             	shr    eax,0xe
c0019641:	3c 05                	cmp    al,0x5
c0019643:	0f 85 cc 02 00 00    	jne    c0019915 <CPU::detectFeatures()+0x9e1>
c0019649:	56                   	push   esi
c001964a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019650:	83 e0 0f             	and    eax,0xf
c0019653:	50                   	push   eax
c0019654:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001965a:	66 c1 e8 06          	shr    ax,0x6
c001965e:	0f b6 c0             	movzx  eax,al
c0019661:	50                   	push   eax
c0019662:	6a 05                	push   0x5
c0019664:	e8 11 f4 ff ff       	call   c0018a7a <CPU::AMD_K6_writeback(int, int, int)>
c0019669:	e9 1f 02 00 00       	jmp    c001988d <CPU::detectFeatures()+0x959>
c001966e:	8d 50 fd             	lea    edx,[eax-0x3]
c0019671:	83 fa 01             	cmp    edx,0x1
c0019674:	76 09                	jbe    c001967f <CPU::detectFeatures()+0x74b>
c0019676:	83 f8 06             	cmp    eax,0x6
c0019679:	0f 85 91 01 00 00    	jne    c0019810 <CPU::detectFeatures()+0x8dc>
c001967f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019685:	c1 ea 0e             	shr    edx,0xe
c0019688:	80 fa 05             	cmp    dl,0x5
c001968b:	75 7b                	jne    c0019708 <CPU::detectFeatures()+0x7d4>
c001968d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019693:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019698:	66 81 fa 00 01       	cmp    dx,0x100
c001969d:	75 0c                	jne    c00196ab <CPU::detectFeatures()+0x777>
c001969f:	51                   	push   ecx
c00196a0:	51                   	push   ecx
c00196a1:	68 bb b6 02 c0       	push   0xc002b6bb
c00196a6:	e9 dc 01 00 00       	jmp    c0019887 <CPU::detectFeatures()+0x953>
c00196ab:	66 81 fa 00 02       	cmp    dx,0x200
c00196b0:	75 0c                	jne    c00196be <CPU::detectFeatures()+0x78a>
c00196b2:	52                   	push   edx
c00196b3:	52                   	push   edx
c00196b4:	68 ce b6 02 c0       	push   0xc002b6ce
c00196b9:	e9 c9 01 00 00       	jmp    c0019887 <CPU::detectFeatures()+0x953>
c00196be:	66 81 fa 40 02       	cmp    dx,0x240
c00196c3:	75 0c                	jne    c00196d1 <CPU::detectFeatures()+0x79d>
c00196c5:	50                   	push   eax
c00196c6:	50                   	push   eax
c00196c7:	68 e0 b6 02 c0       	push   0xc002b6e0
c00196cc:	e9 b6 01 00 00       	jmp    c0019887 <CPU::detectFeatures()+0x953>
c00196d1:	83 f8 06             	cmp    eax,0x6
c00196d4:	75 0c                	jne    c00196e2 <CPU::detectFeatures()+0x7ae>
c00196d6:	50                   	push   eax
c00196d7:	50                   	push   eax
c00196d8:	68 f2 b6 02 c0       	push   0xc002b6f2
c00196dd:	e9 a5 01 00 00       	jmp    c0019887 <CPU::detectFeatures()+0x953>
c00196e2:	83 f8 04             	cmp    eax,0x4
c00196e5:	75 0c                	jne    c00196f3 <CPU::detectFeatures()+0x7bf>
c00196e7:	50                   	push   eax
c00196e8:	50                   	push   eax
c00196e9:	68 fe b6 02 c0       	push   0xc002b6fe
c00196ee:	e9 94 01 00 00       	jmp    c0019887 <CPU::detectFeatures()+0x953>
c00196f3:	83 f8 03             	cmp    eax,0x3
c00196f6:	0f 85 19 02 00 00    	jne    c0019915 <CPU::detectFeatures()+0x9e1>
c00196fc:	50                   	push   eax
c00196fd:	50                   	push   eax
c00196fe:	68 06 b7 02 c0       	push   0xc002b706
c0019703:	e9 7f 01 00 00       	jmp    c0019887 <CPU::detectFeatures()+0x953>
c0019708:	80 fa 06             	cmp    dl,0x6
c001970b:	0f 85 db 00 00 00    	jne    c00197ec <CPU::detectFeatures()+0x8b8>
c0019711:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019717:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001971c:	66 81 fa 80 01       	cmp    dx,0x180
c0019721:	75 0c                	jne    c001972f <CPU::detectFeatures()+0x7fb>
c0019723:	50                   	push   eax
c0019724:	50                   	push   eax
c0019725:	68 11 b7 02 c0       	push   0xc002b711
c001972a:	e9 58 01 00 00       	jmp    c0019887 <CPU::detectFeatures()+0x953>
c001972f:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019735:	66 f7 c1 80 ff       	test   cx,0xff80
c001973a:	75 0c                	jne    c0019748 <CPU::detectFeatures()+0x814>
c001973c:	50                   	push   eax
c001973d:	50                   	push   eax
c001973e:	68 21 b7 02 c0       	push   0xc002b721
c0019743:	e9 3f 01 00 00       	jmp    c0019887 <CPU::detectFeatures()+0x953>
c0019748:	66 81 fa 40 02       	cmp    dx,0x240
c001974d:	75 0c                	jne    c001975b <CPU::detectFeatures()+0x827>
c001974f:	55                   	push   ebp
c0019750:	55                   	push   ebp
c0019751:	68 28 b7 02 c0       	push   0xc002b728
c0019756:	e9 2c 01 00 00       	jmp    c0019887 <CPU::detectFeatures()+0x953>
c001975b:	66 81 fa 80 02       	cmp    dx,0x280
c0019760:	75 0c                	jne    c001976e <CPU::detectFeatures()+0x83a>
c0019762:	57                   	push   edi
c0019763:	57                   	push   edi
c0019764:	68 31 b7 02 c0       	push   0xc002b731
c0019769:	e9 19 01 00 00       	jmp    c0019887 <CPU::detectFeatures()+0x953>
c001976e:	66 81 fa 40 03       	cmp    dx,0x340
c0019773:	74 ed                	je     c0019762 <CPU::detectFeatures()+0x82e>
c0019775:	66 81 fa c0 03       	cmp    dx,0x3c0
c001977a:	75 0c                	jne    c0019788 <CPU::detectFeatures()+0x854>
c001977c:	56                   	push   esi
c001977d:	56                   	push   esi
c001977e:	68 38 b7 02 c0       	push   0xc002b738
c0019783:	e9 ff 00 00 00       	jmp    c0019887 <CPU::detectFeatures()+0x953>
c0019788:	83 f8 06             	cmp    eax,0x6
c001978b:	0f 84 45 ff ff ff    	je     c00196d6 <CPU::detectFeatures()+0x7a2>
c0019791:	83 f8 04             	cmp    eax,0x4
c0019794:	0f 84 4d ff ff ff    	je     c00196e7 <CPU::detectFeatures()+0x7b3>
c001979a:	83 f8 03             	cmp    eax,0x3
c001979d:	0f 85 72 01 00 00    	jne    c0019915 <CPU::detectFeatures()+0x9e1>
c00197a3:	51                   	push   ecx
c00197a4:	51                   	push   ecx
c00197a5:	68 41 b7 02 c0       	push   0xc002b741
c00197aa:	53                   	push   ebx
c00197ab:	e8 d0 ab ff ff       	call   c0014380 <Device::setName(char const*)>
c00197b0:	b1 c1                	mov    cl,0xc1
c00197b2:	88 c8                	mov    al,cl
c00197b4:	e6 22                	out    0x22,al
c00197b6:	e4 23                	in     al,0x23
c00197b8:	88 c2                	mov    dl,al
c00197ba:	88 c8                	mov    al,cl
c00197bc:	e6 22                	out    0x22,al
c00197be:	88 d0                	mov    al,dl
c00197c0:	83 c8 10             	or     eax,0x10
c00197c3:	e6 23                	out    0x23,al
c00197c5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00197cc:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00197cf:	89 d0                	mov    eax,edx
c00197d1:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00197d7:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00197db:	40                   	inc    eax
c00197dc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00197e2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00197e7:	e9 a1 00 00 00       	jmp    c001988d <CPU::detectFeatures()+0x959>
c00197ec:	83 f8 06             	cmp    eax,0x6
c00197ef:	0f 84 e1 fe ff ff    	je     c00196d6 <CPU::detectFeatures()+0x7a2>
c00197f5:	83 f8 04             	cmp    eax,0x4
c00197f8:	0f 84 e9 fe ff ff    	je     c00196e7 <CPU::detectFeatures()+0x7b3>
c00197fe:	83 f8 03             	cmp    eax,0x3
c0019801:	0f 85 0e 01 00 00    	jne    c0019915 <CPU::detectFeatures()+0x9e1>
c0019807:	52                   	push   edx
c0019808:	52                   	push   edx
c0019809:	68 4c b7 02 c0       	push   0xc002b74c
c001980e:	eb 77                	jmp    c0019887 <CPU::detectFeatures()+0x953>
c0019810:	83 f8 07             	cmp    eax,0x7
c0019813:	75 09                	jne    c001981e <CPU::detectFeatures()+0x8ea>
c0019815:	50                   	push   eax
c0019816:	50                   	push   eax
c0019817:	68 56 b7 02 c0       	push   0xc002b756
c001981c:	eb 69                	jmp    c0019887 <CPU::detectFeatures()+0x953>
c001981e:	83 f8 0a             	cmp    eax,0xa
c0019821:	75 09                	jne    c001982c <CPU::detectFeatures()+0x8f8>
c0019823:	50                   	push   eax
c0019824:	50                   	push   eax
c0019825:	68 61 b7 02 c0       	push   0xc002b761
c001982a:	eb 5b                	jmp    c0019887 <CPU::detectFeatures()+0x953>
c001982c:	83 f8 0b             	cmp    eax,0xb
c001982f:	75 09                	jne    c001983a <CPU::detectFeatures()+0x906>
c0019831:	50                   	push   eax
c0019832:	50                   	push   eax
c0019833:	68 69 b7 02 c0       	push   0xc002b769
c0019838:	eb 4d                	jmp    c0019887 <CPU::detectFeatures()+0x953>
c001983a:	83 f8 08             	cmp    eax,0x8
c001983d:	75 09                	jne    c0019848 <CPU::detectFeatures()+0x914>
c001983f:	50                   	push   eax
c0019840:	50                   	push   eax
c0019841:	68 72 b7 02 c0       	push   0xc002b772
c0019846:	eb 3f                	jmp    c0019887 <CPU::detectFeatures()+0x953>
c0019848:	83 f8 09             	cmp    eax,0x9
c001984b:	75 09                	jne    c0019856 <CPU::detectFeatures()+0x922>
c001984d:	50                   	push   eax
c001984e:	50                   	push   eax
c001984f:	68 7a b7 02 c0       	push   0xc002b77a
c0019854:	eb 31                	jmp    c0019887 <CPU::detectFeatures()+0x953>
c0019856:	83 f8 05             	cmp    eax,0x5
c0019859:	75 09                	jne    c0019864 <CPU::detectFeatures()+0x930>
c001985b:	50                   	push   eax
c001985c:	50                   	push   eax
c001985d:	68 82 b7 02 c0       	push   0xc002b782
c0019862:	eb 23                	jmp    c0019887 <CPU::detectFeatures()+0x953>
c0019864:	83 f8 0c             	cmp    eax,0xc
c0019867:	75 09                	jne    c0019872 <CPU::detectFeatures()+0x93e>
c0019869:	55                   	push   ebp
c001986a:	55                   	push   ebp
c001986b:	68 90 b7 02 c0       	push   0xc002b790
c0019870:	eb 15                	jmp    c0019887 <CPU::detectFeatures()+0x953>
c0019872:	83 f8 0d             	cmp    eax,0xd
c0019875:	75 09                	jne    c0019880 <CPU::detectFeatures()+0x94c>
c0019877:	57                   	push   edi
c0019878:	57                   	push   edi
c0019879:	68 9b b7 02 c0       	push   0xc002b79b
c001987e:	eb 07                	jmp    c0019887 <CPU::detectFeatures()+0x953>
c0019880:	56                   	push   esi
c0019881:	56                   	push   esi
c0019882:	68 af b7 02 c0       	push   0xc002b7af
c0019887:	53                   	push   ebx
c0019888:	e8 f3 aa ff ff       	call   c0014380 <Device::setName(char const*)>
c001988d:	83 c4 10             	add    esp,0x10
c0019890:	e9 80 00 00 00       	jmp    c0019915 <CPU::detectFeatures()+0x9e1>
c0019895:	51                   	push   ecx
c0019896:	51                   	push   ecx
c0019897:	68 fb b5 02 c0       	push   0xc002b5fb
c001989c:	57                   	push   edi
c001989d:	e8 92 6f fe ff       	call   c0000834 <strcpy>
c00198a2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00198ac:	e8 fd 69 fe ff       	call   c00002ae <is486>
c00198b1:	83 c4 10             	add    esp,0x10
c00198b4:	85 c0                	test   eax,eax
c00198b6:	74 2b                	je     c00198e3 <CPU::detectFeatures()+0x9af>
c00198b8:	52                   	push   edx
c00198b9:	52                   	push   edx
c00198ba:	68 bb b7 02 c0       	push   0xc002b7bb
c00198bf:	53                   	push   ebx
c00198c0:	e8 bb aa ff ff       	call   c0014380 <Device::setName(char const*)>
c00198c5:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00198cc:	0f 20 c0             	mov    eax,cr0
c00198cf:	83 e0 14             	and    eax,0x14
c00198d2:	83 c4 10             	add    esp,0x10
c00198d5:	83 f8 04             	cmp    eax,0x4
c00198d8:	75 1f                	jne    c00198f9 <CPU::detectFeatures()+0x9c5>
c00198da:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00198e1:	eb 32                	jmp    c0019915 <CPU::detectFeatures()+0x9e1>
c00198e3:	50                   	push   eax
c00198e4:	50                   	push   eax
c00198e5:	68 c6 b7 02 c0       	push   0xc002b7c6
c00198ea:	53                   	push   ebx
c00198eb:	e8 90 aa ff ff       	call   c0014380 <Device::setName(char const*)>
c00198f0:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00198f7:	eb d3                	jmp    c00198cc <CPU::detectFeatures()+0x998>
c00198f9:	e8 8b 69 fe ff       	call   c0000289 <hasLegacyFPU>
c00198fe:	83 e0 01             	and    eax,0x1
c0019901:	8d 14 00             	lea    edx,[eax+eax*1]
c0019904:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001990a:	83 e0 fd             	and    eax,0xfffffffd
c001990d:	09 d0                	or     eax,edx
c001990f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019915:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001991c:	83 c4 4c             	add    esp,0x4c
c001991f:	5b                   	pop    ebx
c0019920:	5e                   	pop    esi
c0019921:	5f                   	pop    edi
c0019922:	5d                   	pop    ebp
c0019923:	c3                   	ret    

c0019924 <CPU::setupSMEP()>:
c0019924:	0f 20 e0             	mov    eax,cr4
c0019927:	0d 00 00 10 00       	or     eax,0x100000
c001992c:	0f 22 e0             	mov    cr4,eax
c001992f:	c3                   	ret    

c0019930 <CPU::setupUMIP()>:
c0019930:	0f 20 e0             	mov    eax,cr4
c0019933:	80 cc 08             	or     ah,0x8
c0019936:	0f 22 e0             	mov    cr4,eax
c0019939:	c3                   	ret    

c001993a <CPU::setupTSC()>:
c001993a:	0f 20 e0             	mov    eax,cr4
c001993d:	83 c8 04             	or     eax,0x4
c0019940:	0f 22 e0             	mov    cr4,eax
c0019943:	c3                   	ret    

c0019944 <CPU::setupLargePages()>:
c0019944:	0f 20 e0             	mov    eax,cr4
c0019947:	83 c8 10             	or     eax,0x10
c001994a:	0f 22 e0             	mov    cr4,eax
c001994d:	c3                   	ret    

c001994e <CPU::setupPAT()>:
c001994e:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0019953:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001995a:	74 2c                	je     c0019988 <CPU::setupPAT()+0x3a>
c001995c:	53                   	push   ebx
c001995d:	83 ec 10             	sub    esp,0x10
c0019960:	68 77 02 00 00       	push   0x277
c0019965:	50                   	push   eax
c0019966:	e8 7d 54 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c001996b:	83 e2 f8             	and    edx,0xfffffff8
c001996e:	83 ca 01             	or     edx,0x1
c0019971:	52                   	push   edx
c0019972:	50                   	push   eax
c0019973:	68 77 02 00 00       	push   0x277
c0019978:	ff 35 08 e2 02 c0    	push   DWORD PTR ds:0xc002e208
c001997e:	e8 91 54 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019983:	83 c4 28             	add    esp,0x28
c0019986:	5b                   	pop    ebx
c0019987:	c3                   	ret    
c0019988:	c3                   	ret    
c0019989:	90                   	nop

c001998a <CPU::setupMTRR()>:
c001998a:	c3                   	ret    
c001998b:	90                   	nop

c001998c <CPU::setupGlobalPages()>:
c001998c:	0f 20 e0             	mov    eax,cr4
c001998f:	0c 80                	or     al,0x80
c0019991:	0f 22 e0             	mov    cr4,eax
c0019994:	c3                   	ret    
c0019995:	90                   	nop

c0019996 <CPU::allowUsermodeDataAccess()>:
c0019996:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001999a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00199a1:	74 03                	je     c00199a6 <CPU::allowUsermodeDataAccess()+0x10>
c00199a3:	0f 01 cb             	stac   
c00199a6:	c3                   	ret    
c00199a7:	90                   	nop

c00199a8 <CPU::prohibitUsermodeDataAccess()>:
c00199a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199ac:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00199b3:	74 03                	je     c00199b8 <CPU::prohibitUsermodeDataAccess()+0x10>
c00199b5:	0f 01 ca             	clac   
c00199b8:	c3                   	ret    
c00199b9:	90                   	nop

c00199ba <CPU::setupSMAP()>:
c00199ba:	0f 20 e0             	mov    eax,cr4
c00199bd:	0d 00 00 20 00       	or     eax,0x200000
c00199c2:	0f 22 e0             	mov    cr4,eax
c00199c5:	eb e1                	jmp    c00199a8 <CPU::prohibitUsermodeDataAccess()>
c00199c7:	90                   	nop

c00199c8 <CPU::setupFeatures()>:
c00199c8:	83 ec 0c             	sub    esp,0xc
c00199cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00199cf:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00199d6:	74 07                	je     c00199df <CPU::setupFeatures()+0x17>
c00199d8:	52                   	push   edx
c00199d9:	e8 46 ff ff ff       	call   c0019924 <CPU::setupSMEP()>
c00199de:	58                   	pop    eax
c00199df:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00199e6:	74 07                	je     c00199ef <CPU::setupFeatures()+0x27>
c00199e8:	52                   	push   edx
c00199e9:	e8 cc ff ff ff       	call   c00199ba <CPU::setupSMAP()>
c00199ee:	58                   	pop    eax
c00199ef:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00199f6:	74 07                	je     c00199ff <CPU::setupFeatures()+0x37>
c00199f8:	52                   	push   edx
c00199f9:	e8 32 ff ff ff       	call   c0019930 <CPU::setupUMIP()>
c00199fe:	58                   	pop    eax
c00199ff:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019a06:	74 07                	je     c0019a0f <CPU::setupFeatures()+0x47>
c0019a08:	52                   	push   edx
c0019a09:	e8 2c ff ff ff       	call   c001993a <CPU::setupTSC()>
c0019a0e:	58                   	pop    eax
c0019a0f:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019a16:	74 07                	je     c0019a1f <CPU::setupFeatures()+0x57>
c0019a18:	52                   	push   edx
c0019a19:	e8 26 ff ff ff       	call   c0019944 <CPU::setupLargePages()>
c0019a1e:	59                   	pop    ecx
c0019a1f:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019a26:	74 07                	je     c0019a2f <CPU::setupFeatures()+0x67>
c0019a28:	52                   	push   edx
c0019a29:	e8 5e ff ff ff       	call   c001998c <CPU::setupGlobalPages()>
c0019a2e:	58                   	pop    eax
c0019a2f:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019a36:	74 0c                	je     c0019a44 <CPU::setupFeatures()+0x7c>
c0019a38:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019a3c:	83 c4 0c             	add    esp,0xc
c0019a3f:	e9 0a ff ff ff       	jmp    c001994e <CPU::setupPAT()>
c0019a44:	83 c4 0c             	add    esp,0xc
c0019a47:	c3                   	ret    

c0019a48 <CPU::open(int, int, void*)>:
c0019a48:	57                   	push   edi
c0019a49:	56                   	push   esi
c0019a4a:	53                   	push   ebx
c0019a4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019a4f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019a53:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019a59:	83 ec 0c             	sub    esp,0xc
c0019a5c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019a62:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019a68:	50                   	push   eax
c0019a69:	e8 66 56 ff ff       	call   c000f0d4 <GDT::setup()>
c0019a6e:	83 c4 0c             	add    esp,0xc
c0019a71:	6a 00                	push   0x0
c0019a73:	68 ef be ad de       	push   0xdeadbeef
c0019a78:	57                   	push   edi
c0019a79:	e8 32 7a ff ff       	call   c00114b0 <TSS::setup(unsigned long, unsigned long)>
c0019a7e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019a81:	e8 0a 7a ff ff       	call   c0011490 <TSS::flush()>
c0019a86:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019a8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a8f:	e8 9c 58 ff ff       	call   c000f330 <IDT::setup()>
c0019a94:	b8 00 04 00 00       	mov    eax,0x400
c0019a99:	0f 23 f8             	mov    db7,eax
c0019a9c:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019aa6:	e8 35 64 ff ff       	call   c000fee0 <Phys::allocatePage()>
c0019aab:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019ab1:	89 30                	mov    DWORD PTR [eax],esi
c0019ab3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019ab9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019abc:	58                   	pop    eax
c0019abd:	5a                   	pop    edx
c0019abe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ac4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019ac8:	e8 13 8a ff ff       	call   c00124e0 <VAS::setCPUSpecific(unsigned long)>
c0019acd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ad0:	e8 5f f4 ff ff       	call   c0018f34 <CPU::detectFeatures()>
c0019ad5:	e8 94 bc ff ff       	call   c001576e <setupInterruptController()>
c0019ada:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019ae0:	a1 20 e2 02 c0       	mov    eax,ds:0xc002e220
c0019ae5:	83 e0 10             	and    eax,0x10
c0019ae8:	83 f8 01             	cmp    eax,0x1
c0019aeb:	19 c0                	sbb    eax,eax
c0019aed:	83 e0 46             	and    eax,0x46
c0019af0:	83 c0 1e             	add    eax,0x1e
c0019af3:	89 04 24             	mov    DWORD PTR [esp],eax
c0019af6:	e8 b7 d1 ff ff       	call   c0016cb2 <setupTimer(int)>
c0019afb:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019b01:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b04:	e8 bf fe ff ff       	call   c00199c8 <CPU::setupFeatures()>
c0019b09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b0c:	e8 a7 f1 ff ff       	call   c0018cb8 <CPU::displayFeatures()>
c0019b11:	83 c4 10             	add    esp,0x10
c0019b14:	31 c0                	xor    eax,eax
c0019b16:	5b                   	pop    ebx
c0019b17:	5e                   	pop    esi
c0019b18:	5f                   	pop    edi
c0019b19:	c3                   	ret    

c0019b1a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019b1a:	57                   	push   edi
c0019b1b:	56                   	push   esi
c0019b1c:	53                   	push   ebx
c0019b1d:	51                   	push   ecx
c0019b1e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019b22:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019b25:	0f 02 c0             	lar    eax,ax
c0019b28:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019b2b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019b2f:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019b32:	88 ca                	mov    dl,cl
c0019b34:	c0 ea 06             	shr    dl,0x6
c0019b37:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019b3b:	89 ca                	mov    edx,ecx
c0019b3d:	66 c1 ea 03          	shr    dx,0x3
c0019b41:	83 e2 07             	and    edx,0x7
c0019b44:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019b49:	88 17                	mov    BYTE PTR [edi],dl
c0019b4b:	0f 84 a6 01 00 00    	je     c0019cf7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019b51:	83 e1 07             	and    ecx,0x7
c0019b54:	80 f9 04             	cmp    cl,0x4
c0019b57:	0f 84 98 00 00 00    	je     c0019bf5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019b5d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019b62:	0f 95 c0             	setne  al
c0019b65:	80 f9 05             	cmp    cl,0x5
c0019b68:	0f 95 c2             	setne  dl
c0019b6b:	08 c2                	or     dl,al
c0019b6d:	74 79                	je     c0019be8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019b6f:	84 c9                	test   cl,cl
c0019b71:	75 05                	jne    c0019b78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019b73:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019b76:	eb 3c                	jmp    c0019bb4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b78:	80 f9 01             	cmp    cl,0x1
c0019b7b:	75 05                	jne    c0019b82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019b7d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019b80:	eb 32                	jmp    c0019bb4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b82:	80 f9 02             	cmp    cl,0x2
c0019b85:	75 05                	jne    c0019b8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019b87:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019b8a:	eb 28                	jmp    c0019bb4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b8c:	31 c0                	xor    eax,eax
c0019b8e:	80 f9 03             	cmp    cl,0x3
c0019b91:	75 05                	jne    c0019b98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019b93:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019b96:	eb 1c                	jmp    c0019bb4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b98:	80 f9 05             	cmp    cl,0x5
c0019b9b:	75 05                	jne    c0019ba2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019b9d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019ba0:	eb 12                	jmp    c0019bb4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ba2:	80 f9 06             	cmp    cl,0x6
c0019ba5:	75 05                	jne    c0019bac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019ba7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019baa:	eb 08                	jmp    c0019bb4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bac:	80 f9 07             	cmp    cl,0x7
c0019baf:	75 03                	jne    c0019bb4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bb1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019bb4:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019bb9:	75 10                	jne    c0019bcb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019bbb:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019bbf:	b9 03 00 00 00       	mov    ecx,0x3
c0019bc4:	01 d0                	add    eax,edx
c0019bc6:	e9 37 01 00 00       	jmp    c0019d02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019bcb:	b9 02 00 00 00       	mov    ecx,0x2
c0019bd0:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019bd5:	0f 85 27 01 00 00    	jne    c0019d02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019bdb:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019bde:	b9 06 00 00 00       	mov    ecx,0x6
c0019be3:	e9 1a 01 00 00       	jmp    c0019d02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019be8:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019beb:	b9 06 00 00 00       	mov    ecx,0x6
c0019bf0:	e9 0f 01 00 00       	jmp    c0019d04 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019bf5:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019bf8:	88 ca                	mov    dl,cl
c0019bfa:	c0 ea 06             	shr    dl,0x6
c0019bfd:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019c01:	89 ca                	mov    edx,ecx
c0019c03:	66 c1 ea 03          	shr    dx,0x3
c0019c07:	83 e2 07             	and    edx,0x7
c0019c0a:	80 e1 07             	and    cl,0x7
c0019c0d:	75 05                	jne    c0019c14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019c0f:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019c12:	eb 4c                	jmp    c0019c60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c14:	80 f9 01             	cmp    cl,0x1
c0019c17:	75 05                	jne    c0019c1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019c19:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019c1c:	eb 42                	jmp    c0019c60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c1e:	80 f9 02             	cmp    cl,0x2
c0019c21:	75 05                	jne    c0019c28 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019c23:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019c26:	eb 38                	jmp    c0019c60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c28:	80 f9 03             	cmp    cl,0x3
c0019c2b:	75 05                	jne    c0019c32 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019c2d:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019c30:	eb 2e                	jmp    c0019c60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c32:	80 f9 04             	cmp    cl,0x4
c0019c35:	75 12                	jne    c0019c49 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019c37:	f6 c4 60             	test   ah,0x60
c0019c3a:	75 08                	jne    c0019c44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019c3c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019c3f:	8d 78 14             	lea    edi,[eax+0x14]
c0019c42:	eb 1c                	jmp    c0019c60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c44:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019c47:	eb 17                	jmp    c0019c60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c49:	80 f9 05             	cmp    cl,0x5
c0019c4c:	75 05                	jne    c0019c53 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019c4e:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019c51:	eb 0d                	jmp    c0019c60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c53:	80 f9 06             	cmp    cl,0x6
c0019c56:	75 05                	jne    c0019c5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019c58:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019c5b:	eb 03                	jmp    c0019c60 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c5d:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019c60:	84 d2                	test   dl,dl
c0019c62:	75 05                	jne    c0019c69 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019c64:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019c67:	eb 3c                	jmp    c0019ca5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c69:	80 fa 01             	cmp    dl,0x1
c0019c6c:	75 05                	jne    c0019c73 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019c6e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019c71:	eb 32                	jmp    c0019ca5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c73:	80 fa 02             	cmp    dl,0x2
c0019c76:	75 05                	jne    c0019c7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019c78:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019c7b:	eb 28                	jmp    c0019ca5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c7d:	80 fa 03             	cmp    dl,0x3
c0019c80:	75 05                	jne    c0019c87 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019c82:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019c85:	eb 1e                	jmp    c0019ca5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c87:	31 c0                	xor    eax,eax
c0019c89:	80 fa 04             	cmp    dl,0x4
c0019c8c:	74 17                	je     c0019ca5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c8e:	80 fa 05             	cmp    dl,0x5
c0019c91:	75 05                	jne    c0019c98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019c93:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019c96:	eb 0d                	jmp    c0019ca5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c98:	80 fa 06             	cmp    dl,0x6
c0019c9b:	75 05                	jne    c0019ca2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019c9d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019ca0:	eb 03                	jmp    c0019ca5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ca2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019ca5:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019caa:	0f 94 c2             	sete   dl
c0019cad:	80 f9 05             	cmp    cl,0x5
c0019cb0:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019cb4:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019cb9:	d3 e0                	shl    eax,cl
c0019cbb:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019cbf:	74 0a                	je     c0019ccb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019cc1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019cc4:	b9 07 00 00 00       	mov    ecx,0x7
c0019cc9:	eb 37                	jmp    c0019d02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019ccb:	01 f8                	add    eax,edi
c0019ccd:	b9 03 00 00 00       	mov    ecx,0x3
c0019cd2:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019cd7:	74 2b                	je     c0019d04 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019cd9:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019cde:	75 0d                	jne    c0019ced <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019ce0:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019ce4:	01 c8                	add    eax,ecx
c0019ce6:	b9 04 00 00 00       	mov    ecx,0x4
c0019ceb:	eb 17                	jmp    c0019d04 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ced:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019cf0:	b9 07 00 00 00       	mov    ecx,0x7
c0019cf5:	eb 0d                	jmp    c0019d04 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019cf7:	b9 02 00 00 00       	mov    ecx,0x2
c0019cfc:	b2 01                	mov    dl,0x1
c0019cfe:	31 c0                	xor    eax,eax
c0019d00:	eb 02                	jmp    c0019d04 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d02:	31 d2                	xor    edx,edx
c0019d04:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019d08:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019d0a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019d0e:	88 11                	mov    BYTE PTR [ecx],dl
c0019d10:	5a                   	pop    edx
c0019d11:	5b                   	pop    ebx
c0019d12:	5e                   	pop    esi
c0019d13:	5f                   	pop    edi
c0019d14:	c3                   	ret    

c0019d15 <Krnl::smpEntry()>:
c0019d15:	eb fe                	jmp    c0019d15 <Krnl::smpEntry()>

c0019d17 <Krnl::startCPU(int)>:
c0019d17:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0019d1c:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019d23:	0f 84 36 01 00 00    	je     c0019e5f <Krnl::startCPU(int)+0x148>
c0019d29:	53                   	push   ebx
c0019d2a:	83 ec 08             	sub    esp,0x8
c0019d2d:	e8 1b 3f 00 00       	call   c001dc4d <lockScheduler()>
c0019d32:	52                   	push   edx
c0019d33:	52                   	push   edx
c0019d34:	6a 1b                	push   0x1b
c0019d36:	ff 35 08 e2 02 c0    	push   DWORD PTR ds:0xc002e208
c0019d3c:	e8 a7 50 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019d41:	59                   	pop    ecx
c0019d42:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019d47:	89 c3                	mov    ebx,eax
c0019d49:	58                   	pop    eax
c0019d4a:	53                   	push   ebx
c0019d4b:	68 00 b8 02 c0       	push   0xc002b800
c0019d50:	e8 23 90 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0019d55:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d63:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d6d:	c1 e0 18             	shl    eax,0x18
c0019d70:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019d76:	83 c4 10             	add    esp,0x10
c0019d79:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019d7f:	09 c2                	or     edx,eax
c0019d81:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019d87:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019d8d:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019d93:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019d99:	80 cd c5             	or     ch,0xc5
c0019d9c:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019da2:	f3 90                	pause  
c0019da4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019da6:	0f ba e1 0c          	bt     ecx,0xc
c0019daa:	72 f6                	jb     c0019da2 <Krnl::startCPU(int)+0x8b>
c0019dac:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019db2:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019db8:	09 c1                	or     ecx,eax
c0019dba:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019dc0:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019dc6:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019dcc:	80 cd 85             	or     ch,0x85
c0019dcf:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019dd5:	f3 90                	pause  
c0019dd7:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019dd9:	0f ba e1 0c          	bt     ecx,0xc
c0019ddd:	72 f6                	jb     c0019dd5 <Krnl::startCPU(int)+0xbe>
c0019ddf:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019de9:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019def:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019df5:	09 c1                	or     ecx,eax
c0019df7:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019dfd:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019e03:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019e09:	81 c9 02 06 00 00    	or     ecx,0x602
c0019e0f:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019e15:	f3 90                	pause  
c0019e17:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019e19:	0f ba e1 0c          	bt     ecx,0xc
c0019e1d:	72 f6                	jb     c0019e15 <Krnl::startCPU(int)+0xfe>
c0019e1f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e29:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019e2f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019e35:	09 c8                	or     eax,ecx
c0019e37:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019e3d:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019e43:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019e48:	0d 02 06 00 00       	or     eax,0x602
c0019e4d:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019e53:	f3 90                	pause  
c0019e55:	8b 02                	mov    eax,DWORD PTR [edx]
c0019e57:	0f ba e0 0c          	bt     eax,0xc
c0019e5b:	72 f6                	jb     c0019e53 <Krnl::startCPU(int)+0x13c>
c0019e5d:	eb fe                	jmp    c0019e5d <Krnl::startCPU(int)+0x146>
c0019e5f:	c3                   	ret    

c0019e60 <Krnl::startCPUs()>:
c0019e60:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0019e65:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019e6b:	88 c2                	mov    dl,al
c0019e6d:	83 e2 0a             	and    edx,0xa
c0019e70:	80 fa 0a             	cmp    dl,0xa
c0019e73:	75 09                	jne    c0019e7e <Krnl::startCPUs()+0x1e>
c0019e75:	a8 01                	test   al,0x1
c0019e77:	74 05                	je     c0019e7e <Krnl::startCPUs()+0x1e>
c0019e79:	e9 1d 63 fe ff       	jmp    c000019b <prepareTramp>
c0019e7e:	c3                   	ret    
c0019e7f:	90                   	nop

c0019e80 <EnvVarContainer::getEnv(char const*)>:
c0019e80:	57                   	push   edi
c0019e81:	56                   	push   esi
c0019e82:	53                   	push   ebx
c0019e83:	31 db                	xor    ebx,ebx
c0019e85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e89:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019e8b:	7e 2b                	jle    c0019eb8 <EnvVarContainer::getEnv(char const*)+0x38>
c0019e8d:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019e94:	50                   	push   eax
c0019e95:	50                   	push   eax
c0019e96:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019e99:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019e9c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019ea0:	e8 1b 6a fe ff       	call   c00008c0 <strcmp>
c0019ea5:	83 c4 10             	add    esp,0x10
c0019ea8:	85 c0                	test   eax,eax
c0019eaa:	75 09                	jne    c0019eb5 <EnvVarContainer::getEnv(char const*)+0x35>
c0019eac:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019eaf:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019eb3:	eb 05                	jmp    c0019eba <EnvVarContainer::getEnv(char const*)+0x3a>
c0019eb5:	43                   	inc    ebx
c0019eb6:	eb d1                	jmp    c0019e89 <EnvVarContainer::getEnv(char const*)+0x9>
c0019eb8:	31 c0                	xor    eax,eax
c0019eba:	5b                   	pop    ebx
c0019ebb:	5e                   	pop    esi
c0019ebc:	5f                   	pop    edi
c0019ebd:	c3                   	ret    

c0019ebe <EnvVarContainer::setEnv(char const*, char const*)>:
c0019ebe:	57                   	push   edi
c0019ebf:	56                   	push   esi
c0019ec0:	53                   	push   ebx
c0019ec1:	83 ec 1c             	sub    esp,0x1c
c0019ec4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019ec8:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019ecc:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019ed0:	57                   	push   edi
c0019ed1:	e8 be 68 fe ff       	call   c0000794 <strlen>
c0019ed6:	40                   	inc    eax
c0019ed7:	89 04 24             	mov    DWORD PTR [esp],eax
c0019eda:	e8 64 59 ff ff       	call   c000f843 <malloc>
c0019edf:	89 34 24             	mov    DWORD PTR [esp],esi
c0019ee2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019ee6:	e8 a9 68 fe ff       	call   c0000794 <strlen>
c0019eeb:	40                   	inc    eax
c0019eec:	89 04 24             	mov    DWORD PTR [esp],eax
c0019eef:	e8 4f 59 ff ff       	call   c000f843 <malloc>
c0019ef4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019ef7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019efb:	e8 94 68 fe ff       	call   c0000794 <strlen>
c0019f00:	83 c4 0c             	add    esp,0xc
c0019f03:	40                   	inc    eax
c0019f04:	50                   	push   eax
c0019f05:	6a 00                	push   0x0
c0019f07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019f0b:	e8 68 68 fe ff       	call   c0000778 <memset>
c0019f10:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019f13:	e8 7c 68 fe ff       	call   c0000794 <strlen>
c0019f18:	83 c4 0c             	add    esp,0xc
c0019f1b:	40                   	inc    eax
c0019f1c:	50                   	push   eax
c0019f1d:	57                   	push   edi
c0019f1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019f22:	e8 1d 68 fe ff       	call   c0000744 <memcpy>
c0019f27:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f2a:	e8 65 68 fe ff       	call   c0000794 <strlen>
c0019f2f:	83 c4 0c             	add    esp,0xc
c0019f32:	40                   	inc    eax
c0019f33:	50                   	push   eax
c0019f34:	6a 00                	push   0x0
c0019f36:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f3a:	e8 39 68 fe ff       	call   c0000778 <memset>
c0019f3f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f42:	e8 4d 68 fe ff       	call   c0000794 <strlen>
c0019f47:	83 c4 0c             	add    esp,0xc
c0019f4a:	40                   	inc    eax
c0019f4b:	50                   	push   eax
c0019f4c:	56                   	push   esi
c0019f4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f51:	e8 ee 67 fe ff       	call   c0000744 <memcpy>
c0019f56:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f58:	40                   	inc    eax
c0019f59:	89 03                	mov    DWORD PTR [ebx],eax
c0019f5b:	c1 e0 03             	shl    eax,0x3
c0019f5e:	5a                   	pop    edx
c0019f5f:	59                   	pop    ecx
c0019f60:	50                   	push   eax
c0019f61:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0019f64:	e8 c6 58 ff ff       	call   c000f82f <realloc>
c0019f69:	83 c4 0c             	add    esp,0xc
c0019f6c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019f6f:	6a 08                	push   0x8
c0019f71:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019f75:	52                   	push   edx
c0019f76:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019f78:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019f7c:	50                   	push   eax
c0019f7d:	e8 c2 67 fe ff       	call   c0000744 <memcpy>
c0019f82:	83 c4 20             	add    esp,0x20
c0019f85:	5b                   	pop    ebx
c0019f86:	5e                   	pop    esi
c0019f87:	5f                   	pop    edi
c0019f88:	c3                   	ret    
c0019f89:	90                   	nop

c0019f8a <EnvVarContainer::deleteEnv(char const*)>:
c0019f8a:	c3                   	ret    
c0019f8b:	90                   	nop

c0019f8c <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019f8c:	55                   	push   ebp
c0019f8d:	57                   	push   edi
c0019f8e:	56                   	push   esi
c0019f8f:	53                   	push   ebx
c0019f90:	81 ec 38 01 00 00    	sub    esp,0x138
c0019f96:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c0019f9d:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c0019fa4:	68 14 01 00 00       	push   0x114
c0019fa9:	e8 95 58 ff ff       	call   c000f843 <malloc>
c0019fae:	83 c4 0c             	add    esp,0xc
c0019fb1:	89 c7                	mov    edi,eax
c0019fb3:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0019fb6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019fbd:	50                   	push   eax
c0019fbe:	e8 0d 93 ff ff       	call   c00132d0 <File::File(char const*, Process*)>
c0019fc3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019fc6:	e8 d7 95 ff ff       	call   c00135a2 <File::exists()>
c0019fcb:	83 c4 10             	add    esp,0x10
c0019fce:	84 c0                	test   al,al
c0019fd0:	75 31                	jne    c001a003 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019fd2:	51                   	push   ecx
c0019fd3:	51                   	push   ecx
c0019fd4:	6a 12                	push   0x12
c0019fd6:	57                   	push   edi
c0019fd7:	e8 58 93 ff ff       	call   c0013334 <File::open(FileOpenMode)>
c0019fdc:	8b 07                	mov    eax,DWORD PTR [edi]
c0019fde:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0019fe1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019fe4:	e8 ab 67 fe ff       	call   c0000794 <strlen>
c0019fe9:	5a                   	pop    edx
c0019fea:	31 d2                	xor    edx,edx
c0019fec:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019ff0:	51                   	push   ecx
c0019ff1:	55                   	push   ebp
c0019ff2:	52                   	push   edx
c0019ff3:	50                   	push   eax
c0019ff4:	57                   	push   edi
c0019ff5:	ff d3                	call   ebx
c0019ff7:	83 c4 14             	add    esp,0x14
c0019ffa:	57                   	push   edi
c0019ffb:	e8 92 93 ff ff       	call   c0013392 <File::close()>
c001a000:	83 c4 10             	add    esp,0x10
c001a003:	31 db                	xor    ebx,ebx
c001a005:	50                   	push   eax
c001a006:	31 ed                	xor    ebp,ebp
c001a008:	68 00 01 00 00       	push   0x100
c001a00d:	6a 00                	push   0x0
c001a00f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a013:	50                   	push   eax
c001a014:	e8 5f 67 fe ff       	call   c0000778 <memset>
c001a019:	58                   	pop    eax
c001a01a:	5a                   	pop    edx
c001a01b:	6a 01                	push   0x1
c001a01d:	57                   	push   edi
c001a01e:	e8 11 93 ff ff       	call   c0013334 <File::open(FileOpenMode)>
c001a023:	83 c4 10             	add    esp,0x10
c001a026:	83 ec 0c             	sub    esp,0xc
c001a029:	8b 07                	mov    eax,DWORD PTR [edi]
c001a02b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a02f:	51                   	push   ecx
c001a030:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a034:	52                   	push   edx
c001a035:	6a 00                	push   0x0
c001a037:	6a 01                	push   0x1
c001a039:	57                   	push   edi
c001a03a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a03d:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a041:	83 c4 20             	add    esp,0x20
c001a044:	3c 0d                	cmp    al,0xd
c001a046:	0f 84 12 01 00 00    	je     c001a15e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a04c:	85 db                	test   ebx,ebx
c001a04e:	0f 84 fd 00 00 00    	je     c001a151 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a054:	3c 0a                	cmp    al,0xa
c001a056:	74 13                	je     c001a06b <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a058:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a05d:	74 0c                	je     c001a06b <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a05f:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a065:	0f 8e e6 00 00 00    	jle    c001a151 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a06b:	83 ec 0c             	sub    esp,0xc
c001a06e:	8d 53 01             	lea    edx,[ebx+0x1]
c001a071:	29 dd                	sub    ebp,ebx
c001a073:	52                   	push   edx
c001a074:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a078:	e8 c6 57 ff ff       	call   c000f843 <malloc>
c001a07d:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a080:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a084:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a087:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a08b:	e8 b3 57 ff ff       	call   c000f843 <malloc>
c001a090:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a094:	83 c4 0c             	add    esp,0xc
c001a097:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a09b:	52                   	push   edx
c001a09c:	6a 00                	push   0x0
c001a09e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a0a2:	e8 d1 66 fe ff       	call   c0000778 <memset>
c001a0a7:	83 c4 0c             	add    esp,0xc
c001a0aa:	53                   	push   ebx
c001a0ab:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a0af:	55                   	push   ebp
c001a0b0:	01 eb                	add    ebx,ebp
c001a0b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a0b6:	e8 89 66 fe ff       	call   c0000744 <memcpy>
c001a0bb:	83 c4 0c             	add    esp,0xc
c001a0be:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a0c2:	51                   	push   ecx
c001a0c3:	6a 00                	push   0x0
c001a0c5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a0c9:	e8 aa 66 fe ff       	call   c0000778 <memset>
c001a0ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0d1:	e8 be 66 fe ff       	call   c0000794 <strlen>
c001a0d6:	83 c4 0c             	add    esp,0xc
c001a0d9:	50                   	push   eax
c001a0da:	53                   	push   ebx
c001a0db:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a0df:	e8 60 66 fe ff       	call   c0000744 <memcpy>
c001a0e4:	5b                   	pop    ebx
c001a0e5:	58                   	pop    eax
c001a0e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a0ea:	68 11 b8 02 c0       	push   0xc002b811
c001a0ef:	e8 84 8c ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001a0f4:	8b 06                	mov    eax,DWORD PTR [esi]
c001a0f6:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a0f9:	40                   	inc    eax
c001a0fa:	83 c4 10             	add    esp,0x10
c001a0fd:	89 06                	mov    DWORD PTR [esi],eax
c001a0ff:	85 d2                	test   edx,edx
c001a101:	75 0c                	jne    c001a10f <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a103:	83 ec 0c             	sub    esp,0xc
c001a106:	6a 08                	push   0x8
c001a108:	e8 36 57 ff ff       	call   c000f843 <malloc>
c001a10d:	eb 0c                	jmp    c001a11b <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a10f:	c1 e0 03             	shl    eax,0x3
c001a112:	51                   	push   ecx
c001a113:	51                   	push   ecx
c001a114:	50                   	push   eax
c001a115:	52                   	push   edx
c001a116:	e8 14 57 ff ff       	call   c000f82f <realloc>
c001a11b:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a11e:	83 c4 10             	add    esp,0x10
c001a121:	31 db                	xor    ebx,ebx
c001a123:	52                   	push   edx
c001a124:	6a 08                	push   0x8
c001a126:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a12a:	50                   	push   eax
c001a12b:	8b 16                	mov    edx,DWORD PTR [esi]
c001a12d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a130:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a134:	50                   	push   eax
c001a135:	e8 0a 66 fe ff       	call   c0000744 <memcpy>
c001a13a:	83 c4 0c             	add    esp,0xc
c001a13d:	68 00 01 00 00       	push   0x100
c001a142:	6a 00                	push   0x0
c001a144:	55                   	push   ebp
c001a145:	31 ed                	xor    ebp,ebp
c001a147:	e8 2c 66 fe ff       	call   c0000778 <memset>
c001a14c:	83 c4 10             	add    esp,0x10
c001a14f:	eb 0d                	jmp    c001a15e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a151:	3c 3d                	cmp    al,0x3d
c001a153:	74 07                	je     c001a15c <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a155:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a159:	45                   	inc    ebp
c001a15a:	eb 02                	jmp    c001a15e <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a15c:	89 eb                	mov    ebx,ebp
c001a15e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a163:	0f 85 bd fe ff ff    	jne    c001a026 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a169:	50                   	push   eax
c001a16a:	50                   	push   eax
c001a16b:	ff 36                	push   DWORD PTR [esi]
c001a16d:	68 1f b8 02 c0       	push   0xc002b81f
c001a172:	e8 01 8c ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001a177:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a17d:	5b                   	pop    ebx
c001a17e:	5e                   	pop    esi
c001a17f:	5f                   	pop    edi
c001a180:	5d                   	pop    ebp
c001a181:	c3                   	ret    

c001a182 <EnvVarContainer::__loadSystem()>:
c001a182:	83 ec 10             	sub    esp,0x10
c001a185:	68 40 d7 02 c0       	push   0xc002d740
c001a18a:	68 4a b8 02 c0       	push   0xc002b84a
c001a18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a193:	e8 f4 fd ff ff       	call   c0019f8c <EnvVarContainer::loadFrom(char const*, char const*)>
c001a198:	83 c4 1c             	add    esp,0x1c
c001a19b:	c3                   	ret    

c001a19c <EnvVarContainer::__loadUser()>:
c001a19c:	c3                   	ret    
c001a19d:	90                   	nop

c001a19e <EnvVarContainer::EnvVarContainer(Process*)>:
c001a19e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a1a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1b0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a1b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a1be:	90                   	nop
c001a1bf:	c3                   	ret    

c001a1c0 <EnvVarContainer::~EnvVarContainer()>:
c001a1c0:	83 ec 0c             	sub    esp,0xc
c001a1c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a1ca:	85 c0                	test   eax,eax
c001a1cc:	74 1d                	je     c001a1eb <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a1ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1d2:	8b 00                	mov    eax,DWORD PTR [eax]
c001a1d4:	85 c0                	test   eax,eax
c001a1d6:	74 13                	je     c001a1eb <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a1d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a1df:	83 ec 0c             	sub    esp,0xc
c001a1e2:	50                   	push   eax
c001a1e3:	e8 6b 56 ff ff       	call   c000f853 <free>
c001a1e8:	83 c4 10             	add    esp,0x10
c001a1eb:	90                   	nop
c001a1ec:	83 c4 0c             	add    esp,0xc
c001a1ef:	c3                   	ret    

c001a1f0 <Krnl::getEnv(Process*, char const*)>:
c001a1f0:	53                   	push   ebx
c001a1f1:	83 ec 08             	sub    esp,0x8
c001a1f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1f8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a1fc:	39 05 74 17 03 c0    	cmp    DWORD PTR ds:0xc0031774,eax
c001a202:	74 04                	je     c001a208 <Krnl::getEnv(Process*, char const*)+0x18>
c001a204:	85 c0                	test   eax,eax
c001a206:	75 0b                	jne    c001a213 <Krnl::getEnv(Process*, char const*)+0x23>
c001a208:	a1 54 0d 03 c0       	mov    eax,ds:0xc0030d54
c001a20d:	85 c0                	test   eax,eax
c001a20f:	75 19                	jne    c001a22a <Krnl::getEnv(Process*, char const*)+0x3a>
c001a211:	eb 27                	jmp    c001a23a <Krnl::getEnv(Process*, char const*)+0x4a>
c001a213:	52                   	push   edx
c001a214:	52                   	push   edx
c001a215:	53                   	push   ebx
c001a216:	ff b0 3a 1b 00 00    	push   DWORD PTR [eax+0x1b3a]
c001a21c:	e8 5f fc ff ff       	call   c0019e80 <EnvVarContainer::getEnv(char const*)>
c001a221:	83 c4 10             	add    esp,0x10
c001a224:	85 c0                	test   eax,eax
c001a226:	75 28                	jne    c001a250 <Krnl::getEnv(Process*, char const*)+0x60>
c001a228:	eb de                	jmp    c001a208 <Krnl::getEnv(Process*, char const*)+0x18>
c001a22a:	52                   	push   edx
c001a22b:	52                   	push   edx
c001a22c:	53                   	push   ebx
c001a22d:	50                   	push   eax
c001a22e:	e8 4d fc ff ff       	call   c0019e80 <EnvVarContainer::getEnv(char const*)>
c001a233:	83 c4 10             	add    esp,0x10
c001a236:	85 c0                	test   eax,eax
c001a238:	75 16                	jne    c001a250 <Krnl::getEnv(Process*, char const*)+0x60>
c001a23a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a23e:	a1 58 0d 03 c0       	mov    eax,ds:0xc0030d58
c001a243:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a247:	83 c4 08             	add    esp,0x8
c001a24a:	5b                   	pop    ebx
c001a24b:	e9 30 fc ff ff       	jmp    c0019e80 <EnvVarContainer::getEnv(char const*)>
c001a250:	83 c4 08             	add    esp,0x8
c001a253:	5b                   	pop    ebx
c001a254:	c3                   	ret    

c001a255 <Krnl::setEnvSystem(char const*, char const*)>:
c001a255:	83 ec 10             	sub    esp,0x10
c001a258:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a25c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a260:	ff 35 58 0d 03 c0    	push   DWORD PTR ds:0xc0030d58
c001a266:	e8 53 fc ff ff       	call   c0019ebe <EnvVarContainer::setEnv(char const*, char const*)>
c001a26b:	83 c4 1c             	add    esp,0x1c
c001a26e:	c3                   	ret    

c001a26f <Krnl::setEnvUser(char const*, char const*)>:
c001a26f:	a1 54 0d 03 c0       	mov    eax,ds:0xc0030d54
c001a274:	85 c0                	test   eax,eax
c001a276:	74 15                	je     c001a28d <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a278:	83 ec 10             	sub    esp,0x10
c001a27b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a27f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a283:	50                   	push   eax
c001a284:	e8 35 fc ff ff       	call   c0019ebe <EnvVarContainer::setEnv(char const*, char const*)>
c001a289:	83 c4 1c             	add    esp,0x1c
c001a28c:	c3                   	ret    
c001a28d:	c3                   	ret    

c001a28e <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a28e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a292:	8b 80 3a 1b 00 00    	mov    eax,DWORD PTR [eax+0x1b3a]
c001a298:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a29c:	e9 1d fc ff ff       	jmp    c0019ebe <EnvVarContainer::setEnv(char const*, char const*)>

c001a2a1 <Krnl::deleteEnvSystem(char const*)>:
c001a2a1:	c3                   	ret    

c001a2a2 <Krnl::deleteEnvUser(char const*)>:
c001a2a2:	c3                   	ret    

c001a2a3 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a2a3:	c3                   	ret    

c001a2a4 <Krnl::newProcessEnv(Process*)>:
c001a2a4:	83 ec 28             	sub    esp,0x28
c001a2a7:	6a 0c                	push   0xc
c001a2a9:	e8 95 55 ff ff       	call   c000f843 <malloc>
c001a2ae:	5a                   	pop    edx
c001a2af:	59                   	pop    ecx
c001a2b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a2b4:	50                   	push   eax
c001a2b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a2b9:	e8 e0 fe ff ff       	call   c001a19e <EnvVarContainer::EnvVarContainer(Process*)>
c001a2be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a2c2:	83 c4 2c             	add    esp,0x2c
c001a2c5:	c3                   	ret    

c001a2c6 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a2c6:	56                   	push   esi
c001a2c7:	53                   	push   ebx
c001a2c8:	83 ec 10             	sub    esp,0x10
c001a2cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a2cf:	8b b0 3a 1b 00 00    	mov    esi,DWORD PTR [eax+0x1b3a]
c001a2d5:	6a 0c                	push   0xc
c001a2d7:	e8 67 55 ff ff       	call   c000f843 <malloc>
c001a2dc:	89 c3                	mov    ebx,eax
c001a2de:	58                   	pop    eax
c001a2df:	5a                   	pop    edx
c001a2e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2e4:	53                   	push   ebx
c001a2e5:	e8 b4 fe ff ff       	call   c001a19e <EnvVarContainer::EnvVarContainer(Process*)>
c001a2ea:	8b 06                	mov    eax,DWORD PTR [esi]
c001a2ec:	89 03                	mov    DWORD PTR [ebx],eax
c001a2ee:	c1 e0 03             	shl    eax,0x3
c001a2f1:	89 04 24             	mov    DWORD PTR [esp],eax
c001a2f4:	e8 4a 55 ff ff       	call   c000f843 <malloc>
c001a2f9:	83 c4 0c             	add    esp,0xc
c001a2fc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a2ff:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a301:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a308:	52                   	push   edx
c001a309:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a30c:	50                   	push   eax
c001a30d:	e8 32 64 fe ff       	call   c0000744 <memcpy>
c001a312:	89 d8                	mov    eax,ebx
c001a314:	83 c4 14             	add    esp,0x14
c001a317:	5b                   	pop    ebx
c001a318:	5e                   	pop    esi
c001a319:	c3                   	ret    

c001a31a <Krnl::loadSystemEnv()>:
c001a31a:	53                   	push   ebx
c001a31b:	83 ec 14             	sub    esp,0x14
c001a31e:	6a 0c                	push   0xc
c001a320:	e8 1e 55 ff ff       	call   c000f843 <malloc>
c001a325:	89 c3                	mov    ebx,eax
c001a327:	58                   	pop    eax
c001a328:	5a                   	pop    edx
c001a329:	ff 35 74 17 03 c0    	push   DWORD PTR ds:0xc0031774
c001a32f:	53                   	push   ebx
c001a330:	e8 69 fe ff ff       	call   c001a19e <EnvVarContainer::EnvVarContainer(Process*)>
c001a335:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a338:	89 1d 58 0d 03 c0    	mov    DWORD PTR ds:0xc0030d58,ebx
c001a33e:	e8 3f fe ff ff       	call   c001a182 <EnvVarContainer::__loadSystem()>
c001a343:	83 c4 18             	add    esp,0x18
c001a346:	5b                   	pop    ebx
c001a347:	c3                   	ret    

c001a348 <Krnl::loadUserEnv()>:
c001a348:	53                   	push   ebx
c001a349:	83 ec 14             	sub    esp,0x14
c001a34c:	6a 0c                	push   0xc
c001a34e:	e8 f0 54 ff ff       	call   c000f843 <malloc>
c001a353:	89 c3                	mov    ebx,eax
c001a355:	58                   	pop    eax
c001a356:	5a                   	pop    edx
c001a357:	ff 35 74 17 03 c0    	push   DWORD PTR ds:0xc0031774
c001a35d:	53                   	push   ebx
c001a35e:	e8 3b fe ff ff       	call   c001a19e <EnvVarContainer::EnvVarContainer(Process*)>
c001a363:	89 1d 54 0d 03 c0    	mov    DWORD PTR ds:0xc0030d54,ebx
c001a369:	83 c4 18             	add    esp,0x18
c001a36c:	5b                   	pop    ebx
c001a36d:	c3                   	ret    

c001a36e <Krnl::flushEnv()>:
c001a36e:	c3                   	ret    

c001a36f <Krnl::getProcessTotalEnvCount(Process*)>:
c001a36f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a373:	8b 15 54 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030d54
c001a379:	8b 88 3a 1b 00 00    	mov    ecx,DWORD PTR [eax+0x1b3a]
c001a37f:	a1 58 0d 03 c0       	mov    eax,ds:0xc0030d58
c001a384:	8b 00                	mov    eax,DWORD PTR [eax]
c001a386:	03 01                	add    eax,DWORD PTR [ecx]
c001a388:	85 d2                	test   edx,edx
c001a38a:	74 02                	je     c001a38e <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a38c:	03 02                	add    eax,DWORD PTR [edx]
c001a38e:	c3                   	ret    

c001a38f <Krnl::getProcessEnvPair(Process*, int)>:
c001a38f:	57                   	push   edi
c001a390:	8b 0d 54 0d 03 c0    	mov    ecx,DWORD PTR ds:0xc0030d54
c001a396:	56                   	push   esi
c001a397:	85 c9                	test   ecx,ecx
c001a399:	53                   	push   ebx
c001a39a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a39e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a3a2:	8b 97 3a 1b 00 00    	mov    edx,DWORD PTR [edi+0x1b3a]
c001a3a8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a3ac:	8b 02                	mov    eax,DWORD PTR [edx]
c001a3ae:	75 47                	jne    c001a3f7 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a3b0:	39 c3                	cmp    ebx,eax
c001a3b2:	7c 47                	jl     c001a3fb <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a3b4:	8b 15 58 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030d58
c001a3ba:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a3bc:	01 c1                	add    ecx,eax
c001a3be:	39 d9                	cmp    ecx,ebx
c001a3c0:	7e 6c                	jle    c001a42e <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a3c2:	51                   	push   ecx
c001a3c3:	89 d9                	mov    ecx,ebx
c001a3c5:	29 c1                	sub    ecx,eax
c001a3c7:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a3ca:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a3ce:	53                   	push   ebx
c001a3cf:	68 6c b8 02 c0       	push   0xc002b86c
c001a3d4:	e8 9f 89 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001a3d9:	8b 87 3a 1b 00 00    	mov    eax,DWORD PTR [edi+0x1b3a]
c001a3df:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a3e1:	a1 58 0d 03 c0       	mov    eax,ds:0xc0030d58
c001a3e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a3e9:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a3ed:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a3f0:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a3f3:	89 06                	mov    DWORD PTR [esi],eax
c001a3f5:	eb 51                	jmp    c001a448 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a3f7:	39 c3                	cmp    ebx,eax
c001a3f9:	7d 05                	jge    c001a400 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a3fb:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a3fe:	eb 20                	jmp    c001a420 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a400:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a402:	8d 14 07             	lea    edx,[edi+eax*1]
c001a405:	39 da                	cmp    edx,ebx
c001a407:	7e 04                	jle    c001a40d <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a409:	29 c3                	sub    ebx,eax
c001a40b:	eb 10                	jmp    c001a41d <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a40d:	8b 0d 58 0d 03 c0    	mov    ecx,DWORD PTR ds:0xc0030d58
c001a413:	03 11                	add    edx,DWORD PTR [ecx]
c001a415:	39 da                	cmp    edx,ebx
c001a417:	7e 15                	jle    c001a42e <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a419:	29 c3                	sub    ebx,eax
c001a41b:	29 fb                	sub    ebx,edi
c001a41d:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a420:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a424:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a427:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a42a:	89 06                	mov    DWORD PTR [esi],eax
c001a42c:	eb 1d                	jmp    c001a44b <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a42e:	83 ec 0c             	sub    esp,0xc
c001a431:	68 80 b8 02 c0       	push   0xc002b880
c001a436:	e8 18 00 00 00       	call   c001a453 <Krnl::panic(char const*)>
c001a43b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a441:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a448:	83 c4 10             	add    esp,0x10
c001a44b:	89 f0                	mov    eax,esi
c001a44d:	5b                   	pop    ebx
c001a44e:	5e                   	pop    esi
c001a44f:	5f                   	pop    edi
c001a450:	c2 04 00             	ret    0x4

c001a453 <Krnl::panic(char const*)>:
c001a453:	55                   	push   ebp
c001a454:	89 e5                	mov    ebp,esp
c001a456:	53                   	push   ebx
c001a457:	83 ec 0c             	sub    esp,0xc
c001a45a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a45d:	fa                   	cli    
c001a45e:	c6 05 64 0d 03 c0 01 	mov    BYTE PTR ds:0xc0030d64,0x1
c001a465:	53                   	push   ebx
c001a466:	c6 05 44 d1 02 c0 00 	mov    BYTE PTR ds:0xc002d144,0x0
c001a46d:	68 9a b8 02 c0       	push   0xc002b89a
c001a472:	e8 01 89 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001a477:	58                   	pop    eax
c001a478:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a47d:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a483:	e8 69 68 ff ff       	call   c0010cf1 <setActiveTerminal(VgaText*)>
c001a488:	83 c4 0c             	add    esp,0xc
c001a48b:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a490:	6a 01                	push   0x1
c001a492:	6a 0f                	push   0xf
c001a494:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a49a:	e8 83 62 ff ff       	call   c0010722 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a49f:	58                   	pop    eax
c001a4a0:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a4a5:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a4ab:	e8 e2 6a ff ff       	call   c0010f92 <VgaText::clearScreen()>
c001a4b0:	58                   	pop    eax
c001a4b1:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a4b6:	5a                   	pop    edx
c001a4b7:	68 b3 b8 02 c0       	push   0xc002b8b3
c001a4bc:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a4c2:	e8 49 6c ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a4c7:	59                   	pop    ecx
c001a4c8:	58                   	pop    eax
c001a4c9:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a4ce:	68 58 b9 02 c0       	push   0xc002b958
c001a4d3:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a4d9:	e8 32 6c ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a4de:	58                   	pop    eax
c001a4df:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a4e4:	5a                   	pop    edx
c001a4e5:	68 cf b8 02 c0       	push   0xc002b8cf
c001a4ea:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a4f0:	e8 1b 6c ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a4f5:	59                   	pop    ecx
c001a4f6:	58                   	pop    eax
c001a4f7:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a4fc:	53                   	push   ebx
c001a4fd:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a503:	e8 08 6c ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a508:	58                   	pop    eax
c001a509:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a50e:	5a                   	pop    edx
c001a50f:	68 ef b8 02 c0       	push   0xc002b8ef
c001a514:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a51a:	e8 f1 6b ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a51f:	a1 60 0d 03 c0       	mov    eax,ds:0xc0030d60
c001a524:	83 c4 10             	add    esp,0x10
c001a527:	85 c0                	test   eax,eax
c001a529:	74 02                	je     c001a52d <Krnl::panic(char const*)+0xda>
c001a52b:	ff d0                	call   eax
c001a52d:	83 ec 0c             	sub    esp,0xc
c001a530:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a533:	e8 fd 2f 00 00       	call   c001d535 <Thr::getDriverNameFromAddress(unsigned long)>
c001a538:	83 c4 10             	add    esp,0x10
c001a53b:	89 c3                	mov    ebx,eax
c001a53d:	85 c0                	test   eax,eax
c001a53f:	0f 84 50 02 00 00    	je     c001a795 <Krnl::panic(char const*)+0x342>
c001a545:	83 ec 08             	sub    esp,0x8
c001a548:	8b 15 74 17 03 c0    	mov    edx,DWORD PTR ds:0xc0031774
c001a54e:	68 94 b9 02 c0       	push   0xc002b994
c001a553:	ff b2 26 19 00 00    	push   DWORD PTR [edx+0x1926]
c001a559:	e8 b2 6b ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a55e:	58                   	pop    eax
c001a55f:	5a                   	pop    edx
c001a560:	8b 15 74 17 03 c0    	mov    edx,DWORD PTR ds:0xc0031774
c001a566:	68 cf b8 02 c0       	push   0xc002b8cf
c001a56b:	ff b2 26 19 00 00    	push   DWORD PTR [edx+0x1926]
c001a571:	e8 9a 6b ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a576:	59                   	pop    ecx
c001a577:	58                   	pop    eax
c001a578:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a57d:	53                   	push   ebx
c001a57e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a584:	e8 87 6b ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a589:	83 c4 10             	add    esp,0x10
c001a58c:	83 ec 08             	sub    esp,0x8
c001a58f:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a594:	68 ee b8 02 c0       	push   0xc002b8ee
c001a599:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a59f:	e8 6c 6b ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a5a4:	58                   	pop    eax
c001a5a5:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a5aa:	5a                   	pop    edx
c001a5ab:	68 ec b9 02 c0       	push   0xc002b9ec
c001a5b0:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5b6:	e8 55 6b ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a5bb:	59                   	pop    ecx
c001a5bc:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a5c1:	5b                   	pop    ebx
c001a5c2:	68 2c ba 02 c0       	push   0xc002ba2c
c001a5c7:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5cd:	e8 3e 6b ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a5d2:	58                   	pop    eax
c001a5d3:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a5d8:	5a                   	pop    edx
c001a5d9:	68 da b8 02 c0       	push   0xc002b8da
c001a5de:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5e4:	e8 27 6b ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a5e9:	59                   	pop    ecx
c001a5ea:	5b                   	pop    ebx
c001a5eb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a5ee:	68 f2 b8 02 c0       	push   0xc002b8f2
c001a5f3:	e8 80 87 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001a5f8:	58                   	pop    eax
c001a5f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a5fc:	5a                   	pop    edx
c001a5fd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a600:	68 fb b8 02 c0       	push   0xc002b8fb
c001a605:	e8 6e 87 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001a60a:	59                   	pop    ecx
c001a60b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a60e:	5b                   	pop    ebx
c001a60f:	8b 00                	mov    eax,DWORD PTR [eax]
c001a611:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a614:	68 04 b9 02 c0       	push   0xc002b904
c001a619:	e8 5a 87 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001a61e:	58                   	pop    eax
c001a61f:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a624:	5a                   	pop    edx
c001a625:	68 70 ba 02 c0       	push   0xc002ba70
c001a62a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a630:	e8 db 6a ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a635:	59                   	pop    ecx
c001a636:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a63b:	5b                   	pop    ebx
c001a63c:	68 0d b9 02 c0       	push   0xc002b90d
c001a641:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a647:	e8 c4 6a ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a64c:	0f 20 c0             	mov    eax,cr0
c001a64f:	5a                   	pop    edx
c001a650:	59                   	pop    ecx
c001a651:	50                   	push   eax
c001a652:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a657:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a65d:	e8 d4 6a ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c001a662:	5b                   	pop    ebx
c001a663:	58                   	pop    eax
c001a664:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a669:	68 17 b9 02 c0       	push   0xc002b917
c001a66e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a674:	e8 97 6a ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a679:	0f 20 d0             	mov    eax,cr2
c001a67c:	5a                   	pop    edx
c001a67d:	59                   	pop    ecx
c001a67e:	50                   	push   eax
c001a67f:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a684:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a68a:	e8 a7 6a ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c001a68f:	5b                   	pop    ebx
c001a690:	58                   	pop    eax
c001a691:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a696:	68 21 b9 02 c0       	push   0xc002b921
c001a69b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6a1:	e8 6a 6a ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a6a6:	0f 20 d8             	mov    eax,cr3
c001a6a9:	5a                   	pop    edx
c001a6aa:	59                   	pop    ecx
c001a6ab:	50                   	push   eax
c001a6ac:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a6b1:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6b7:	e8 7a 6a ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c001a6bc:	5b                   	pop    ebx
c001a6bd:	58                   	pop    eax
c001a6be:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a6c3:	68 34 b9 02 c0       	push   0xc002b934
c001a6c8:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6ce:	e8 3d 6a ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a6d3:	0f 20 e0             	mov    eax,cr4
c001a6d6:	5a                   	pop    edx
c001a6d7:	59                   	pop    ecx
c001a6d8:	50                   	push   eax
c001a6d9:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a6de:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6e4:	e8 4d 6a ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c001a6e9:	5b                   	pop    ebx
c001a6ea:	58                   	pop    eax
c001a6eb:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a6f0:	68 3e b9 02 c0       	push   0xc002b93e
c001a6f5:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6fb:	e8 10 6a ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a700:	5a                   	pop    edx
c001a701:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a706:	59                   	pop    ecx
c001a707:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a70d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a710:	50                   	push   eax
c001a711:	e8 20 6a ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c001a716:	5b                   	pop    ebx
c001a717:	58                   	pop    eax
c001a718:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a71d:	68 55 b9 02 c0       	push   0xc002b955
c001a722:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a728:	e8 e3 69 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a72d:	5a                   	pop    edx
c001a72e:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a733:	59                   	pop    ecx
c001a734:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a73a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a73d:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a740:	50                   	push   eax
c001a741:	e8 f0 69 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c001a746:	5b                   	pop    ebx
c001a747:	58                   	pop    eax
c001a748:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a74d:	68 55 b9 02 c0       	push   0xc002b955
c001a752:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a758:	e8 b3 69 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a75d:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a762:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a765:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a76b:	8b 12                	mov    edx,DWORD PTR [edx]
c001a76d:	59                   	pop    ecx
c001a76e:	5b                   	pop    ebx
c001a76f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a772:	50                   	push   eax
c001a773:	e8 be 69 ff ff       	call   c0011136 <VgaText::putx(unsigned int)>
c001a778:	83 c4 10             	add    esp,0x10
c001a77b:	b2 fe                	mov    dl,0xfe
c001a77d:	e4 60                	in     al,0x60
c001a77f:	3c 1c                	cmp    al,0x1c
c001a781:	74 04                	je     c001a787 <Krnl::panic(char const*)+0x334>
c001a783:	3c 5a                	cmp    al,0x5a
c001a785:	75 f6                	jne    c001a77d <Krnl::panic(char const*)+0x32a>
c001a787:	e4 64                	in     al,0x64
c001a789:	a8 02                	test   al,0x2
c001a78b:	75 fa                	jne    c001a787 <Krnl::panic(char const*)+0x334>
c001a78d:	88 d0                	mov    al,dl
c001a78f:	e6 64                	out    0x64,al
c001a791:	fa                   	cli    
c001a792:	f4                   	hlt    
c001a793:	eb e8                	jmp    c001a77d <Krnl::panic(char const*)+0x32a>
c001a795:	50                   	push   eax
c001a796:	50                   	push   eax
c001a797:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a79c:	68 c0 b9 02 c0       	push   0xc002b9c0
c001a7a1:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7a7:	e8 64 69 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a7ac:	58                   	pop    eax
c001a7ad:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a7b2:	5a                   	pop    edx
c001a7b3:	68 cf b8 02 c0       	push   0xc002b8cf
c001a7b8:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7be:	e8 4d 69 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a7c3:	59                   	pop    ecx
c001a7c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a7c9:	5b                   	pop    ebx
c001a7ca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a7cd:	83 c0 0c             	add    eax,0xc
c001a7d0:	50                   	push   eax
c001a7d1:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001a7d6:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7dc:	e8 2f 69 ff ff       	call   c0011110 <VgaText::puts(char const*)>
c001a7e1:	83 c4 10             	add    esp,0x10
c001a7e4:	e9 a3 fd ff ff       	jmp    c001a58c <Krnl::panic(char const*)+0x139>

c001a7e9 <Net::switchEndian16(unsigned short)>:
c001a7e9:	83 ec 04             	sub    esp,0x4
c001a7ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7f0:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a7f4:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a7f8:	c1 f8 08             	sar    eax,0x8
c001a7fb:	89 c2                	mov    edx,eax
c001a7fd:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a801:	c1 e0 08             	shl    eax,0x8
c001a804:	09 d0                	or     eax,edx
c001a806:	83 c4 04             	add    esp,0x4
c001a809:	c3                   	ret    

c001a80a <Net::switchEndian32(unsigned int)>:
c001a80a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a80e:	c1 e8 18             	shr    eax,0x18
c001a811:	89 c2                	mov    edx,eax
c001a813:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a817:	c1 e0 08             	shl    eax,0x8
c001a81a:	25 00 00 ff 00       	and    eax,0xff0000
c001a81f:	09 c2                	or     edx,eax
c001a821:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a825:	c1 e8 08             	shr    eax,0x8
c001a828:	25 00 ff 00 00       	and    eax,0xff00
c001a82d:	09 c2                	or     edx,eax
c001a82f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a833:	c1 e0 18             	shl    eax,0x18
c001a836:	09 d0                	or     eax,edx
c001a838:	c3                   	ret    

c001a839 <Net::crc32Calc(unsigned char*, int)>:
c001a839:	83 ec 10             	sub    esp,0x10
c001a83c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a841:	75 07                	jne    c001a84a <Net::crc32Calc(unsigned char*, int)+0x11>
c001a843:	b8 00 00 00 00       	mov    eax,0x0
c001a848:	eb 7c                	jmp    c001a8c6 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a84a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a84f:	7f 07                	jg     c001a858 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a851:	b8 00 00 00 00       	mov    eax,0x0
c001a856:	eb 6e                	jmp    c001a8c6 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a858:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a860:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a86c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a870:	7d 4e                	jge    c001a8c0 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a872:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a876:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a87a:	01 d0                	add    eax,edx
c001a87c:	8a 00                	mov    al,BYTE PTR [eax]
c001a87e:	0f b6 c0             	movzx  eax,al
c001a881:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a885:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a88d:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a892:	7f 26                	jg     c001a8ba <Net::crc32Calc(unsigned char*, int)+0x81>
c001a894:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a898:	83 e0 01             	and    eax,0x1
c001a89b:	74 0d                	je     c001a8aa <Net::crc32Calc(unsigned char*, int)+0x71>
c001a89d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8a1:	d1 e8                	shr    eax,1
c001a8a3:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a8a8:	eb 06                	jmp    c001a8b0 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a8aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8ae:	d1 e8                	shr    eax,1
c001a8b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a8b4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a8b8:	eb d3                	jmp    c001a88d <Net::crc32Calc(unsigned char*, int)+0x54>
c001a8ba:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a8be:	eb a8                	jmp    c001a868 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a8c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8c4:	f7 d0                	not    eax
c001a8c6:	83 c4 10             	add    esp,0x10
c001a8c9:	c3                   	ret    

c001a8ca <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a8ca:	83 ec 1c             	sub    esp,0x1c
c001a8cd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a8d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a8d5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a8dd:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a8e2:	7f 14                	jg     c001a8f8 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a8e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a8e8:	8d 50 01             	lea    edx,[eax+0x1]
c001a8eb:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a8ef:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a8f2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a8f6:	eb e5                	jmp    c001a8dd <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001a8f8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a8fc:	8d 50 01             	lea    edx,[eax+0x1]
c001a8ff:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a903:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a906:	83 ec 04             	sub    esp,0x4
c001a909:	6a 06                	push   0x6
c001a90b:	8d 44 24 36          	lea    eax,[esp+0x36]
c001a90f:	50                   	push   eax
c001a910:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a914:	e8 2b 5e fe ff       	call   c0000744 <memcpy>
c001a919:	83 c4 10             	add    esp,0x10
c001a91c:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a921:	83 ec 04             	sub    esp,0x4
c001a924:	6a 06                	push   0x6
c001a926:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a92a:	50                   	push   eax
c001a92b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a92f:	e8 10 5e fe ff       	call   c0000744 <memcpy>
c001a934:	83 c4 10             	add    esp,0x10
c001a937:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a93c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a940:	0f b7 c0             	movzx  eax,ax
c001a943:	c1 f8 08             	sar    eax,0x8
c001a946:	89 c1                	mov    ecx,eax
c001a948:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a94c:	8d 50 01             	lea    edx,[eax+0x1]
c001a94f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a953:	88 ca                	mov    dl,cl
c001a955:	88 10                	mov    BYTE PTR [eax],dl
c001a957:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a95b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a95f:	8d 48 01             	lea    ecx,[eax+0x1]
c001a962:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001a966:	88 10                	mov    BYTE PTR [eax],dl
c001a968:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a96c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a970:	83 ec 04             	sub    esp,0x4
c001a973:	52                   	push   edx
c001a974:	50                   	push   eax
c001a975:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a979:	e8 c6 5d fe ff       	call   c0000744 <memcpy>
c001a97e:	83 c4 10             	add    esp,0x10
c001a981:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a985:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001a989:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a98d:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001a991:	83 ec 08             	sub    esp,0x8
c001a994:	50                   	push   eax
c001a995:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a999:	e8 9b fe ff ff       	call   c001a839 <Net::crc32Calc(unsigned char*, int)>
c001a99e:	83 c4 10             	add    esp,0x10
c001a9a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a9a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9a9:	c1 e8 18             	shr    eax,0x18
c001a9ac:	89 c1                	mov    ecx,eax
c001a9ae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9b2:	8d 50 01             	lea    edx,[eax+0x1]
c001a9b5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a9b9:	88 ca                	mov    dl,cl
c001a9bb:	88 10                	mov    BYTE PTR [eax],dl
c001a9bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9c1:	c1 e8 10             	shr    eax,0x10
c001a9c4:	89 c1                	mov    ecx,eax
c001a9c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9ca:	8d 50 01             	lea    edx,[eax+0x1]
c001a9cd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a9d1:	88 ca                	mov    dl,cl
c001a9d3:	88 10                	mov    BYTE PTR [eax],dl
c001a9d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9d9:	c1 e8 08             	shr    eax,0x8
c001a9dc:	89 c1                	mov    ecx,eax
c001a9de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9e2:	8d 50 01             	lea    edx,[eax+0x1]
c001a9e5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a9e9:	88 ca                	mov    dl,cl
c001a9eb:	88 10                	mov    BYTE PTR [eax],dl
c001a9ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9f1:	8d 50 01             	lea    edx,[eax+0x1]
c001a9f4:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a9f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a9fc:	88 10                	mov    BYTE PTR [eax],dl
c001a9fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aa02:	83 c4 1c             	add    esp,0x1c
c001aa05:	c3                   	ret    

c001aa06 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001aa06:	83 ec 2c             	sub    esp,0x2c
c001aa09:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa0d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa11:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001aa16:	83 ec 04             	sub    esp,0x4
c001aa19:	6a 06                	push   0x6
c001aa1b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aa1f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aa23:	83 c0 0e             	add    eax,0xe
c001aa26:	50                   	push   eax
c001aa27:	e8 18 5d fe ff       	call   c0000744 <memcpy>
c001aa2c:	83 c4 10             	add    esp,0x10
c001aa2f:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001aa34:	83 ec 04             	sub    esp,0x4
c001aa37:	6a 06                	push   0x6
c001aa39:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aa3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aa41:	83 c0 08             	add    eax,0x8
c001aa44:	50                   	push   eax
c001aa45:	e8 fa 5c fe ff       	call   c0000744 <memcpy>
c001aa4a:	83 c4 10             	add    esp,0x10
c001aa4d:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001aa52:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa56:	8d 50 01             	lea    edx,[eax+0x1]
c001aa59:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aa5d:	8a 00                	mov    al,BYTE PTR [eax]
c001aa5f:	0f b6 c0             	movzx  eax,al
c001aa62:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001aa67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa6b:	8d 50 01             	lea    edx,[eax+0x1]
c001aa6e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aa72:	8a 00                	mov    al,BYTE PTR [eax]
c001aa74:	0f b6 c0             	movzx  eax,al
c001aa77:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001aa7c:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001aa81:	c1 e0 08             	shl    eax,0x8
c001aa84:	89 c2                	mov    edx,eax
c001aa86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aa8a:	09 d0                	or     eax,edx
c001aa8c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001aa90:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001aa94:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001aa99:	75 3a                	jne    c001aad5 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001aa9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aa9f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aaa2:	66 3d dc 05          	cmp    ax,0x5dc
c001aaa6:	77 10                	ja     c001aab8 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001aaa8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aaac:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aaaf:	0f b7 c0             	movzx  eax,ax
c001aab2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001aab6:	eb 1d                	jmp    c001aad5 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001aab8:	83 ec 0c             	sub    esp,0xc
c001aabb:	68 98 ba 02 c0       	push   0xc002ba98
c001aac0:	e8 b3 82 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001aac5:	83 c4 10             	add    esp,0x10
c001aac8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aacc:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001aad0:	e9 c0 00 00 00       	jmp    c001ab95 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001aad5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001aad9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aadd:	8b 00                	mov    eax,DWORD PTR [eax]
c001aadf:	83 ec 04             	sub    esp,0x4
c001aae2:	52                   	push   edx
c001aae3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aae7:	50                   	push   eax
c001aae8:	e8 57 5c fe ff       	call   c0000744 <memcpy>
c001aaed:	83 c4 10             	add    esp,0x10
c001aaf0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aaf4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001aaf8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aafc:	8d 50 01             	lea    edx,[eax+0x1]
c001aaff:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab03:	8a 00                	mov    al,BYTE PTR [eax]
c001ab05:	0f b6 c0             	movzx  eax,al
c001ab08:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ab0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab10:	8d 50 01             	lea    edx,[eax+0x1]
c001ab13:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab17:	8a 00                	mov    al,BYTE PTR [eax]
c001ab19:	0f b6 c0             	movzx  eax,al
c001ab1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ab20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab24:	8d 50 01             	lea    edx,[eax+0x1]
c001ab27:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab2b:	8a 00                	mov    al,BYTE PTR [eax]
c001ab2d:	0f b6 c0             	movzx  eax,al
c001ab30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab34:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab38:	8d 50 01             	lea    edx,[eax+0x1]
c001ab3b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab3f:	8a 00                	mov    al,BYTE PTR [eax]
c001ab41:	0f b6 c0             	movzx  eax,al
c001ab44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab4c:	c1 e0 18             	shl    eax,0x18
c001ab4f:	89 c2                	mov    edx,eax
c001ab51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab55:	c1 e0 10             	shl    eax,0x10
c001ab58:	09 c2                	or     edx,eax
c001ab5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab5e:	c1 e0 08             	shl    eax,0x8
c001ab61:	09 d0                	or     eax,edx
c001ab63:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ab67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab6f:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ab73:	83 e8 04             	sub    eax,0x4
c001ab76:	83 ec 08             	sub    esp,0x8
c001ab79:	50                   	push   eax
c001ab7a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ab7e:	e8 b6 fc ff ff       	call   c001a839 <Net::crc32Calc(unsigned char*, int)>
c001ab83:	83 c4 10             	add    esp,0x10
c001ab86:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ab8a:	0f 94 c2             	sete   dl
c001ab8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ab91:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ab94:	90                   	nop
c001ab95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ab99:	83 c4 2c             	add    esp,0x2c
c001ab9c:	c2 04 00             	ret    0x4

c001ab9f <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ab9f:	55                   	push   ebp
c001aba0:	57                   	push   edi
c001aba1:	56                   	push   esi
c001aba2:	53                   	push   ebx
c001aba3:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aba9:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001abb0:	8a 1e                	mov    bl,BYTE PTR [esi]
c001abb2:	8d 6e 01             	lea    ebp,[esi+0x1]
c001abb5:	80 fb 40             	cmp    bl,0x40
c001abb8:	75 1b                	jne    c001abd5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001abba:	8a 16                	mov    dl,BYTE PTR [esi]
c001abbc:	84 d2                	test   dl,dl
c001abbe:	0f 84 f1 00 00 00    	je     c001acb5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001abc4:	8d 46 01             	lea    eax,[esi+0x1]
c001abc7:	80 fa 3a             	cmp    dl,0x3a
c001abca:	74 04                	je     c001abd0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001abcc:	89 c6                	mov    esi,eax
c001abce:	eb ea                	jmp    c001abba <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001abd0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001abd3:	89 c6                	mov    esi,eax
c001abd5:	50                   	push   eax
c001abd6:	6a 40                	push   0x40
c001abd8:	6a 00                	push   0x0
c001abda:	8d 44 24 24          	lea    eax,[esp+0x24]
c001abde:	50                   	push   eax
c001abdf:	e8 94 5b fe ff       	call   c0000778 <memset>
c001abe4:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001abeb:	31 c0                	xor    eax,eax
c001abed:	83 c4 10             	add    esp,0x10
c001abf0:	8a 0f                	mov    cl,BYTE PTR [edi]
c001abf2:	84 c9                	test   cl,cl
c001abf4:	0f 84 bb 00 00 00    	je     c001acb5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001abfa:	3d c7 00 00 00       	cmp    eax,0xc7
c001abff:	0f 8f b0 00 00 00    	jg     c001acb5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac05:	80 f9 0a             	cmp    cl,0xa
c001ac08:	0f 85 98 00 00 00    	jne    c001aca6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ac0e:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ac13:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ac17:	a8 df                	test   al,0xdf
c001ac19:	0f 94 c1             	sete   cl
c001ac1c:	3c 23                	cmp    al,0x23
c001ac1e:	0f 94 c2             	sete   dl
c001ac21:	08 d1                	or     cl,dl
c001ac23:	75 4a                	jne    c001ac6f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac25:	8d 50 f7             	lea    edx,[eax-0x9]
c001ac28:	80 fa 01             	cmp    dl,0x1
c001ac2b:	76 42                	jbe    c001ac6f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac2d:	3c 5b                	cmp    al,0x5b
c001ac2f:	75 42                	jne    c001ac73 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ac31:	80 fb 40             	cmp    bl,0x40
c001ac34:	75 39                	jne    c001ac6f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac36:	83 ec 0c             	sub    esp,0xc
c001ac39:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ac3d:	52                   	push   edx
c001ac3e:	e8 51 5b fe ff       	call   c0000794 <strlen>
c001ac43:	83 c4 10             	add    esp,0x10
c001ac46:	83 f8 3f             	cmp    eax,0x3f
c001ac49:	77 6a                	ja     c001acb5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac4b:	50                   	push   eax
c001ac4c:	50                   	push   eax
c001ac4d:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ac51:	52                   	push   edx
c001ac52:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac56:	52                   	push   edx
c001ac57:	e8 d8 5b fe ff       	call   c0000834 <strcpy>
c001ac5c:	58                   	pop    eax
c001ac5d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac61:	52                   	push   edx
c001ac62:	e8 2d 5b fe ff       	call   c0000794 <strlen>
c001ac67:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ac6c:	83 c4 10             	add    esp,0x10
c001ac6f:	31 d2                	xor    edx,edx
c001ac71:	eb 3a                	jmp    c001acad <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ac73:	80 fb 40             	cmp    bl,0x40
c001ac76:	74 06                	je     c001ac7e <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ac78:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ac7c:	eb 20                	jmp    c001ac9e <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ac7e:	50                   	push   eax
c001ac7f:	50                   	push   eax
c001ac80:	55                   	push   ebp
c001ac81:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ac85:	50                   	push   eax
c001ac86:	e8 35 5c fe ff       	call   c00008c0 <strcmp>
c001ac8b:	83 c4 10             	add    esp,0x10
c001ac8e:	85 c0                	test   eax,eax
c001ac90:	75 dd                	jne    c001ac6f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac92:	eb e4                	jmp    c001ac78 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ac94:	8d 50 01             	lea    edx,[eax+0x1]
c001ac97:	80 f9 3d             	cmp    cl,0x3d
c001ac9a:	74 1d                	je     c001acb9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ac9c:	89 d0                	mov    eax,edx
c001ac9e:	8a 08                	mov    cl,BYTE PTR [eax]
c001aca0:	84 c9                	test   cl,cl
c001aca2:	75 f0                	jne    c001ac94 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001aca4:	eb 0f                	jmp    c001acb5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aca6:	8d 50 01             	lea    edx,[eax+0x1]
c001aca9:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001acad:	47                   	inc    edi
c001acae:	89 d0                	mov    eax,edx
c001acb0:	e9 3b ff ff ff       	jmp    c001abf0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001acb5:	31 c0                	xor    eax,eax
c001acb7:	eb 33                	jmp    c001acec <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001acb9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001acbd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001acc0:	50                   	push   eax
c001acc1:	50                   	push   eax
c001acc2:	8d 44 24 60          	lea    eax,[esp+0x60]
c001acc6:	50                   	push   eax
c001acc7:	56                   	push   esi
c001acc8:	e8 f3 5b fe ff       	call   c00008c0 <strcmp>
c001accd:	83 c4 10             	add    esp,0x10
c001acd0:	85 c0                	test   eax,eax
c001acd2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001acd6:	75 97                	jne    c001ac6f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acd8:	51                   	push   ecx
c001acd9:	51                   	push   ecx
c001acda:	52                   	push   edx
c001acdb:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ace2:	e8 4d 5b fe ff       	call   c0000834 <strcpy>
c001ace7:	83 c4 10             	add    esp,0x10
c001acea:	b0 01                	mov    al,0x1
c001acec:	81 c4 2c 01 00 00    	add    esp,0x12c
c001acf2:	5b                   	pop    ebx
c001acf3:	5e                   	pop    esi
c001acf4:	5f                   	pop    edi
c001acf5:	5d                   	pop    ebp
c001acf6:	c3                   	ret    

c001acf7 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001acf7:	57                   	push   edi
c001acf8:	56                   	push   esi
c001acf9:	53                   	push   ebx
c001acfa:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad00:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ad07:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ad0e:	53                   	push   ebx
c001ad0f:	e8 80 5a fe ff       	call   c0000794 <strlen>
c001ad14:	89 34 24             	mov    DWORD PTR [esp],esi
c001ad17:	89 c7                	mov    edi,eax
c001ad19:	e8 76 5a fe ff       	call   c0000794 <strlen>
c001ad1e:	83 c4 10             	add    esp,0x10
c001ad21:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ad25:	3d ff 00 00 00       	cmp    eax,0xff
c001ad2a:	0f 87 d3 00 00 00    	ja     c001ae03 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ad30:	57                   	push   edi
c001ad31:	57                   	push   edi
c001ad32:	56                   	push   esi
c001ad33:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ad37:	56                   	push   esi
c001ad38:	e8 f7 5a fe ff       	call   c0000834 <strcpy>
c001ad3d:	58                   	pop    eax
c001ad3e:	5a                   	pop    edx
c001ad3f:	68 f8 bf 02 c0       	push   0xc002bff8
c001ad44:	56                   	push   esi
c001ad45:	e8 2a 5c fe ff       	call   c0000974 <strcat>
c001ad4a:	59                   	pop    ecx
c001ad4b:	5f                   	pop    edi
c001ad4c:	53                   	push   ebx
c001ad4d:	56                   	push   esi
c001ad4e:	e8 21 5c fe ff       	call   c0000974 <strcat>
c001ad53:	58                   	pop    eax
c001ad54:	5a                   	pop    edx
c001ad55:	68 e4 ba 02 c0       	push   0xc002bae4
c001ad5a:	56                   	push   esi
c001ad5b:	e8 14 5c fe ff       	call   c0000974 <strcat>
c001ad60:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ad67:	e8 d7 4a ff ff       	call   c000f843 <malloc>
c001ad6c:	83 c4 0c             	add    esp,0xc
c001ad6f:	89 c3                	mov    ebx,eax
c001ad71:	ff 35 74 17 03 c0    	push   DWORD PTR ds:0xc0031774
c001ad77:	56                   	push   esi
c001ad78:	50                   	push   eax
c001ad79:	e8 52 85 ff ff       	call   c00132d0 <File::File(char const*, Process*)>
c001ad7e:	83 c4 10             	add    esp,0x10
c001ad81:	85 db                	test   ebx,ebx
c001ad83:	74 7e                	je     c001ae03 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ad85:	51                   	push   ecx
c001ad86:	51                   	push   ecx
c001ad87:	6a 01                	push   0x1
c001ad89:	53                   	push   ebx
c001ad8a:	e8 a5 85 ff ff       	call   c0013334 <File::open(FileOpenMode)>
c001ad8f:	83 c4 10             	add    esp,0x10
c001ad92:	85 c0                	test   eax,eax
c001ad94:	74 08                	je     c001ad9e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001ad96:	83 ec 0c             	sub    esp,0xc
c001ad99:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad9b:	53                   	push   ebx
c001ad9c:	eb 5f                	jmp    c001adfd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001ad9e:	52                   	push   edx
c001ad9f:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ada3:	50                   	push   eax
c001ada4:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ada8:	50                   	push   eax
c001ada9:	53                   	push   ebx
c001adaa:	e8 31 88 ff ff       	call   c00135e0 <File::stat(unsigned long long*, bool*)>
c001adaf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001adb3:	83 c4 10             	add    esp,0x10
c001adb6:	89 c1                	mov    ecx,eax
c001adb8:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001adbc:	74 31                	je     c001adef <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001adbe:	83 ec 0c             	sub    esp,0xc
c001adc1:	50                   	push   eax
c001adc2:	e8 7c 4a ff ff       	call   c000f843 <malloc>
c001adc7:	89 c6                	mov    esi,eax
c001adc9:	58                   	pop    eax
c001adca:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adcc:	8d 54 24 20          	lea    edx,[esp+0x20]
c001add0:	52                   	push   edx
c001add1:	56                   	push   esi
c001add2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001add6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001adda:	53                   	push   ebx
c001addb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001adde:	83 c4 20             	add    esp,0x20
c001ade1:	85 c0                	test   eax,eax
c001ade3:	75 0a                	jne    c001adef <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ade5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ade9:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001aded:	74 18                	je     c001ae07 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001adef:	83 ec 0c             	sub    esp,0xc
c001adf2:	53                   	push   ebx
c001adf3:	e8 9a 85 ff ff       	call   c0013392 <File::close()>
c001adf8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adfa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001adfd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae00:	83 c4 10             	add    esp,0x10
c001ae03:	31 c0                	xor    eax,eax
c001ae05:	eb 3b                	jmp    c001ae42 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001ae07:	83 ec 0c             	sub    esp,0xc
c001ae0a:	53                   	push   ebx
c001ae0b:	e8 82 85 ff ff       	call   c0013392 <File::close()>
c001ae10:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae15:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae18:	83 c4 0c             	add    esp,0xc
c001ae1b:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ae22:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ae29:	56                   	push   esi
c001ae2a:	e8 70 fd ff ff       	call   c001ab9f <Reg::findLineFromLoadedData(char*, char*, char*)>
c001ae2f:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae32:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ae36:	e8 18 4a ff ff       	call   c000f853 <free>
c001ae3b:	83 c4 10             	add    esp,0x10
c001ae3e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ae42:	81 c4 20 01 00 00    	add    esp,0x120
c001ae48:	5b                   	pop    ebx
c001ae49:	5e                   	pop    esi
c001ae4a:	5f                   	pop    edi
c001ae4b:	c3                   	ret    

c001ae4c <Reg::getLine(char*, char*, char*)>:
c001ae4c:	57                   	push   edi
c001ae4d:	56                   	push   esi
c001ae4e:	53                   	push   ebx
c001ae4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae53:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ae57:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ae5b:	57                   	push   edi
c001ae5c:	56                   	push   esi
c001ae5d:	53                   	push   ebx
c001ae5e:	68 e9 ba 02 c0       	push   0xc002bae9
c001ae63:	e8 8f fe ff ff       	call   c001acf7 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ae68:	83 c4 10             	add    esp,0x10
c001ae6b:	84 c0                	test   al,al
c001ae6d:	75 10                	jne    c001ae7f <Reg::getLine(char*, char*, char*)+0x33>
c001ae6f:	57                   	push   edi
c001ae70:	56                   	push   esi
c001ae71:	53                   	push   ebx
c001ae72:	68 0e bb 02 c0       	push   0xc002bb0e
c001ae77:	e8 7b fe ff ff       	call   c001acf7 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ae7c:	83 c4 10             	add    esp,0x10
c001ae7f:	5b                   	pop    ebx
c001ae80:	5e                   	pop    esi
c001ae81:	5f                   	pop    edi
c001ae82:	c3                   	ret    

c001ae83 <Reg::readInt(char*, char*, int*)>:
c001ae83:	55                   	push   ebp
c001ae84:	57                   	push   edi
c001ae85:	56                   	push   esi
c001ae86:	53                   	push   ebx
c001ae87:	81 ec f0 00 00 00    	sub    esp,0xf0
c001ae8d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001ae91:	57                   	push   edi
c001ae92:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ae99:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aea0:	e8 a7 ff ff ff       	call   c001ae4c <Reg::getLine(char*, char*, char*)>
c001aea5:	83 c4 10             	add    esp,0x10
c001aea8:	84 c0                	test   al,al
c001aeaa:	0f 84 b3 00 00 00    	je     c001af63 <Reg::readInt(char*, char*, int*)+0xe0>
c001aeb0:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001aeb4:	80 fa 2b             	cmp    dl,0x2b
c001aeb7:	74 0c                	je     c001aec5 <Reg::readInt(char*, char*, int*)+0x42>
c001aeb9:	80 fa 2d             	cmp    dl,0x2d
c001aebc:	75 0e                	jne    c001aecc <Reg::readInt(char*, char*, int*)+0x49>
c001aebe:	ba 01 00 00 00       	mov    edx,0x1
c001aec3:	eb 0b                	jmp    c001aed0 <Reg::readInt(char*, char*, int*)+0x4d>
c001aec5:	ba 01 00 00 00       	mov    edx,0x1
c001aeca:	eb 02                	jmp    c001aece <Reg::readInt(char*, char*, int*)+0x4b>
c001aecc:	31 d2                	xor    edx,edx
c001aece:	31 c0                	xor    eax,eax
c001aed0:	be 0a 00 00 00       	mov    esi,0xa
c001aed5:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001aeda:	75 20                	jne    c001aefc <Reg::readInt(char*, char*, int*)+0x79>
c001aedc:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001aee0:	80 f9 78             	cmp    cl,0x78
c001aee3:	75 0a                	jne    c001aeef <Reg::readInt(char*, char*, int*)+0x6c>
c001aee5:	83 c2 02             	add    edx,0x2
c001aee8:	be 10 00 00 00       	mov    esi,0x10
c001aeed:	eb 0d                	jmp    c001aefc <Reg::readInt(char*, char*, int*)+0x79>
c001aeef:	80 f9 62             	cmp    cl,0x62
c001aef2:	75 08                	jne    c001aefc <Reg::readInt(char*, char*, int*)+0x79>
c001aef4:	83 c2 02             	add    edx,0x2
c001aef7:	be 02 00 00 00       	mov    esi,0x2
c001aefc:	01 d7                	add    edi,edx
c001aefe:	31 d2                	xor    edx,edx
c001af00:	8a 1f                	mov    bl,BYTE PTR [edi]
c001af02:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001af06:	80 fb 0d             	cmp    bl,0xd
c001af09:	0f 94 c3             	sete   bl
c001af0c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001af11:	0f 94 c1             	sete   cl
c001af14:	08 cb                	or     bl,cl
c001af16:	75 3a                	jne    c001af52 <Reg::readInt(char*, char*, int*)+0xcf>
c001af18:	0f af d6             	imul   edx,esi
c001af1b:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001af20:	83 fe 10             	cmp    esi,0x10
c001af23:	75 26                	jne    c001af4b <Reg::readInt(char*, char*, int*)+0xc8>
c001af25:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001af29:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001af2c:	89 e9                	mov    ecx,ebp
c001af2e:	80 f9 05             	cmp    cl,0x5
c001af31:	77 06                	ja     c001af39 <Reg::readInt(char*, char*, int*)+0xb6>
c001af33:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001af37:	eb 16                	jmp    c001af4f <Reg::readInt(char*, char*, int*)+0xcc>
c001af39:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001af3d:	83 e9 61             	sub    ecx,0x61
c001af40:	80 f9 05             	cmp    cl,0x5
c001af43:	77 06                	ja     c001af4b <Reg::readInt(char*, char*, int*)+0xc8>
c001af45:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001af49:	eb 04                	jmp    c001af4f <Reg::readInt(char*, char*, int*)+0xcc>
c001af4b:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001af4f:	47                   	inc    edi
c001af50:	eb ae                	jmp    c001af00 <Reg::readInt(char*, char*, int*)+0x7d>
c001af52:	84 c0                	test   al,al
c001af54:	74 02                	je     c001af58 <Reg::readInt(char*, char*, int*)+0xd5>
c001af56:	f7 da                	neg    edx
c001af58:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001af5f:	89 10                	mov    DWORD PTR [eax],edx
c001af61:	88 d8                	mov    al,bl
c001af63:	81 c4 ec 00 00 00    	add    esp,0xec
c001af69:	5b                   	pop    ebx
c001af6a:	5e                   	pop    esi
c001af6b:	5f                   	pop    edi
c001af6c:	5d                   	pop    ebp
c001af6d:	c3                   	ret    

c001af6e <Reg::readString(char*, char*, char*, int)>:
c001af6e:	57                   	push   edi
c001af6f:	56                   	push   esi
c001af70:	53                   	push   ebx
c001af71:	81 ec d4 00 00 00    	sub    esp,0xd4
c001af77:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001af7e:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001af82:	57                   	push   edi
c001af83:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001af8a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001af91:	e8 b6 fe ff ff       	call   c001ae4c <Reg::getLine(char*, char*, char*)>
c001af96:	83 c4 10             	add    esp,0x10
c001af99:	89 c6                	mov    esi,eax
c001af9b:	84 c0                	test   al,al
c001af9d:	74 44                	je     c001afe3 <Reg::readString(char*, char*, char*, int)+0x75>
c001af9f:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001afa6:	31 c0                	xor    eax,eax
c001afa8:	4a                   	dec    edx
c001afa9:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001afac:	84 c9                	test   cl,cl
c001afae:	74 0f                	je     c001afbf <Reg::readString(char*, char*, char*, int)+0x51>
c001afb0:	39 c2                	cmp    edx,eax
c001afb2:	7e 0b                	jle    c001afbf <Reg::readString(char*, char*, char*, int)+0x51>
c001afb4:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001afb7:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001afbc:	40                   	inc    eax
c001afbd:	eb ea                	jmp    c001afa9 <Reg::readString(char*, char*, char*, int)+0x3b>
c001afbf:	83 ec 0c             	sub    esp,0xc
c001afc2:	53                   	push   ebx
c001afc3:	e8 cc 57 fe ff       	call   c0000794 <strlen>
c001afc8:	83 c4 10             	add    esp,0x10
c001afcb:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001afd0:	75 11                	jne    c001afe3 <Reg::readString(char*, char*, char*, int)+0x75>
c001afd2:	83 ec 0c             	sub    esp,0xc
c001afd5:	53                   	push   ebx
c001afd6:	e8 b9 57 fe ff       	call   c0000794 <strlen>
c001afdb:	83 c4 10             	add    esp,0x10
c001afde:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001afe3:	81 c4 d0 00 00 00    	add    esp,0xd0
c001afe9:	89 f0                	mov    eax,esi
c001afeb:	5b                   	pop    ebx
c001afec:	5e                   	pop    esi
c001afed:	5f                   	pop    edi
c001afee:	c3                   	ret    

c001afef <Reg::readBool(char*, char*, bool*)>:
c001afef:	83 ec 20             	sub    esp,0x20
c001aff2:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aff6:	50                   	push   eax
c001aff7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001affb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afff:	e8 7f fe ff ff       	call   c001ae83 <Reg::readInt(char*, char*, int*)>
c001b004:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b009:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b00d:	0f 95 02             	setne  BYTE PTR [edx]
c001b010:	83 c4 2c             	add    esp,0x2c
c001b013:	c3                   	ret    

c001b014 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b014:	53                   	push   ebx
c001b015:	83 ec 1c             	sub    esp,0x1c
c001b018:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b01c:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b020:	50                   	push   eax
c001b021:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b025:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b029:	e8 c1 ff ff ff       	call   c001afef <Reg::readBool(char*, char*, bool*)>
c001b02e:	83 c4 10             	add    esp,0x10
c001b031:	84 c0                	test   al,al
c001b033:	74 04                	je     c001b039 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b035:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b039:	88 d8                	mov    al,bl
c001b03b:	83 c4 18             	add    esp,0x18
c001b03e:	5b                   	pop    ebx
c001b03f:	c3                   	ret    

c001b040 <Reg::readIntWithDefault(char*, char*, int)>:
c001b040:	53                   	push   ebx
c001b041:	83 ec 1c             	sub    esp,0x1c
c001b044:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b048:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b04c:	50                   	push   eax
c001b04d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b051:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b055:	e8 29 fe ff ff       	call   c001ae83 <Reg::readInt(char*, char*, int*)>
c001b05a:	83 c4 10             	add    esp,0x10
c001b05d:	84 c0                	test   al,al
c001b05f:	74 04                	je     c001b065 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b061:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b065:	89 d8                	mov    eax,ebx
c001b067:	83 c4 18             	add    esp,0x18
c001b06a:	5b                   	pop    ebx
c001b06b:	c3                   	ret    

c001b06c <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b06c:	57                   	push   edi
c001b06d:	56                   	push   esi
c001b06e:	53                   	push   ebx
c001b06f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b073:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b077:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b07b:	56                   	push   esi
c001b07c:	53                   	push   ebx
c001b07d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b081:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b085:	e8 e4 fe ff ff       	call   c001af6e <Reg::readString(char*, char*, char*, int)>
c001b08a:	83 c4 10             	add    esp,0x10
c001b08d:	84 c0                	test   al,al
c001b08f:	75 1b                	jne    c001b0ac <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b091:	50                   	push   eax
c001b092:	56                   	push   esi
c001b093:	4e                   	dec    esi
c001b094:	6a 00                	push   0x0
c001b096:	53                   	push   ebx
c001b097:	e8 dc 56 fe ff       	call   c0000778 <memset>
c001b09c:	83 c4 0c             	add    esp,0xc
c001b09f:	56                   	push   esi
c001b0a0:	57                   	push   edi
c001b0a1:	53                   	push   ebx
c001b0a2:	89 fb                	mov    ebx,edi
c001b0a4:	e8 9b 56 fe ff       	call   c0000744 <memcpy>
c001b0a9:	83 c4 10             	add    esp,0x10
c001b0ac:	89 d8                	mov    eax,ebx
c001b0ae:	5b                   	pop    ebx
c001b0af:	5e                   	pop    esi
c001b0b0:	5f                   	pop    edi
c001b0b1:	c3                   	ret    

c001b0b2 <Sys::eject(regs*)>:
c001b0b2:	83 ec 0c             	sub    esp,0xc
c001b0b5:	83 ca ff             	or     edx,0xffffffff
c001b0b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0bc:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b0bf:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b0c4:	83 e9 41             	sub    ecx,0x41
c001b0c7:	83 f9 19             	cmp    ecx,0x19
c001b0ca:	77 18                	ja     c001b0e4 <Sys::eject(regs*)+0x32>
c001b0cc:	8b 0c 8d 20 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17e0]
c001b0d3:	85 c9                	test   ecx,ecx
c001b0d5:	74 0d                	je     c001b0e4 <Sys::eject(regs*)+0x32>
c001b0d7:	83 ec 0c             	sub    esp,0xc
c001b0da:	51                   	push   ecx
c001b0db:	e8 74 b4 ff ff       	call   c0016554 <LogicalDisk::eject()>
c001b0e0:	83 c4 10             	add    esp,0x10
c001b0e3:	99                   	cdq    
c001b0e4:	83 c4 0c             	add    esp,0xc
c001b0e7:	c3                   	ret    

c001b0e8 <Sys::exit(regs*)>:
c001b0e8:	83 ec 18             	sub    esp,0x18
c001b0eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b0ef:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b0f2:	e8 99 35 00 00       	call   c001e690 <terminateTask(int)>
c001b0f7:	83 c8 ff             	or     eax,0xffffffff
c001b0fa:	83 c4 1c             	add    esp,0x1c
c001b0fd:	89 c2                	mov    edx,eax
c001b0ff:	c3                   	ret    

c001b100 <Sys::getCwd(regs*)>:
c001b100:	83 ec 10             	sub    esp,0x10
c001b103:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b107:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b10a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b10d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b112:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b115:	e8 b8 7f ff ff       	call   c00130d2 <Fs::getcwd(Process*, char*, int)>
c001b11a:	83 c4 1c             	add    esp,0x1c
c001b11d:	99                   	cdq    
c001b11e:	c3                   	ret    

c001b11f <Sys::getPID(regs*)>:
c001b11f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b124:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b127:	8b 00                	mov    eax,DWORD PTR [eax]
c001b129:	99                   	cdq    
c001b12a:	c3                   	ret    

c001b12b <Sys::getRAMData(regs*)>:
c001b12b:	8b 0d 54 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e254
c001b131:	6b 05 50 e2 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e250,0x64
c001b138:	99                   	cdq    
c001b139:	f7 f9                	idiv   ecx
c001b13b:	c1 e0 18             	shl    eax,0x18
c001b13e:	09 c8                	or     eax,ecx
c001b140:	99                   	cdq    
c001b141:	c3                   	ret    

c001b142 <Sys::loadDLL(regs*)>:
c001b142:	56                   	push   esi
c001b143:	53                   	push   ebx
c001b144:	31 d2                	xor    edx,edx
c001b146:	51                   	push   ecx
c001b147:	b8 01 00 00 00       	mov    eax,0x1
c001b14c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b150:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b154:	0f 84 8c 00 00 00    	je     c001b1e6 <Sys::loadDLL(regs*)+0xa4>
c001b15a:	83 ec 0c             	sub    esp,0xc
c001b15d:	68 14 01 00 00       	push   0x114
c001b162:	e8 dc 46 ff ff       	call   c000f843 <malloc>
c001b167:	83 c4 0c             	add    esp,0xc
c001b16a:	89 c3                	mov    ebx,eax
c001b16c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b171:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b174:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b177:	53                   	push   ebx
c001b178:	e8 53 81 ff ff       	call   c00132d0 <File::File(char const*, Process*)>
c001b17d:	83 c4 10             	add    esp,0x10
c001b180:	31 d2                	xor    edx,edx
c001b182:	b8 02 00 00 00       	mov    eax,0x2
c001b187:	85 db                	test   ebx,ebx
c001b189:	74 5b                	je     c001b1e6 <Sys::loadDLL(regs*)+0xa4>
c001b18b:	83 ec 0c             	sub    esp,0xc
c001b18e:	53                   	push   ebx
c001b18f:	e8 0e 84 ff ff       	call   c00135a2 <File::exists()>
c001b194:	83 c4 10             	add    esp,0x10
c001b197:	84 c0                	test   al,al
c001b199:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b19b:	75 11                	jne    c001b1ae <Sys::loadDLL(regs*)+0x6c>
c001b19d:	83 ec 0c             	sub    esp,0xc
c001b1a0:	53                   	push   ebx
c001b1a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b1a4:	83 c4 10             	add    esp,0x10
c001b1a7:	b8 03 00 00 00       	mov    eax,0x3
c001b1ac:	eb 36                	jmp    c001b1e4 <Sys::loadDLL(regs*)+0xa2>
c001b1ae:	83 ec 0c             	sub    esp,0xc
c001b1b1:	53                   	push   ebx
c001b1b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b1b5:	58                   	pop    eax
c001b1b6:	5a                   	pop    edx
c001b1b7:	6a 00                	push   0x0
c001b1b9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b1bc:	e8 c5 23 00 00       	call   c001d586 <Thr::loadDLL(char const*, bool)>
c001b1c1:	83 c4 10             	add    esp,0x10
c001b1c4:	89 c1                	mov    ecx,eax
c001b1c6:	31 d2                	xor    edx,edx
c001b1c8:	b8 04 00 00 00       	mov    eax,0x4
c001b1cd:	85 c9                	test   ecx,ecx
c001b1cf:	74 15                	je     c001b1e6 <Sys::loadDLL(regs*)+0xa4>
c001b1d1:	53                   	push   ebx
c001b1d2:	53                   	push   ebx
c001b1d3:	ff 35 08 e2 02 c0    	push   DWORD PTR ds:0xc002e208
c001b1d9:	51                   	push   ecx
c001b1da:	e8 f6 25 00 00       	call   c001d7d5 <Thr::executeDLL(unsigned long, void*)>
c001b1df:	83 c4 10             	add    esp,0x10
c001b1e2:	31 c0                	xor    eax,eax
c001b1e4:	31 d2                	xor    edx,edx
c001b1e6:	59                   	pop    ecx
c001b1e7:	5b                   	pop    ebx
c001b1e8:	5e                   	pop    esi
c001b1e9:	c3                   	ret    

c001b1ea <Sys::read(regs*)>:
c001b1ea:	57                   	push   edi
c001b1eb:	56                   	push   esi
c001b1ec:	53                   	push   ebx
c001b1ed:	83 ec 10             	sub    esp,0x10
c001b1f0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b1f4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b1f7:	83 f8 02             	cmp    eax,0x2
c001b1fa:	77 10                	ja     c001b20c <Sys::read(regs*)+0x22>
c001b1fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b201:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b204:	8b 88 26 19 00 00    	mov    ecx,DWORD PTR [eax+0x1926]
c001b20a:	eb 0e                	jmp    c001b21a <Sys::read(regs*)+0x30>
c001b20c:	83 ec 0c             	sub    esp,0xc
c001b20f:	50                   	push   eax
c001b210:	e8 d4 67 ff ff       	call   c00119e9 <getFromFileDescriptor(int)>
c001b215:	83 c4 10             	add    esp,0x10
c001b218:	89 c1                	mov    ecx,eax
c001b21a:	83 c8 ff             	or     eax,0xffffffff
c001b21d:	85 c9                	test   ecx,ecx
c001b21f:	89 c2                	mov    edx,eax
c001b221:	74 28                	je     c001b24b <Sys::read(regs*)+0x61>
c001b223:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b22b:	31 ff                	xor    edi,edi
c001b22d:	83 ec 0c             	sub    esp,0xc
c001b230:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b232:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b236:	52                   	push   edx
c001b237:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b23a:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b23d:	57                   	push   edi
c001b23e:	56                   	push   esi
c001b23f:	51                   	push   ecx
c001b240:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b243:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b247:	83 c4 20             	add    esp,0x20
c001b24a:	99                   	cdq    
c001b24b:	83 c4 10             	add    esp,0x10
c001b24e:	5b                   	pop    ebx
c001b24f:	5e                   	pop    esi
c001b250:	5f                   	pop    edi
c001b251:	c3                   	ret    

c001b252 <Sys::sbrk(regs*)>:
c001b252:	56                   	push   esi
c001b253:	53                   	push   ebx
c001b254:	50                   	push   eax
c001b255:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b25a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b25e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b261:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b264:	8b 88 32 19 00 00    	mov    ecx,DWORD PTR [eax+0x1932]
c001b26a:	85 db                	test   ebx,ebx
c001b26c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b26f:	74 02                	je     c001b273 <Sys::sbrk(regs*)+0x21>
c001b271:	79 06                	jns    c001b279 <Sys::sbrk(regs*)+0x27>
c001b273:	89 f0                	mov    eax,esi
c001b275:	31 d2                	xor    edx,edx
c001b277:	eb 2a                	jmp    c001b2a3 <Sys::sbrk(regs*)+0x51>
c001b279:	83 c8 ff             	or     eax,0xffffffff
c001b27c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b282:	89 c2                	mov    edx,eax
c001b284:	77 1d                	ja     c001b2a3 <Sys::sbrk(regs*)+0x51>
c001b286:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b28c:	50                   	push   eax
c001b28d:	c1 ea 0c             	shr    edx,0xc
c001b290:	68 07 0c 00 00       	push   0xc07
c001b295:	52                   	push   edx
c001b296:	51                   	push   ecx
c001b297:	e8 6c 70 ff ff       	call   c0012308 <VAS::allocatePages(int, int)>
c001b29c:	89 f0                	mov    eax,esi
c001b29e:	31 d2                	xor    edx,edx
c001b2a0:	83 c4 10             	add    esp,0x10
c001b2a3:	59                   	pop    ecx
c001b2a4:	5b                   	pop    ebx
c001b2a5:	5e                   	pop    esi
c001b2a6:	c3                   	ret    

c001b2a7 <Sys::setCwd(regs*)>:
c001b2a7:	83 ec 14             	sub    esp,0x14
c001b2aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b2ae:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2b6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2b9:	e8 83 83 ff ff       	call   c0013641 <Fs::setcwd(Process*, char*)>
c001b2be:	83 c4 1c             	add    esp,0x1c
c001b2c1:	99                   	cdq    
c001b2c2:	c3                   	ret    

c001b2c3 <Sys::setTime(regs*)>:
c001b2c3:	55                   	push   ebp
c001b2c4:	31 d2                	xor    edx,edx
c001b2c6:	57                   	push   edi
c001b2c7:	bf 18 00 00 00       	mov    edi,0x18
c001b2cc:	56                   	push   esi
c001b2cd:	53                   	push   ebx
c001b2ce:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b2d3:	83 ec 30             	sub    esp,0x30
c001b2d6:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b2da:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b2dd:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b2e0:	f7 f3                	div    ebx
c001b2e2:	89 d6                	mov    esi,edx
c001b2e4:	31 d2                	xor    edx,edx
c001b2e6:	f7 f3                	div    ebx
c001b2e8:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b2eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b2ef:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b2f4:	31 d2                	xor    edx,edx
c001b2f6:	f7 f3                	div    ebx
c001b2f8:	31 d2                	xor    edx,edx
c001b2fa:	bb 0c 00 00 00       	mov    ebx,0xc
c001b2ff:	f7 f7                	div    edi
c001b301:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b304:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b308:	0f b7 cd             	movzx  ecx,bp
c001b30b:	56                   	push   esi
c001b30c:	89 c7                	mov    edi,eax
c001b30e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b312:	c1 e6 10             	shl    esi,0x10
c001b315:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b319:	83 e7 1f             	and    edi,0x1f
c001b31c:	51                   	push   ecx
c001b31d:	47                   	inc    edi
c001b31e:	c1 e8 05             	shr    eax,0x5
c001b321:	31 d2                	xor    edx,edx
c001b323:	f7 f3                	div    ebx
c001b325:	31 db                	xor    ebx,ebx
c001b327:	52                   	push   edx
c001b328:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b32c:	57                   	push   edi
c001b32d:	68 29 bb 02 c0       	push   0xc002bb29
c001b332:	e8 41 7a ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001b337:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b33b:	89 f8                	mov    eax,edi
c001b33d:	31 c9                	xor    ecx,ecx
c001b33f:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b343:	88 c1                	mov    cl,al
c001b345:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b34b:	88 d5                	mov    ch,dl
c001b34d:	c1 e0 10             	shl    eax,0x10
c001b350:	0f b7 d1             	movzx  edx,cx
c001b353:	09 c2                	or     edx,eax
c001b355:	89 d8                	mov    eax,ebx
c001b357:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b35c:	09 f0                	or     eax,esi
c001b35e:	89 c3                	mov    ebx,eax
c001b360:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b364:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b368:	83 c4 18             	add    esp,0x18
c001b36b:	53                   	push   ebx
c001b36c:	52                   	push   edx
c001b36d:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b371:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b375:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b379:	e8 dd 89 ff ff       	call   c0013d5b <datetimeToSeconds(datetime_t)>
c001b37e:	83 c4 0c             	add    esp,0xc
c001b381:	52                   	push   edx
c001b382:	50                   	push   eax
c001b383:	56                   	push   esi
c001b384:	e8 59 8b ff ff       	call   c0013ee2 <secondsToDatetime(unsigned long long)>
c001b389:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b38d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b391:	51                   	push   ecx
c001b392:	89 d6                	mov    esi,edx
c001b394:	51                   	push   ecx
c001b395:	c1 ee 10             	shr    esi,0x10
c001b398:	89 f3                	mov    ebx,esi
c001b39a:	0f b6 f3             	movzx  esi,bl
c001b39d:	56                   	push   esi
c001b39e:	0f b6 f6             	movzx  esi,dh
c001b3a1:	0f b6 d2             	movzx  edx,dl
c001b3a4:	56                   	push   esi
c001b3a5:	52                   	push   edx
c001b3a6:	89 c2                	mov    edx,eax
c001b3a8:	c1 ea 10             	shr    edx,0x10
c001b3ab:	52                   	push   edx
c001b3ac:	0f b6 d4             	movzx  edx,ah
c001b3af:	0f b6 c0             	movzx  eax,al
c001b3b2:	52                   	push   edx
c001b3b3:	50                   	push   eax
c001b3b4:	68 45 bb 02 c0       	push   0xc002bb45
c001b3b9:	e8 ba 79 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001b3be:	83 c4 2c             	add    esp,0x2c
c001b3c1:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c001b3c6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b3ca:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b3ce:	53                   	push   ebx
c001b3cf:	51                   	push   ecx
c001b3d0:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b3d6:	e8 a7 8a ff ff       	call   c0013e82 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b3db:	83 f0 01             	xor    eax,0x1
c001b3de:	31 d2                	xor    edx,edx
c001b3e0:	0f b6 c0             	movzx  eax,al
c001b3e3:	83 c4 3c             	add    esp,0x3c
c001b3e6:	5b                   	pop    ebx
c001b3e7:	5e                   	pop    esi
c001b3e8:	5f                   	pop    edi
c001b3e9:	5d                   	pop    ebp
c001b3ea:	c3                   	ret    

c001b3eb <Sys::timezone(regs*)>:
c001b3eb:	53                   	push   ebx
c001b3ec:	83 ec 08             	sub    esp,0x8
c001b3ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b3f3:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b3f7:	75 17                	jne    c001b410 <Sys::timezone(regs*)+0x25>
c001b3f9:	83 ec 0c             	sub    esp,0xc
c001b3fc:	68 61 bb 02 c0       	push   0xc002bb61
c001b401:	e8 72 79 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001b406:	83 c8 ff             	or     eax,0xffffffff
c001b409:	83 c4 10             	add    esp,0x10
c001b40c:	89 c2                	mov    edx,eax
c001b40e:	eb 20                	jmp    c001b430 <Sys::timezone(regs*)+0x45>
c001b410:	83 ec 0c             	sub    esp,0xc
c001b413:	68 99 bb 02 c0       	push   0xc002bb99
c001b418:	e8 5b 79 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001b41d:	58                   	pop    eax
c001b41e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b421:	e8 be 87 ff ff       	call   c0013be4 <User::loadClockSettings(int)>
c001b426:	83 c4 10             	add    esp,0x10
c001b429:	b8 01 00 00 00       	mov    eax,0x1
c001b42e:	31 d2                	xor    edx,edx
c001b430:	83 c4 08             	add    esp,0x8
c001b433:	5b                   	pop    ebx
c001b434:	c3                   	ret    

c001b435 <Sys::write(regs*)>:
c001b435:	57                   	push   edi
c001b436:	56                   	push   esi
c001b437:	53                   	push   ebx
c001b438:	83 ec 10             	sub    esp,0x10
c001b43b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b43f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b442:	83 f8 02             	cmp    eax,0x2
c001b445:	77 10                	ja     c001b457 <Sys::write(regs*)+0x22>
c001b447:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b44c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b44f:	8b 88 26 19 00 00    	mov    ecx,DWORD PTR [eax+0x1926]
c001b455:	eb 0e                	jmp    c001b465 <Sys::write(regs*)+0x30>
c001b457:	83 ec 0c             	sub    esp,0xc
c001b45a:	50                   	push   eax
c001b45b:	e8 89 65 ff ff       	call   c00119e9 <getFromFileDescriptor(int)>
c001b460:	83 c4 10             	add    esp,0x10
c001b463:	89 c1                	mov    ecx,eax
c001b465:	83 c8 ff             	or     eax,0xffffffff
c001b468:	85 c9                	test   ecx,ecx
c001b46a:	89 c2                	mov    edx,eax
c001b46c:	74 28                	je     c001b496 <Sys::write(regs*)+0x61>
c001b46e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b476:	31 ff                	xor    edi,edi
c001b478:	83 ec 0c             	sub    esp,0xc
c001b47b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b47d:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b481:	52                   	push   edx
c001b482:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b485:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b488:	57                   	push   edi
c001b489:	56                   	push   esi
c001b48a:	51                   	push   ecx
c001b48b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b48e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b492:	83 c4 20             	add    esp,0x20
c001b495:	99                   	cdq    
c001b496:	83 c4 10             	add    esp,0x10
c001b499:	5b                   	pop    ebx
c001b49a:	5e                   	pop    esi
c001b49b:	5f                   	pop    edi
c001b49c:	c3                   	ret    

c001b49d <Sys::wsbe(regs*)>:
c001b49d:	57                   	push   edi
c001b49e:	b9 0b 00 00 00       	mov    ecx,0xb
c001b4a3:	56                   	push   esi
c001b4a4:	be d8 bb 02 c0       	mov    esi,0xc002bbd8
c001b4a9:	53                   	push   ebx
c001b4aa:	83 ec 30             	sub    esp,0x30
c001b4ad:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b4b1:	fc                   	cld    
c001b4b2:	83 ec 0c             	sub    esp,0xc
c001b4b5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b4b7:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b4bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4c0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4c3:	8b b0 26 19 00 00    	mov    esi,DWORD PTR [eax+0x1926]
c001b4c9:	8b 06                	mov    eax,DWORD PTR [esi]
c001b4cb:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b4ce:	57                   	push   edi
c001b4cf:	e8 c0 52 fe ff       	call   c0000794 <strlen>
c001b4d4:	5a                   	pop    edx
c001b4d5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b4d9:	52                   	push   edx
c001b4da:	31 d2                	xor    edx,edx
c001b4dc:	57                   	push   edi
c001b4dd:	52                   	push   edx
c001b4de:	50                   	push   eax
c001b4df:	56                   	push   esi
c001b4e0:	ff d3                	call   ebx
c001b4e2:	83 c4 14             	add    esp,0x14
c001b4e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b4e9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b4ec:	e8 9f 31 00 00       	call   c001e690 <terminateTask(int)>
c001b4f1:	83 c4 40             	add    esp,0x40
c001b4f4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b4f9:	5b                   	pop    ebx
c001b4fa:	31 d2                	xor    edx,edx
c001b4fc:	5e                   	pop    esi
c001b4fd:	5f                   	pop    edi
c001b4fe:	c3                   	ret    

c001b4ff <Sys::yield(regs*)>:
c001b4ff:	57                   	push   edi
c001b500:	56                   	push   esi
c001b501:	53                   	push   ebx
c001b502:	e8 46 27 00 00       	call   c001dc4d <lockScheduler()>
c001b507:	e8 7c 2a 00 00       	call   c001df88 <schedule()>
c001b50c:	e8 3e 27 00 00       	call   c001dc4f <unlockScheduler()>
c001b511:	8b 35 90 e8 02 c0    	mov    esi,DWORD PTR ds:0xc002e890
c001b517:	8b 3d 94 e8 02 c0    	mov    edi,DWORD PTR ds:0xc002e894
c001b51d:	89 f0                	mov    eax,esi
c001b51f:	89 fb                	mov    ebx,edi
c001b521:	89 f1                	mov    ecx,esi
c001b523:	c1 e0 07             	shl    eax,0x7
c001b526:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b52a:	25 80 30 0f 00       	and    eax,0xf3080
c001b52f:	c1 eb 17             	shr    ebx,0x17
c001b532:	31 c8                	xor    eax,ecx
c001b534:	89 da                	mov    edx,ebx
c001b536:	5b                   	pop    ebx
c001b537:	5e                   	pop    esi
c001b538:	5f                   	pop    edi
c001b539:	c3                   	ret    

c001b53a <sysCallSeekDir(regs*)>:
c001b53a:	31 c0                	xor    eax,eax
c001b53c:	31 d2                	xor    edx,edx
c001b53e:	c3                   	ret    

c001b53f <sysCallTellDir(regs*)>:
c001b53f:	31 c0                	xor    eax,eax
c001b541:	31 d2                	xor    edx,edx
c001b543:	c3                   	ret    

c001b544 <sysCallVerify(regs*)>:
c001b544:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b548:	31 d2                	xor    edx,edx
c001b54a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b54d:	c3                   	ret    

c001b54e <sysFormatDisk(regs*)>:
c001b54e:	56                   	push   esi
c001b54f:	53                   	push   ebx
c001b550:	53                   	push   ebx
c001b551:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b555:	8b 1d 90 e3 02 c0    	mov    ebx,DWORD PTR ds:0xc002e390
c001b55b:	eb 25                	jmp    c001b582 <sysFormatDisk(regs*)+0x34>
c001b55d:	83 ec 0c             	sub    esp,0xc
c001b560:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b563:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b565:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b568:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b56b:	50                   	push   eax
c001b56c:	ff 34 85 20 e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd17e0]
c001b573:	53                   	push   ebx
c001b574:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b577:	83 c4 20             	add    esp,0x20
c001b57a:	83 f8 08             	cmp    eax,0x8
c001b57d:	75 12                	jne    c001b591 <sysFormatDisk(regs*)+0x43>
c001b57f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b582:	85 db                	test   ebx,ebx
c001b584:	75 d7                	jne    c001b55d <sysFormatDisk(regs*)+0xf>
c001b586:	59                   	pop    ecx
c001b587:	b8 03 00 00 00       	mov    eax,0x3
c001b58c:	31 d2                	xor    edx,edx
c001b58e:	5b                   	pop    ebx
c001b58f:	5e                   	pop    esi
c001b590:	c3                   	ret    
c001b591:	85 c0                	test   eax,eax
c001b593:	74 1b                	je     c001b5b0 <sysFormatDisk(regs*)+0x62>
c001b595:	83 f8 09             	cmp    eax,0x9
c001b598:	74 0b                	je     c001b5a5 <sysFormatDisk(regs*)+0x57>
c001b59a:	59                   	pop    ecx
c001b59b:	b8 02 00 00 00       	mov    eax,0x2
c001b5a0:	31 d2                	xor    edx,edx
c001b5a2:	5b                   	pop    ebx
c001b5a3:	5e                   	pop    esi
c001b5a4:	c3                   	ret    
c001b5a5:	59                   	pop    ecx
c001b5a6:	b8 01 00 00 00       	mov    eax,0x1
c001b5ab:	31 d2                	xor    edx,edx
c001b5ad:	5b                   	pop    ebx
c001b5ae:	5e                   	pop    esi
c001b5af:	c3                   	ret    
c001b5b0:	59                   	pop    ecx
c001b5b1:	31 c0                	xor    eax,eax
c001b5b3:	31 d2                	xor    edx,edx
c001b5b5:	5b                   	pop    ebx
c001b5b6:	5e                   	pop    esi
c001b5b7:	c3                   	ret    

c001b5b8 <sysSetDiskVolumeLabel(regs*)>:
c001b5b8:	56                   	push   esi
c001b5b9:	53                   	push   ebx
c001b5ba:	53                   	push   ebx
c001b5bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b5bf:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b5c2:	83 f8 19             	cmp    eax,0x19
c001b5c5:	77 29                	ja     c001b5f0 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b5c7:	8b 0c 85 20 e8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd17e0]
c001b5ce:	85 c9                	test   ecx,ecx
c001b5d0:	74 1e                	je     c001b5f0 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b5d2:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b5d5:	85 d2                	test   edx,edx
c001b5d7:	74 17                	je     c001b5f0 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b5d9:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b5df:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b5e1:	52                   	push   edx
c001b5e2:	50                   	push   eax
c001b5e3:	51                   	push   ecx
c001b5e4:	53                   	push   ebx
c001b5e5:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b5e8:	83 c4 10             	add    esp,0x10
c001b5eb:	99                   	cdq    
c001b5ec:	59                   	pop    ecx
c001b5ed:	5b                   	pop    ebx
c001b5ee:	5e                   	pop    esi
c001b5ef:	c3                   	ret    
c001b5f0:	59                   	pop    ecx
c001b5f1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b5f6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5fb:	5b                   	pop    ebx
c001b5fc:	5e                   	pop    esi
c001b5fd:	c3                   	ret    

c001b5fe <sysGetDiskVolumeLabel(regs*)>:
c001b5fe:	57                   	push   edi
c001b5ff:	56                   	push   esi
c001b600:	53                   	push   ebx
c001b601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b605:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b608:	83 fa 19             	cmp    edx,0x19
c001b60b:	77 34                	ja     c001b641 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b60d:	8b 0c 95 20 e8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd17e0]
c001b614:	85 c9                	test   ecx,ecx
c001b616:	74 29                	je     c001b641 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b618:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b61b:	85 db                	test   ebx,ebx
c001b61d:	74 22                	je     c001b641 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b61f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b622:	85 c0                	test   eax,eax
c001b624:	74 1b                	je     c001b641 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b626:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b62c:	83 ec 0c             	sub    esp,0xc
c001b62f:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b631:	50                   	push   eax
c001b632:	53                   	push   ebx
c001b633:	52                   	push   edx
c001b634:	51                   	push   ecx
c001b635:	56                   	push   esi
c001b636:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b639:	83 c4 20             	add    esp,0x20
c001b63c:	99                   	cdq    
c001b63d:	5b                   	pop    ebx
c001b63e:	5e                   	pop    esi
c001b63f:	5f                   	pop    edi
c001b640:	c3                   	ret    
c001b641:	5b                   	pop    ebx
c001b642:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b647:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b64c:	5e                   	pop    esi
c001b64d:	5f                   	pop    edi
c001b64e:	c3                   	ret    

c001b64f <sysShutdown(regs*)>:
c001b64f:	83 ec 0c             	sub    esp,0xc
c001b652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b656:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b659:	85 c0                	test   eax,eax
c001b65b:	74 18                	je     c001b675 <sysShutdown(regs*)+0x26>
c001b65d:	83 f8 01             	cmp    eax,0x1
c001b660:	74 38                	je     c001b69a <sysShutdown(regs*)+0x4b>
c001b662:	83 f8 02             	cmp    eax,0x2
c001b665:	74 24                	je     c001b68b <sysShutdown(regs*)+0x3c>
c001b667:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b66c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b671:	83 c4 0c             	add    esp,0xc
c001b674:	c3                   	ret    
c001b675:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c001b67a:	8b 10                	mov    edx,DWORD PTR [eax]
c001b67c:	6a 00                	push   0x0
c001b67e:	6a 00                	push   0x0
c001b680:	6a 00                	push   0x0
c001b682:	50                   	push   eax
c001b683:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b686:	83 c4 10             	add    esp,0x10
c001b689:	eb dc                	jmp    c001b667 <sysShutdown(regs*)+0x18>
c001b68b:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c001b690:	8b 10                	mov    edx,DWORD PTR [eax]
c001b692:	6a 00                	push   0x0
c001b694:	6a 00                	push   0x0
c001b696:	6a 01                	push   0x1
c001b698:	eb e8                	jmp    c001b682 <sysShutdown(regs*)+0x33>
c001b69a:	a1 c0 08 03 c0       	mov    eax,ds:0xc00308c0
c001b69f:	85 c0                	test   eax,eax
c001b6a1:	74 02                	je     c001b6a5 <sysShutdown(regs*)+0x56>
c001b6a3:	ff d0                	call   eax
c001b6a5:	31 c0                	xor    eax,eax
c001b6a7:	31 d2                	xor    edx,edx
c001b6a9:	83 c4 0c             	add    esp,0xc
c001b6ac:	c3                   	ret    

c001b6ad <sysCallRealpath(regs*)>:
c001b6ad:	83 ec 0c             	sub    esp,0xc
c001b6b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6b4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b6b7:	85 d2                	test   edx,edx
c001b6b9:	74 07                	je     c001b6c2 <sysCallRealpath(regs*)+0x15>
c001b6bb:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b6be:	85 c0                	test   eax,eax
c001b6c0:	75 0b                	jne    c001b6cd <sysCallRealpath(regs*)+0x20>
c001b6c2:	b8 01 00 00 00       	mov    eax,0x1
c001b6c7:	31 d2                	xor    edx,edx
c001b6c9:	83 c4 0c             	add    esp,0xc
c001b6cc:	c3                   	ret    
c001b6cd:	51                   	push   ecx
c001b6ce:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b6d4:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b6d7:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b6dd:	51                   	push   ecx
c001b6de:	52                   	push   edx
c001b6df:	50                   	push   eax
c001b6e0:	e8 41 7a ff ff       	call   c0013126 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b6e5:	83 c4 10             	add    esp,0x10
c001b6e8:	31 c0                	xor    eax,eax
c001b6ea:	31 d2                	xor    edx,edx
c001b6ec:	83 c4 0c             	add    esp,0xc
c001b6ef:	c3                   	ret    

c001b6f0 <sysCallGetArgc(regs*)>:
c001b6f0:	83 ec 14             	sub    esp,0x14
c001b6f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6f8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6fb:	ff b0 36 19 00 00    	push   DWORD PTR [eax+0x1936]
c001b701:	68 04 bc 02 c0       	push   0xc002bc04
c001b706:	e8 6d 76 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001b70b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b710:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b713:	8b 80 36 19 00 00    	mov    eax,DWORD PTR [eax+0x1936]
c001b719:	83 c4 1c             	add    esp,0x1c
c001b71c:	99                   	cdq    
c001b71d:	c3                   	ret    

c001b71e <sysCallReadDir(regs*)>:
c001b71e:	53                   	push   ebx
c001b71f:	83 ec 18             	sub    esp,0x18
c001b722:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b726:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b729:	83 f8 02             	cmp    eax,0x2
c001b72c:	76 53                	jbe    c001b781 <sysCallReadDir(regs*)+0x63>
c001b72e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b731:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b737:	77 4f                	ja     c001b788 <sysCallReadDir(regs*)+0x6a>
c001b739:	83 ec 0c             	sub    esp,0xc
c001b73c:	50                   	push   eax
c001b73d:	e8 a7 62 ff ff       	call   c00119e9 <getFromFileDescriptor(int)>
c001b742:	83 c4 10             	add    esp,0x10
c001b745:	85 c0                	test   eax,eax
c001b747:	74 50                	je     c001b799 <sysCallReadDir(regs*)+0x7b>
c001b749:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b751:	83 ec 0c             	sub    esp,0xc
c001b754:	8b 10                	mov    edx,DWORD PTR [eax]
c001b756:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b75a:	51                   	push   ecx
c001b75b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b75e:	6a 00                	push   0x0
c001b760:	68 10 01 00 00       	push   0x110
c001b765:	50                   	push   eax
c001b766:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b769:	83 c4 20             	add    esp,0x20
c001b76c:	85 c0                	test   eax,eax
c001b76e:	74 38                	je     c001b7a8 <sysCallReadDir(regs*)+0x8a>
c001b770:	83 f8 07             	cmp    eax,0x7
c001b773:	74 0c                	je     c001b781 <sysCallReadDir(regs*)+0x63>
c001b775:	b8 02 00 00 00       	mov    eax,0x2
c001b77a:	31 d2                	xor    edx,edx
c001b77c:	83 c4 18             	add    esp,0x18
c001b77f:	5b                   	pop    ebx
c001b780:	c3                   	ret    
c001b781:	b8 01 00 00 00       	mov    eax,0x1
c001b786:	eb f2                	jmp    c001b77a <sysCallReadDir(regs*)+0x5c>
c001b788:	83 ec 08             	sub    esp,0x8
c001b78b:	52                   	push   edx
c001b78c:	68 1c bd 02 c0       	push   0xc002bd1c
c001b791:	e8 e2 75 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001b796:	83 c4 10             	add    esp,0x10
c001b799:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b79e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7a3:	83 c4 18             	add    esp,0x18
c001b7a6:	5b                   	pop    ebx
c001b7a7:	c3                   	ret    
c001b7a8:	31 c0                	xor    eax,eax
c001b7aa:	eb ce                	jmp    c001b77a <sysCallReadDir(regs*)+0x5c>

c001b7ac <sysCallIsATTY(regs*)>:
c001b7ac:	83 ec 0c             	sub    esp,0xc
c001b7af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7b3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b7b6:	83 f8 02             	cmp    eax,0x2
c001b7b9:	76 07                	jbe    c001b7c2 <sysCallIsATTY(regs*)+0x16>
c001b7bb:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b7c0:	75 26                	jne    c001b7e8 <sysCallIsATTY(regs*)+0x3c>
c001b7c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7c7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b7ca:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001b7d0:	85 c0                	test   eax,eax
c001b7d2:	74 24                	je     c001b7f8 <sysCallIsATTY(regs*)+0x4c>
c001b7d4:	83 ec 0c             	sub    esp,0xc
c001b7d7:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7d9:	50                   	push   eax
c001b7da:	ff 12                	call   DWORD PTR [edx]
c001b7dc:	31 d2                	xor    edx,edx
c001b7de:	0f b6 c0             	movzx  eax,al
c001b7e1:	83 c4 10             	add    esp,0x10
c001b7e4:	83 c4 0c             	add    esp,0xc
c001b7e7:	c3                   	ret    
c001b7e8:	83 ec 0c             	sub    esp,0xc
c001b7eb:	50                   	push   eax
c001b7ec:	e8 f8 61 ff ff       	call   c00119e9 <getFromFileDescriptor(int)>
c001b7f1:	83 c4 10             	add    esp,0x10
c001b7f4:	85 c0                	test   eax,eax
c001b7f6:	75 dc                	jne    c001b7d4 <sysCallIsATTY(regs*)+0x28>
c001b7f8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b7fd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b802:	83 c4 0c             	add    esp,0xc
c001b805:	c3                   	ret    

c001b806 <sysCallSeek(regs*)>:
c001b806:	53                   	push   ebx
c001b807:	83 ec 08             	sub    esp,0x8
c001b80a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b80e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b811:	83 f8 02             	cmp    eax,0x2
c001b814:	76 4a                	jbe    c001b860 <sysCallSeek(regs*)+0x5a>
c001b816:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b81b:	77 32                	ja     c001b84f <sysCallSeek(regs*)+0x49>
c001b81d:	83 ec 0c             	sub    esp,0xc
c001b820:	50                   	push   eax
c001b821:	e8 c3 61 ff ff       	call   c00119e9 <getFromFileDescriptor(int)>
c001b826:	83 c4 0c             	add    esp,0xc
c001b829:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b82c:	31 db                	xor    ebx,ebx
c001b82e:	53                   	push   ebx
c001b82f:	51                   	push   ecx
c001b830:	50                   	push   eax
c001b831:	e8 bc 7b ff ff       	call   c00133f2 <File::seek(unsigned long long)>
c001b836:	83 c4 10             	add    esp,0x10
c001b839:	85 c0                	test   eax,eax
c001b83b:	0f 95 c0             	setne  al
c001b83e:	31 d2                	xor    edx,edx
c001b840:	0f b6 c0             	movzx  eax,al
c001b843:	f7 d8                	neg    eax
c001b845:	83 d2 00             	adc    edx,0x0
c001b848:	83 c4 08             	add    esp,0x8
c001b84b:	f7 da                	neg    edx
c001b84d:	5b                   	pop    ebx
c001b84e:	c3                   	ret    
c001b84f:	83 ec 08             	sub    esp,0x8
c001b852:	50                   	push   eax
c001b853:	68 0f bc 02 c0       	push   0xc002bc0f
c001b858:	e8 1b 75 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001b85d:	83 c4 10             	add    esp,0x10
c001b860:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b865:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b86a:	83 c4 08             	add    esp,0x8
c001b86d:	5b                   	pop    ebx
c001b86e:	c3                   	ret    

c001b86f <sysCallTell(regs*)>:
c001b86f:	53                   	push   ebx
c001b870:	83 ec 08             	sub    esp,0x8
c001b873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b877:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b87a:	83 f8 02             	cmp    eax,0x2
c001b87d:	76 5e                	jbe    c001b8dd <sysCallTell(regs*)+0x6e>
c001b87f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b884:	77 2d                	ja     c001b8b3 <sysCallTell(regs*)+0x44>
c001b886:	83 ec 0c             	sub    esp,0xc
c001b889:	50                   	push   eax
c001b88a:	e8 5a 61 ff ff       	call   c00119e9 <getFromFileDescriptor(int)>
c001b88f:	5a                   	pop    edx
c001b890:	59                   	pop    ecx
c001b891:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b894:	50                   	push   eax
c001b895:	e8 ae 7b ff ff       	call   c0013448 <File::tell(unsigned long long*)>
c001b89a:	83 c4 10             	add    esp,0x10
c001b89d:	85 c0                	test   eax,eax
c001b89f:	0f 95 c0             	setne  al
c001b8a2:	31 d2                	xor    edx,edx
c001b8a4:	0f b6 c0             	movzx  eax,al
c001b8a7:	f7 d8                	neg    eax
c001b8a9:	83 d2 00             	adc    edx,0x0
c001b8ac:	83 c4 08             	add    esp,0x8
c001b8af:	f7 da                	neg    edx
c001b8b1:	5b                   	pop    ebx
c001b8b2:	c3                   	ret    
c001b8b3:	83 ec 08             	sub    esp,0x8
c001b8b6:	50                   	push   eax
c001b8b7:	68 29 bc 02 c0       	push   0xc002bc29
c001b8bc:	e8 b7 74 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001b8c1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b8c4:	83 c4 10             	add    esp,0x10
c001b8c7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b8cd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b8d4:	31 d2                	xor    edx,edx
c001b8d6:	31 c0                	xor    eax,eax
c001b8d8:	83 c4 08             	add    esp,0x8
c001b8db:	5b                   	pop    ebx
c001b8dc:	c3                   	ret    
c001b8dd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8e2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8e7:	83 c4 08             	add    esp,0x8
c001b8ea:	5b                   	pop    ebx
c001b8eb:	c3                   	ret    

c001b8ec <sysCallSize(regs*)>:
c001b8ec:	53                   	push   ebx
c001b8ed:	83 ec 18             	sub    esp,0x18
c001b8f0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b8f4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b8f7:	83 f8 02             	cmp    eax,0x2
c001b8fa:	76 64                	jbe    c001b960 <sysCallSize(regs*)+0x74>
c001b8fc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b901:	77 33                	ja     c001b936 <sysCallSize(regs*)+0x4a>
c001b903:	83 ec 0c             	sub    esp,0xc
c001b906:	50                   	push   eax
c001b907:	e8 dd 60 ff ff       	call   c00119e9 <getFromFileDescriptor(int)>
c001b90c:	83 c4 0c             	add    esp,0xc
c001b90f:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b913:	52                   	push   edx
c001b914:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b917:	50                   	push   eax
c001b918:	e8 c3 7c ff ff       	call   c00135e0 <File::stat(unsigned long long*, bool*)>
c001b91d:	83 c4 10             	add    esp,0x10
c001b920:	85 c0                	test   eax,eax
c001b922:	0f 95 c0             	setne  al
c001b925:	31 d2                	xor    edx,edx
c001b927:	0f b6 c0             	movzx  eax,al
c001b92a:	f7 d8                	neg    eax
c001b92c:	83 d2 00             	adc    edx,0x0
c001b92f:	83 c4 18             	add    esp,0x18
c001b932:	f7 da                	neg    edx
c001b934:	5b                   	pop    ebx
c001b935:	c3                   	ret    
c001b936:	83 ec 08             	sub    esp,0x8
c001b939:	50                   	push   eax
c001b93a:	68 43 bc 02 c0       	push   0xc002bc43
c001b93f:	e8 34 74 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001b944:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b947:	83 c4 10             	add    esp,0x10
c001b94a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b950:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b957:	31 d2                	xor    edx,edx
c001b959:	31 c0                	xor    eax,eax
c001b95b:	83 c4 18             	add    esp,0x18
c001b95e:	5b                   	pop    ebx
c001b95f:	c3                   	ret    
c001b960:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b965:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b96a:	83 c4 18             	add    esp,0x18
c001b96d:	5b                   	pop    ebx
c001b96e:	c3                   	ret    

c001b96f <sysCallSizeFromFilename(regs*)>:
c001b96f:	57                   	push   edi
c001b970:	56                   	push   esi
c001b971:	53                   	push   ebx
c001b972:	83 ec 20             	sub    esp,0x20
c001b975:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b979:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001b97c:	83 fb 02             	cmp    ebx,0x2
c001b97f:	0f 86 99 00 00 00    	jbe    c001ba1e <sysCallSizeFromFilename(regs*)+0xaf>
c001b985:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b98b:	77 65                	ja     c001b9f2 <sysCallSizeFromFilename(regs*)+0x83>
c001b98d:	83 ec 0c             	sub    esp,0xc
c001b990:	68 14 01 00 00       	push   0x114
c001b995:	e8 a9 3e ff ff       	call   c000f843 <malloc>
c001b99a:	83 c4 0c             	add    esp,0xc
c001b99d:	89 c6                	mov    esi,eax
c001b99f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9a4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9a7:	53                   	push   ebx
c001b9a8:	56                   	push   esi
c001b9a9:	e8 22 79 ff ff       	call   c00132d0 <File::File(char const*, Process*)>
c001b9ae:	83 c4 0c             	add    esp,0xc
c001b9b1:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b9b5:	50                   	push   eax
c001b9b6:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001b9b9:	56                   	push   esi
c001b9ba:	e8 21 7c ff ff       	call   c00135e0 <File::stat(unsigned long long*, bool*)>
c001b9bf:	83 c4 10             	add    esp,0x10
c001b9c2:	85 f6                	test   esi,esi
c001b9c4:	74 14                	je     c001b9da <sysCallSizeFromFilename(regs*)+0x6b>
c001b9c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9ca:	8b 16                	mov    edx,DWORD PTR [esi]
c001b9cc:	83 ec 0c             	sub    esp,0xc
c001b9cf:	56                   	push   esi
c001b9d0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b9d3:	83 c4 10             	add    esp,0x10
c001b9d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9da:	85 c0                	test   eax,eax
c001b9dc:	0f 95 c0             	setne  al
c001b9df:	31 d2                	xor    edx,edx
c001b9e1:	0f b6 c0             	movzx  eax,al
c001b9e4:	f7 d8                	neg    eax
c001b9e6:	83 d2 00             	adc    edx,0x0
c001b9e9:	83 c4 20             	add    esp,0x20
c001b9ec:	f7 da                	neg    edx
c001b9ee:	5b                   	pop    ebx
c001b9ef:	5e                   	pop    esi
c001b9f0:	5f                   	pop    edi
c001b9f1:	c3                   	ret    
c001b9f2:	83 ec 08             	sub    esp,0x8
c001b9f5:	53                   	push   ebx
c001b9f6:	68 43 bc 02 c0       	push   0xc002bc43
c001b9fb:	e8 78 73 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001ba00:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001ba03:	83 c4 10             	add    esp,0x10
c001ba06:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba13:	31 d2                	xor    edx,edx
c001ba15:	83 c4 20             	add    esp,0x20
c001ba18:	31 c0                	xor    eax,eax
c001ba1a:	5b                   	pop    ebx
c001ba1b:	5e                   	pop    esi
c001ba1c:	5f                   	pop    edi
c001ba1d:	c3                   	ret    
c001ba1e:	83 c4 20             	add    esp,0x20
c001ba21:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba26:	5b                   	pop    ebx
c001ba27:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba2c:	5e                   	pop    esi
c001ba2d:	5f                   	pop    edi
c001ba2e:	c3                   	ret    

c001ba2f <sysCallClose(regs*)>:
c001ba2f:	53                   	push   ebx
c001ba30:	83 ec 08             	sub    esp,0x8
c001ba33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba37:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba3a:	83 f8 02             	cmp    eax,0x2
c001ba3d:	76 50                	jbe    c001ba8f <sysCallClose(regs*)+0x60>
c001ba3f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ba44:	74 58                	je     c001ba9e <sysCallClose(regs*)+0x6f>
c001ba46:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba4b:	74 60                	je     c001baad <sysCallClose(regs*)+0x7e>
c001ba4d:	77 2f                	ja     c001ba7e <sysCallClose(regs*)+0x4f>
c001ba4f:	83 ec 0c             	sub    esp,0xc
c001ba52:	50                   	push   eax
c001ba53:	e8 91 5f ff ff       	call   c00119e9 <getFromFileDescriptor(int)>
c001ba58:	89 c3                	mov    ebx,eax
c001ba5a:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba5d:	e8 30 79 ff ff       	call   c0013392 <File::close()>
c001ba62:	83 c4 10             	add    esp,0x10
c001ba65:	85 db                	test   ebx,ebx
c001ba67:	74 0c                	je     c001ba75 <sysCallClose(regs*)+0x46>
c001ba69:	83 ec 0c             	sub    esp,0xc
c001ba6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ba6e:	53                   	push   ebx
c001ba6f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ba72:	83 c4 10             	add    esp,0x10
c001ba75:	31 c0                	xor    eax,eax
c001ba77:	31 d2                	xor    edx,edx
c001ba79:	83 c4 08             	add    esp,0x8
c001ba7c:	5b                   	pop    ebx
c001ba7d:	c3                   	ret    
c001ba7e:	83 ec 08             	sub    esp,0x8
c001ba81:	50                   	push   eax
c001ba82:	68 40 bd 02 c0       	push   0xc002bd40
c001ba87:	e8 ec 72 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001ba8c:	83 c4 10             	add    esp,0x10
c001ba8f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba94:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba99:	83 c4 08             	add    esp,0x8
c001ba9c:	5b                   	pop    ebx
c001ba9d:	c3                   	ret    
c001ba9e:	83 ec 0c             	sub    esp,0xc
c001baa1:	68 5e bc 02 c0       	push   0xc002bc5e
c001baa6:	e8 cd 72 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001baab:	eb c5                	jmp    c001ba72 <sysCallClose(regs*)+0x43>
c001baad:	83 ec 0c             	sub    esp,0xc
c001bab0:	68 6c bc 02 c0       	push   0xc002bc6c
c001bab5:	eb ef                	jmp    c001baa6 <sysCallClose(regs*)+0x77>

c001bab7 <sysCallOpenDir(regs*)>:
c001bab7:	56                   	push   esi
c001bab8:	53                   	push   ebx
c001bab9:	53                   	push   ebx
c001baba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001babe:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bac1:	85 f6                	test   esi,esi
c001bac3:	74 59                	je     c001bb1e <sysCallOpenDir(regs*)+0x67>
c001bac5:	83 ec 0c             	sub    esp,0xc
c001bac8:	68 14 01 00 00       	push   0x114
c001bacd:	e8 71 3d ff ff       	call   c000f843 <malloc>
c001bad2:	83 c4 0c             	add    esp,0xc
c001bad5:	89 c6                	mov    esi,eax
c001bad7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001badc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001badf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bae2:	56                   	push   esi
c001bae3:	e8 94 7c ff ff       	call   c001377c <Directory::Directory(char const*, Process*)>
c001bae8:	83 c4 10             	add    esp,0x10
c001baeb:	85 f6                	test   esi,esi
c001baed:	74 2f                	je     c001bb1e <sysCallOpenDir(regs*)+0x67>
c001baef:	83 ec 0c             	sub    esp,0xc
c001baf2:	56                   	push   esi
c001baf3:	e8 e8 7c ff ff       	call   c00137e0 <Directory::open()>
c001baf8:	83 c4 10             	add    esp,0x10
c001bafb:	85 c0                	test   eax,eax
c001bafd:	75 1f                	jne    c001bb1e <sysCallOpenDir(regs*)+0x67>
c001baff:	83 ec 0c             	sub    esp,0xc
c001bb02:	56                   	push   esi
c001bb03:	e8 ec 5b ff ff       	call   c00116f4 <UnixFile::getFileDescriptor()>
c001bb08:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bb0b:	83 c4 10             	add    esp,0x10
c001bb0e:	89 02                	mov    DWORD PTR [edx],eax
c001bb10:	c1 f8 1f             	sar    eax,0x1f
c001bb13:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bb16:	31 c0                	xor    eax,eax
c001bb18:	59                   	pop    ecx
c001bb19:	31 d2                	xor    edx,edx
c001bb1b:	5b                   	pop    ebx
c001bb1c:	5e                   	pop    esi
c001bb1d:	c3                   	ret    
c001bb1e:	59                   	pop    ecx
c001bb1f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb24:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb29:	5b                   	pop    ebx
c001bb2a:	5e                   	pop    esi
c001bb2b:	c3                   	ret    

c001bb2c <sysCallCloseDir(regs*)>:
c001bb2c:	53                   	push   ebx
c001bb2d:	83 ec 08             	sub    esp,0x8
c001bb30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb34:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb37:	83 f8 02             	cmp    eax,0x2
c001bb3a:	76 47                	jbe    c001bb83 <sysCallCloseDir(regs*)+0x57>
c001bb3c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb41:	77 2f                	ja     c001bb72 <sysCallCloseDir(regs*)+0x46>
c001bb43:	83 ec 0c             	sub    esp,0xc
c001bb46:	50                   	push   eax
c001bb47:	e8 9d 5e ff ff       	call   c00119e9 <getFromFileDescriptor(int)>
c001bb4c:	89 c3                	mov    ebx,eax
c001bb4e:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb51:	e8 e6 7c ff ff       	call   c001383c <Directory::close()>
c001bb56:	83 c4 10             	add    esp,0x10
c001bb59:	85 db                	test   ebx,ebx
c001bb5b:	74 0c                	je     c001bb69 <sysCallCloseDir(regs*)+0x3d>
c001bb5d:	83 ec 0c             	sub    esp,0xc
c001bb60:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb62:	53                   	push   ebx
c001bb63:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bb66:	83 c4 10             	add    esp,0x10
c001bb69:	31 c0                	xor    eax,eax
c001bb6b:	31 d2                	xor    edx,edx
c001bb6d:	83 c4 08             	add    esp,0x8
c001bb70:	5b                   	pop    ebx
c001bb71:	c3                   	ret    
c001bb72:	83 ec 08             	sub    esp,0x8
c001bb75:	50                   	push   eax
c001bb76:	68 68 bd 02 c0       	push   0xc002bd68
c001bb7b:	e8 f8 71 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001bb80:	83 c4 10             	add    esp,0x10
c001bb83:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb88:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb8d:	83 c4 08             	add    esp,0x8
c001bb90:	5b                   	pop    ebx
c001bb91:	c3                   	ret    

c001bb92 <sysCallMakeDir(regs*)>:
c001bb92:	56                   	push   esi
c001bb93:	53                   	push   ebx
c001bb94:	83 ec 10             	sub    esp,0x10
c001bb97:	68 14 01 00 00       	push   0x114
c001bb9c:	e8 a2 3c ff ff       	call   c000f843 <malloc>
c001bba1:	83 c4 0c             	add    esp,0xc
c001bba4:	89 c3                	mov    ebx,eax
c001bba6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbab:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bbb2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bbb5:	53                   	push   ebx
c001bbb6:	e8 c1 7b ff ff       	call   c001377c <Directory::Directory(char const*, Process*)>
c001bbbb:	83 c4 10             	add    esp,0x10
c001bbbe:	85 db                	test   ebx,ebx
c001bbc0:	74 32                	je     c001bbf4 <sysCallMakeDir(regs*)+0x62>
c001bbc2:	83 ec 0c             	sub    esp,0xc
c001bbc5:	53                   	push   ebx
c001bbc6:	e8 f5 7d ff ff       	call   c00139c0 <Directory::create()>
c001bbcb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbce:	89 c6                	mov    esi,eax
c001bbd0:	e8 67 7c ff ff       	call   c001383c <Directory::close()>
c001bbd5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bbd7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbda:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bbdd:	83 c4 10             	add    esp,0x10
c001bbe0:	31 c0                	xor    eax,eax
c001bbe2:	59                   	pop    ecx
c001bbe3:	85 f6                	test   esi,esi
c001bbe5:	5b                   	pop    ebx
c001bbe6:	0f 95 c0             	setne  al
c001bbe9:	5e                   	pop    esi
c001bbea:	31 d2                	xor    edx,edx
c001bbec:	f7 d8                	neg    eax
c001bbee:	83 d2 00             	adc    edx,0x0
c001bbf1:	f7 da                	neg    edx
c001bbf3:	c3                   	ret    
c001bbf4:	59                   	pop    ecx
c001bbf5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbfa:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbff:	5b                   	pop    ebx
c001bc00:	5e                   	pop    esi
c001bc01:	c3                   	ret    

c001bc02 <sysCallWait(regs*)>:
c001bc02:	83 ec 10             	sub    esp,0x10
c001bc05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bc09:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bc0c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc0f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bc12:	e8 ec 24 00 00       	call   c001e103 <waitTask(int, int*, int)>
c001bc17:	83 c4 1c             	add    esp,0x1c
c001bc1a:	99                   	cdq    
c001bc1b:	c3                   	ret    

c001bc1c <sysCallNotImpl(regs*)>:
c001bc1c:	83 ec 18             	sub    esp,0x18
c001bc1f:	68 7a bc 02 c0       	push   0xc002bc7a
c001bc24:	e8 2a e8 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c001bc29:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc2e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc33:	83 c4 1c             	add    esp,0x1c
c001bc36:	c3                   	ret    

c001bc37 <sysPanic(regs*)>:
c001bc37:	83 ec 18             	sub    esp,0x18
c001bc3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc3e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc41:	e8 0d e8 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c001bc46:	c7 04 24 94 bc 02 c0 	mov    DWORD PTR [esp],0xc002bc94
c001bc4d:	e8 01 e8 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c001bc52:	b8 01 00 00 00       	mov    eax,0x1
c001bc57:	31 d2                	xor    edx,edx
c001bc59:	83 c4 1c             	add    esp,0x1c
c001bc5c:	c3                   	ret    

c001bc5d <sysCallRmdir(regs*)>:
c001bc5d:	56                   	push   esi
c001bc5e:	53                   	push   ebx
c001bc5f:	83 ec 20             	sub    esp,0x20
c001bc62:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bc66:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bc69:	68 14 01 00 00       	push   0x114
c001bc6e:	e8 d0 3b ff ff       	call   c000f843 <malloc>
c001bc73:	83 c4 0c             	add    esp,0xc
c001bc76:	89 c3                	mov    ebx,eax
c001bc78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc7d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc80:	56                   	push   esi
c001bc81:	53                   	push   ebx
c001bc82:	e8 49 76 ff ff       	call   c00132d0 <File::File(char const*, Process*)>
c001bc87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc8a:	e8 1d 78 ff ff       	call   c00134ac <File::unlink()>
c001bc8f:	83 c4 10             	add    esp,0x10
c001bc92:	85 db                	test   ebx,ebx
c001bc94:	74 14                	je     c001bcaa <sysCallRmdir(regs*)+0x4d>
c001bc96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc9a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bc9c:	83 ec 0c             	sub    esp,0xc
c001bc9f:	53                   	push   ebx
c001bca0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bca3:	83 c4 10             	add    esp,0x10
c001bca6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bcaa:	85 c0                	test   eax,eax
c001bcac:	0f 95 c0             	setne  al
c001bcaf:	31 d2                	xor    edx,edx
c001bcb1:	0f b6 c0             	movzx  eax,al
c001bcb4:	f7 d8                	neg    eax
c001bcb6:	83 d2 00             	adc    edx,0x0
c001bcb9:	83 c4 14             	add    esp,0x14
c001bcbc:	f7 da                	neg    edx
c001bcbe:	5b                   	pop    ebx
c001bcbf:	5e                   	pop    esi
c001bcc0:	c3                   	ret    

c001bcc1 <sysCallUnlink(regs*)>:
c001bcc1:	56                   	push   esi
c001bcc2:	53                   	push   ebx
c001bcc3:	83 ec 20             	sub    esp,0x20
c001bcc6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bcca:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bccd:	68 14 01 00 00       	push   0x114
c001bcd2:	e8 6c 3b ff ff       	call   c000f843 <malloc>
c001bcd7:	83 c4 0c             	add    esp,0xc
c001bcda:	89 c3                	mov    ebx,eax
c001bcdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bce1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bce4:	56                   	push   esi
c001bce5:	53                   	push   ebx
c001bce6:	e8 e5 75 ff ff       	call   c00132d0 <File::File(char const*, Process*)>
c001bceb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bcee:	e8 b9 77 ff ff       	call   c00134ac <File::unlink()>
c001bcf3:	83 c4 10             	add    esp,0x10
c001bcf6:	85 db                	test   ebx,ebx
c001bcf8:	74 14                	je     c001bd0e <sysCallUnlink(regs*)+0x4d>
c001bcfa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bcfe:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd00:	83 ec 0c             	sub    esp,0xc
c001bd03:	53                   	push   ebx
c001bd04:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bd07:	83 c4 10             	add    esp,0x10
c001bd0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd0e:	85 c0                	test   eax,eax
c001bd10:	0f 95 c0             	setne  al
c001bd13:	31 d2                	xor    edx,edx
c001bd15:	0f b6 c0             	movzx  eax,al
c001bd18:	f7 d8                	neg    eax
c001bd1a:	83 d2 00             	adc    edx,0x0
c001bd1d:	83 c4 14             	add    esp,0x14
c001bd20:	f7 da                	neg    edx
c001bd22:	5b                   	pop    ebx
c001bd23:	5e                   	pop    esi
c001bd24:	c3                   	ret    

c001bd25 <sysCallGetArgv(regs*)>:
c001bd25:	83 ec 0c             	sub    esp,0xc
c001bd28:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bd2c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bd2f:	85 c0                	test   eax,eax
c001bd31:	78 2b                	js     c001bd5e <sysCallGetArgv(regs*)+0x39>
c001bd33:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bd39:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bd3c:	3b 81 36 19 00 00    	cmp    eax,DWORD PTR [ecx+0x1936]
c001bd42:	7d 1a                	jge    c001bd5e <sysCallGetArgv(regs*)+0x39>
c001bd44:	8b 84 81 3a 19 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x193a]
c001bd4b:	85 c0                	test   eax,eax
c001bd4d:	74 17                	je     c001bd66 <sysCallGetArgv(regs*)+0x41>
c001bd4f:	83 ec 08             	sub    esp,0x8
c001bd52:	50                   	push   eax
c001bd53:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bd56:	e8 d9 4a fe ff       	call   c0000834 <strcpy>
c001bd5b:	83 c4 10             	add    esp,0x10
c001bd5e:	31 c0                	xor    eax,eax
c001bd60:	31 d2                	xor    edx,edx
c001bd62:	83 c4 0c             	add    esp,0xc
c001bd65:	c3                   	ret    
c001bd66:	b8 01 00 00 00       	mov    eax,0x1
c001bd6b:	31 d2                	xor    edx,edx
c001bd6d:	83 c4 0c             	add    esp,0xc
c001bd70:	c3                   	ret    

c001bd71 <sysCallTTYName(regs*)>:
c001bd71:	56                   	push   esi
c001bd72:	53                   	push   ebx
c001bd73:	53                   	push   ebx
c001bd74:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bd78:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bd7b:	85 c0                	test   eax,eax
c001bd7d:	74 5f                	je     c001bdde <sysCallTTYName(regs*)+0x6d>
c001bd7f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bd82:	83 f8 02             	cmp    eax,0x2
c001bd85:	77 3e                	ja     c001bdc5 <sysCallTTYName(regs*)+0x54>
c001bd87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd8c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bd8f:	8b 98 26 19 00 00    	mov    ebx,DWORD PTR [eax+0x1926]
c001bd95:	85 db                	test   ebx,ebx
c001bd97:	74 45                	je     c001bdde <sysCallTTYName(regs*)+0x6d>
c001bd99:	83 ec 0c             	sub    esp,0xc
c001bd9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd9e:	53                   	push   ebx
c001bd9f:	ff 10                	call   DWORD PTR [eax]
c001bda1:	83 c4 10             	add    esp,0x10
c001bda4:	84 c0                	test   al,al
c001bda6:	74 41                	je     c001bde9 <sysCallTTYName(regs*)+0x78>
c001bda8:	83 ec 08             	sub    esp,0x8
c001bdab:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bdb1:	53                   	push   ebx
c001bdb2:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bdb5:	e8 7a 4a fe ff       	call   c0000834 <strcpy>
c001bdba:	83 c4 10             	add    esp,0x10
c001bdbd:	31 c0                	xor    eax,eax
c001bdbf:	59                   	pop    ecx
c001bdc0:	31 d2                	xor    edx,edx
c001bdc2:	5b                   	pop    ebx
c001bdc3:	5e                   	pop    esi
c001bdc4:	c3                   	ret    
c001bdc5:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bdca:	74 bb                	je     c001bd87 <sysCallTTYName(regs*)+0x16>
c001bdcc:	83 ec 0c             	sub    esp,0xc
c001bdcf:	50                   	push   eax
c001bdd0:	e8 14 5c ff ff       	call   c00119e9 <getFromFileDescriptor(int)>
c001bdd5:	83 c4 10             	add    esp,0x10
c001bdd8:	89 c3                	mov    ebx,eax
c001bdda:	85 db                	test   ebx,ebx
c001bddc:	75 bb                	jne    c001bd99 <sysCallTTYName(regs*)+0x28>
c001bdde:	59                   	pop    ecx
c001bddf:	b8 01 00 00 00       	mov    eax,0x1
c001bde4:	31 d2                	xor    edx,edx
c001bde6:	5b                   	pop    ebx
c001bde7:	5e                   	pop    esi
c001bde8:	c3                   	ret    
c001bde9:	59                   	pop    ecx
c001bdea:	b8 02 00 00 00       	mov    eax,0x2
c001bdef:	31 d2                	xor    edx,edx
c001bdf1:	5b                   	pop    ebx
c001bdf2:	5e                   	pop    esi
c001bdf3:	c3                   	ret    

c001bdf4 <sysCallUSleep(regs*)>:
c001bdf4:	83 ec 14             	sub    esp,0x14
c001bdf7:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bdfc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001be00:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001be07:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001be0a:	01 ca                	add    edx,ecx
c001be0c:	52                   	push   edx
c001be0d:	50                   	push   eax
c001be0e:	e8 89 23 00 00       	call   c001e19c <nanoSleep(unsigned long long)>
c001be13:	31 c0                	xor    eax,eax
c001be15:	31 d2                	xor    edx,edx
c001be17:	83 c4 1c             	add    esp,0x1c
c001be1a:	c3                   	ret    

c001be1b <sysCallSpawn(regs*)>:
c001be1b:	56                   	push   esi
c001be1c:	53                   	push   ebx
c001be1d:	53                   	push   ebx
c001be1e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be22:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001be25:	85 f6                	test   esi,esi
c001be27:	75 08                	jne    c001be31 <sysCallSpawn(regs*)+0x16>
c001be29:	59                   	pop    ecx
c001be2a:	31 c0                	xor    eax,eax
c001be2c:	31 d2                	xor    edx,edx
c001be2e:	5b                   	pop    ebx
c001be2f:	5e                   	pop    esi
c001be30:	c3                   	ret    
c001be31:	83 ec 0c             	sub    esp,0xc
c001be34:	68 3f 1b 00 00       	push   0x1b3f
c001be39:	e8 05 3a ff ff       	call   c000f843 <malloc>
c001be3e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001be41:	89 c6                	mov    esi,eax
c001be43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be48:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be4b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be4e:	56                   	push   esi
c001be4f:	e8 44 1a 00 00       	call   c001d898 <Process::Process(char const*, Process*, char**)>
c001be54:	83 c4 20             	add    esp,0x20
c001be57:	80 be 3e 1b 00 00 00 	cmp    BYTE PTR [esi+0x1b3e],0x0
c001be5e:	75 c9                	jne    c001be29 <sysCallSpawn(regs*)+0xe>
c001be60:	83 ec 0c             	sub    esp,0xc
c001be63:	56                   	push   esi
c001be64:	e8 f9 1f 00 00       	call   c001de62 <Process::createUserThread()>
c001be69:	8b 06                	mov    eax,DWORD PTR [esi]
c001be6b:	83 c4 10             	add    esp,0x10
c001be6e:	99                   	cdq    
c001be6f:	59                   	pop    ecx
c001be70:	5b                   	pop    ebx
c001be71:	5e                   	pop    esi
c001be72:	c3                   	ret    

c001be73 <sysCallGetEnv(regs*)>:
c001be73:	55                   	push   ebp
c001be74:	57                   	push   edi
c001be75:	56                   	push   esi
c001be76:	53                   	push   ebx
c001be77:	83 ec 28             	sub    esp,0x28
c001be7a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001be7e:	68 a3 bc 02 c0       	push   0xc002bca3
c001be83:	e8 f0 6e ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001be88:	5f                   	pop    edi
c001be89:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001be8c:	5d                   	pop    ebp
c001be8d:	53                   	push   ebx
c001be8e:	68 e9 bf 02 c0       	push   0xc002bfe9
c001be93:	e8 e0 6e ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001be98:	58                   	pop    eax
c001be99:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001be9c:	5a                   	pop    edx
c001be9d:	57                   	push   edi
c001be9e:	68 ac bc 02 c0       	push   0xc002bcac
c001bea3:	e8 d0 6e ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001bea8:	59                   	pop    ecx
c001bea9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001beae:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001beb1:	e8 b9 e4 ff ff       	call   c001a36f <Krnl::getProcessTotalEnvCount(Process*)>
c001beb6:	5a                   	pop    edx
c001beb7:	89 c5                	mov    ebp,eax
c001beb9:	59                   	pop    ecx
c001beba:	50                   	push   eax
c001bebb:	68 b6 bc 02 c0       	push   0xc002bcb6
c001bec0:	e8 b3 6e ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001bec5:	83 c4 10             	add    esp,0x10
c001bec8:	39 ef                	cmp    edi,ebp
c001beca:	7c 15                	jl     c001bee1 <sysCallGetEnv(regs*)+0x6e>
c001becc:	85 db                	test   ebx,ebx
c001bece:	75 0c                	jne    c001bedc <sysCallGetEnv(regs*)+0x69>
c001bed0:	83 c4 1c             	add    esp,0x1c
c001bed3:	31 c0                	xor    eax,eax
c001bed5:	5b                   	pop    ebx
c001bed6:	31 d2                	xor    edx,edx
c001bed8:	5e                   	pop    esi
c001bed9:	5f                   	pop    edi
c001beda:	5d                   	pop    ebp
c001bedb:	c3                   	ret    
c001bedc:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001bedf:	eb ef                	jmp    c001bed0 <sysCallGetEnv(regs*)+0x5d>
c001bee1:	83 ec 0c             	sub    esp,0xc
c001bee4:	68 c2 bc 02 c0       	push   0xc002bcc2
c001bee9:	e8 8a 6e ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001beee:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bef2:	83 c4 0c             	add    esp,0xc
c001bef5:	57                   	push   edi
c001bef6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001befc:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001beff:	50                   	push   eax
c001bf00:	e8 8a e4 ff ff       	call   c001a38f <Krnl::getProcessEnvPair(Process*, int)>
c001bf05:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001bf09:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bf0d:	68 68 c0 02 c0       	push   0xc002c068
c001bf12:	e8 61 6e ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001bf17:	83 c4 10             	add    esp,0x10
c001bf1a:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001bf1d:	85 f6                	test   esi,esi
c001bf1f:	75 47                	jne    c001bf68 <sysCallGetEnv(regs*)+0xf5>
c001bf21:	83 ec 0c             	sub    esp,0xc
c001bf24:	55                   	push   ebp
c001bf25:	e8 6a 48 fe ff       	call   c0000794 <strlen>
c001bf2a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bf2d:	89 c3                	mov    ebx,eax
c001bf2f:	e8 60 48 fe ff       	call   c0000794 <strlen>
c001bf34:	5a                   	pop    edx
c001bf35:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bf39:	59                   	pop    ecx
c001bf3a:	50                   	push   eax
c001bf3b:	68 c5 bc 02 c0       	push   0xc002bcc5
c001bf40:	e8 33 6e ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001bf45:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bf48:	e8 47 48 fe ff       	call   c0000794 <strlen>
c001bf4d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bf50:	89 c3                	mov    ebx,eax
c001bf52:	e8 3d 48 fe ff       	call   c0000794 <strlen>
c001bf57:	83 c4 10             	add    esp,0x10
c001bf5a:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bf5e:	83 c4 1c             	add    esp,0x1c
c001bf61:	31 d2                	xor    edx,edx
c001bf63:	5b                   	pop    ebx
c001bf64:	5e                   	pop    esi
c001bf65:	5f                   	pop    edi
c001bf66:	5d                   	pop    ebp
c001bf67:	c3                   	ret    
c001bf68:	83 ec 0c             	sub    esp,0xc
c001bf6b:	68 82 c0 02 c0       	push   0xc002c082
c001bf70:	e8 03 6e ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001bf75:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001bf78:	58                   	pop    eax
c001bf79:	5a                   	pop    edx
c001bf7a:	55                   	push   ebp
c001bf7b:	53                   	push   ebx
c001bf7c:	e8 b3 48 fe ff       	call   c0000834 <strcpy>
c001bf81:	59                   	pop    ecx
c001bf82:	5e                   	pop    esi
c001bf83:	68 cf bc 02 c0       	push   0xc002bccf
c001bf88:	53                   	push   ebx
c001bf89:	e8 e6 49 fe ff       	call   c0000974 <strcat>
c001bf8e:	5d                   	pop    ebp
c001bf8f:	58                   	pop    eax
c001bf90:	57                   	push   edi
c001bf91:	53                   	push   ebx
c001bf92:	e8 dd 49 fe ff       	call   c0000974 <strcat>
c001bf97:	c7 04 24 9c c0 02 c0 	mov    DWORD PTR [esp],0xc002c09c
c001bf9e:	e8 d5 6d ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001bfa3:	83 c4 10             	add    esp,0x10
c001bfa6:	e9 25 ff ff ff       	jmp    c001bed0 <sysCallGetEnv(regs*)+0x5d>

c001bfab <sysAppSettings(regs*)>:
c001bfab:	53                   	push   ebx
c001bfac:	83 ec 08             	sub    esp,0x8
c001bfaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfb3:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bfb6:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001bfbc:	25 e0 1f 00 00       	and    eax,0x1fe0
c001bfc1:	66 3d c0 09          	cmp    ax,0x9c0
c001bfc5:	75 2f                	jne    c001bff6 <sysAppSettings(regs*)+0x4b>
c001bfc7:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001bfcd:	83 e0 1f             	and    eax,0x1f
c001bfd0:	3c 01                	cmp    al,0x1
c001bfd2:	74 2e                	je     c001c002 <sysAppSettings(regs*)+0x57>
c001bfd4:	3c 07                	cmp    al,0x7
c001bfd6:	0f 84 bd 00 00 00    	je     c001c099 <sysAppSettings(regs*)+0xee>
c001bfdc:	84 c0                	test   al,al
c001bfde:	0f 84 dc 00 00 00    	je     c001c0c0 <sysAppSettings(regs*)+0x115>
c001bfe4:	3c 08                	cmp    al,0x8
c001bfe6:	74 6d                	je     c001c055 <sysAppSettings(regs*)+0xaa>
c001bfe8:	0f b6 c0             	movzx  eax,al
c001bfeb:	83 c4 08             	add    esp,0x8
c001bfee:	05 e8 03 00 00       	add    eax,0x3e8
c001bff3:	5b                   	pop    ebx
c001bff4:	99                   	cdq    
c001bff5:	c3                   	ret    
c001bff6:	b8 01 00 00 00       	mov    eax,0x1
c001bffb:	31 d2                	xor    edx,edx
c001bffd:	83 c4 08             	add    esp,0x8
c001c000:	5b                   	pop    ebx
c001c001:	c3                   	ret    
c001c002:	51                   	push   ecx
c001c003:	68 00 01 00 00       	push   0x100
c001c008:	6a 00                	push   0x0
c001c00a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c00f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c012:	83 c0 0c             	add    eax,0xc
c001c015:	50                   	push   eax
c001c016:	e8 5d 47 fe ff       	call   c0000778 <memset>
c001c01b:	83 c4 0c             	add    esp,0xc
c001c01e:	68 ff 00 00 00       	push   0xff
c001c023:	53                   	push   ebx
c001c024:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c029:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c02c:	83 c0 0c             	add    eax,0xc
c001c02f:	50                   	push   eax
c001c030:	e8 0f 47 fe ff       	call   c0000744 <memcpy>
c001c035:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c03a:	5b                   	pop    ebx
c001c03b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c03e:	5a                   	pop    edx
c001c03f:	8d 50 0c             	lea    edx,[eax+0xc]
c001c042:	52                   	push   edx
c001c043:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c049:	e8 16 4b ff ff       	call   c0010b64 <VgaText::setTitle(char*)>
c001c04e:	83 c4 10             	add    esp,0x10
c001c051:	31 c0                	xor    eax,eax
c001c053:	eb a6                	jmp    c001bffb <sysAppSettings(regs*)+0x50>
c001c055:	83 ec 08             	sub    esp,0x8
c001c058:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c05e:	83 e0 0f             	and    eax,0xf
c001c061:	50                   	push   eax
c001c062:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c067:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c06a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c070:	e8 df 4a ff ff       	call   c0010b54 <VgaText::setTitleColour(VgaColour)>
c001c075:	58                   	pop    eax
c001c076:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c07c:	5a                   	pop    edx
c001c07d:	c1 e8 04             	shr    eax,0x4
c001c080:	83 e0 0f             	and    eax,0xf
c001c083:	50                   	push   eax
c001c084:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c089:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c08c:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c092:	e8 ad 4a ff ff       	call   c0010b44 <VgaText::setTitleTextColour(VgaColour)>
c001c097:	eb b5                	jmp    c001c04e <sysAppSettings(regs*)+0xa3>
c001c099:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c09e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0a1:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001c0a7:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c0ad:	c0 e8 06             	shr    al,0x6
c001c0b0:	83 e0 01             	and    eax,0x1
c001c0b3:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c0b9:	31 c0                	xor    eax,eax
c001c0bb:	e9 3b ff ff ff       	jmp    c001bffb <sysAppSettings(regs*)+0x50>
c001c0c0:	b8 02 00 00 00       	mov    eax,0x2
c001c0c5:	e9 31 ff ff ff       	jmp    c001bffb <sysAppSettings(regs*)+0x50>

c001c0ca <sysSetFatAttrib(regs*)>:
c001c0ca:	57                   	push   edi
c001c0cb:	56                   	push   esi
c001c0cc:	53                   	push   ebx
c001c0cd:	83 ec 1c             	sub    esp,0x1c
c001c0d0:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c0d4:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c0d7:	68 14 01 00 00       	push   0x114
c001c0dc:	e8 62 37 ff ff       	call   c000f843 <malloc>
c001c0e1:	83 c4 0c             	add    esp,0xc
c001c0e4:	89 c3                	mov    ebx,eax
c001c0e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0eb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0ee:	57                   	push   edi
c001c0ef:	53                   	push   ebx
c001c0f0:	e8 db 71 ff ff       	call   c00132d0 <File::File(char const*, Process*)>
c001c0f5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c0f8:	83 c4 0c             	add    esp,0xc
c001c0fb:	0f b6 d4             	movzx  edx,ah
c001c0fe:	0f b6 c0             	movzx  eax,al
c001c101:	52                   	push   edx
c001c102:	50                   	push   eax
c001c103:	53                   	push   ebx
c001c104:	e8 3d 74 ff ff       	call   c0013546 <File::chfatattr(unsigned char, unsigned char)>
c001c109:	83 c4 10             	add    esp,0x10
c001c10c:	85 db                	test   ebx,ebx
c001c10e:	74 14                	je     c001c124 <sysSetFatAttrib(regs*)+0x5a>
c001c110:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c114:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c116:	83 ec 0c             	sub    esp,0xc
c001c119:	53                   	push   ebx
c001c11a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c11d:	83 c4 10             	add    esp,0x10
c001c120:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c124:	85 c0                	test   eax,eax
c001c126:	0f 95 c0             	setne  al
c001c129:	31 d2                	xor    edx,edx
c001c12b:	0f b6 c0             	movzx  eax,al
c001c12e:	f7 d8                	neg    eax
c001c130:	83 d2 00             	adc    edx,0x0
c001c133:	83 c4 10             	add    esp,0x10
c001c136:	f7 da                	neg    edx
c001c138:	5b                   	pop    ebx
c001c139:	5e                   	pop    esi
c001c13a:	5f                   	pop    edi
c001c13b:	c3                   	ret    

c001c13c <sysPipe(regs*)>:
c001c13c:	57                   	push   edi
c001c13d:	56                   	push   esi
c001c13e:	53                   	push   ebx
c001c13f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c143:	83 ec 0c             	sub    esp,0xc
c001c146:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c149:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c14c:	6a 20                	push   0x20
c001c14e:	e8 f0 36 ff ff       	call   c000f843 <malloc>
c001c153:	89 c3                	mov    ebx,eax
c001c155:	58                   	pop    eax
c001c156:	5a                   	pop    edx
c001c157:	68 00 50 00 00       	push   0x5000
c001c15c:	53                   	push   ebx
c001c15d:	e8 32 43 ff ff       	call   c0010494 <Pipe::Pipe(int)>
c001c162:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c165:	e8 8a 55 ff ff       	call   c00116f4 <UnixFile::getFileDescriptor()>
c001c16a:	89 07                	mov    DWORD PTR [edi],eax
c001c16c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c16f:	e8 80 55 ff ff       	call   c00116f4 <UnixFile::getFileDescriptor()>
c001c174:	83 c4 10             	add    esp,0x10
c001c177:	89 06                	mov    DWORD PTR [esi],eax
c001c179:	31 d2                	xor    edx,edx
c001c17b:	5b                   	pop    ebx
c001c17c:	31 c0                	xor    eax,eax
c001c17e:	5e                   	pop    esi
c001c17f:	5f                   	pop    edi
c001c180:	c3                   	ret    

c001c181 <sysGetUnixTime(regs*)>:
c001c181:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c001c186:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c18c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c190:	e9 25 7b ff ff       	jmp    c0013cba <Clock::timeInSecondsLocal()>

c001c195 <string_ends_with(char const*, char const*)>:
c001c195:	57                   	push   edi
c001c196:	56                   	push   esi
c001c197:	53                   	push   ebx
c001c198:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c19c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c1a0:	83 ec 0c             	sub    esp,0xc
c001c1a3:	53                   	push   ebx
c001c1a4:	e8 eb 45 fe ff       	call   c0000794 <strlen>
c001c1a9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c1ac:	89 c6                	mov    esi,eax
c001c1ae:	e8 e1 45 fe ff       	call   c0000794 <strlen>
c001c1b3:	83 c4 10             	add    esp,0x10
c001c1b6:	39 c6                	cmp    esi,eax
c001c1b8:	7d 06                	jge    c001c1c0 <string_ends_with(char const*, char const*)+0x2b>
c001c1ba:	5b                   	pop    ebx
c001c1bb:	31 c0                	xor    eax,eax
c001c1bd:	5e                   	pop    esi
c001c1be:	5f                   	pop    edi
c001c1bf:	c3                   	ret    
c001c1c0:	83 ec 08             	sub    esp,0x8
c001c1c3:	29 c6                	sub    esi,eax
c001c1c5:	57                   	push   edi
c001c1c6:	01 f3                	add    ebx,esi
c001c1c8:	53                   	push   ebx
c001c1c9:	e8 f2 46 fe ff       	call   c00008c0 <strcmp>
c001c1ce:	83 c4 10             	add    esp,0x10
c001c1d1:	85 c0                	test   eax,eax
c001c1d3:	5b                   	pop    ebx
c001c1d4:	0f 94 c0             	sete   al
c001c1d7:	5e                   	pop    esi
c001c1d8:	0f b6 c0             	movzx  eax,al
c001c1db:	5f                   	pop    edi
c001c1dc:	c3                   	ret    

c001c1dd <sysCallOpen(regs*)>:
c001c1dd:	56                   	push   esi
c001c1de:	53                   	push   ebx
c001c1df:	81 ec 04 01 00 00    	sub    esp,0x104
c001c1e5:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c1ec:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c1ef:	85 c9                	test   ecx,ecx
c001c1f1:	0f 84 b3 00 00 00    	je     c001c2aa <sysCallOpen(regs*)+0xcd>
c001c1f7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c1fa:	85 c0                	test   eax,eax
c001c1fc:	0f 84 a8 00 00 00    	je     c001c2aa <sysCallOpen(regs*)+0xcd>
c001c202:	52                   	push   edx
c001c203:	68 d1 bc 02 c0       	push   0xc002bcd1
c001c208:	50                   	push   eax
c001c209:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c20d:	56                   	push   esi
c001c20e:	e8 13 6f ff ff       	call   c0013126 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c213:	89 34 24             	mov    DWORD PTR [esp],esi
c001c216:	e8 79 45 fe ff       	call   c0000794 <strlen>
c001c21b:	83 c4 10             	add    esp,0x10
c001c21e:	48                   	dec    eax
c001c21f:	74 1d                	je     c001c23e <sysCallOpen(regs*)+0x61>
c001c221:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c224:	eb 0f                	jmp    c001c235 <sysCallOpen(regs*)+0x58>
c001c226:	80 fa 3a             	cmp    dl,0x3a
c001c229:	74 0f                	je     c001c23a <sysCallOpen(regs*)+0x5d>
c001c22b:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c22f:	48                   	dec    eax
c001c230:	74 0c                	je     c001c23e <sysCallOpen(regs*)+0x61>
c001c232:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c235:	80 fa 2e             	cmp    dl,0x2e
c001c238:	75 ec                	jne    c001c226 <sysCallOpen(regs*)+0x49>
c001c23a:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c23e:	83 ec 08             	sub    esp,0x8
c001c241:	68 d5 bc 02 c0       	push   0xc002bcd5
c001c246:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c249:	e8 47 ff ff ff       	call   c001c195 <string_ends_with(char const*, char const*)>
c001c24e:	83 c4 10             	add    esp,0x10
c001c251:	85 c0                	test   eax,eax
c001c253:	75 17                	jne    c001c26c <sysCallOpen(regs*)+0x8f>
c001c255:	83 ec 08             	sub    esp,0x8
c001c258:	68 f6 bc 02 c0       	push   0xc002bcf6
c001c25d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c260:	e8 30 ff ff ff       	call   c001c195 <string_ends_with(char const*, char const*)>
c001c265:	83 c4 10             	add    esp,0x10
c001c268:	85 c0                	test   eax,eax
c001c26a:	74 51                	je     c001c2bd <sysCallOpen(regs*)+0xe0>
c001c26c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c26f:	83 ec 08             	sub    esp,0x8
c001c272:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c278:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c27f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c282:	ff 30                	push   DWORD PTR [eax]
c001c284:	68 da bc 02 c0       	push   0xc002bcda
c001c289:	e8 ea 6a ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001c28e:	c7 04 24 e9 bc 02 c0 	mov    DWORD PTR [esp],0xc002bce9
c001c295:	e8 de 6a ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001c29a:	83 c4 10             	add    esp,0x10
c001c29d:	81 c4 04 01 00 00    	add    esp,0x104
c001c2a3:	31 c0                	xor    eax,eax
c001c2a5:	31 d2                	xor    edx,edx
c001c2a7:	5b                   	pop    ebx
c001c2a8:	5e                   	pop    esi
c001c2a9:	c3                   	ret    
c001c2aa:	81 c4 04 01 00 00    	add    esp,0x104
c001c2b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c2b5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c2ba:	5b                   	pop    ebx
c001c2bb:	5e                   	pop    esi
c001c2bc:	c3                   	ret    
c001c2bd:	83 ec 08             	sub    esp,0x8
c001c2c0:	68 d6 bc 02 c0       	push   0xc002bcd6
c001c2c5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2c8:	e8 f3 45 fe ff       	call   c00008c0 <strcmp>
c001c2cd:	83 c4 10             	add    esp,0x10
c001c2d0:	85 c0                	test   eax,eax
c001c2d2:	74 98                	je     c001c26c <sysCallOpen(regs*)+0x8f>
c001c2d4:	83 ec 08             	sub    esp,0x8
c001c2d7:	68 d5 bc 02 c0       	push   0xc002bcd5
c001c2dc:	56                   	push   esi
c001c2dd:	e8 b3 fe ff ff       	call   c001c195 <string_ends_with(char const*, char const*)>
c001c2e2:	83 c4 10             	add    esp,0x10
c001c2e5:	85 c0                	test   eax,eax
c001c2e7:	75 83                	jne    c001c26c <sysCallOpen(regs*)+0x8f>
c001c2e9:	83 ec 08             	sub    esp,0x8
c001c2ec:	68 fb bc 02 c0       	push   0xc002bcfb
c001c2f1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2f4:	e8 9c fe ff ff       	call   c001c195 <string_ends_with(char const*, char const*)>
c001c2f9:	83 c4 10             	add    esp,0x10
c001c2fc:	85 c0                	test   eax,eax
c001c2fe:	0f 85 d9 00 00 00    	jne    c001c3dd <sysCallOpen(regs*)+0x200>
c001c304:	83 ec 08             	sub    esp,0x8
c001c307:	68 00 bd 02 c0       	push   0xc002bd00
c001c30c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c30f:	e8 81 fe ff ff       	call   c001c195 <string_ends_with(char const*, char const*)>
c001c314:	83 c4 10             	add    esp,0x10
c001c317:	85 c0                	test   eax,eax
c001c319:	0f 85 be 00 00 00    	jne    c001c3dd <sysCallOpen(regs*)+0x200>
c001c31f:	83 ec 08             	sub    esp,0x8
c001c322:	68 fc bc 02 c0       	push   0xc002bcfc
c001c327:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c32a:	e8 91 45 fe ff       	call   c00008c0 <strcmp>
c001c32f:	83 c4 10             	add    esp,0x10
c001c332:	85 c0                	test   eax,eax
c001c334:	0f 84 a3 00 00 00    	je     c001c3dd <sysCallOpen(regs*)+0x200>
c001c33a:	83 ec 08             	sub    esp,0x8
c001c33d:	68 fb bc 02 c0       	push   0xc002bcfb
c001c342:	56                   	push   esi
c001c343:	e8 4d fe ff ff       	call   c001c195 <string_ends_with(char const*, char const*)>
c001c348:	83 c4 10             	add    esp,0x10
c001c34b:	85 c0                	test   eax,eax
c001c34d:	0f 85 8a 00 00 00    	jne    c001c3dd <sysCallOpen(regs*)+0x200>
c001c353:	83 ec 0c             	sub    esp,0xc
c001c356:	68 14 01 00 00       	push   0x114
c001c35b:	e8 e3 34 ff ff       	call   c000f843 <malloc>
c001c360:	83 c4 0c             	add    esp,0xc
c001c363:	89 c6                	mov    esi,eax
c001c365:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c36a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c36d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c370:	56                   	push   esi
c001c371:	e8 5a 6f ff ff       	call   c00132d0 <File::File(char const*, Process*)>
c001c376:	83 c4 10             	add    esp,0x10
c001c379:	85 f6                	test   esi,esi
c001c37b:	0f 84 29 ff ff ff    	je     c001c2aa <sysCallOpen(regs*)+0xcd>
c001c381:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c384:	0f b6 c2             	movzx  eax,dl
c001c387:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c38a:	89 d0                	mov    eax,edx
c001c38c:	83 e0 01             	and    eax,0x1
c001c38f:	f6 c2 02             	test   dl,0x2
c001c392:	74 03                	je     c001c397 <sysCallOpen(regs*)+0x1ba>
c001c394:	83 c8 02             	or     eax,0x2
c001c397:	f6 c2 04             	test   dl,0x4
c001c39a:	74 03                	je     c001c39f <sysCallOpen(regs*)+0x1c2>
c001c39c:	83 c8 04             	or     eax,0x4
c001c39f:	f6 c2 08             	test   dl,0x8
c001c3a2:	74 03                	je     c001c3a7 <sysCallOpen(regs*)+0x1ca>
c001c3a4:	83 c8 0a             	or     eax,0xa
c001c3a7:	83 e2 10             	and    edx,0x10
c001c3aa:	74 03                	je     c001c3af <sysCallOpen(regs*)+0x1d2>
c001c3ac:	83 c8 12             	or     eax,0x12
c001c3af:	83 ec 08             	sub    esp,0x8
c001c3b2:	50                   	push   eax
c001c3b3:	56                   	push   esi
c001c3b4:	e8 7b 6f ff ff       	call   c0013334 <File::open(FileOpenMode)>
c001c3b9:	83 c4 10             	add    esp,0x10
c001c3bc:	85 c0                	test   eax,eax
c001c3be:	0f 85 e6 fe ff ff    	jne    c001c2aa <sysCallOpen(regs*)+0xcd>
c001c3c4:	83 ec 0c             	sub    esp,0xc
c001c3c7:	56                   	push   esi
c001c3c8:	e8 27 53 ff ff       	call   c00116f4 <UnixFile::getFileDescriptor()>
c001c3cd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c3d0:	89 02                	mov    DWORD PTR [edx],eax
c001c3d2:	c1 f8 1f             	sar    eax,0x1f
c001c3d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c3d8:	e9 bd fe ff ff       	jmp    c001c29a <sysCallOpen(regs*)+0xbd>
c001c3dd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c3e0:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c3e6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c3ed:	e9 ab fe ff ff       	jmp    c001c29d <sysCallOpen(regs*)+0xc0>

c001c3f2 <Sys::loadSyscalls()>:
c001c3f2:	c7 05 80 0d 03 c0 ff b4 01 c0 	mov    DWORD PTR ds:0xc0030d80,0xc001b4ff
c001c3fc:	c7 05 84 0d 03 c0 e8 b0 01 c0 	mov    DWORD PTR ds:0xc0030d84,0xc001b0e8
c001c406:	c7 05 88 0d 03 c0 52 b2 01 c0 	mov    DWORD PTR ds:0xc0030d88,0xc001b252
c001c410:	c7 05 8c 0d 03 c0 35 b4 01 c0 	mov    DWORD PTR ds:0xc0030d8c,0xc001b435
c001c41a:	c7 05 90 0d 03 c0 ea b1 01 c0 	mov    DWORD PTR ds:0xc0030d90,0xc001b1ea
c001c424:	c7 05 94 0d 03 c0 1f b1 01 c0 	mov    DWORD PTR ds:0xc0030d94,0xc001b11f
c001c42e:	c7 05 98 0d 03 c0 00 b1 01 c0 	mov    DWORD PTR ds:0xc0030d98,0xc001b100
c001c438:	c7 05 9c 0d 03 c0 a7 b2 01 c0 	mov    DWORD PTR ds:0xc0030d9c,0xc001b2a7
c001c442:	c7 05 a4 0d 03 c0 2f ba 01 c0 	mov    DWORD PTR ds:0xc0030da4,0xc001ba2f
c001c44c:	c7 05 a0 0d 03 c0 dd c1 01 c0 	mov    DWORD PTR ds:0xc0030da0,0xc001c1dd
c001c456:	c7 05 a8 0d 03 c0 b7 ba 01 c0 	mov    DWORD PTR ds:0xc0030da8,0xc001bab7
c001c460:	c7 05 ac 0d 03 c0 1e b7 01 c0 	mov    DWORD PTR ds:0xc0030dac,0xc001b71e
c001c46a:	c7 05 b0 0d 03 c0 3a b5 01 c0 	mov    DWORD PTR ds:0xc0030db0,0xc001b53a
c001c474:	c7 05 b4 0d 03 c0 3f b5 01 c0 	mov    DWORD PTR ds:0xc0030db4,0xc001b53f
c001c47e:	c7 05 b8 0d 03 c0 92 bb 01 c0 	mov    DWORD PTR ds:0xc0030db8,0xc001bb92
c001c488:	c7 05 bc 0d 03 c0 2c bb 01 c0 	mov    DWORD PTR ds:0xc0030dbc,0xc001bb2c
c001c492:	c7 05 c0 0d 03 c0 06 b8 01 c0 	mov    DWORD PTR ds:0xc0030dc0,0xc001b806
c001c49c:	c7 05 c4 0d 03 c0 6f b8 01 c0 	mov    DWORD PTR ds:0xc0030dc4,0xc001b86f
c001c4a6:	c7 05 c8 0d 03 c0 ec b8 01 c0 	mov    DWORD PTR ds:0xc0030dc8,0xc001b8ec
c001c4b0:	c7 05 cc 0d 03 c0 44 b5 01 c0 	mov    DWORD PTR ds:0xc0030dcc,0xc001b544
c001c4ba:	c7 05 d0 0d 03 c0 02 bc 01 c0 	mov    DWORD PTR ds:0xc0030dd0,0xc001bc02
c001c4c4:	c7 05 d4 0d 03 c0 1c bc 01 c0 	mov    DWORD PTR ds:0xc0030dd4,0xc001bc1c
c001c4ce:	c7 05 d8 0d 03 c0 1c bc 01 c0 	mov    DWORD PTR ds:0xc0030dd8,0xc001bc1c
c001c4d8:	c7 05 dc 0d 03 c0 5d bc 01 c0 	mov    DWORD PTR ds:0xc0030ddc,0xc001bc5d
c001c4e2:	c7 05 e0 0d 03 c0 c1 bc 01 c0 	mov    DWORD PTR ds:0xc0030de0,0xc001bcc1
c001c4ec:	c7 05 e4 0d 03 c0 f0 b6 01 c0 	mov    DWORD PTR ds:0xc0030de4,0xc001b6f0
c001c4f6:	c7 05 e8 0d 03 c0 25 bd 01 c0 	mov    DWORD PTR ds:0xc0030de8,0xc001bd25
c001c500:	c7 05 ec 0d 03 c0 ad b6 01 c0 	mov    DWORD PTR ds:0xc0030dec,0xc001b6ad
c001c50a:	c7 05 f0 0d 03 c0 71 bd 01 c0 	mov    DWORD PTR ds:0xc0030df0,0xc001bd71
c001c514:	c7 05 f4 0d 03 c0 ac b7 01 c0 	mov    DWORD PTR ds:0xc0030df4,0xc001b7ac
c001c51e:	c7 05 f8 0d 03 c0 f4 bd 01 c0 	mov    DWORD PTR ds:0xc0030df8,0xc001bdf4
c001c528:	c7 05 fc 0d 03 c0 6f b9 01 c0 	mov    DWORD PTR ds:0xc0030dfc,0xc001b96f
c001c532:	c7 05 00 0e 03 c0 1b be 01 c0 	mov    DWORD PTR ds:0xc0030e00,0xc001be1b
c001c53c:	c7 05 04 0e 03 c0 73 be 01 c0 	mov    DWORD PTR ds:0xc0030e04,0xc001be73
c001c546:	c7 05 08 0e 03 c0 ab bf 01 c0 	mov    DWORD PTR ds:0xc0030e08,0xc001bfab
c001c550:	c7 05 0c 0e 03 c0 4e b5 01 c0 	mov    DWORD PTR ds:0xc0030e0c,0xc001b54e
c001c55a:	c7 05 10 0e 03 c0 b8 b5 01 c0 	mov    DWORD PTR ds:0xc0030e10,0xc001b5b8
c001c564:	c7 05 14 0e 03 c0 fe b5 01 c0 	mov    DWORD PTR ds:0xc0030e14,0xc001b5fe
c001c56e:	c7 05 18 0e 03 c0 ca c0 01 c0 	mov    DWORD PTR ds:0xc0030e18,0xc001c0ca
c001c578:	c7 05 1c 0e 03 c0 37 bc 01 c0 	mov    DWORD PTR ds:0xc0030e1c,0xc001bc37
c001c582:	c7 05 20 0e 03 c0 4f b6 01 c0 	mov    DWORD PTR ds:0xc0030e20,0xc001b64f
c001c58c:	c7 05 24 0e 03 c0 3c c1 01 c0 	mov    DWORD PTR ds:0xc0030e24,0xc001c13c
c001c596:	c7 05 28 0e 03 c0 81 c1 01 c0 	mov    DWORD PTR ds:0xc0030e28,0xc001c181
c001c5a0:	c7 05 2c 0e 03 c0 42 b1 01 c0 	mov    DWORD PTR ds:0xc0030e2c,0xc001b142
c001c5aa:	c7 05 30 0e 03 c0 c3 b2 01 c0 	mov    DWORD PTR ds:0xc0030e30,0xc001b2c3
c001c5b4:	c7 05 34 0e 03 c0 eb b3 01 c0 	mov    DWORD PTR ds:0xc0030e34,0xc001b3eb
c001c5be:	c7 05 38 0e 03 c0 b2 b0 01 c0 	mov    DWORD PTR ds:0xc0030e38,0xc001b0b2
c001c5c8:	c7 05 3c 0e 03 c0 9d b4 01 c0 	mov    DWORD PTR ds:0xc0030e3c,0xc001b49d
c001c5d2:	c7 05 40 0e 03 c0 2b b1 01 c0 	mov    DWORD PTR ds:0xc0030e40,0xc001b12b
c001c5dc:	c3                   	ret    

c001c5dd <Sys::systemCall(regs*, void*)>:
c001c5dd:	53                   	push   ebx
c001c5de:	83 ec 08             	sub    esp,0x8
c001c5e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c5e5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c5e8:	83 f8 7f             	cmp    eax,0x7f
c001c5eb:	77 16                	ja     c001c603 <Sys::systemCall(regs*, void*)+0x26>
c001c5ed:	8b 14 85 80 0d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf280]
c001c5f4:	85 d2                	test   edx,edx
c001c5f6:	74 0b                	je     c001c603 <Sys::systemCall(regs*, void*)+0x26>
c001c5f8:	83 ec 0c             	sub    esp,0xc
c001c5fb:	53                   	push   ebx
c001c5fc:	ff d2                	call   edx
c001c5fe:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c601:	eb 0d                	jmp    c001c610 <Sys::systemCall(regs*, void*)+0x33>
c001c603:	52                   	push   edx
c001c604:	52                   	push   edx
c001c605:	50                   	push   eax
c001c606:	68 05 bd 02 c0       	push   0xc002bd05
c001c60b:	e8 68 67 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001c610:	83 c4 10             	add    esp,0x10
c001c613:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c618:	31 d2                	xor    edx,edx
c001c61a:	83 c4 08             	add    esp,0x8
c001c61d:	5b                   	pop    ebx
c001c61e:	c3                   	ret    

c001c61f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c61f:	55                   	push   ebp
c001c620:	57                   	push   edi
c001c621:	56                   	push   esi
c001c622:	53                   	push   ebx
c001c623:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c629:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c630:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c637:	85 c0                	test   eax,eax
c001c639:	0f 95 c1             	setne  cl
c001c63c:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c644:	0f 94 c2             	sete   dl
c001c647:	84 d1                	test   cl,dl
c001c649:	74 23                	je     c001c66e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c64b:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c651:	74 1b                	je     c001c66e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c653:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c659:	89 da                	mov    edx,ebx
c001c65b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c661:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c667:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c66e:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c675:	05 ff 0f 00 00       	add    eax,0xfff
c001c67a:	83 ec 0c             	sub    esp,0xc
c001c67d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c681:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c687:	c1 e8 0c             	shr    eax,0xc
c001c68a:	89 ef                	mov    edi,ebp
c001c68c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c690:	c1 ef 0c             	shr    edi,0xc
c001c693:	6a 01                	push   0x1
c001c695:	e8 a5 54 ff ff       	call   c0011b3f <Virt::allocateKernelVirtualPages(int)>
c001c69a:	89 c6                	mov    esi,eax
c001c69c:	58                   	pop    eax
c001c69d:	5a                   	pop    edx
c001c69e:	57                   	push   edi
c001c69f:	68 8b bd 02 c0       	push   0xc002bd8b
c001c6a4:	e8 cf 66 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001c6a9:	59                   	pop    ecx
c001c6aa:	58                   	pop    eax
c001c6ab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c6af:	68 9d bd 02 c0       	push   0xc002bd9d
c001c6b4:	e8 bf 66 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001c6b9:	83 c4 10             	add    esp,0x10
c001c6bc:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c6c2:	0f 86 24 01 00 00    	jbe    c001c7ec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c6c8:	c1 e7 0c             	shl    edi,0xc
c001c6cb:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c6ce:	89 df                	mov    edi,ebx
c001c6d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c6d4:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c6db:	01 dd                	add    ebp,ebx
c001c6dd:	29 fd                	sub    ebp,edi
c001c6df:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c6e3:	0f 84 01 01 00 00    	je     c001c7ea <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c6e9:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c6ef:	76 05                	jbe    c001c6f6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c6f1:	bd 00 10 00 00       	mov    ebp,0x1000
c001c6f6:	83 ec 0c             	sub    esp,0xc
c001c6f9:	31 d2                	xor    edx,edx
c001c6fb:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c702:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c704:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c708:	50                   	push   eax
c001c709:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c70d:	50                   	push   eax
c001c70e:	52                   	push   edx
c001c70f:	55                   	push   ebp
c001c710:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c717:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c71a:	83 c4 20             	add    esp,0x20
c001c71d:	85 c0                	test   eax,eax
c001c71f:	74 0a                	je     c001c72b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c721:	53                   	push   ebx
c001c722:	53                   	push   ebx
c001c723:	50                   	push   eax
c001c724:	68 af bd 02 c0       	push   0xc002bdaf
c001c729:	eb 0f                	jmp    c001c73a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c72b:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c72f:	74 20                	je     c001c751 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c731:	51                   	push   ecx
c001c732:	51                   	push   ecx
c001c733:	6a 00                	push   0x0
c001c735:	68 da bd 02 c0       	push   0xc002bdda
c001c73a:	e8 39 66 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001c73f:	89 34 24             	mov    DWORD PTR [esp],esi
c001c742:	e8 5a 57 ff ff       	call   c0011ea1 <Virt::freeKernelVirtualPages(unsigned long)>
c001c747:	83 c4 10             	add    esp,0x10
c001c74a:	31 c0                	xor    eax,eax
c001c74c:	e9 55 01 00 00       	jmp    c001c8a6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c751:	e8 f7 14 00 00       	call   c001dc4d <lockScheduler()>
c001c756:	e8 85 37 ff ff       	call   c000fee0 <Phys::allocatePage()>
c001c75b:	6a 07                	push   0x7
c001c75d:	89 c5                	mov    ebp,eax
c001c75f:	56                   	push   esi
c001c760:	50                   	push   eax
c001c761:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c766:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c769:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c76f:	e8 94 5a ff ff       	call   c0012208 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c774:	83 c4 0c             	add    esp,0xc
c001c777:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c77e:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c784:	6a 00                	push   0x0
c001c786:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c78b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c78e:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c794:	e8 d9 58 ff ff       	call   c0012072 <VAS::mapOtherVASIn(bool, VAS*)>
c001c799:	58                   	pop    eax
c001c79a:	5a                   	pop    edx
c001c79b:	68 07 0c 00 00       	push   0xc07
c001c7a0:	57                   	push   edi
c001c7a1:	81 c7 00 10 00 00    	add    edi,0x1000
c001c7a7:	55                   	push   ebp
c001c7a8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c7af:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c7b5:	6a 00                	push   0x0
c001c7b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7bc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7bf:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c7c5:	e8 f8 5d ff ff       	call   c00125c2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c7ca:	83 c4 1c             	add    esp,0x1c
c001c7cd:	68 00 10 00 00       	push   0x1000
c001c7d2:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c7d6:	50                   	push   eax
c001c7d7:	56                   	push   esi
c001c7d8:	e8 67 3f fe ff       	call   c0000744 <memcpy>
c001c7dd:	e8 6d 14 00 00       	call   c001dc4f <unlockScheduler()>
c001c7e2:	83 c4 10             	add    esp,0x10
c001c7e5:	e9 ea fe ff ff       	jmp    c001c6d4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c7ea:	89 fb                	mov    ebx,edi
c001c7ec:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c7f4:	0f 86 9e 00 00 00    	jbe    c001c898 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c7fa:	e8 4e 14 00 00       	call   c001dc4d <lockScheduler()>
c001c7ff:	51                   	push   ecx
c001c800:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c807:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c80d:	6a 00                	push   0x0
c001c80f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c814:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c817:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c81d:	e8 50 58 ff ff       	call   c0012072 <VAS::mapOtherVASIn(bool, VAS*)>
c001c822:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c826:	c1 e7 0c             	shl    edi,0xc
c001c829:	01 df                	add    edi,ebx
c001c82b:	83 c4 10             	add    esp,0x10
c001c82e:	39 fb                	cmp    ebx,edi
c001c830:	74 61                	je     c001c893 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c832:	e8 a9 36 ff ff       	call   c000fee0 <Phys::allocatePage()>
c001c837:	6a 07                	push   0x7
c001c839:	89 c5                	mov    ebp,eax
c001c83b:	56                   	push   esi
c001c83c:	50                   	push   eax
c001c83d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c842:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c845:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c84b:	e8 b8 59 ff ff       	call   c0012208 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c850:	58                   	pop    eax
c001c851:	5a                   	pop    edx
c001c852:	68 07 0c 00 00       	push   0xc07
c001c857:	53                   	push   ebx
c001c858:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c85e:	55                   	push   ebp
c001c85f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c866:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c86c:	6a 00                	push   0x0
c001c86e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c873:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c876:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c87c:	e8 41 5d ff ff       	call   c00125c2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c881:	83 c4 1c             	add    esp,0x1c
c001c884:	68 00 10 00 00       	push   0x1000
c001c889:	6a 00                	push   0x0
c001c88b:	56                   	push   esi
c001c88c:	e8 e7 3e fe ff       	call   c0000778 <memset>
c001c891:	eb 98                	jmp    c001c82b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001c893:	e8 b7 13 00 00       	call   c001dc4f <unlockScheduler()>
c001c898:	83 ec 0c             	sub    esp,0xc
c001c89b:	56                   	push   esi
c001c89c:	e8 00 56 ff ff       	call   c0011ea1 <Virt::freeKernelVirtualPages(unsigned long)>
c001c8a1:	83 c4 10             	add    esp,0x10
c001c8a4:	b0 01                	mov    al,0x1
c001c8a6:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c8ac:	5b                   	pop    ebx
c001c8ad:	5e                   	pop    esi
c001c8ae:	5f                   	pop    edi
c001c8af:	5d                   	pop    ebp
c001c8b0:	c3                   	ret    

c001c8b1 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c8b1:	55                   	push   ebp
c001c8b2:	57                   	push   edi
c001c8b3:	56                   	push   esi
c001c8b4:	53                   	push   ebx
c001c8b5:	83 ec 48             	sub    esp,0x48
c001c8b8:	68 14 01 00 00       	push   0x114
c001c8bd:	e8 81 2f ff ff       	call   c000f843 <malloc>
c001c8c2:	83 c4 0c             	add    esp,0xc
c001c8c5:	89 c6                	mov    esi,eax
c001c8c7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c8cb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c8cf:	50                   	push   eax
c001c8d0:	e8 fb 69 ff ff       	call   c00132d0 <File::File(char const*, Process*)>
c001c8d5:	58                   	pop    eax
c001c8d6:	5a                   	pop    edx
c001c8d7:	6a 01                	push   0x1
c001c8d9:	56                   	push   esi
c001c8da:	e8 55 6a ff ff       	call   c0013334 <File::open(FileOpenMode)>
c001c8df:	83 c4 10             	add    esp,0x10
c001c8e2:	85 c0                	test   eax,eax
c001c8e4:	0f 85 47 01 00 00    	jne    c001ca31 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c8ea:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c8f2:	83 ec 0c             	sub    esp,0xc
c001c8f5:	6a 34                	push   0x34
c001c8f7:	e8 47 2f ff ff       	call   c000f843 <malloc>
c001c8fc:	89 c3                	mov    ebx,eax
c001c8fe:	58                   	pop    eax
c001c8ff:	8b 06                	mov    eax,DWORD PTR [esi]
c001c901:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c905:	57                   	push   edi
c001c906:	53                   	push   ebx
c001c907:	6a 00                	push   0x0
c001c909:	6a 34                	push   0x34
c001c90b:	56                   	push   esi
c001c90c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c90f:	83 c4 20             	add    esp,0x20
c001c912:	85 c0                	test   eax,eax
c001c914:	0f 85 17 01 00 00    	jne    c001ca31 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c91a:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c920:	0f 85 0b 01 00 00    	jne    c001ca31 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c926:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c929:	85 c0                	test   eax,eax
c001c92b:	0f 84 00 01 00 00    	je     c001ca31 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c931:	31 d2                	xor    edx,edx
c001c933:	55                   	push   ebp
c001c934:	52                   	push   edx
c001c935:	50                   	push   eax
c001c936:	56                   	push   esi
c001c937:	e8 b6 6a ff ff       	call   c00133f2 <File::seek(unsigned long long)>
c001c93c:	83 c4 10             	add    esp,0x10
c001c93f:	85 c0                	test   eax,eax
c001c941:	0f 85 ea 00 00 00    	jne    c001ca31 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c947:	83 ec 0c             	sub    esp,0xc
c001c94a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c94d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c951:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c955:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c959:	0f af c2             	imul   eax,edx
c001c95c:	50                   	push   eax
c001c95d:	e8 e1 2e ff ff       	call   c000f843 <malloc>
c001c962:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c964:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c968:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c96b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c96f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c973:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c977:	0f af c2             	imul   eax,edx
c001c97a:	99                   	cdq    
c001c97b:	52                   	push   edx
c001c97c:	50                   	push   eax
c001c97d:	56                   	push   esi
c001c97e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c981:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c984:	83 c4 20             	add    esp,0x20
c001c987:	85 c0                	test   eax,eax
c001c989:	0f 84 a2 00 00 00    	je     c001ca31 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c98f:	31 d2                	xor    edx,edx
c001c991:	51                   	push   ecx
c001c992:	52                   	push   edx
c001c993:	50                   	push   eax
c001c994:	56                   	push   esi
c001c995:	e8 58 6a ff ff       	call   c00133f2 <File::seek(unsigned long long)>
c001c99a:	83 c4 10             	add    esp,0x10
c001c99d:	85 c0                	test   eax,eax
c001c99f:	0f 85 8c 00 00 00    	jne    c001ca31 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9a5:	83 ec 0c             	sub    esp,0xc
c001c9a8:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c9ac:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c9b0:	31 ed                	xor    ebp,ebp
c001c9b2:	0f af c2             	imul   eax,edx
c001c9b5:	50                   	push   eax
c001c9b6:	e8 88 2e ff ff       	call   c000f843 <malloc>
c001c9bb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c9bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c9c1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c9c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9c8:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c9cc:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c9d0:	0f af c2             	imul   eax,edx
c001c9d3:	99                   	cdq    
c001c9d4:	52                   	push   edx
c001c9d5:	50                   	push   eax
c001c9d6:	56                   	push   esi
c001c9d7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9da:	83 c4 20             	add    esp,0x20
c001c9dd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c9e5:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c9e9:	0f 86 80 00 00 00    	jbe    c001ca6f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c9ef:	0f b7 fd             	movzx  edi,bp
c001c9f2:	c1 e7 05             	shl    edi,0x5
c001c9f5:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c9f9:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c9fc:	75 6b                	jne    c001ca69 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c9fe:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001ca01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ca05:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ca08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca0c:	52                   	push   edx
c001ca0d:	31 d2                	xor    edx,edx
c001ca0f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001ca12:	52                   	push   edx
c001ca13:	50                   	push   eax
c001ca14:	56                   	push   esi
c001ca15:	e8 d8 69 ff ff       	call   c00133f2 <File::seek(unsigned long long)>
c001ca1a:	83 c4 10             	add    esp,0x10
c001ca1d:	85 c0                	test   eax,eax
c001ca1f:	74 17                	je     c001ca38 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001ca21:	83 ec 0c             	sub    esp,0xc
c001ca24:	68 06 be 02 c0       	push   0xc002be06
c001ca29:	e8 4a 63 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001ca2e:	83 c4 10             	add    esp,0x10
c001ca31:	31 c0                	xor    eax,eax
c001ca33:	e9 87 00 00 00       	jmp    c001cabf <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001ca38:	83 ec 0c             	sub    esp,0xc
c001ca3b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ca3e:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001ca41:	50                   	push   eax
c001ca42:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ca46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca4a:	56                   	push   esi
c001ca4b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001ca4f:	e8 cb fb ff ff       	call   c001c61f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001ca54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ca58:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001ca5c:	83 c4 20             	add    esp,0x20
c001ca5f:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ca63:	73 04                	jae    c001ca69 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ca65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ca69:	45                   	inc    ebp
c001ca6a:	e9 76 ff ff ff       	jmp    c001c9e5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001ca6f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001ca73:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ca77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca7b:	89 91 2e 19 00 00    	mov    DWORD PTR [ecx+0x192e],edx
c001ca81:	83 ec 0c             	sub    esp,0xc
c001ca84:	8b 91 32 19 00 00    	mov    edx,DWORD PTR [ecx+0x1932]
c001ca8a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ca8f:	05 00 10 00 00       	add    eax,0x1000
c001ca94:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ca97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca9b:	e8 b3 2d ff ff       	call   c000f853 <free>
c001caa0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001caa3:	e8 ab 2d ff ff       	call   c000f853 <free>
c001caa8:	58                   	pop    eax
c001caa9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001caad:	e8 a1 2d ff ff       	call   c000f853 <free>
c001cab2:	89 34 24             	mov    DWORD PTR [esp],esi
c001cab5:	e8 d8 68 ff ff       	call   c0013392 <File::close()>
c001caba:	83 c4 10             	add    esp,0x10
c001cabd:	b0 01                	mov    al,0x1
c001cabf:	83 c4 3c             	add    esp,0x3c
c001cac2:	5b                   	pop    ebx
c001cac3:	5e                   	pop    esi
c001cac4:	5f                   	pop    edi
c001cac5:	5d                   	pop    ebp
c001cac6:	c3                   	ret    

c001cac7 <Thr::runtimeReferenceHelper()>:
c001cac7:	83 ec 18             	sub    esp,0x18
c001caca:	68 0e be 02 c0       	push   0xc002be0e
c001cacf:	e8 a4 62 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001cad4:	fa                   	cli    
c001cad5:	83 c4 10             	add    esp,0x10
c001cad8:	eb fe                	jmp    c001cad8 <Thr::runtimeReferenceHelper()+0x11>

c001cada <Thr::getAddressOfKernelSymbol(char const*)>:
c001cada:	57                   	push   edi
c001cadb:	56                   	push   esi
c001cadc:	53                   	push   ebx
c001cadd:	31 db                	xor    ebx,ebx
c001cadf:	39 1d 20 17 03 c0    	cmp    DWORD PTR ds:0xc0031720,ebx
c001cae5:	7e 3c                	jle    c001cb23 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cae7:	8b 34 9d a0 16 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce960]
c001caee:	31 ff                	xor    edi,edi
c001caf0:	39 3c 9d a0 15 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcea60],edi
c001caf7:	7e 27                	jle    c001cb20 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001caf9:	50                   	push   eax
c001cafa:	50                   	push   eax
c001cafb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001caff:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb01:	03 04 9d 20 16 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce9e0]
c001cb08:	50                   	push   eax
c001cb09:	e8 b2 3d fe ff       	call   c00008c0 <strcmp>
c001cb0e:	83 c4 10             	add    esp,0x10
c001cb11:	85 c0                	test   eax,eax
c001cb13:	75 05                	jne    c001cb1a <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cb15:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cb18:	eb 0b                	jmp    c001cb25 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cb1a:	83 c6 10             	add    esi,0x10
c001cb1d:	47                   	inc    edi
c001cb1e:	eb d0                	jmp    c001caf0 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cb20:	43                   	inc    ebx
c001cb21:	eb bc                	jmp    c001cadf <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cb23:	31 c0                	xor    eax,eax
c001cb25:	5b                   	pop    ebx
c001cb26:	5e                   	pop    esi
c001cb27:	5f                   	pop    edi
c001cb28:	c3                   	ret    

c001cb29 <Thr::loadKernelSymbolTable(char const*)>:
c001cb29:	55                   	push   ebp
c001cb2a:	57                   	push   edi
c001cb2b:	56                   	push   esi
c001cb2c:	53                   	push   ebx
c001cb2d:	83 ec 68             	sub    esp,0x68
c001cb30:	8b 35 74 17 03 c0    	mov    esi,DWORD PTR ds:0xc0031774
c001cb36:	68 14 01 00 00       	push   0x114
c001cb3b:	e8 03 2d ff ff       	call   c000f843 <malloc>
c001cb40:	83 c4 0c             	add    esp,0xc
c001cb43:	89 c3                	mov    ebx,eax
c001cb45:	56                   	push   esi
c001cb46:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cb4a:	50                   	push   eax
c001cb4b:	e8 80 67 ff ff       	call   c00132d0 <File::File(char const*, Process*)>
c001cb50:	5e                   	pop    esi
c001cb51:	5f                   	pop    edi
c001cb52:	6a 01                	push   0x1
c001cb54:	53                   	push   ebx
c001cb55:	e8 da 67 ff ff       	call   c0013334 <File::open(FileOpenMode)>
c001cb5a:	83 c4 10             	add    esp,0x10
c001cb5d:	85 c0                	test   eax,eax
c001cb5f:	74 0a                	je     c001cb6b <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cb61:	83 ec 0c             	sub    esp,0xc
c001cb64:	68 30 be 02 c0       	push   0xc002be30
c001cb69:	eb 34                	jmp    c001cb9f <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cb6b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cb73:	83 ec 0c             	sub    esp,0xc
c001cb76:	6a 34                	push   0x34
c001cb78:	e8 c6 2c ff ff       	call   c000f843 <malloc>
c001cb7d:	59                   	pop    ecx
c001cb7e:	89 c7                	mov    edi,eax
c001cb80:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cb84:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb86:	56                   	push   esi
c001cb87:	57                   	push   edi
c001cb88:	6a 00                	push   0x0
c001cb8a:	6a 34                	push   0x34
c001cb8c:	53                   	push   ebx
c001cb8d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb90:	83 c4 20             	add    esp,0x20
c001cb93:	85 c0                	test   eax,eax
c001cb95:	74 17                	je     c001cbae <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cb97:	83 ec 0c             	sub    esp,0xc
c001cb9a:	68 47 be 02 c0       	push   0xc002be47
c001cb9f:	e8 af d8 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c001cba4:	83 c4 10             	add    esp,0x10
c001cba7:	31 c0                	xor    eax,eax
c001cba9:	e9 31 02 00 00       	jmp    c001cddf <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cbae:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cbb4:	75 e1                	jne    c001cb97 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cbb6:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cbb9:	85 c0                	test   eax,eax
c001cbbb:	74 da                	je     c001cb97 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cbbd:	52                   	push   edx
c001cbbe:	31 d2                	xor    edx,edx
c001cbc0:	52                   	push   edx
c001cbc1:	50                   	push   eax
c001cbc2:	53                   	push   ebx
c001cbc3:	e8 2a 68 ff ff       	call   c00133f2 <File::seek(unsigned long long)>
c001cbc8:	83 c4 10             	add    esp,0x10
c001cbcb:	85 c0                	test   eax,eax
c001cbcd:	75 c8                	jne    c001cb97 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cbcf:	83 ec 0c             	sub    esp,0xc
c001cbd2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cbd6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cbda:	31 ed                	xor    ebp,ebp
c001cbdc:	0f af c2             	imul   eax,edx
c001cbdf:	50                   	push   eax
c001cbe0:	e8 5e 2c ff ff       	call   c000f843 <malloc>
c001cbe5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cbe7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbeb:	89 34 24             	mov    DWORD PTR [esp],esi
c001cbee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cbf2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cbf6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cbfa:	0f af c2             	imul   eax,edx
c001cbfd:	99                   	cdq    
c001cbfe:	52                   	push   edx
c001cbff:	50                   	push   eax
c001cc00:	53                   	push   ebx
c001cc01:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc04:	83 c4 20             	add    esp,0x20
c001cc07:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cc0f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cc17:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cc1f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cc27:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cc2b:	0f 86 aa 00 00 00    	jbe    c001ccdb <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cc31:	0f b7 f5             	movzx  esi,bp
c001cc34:	6b f6 28             	imul   esi,esi,0x28
c001cc37:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cc3b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cc3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc42:	50                   	push   eax
c001cc43:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cc47:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cc4b:	8b 16                	mov    edx,DWORD PTR [esi]
c001cc4d:	6b c0 28             	imul   eax,eax,0x28
c001cc50:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cc54:	89 d0                	mov    eax,edx
c001cc56:	31 d2                	xor    edx,edx
c001cc58:	52                   	push   edx
c001cc59:	50                   	push   eax
c001cc5a:	53                   	push   ebx
c001cc5b:	e8 92 67 ff ff       	call   c00133f2 <File::seek(unsigned long long)>
c001cc60:	83 c4 0c             	add    esp,0xc
c001cc63:	6a 20                	push   0x20
c001cc65:	6a 00                	push   0x0
c001cc67:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cc6b:	52                   	push   edx
c001cc6c:	e8 07 3b fe ff       	call   c0000778 <memset>
c001cc71:	58                   	pop    eax
c001cc72:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc74:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cc78:	51                   	push   ecx
c001cc79:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cc7d:	52                   	push   edx
c001cc7e:	6a 00                	push   0x0
c001cc80:	6a 1f                	push   0x1f
c001cc82:	53                   	push   ebx
c001cc83:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cc86:	83 c4 18             	add    esp,0x18
c001cc89:	68 5e be 02 c0       	push   0xc002be5e
c001cc8e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cc92:	52                   	push   edx
c001cc93:	e8 28 3c fe ff       	call   c00008c0 <strcmp>
c001cc98:	83 c4 10             	add    esp,0x10
c001cc9b:	85 c0                	test   eax,eax
c001cc9d:	75 0f                	jne    c001ccae <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cc9f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cca2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cca6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccaa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ccae:	50                   	push   eax
c001ccaf:	50                   	push   eax
c001ccb0:	68 66 be 02 c0       	push   0xc002be66
c001ccb5:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ccb9:	50                   	push   eax
c001ccba:	e8 01 3c fe ff       	call   c00008c0 <strcmp>
c001ccbf:	83 c4 10             	add    esp,0x10
c001ccc2:	85 c0                	test   eax,eax
c001ccc4:	75 0f                	jne    c001ccd5 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ccc6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ccc9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cccd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccd1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ccd5:	45                   	inc    ebp
c001ccd6:	e9 4c ff ff ff       	jmp    c001cc27 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ccdb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cce0:	75 10                	jne    c001ccf2 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cce2:	83 ec 0c             	sub    esp,0xc
c001cce5:	68 6e be 02 c0       	push   0xc002be6e
c001ccea:	e8 64 d7 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c001ccef:	83 c4 10             	add    esp,0x10
c001ccf2:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001ccf7:	75 10                	jne    c001cd09 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001ccf9:	83 ec 0c             	sub    esp,0xc
c001ccfc:	68 6e be 02 c0       	push   0xc002be6e
c001cd01:	e8 4d d7 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c001cd06:	83 c4 10             	add    esp,0x10
c001cd09:	31 d2                	xor    edx,edx
c001cd0b:	50                   	push   eax
c001cd0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd10:	52                   	push   edx
c001cd11:	50                   	push   eax
c001cd12:	53                   	push   ebx
c001cd13:	e8 da 66 ff ff       	call   c00133f2 <File::seek(unsigned long long)>
c001cd18:	5a                   	pop    edx
c001cd19:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cd1d:	e8 21 2b ff ff       	call   c000f843 <malloc>
c001cd22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cd26:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cd2a:	31 c9                	xor    ecx,ecx
c001cd2c:	5e                   	pop    esi
c001cd2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd2f:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cd33:	55                   	push   ebp
c001cd34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd38:	51                   	push   ecx
c001cd39:	52                   	push   edx
c001cd3a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cd3e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cd42:	53                   	push   ebx
c001cd43:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd46:	83 c4 14             	add    esp,0x14
c001cd49:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cd4d:	e8 f1 2a ff ff       	call   c000f843 <malloc>
c001cd52:	89 c6                	mov    esi,eax
c001cd54:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd56:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd59:	56                   	push   esi
c001cd5a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd5e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cd62:	51                   	push   ecx
c001cd63:	52                   	push   edx
c001cd64:	53                   	push   ebx
c001cd65:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd68:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd6c:	8b 15 20 17 03 c0    	mov    edx,DWORD PTR ds:0xc0031720
c001cd72:	83 c4 1c             	add    esp,0x1c
c001cd75:	c1 e8 04             	shr    eax,0x4
c001cd78:	89 04 95 a0 15 03 c0 	mov    DWORD PTR [edx*4-0x3ffcea60],eax
c001cd7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cd83:	31 d2                	xor    edx,edx
c001cd85:	52                   	push   edx
c001cd86:	50                   	push   eax
c001cd87:	53                   	push   ebx
c001cd88:	e8 65 66 ff ff       	call   c00133f2 <File::seek(unsigned long long)>
c001cd8d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cd8f:	31 d2                	xor    edx,edx
c001cd91:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd94:	56                   	push   esi
c001cd95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cd99:	52                   	push   edx
c001cd9a:	50                   	push   eax
c001cd9b:	53                   	push   ebx
c001cd9c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd9f:	83 c4 14             	add    esp,0x14
c001cda2:	53                   	push   ebx
c001cda3:	e8 ea 65 ff ff       	call   c0013392 <File::close()>
c001cda8:	5d                   	pop    ebp
c001cda9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cdad:	e8 a1 2a ff ff       	call   c000f853 <free>
c001cdb2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cdb5:	e8 99 2a ff ff       	call   c000f853 <free>
c001cdba:	a1 20 17 03 c0       	mov    eax,ds:0xc0031720
c001cdbf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cdc3:	8d 50 01             	lea    edx,[eax+0x1]
c001cdc6:	89 0c 85 a0 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce960],ecx
c001cdcd:	89 34 85 20 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce9e0],esi
c001cdd4:	89 15 20 17 03 c0    	mov    DWORD PTR ds:0xc0031720,edx
c001cdda:	83 c4 10             	add    esp,0x10
c001cddd:	b0 01                	mov    al,0x1
c001cddf:	83 c4 5c             	add    esp,0x5c
c001cde2:	5b                   	pop    ebx
c001cde3:	5e                   	pop    esi
c001cde4:	5f                   	pop    edi
c001cde5:	5d                   	pop    ebp
c001cde6:	c3                   	ret    

c001cde7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cde7:	55                   	push   ebp
c001cde8:	57                   	push   edi
c001cde9:	56                   	push   esi
c001cdea:	53                   	push   ebx
c001cdeb:	81 ec 68 03 00 00    	sub    esp,0x368
c001cdf1:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cdf8:	8b 1d 74 17 03 c0    	mov    ebx,DWORD PTR ds:0xc0031774
c001cdfe:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ce02:	68 14 01 00 00       	push   0x114
c001ce07:	e8 37 2a ff ff       	call   c000f843 <malloc>
c001ce0c:	83 c4 0c             	add    esp,0xc
c001ce0f:	89 c5                	mov    ebp,eax
c001ce11:	53                   	push   ebx
c001ce12:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001ce19:	50                   	push   eax
c001ce1a:	e8 b1 64 ff ff       	call   c00132d0 <File::File(char const*, Process*)>
c001ce1f:	5e                   	pop    esi
c001ce20:	5f                   	pop    edi
c001ce21:	6a 01                	push   0x1
c001ce23:	55                   	push   ebp
c001ce24:	e8 0b 65 ff ff       	call   c0013334 <File::open(FileOpenMode)>
c001ce29:	83 c4 10             	add    esp,0x10
c001ce2c:	85 c0                	test   eax,eax
c001ce2e:	0f 85 8d 06 00 00    	jne    c001d4c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ce34:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ce3c:	83 ec 0c             	sub    esp,0xc
c001ce3f:	6a 34                	push   0x34
c001ce41:	e8 fd 29 ff ff       	call   c000f843 <malloc>
c001ce46:	5b                   	pop    ebx
c001ce47:	89 c7                	mov    edi,eax
c001ce49:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001ce4d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ce50:	53                   	push   ebx
c001ce51:	57                   	push   edi
c001ce52:	6a 00                	push   0x0
c001ce54:	6a 34                	push   0x34
c001ce56:	55                   	push   ebp
c001ce57:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce5a:	83 c4 20             	add    esp,0x20
c001ce5d:	85 c0                	test   eax,eax
c001ce5f:	0f 85 5c 06 00 00    	jne    c001d4c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ce65:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ce6b:	0f 85 50 06 00 00    	jne    c001d4c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ce71:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ce74:	85 c0                	test   eax,eax
c001ce76:	0f 84 45 06 00 00    	je     c001d4c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ce7c:	31 d2                	xor    edx,edx
c001ce7e:	51                   	push   ecx
c001ce7f:	52                   	push   edx
c001ce80:	50                   	push   eax
c001ce81:	55                   	push   ebp
c001ce82:	e8 6b 65 ff ff       	call   c00133f2 <File::seek(unsigned long long)>
c001ce87:	83 c4 10             	add    esp,0x10
c001ce8a:	85 c0                	test   eax,eax
c001ce8c:	0f 85 2f 06 00 00    	jne    c001d4c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ce92:	83 ec 0c             	sub    esp,0xc
c001ce95:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001ce98:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce9c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001cea0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cea4:	0f af c2             	imul   eax,edx
c001cea7:	50                   	push   eax
c001cea8:	e8 96 29 ff ff       	call   c000f843 <malloc>
c001cead:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ceb0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ceb4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ceb7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cebb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cebf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cec3:	0f af c2             	imul   eax,edx
c001cec6:	99                   	cdq    
c001cec7:	52                   	push   edx
c001cec8:	50                   	push   eax
c001cec9:	55                   	push   ebp
c001ceca:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cecd:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001ced0:	83 c4 20             	add    esp,0x20
c001ced3:	85 c0                	test   eax,eax
c001ced5:	0f 84 e6 05 00 00    	je     c001d4c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cedb:	52                   	push   edx
c001cedc:	31 d2                	xor    edx,edx
c001cede:	52                   	push   edx
c001cedf:	50                   	push   eax
c001cee0:	55                   	push   ebp
c001cee1:	e8 0c 65 ff ff       	call   c00133f2 <File::seek(unsigned long long)>
c001cee6:	83 c4 10             	add    esp,0x10
c001cee9:	85 c0                	test   eax,eax
c001ceeb:	0f 85 d0 05 00 00    	jne    c001d4c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cef1:	83 ec 0c             	sub    esp,0xc
c001cef4:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cef8:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cefc:	31 f6                	xor    esi,esi
c001cefe:	0f af c2             	imul   eax,edx
c001cf01:	50                   	push   eax
c001cf02:	e8 3c 29 ff ff       	call   c000f843 <malloc>
c001cf07:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf0a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cf0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf11:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf15:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cf19:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cf1d:	0f af c2             	imul   eax,edx
c001cf20:	99                   	cdq    
c001cf21:	52                   	push   edx
c001cf22:	50                   	push   eax
c001cf23:	55                   	push   ebp
c001cf24:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf27:	83 c4 20             	add    esp,0x20
c001cf2a:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001cf2e:	0f 86 8a 00 00 00    	jbe    c001cfbe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001cf34:	0f b7 de             	movzx  ebx,si
c001cf37:	c1 e3 05             	shl    ebx,0x5
c001cf3a:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001cf3e:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001cf41:	75 75                	jne    c001cfb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001cf43:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cf46:	31 d2                	xor    edx,edx
c001cf48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cf4c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cf4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cf53:	50                   	push   eax
c001cf54:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001cf57:	52                   	push   edx
c001cf58:	50                   	push   eax
c001cf59:	55                   	push   ebp
c001cf5a:	e8 93 64 ff ff       	call   c00133f2 <File::seek(unsigned long long)>
c001cf5f:	83 c4 10             	add    esp,0x10
c001cf62:	85 c0                	test   eax,eax
c001cf64:	0f 85 57 05 00 00    	jne    c001d4c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf6a:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001cf71:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf74:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001cf78:	31 d2                	xor    edx,edx
c001cf7a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001cf7e:	83 ec 0c             	sub    esp,0xc
c001cf81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cf85:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf8c:	50                   	push   eax
c001cf8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf95:	52                   	push   edx
c001cf96:	50                   	push   eax
c001cf97:	55                   	push   ebp
c001cf98:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf9b:	83 c4 1c             	add    esp,0x1c
c001cf9e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cfa1:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001cfa4:	50                   	push   eax
c001cfa5:	6a 00                	push   0x0
c001cfa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfab:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001cfaf:	50                   	push   eax
c001cfb0:	e8 c3 37 fe ff       	call   c0000778 <memset>
c001cfb5:	83 c4 10             	add    esp,0x10
c001cfb8:	46                   	inc    esi
c001cfb9:	e9 6c ff ff ff       	jmp    c001cf2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001cfbe:	53                   	push   ebx
c001cfbf:	31 db                	xor    ebx,ebx
c001cfc1:	68 00 01 00 00       	push   0x100
c001cfc6:	6a 00                	push   0x0
c001cfc8:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cfcc:	50                   	push   eax
c001cfcd:	e8 a6 37 fe ff       	call   c0000778 <memset>
c001cfd2:	83 c4 0c             	add    esp,0xc
c001cfd5:	68 00 01 00 00       	push   0x100
c001cfda:	6a 00                	push   0x0
c001cfdc:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001cfe3:	50                   	push   eax
c001cfe4:	e8 8f 37 fe ff       	call   c0000778 <memset>
c001cfe9:	83 c4 10             	add    esp,0x10
c001cfec:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cff4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cffc:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d004:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d00c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d014:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d018:	0f 86 30 01 00 00    	jbe    c001d14e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d01e:	0f b7 f3             	movzx  esi,bx
c001d021:	6b f6 28             	imul   esi,esi,0x28
c001d024:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d028:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d02b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d02f:	52                   	push   edx
c001d030:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d034:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d038:	8b 06                	mov    eax,DWORD PTR [esi]
c001d03a:	6b d2 28             	imul   edx,edx,0x28
c001d03d:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d041:	31 d2                	xor    edx,edx
c001d043:	52                   	push   edx
c001d044:	50                   	push   eax
c001d045:	55                   	push   ebp
c001d046:	e8 a7 63 ff ff       	call   c00133f2 <File::seek(unsigned long long)>
c001d04b:	83 c4 0c             	add    esp,0xc
c001d04e:	6a 20                	push   0x20
c001d050:	6a 00                	push   0x0
c001d052:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d059:	51                   	push   ecx
c001d05a:	e8 19 37 fe ff       	call   c0000778 <memset>
c001d05f:	59                   	pop    ecx
c001d060:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d063:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d067:	52                   	push   edx
c001d068:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d06f:	51                   	push   ecx
c001d070:	6a 00                	push   0x0
c001d072:	6a 1f                	push   0x1f
c001d074:	55                   	push   ebp
c001d075:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d078:	83 c4 1c             	add    esp,0x1c
c001d07b:	6a 09                	push   0x9
c001d07d:	68 88 be 02 c0       	push   0xc002be88
c001d082:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d089:	51                   	push   ecx
c001d08a:	e8 b1 35 fe ff       	call   c0000640 <memcmp>
c001d08f:	83 c4 10             	add    esp,0x10
c001d092:	85 c0                	test   eax,eax
c001d094:	75 21                	jne    c001d0b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d09a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d09e:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d0a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d0a6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d0a9:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d0b0:	89 d0                	mov    eax,edx
c001d0b2:	40                   	inc    eax
c001d0b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d0b7:	50                   	push   eax
c001d0b8:	6a 09                	push   0x9
c001d0ba:	68 92 be 02 c0       	push   0xc002be92
c001d0bf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0c6:	50                   	push   eax
c001d0c7:	e8 74 35 fe ff       	call   c0000640 <memcmp>
c001d0cc:	83 c4 10             	add    esp,0x10
c001d0cf:	85 c0                	test   eax,eax
c001d0d1:	75 21                	jne    c001d0f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d0d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d0db:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d0df:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d0e3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d0e6:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d0ed:	89 d0                	mov    eax,edx
c001d0ef:	40                   	inc    eax
c001d0f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d0f4:	50                   	push   eax
c001d0f5:	50                   	push   eax
c001d0f6:	68 5e be 02 c0       	push   0xc002be5e
c001d0fb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d102:	50                   	push   eax
c001d103:	e8 b8 37 fe ff       	call   c00008c0 <strcmp>
c001d108:	83 c4 10             	add    esp,0x10
c001d10b:	85 c0                	test   eax,eax
c001d10d:	75 0f                	jne    c001d11e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d10f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d112:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d116:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d11a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d11e:	50                   	push   eax
c001d11f:	50                   	push   eax
c001d120:	68 66 be 02 c0       	push   0xc002be66
c001d125:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d12c:	50                   	push   eax
c001d12d:	e8 8e 37 fe ff       	call   c00008c0 <strcmp>
c001d132:	83 c4 10             	add    esp,0x10
c001d135:	85 c0                	test   eax,eax
c001d137:	75 0f                	jne    c001d148 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d139:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d13c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d140:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d144:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d148:	43                   	inc    ebx
c001d149:	e9 c6 fe ff ff       	jmp    c001d014 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d14e:	31 d2                	xor    edx,edx
c001d150:	50                   	push   eax
c001d151:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d155:	52                   	push   edx
c001d156:	50                   	push   eax
c001d157:	55                   	push   ebp
c001d158:	e8 95 62 ff ff       	call   c00133f2 <File::seek(unsigned long long)>
c001d15d:	58                   	pop    eax
c001d15e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d162:	e8 dc 26 ff ff       	call   c000f843 <malloc>
c001d167:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d16a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d16e:	31 d2                	xor    edx,edx
c001d170:	58                   	pop    eax
c001d171:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d175:	53                   	push   ebx
c001d176:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d17a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d17e:	52                   	push   edx
c001d17f:	50                   	push   eax
c001d180:	55                   	push   ebp
c001d181:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d184:	83 c4 14             	add    esp,0x14
c001d187:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d18b:	e8 b3 26 ff ff       	call   c000f843 <malloc>
c001d190:	31 d2                	xor    edx,edx
c001d192:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d196:	83 c4 0c             	add    esp,0xc
c001d199:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d19d:	52                   	push   edx
c001d19e:	50                   	push   eax
c001d19f:	55                   	push   ebp
c001d1a0:	e8 4d 62 ff ff       	call   c00133f2 <File::seek(unsigned long long)>
c001d1a5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d1a8:	31 d2                	xor    edx,edx
c001d1aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d1b1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d1b5:	52                   	push   edx
c001d1b6:	50                   	push   eax
c001d1b7:	55                   	push   ebp
c001d1b8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1bb:	83 c4 20             	add    esp,0x20
c001d1be:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d1c6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d1ca:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d1ce:	0f 84 f1 02 00 00    	je     c001d4c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d1d4:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d1db:	31 d2                	xor    edx,edx
c001d1dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1e1:	c1 e8 03             	shr    eax,0x3
c001d1e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d1e8:	51                   	push   ecx
c001d1e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1ed:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d1f1:	52                   	push   edx
c001d1f2:	50                   	push   eax
c001d1f3:	55                   	push   ebp
c001d1f4:	e8 f9 61 ff ff       	call   c00133f2 <File::seek(unsigned long long)>
c001d1f9:	5b                   	pop    ebx
c001d1fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1fe:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d205:	e8 39 26 ff ff       	call   c000f843 <malloc>
c001d20a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d20d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d211:	31 d2                	xor    edx,edx
c001d213:	5e                   	pop    esi
c001d214:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d218:	50                   	push   eax
c001d219:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d21d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d221:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d228:	52                   	push   edx
c001d229:	50                   	push   eax
c001d22a:	55                   	push   ebp
c001d22b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d22e:	83 c4 20             	add    esp,0x20
c001d231:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d239:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d23d:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d241:	0f 8d 62 02 00 00    	jge    c001d4a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d247:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d24b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d24f:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d254:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d257:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d25b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d25f:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d263:	89 d8                	mov    eax,ebx
c001d265:	c1 e8 08             	shr    eax,0x8
c001d268:	89 c6                	mov    esi,eax
c001d26a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d26e:	c1 e6 04             	shl    esi,0x4
c001d271:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d275:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d278:	85 d2                	test   edx,edx
c001d27a:	0f 85 bf 00 00 00    	jne    c001d33f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d280:	83 ec 0c             	sub    esp,0xc
c001d283:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d287:	03 06                	add    eax,DWORD PTR [esi]
c001d289:	50                   	push   eax
c001d28a:	e8 4b f8 ff ff       	call   c001cada <Thr::getAddressOfKernelSymbol(char const*)>
c001d28f:	83 c4 10             	add    esp,0x10
c001d292:	89 c2                	mov    edx,eax
c001d294:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d299:	85 c0                	test   eax,eax
c001d29b:	0f 85 9e 00 00 00    	jne    c001d33f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d2a1:	83 ec 0c             	sub    esp,0xc
c001d2a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2a8:	03 06                	add    eax,DWORD PTR [esi]
c001d2aa:	50                   	push   eax
c001d2ab:	e8 45 12 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d2b0:	83 c4 10             	add    esp,0x10
c001d2b3:	89 c2                	mov    edx,eax
c001d2b5:	85 c0                	test   eax,eax
c001d2b7:	0f 85 82 00 00 00    	jne    c001d33f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d2bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d2c1:	50                   	push   eax
c001d2c2:	50                   	push   eax
c001d2c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2c7:	03 06                	add    eax,DWORD PTR [esi]
c001d2c9:	50                   	push   eax
c001d2ca:	68 9c be 02 c0       	push   0xc002be9c
c001d2cf:	e8 a4 5a ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001d2d4:	58                   	pop    eax
c001d2d5:	5a                   	pop    edx
c001d2d6:	68 b6 be 02 c0       	push   0xc002beb6
c001d2db:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2e2:	50                   	push   eax
c001d2e3:	e8 4c 35 fe ff       	call   c0000834 <strcpy>
c001d2e8:	59                   	pop    ecx
c001d2e9:	58                   	pop    eax
c001d2ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2ee:	03 06                	add    eax,DWORD PTR [esi]
c001d2f0:	50                   	push   eax
c001d2f1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2f8:	50                   	push   eax
c001d2f9:	e8 76 36 fe ff       	call   c0000974 <strcat>
c001d2fe:	58                   	pop    eax
c001d2ff:	5a                   	pop    edx
c001d300:	68 4c bf 02 c0       	push   0xc002bf4c
c001d305:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d30c:	50                   	push   eax
c001d30d:	e8 62 36 fe ff       	call   c0000974 <strcat>
c001d312:	83 c4 10             	add    esp,0x10
c001d315:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d31a:	0f 84 43 01 00 00    	je     c001d463 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d320:	83 ec 0c             	sub    esp,0xc
c001d323:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d32a:	50                   	push   eax
c001d32b:	e8 23 d1 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c001d330:	83 c4 10             	add    esp,0x10
c001d333:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d337:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d33b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d33f:	80 fb 01             	cmp    bl,0x1
c001d342:	75 7d                	jne    c001d3c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d344:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d34b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d34f:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d353:	01 ce                	add    esi,ecx
c001d355:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d35b:	0f 94 c0             	sete   al
c001d35e:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d364:	0f 94 c3             	sete   bl
c001d367:	09 c3                	or     ebx,eax
c001d369:	8b 06                	mov    eax,DWORD PTR [esi]
c001d36b:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d370:	74 36                	je     c001d3a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d372:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d375:	84 db                	test   bl,bl
c001d377:	75 0a                	jne    c001d383 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d379:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d37d:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d381:	76 37                	jbe    c001d3ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d383:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d387:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d38c:	0f 84 d1 00 00 00    	je     c001d463 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d392:	83 ec 0c             	sub    esp,0xc
c001d395:	68 cd be 02 c0       	push   0xc002becd
c001d39a:	e8 b4 d0 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c001d39f:	83 c4 10             	add    esp,0x10
c001d3a2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d3a6:	eb 12                	jmp    c001d3ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d3a8:	01 c1                	add    ecx,eax
c001d3aa:	84 db                	test   bl,bl
c001d3ac:	75 0c                	jne    c001d3ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d3ae:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3b2:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d3b6:	77 02                	ja     c001d3ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d3b8:	01 d1                	add    ecx,edx
c001d3ba:	89 0e                	mov    DWORD PTR [esi],ecx
c001d3bc:	e9 df 00 00 00       	jmp    c001d4a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d3c1:	80 fb 02             	cmp    bl,0x2
c001d3c4:	75 71                	jne    c001d437 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d3c6:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d3cd:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d3d1:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d3d5:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d3db:	74 15                	je     c001d3f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d3dd:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d3e3:	74 0d                	je     c001d3f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d3e5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3e9:	83 e8 04             	sub    eax,0x4
c001d3ec:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d3f0:	76 1f                	jbe    c001d411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d3f2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d3f6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d3fb:	74 66                	je     c001d463 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d3fd:	83 ec 0c             	sub    esp,0xc
c001d400:	68 e9 be 02 c0       	push   0xc002bee9
c001d405:	e8 49 d0 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c001d40a:	83 c4 10             	add    esp,0x10
c001d40d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d411:	8b 06                	mov    eax,DWORD PTR [esi]
c001d413:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d418:	74 13                	je     c001d42d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d41a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d41e:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d425:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d429:	01 c8                	add    eax,ecx
c001d42b:	eb 04                	jmp    c001d431 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d42d:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d431:	01 c2                	add    edx,eax
c001d433:	89 16                	mov    DWORD PTR [esi],edx
c001d435:	eb 69                	jmp    c001d4a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d437:	0f b6 db             	movzx  ebx,bl
c001d43a:	50                   	push   eax
c001d43b:	50                   	push   eax
c001d43c:	53                   	push   ebx
c001d43d:	68 05 bf 02 c0       	push   0xc002bf05
c001d442:	e8 31 59 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001d447:	83 c4 10             	add    esp,0x10
c001d44a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d44f:	74 12                	je     c001d463 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d451:	83 ec 0c             	sub    esp,0xc
c001d454:	68 10 bf 02 c0       	push   0xc002bf10
c001d459:	e8 f5 cf ff ff       	call   c001a453 <Krnl::panic(char const*)>
c001d45e:	83 c4 10             	add    esp,0x10
c001d461:	eb 3d                	jmp    c001d4a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d463:	83 ec 0c             	sub    esp,0xc
c001d466:	55                   	push   ebp
c001d467:	e8 26 5f ff ff       	call   c0013392 <File::close()>
c001d46c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d46f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d472:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d475:	59                   	pop    ecx
c001d476:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d47a:	e8 d4 23 ff ff       	call   c000f853 <free>
c001d47f:	5b                   	pop    ebx
c001d480:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d484:	e8 ca 23 ff ff       	call   c000f853 <free>
c001d489:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d48c:	e8 c2 23 ff ff       	call   c000f853 <free>
c001d491:	5e                   	pop    esi
c001d492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d496:	e8 b8 23 ff ff       	call   c000f853 <free>
c001d49b:	83 c4 10             	add    esp,0x10
c001d49e:	eb 21                	jmp    c001d4c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d4a0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d4a4:	e9 90 fd ff ff       	jmp    c001d239 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d4a9:	83 ec 0c             	sub    esp,0xc
c001d4ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d4b0:	e8 9e 23 ff ff       	call   c000f853 <free>
c001d4b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d4b9:	83 c4 10             	add    esp,0x10
c001d4bc:	e9 05 fd ff ff       	jmp    c001d1c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d4c1:	31 c0                	xor    eax,eax
c001d4c3:	eb 33                	jmp    c001d4f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d4c5:	83 ec 0c             	sub    esp,0xc
c001d4c8:	55                   	push   ebp
c001d4c9:	e8 c4 5e ff ff       	call   c0013392 <File::close()>
c001d4ce:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d4d1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d4d4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d4d7:	58                   	pop    eax
c001d4d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d4dc:	e8 72 23 ff ff       	call   c000f853 <free>
c001d4e1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d4e4:	e8 6a 23 ff ff       	call   c000f853 <free>
c001d4e9:	5a                   	pop    edx
c001d4ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4ee:	e8 60 23 ff ff       	call   c000f853 <free>
c001d4f3:	83 c4 10             	add    esp,0x10
c001d4f6:	b0 01                	mov    al,0x1
c001d4f8:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d4fe:	5b                   	pop    ebx
c001d4ff:	5e                   	pop    esi
c001d500:	5f                   	pop    edi
c001d501:	5d                   	pop    ebp
c001d502:	c3                   	ret    

c001d503 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d503:	56                   	push   esi
c001d504:	31 d2                	xor    edx,edx
c001d506:	53                   	push   ebx
c001d507:	8b 1d 80 0f 03 c0    	mov    ebx,DWORD PTR ds:0xc0030f80
c001d50d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d511:	39 d3                	cmp    ebx,edx
c001d513:	7e 1b                	jle    c001d530 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d515:	8b 04 95 a0 11 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcee60]
c001d51c:	39 c8                	cmp    eax,ecx
c001d51e:	77 0d                	ja     c001d52d <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d520:	8b 34 95 a0 0f 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf060]
c001d527:	01 c6                	add    esi,eax
c001d529:	39 ce                	cmp    esi,ecx
c001d52b:	77 05                	ja     c001d532 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d52d:	42                   	inc    edx
c001d52e:	eb e1                	jmp    c001d511 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d530:	31 c0                	xor    eax,eax
c001d532:	5b                   	pop    ebx
c001d533:	5e                   	pop    esi
c001d534:	c3                   	ret    

c001d535 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d535:	53                   	push   ebx
c001d536:	31 c0                	xor    eax,eax
c001d538:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d53c:	8b 1d 80 0f 03 c0    	mov    ebx,DWORD PTR ds:0xc0030f80
c001d542:	39 c3                	cmp    ebx,eax
c001d544:	7e 22                	jle    c001d568 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d546:	8b 14 85 a0 11 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcee60]
c001d54d:	39 ca                	cmp    edx,ecx
c001d54f:	77 14                	ja     c001d565 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d551:	03 14 85 a0 0f 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf060]
c001d558:	39 ca                	cmp    edx,ecx
c001d55a:	76 09                	jbe    c001d565 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d55c:	8b 04 85 a0 13 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcec60]
c001d563:	eb 05                	jmp    c001d56a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d565:	40                   	inc    eax
c001d566:	eb da                	jmp    c001d542 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d568:	31 c0                	xor    eax,eax
c001d56a:	5b                   	pop    ebx
c001d56b:	c3                   	ret    

c001d56c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d56c:	53                   	push   ebx
c001d56d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d571:	53                   	push   ebx
c001d572:	e8 8c ff ff ff       	call   c001d503 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d577:	5a                   	pop    edx
c001d578:	31 d2                	xor    edx,edx
c001d57a:	85 c0                	test   eax,eax
c001d57c:	74 04                	je     c001d582 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d57e:	89 da                	mov    edx,ebx
c001d580:	29 c2                	sub    edx,eax
c001d582:	89 d0                	mov    eax,edx
c001d584:	5b                   	pop    ebx
c001d585:	c3                   	ret    

c001d586 <Thr::loadDLL(char const*, bool)>:
c001d586:	55                   	push   ebp
c001d587:	57                   	push   edi
c001d588:	56                   	push   esi
c001d589:	53                   	push   ebx
c001d58a:	81 ec 34 01 00 00    	sub    esp,0x134
c001d590:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d597:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d59e:	56                   	push   esi
c001d59f:	68 28 bf 02 c0       	push   0xc002bf28
c001d5a4:	e8 cf 57 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001d5a9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d5b0:	e8 8e 22 ff ff       	call   c000f843 <malloc>
c001d5b5:	83 c4 0c             	add    esp,0xc
c001d5b8:	89 c3                	mov    ebx,eax
c001d5ba:	ff 35 74 17 03 c0    	push   DWORD PTR ds:0xc0031774
c001d5c0:	56                   	push   esi
c001d5c1:	50                   	push   eax
c001d5c2:	e8 09 5d ff ff       	call   c00132d0 <File::File(char const*, Process*)>
c001d5c7:	83 c4 10             	add    esp,0x10
c001d5ca:	85 db                	test   ebx,ebx
c001d5cc:	75 3c                	jne    c001d60a <Thr::loadDLL(char const*, bool)+0x84>
c001d5ce:	89 e8                	mov    eax,ebp
c001d5d0:	84 c0                	test   al,al
c001d5d2:	0f 84 f0 01 00 00    	je     c001d7c8 <Thr::loadDLL(char const*, bool)+0x242>
c001d5d8:	50                   	push   eax
c001d5d9:	50                   	push   eax
c001d5da:	68 39 bf 02 c0       	push   0xc002bf39
c001d5df:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d5e3:	57                   	push   edi
c001d5e4:	e8 4b 32 fe ff       	call   c0000834 <strcpy>
c001d5e9:	58                   	pop    eax
c001d5ea:	5a                   	pop    edx
c001d5eb:	56                   	push   esi
c001d5ec:	57                   	push   edi
c001d5ed:	e8 82 33 fe ff       	call   c0000974 <strcat>
c001d5f2:	59                   	pop    ecx
c001d5f3:	58                   	pop    eax
c001d5f4:	68 4c bf 02 c0       	push   0xc002bf4c
c001d5f9:	57                   	push   edi
c001d5fa:	e8 75 33 fe ff       	call   c0000974 <strcat>
c001d5ff:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d602:	e8 4c ce ff ff       	call   c001a453 <Krnl::panic(char const*)>
c001d607:	83 c4 10             	add    esp,0x10
c001d60a:	50                   	push   eax
c001d60b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d60f:	50                   	push   eax
c001d610:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d614:	50                   	push   eax
c001d615:	53                   	push   ebx
c001d616:	e8 c5 5f ff ff       	call   c00135e0 <File::stat(unsigned long long*, bool*)>
c001d61b:	83 c4 10             	add    esp,0x10
c001d61e:	85 db                	test   ebx,ebx
c001d620:	74 0c                	je     c001d62e <Thr::loadDLL(char const*, bool)+0xa8>
c001d622:	83 ec 0c             	sub    esp,0xc
c001d625:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d627:	53                   	push   ebx
c001d628:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d62b:	83 c4 10             	add    esp,0x10
c001d62e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d633:	75 0a                	jne    c001d63f <Thr::loadDLL(char const*, bool)+0xb9>
c001d635:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d639:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d63d:	75 3c                	jne    c001d67b <Thr::loadDLL(char const*, bool)+0xf5>
c001d63f:	89 e8                	mov    eax,ebp
c001d641:	84 c0                	test   al,al
c001d643:	0f 84 67 01 00 00    	je     c001d7b0 <Thr::loadDLL(char const*, bool)+0x22a>
c001d649:	50                   	push   eax
c001d64a:	50                   	push   eax
c001d64b:	68 39 bf 02 c0       	push   0xc002bf39
c001d650:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d654:	53                   	push   ebx
c001d655:	e8 da 31 fe ff       	call   c0000834 <strcpy>
c001d65a:	58                   	pop    eax
c001d65b:	5a                   	pop    edx
c001d65c:	56                   	push   esi
c001d65d:	53                   	push   ebx
c001d65e:	e8 11 33 fe ff       	call   c0000974 <strcat>
c001d663:	59                   	pop    ecx
c001d664:	5f                   	pop    edi
c001d665:	68 4c bf 02 c0       	push   0xc002bf4c
c001d66a:	53                   	push   ebx
c001d66b:	e8 04 33 fe ff       	call   c0000974 <strcat>
c001d670:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d673:	e8 db cd ff ff       	call   c001a453 <Krnl::panic(char const*)>
c001d678:	83 c4 10             	add    esp,0x10
c001d67b:	e8 66 47 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c001d680:	51                   	push   ecx
c001d681:	68 03 08 00 00       	push   0x803
c001d686:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d68a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d68e:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d694:	83 d3 00             	adc    ebx,0x0
c001d697:	89 ca                	mov    edx,ecx
c001d699:	89 d1                	mov    ecx,edx
c001d69b:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d69f:	51                   	push   ecx
c001d6a0:	50                   	push   eax
c001d6a1:	e8 62 4c ff ff       	call   c0012308 <VAS::allocatePages(int, int)>
c001d6a6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d6aa:	89 c3                	mov    ebx,eax
c001d6ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d6b0:	05 ff 0f 00 00       	add    eax,0xfff
c001d6b5:	83 d2 00             	adc    edx,0x0
c001d6b8:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d6bc:	c1 ea 0c             	shr    edx,0xc
c001d6bf:	52                   	push   edx
c001d6c0:	50                   	push   eax
c001d6c1:	53                   	push   ebx
c001d6c2:	68 4e bf 02 c0       	push   0xc002bf4e
c001d6c7:	e8 ac 56 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001d6cc:	83 c4 14             	add    esp,0x14
c001d6cf:	56                   	push   esi
c001d6d0:	e8 bf 30 fe ff       	call   c0000794 <strlen>
c001d6d5:	8b 3d 80 0f 03 c0    	mov    edi,DWORD PTR ds:0xc0030f80
c001d6db:	40                   	inc    eax
c001d6dc:	89 04 24             	mov    DWORD PTR [esp],eax
c001d6df:	e8 5f 21 ff ff       	call   c000f843 <malloc>
c001d6e4:	89 04 bd a0 13 03 c0 	mov    DWORD PTR [edi*4-0x3ffcec60],eax
c001d6eb:	5f                   	pop    edi
c001d6ec:	58                   	pop    eax
c001d6ed:	a1 80 0f 03 c0       	mov    eax,ds:0xc0030f80
c001d6f2:	56                   	push   esi
c001d6f3:	ff 34 85 a0 13 03 c0 	push   DWORD PTR [eax*4-0x3ffcec60]
c001d6fa:	e8 35 31 fe ff       	call   c0000834 <strcpy>
c001d6ff:	a1 80 0f 03 c0       	mov    eax,ds:0xc0030f80
c001d704:	8d 50 01             	lea    edx,[eax+0x1]
c001d707:	89 1c 85 a0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee60],ebx
c001d70e:	89 15 80 0f 03 c0    	mov    DWORD PTR ds:0xc0030f80,edx
c001d714:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d718:	83 c4 0c             	add    esp,0xc
c001d71b:	89 14 85 a0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf060],edx
c001d722:	6a 01                	push   0x1
c001d724:	53                   	push   ebx
c001d725:	56                   	push   esi
c001d726:	e8 bc f6 ff ff       	call   c001cde7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d72b:	83 c4 10             	add    esp,0x10
c001d72e:	89 c7                	mov    edi,eax
c001d730:	84 c0                	test   al,al
c001d732:	0f 85 8c 00 00 00    	jne    c001d7c4 <Thr::loadDLL(char const*, bool)+0x23e>
c001d738:	89 e8                	mov    eax,ebp
c001d73a:	84 c0                	test   al,al
c001d73c:	74 76                	je     c001d7b4 <Thr::loadDLL(char const*, bool)+0x22e>
c001d73e:	83 ec 0c             	sub    esp,0xc
c001d741:	68 72 bf 02 c0       	push   0xc002bf72
c001d746:	e8 08 cd ff ff       	call   c001a453 <Krnl::panic(char const*)>
c001d74b:	83 c4 10             	add    esp,0x10
c001d74e:	eb 64                	jmp    c001d7b4 <Thr::loadDLL(char const*, bool)+0x22e>
c001d750:	e8 91 46 ff ff       	call   c0011de6 <Virt::getAKernelVAS()>
c001d755:	89 f5                	mov    ebp,esi
c001d757:	c1 e5 0c             	shl    ebp,0xc
c001d75a:	52                   	push   edx
c001d75b:	01 dd                	add    ebp,ebx
c001d75d:	52                   	push   edx
c001d75e:	55                   	push   ebp
c001d75f:	50                   	push   eax
c001d760:	e8 1d 47 ff ff       	call   c0011e82 <VAS::getPageTableEntry(unsigned long)>
c001d765:	83 c4 10             	add    esp,0x10
c001d768:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d76b:	75 0c                	jne    c001d779 <Thr::loadDLL(char const*, bool)+0x1f3>
c001d76d:	83 ec 0c             	sub    esp,0xc
c001d770:	55                   	push   ebp
c001d771:	e8 e0 26 ff ff       	call   c000fe56 <Phys::freePage(unsigned long)>
c001d776:	83 c4 10             	add    esp,0x10
c001d779:	46                   	inc    esi
c001d77a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d77e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d782:	05 ff 0f 00 00       	add    eax,0xfff
c001d787:	83 d2 00             	adc    edx,0x0
c001d78a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d78e:	c1 ea 0c             	shr    edx,0xc
c001d791:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d795:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d799:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d79d:	ba 00 00 00 00       	mov    edx,0x0
c001d7a2:	89 d0                	mov    eax,edx
c001d7a4:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d7a8:	72 a6                	jb     c001d750 <Thr::loadDLL(char const*, bool)+0x1ca>
c001d7aa:	89 f8                	mov    eax,edi
c001d7ac:	84 c0                	test   al,al
c001d7ae:	75 18                	jne    c001d7c8 <Thr::loadDLL(char const*, bool)+0x242>
c001d7b0:	31 db                	xor    ebx,ebx
c001d7b2:	eb 14                	jmp    c001d7c8 <Thr::loadDLL(char const*, bool)+0x242>
c001d7b4:	83 ec 0c             	sub    esp,0xc
c001d7b7:	68 91 bf 02 c0       	push   0xc002bf91
c001d7bc:	e8 92 cc ff ff       	call   c001a453 <Krnl::panic(char const*)>
c001d7c1:	83 c4 10             	add    esp,0x10
c001d7c4:	31 f6                	xor    esi,esi
c001d7c6:	eb b2                	jmp    c001d77a <Thr::loadDLL(char const*, bool)+0x1f4>
c001d7c8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d7ce:	89 d8                	mov    eax,ebx
c001d7d0:	5b                   	pop    ebx
c001d7d1:	5e                   	pop    esi
c001d7d2:	5f                   	pop    edi
c001d7d3:	5d                   	pop    ebp
c001d7d4:	c3                   	ret    

c001d7d5 <Thr::executeDLL(unsigned long, void*)>:
c001d7d5:	56                   	push   esi
c001d7d6:	53                   	push   ebx
c001d7d7:	52                   	push   edx
c001d7d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d7dc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d7e0:	85 db                	test   ebx,ebx
c001d7e2:	75 10                	jne    c001d7f4 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d7e4:	83 ec 0c             	sub    esp,0xc
c001d7e7:	68 ad bf 02 c0       	push   0xc002bfad
c001d7ec:	e8 62 cc ff ff       	call   c001a453 <Krnl::panic(char const*)>
c001d7f1:	83 c4 10             	add    esp,0x10
c001d7f4:	50                   	push   eax
c001d7f5:	50                   	push   eax
c001d7f6:	53                   	push   ebx
c001d7f7:	68 d7 bf 02 c0       	push   0xc002bfd7
c001d7fc:	e8 77 55 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001d801:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d805:	89 d8                	mov    eax,ebx
c001d807:	83 c4 14             	add    esp,0x14
c001d80a:	5b                   	pop    ebx
c001d80b:	5e                   	pop    esi
c001d80c:	ff e0                	jmp    eax

c001d80e <changeTSS>:
c001d80e:	83 ec 14             	sub    esp,0x14
c001d811:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d816:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d819:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d81e:	c1 e2 15             	shl    edx,0x15
c001d821:	29 d0                	sub    eax,edx
c001d823:	50                   	push   eax
c001d824:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c001d829:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d82f:	05 7c 11 00 00       	add    eax,0x117c
c001d834:	50                   	push   eax
c001d835:	e8 44 3c ff ff       	call   c001147e <TSS::setESP(unsigned long)>
c001d83a:	83 c4 1c             	add    esp,0x1c
c001d83d:	c3                   	ret    

c001d83e <Process::addArgs(char**)>:
c001d83e:	57                   	push   edi
c001d83f:	56                   	push   esi
c001d840:	53                   	push   ebx
c001d841:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d845:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d849:	c7 86 36 19 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1936],0x0
c001d853:	85 ff                	test   edi,edi
c001d855:	74 3d                	je     c001d894 <Process::addArgs(char**)+0x56>
c001d857:	8b 07                	mov    eax,DWORD PTR [edi]
c001d859:	85 c0                	test   eax,eax
c001d85b:	74 37                	je     c001d894 <Process::addArgs(char**)+0x56>
c001d85d:	31 db                	xor    ebx,ebx
c001d85f:	83 ec 0c             	sub    esp,0xc
c001d862:	50                   	push   eax
c001d863:	e8 2c 2f fe ff       	call   c0000794 <strlen>
c001d868:	40                   	inc    eax
c001d869:	89 04 24             	mov    DWORD PTR [esp],eax
c001d86c:	e8 d2 1f ff ff       	call   c000f843 <malloc>
c001d871:	89 84 9e 3a 19 00 00 	mov    DWORD PTR [esi+ebx*4+0x193a],eax
c001d878:	5a                   	pop    edx
c001d879:	59                   	pop    ecx
c001d87a:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d87d:	43                   	inc    ebx
c001d87e:	50                   	push   eax
c001d87f:	e8 b0 2f fe ff       	call   c0000834 <strcpy>
c001d884:	ff 86 36 19 00 00    	inc    DWORD PTR [esi+0x1936]
c001d88a:	83 c4 10             	add    esp,0x10
c001d88d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d890:	85 c0                	test   eax,eax
c001d892:	75 cb                	jne    c001d85f <Process::addArgs(char**)+0x21>
c001d894:	5b                   	pop    ebx
c001d895:	5e                   	pop    esi
c001d896:	5f                   	pop    edi
c001d897:	c3                   	ret    

c001d898 <Process::Process(char const*, Process*, char**)>:
c001d898:	56                   	push   esi
c001d899:	53                   	push   ebx
c001d89a:	83 ec 14             	sub    esp,0x14
c001d89d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8a1:	05 0c 02 00 00       	add    eax,0x20c
c001d8a6:	bb 07 00 00 00       	mov    ebx,0x7
c001d8ab:	89 c6                	mov    esi,eax
c001d8ad:	85 db                	test   ebx,ebx
c001d8af:	78 15                	js     c001d8c6 <Process::Process(char const*, Process*, char**)+0x2e>
c001d8b1:	83 ec 0c             	sub    esp,0xc
c001d8b4:	56                   	push   esi
c001d8b5:	e8 58 b2 00 00       	call   c0028b12 <ThreadControlBlock::ThreadControlBlock()>
c001d8ba:	83 c4 10             	add    esp,0x10
c001d8bd:	81 c6 e3 02 00 00    	add    esi,0x2e3
c001d8c3:	4b                   	dec    ebx
c001d8c4:	eb e7                	jmp    c001d8ad <Process::Process(char const*, Process*, char**)+0x15>
c001d8c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8ca:	c6 80 3e 1b 00 00 00 	mov    BYTE PTR [eax+0x1b3e],0x0
c001d8d1:	83 ec 0c             	sub    esp,0xc
c001d8d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d8d8:	e8 c7 c9 ff ff       	call   c001a2a4 <Krnl::newProcessEnv(Process*)>
c001d8dd:	83 c4 10             	add    esp,0x10
c001d8e0:	89 c2                	mov    edx,eax
c001d8e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8e6:	89 90 3a 1b 00 00    	mov    DWORD PTR [eax+0x1b3a],edx
c001d8ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8f0:	66 c7 80 24 19 00 00 00 00 	mov    WORD PTR [eax+0x1924],0x0
c001d8f9:	a1 90 d7 02 c0       	mov    eax,ds:0xc002d790
c001d8fe:	8d 50 01             	lea    edx,[eax+0x1]
c001d901:	89 15 90 d7 02 c0    	mov    DWORD PTR ds:0xc002d790,edx
c001d907:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d90b:	89 02                	mov    DWORD PTR [edx],eax
c001d90d:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d915:	83 ec 0c             	sub    esp,0xc
c001d918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d91c:	e8 22 1f ff ff       	call   c000f843 <malloc>
c001d921:	83 c4 10             	add    esp,0x10
c001d924:	89 c3                	mov    ebx,eax
c001d926:	83 ec 08             	sub    esp,0x8
c001d929:	6a 00                	push   0x0
c001d92b:	53                   	push   ebx
c001d92c:	e8 7f 4d ff ff       	call   c00126b0 <VAS::VAS(bool)>
c001d931:	83 c4 10             	add    esp,0x10
c001d934:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d938:	89 98 32 19 00 00    	mov    DWORD PTR [eax+0x1932],ebx
c001d93e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d942:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001d94c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d950:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d954:	89 90 2a 19 00 00    	mov    DWORD PTR [eax+0x192a],edx
c001d95a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d95e:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001d964:	85 c0                	test   eax,eax
c001d966:	74 42                	je     c001d9aa <Process::Process(char const*, Process*, char**)+0x112>
c001d968:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d96c:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001d972:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001d978:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d97c:	89 90 26 19 00 00    	mov    DWORD PTR [eax+0x1926],edx
c001d982:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d986:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001d98c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d992:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d996:	05 0c 01 00 00       	add    eax,0x10c
c001d99b:	83 ec 08             	sub    esp,0x8
c001d99e:	52                   	push   edx
c001d99f:	50                   	push   eax
c001d9a0:	e8 8f 2e fe ff       	call   c0000834 <strcpy>
c001d9a5:	83 c4 10             	add    esp,0x10
c001d9a8:	eb 63                	jmp    c001da0d <Process::Process(char const*, Process*, char**)+0x175>
c001d9aa:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001d9b2:	83 ec 0c             	sub    esp,0xc
c001d9b5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d9b9:	e8 85 1e ff ff       	call   c000f843 <malloc>
c001d9be:	83 c4 10             	add    esp,0x10
c001d9c1:	89 c3                	mov    ebx,eax
c001d9c3:	83 ec 08             	sub    esp,0x8
c001d9c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d9ca:	53                   	push   ebx
c001d9cb:	e8 ac 37 ff ff       	call   c001117c <VgaText::VgaText(char const*)>
c001d9d0:	83 c4 10             	add    esp,0x10
c001d9d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9d7:	89 98 26 19 00 00    	mov    DWORD PTR [eax+0x1926],ebx
c001d9dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9e1:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001d9e7:	83 ec 0c             	sub    esp,0xc
c001d9ea:	50                   	push   eax
c001d9eb:	e8 7f 2b ff ff       	call   c001056f <addToTerminalCycle(VgaText*)>
c001d9f0:	83 c4 10             	add    esp,0x10
c001d9f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9f7:	05 0c 01 00 00       	add    eax,0x10c
c001d9fc:	83 ec 08             	sub    esp,0x8
c001d9ff:	68 f6 bf 02 c0       	push   0xc002bff6
c001da04:	50                   	push   eax
c001da05:	e8 2a 2e fe ff       	call   c0000834 <strcpy>
c001da0a:	83 c4 10             	add    esp,0x10
c001da0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da11:	83 c0 0c             	add    eax,0xc
c001da14:	83 ec 08             	sub    esp,0x8
c001da17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da1b:	50                   	push   eax
c001da1c:	e8 13 2e fe ff       	call   c0000834 <strcpy>
c001da21:	83 c4 10             	add    esp,0x10
c001da24:	83 ec 08             	sub    esp,0x8
c001da27:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001da2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da2f:	e8 0a fe ff ff       	call   c001d83e <Process::addArgs(char**)>
c001da34:	83 c4 10             	add    esp,0x10
c001da37:	83 ec 08             	sub    esp,0x8
c001da3a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da3e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da42:	e8 6a ee ff ff       	call   c001c8b1 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001da47:	83 c4 10             	add    esp,0x10
c001da4a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001da4e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001da52:	83 f0 01             	xor    eax,0x1
c001da55:	88 c2                	mov    dl,al
c001da57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da5b:	88 90 3e 1b 00 00    	mov    BYTE PTR [eax+0x1b3e],dl
c001da61:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001da66:	83 ec 08             	sub    esp,0x8
c001da69:	50                   	push   eax
c001da6a:	68 f4 c0 02 c0       	push   0xc002c0f4
c001da6f:	e8 04 53 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001da74:	83 c4 10             	add    esp,0x10
c001da77:	90                   	nop
c001da78:	83 c4 14             	add    esp,0x14
c001da7b:	5b                   	pop    ebx
c001da7c:	5e                   	pop    esi
c001da7d:	c3                   	ret    

c001da7e <Process::Process(bool, char const*, Process*, char**)>:
c001da7e:	56                   	push   esi
c001da7f:	53                   	push   ebx
c001da80:	83 ec 24             	sub    esp,0x24
c001da83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001da87:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001da8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da8f:	05 0c 02 00 00       	add    eax,0x20c
c001da94:	bb 07 00 00 00       	mov    ebx,0x7
c001da99:	89 c6                	mov    esi,eax
c001da9b:	85 db                	test   ebx,ebx
c001da9d:	78 15                	js     c001dab4 <Process::Process(bool, char const*, Process*, char**)+0x36>
c001da9f:	83 ec 0c             	sub    esp,0xc
c001daa2:	56                   	push   esi
c001daa3:	e8 6a b0 00 00       	call   c0028b12 <ThreadControlBlock::ThreadControlBlock()>
c001daa8:	83 c4 10             	add    esp,0x10
c001daab:	81 c6 e3 02 00 00    	add    esi,0x2e3
c001dab1:	4b                   	dec    ebx
c001dab2:	eb e7                	jmp    c001da9b <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dab4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dab8:	c6 80 3e 1b 00 00 00 	mov    BYTE PTR [eax+0x1b3e],0x0
c001dabf:	83 ec 0c             	sub    esp,0xc
c001dac2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dac6:	e8 d9 c7 ff ff       	call   c001a2a4 <Krnl::newProcessEnv(Process*)>
c001dacb:	83 c4 10             	add    esp,0x10
c001dace:	89 c2                	mov    edx,eax
c001dad0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dad4:	89 90 3a 1b 00 00    	mov    DWORD PTR [eax+0x1b3a],edx
c001dada:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dade:	66 c7 80 24 19 00 00 00 00 	mov    WORD PTR [eax+0x1924],0x0
c001dae7:	a1 90 d7 02 c0       	mov    eax,ds:0xc002d790
c001daec:	8d 50 01             	lea    edx,[eax+0x1]
c001daef:	89 15 90 d7 02 c0    	mov    DWORD PTR ds:0xc002d790,edx
c001daf5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001daf9:	89 02                	mov    DWORD PTR [edx],eax
c001dafb:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001db03:	83 ec 0c             	sub    esp,0xc
c001db06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001db0a:	e8 34 1d ff ff       	call   c000f843 <malloc>
c001db0f:	83 c4 10             	add    esp,0x10
c001db12:	89 c3                	mov    ebx,eax
c001db14:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001db19:	83 ec 08             	sub    esp,0x8
c001db1c:	50                   	push   eax
c001db1d:	53                   	push   ebx
c001db1e:	e8 8d 4b ff ff       	call   c00126b0 <VAS::VAS(bool)>
c001db23:	83 c4 10             	add    esp,0x10
c001db26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db2a:	89 98 32 19 00 00    	mov    DWORD PTR [eax+0x1932],ebx
c001db30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db34:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001db3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db42:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001db46:	89 90 2a 19 00 00    	mov    DWORD PTR [eax+0x192a],edx
c001db4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db50:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001db56:	85 c0                	test   eax,eax
c001db58:	74 42                	je     c001db9c <Process::Process(bool, char const*, Process*, char**)+0x11e>
c001db5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db5e:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001db64:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001db6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db6e:	89 90 26 19 00 00    	mov    DWORD PTR [eax+0x1926],edx
c001db74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db78:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001db7e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001db84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db88:	05 0c 01 00 00       	add    eax,0x10c
c001db8d:	83 ec 08             	sub    esp,0x8
c001db90:	52                   	push   edx
c001db91:	50                   	push   eax
c001db92:	e8 9d 2c fe ff       	call   c0000834 <strcpy>
c001db97:	83 c4 10             	add    esp,0x10
c001db9a:	eb 63                	jmp    c001dbff <Process::Process(bool, char const*, Process*, char**)+0x181>
c001db9c:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dba4:	83 ec 0c             	sub    esp,0xc
c001dba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dbab:	e8 93 1c ff ff       	call   c000f843 <malloc>
c001dbb0:	83 c4 10             	add    esp,0x10
c001dbb3:	89 c3                	mov    ebx,eax
c001dbb5:	83 ec 08             	sub    esp,0x8
c001dbb8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dbbc:	53                   	push   ebx
c001dbbd:	e8 ba 35 ff ff       	call   c001117c <VgaText::VgaText(char const*)>
c001dbc2:	83 c4 10             	add    esp,0x10
c001dbc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbc9:	89 98 26 19 00 00    	mov    DWORD PTR [eax+0x1926],ebx
c001dbcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbd3:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001dbd9:	83 ec 0c             	sub    esp,0xc
c001dbdc:	50                   	push   eax
c001dbdd:	e8 8d 29 ff ff       	call   c001056f <addToTerminalCycle(VgaText*)>
c001dbe2:	83 c4 10             	add    esp,0x10
c001dbe5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbe9:	05 0c 01 00 00       	add    eax,0x10c
c001dbee:	83 ec 08             	sub    esp,0x8
c001dbf1:	68 f6 bf 02 c0       	push   0xc002bff6
c001dbf6:	50                   	push   eax
c001dbf7:	e8 38 2c fe ff       	call   c0000834 <strcpy>
c001dbfc:	83 c4 10             	add    esp,0x10
c001dbff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc03:	83 c0 0c             	add    eax,0xc
c001dc06:	83 ec 08             	sub    esp,0x8
c001dc09:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dc0d:	50                   	push   eax
c001dc0e:	e8 21 2c fe ff       	call   c0000834 <strcpy>
c001dc13:	83 c4 10             	add    esp,0x10
c001dc16:	83 ec 08             	sub    esp,0x8
c001dc19:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dc1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc21:	e8 18 fc ff ff       	call   c001d83e <Process::addArgs(char**)>
c001dc26:	83 c4 10             	add    esp,0x10
c001dc29:	90                   	nop
c001dc2a:	83 c4 24             	add    esp,0x24
c001dc2d:	5b                   	pop    ebx
c001dc2e:	5e                   	pop    esi
c001dc2f:	c3                   	ret    

c001dc30 <disableIRQs()>:
c001dc30:	fa                   	cli    
c001dc31:	ff 05 4c 17 03 c0    	inc    DWORD PTR ds:0xc003174c
c001dc37:	c3                   	ret    

c001dc38 <getIRQNestingLevel()>:
c001dc38:	a1 4c 17 03 c0       	mov    eax,ds:0xc003174c
c001dc3d:	c3                   	ret    

c001dc3e <enableIRQs()>:
c001dc3e:	a1 4c 17 03 c0       	mov    eax,ds:0xc003174c
c001dc43:	48                   	dec    eax
c001dc44:	a3 4c 17 03 c0       	mov    ds:0xc003174c,eax
c001dc49:	75 01                	jne    c001dc4c <enableIRQs()+0xe>
c001dc4b:	fb                   	sti    
c001dc4c:	c3                   	ret    

c001dc4d <lockScheduler()>:
c001dc4d:	eb e1                	jmp    c001dc30 <disableIRQs()>

c001dc4f <unlockScheduler()>:
c001dc4f:	eb ed                	jmp    c001dc3e <enableIRQs()>

c001dc51 <userModeEntryPoint(void*)>:
c001dc51:	83 ec 0c             	sub    esp,0xc
c001dc54:	e8 f6 ff ff ff       	call   c001dc4f <unlockScheduler()>
c001dc59:	fb                   	sti    
c001dc5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc5f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dc62:	8b 80 2e 19 00 00    	mov    eax,DWORD PTR [eax+0x192e]
c001dc68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dc6c:	83 c4 0c             	add    esp,0xc
c001dc6f:	e9 b6 26 fe ff       	jmp    c000032a <goToUsermode>

c001dc74 <lockStuff()>:
c001dc74:	e8 b7 ff ff ff       	call   c001dc30 <disableIRQs()>
c001dc79:	ff 05 48 17 03 c0    	inc    DWORD PTR ds:0xc0031748
c001dc7f:	c3                   	ret    

c001dc80 <taskStartupFunction>:
c001dc80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc85:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001dc88:	c3                   	ret    

c001dc89 <updateTimeUsed()>:
c001dc89:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c001dc8e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dc94:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dc9b:	74 50                	je     c001dced <updateTimeUsed()+0x64>
c001dc9d:	57                   	push   edi
c001dc9e:	56                   	push   esi
c001dc9f:	53                   	push   ebx
c001dca0:	0f 31                	rdtsc  
c001dca2:	89 c1                	mov    ecx,eax
c001dca4:	a3 88 17 03 c0       	mov    ds:0xc0031788,eax
c001dca9:	2b 0d 78 17 03 c0    	sub    ecx,DWORD PTR ds:0xc0031778
c001dcaf:	89 d3                	mov    ebx,edx
c001dcb1:	89 0d 80 17 03 c0    	mov    DWORD PTR ds:0xc0031780,ecx
c001dcb7:	1b 1d 7c 17 03 c0    	sbb    ebx,DWORD PTR ds:0xc003177c
c001dcbd:	a3 78 17 03 c0       	mov    ds:0xc0031778,eax
c001dcc2:	89 1d 84 17 03 c0    	mov    DWORD PTR ds:0xc0031784,ebx
c001dcc8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dccd:	89 15 8c 17 03 c0    	mov    DWORD PTR ds:0xc003178c,edx
c001dcd3:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001dcd6:	89 15 7c 17 03 c0    	mov    DWORD PTR ds:0xc003177c,edx
c001dcdc:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001dcdf:	01 f1                	add    ecx,esi
c001dce1:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001dce4:	11 fb                	adc    ebx,edi
c001dce6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001dce9:	5b                   	pop    ebx
c001dcea:	5e                   	pop    esi
c001dceb:	5f                   	pop    edi
c001dcec:	c3                   	ret    
c001dced:	c3                   	ret    

c001dcee <switchToThread(ThreadControlBlock*)>:
c001dcee:	53                   	push   ebx
c001dcef:	83 ec 08             	sub    esp,0x8
c001dcf2:	a1 48 17 03 c0       	mov    eax,ds:0xc0031748
c001dcf7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dcfb:	85 c0                	test   eax,eax
c001dcfd:	75 30                	jne    c001dd2f <switchToThread(ThreadControlBlock*)+0x41>
c001dcff:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001dd02:	3c ff                	cmp    al,0xff
c001dd04:	74 25                	je     c001dd2b <switchToThread(ThreadControlBlock*)+0x3d>
c001dd06:	0f b6 d0             	movzx  edx,al
c001dd09:	b8 84 03 00 00       	mov    eax,0x384
c001dd0e:	29 d0                	sub    eax,edx
c001dd10:	c1 e0 10             	shl    eax,0x10
c001dd13:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001dd16:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001dd19:	e8 6b ff ff ff       	call   c001dc89 <updateTimeUsed()>
c001dd1e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001dd22:	83 c4 08             	add    esp,0x8
c001dd25:	5b                   	pop    ebx
c001dd26:	e9 37 26 fe ff       	jmp    c0000362 <switchToThreadASM>
c001dd2b:	31 c0                	xor    eax,eax
c001dd2d:	eb e7                	jmp    c001dd16 <switchToThread(ThreadControlBlock*)+0x28>
c001dd2f:	c7 05 44 17 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031744,0x1
c001dd39:	83 c4 08             	add    esp,0x8
c001dd3c:	5b                   	pop    ebx
c001dd3d:	c3                   	ret    

c001dd3e <Semaphore::Semaphore(int)>:
c001dd3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dd46:	89 10                	mov    DWORD PTR [eax],edx
c001dd48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd4c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dd53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dd5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd62:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dd69:	90                   	nop
c001dd6a:	c3                   	ret    
c001dd6b:	90                   	nop

c001dd6c <Mutex::Mutex()>:
c001dd6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd70:	6a 01                	push   0x1
c001dd72:	50                   	push   eax
c001dd73:	e8 c6 ff ff ff       	call   c001dd3e <Semaphore::Semaphore(int)>
c001dd78:	83 c4 08             	add    esp,0x8
c001dd7b:	90                   	nop
c001dd7c:	c3                   	ret    
c001dd7d:	90                   	nop

c001dd7e <Process::createThread(void (*)(void*), void*, int)>:
c001dd7e:	55                   	push   ebp
c001dd7f:	31 c9                	xor    ecx,ecx
c001dd81:	57                   	push   edi
c001dd82:	56                   	push   esi
c001dd83:	53                   	push   ebx
c001dd84:	83 ec 1c             	sub    esp,0x1c
c001dd87:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dd8b:	66 8b b3 24 19 00 00 	mov    si,WORD PTR [ebx+0x1924]
c001dd92:	89 f2                	mov    edx,esi
c001dd94:	0f b7 c2             	movzx  eax,dx
c001dd97:	83 e2 01             	and    edx,0x1
c001dd9a:	74 14                	je     c001ddb0 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001dd9c:	d1 f8                	sar    eax,1
c001dd9e:	41                   	inc    ecx
c001dd9f:	89 c2                	mov    edx,eax
c001dda1:	83 f9 10             	cmp    ecx,0x10
c001dda4:	75 ee                	jne    c001dd94 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dda6:	83 c4 1c             	add    esp,0x1c
c001dda9:	31 c0                	xor    eax,eax
c001ddab:	5b                   	pop    ebx
c001ddac:	5e                   	pop    esi
c001ddad:	5f                   	pop    edi
c001ddae:	5d                   	pop    ebp
c001ddaf:	c3                   	ret    
c001ddb0:	83 ec 08             	sub    esp,0x8
c001ddb3:	b8 01 00 00 00       	mov    eax,0x1
c001ddb8:	d3 e0                	shl    eax,cl
c001ddba:	09 c6                	or     esi,eax
c001ddbc:	8b 83 32 19 00 00    	mov    eax,DWORD PTR [ebx+0x1932]
c001ddc2:	66 89 b3 24 19 00 00 	mov    WORD PTR [ebx+0x1924],si
c001ddc9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001ddcc:	8d 04 89             	lea    eax,[ecx+ecx*4]
c001ddcf:	8d 04 c1             	lea    eax,[ecx+eax*8]
c001ddd2:	8d 34 c0             	lea    esi,[eax+eax*8]
c001ddd5:	01 f6                	add    esi,esi
c001ddd7:	01 ce                	add    esi,ecx
c001ddd9:	8d 04 33             	lea    eax,[ebx+esi*1]
c001dddc:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001dde2:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001dde8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001ddec:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001ddf2:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001ddf8:	89 ca                	mov    edx,ecx
c001ddfa:	f7 da                	neg    edx
c001ddfc:	c1 e2 15             	shl    edx,0x15
c001ddff:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001de05:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001de0b:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001de0f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001de19:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001de1f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001de23:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001de29:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001de33:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001de3d:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001de44:	50                   	push   eax
c001de45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001de49:	68 68 17 03 c0       	push   0xc0031768
c001de4e:	e8 4d ab 00 00       	call   c00289a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001de53:	83 c4 10             	add    esp,0x10
c001de56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de5a:	83 c4 1c             	add    esp,0x1c
c001de5d:	5b                   	pop    ebx
c001de5e:	5e                   	pop    esi
c001de5f:	5f                   	pop    edi
c001de60:	5d                   	pop    ebp
c001de61:	c3                   	ret    

c001de62 <Process::createUserThread()>:
c001de62:	83 ec 0c             	sub    esp,0xc
c001de65:	68 80 00 00 00       	push   0x80
c001de6a:	6a 00                	push   0x0
c001de6c:	68 51 dc 01 c0       	push   0xc001dc51
c001de71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de75:	e8 04 ff ff ff       	call   c001dd7e <Process::createThread(void (*)(void*), void*, int)>
c001de7a:	83 c4 1c             	add    esp,0x1c
c001de7d:	c3                   	ret    

c001de7e <setupMultitasking(void (*)())>:
c001de7e:	56                   	push   esi
c001de7f:	53                   	push   ebx
c001de80:	53                   	push   ebx
c001de81:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001de85:	eb 10                	jmp    c001de97 <setupMultitasking(void (*)())+0x19>
c001de87:	83 ec 0c             	sub    esp,0xc
c001de8a:	68 68 17 03 c0       	push   0xc0031768
c001de8f:	e8 5e aa 00 00       	call   c00288f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001de94:	83 c4 10             	add    esp,0x10
c001de97:	83 ec 0c             	sub    esp,0xc
c001de9a:	68 68 17 03 c0       	push   0xc0031768
c001de9f:	e8 32 aa 00 00       	call   c00288d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dea4:	83 c4 10             	add    esp,0x10
c001dea7:	84 c0                	test   al,al
c001dea9:	74 dc                	je     c001de87 <setupMultitasking(void (*)())+0x9>
c001deab:	83 ec 0c             	sub    esp,0xc
c001deae:	68 3f 1b 00 00       	push   0x1b3f
c001deb3:	e8 8b 19 ff ff       	call   c000f843 <malloc>
c001deb8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001debf:	89 c3                	mov    ebx,eax
c001dec1:	6a 00                	push   0x0
c001dec3:	68 fa bf 02 c0       	push   0xc002bffa
c001dec8:	6a 01                	push   0x1
c001deca:	50                   	push   eax
c001decb:	e8 ae fb ff ff       	call   c001da7e <Process::Process(bool, char const*, Process*, char**)>
c001ded0:	83 c4 18             	add    esp,0x18
c001ded3:	89 1d 74 17 03 c0    	mov    DWORD PTR ds:0xc0031774,ebx
c001ded9:	ff b3 26 19 00 00    	push   DWORD PTR [ebx+0x1926]
c001dedf:	68 1c c1 02 c0       	push   0xc002c11c
c001dee4:	e8 8f 4e ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001dee9:	58                   	pop    eax
c001deea:	ff b3 26 19 00 00    	push   DWORD PTR [ebx+0x1926]
c001def0:	e8 fc 2d ff ff       	call   c0010cf1 <setActiveTerminal(VgaText*)>
c001def5:	66 83 8b 24 19 00 00 01 	or     WORD PTR [ebx+0x1924],0x1
c001defd:	8b 83 32 19 00 00    	mov    eax,DWORD PTR [ebx+0x1932]
c001df03:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001df06:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001df10:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001df16:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001df1c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001df26:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001df30:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001df3a:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001df40:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001df46:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001df50:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001df56:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001df60:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001df66:	5a                   	pop    edx
c001df67:	59                   	pop    ecx
c001df68:	68 f6 bf 02 c0       	push   0xc002bff6
c001df6d:	50                   	push   eax
c001df6e:	e8 c1 28 fe ff       	call   c0000834 <strcpy>
c001df73:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001df7a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001df7e:	83 c4 14             	add    esp,0x14
c001df81:	5b                   	pop    ebx
c001df82:	5e                   	pop    esi
c001df83:	e9 cc 23 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001df88 <schedule()>:
c001df88:	a1 48 17 03 c0       	mov    eax,ds:0xc0031748
c001df8d:	85 c0                	test   eax,eax
c001df8f:	74 0b                	je     c001df9c <schedule()+0x14>
c001df91:	c7 05 44 17 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031744,0x1
c001df9b:	c3                   	ret    
c001df9c:	53                   	push   ebx
c001df9d:	83 ec 14             	sub    esp,0x14
c001dfa0:	68 68 17 03 c0       	push   0xc0031768
c001dfa5:	e8 2c a9 00 00       	call   c00288d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dfaa:	83 c4 10             	add    esp,0x10
c001dfad:	84 c0                	test   al,al
c001dfaf:	75 38                	jne    c001dfe9 <schedule()+0x61>
c001dfb1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dfb6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dfb9:	4a                   	dec    edx
c001dfba:	74 32                	je     c001dfee <schedule()+0x66>
c001dfbc:	83 ec 0c             	sub    esp,0xc
c001dfbf:	68 68 17 03 c0       	push   0xc0031768
c001dfc4:	e8 05 a9 00 00       	call   c00288ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dfc9:	c7 04 24 68 17 03 c0 	mov    DWORD PTR [esp],0xc0031768
c001dfd0:	89 c3                	mov    ebx,eax
c001dfd2:	e8 1b a9 00 00       	call   c00288f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dfd7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001dfde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dfe1:	e8 08 fd ff ff       	call   c001dcee <switchToThread(ThreadControlBlock*)>
c001dfe6:	83 c4 10             	add    esp,0x10
c001dfe9:	83 c4 08             	add    esp,0x8
c001dfec:	5b                   	pop    ebx
c001dfed:	c3                   	ret    
c001dfee:	83 ec 08             	sub    esp,0x8
c001dff1:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001dff8:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dffe:	68 68 17 03 c0       	push   0xc0031768
c001e003:	e8 98 a9 00 00       	call   c00289a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e008:	83 c4 10             	add    esp,0x10
c001e00b:	eb af                	jmp    c001dfbc <schedule()+0x34>

c001e00d <unlockStuff()>:
c001e00d:	a1 48 17 03 c0       	mov    eax,ds:0xc0031748
c001e012:	48                   	dec    eax
c001e013:	a3 48 17 03 c0       	mov    ds:0xc0031748,eax
c001e018:	75 09                	jne    c001e023 <unlockStuff()+0x16>
c001e01a:	a1 44 17 03 c0       	mov    eax,ds:0xc0031744
c001e01f:	85 c0                	test   eax,eax
c001e021:	75 05                	jne    c001e028 <unlockStuff()+0x1b>
c001e023:	e9 16 fc ff ff       	jmp    c001dc3e <enableIRQs()>
c001e028:	83 ec 0c             	sub    esp,0xc
c001e02b:	c7 05 44 17 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031744,0x0
c001e035:	e8 4e ff ff ff       	call   c001df88 <schedule()>
c001e03a:	83 c4 0c             	add    esp,0xc
c001e03d:	e9 fc fb ff ff       	jmp    c001dc3e <enableIRQs()>

c001e042 <Semaphore::tryAcquire()>:
c001e042:	83 ec 0c             	sub    esp,0xc
c001e045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e049:	e8 26 fc ff ff       	call   c001dc74 <lockStuff()>
c001e04e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e051:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e053:	7c 0b                	jl     c001e060 <Semaphore::tryAcquire()+0x1e>
c001e055:	e8 b3 ff ff ff       	call   c001e00d <unlockStuff()>
c001e05a:	31 c0                	xor    eax,eax
c001e05c:	83 c4 0c             	add    esp,0xc
c001e05f:	c3                   	ret    
c001e060:	42                   	inc    edx
c001e061:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e064:	e8 a4 ff ff ff       	call   c001e00d <unlockStuff()>
c001e069:	b0 01                	mov    al,0x1
c001e06b:	83 c4 0c             	add    esp,0xc
c001e06e:	c3                   	ret    
c001e06f:	90                   	nop

c001e070 <Semaphore::assertLocked(char const*)>:
c001e070:	83 ec 0c             	sub    esp,0xc
c001e073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e077:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e07b:	e8 f4 fb ff ff       	call   c001dc74 <lockStuff()>
c001e080:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e082:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e085:	7c 05                	jl     c001e08c <Semaphore::assertLocked(char const*)+0x1c>
c001e087:	83 c4 0c             	add    esp,0xc
c001e08a:	eb 81                	jmp    c001e00d <unlockStuff()>
c001e08c:	83 ec 0c             	sub    esp,0xc
c001e08f:	52                   	push   edx
c001e090:	e8 be c3 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c001e095:	83 c4 10             	add    esp,0x10
c001e098:	83 c4 0c             	add    esp,0xc
c001e09b:	e9 6d ff ff ff       	jmp    c001e00d <unlockStuff()>

c001e0a0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e0a0:	83 ec 0c             	sub    esp,0xc
c001e0a3:	e8 90 fb ff ff       	call   c001dc38 <getIRQNestingLevel()>
c001e0a8:	83 ec 08             	sub    esp,0x8
c001e0ab:	50                   	push   eax
c001e0ac:	68 50 c1 02 c0       	push   0xc002c150
c001e0b1:	e8 c2 4c ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001e0b6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e0ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0bf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e0c2:	e8 c1 fe ff ff       	call   c001df88 <schedule()>
c001e0c7:	e8 83 fb ff ff       	call   c001dc4f <unlockScheduler()>
c001e0cc:	e8 67 fb ff ff       	call   c001dc38 <getIRQNestingLevel()>
c001e0d1:	5a                   	pop    edx
c001e0d2:	59                   	pop    ecx
c001e0d3:	50                   	push   eax
c001e0d4:	68 84 c1 02 c0       	push   0xc002c184
c001e0d9:	e8 9a 4c ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001e0de:	83 c4 1c             	add    esp,0x1c
c001e0e1:	c3                   	ret    

c001e0e2 <blockTask(TaskState)>:
c001e0e2:	83 ec 0c             	sub    esp,0xc
c001e0e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e0e9:	e8 5f fb ff ff       	call   c001dc4d <lockScheduler()>
c001e0ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0f3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e0f6:	e8 8d fe ff ff       	call   c001df88 <schedule()>
c001e0fb:	83 c4 0c             	add    esp,0xc
c001e0fe:	e9 4c fb ff ff       	jmp    c001dc4f <unlockScheduler()>

c001e103 <waitTask(int, int*, int)>:
c001e103:	83 ec 18             	sub    esp,0x18
c001e106:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e10b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e10f:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e112:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e116:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e11b:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e11e:	6a 07                	push   0x7
c001e120:	e8 bd ff ff ff       	call   c001e0e2 <blockTask(TaskState)>
c001e125:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e12a:	83 c4 10             	add    esp,0x10
c001e12d:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e130:	85 d2                	test   edx,edx
c001e132:	74 0a                	je     c001e13e <waitTask(int, int*, int)+0x3b>
c001e134:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e137:	89 02                	mov    DWORD PTR [edx],eax
c001e139:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e13e:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e141:	83 c4 0c             	add    esp,0xc
c001e144:	c3                   	ret    

c001e145 <nanoSleepUntil(unsigned long long)>:
c001e145:	83 ec 0c             	sub    esp,0xc
c001e148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e14c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e150:	3b 05 90 e8 02 c0    	cmp    eax,DWORD PTR ds:0xc002e890
c001e156:	89 d1                	mov    ecx,edx
c001e158:	1b 0d 94 e8 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e894
c001e15e:	73 04                	jae    c001e164 <nanoSleepUntil(unsigned long long)+0x1f>
c001e160:	83 c4 0c             	add    esp,0xc
c001e163:	c3                   	ret    
c001e164:	e8 0b fb ff ff       	call   c001dc74 <lockStuff()>
c001e169:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e16f:	83 ec 08             	sub    esp,0x8
c001e172:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e175:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e178:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e17e:	68 5c 17 03 c0       	push   0xc003175c
c001e183:	e8 18 a8 00 00       	call   c00289a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e188:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e18f:	e8 4e ff ff ff       	call   c001e0e2 <blockTask(TaskState)>
c001e194:	83 c4 1c             	add    esp,0x1c
c001e197:	e9 71 fe ff ff       	jmp    c001e00d <unlockStuff()>

c001e19c <nanoSleep(unsigned long long)>:
c001e19c:	a1 90 e8 02 c0       	mov    eax,ds:0xc002e890
c001e1a1:	8b 15 94 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e894
c001e1a7:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e1ab:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e1af:	eb 94                	jmp    c001e145 <nanoSleepUntil(unsigned long long)>

c001e1b1 <sleep(unsigned long long)>:
c001e1b1:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e1b9:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e1be:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e1c2:	01 ca                	add    edx,ecx
c001e1c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e1c8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e1cc:	eb ce                	jmp    c001e19c <nanoSleep(unsigned long long)>

c001e1ce <Semaphore::acquire()>:
c001e1ce:	83 ec 0c             	sub    esp,0xc
c001e1d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1d5:	e8 9a fa ff ff       	call   c001dc74 <lockStuff()>
c001e1da:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e1dd:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e1df:	7d 0c                	jge    c001e1ed <Semaphore::acquire()+0x1f>
c001e1e1:	42                   	inc    edx
c001e1e2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e1e5:	83 c4 0c             	add    esp,0xc
c001e1e8:	e9 20 fe ff ff       	jmp    c001e00d <unlockStuff()>
c001e1ed:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e1f3:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e1fa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e1fd:	85 d2                	test   edx,edx
c001e1ff:	74 2a                	je     c001e22b <Semaphore::acquire()+0x5d>
c001e201:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e204:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e20a:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e20d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e213:	83 ec 0c             	sub    esp,0xc
c001e216:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e219:	6a 05                	push   0x5
c001e21b:	e8 c2 fe ff ff       	call   c001e0e2 <blockTask(TaskState)>
c001e220:	83 c4 10             	add    esp,0x10
c001e223:	83 c4 0c             	add    esp,0xc
c001e226:	e9 e2 fd ff ff       	jmp    c001e00d <unlockStuff()>
c001e22b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e231:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e234:	eb d7                	jmp    c001e20d <Semaphore::acquire()+0x3f>

c001e236 <taskReturned>:
c001e236:	83 ec 18             	sub    esp,0x18
c001e239:	68 b8 c1 02 c0       	push   0xc002c1b8
c001e23e:	e8 10 c2 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c001e243:	83 c4 10             	add    esp,0x10
c001e246:	83 ec 0c             	sub    esp,0xc
c001e249:	6a 02                	push   0x2
c001e24b:	e8 92 fe ff ff       	call   c001e0e2 <blockTask(TaskState)>
c001e250:	e8 f8 f9 ff ff       	call   c001dc4d <lockScheduler()>
c001e255:	e8 2e fd ff ff       	call   c001df88 <schedule()>
c001e25a:	e8 f0 f9 ff ff       	call   c001dc4f <unlockScheduler()>
c001e25f:	83 c4 10             	add    esp,0x10
c001e262:	eb e2                	jmp    c001e246 <taskReturned+0x10>

c001e264 <unblockTask(ThreadControlBlock*)>:
c001e264:	53                   	push   ebx
c001e265:	83 ec 08             	sub    esp,0x8
c001e268:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e26c:	e8 dc f9 ff ff       	call   c001dc4d <lockScheduler()>
c001e271:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e274:	85 c0                	test   eax,eax
c001e276:	74 5c                	je     c001e2d4 <unblockTask(ThreadControlBlock*)+0x70>
c001e278:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e27b:	48                   	dec    eax
c001e27c:	74 31                	je     c001e2af <unblockTask(ThreadControlBlock*)+0x4b>
c001e27e:	83 ec 0c             	sub    esp,0xc
c001e281:	68 68 17 03 c0       	push   0xc0031768
c001e286:	e8 43 a6 00 00       	call   c00288ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e28b:	83 c4 10             	add    esp,0x10
c001e28e:	85 c0                	test   eax,eax
c001e290:	75 17                	jne    c001e2a9 <unblockTask(ThreadControlBlock*)+0x45>
c001e292:	eb 65                	jmp    c001e2f9 <unblockTask(ThreadControlBlock*)+0x95>
c001e294:	83 ec 08             	sub    esp,0x8
c001e297:	50                   	push   eax
c001e298:	68 68 17 03 c0       	push   0xc0031768
c001e29d:	e8 06 a9 00 00       	call   c0028ba8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e2a2:	83 c4 10             	add    esp,0x10
c001e2a5:	85 c0                	test   eax,eax
c001e2a7:	74 50                	je     c001e2f9 <unblockTask(ThreadControlBlock*)+0x95>
c001e2a9:	39 c3                	cmp    ebx,eax
c001e2ab:	75 e7                	jne    c001e294 <unblockTask(ThreadControlBlock*)+0x30>
c001e2ad:	eb 1c                	jmp    c001e2cb <unblockTask(ThreadControlBlock*)+0x67>
c001e2af:	83 ec 0c             	sub    esp,0xc
c001e2b2:	68 a8 c2 02 c0       	push   0xc002c2a8
c001e2b7:	e8 bc 4a ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001e2bc:	c7 04 24 34 c2 02 c0 	mov    DWORD PTR [esp],0xc002c234
c001e2c3:	e8 b0 4a ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001e2c8:	83 c4 10             	add    esp,0x10
c001e2cb:	83 c4 08             	add    esp,0x8
c001e2ce:	5b                   	pop    ebx
c001e2cf:	e9 7b f9 ff ff       	jmp    c001dc4f <unlockScheduler()>
c001e2d4:	83 ec 0c             	sub    esp,0xc
c001e2d7:	68 ec c1 02 c0       	push   0xc002c1ec
c001e2dc:	e8 97 4a ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001e2e1:	c7 04 24 34 c2 02 c0 	mov    DWORD PTR [esp],0xc002c234
c001e2e8:	e8 8b 4a ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001e2ed:	83 c4 10             	add    esp,0x10
c001e2f0:	83 c4 08             	add    esp,0x8
c001e2f3:	5b                   	pop    ebx
c001e2f4:	e9 56 f9 ff ff       	jmp    c001dc4f <unlockScheduler()>
c001e2f9:	83 ec 08             	sub    esp,0x8
c001e2fc:	53                   	push   ebx
c001e2fd:	68 68 17 03 c0       	push   0xc0031768
c001e302:	e8 99 a6 00 00       	call   c00289a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e307:	83 c4 10             	add    esp,0x10
c001e30a:	83 c4 08             	add    esp,0x8
c001e30d:	5b                   	pop    ebx
c001e30e:	e9 3c f9 ff ff       	jmp    c001dc4f <unlockScheduler()>

c001e313 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e313:	55                   	push   ebp
c001e314:	57                   	push   edi
c001e315:	56                   	push   esi
c001e316:	53                   	push   ebx
c001e317:	83 ec 1c             	sub    esp,0x1c
c001e31a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e31e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e321:	8b b8 36 19 00 00    	mov    edi,DWORD PTR [eax+0x1936]
c001e327:	85 ff                	test   edi,edi
c001e329:	7e 20                	jle    c001e34b <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e32b:	31 f6                	xor    esi,esi
c001e32d:	83 ec 0c             	sub    esp,0xc
c001e330:	ff b4 b0 3a 19 00 00 	push   DWORD PTR [eax+esi*4+0x193a]
c001e337:	46                   	inc    esi
c001e338:	e8 16 15 ff ff       	call   c000f853 <free>
c001e33d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e340:	83 c4 10             	add    esp,0x10
c001e343:	39 b0 36 19 00 00    	cmp    DWORD PTR [eax+0x1936],esi
c001e349:	7f e2                	jg     c001e32d <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e34b:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001e355:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e35a:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e35d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e360:	d3 c0                	rol    eax,cl
c001e362:	66 21 82 24 19 00 00 	and    WORD PTR [edx+0x1924],ax
c001e369:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e36c:	89 f7                	mov    edi,esi
c001e36e:	66 83 be 24 19 00 00 00 	cmp    WORD PTR [esi+0x1924],0x0
c001e376:	0f 85 75 01 00 00    	jne    c001e4f1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001e37c:	8b ae 3a 1b 00 00    	mov    ebp,DWORD PTR [esi+0x1b3a]
c001e382:	85 ed                	test   ebp,ebp
c001e384:	74 1b                	je     c001e3a1 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e386:	83 ec 0c             	sub    esp,0xc
c001e389:	55                   	push   ebp
c001e38a:	e8 31 be ff ff       	call   c001a1c0 <EnvVarContainer::~EnvVarContainer()>
c001e38f:	59                   	pop    ecx
c001e390:	5e                   	pop    esi
c001e391:	6a 0c                	push   0xc
c001e393:	55                   	push   ebp
c001e394:	e8 ff 48 ff ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c001e399:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e39c:	83 c4 10             	add    esp,0x10
c001e39f:	89 f7                	mov    edi,esi
c001e3a1:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e3a7:	85 c0                	test   eax,eax
c001e3a9:	0f 84 ab 00 00 00    	je     c001e45a <cleanupTerminatedTask(ThreadControlBlock*)+0x147>
c001e3af:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e3b2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e3b6:	31 c9                	xor    ecx,ecx
c001e3b8:	eb 10                	jmp    c001e3ca <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e3ba:	41                   	inc    ecx
c001e3bb:	83 f9 10             	cmp    ecx,0x10
c001e3be:	0f 84 96 00 00 00    	je     c001e45a <cleanupTerminatedTask(ThreadControlBlock*)+0x147>
c001e3c4:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e3ca:	0f b7 90 24 19 00 00 	movzx  edx,WORD PTR [eax+0x1924]
c001e3d1:	d3 fa                	sar    edx,cl
c001e3d3:	83 e2 01             	and    edx,0x1
c001e3d6:	74 e2                	je     c001e3ba <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e3d8:	8d 14 89             	lea    edx,[ecx+ecx*4]
c001e3db:	8d 14 d1             	lea    edx,[ecx+edx*8]
c001e3de:	8d 14 d2             	lea    edx,[edx+edx*8]
c001e3e1:	01 d2                	add    edx,edx
c001e3e3:	01 ca                	add    edx,ecx
c001e3e5:	01 d0                	add    eax,edx
c001e3e7:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e3ed:	83 fd 07             	cmp    ebp,0x7
c001e3f0:	75 c8                	jne    c001e3ba <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e3f2:	05 40 02 00 00       	add    eax,0x240
c001e3f7:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e3fa:	83 fd ff             	cmp    ebp,0xffffffff
c001e3fd:	0f 8c 08 01 00 00    	jl     c001e50b <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c001e403:	0f 84 b9 01 00 00    	je     c001e5c2 <cleanupTerminatedTask(ThreadControlBlock*)+0x2af>
c001e409:	85 ed                	test   ebp,ebp
c001e40b:	0f 84 a0 01 00 00    	je     c001e5b1 <cleanupTerminatedTask(ThreadControlBlock*)+0x29e>
c001e411:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e413:	75 a5                	jne    c001e3ba <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e415:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e41b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e41f:	01 d0                	add    eax,edx
c001e421:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e425:	83 ec 0c             	sub    esp,0xc
c001e428:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e42e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e431:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001e437:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e43e:	50                   	push   eax
c001e43f:	e8 20 fe ff ff       	call   c001e264 <unblockTask(ThreadControlBlock*)>
c001e444:	83 c4 10             	add    esp,0x10
c001e447:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e44a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e44e:	89 f7                	mov    edi,esi
c001e450:	41                   	inc    ecx
c001e451:	83 f9 10             	cmp    ecx,0x10
c001e454:	0f 85 6a ff ff ff    	jne    c001e3c4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e45a:	8b 86 26 19 00 00    	mov    eax,DWORD PTR [esi+0x1926]
c001e460:	85 c0                	test   eax,eax
c001e462:	74 5d                	je     c001e4c1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ae>
c001e464:	8b 96 2a 19 00 00    	mov    edx,DWORD PTR [esi+0x192a]
c001e46a:	3b 82 26 19 00 00    	cmp    eax,DWORD PTR [edx+0x1926]
c001e470:	74 4f                	je     c001e4c1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ae>
c001e472:	83 ec 0c             	sub    esp,0xc
c001e475:	68 68 17 03 c0       	push   0xc0031768
c001e47a:	e8 4f a4 00 00       	call   c00288ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e47f:	c7 04 24 68 17 03 c0 	mov    DWORD PTR [esp],0xc0031768
c001e486:	89 c7                	mov    edi,eax
c001e488:	e8 49 a4 00 00       	call   c00288d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e48d:	83 c4 10             	add    esp,0x10
c001e490:	84 c0                	test   al,al
c001e492:	0f 84 e4 00 00 00    	je     c001e57c <cleanupTerminatedTask(ThreadControlBlock*)+0x269>
c001e498:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e49b:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001e4a1:	85 d2                	test   edx,edx
c001e4a3:	74 0f                	je     c001e4b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a1>
c001e4a5:	83 ec 0c             	sub    esp,0xc
c001e4a8:	8b 02                	mov    eax,DWORD PTR [edx]
c001e4aa:	52                   	push   edx
c001e4ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e4ae:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4b1:	83 c4 10             	add    esp,0x10
c001e4b4:	c7 80 26 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1926],0x0
c001e4be:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e4c1:	8b 9f 32 19 00 00    	mov    ebx,DWORD PTR [edi+0x1932]
c001e4c7:	85 db                	test   ebx,ebx
c001e4c9:	74 16                	je     c001e4e1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ce>
c001e4cb:	83 ec 0c             	sub    esp,0xc
c001e4ce:	53                   	push   ebx
c001e4cf:	e8 c8 3b ff ff       	call   c001209c <VAS::~VAS()>
c001e4d4:	58                   	pop    eax
c001e4d5:	5a                   	pop    edx
c001e4d6:	6a 14                	push   0x14
c001e4d8:	53                   	push   ebx
c001e4d9:	e8 ba 47 ff ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c001e4de:	83 c4 10             	add    esp,0x10
c001e4e1:	83 ec 0c             	sub    esp,0xc
c001e4e4:	68 01 c0 02 c0       	push   0xc002c001
c001e4e9:	e8 8a 48 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001e4ee:	83 c4 10             	add    esp,0x10
c001e4f1:	83 ec 08             	sub    esp,0x8
c001e4f4:	68 3f 1b 00 00       	push   0x1b3f
c001e4f9:	68 0f c0 02 c0       	push   0xc002c00f
c001e4fe:	e8 75 48 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001e503:	83 c4 2c             	add    esp,0x2c
c001e506:	5b                   	pop    ebx
c001e507:	5e                   	pop    esi
c001e508:	5f                   	pop    edi
c001e509:	5d                   	pop    ebp
c001e50a:	c3                   	ret    
c001e50b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e50f:	83 ec 0c             	sub    esp,0xc
c001e512:	68 ec c2 02 c0       	push   0xc002c2ec
c001e517:	e8 37 bf ff ff       	call   c001a453 <Krnl::panic(char const*)>
c001e51c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e51f:	83 c4 10             	add    esp,0x10
c001e522:	89 f7                	mov    edi,esi
c001e524:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e528:	e9 8d fe ff ff       	jmp    c001e3ba <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e52d:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001e533:	39 82 26 19 00 00    	cmp    DWORD PTR [edx+0x1926],eax
c001e539:	75 1c                	jne    c001e557 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e53b:	83 ec 0c             	sub    esp,0xc
c001e53e:	68 54 c3 02 c0       	push   0xc002c354
c001e543:	e8 30 48 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001e548:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e54f:	e8 8e fb ff ff       	call   c001e0e2 <blockTask(TaskState)>
c001e554:	83 c4 10             	add    esp,0x10
c001e557:	83 ec 08             	sub    esp,0x8
c001e55a:	56                   	push   esi
c001e55b:	68 68 17 03 c0       	push   0xc0031768
c001e560:	e8 3b a4 00 00       	call   c00289a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e565:	c7 04 24 68 17 03 c0 	mov    DWORD PTR [esp],0xc0031768
c001e56c:	e8 5d a3 00 00       	call   c00288ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e571:	83 c4 10             	add    esp,0x10
c001e574:	39 f8                	cmp    eax,edi
c001e576:	0f 84 1c ff ff ff    	je     c001e498 <cleanupTerminatedTask(ThreadControlBlock*)+0x185>
c001e57c:	83 ec 0c             	sub    esp,0xc
c001e57f:	68 68 17 03 c0       	push   0xc0031768
c001e584:	e8 45 a3 00 00       	call   c00288ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e589:	c7 04 24 68 17 03 c0 	mov    DWORD PTR [esp],0xc0031768
c001e590:	89 c6                	mov    esi,eax
c001e592:	e8 5b a3 00 00       	call   c00288f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e597:	83 c4 10             	add    esp,0x10
c001e59a:	39 f3                	cmp    ebx,esi
c001e59c:	74 b9                	je     c001e557 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e59e:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e5a1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5a4:	39 82 2a 19 00 00    	cmp    DWORD PTR [edx+0x192a],eax
c001e5aa:	75 ab                	jne    c001e557 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e5ac:	e9 7c ff ff ff       	jmp    c001e52d <cleanupTerminatedTask(ThreadControlBlock*)+0x21a>
c001e5b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5b5:	83 ec 0c             	sub    esp,0xc
c001e5b8:	68 20 c3 02 c0       	push   0xc002c320
c001e5bd:	e9 55 ff ff ff       	jmp    c001e517 <cleanupTerminatedTask(ThreadControlBlock*)+0x204>
c001e5c2:	8b 36                	mov    esi,DWORD PTR [esi]
c001e5c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5c8:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e5cb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5ce:	8b b8 2a 19 00 00    	mov    edi,DWORD PTR [eax+0x192a]
c001e5d4:	01 d7                	add    edi,edx
c001e5d6:	89 f8                	mov    eax,edi
c001e5d8:	e9 44 fe ff ff       	jmp    c001e421 <cleanupTerminatedTask(ThreadControlBlock*)+0x10e>

c001e5dd <cleanerTaskFunction(void*)>:
c001e5dd:	53                   	push   ebx
c001e5de:	83 ec 08             	sub    esp,0x8
c001e5e1:	e8 69 f6 ff ff       	call   c001dc4f <unlockScheduler()>
c001e5e6:	e8 62 f6 ff ff       	call   c001dc4d <lockScheduler()>
c001e5eb:	80 3d 2c 17 03 c0 00 	cmp    BYTE PTR ds:0xc003172c,0x0
c001e5f2:	0f 85 8e 00 00 00    	jne    c001e686 <cleanerTaskFunction(void*)+0xa9>
c001e5f8:	83 ec 0c             	sub    esp,0xc
c001e5fb:	6a 02                	push   0x2
c001e5fd:	e8 9e fa ff ff       	call   c001e0a0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e602:	83 c4 10             	add    esp,0x10
c001e605:	c6 05 2c 17 03 c0 00 	mov    BYTE PTR ds:0xc003172c,0x0
c001e60c:	e8 63 f6 ff ff       	call   c001dc74 <lockStuff()>
c001e611:	e8 37 f6 ff ff       	call   c001dc4d <lockScheduler()>
c001e616:	83 ec 0c             	sub    esp,0xc
c001e619:	68 50 17 03 c0       	push   0xc0031750
c001e61e:	e8 b3 a2 00 00       	call   c00288d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e623:	83 c4 10             	add    esp,0x10
c001e626:	84 c0                	test   al,al
c001e628:	75 40                	jne    c001e66a <cleanerTaskFunction(void*)+0x8d>
c001e62a:	83 ec 0c             	sub    esp,0xc
c001e62d:	68 50 17 03 c0       	push   0xc0031750
c001e632:	e8 97 a2 00 00       	call   c00288ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e637:	c7 04 24 50 17 03 c0 	mov    DWORD PTR [esp],0xc0031750
c001e63e:	89 c3                	mov    ebx,eax
c001e640:	e8 ad a2 00 00       	call   c00288f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e645:	c7 04 24 25 c0 02 c0 	mov    DWORD PTR [esp],0xc002c025
c001e64c:	e8 27 47 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001e651:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e654:	e8 ba fc ff ff       	call   c001e313 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e659:	c7 04 24 3e c0 02 c0 	mov    DWORD PTR [esp],0xc002c03e
c001e660:	e8 13 47 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001e665:	83 c4 10             	add    esp,0x10
c001e668:	eb ac                	jmp    c001e616 <cleanerTaskFunction(void*)+0x39>
c001e66a:	e8 e0 f5 ff ff       	call   c001dc4f <unlockScheduler()>
c001e66f:	e8 99 f9 ff ff       	call   c001e00d <unlockStuff()>
c001e674:	e8 d4 f5 ff ff       	call   c001dc4d <lockScheduler()>
c001e679:	80 3d 2c 17 03 c0 00 	cmp    BYTE PTR ds:0xc003172c,0x0
c001e680:	0f 84 72 ff ff ff    	je     c001e5f8 <cleanerTaskFunction(void*)+0x1b>
c001e686:	e8 c4 f5 ff ff       	call   c001dc4f <unlockScheduler()>
c001e68b:	e9 75 ff ff ff       	jmp    c001e605 <cleanerTaskFunction(void*)+0x28>

c001e690 <terminateTask(int)>:
c001e690:	83 ec 14             	sub    esp,0x14
c001e693:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e698:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e69b:	83 c0 0c             	add    eax,0xc
c001e69e:	50                   	push   eax
c001e69f:	68 7c c3 02 c0       	push   0xc002c37c
c001e6a4:	e8 cf 46 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001e6a9:	e8 c6 f5 ff ff       	call   c001dc74 <lockStuff()>
c001e6ae:	e8 9a f5 ff ff       	call   c001dc4d <lockScheduler()>
c001e6b3:	c7 04 24 51 c0 02 c0 	mov    DWORD PTR [esp],0xc002c051
c001e6ba:	e8 b9 46 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001e6bf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e6c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6c8:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e6cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6d0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e6d3:	5a                   	pop    edx
c001e6d4:	59                   	pop    ecx
c001e6d5:	50                   	push   eax
c001e6d6:	68 50 17 03 c0       	push   0xc0031750
c001e6db:	e8 c0 a2 00 00       	call   c00289a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e6e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6e5:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e6ec:	c7 04 24 6b c0 02 c0 	mov    DWORD PTR [esp],0xc002c06b
c001e6f3:	e8 80 46 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001e6f8:	83 c4 10             	add    esp,0x10
c001e6fb:	a1 28 17 03 c0       	mov    eax,ds:0xc0031728
c001e700:	85 c0                	test   eax,eax
c001e702:	74 5a                	je     c001e75e <terminateTask(int)+0xce>
c001e704:	83 ec 0c             	sub    esp,0xc
c001e707:	68 85 c0 02 c0       	push   0xc002c085
c001e70c:	e8 67 46 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001e711:	58                   	pop    eax
c001e712:	c6 05 2c 17 03 c0 01 	mov    BYTE PTR ds:0xc003172c,0x1
c001e719:	ff 35 28 17 03 c0    	push   DWORD PTR ds:0xc0031728
c001e71f:	e8 40 fb ff ff       	call   c001e264 <unblockTask(ThreadControlBlock*)>
c001e724:	c7 04 24 9f c0 02 c0 	mov    DWORD PTR [esp],0xc002c09f
c001e72b:	e8 48 46 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001e730:	83 c4 10             	add    esp,0x10
c001e733:	e8 17 f5 ff ff       	call   c001dc4f <unlockScheduler()>
c001e738:	e8 d0 f8 ff ff       	call   c001e00d <unlockStuff()>
c001e73d:	83 ec 0c             	sub    esp,0xc
c001e740:	68 d7 c0 02 c0       	push   0xc002c0d7
c001e745:	e8 2e 46 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001e74a:	83 c4 10             	add    esp,0x10
c001e74d:	e8 fb f4 ff ff       	call   c001dc4d <lockScheduler()>
c001e752:	e8 31 f8 ff ff       	call   c001df88 <schedule()>
c001e757:	e8 f3 f4 ff ff       	call   c001dc4f <unlockScheduler()>
c001e75c:	eb ef                	jmp    c001e74d <terminateTask(int)+0xbd>
c001e75e:	83 ec 0c             	sub    esp,0xc
c001e761:	68 b9 c0 02 c0       	push   0xc002c0b9
c001e766:	e8 0d 46 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001e76b:	83 c4 10             	add    esp,0x10
c001e76e:	eb c3                	jmp    c001e733 <terminateTask(int)+0xa3>

c001e770 <Thr::terminateFromIRQ(int)>:
c001e770:	83 ec 18             	sub    esp,0x18
c001e773:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e777:	e8 14 ff ff ff       	call   c001e690 <terminateTask(int)>

c001e77c <Semaphore::release()>:
c001e77c:	83 ec 0c             	sub    esp,0xc
c001e77f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e783:	e8 ec f4 ff ff       	call   c001dc74 <lockStuff()>
c001e788:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e78b:	85 d2                	test   edx,edx
c001e78d:	74 1a                	je     c001e7a9 <Semaphore::release()+0x2d>
c001e78f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e792:	83 ec 0c             	sub    esp,0xc
c001e795:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e798:	52                   	push   edx
c001e799:	e8 c6 fa ff ff       	call   c001e264 <unblockTask(ThreadControlBlock*)>
c001e79e:	83 c4 10             	add    esp,0x10
c001e7a1:	83 c4 0c             	add    esp,0xc
c001e7a4:	e9 64 f8 ff ff       	jmp    c001e00d <unlockStuff()>
c001e7a9:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e7ac:	83 c4 0c             	add    esp,0xc
c001e7af:	e9 59 f8 ff ff       	jmp    c001e00d <unlockStuff()>

c001e7b4 <__static_initialization_and_destruction_0(int, int)>:
c001e7b4:	83 ec 0c             	sub    esp,0xc
c001e7b7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e7bc:	0f 85 88 00 00 00    	jne    c001e84a <__static_initialization_and_destruction_0(int, int)+0x96>
c001e7c2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e7ca:	75 7e                	jne    c001e84a <__static_initialization_and_destruction_0(int, int)+0x96>
c001e7cc:	83 ec 0c             	sub    esp,0xc
c001e7cf:	68 68 17 03 c0       	push   0xc0031768
c001e7d4:	e8 77 a3 00 00       	call   c0028b50 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e7d9:	83 c4 10             	add    esp,0x10
c001e7dc:	83 ec 04             	sub    esp,0x4
c001e7df:	68 34 d1 02 c0       	push   0xc002d134
c001e7e4:	68 68 17 03 c0       	push   0xc0031768
c001e7e9:	68 10 8b 02 c0       	push   0xc0028b10
c001e7ee:	e8 1f 44 ff ff       	call   c0012c12 <__cxa_atexit>
c001e7f3:	83 c4 10             	add    esp,0x10
c001e7f6:	83 ec 0c             	sub    esp,0xc
c001e7f9:	68 5c 17 03 c0       	push   0xc003175c
c001e7fe:	e8 4d a3 00 00       	call   c0028b50 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e803:	83 c4 10             	add    esp,0x10
c001e806:	83 ec 04             	sub    esp,0x4
c001e809:	68 34 d1 02 c0       	push   0xc002d134
c001e80e:	68 5c 17 03 c0       	push   0xc003175c
c001e813:	68 10 8b 02 c0       	push   0xc0028b10
c001e818:	e8 f5 43 ff ff       	call   c0012c12 <__cxa_atexit>
c001e81d:	83 c4 10             	add    esp,0x10
c001e820:	83 ec 0c             	sub    esp,0xc
c001e823:	68 50 17 03 c0       	push   0xc0031750
c001e828:	e8 23 a3 00 00       	call   c0028b50 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e82d:	83 c4 10             	add    esp,0x10
c001e830:	83 ec 04             	sub    esp,0x4
c001e833:	68 34 d1 02 c0       	push   0xc002d134
c001e838:	68 50 17 03 c0       	push   0xc0031750
c001e83d:	68 10 8b 02 c0       	push   0xc0028b10
c001e842:	e8 cb 43 ff ff       	call   c0012c12 <__cxa_atexit>
c001e847:	83 c4 10             	add    esp,0x10
c001e84a:	90                   	nop
c001e84b:	83 c4 0c             	add    esp,0xc
c001e84e:	c3                   	ret    

c001e84f <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e84f:	83 ec 0c             	sub    esp,0xc
c001e852:	83 ec 08             	sub    esp,0x8
c001e855:	68 ff ff 00 00       	push   0xffff
c001e85a:	6a 01                	push   0x1
c001e85c:	e8 53 ff ff ff       	call   c001e7b4 <__static_initialization_and_destruction_0(int, int)>
c001e861:	83 c4 10             	add    esp,0x10
c001e864:	83 c4 0c             	add    esp,0xc
c001e867:	c3                   	ret    

c001e868 <Vm::inbv(unsigned short)>:
c001e868:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e86c:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e871:	75 06                	jne    c001e879 <Vm::inbv(unsigned short)+0x11>
c001e873:	a0 ac 17 03 c0       	mov    al,ds:0xc00317ac
c001e878:	c3                   	ret    
c001e879:	ec                   	in     al,dx
c001e87a:	c3                   	ret    

c001e87b <Vm::outbv(unsigned short, unsigned char)>:
c001e87b:	53                   	push   ebx
c001e87c:	83 ec 08             	sub    esp,0x8
c001e87f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e883:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e887:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e88c:	75 38                	jne    c001e8c6 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e88e:	0f b6 c3             	movzx  eax,bl
c001e891:	51                   	push   ecx
c001e892:	51                   	push   ecx
c001e893:	50                   	push   eax
c001e894:	68 9b c3 02 c0       	push   0xc002c39b
c001e899:	e8 da 44 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001e89e:	8b 15 ac 17 03 c0    	mov    edx,DWORD PTR ds:0xc00317ac
c001e8a4:	83 c4 10             	add    esp,0x10
c001e8a7:	8d 42 01             	lea    eax,[edx+0x1]
c001e8aa:	88 9a c0 17 03 c0    	mov    BYTE PTR [edx-0x3ffce840],bl
c001e8b0:	a3 ac 17 03 c0       	mov    ds:0xc00317ac,eax
c001e8b5:	83 f8 20             	cmp    eax,0x20
c001e8b8:	75 0f                	jne    c001e8c9 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e8ba:	c7 05 ac 17 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00317ac,0x1f
c001e8c4:	eb 03                	jmp    c001e8c9 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e8c6:	88 d8                	mov    al,bl
c001e8c8:	ee                   	out    dx,al
c001e8c9:	83 c4 08             	add    esp,0x8
c001e8cc:	5b                   	pop    ebx
c001e8cd:	c3                   	ret    

c001e8ce <Vm::realToLinear(unsigned short, unsigned short)>:
c001e8ce:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8d3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e8d8:	c1 e0 04             	shl    eax,0x4
c001e8db:	01 d0                	add    eax,edx
c001e8dd:	c3                   	ret    

c001e8de <Vm::getSegment(unsigned int)>:
c001e8de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8e2:	c1 e8 10             	shr    eax,0x10
c001e8e5:	c3                   	ret    

c001e8e6 <Vm::getOffset(unsigned int)>:
c001e8e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e8ea:	c3                   	ret    

c001e8eb <Vm::mainloop2()>:
c001e8eb:	83 ec 0c             	sub    esp,0xc
c001e8ee:	e8 5a f3 ff ff       	call   c001dc4d <lockScheduler()>
c001e8f3:	83 ec 0c             	sub    esp,0xc
c001e8f6:	c6 05 a5 17 03 c0 01 	mov    BYTE PTR ds:0xc00317a5,0x1
c001e8fd:	6a 02                	push   0x2
c001e8ff:	e8 9c f7 ff ff       	call   c001e0a0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e904:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e909:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e90d:	52                   	push   edx
c001e90e:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e912:	52                   	push   edx
c001e913:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e917:	52                   	push   edx
c001e918:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e91c:	50                   	push   eax
c001e91d:	e8 d8 19 fe ff       	call   c00002fa <goToVM86>
c001e922:	83 c4 2c             	add    esp,0x2c
c001e925:	c3                   	ret    

c001e926 <Vm::mainVm8086Loop(void*)>:
c001e926:	83 ec 0c             	sub    esp,0xc
c001e929:	e8 21 f3 ff ff       	call   c001dc4f <unlockScheduler()>
c001e92e:	83 c4 0c             	add    esp,0xc
c001e931:	eb b8                	jmp    c001e8eb <Vm::mainloop2()>

c001e933 <Vm::mainloop3(unsigned long)>:
c001e933:	53                   	push   ebx
c001e934:	83 ec 08             	sub    esp,0x8
c001e937:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e93b:	e8 0d f3 ff ff       	call   c001dc4d <lockScheduler()>
c001e940:	83 ec 0c             	sub    esp,0xc
c001e943:	89 1d a0 17 03 c0    	mov    DWORD PTR ds:0xc00317a0,ebx
c001e949:	6a 02                	push   0x2
c001e94b:	c6 05 a4 17 03 c0 01 	mov    BYTE PTR ds:0xc00317a4,0x1
c001e952:	e8 49 f7 ff ff       	call   c001e0a0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e957:	83 c4 18             	add    esp,0x18
c001e95a:	5b                   	pop    ebx
c001e95b:	eb 8e                	jmp    c001e8eb <Vm::mainloop2()>

c001e95d <Vm::initialise8086()>:
c001e95d:	83 ec 0c             	sub    esp,0xc
c001e960:	68 80 00 00 00       	push   0x80
c001e965:	6a 00                	push   0x0
c001e967:	68 26 e9 01 c0       	push   0xc001e926
c001e96c:	ff 35 74 17 03 c0    	push   DWORD PTR ds:0xc0031774
c001e972:	e8 07 f4 ff ff       	call   c001dd7e <Process::createThread(void (*)(void*), void*, int)>
c001e977:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e97e:	a3 a8 17 03 c0       	mov    ds:0xc00317a8,eax
c001e983:	68 00 01 00 00       	push   0x100
c001e988:	a1 74 17 03 c0       	mov    eax,ds:0xc0031774
c001e98d:	6a 00                	push   0x0
c001e98f:	6a 00                	push   0x0
c001e991:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001e997:	e8 60 3b ff ff       	call   c00124fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e99c:	83 c4 2c             	add    esp,0x2c
c001e99f:	c3                   	ret    

c001e9a0 <Vm::finish8086()>:
c001e9a0:	53                   	push   ebx
c001e9a1:	83 ec 08             	sub    esp,0x8
c001e9a4:	e8 a4 f2 ff ff       	call   c001dc4d <lockScheduler()>
c001e9a9:	80 3d a4 17 03 c0 00 	cmp    BYTE PTR ds:0xc00317a4,0x0
c001e9b0:	75 0c                	jne    c001e9be <Vm::finish8086()+0x1e>
c001e9b2:	e8 d1 f5 ff ff       	call   c001df88 <schedule()>
c001e9b7:	e8 93 f2 ff ff       	call   c001dc4f <unlockScheduler()>
c001e9bc:	eb e6                	jmp    c001e9a4 <Vm::finish8086()+0x4>
c001e9be:	83 ec 0c             	sub    esp,0xc
c001e9c1:	8b 1d a0 17 03 c0    	mov    ebx,DWORD PTR ds:0xc00317a0
c001e9c7:	ff 35 a8 17 03 c0    	push   DWORD PTR ds:0xc00317a8
c001e9cd:	c6 05 a4 17 03 c0 00 	mov    BYTE PTR ds:0xc00317a4,0x0
c001e9d4:	e8 8b f8 ff ff       	call   c001e264 <unblockTask(ThreadControlBlock*)>
c001e9d9:	e8 71 f2 ff ff       	call   c001dc4f <unlockScheduler()>
c001e9de:	89 d8                	mov    eax,ebx
c001e9e0:	83 c4 18             	add    esp,0x18
c001e9e3:	5b                   	pop    ebx
c001e9e4:	c3                   	ret    

c001e9e5 <Vm::getOutput8086(unsigned char*)>:
c001e9e5:	83 ec 10             	sub    esp,0x10
c001e9e8:	ff 35 ac 17 03 c0    	push   DWORD PTR ds:0xc00317ac
c001e9ee:	68 c0 17 03 c0       	push   0xc00317c0
c001e9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9f7:	e8 48 1d fe ff       	call   c0000744 <memcpy>
c001e9fc:	a1 ac 17 03 c0       	mov    eax,ds:0xc00317ac
c001ea01:	c7 05 ac 17 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00317ac,0x0
c001ea0b:	83 c4 1c             	add    esp,0x1c
c001ea0e:	c3                   	ret    

c001ea0f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ea0f:	55                   	push   ebp
c001ea10:	57                   	push   edi
c001ea11:	56                   	push   esi
c001ea12:	53                   	push   ebx
c001ea13:	83 ec 2c             	sub    esp,0x2c
c001ea16:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ea1a:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ea1e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ea22:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ea26:	e8 22 f2 ff ff       	call   c001dc4d <lockScheduler()>
c001ea2b:	a0 a5 17 03 c0       	mov    al,ds:0xc00317a5
c001ea30:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ea34:	84 c0                	test   al,al
c001ea36:	75 0c                	jne    c001ea44 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ea38:	e8 4b f5 ff ff       	call   c001df88 <schedule()>
c001ea3d:	e8 0d f2 ff ff       	call   c001dc4f <unlockScheduler()>
c001ea42:	eb e2                	jmp    c001ea26 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ea44:	a1 a8 17 03 c0       	mov    eax,ds:0xc00317a8
c001ea49:	c7 05 ac 17 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00317ac,0x0
c001ea53:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ea57:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ea5b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ea5f:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ea63:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ea67:	50                   	push   eax
c001ea68:	6a 20                	push   0x20
c001ea6a:	6a 00                	push   0x0
c001ea6c:	68 c0 17 03 c0       	push   0xc00317c0
c001ea71:	e8 02 1d fe ff       	call   c0000778 <memset>
c001ea76:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ea7d:	e8 c1 0d ff ff       	call   c000f843 <malloc>
c001ea82:	83 c4 0c             	add    esp,0xc
c001ea85:	89 c7                	mov    edi,eax
c001ea87:	ff 35 74 17 03 c0    	push   DWORD PTR ds:0xc0031774
c001ea8d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ea91:	50                   	push   eax
c001ea92:	e8 39 48 ff ff       	call   c00132d0 <File::File(char const*, Process*)>
c001ea97:	83 c4 10             	add    esp,0x10
c001ea9a:	85 ff                	test   edi,edi
c001ea9c:	75 0a                	jne    c001eaa8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ea9e:	83 ec 0c             	sub    esp,0xc
c001eaa1:	68 b7 c3 02 c0       	push   0xc002c3b7
c001eaa6:	eb 27                	jmp    c001eacf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001eaa8:	50                   	push   eax
c001eaa9:	8d 44 24 17          	lea    eax,[esp+0x17]
c001eaad:	50                   	push   eax
c001eaae:	8d 44 24 20          	lea    eax,[esp+0x20]
c001eab2:	50                   	push   eax
c001eab3:	57                   	push   edi
c001eab4:	e8 27 4b ff ff       	call   c00135e0 <File::stat(unsigned long long*, bool*)>
c001eab9:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001eabe:	83 c4 10             	add    esp,0x10
c001eac1:	89 e8                	mov    eax,ebp
c001eac3:	84 c0                	test   al,al
c001eac5:	74 19                	je     c001eae0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001eac7:	83 ec 0c             	sub    esp,0xc
c001eaca:	68 cb c3 02 c0       	push   0xc002c3cb
c001eacf:	e8 7f b9 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c001ead4:	31 ed                	xor    ebp,ebp
c001ead6:	e8 74 f1 ff ff       	call   c001dc4f <unlockScheduler()>
c001eadb:	83 c4 10             	add    esp,0x10
c001eade:	eb 75                	jmp    c001eb55 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001eae0:	50                   	push   eax
c001eae1:	50                   	push   eax
c001eae2:	6a 01                	push   0x1
c001eae4:	57                   	push   edi
c001eae5:	e8 4a 48 ff ff       	call   c0013334 <File::open(FileOpenMode)>
c001eaea:	83 c4 10             	add    esp,0x10
c001eaed:	85 c0                	test   eax,eax
c001eaef:	74 17                	je     c001eb08 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001eaf1:	83 ec 0c             	sub    esp,0xc
c001eaf4:	68 e4 c3 02 c0       	push   0xc002c3e4
c001eaf9:	e8 55 b9 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c001eafe:	e8 4c f1 ff ff       	call   c001dc4f <unlockScheduler()>
c001eb03:	83 c4 10             	add    esp,0x10
c001eb06:	eb 4d                	jmp    c001eb55 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001eb08:	0f b7 f6             	movzx  esi,si
c001eb0b:	50                   	push   eax
c001eb0c:	0f b7 db             	movzx  ebx,bx
c001eb0f:	50                   	push   eax
c001eb10:	56                   	push   esi
c001eb11:	53                   	push   ebx
c001eb12:	e8 b7 fd ff ff       	call   c001e8ce <Vm::realToLinear(unsigned short, unsigned short)>
c001eb17:	5a                   	pop    edx
c001eb18:	8b 17                	mov    edx,DWORD PTR [edi]
c001eb1a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001eb1e:	51                   	push   ecx
c001eb1f:	50                   	push   eax
c001eb20:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eb24:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eb28:	57                   	push   edi
c001eb29:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001eb2c:	83 c4 14             	add    esp,0x14
c001eb2f:	57                   	push   edi
c001eb30:	e8 5d 48 ff ff       	call   c0013392 <File::close()>
c001eb35:	c6 05 a5 17 03 c0 00 	mov    BYTE PTR ds:0xc00317a5,0x0
c001eb3c:	e8 0e f1 ff ff       	call   c001dc4f <unlockScheduler()>
c001eb41:	59                   	pop    ecx
c001eb42:	ff 35 a8 17 03 c0    	push   DWORD PTR ds:0xc00317a8
c001eb48:	e8 17 f7 ff ff       	call   c001e264 <unblockTask(ThreadControlBlock*)>
c001eb4d:	83 c4 10             	add    esp,0x10
c001eb50:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001eb55:	83 c4 2c             	add    esp,0x2c
c001eb58:	89 e8                	mov    eax,ebp
c001eb5a:	5b                   	pop    ebx
c001eb5b:	5e                   	pop    esi
c001eb5c:	5f                   	pop    edi
c001eb5d:	5d                   	pop    ebp
c001eb5e:	c3                   	ret    

c001eb5f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001eb5f:	57                   	push   edi
c001eb60:	56                   	push   esi
c001eb61:	53                   	push   ebx
c001eb62:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eb66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb6a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eb6e:	83 e8 06             	sub    eax,0x6
c001eb71:	0f b7 c0             	movzx  eax,ax
c001eb74:	50                   	push   eax
c001eb75:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001eb7a:	50                   	push   eax
c001eb7b:	e8 4e fd ff ff       	call   c001e8ce <Vm::realToLinear(unsigned short, unsigned short)>
c001eb80:	5a                   	pop    edx
c001eb81:	5e                   	pop    esi
c001eb82:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001eb85:	8d 56 fa             	lea    edx,[esi-0x6]
c001eb88:	81 e2 ff ff 00 00    	and    edx,0xffff
c001eb8e:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001eb91:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001eb94:	83 c2 02             	add    edx,0x2
c001eb97:	66 89 10             	mov    WORD PTR [eax],dx
c001eb9a:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001eb9d:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001eba1:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001eba4:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001eba8:	89 d6                	mov    esi,edx
c001ebaa:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ebb0:	66 81 e6 ff fd       	and    si,0xfdff
c001ebb5:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ebb9:	74 07                	je     c001ebc2 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ebbb:	89 d6                	mov    esi,edx
c001ebbd:	66 81 ce 00 02       	or     si,0x200
c001ebc2:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ebc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ebcb:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ebcf:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ebd7:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ebda:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ebe2:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ebe5:	5b                   	pop    ebx
c001ebe6:	5e                   	pop    esi
c001ebe7:	5f                   	pop    edi
c001ebe8:	c3                   	ret    

c001ebe9 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ebe9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ebee:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ebf3:	c1 e0 04             	shl    eax,0x4
c001ebf6:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ebf9:	c3                   	ret    

c001ebfa <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ebfa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ebff:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec04:	c1 e0 04             	shl    eax,0x4
c001ec07:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ec0b:	c3                   	ret    

c001ec0c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ec0c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec11:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec16:	c1 e0 04             	shl    eax,0x4
c001ec19:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ec1c:	c3                   	ret    

c001ec1d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ec1d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec22:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec27:	c1 e0 04             	shl    eax,0x4
c001ec2a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec2e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ec31:	c3                   	ret    

c001ec32 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ec32:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec37:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec3c:	c1 e0 04             	shl    eax,0x4
c001ec3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec43:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ec47:	c3                   	ret    

c001ec48 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ec48:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec4d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec52:	c1 e0 04             	shl    eax,0x4
c001ec55:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec59:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ec5c:	c3                   	ret    

c001ec5d <Vm::faultHandler(regs*)>:
c001ec5d:	55                   	push   ebp
c001ec5e:	57                   	push   edi
c001ec5f:	56                   	push   esi
c001ec60:	53                   	push   ebx
c001ec61:	83 ec 1c             	sub    esp,0x1c
c001ec64:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ec68:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ec6b:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ec6e:	0f b7 c1             	movzx  eax,cx
c001ec71:	50                   	push   eax
c001ec72:	0f b7 c3             	movzx  eax,bx
c001ec75:	c1 e3 04             	shl    ebx,0x4
c001ec78:	50                   	push   eax
c001ec79:	e8 50 fc ff ff       	call   c001e8ce <Vm::realToLinear(unsigned short, unsigned short)>
c001ec7e:	5a                   	pop    edx
c001ec7f:	89 c5                	mov    ebp,eax
c001ec81:	5e                   	pop    esi
c001ec82:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ec86:	50                   	push   eax
c001ec87:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ec8b:	50                   	push   eax
c001ec8c:	e8 3d fc ff ff       	call   c001e8ce <Vm::realToLinear(unsigned short, unsigned short)>
c001ec91:	01 cb                	add    ebx,ecx
c001ec93:	89 c6                	mov    esi,eax
c001ec95:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ec99:	50                   	push   eax
c001ec9a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ec9e:	50                   	push   eax
c001ec9f:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eca3:	50                   	push   eax
c001eca4:	55                   	push   ebp
c001eca5:	53                   	push   ebx
c001eca6:	b3 06                	mov    bl,0x6
c001eca8:	68 fd c3 02 c0       	push   0xc002c3fd
c001ecad:	e8 c6 40 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001ecb2:	83 c4 20             	add    esp,0x20
c001ecb5:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ecba:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ecbf:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ecc3:	3c 9d                	cmp    al,0x9d
c001ecc5:	0f 84 d7 02 00 00    	je     c001efa2 <Vm::faultHandler(regs*)+0x345>
c001eccb:	0f 87 a3 00 00 00    	ja     c001ed74 <Vm::faultHandler(regs*)+0x117>
c001ecd1:	3c 66                	cmp    al,0x66
c001ecd3:	0f 84 15 02 00 00    	je     c001eeee <Vm::faultHandler(regs*)+0x291>
c001ecd9:	77 5f                	ja     c001ed3a <Vm::faultHandler(regs*)+0xdd>
c001ecdb:	3c 36                	cmp    al,0x36
c001ecdd:	0f 84 f1 01 00 00    	je     c001eed4 <Vm::faultHandler(regs*)+0x277>
c001ece3:	77 28                	ja     c001ed0d <Vm::faultHandler(regs*)+0xb0>
c001ece5:	3c 26                	cmp    al,0x26
c001ece7:	0f 84 99 01 00 00    	je     c001ee86 <Vm::faultHandler(regs*)+0x229>
c001eced:	3c 2e                	cmp    al,0x2e
c001ecef:	0f 85 3b 07 00 00    	jne    c001f430 <Vm::faultHandler(regs*)+0x7d3>
c001ecf5:	83 ec 0c             	sub    esp,0xc
c001ecf8:	31 db                	xor    ebx,ebx
c001ecfa:	68 12 c4 02 c0       	push   0xc002c412
c001ecff:	e8 74 40 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001ed04:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ed07:	83 c4 10             	add    esp,0x10
c001ed0a:	45                   	inc    ebp
c001ed0b:	eb b2                	jmp    c001ecbf <Vm::faultHandler(regs*)+0x62>
c001ed0d:	3c 64                	cmp    al,0x64
c001ed0f:	0f 84 8b 01 00 00    	je     c001eea0 <Vm::faultHandler(regs*)+0x243>
c001ed15:	0f 87 9f 01 00 00    	ja     c001eeba <Vm::faultHandler(regs*)+0x25d>
c001ed1b:	3c 3e                	cmp    al,0x3e
c001ed1d:	0f 85 0d 07 00 00    	jne    c001f430 <Vm::faultHandler(regs*)+0x7d3>
c001ed23:	83 ec 0c             	sub    esp,0xc
c001ed26:	b3 01                	mov    bl,0x1
c001ed28:	68 16 c4 02 c0       	push   0xc002c416
c001ed2d:	e8 46 40 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001ed32:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ed35:	83 c4 10             	add    esp,0x10
c001ed38:	eb d0                	jmp    c001ed0a <Vm::faultHandler(regs*)+0xad>
c001ed3a:	3c 6d                	cmp    al,0x6d
c001ed3c:	0f 84 af 03 00 00    	je     c001f0f1 <Vm::faultHandler(regs*)+0x494>
c001ed42:	77 15                	ja     c001ed59 <Vm::faultHandler(regs*)+0xfc>
c001ed44:	3c 67                	cmp    al,0x67
c001ed46:	0f 84 bf 01 00 00    	je     c001ef0b <Vm::faultHandler(regs*)+0x2ae>
c001ed4c:	3c 6c                	cmp    al,0x6c
c001ed4e:	0f 84 3f 03 00 00    	je     c001f093 <Vm::faultHandler(regs*)+0x436>
c001ed54:	e9 d7 06 00 00       	jmp    c001f430 <Vm::faultHandler(regs*)+0x7d3>
c001ed59:	3c 6f                	cmp    al,0x6f
c001ed5b:	0f 84 a4 04 00 00    	je     c001f205 <Vm::faultHandler(regs*)+0x5a8>
c001ed61:	0f 82 11 04 00 00    	jb     c001f178 <Vm::faultHandler(regs*)+0x51b>
c001ed67:	3c 9c                	cmp    al,0x9c
c001ed69:	0f 84 ba 01 00 00    	je     c001ef29 <Vm::faultHandler(regs*)+0x2cc>
c001ed6f:	e9 bc 06 00 00       	jmp    c001f430 <Vm::faultHandler(regs*)+0x7d3>
c001ed74:	3c ec                	cmp    al,0xec
c001ed76:	0f 84 24 06 00 00    	je     c001f3a0 <Vm::faultHandler(regs*)+0x743>
c001ed7c:	0f 87 93 00 00 00    	ja     c001ee15 <Vm::faultHandler(regs*)+0x1b8>
c001ed82:	3c e4                	cmp    al,0xe4
c001ed84:	0f 84 5c 05 00 00    	je     c001f2e6 <Vm::faultHandler(regs*)+0x689>
c001ed8a:	77 6a                	ja     c001edf6 <Vm::faultHandler(regs*)+0x199>
c001ed8c:	3c cd                	cmp    al,0xcd
c001ed8e:	0f 84 7e 02 00 00    	je     c001f012 <Vm::faultHandler(regs*)+0x3b5>
c001ed94:	3c cf                	cmp    al,0xcf
c001ed96:	0f 85 94 06 00 00    	jne    c001f430 <Vm::faultHandler(regs*)+0x7d3>
c001ed9c:	83 ec 0c             	sub    esp,0xc
c001ed9f:	68 5a c4 02 c0       	push   0xc002c45a
c001eda4:	e8 cf 3f ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001eda9:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001edac:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001edaf:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001edb3:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001edb6:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001edba:	0d 00 02 02 00       	or     eax,0x20200
c001edbf:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001edc2:	56                   	push   esi
c001edc3:	53                   	push   ebx
c001edc4:	52                   	push   edx
c001edc5:	68 60 c4 02 c0       	push   0xc002c460
c001edca:	e8 a9 3f ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001edcf:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001edd3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001edd9:	66 c1 e8 09          	shr    ax,0x9
c001eddd:	83 e0 01             	and    eax,0x1
c001ede0:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ede3:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ede6:	83 c0 06             	add    eax,0x6
c001ede9:	25 ff ff 00 00       	and    eax,0xffff
c001edee:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001edf1:	e9 95 02 00 00       	jmp    c001f08b <Vm::faultHandler(regs*)+0x42e>
c001edf6:	3c e6                	cmp    al,0xe6
c001edf8:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001edfc:	0f 84 4e 05 00 00    	je     c001f350 <Vm::faultHandler(regs*)+0x6f3>
c001ee02:	0f 82 0a 05 00 00    	jb     c001f312 <Vm::faultHandler(regs*)+0x6b5>
c001ee08:	3c e7                	cmp    al,0xe7
c001ee0a:	0f 84 69 05 00 00    	je     c001f379 <Vm::faultHandler(regs*)+0x71c>
c001ee10:	e9 1b 06 00 00       	jmp    c001f430 <Vm::faultHandler(regs*)+0x7d3>
c001ee15:	3c ef                	cmp    al,0xef
c001ee17:	0f 84 e6 05 00 00    	je     c001f403 <Vm::faultHandler(regs*)+0x7a6>
c001ee1d:	77 37                	ja     c001ee56 <Vm::faultHandler(regs*)+0x1f9>
c001ee1f:	3c ed                	cmp    al,0xed
c001ee21:	0f 84 a3 05 00 00    	je     c001f3ca <Vm::faultHandler(regs*)+0x76d>
c001ee27:	3c ee                	cmp    al,0xee
c001ee29:	0f 85 01 06 00 00    	jne    c001f430 <Vm::faultHandler(regs*)+0x7d3>
c001ee2f:	52                   	push   edx
c001ee30:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ee33:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ee36:	68 fb c4 02 c0       	push   0xc002c4fb
c001ee3b:	e8 38 3f ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001ee40:	59                   	pop    ecx
c001ee41:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001ee45:	5b                   	pop    ebx
c001ee46:	50                   	push   eax
c001ee47:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ee4b:	50                   	push   eax
c001ee4c:	e8 2a fa ff ff       	call   c001e87b <Vm::outbv(unsigned short, unsigned char)>
c001ee51:	e9 a5 05 00 00       	jmp    c001f3fb <Vm::faultHandler(regs*)+0x79e>
c001ee56:	3c fa                	cmp    al,0xfa
c001ee58:	0f 84 f7 01 00 00    	je     c001f055 <Vm::faultHandler(regs*)+0x3f8>
c001ee5e:	3c fb                	cmp    al,0xfb
c001ee60:	0f 84 0a 02 00 00    	je     c001f070 <Vm::faultHandler(regs*)+0x413>
c001ee66:	3c f3                	cmp    al,0xf3
c001ee68:	0f 85 c2 05 00 00    	jne    c001f430 <Vm::faultHandler(regs*)+0x7d3>
c001ee6e:	83 ec 0c             	sub    esp,0xc
c001ee71:	68 33 c4 02 c0       	push   0xc002c433
c001ee76:	e8 fd 3e ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001ee7b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee7e:	83 c4 10             	add    esp,0x10
c001ee81:	e9 84 fe ff ff       	jmp    c001ed0a <Vm::faultHandler(regs*)+0xad>
c001ee86:	83 ec 0c             	sub    esp,0xc
c001ee89:	b3 02                	mov    bl,0x2
c001ee8b:	68 0e c4 02 c0       	push   0xc002c40e
c001ee90:	e8 e3 3e ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001ee95:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee98:	83 c4 10             	add    esp,0x10
c001ee9b:	e9 6a fe ff ff       	jmp    c001ed0a <Vm::faultHandler(regs*)+0xad>
c001eea0:	83 ec 0c             	sub    esp,0xc
c001eea3:	b3 03                	mov    bl,0x3
c001eea5:	68 1a c4 02 c0       	push   0xc002c41a
c001eeaa:	e8 c9 3e ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001eeaf:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eeb2:	83 c4 10             	add    esp,0x10
c001eeb5:	e9 50 fe ff ff       	jmp    c001ed0a <Vm::faultHandler(regs*)+0xad>
c001eeba:	83 ec 0c             	sub    esp,0xc
c001eebd:	b3 04                	mov    bl,0x4
c001eebf:	68 1e c4 02 c0       	push   0xc002c41e
c001eec4:	e8 af 3e ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001eec9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eecc:	83 c4 10             	add    esp,0x10
c001eecf:	e9 36 fe ff ff       	jmp    c001ed0a <Vm::faultHandler(regs*)+0xad>
c001eed4:	83 ec 0c             	sub    esp,0xc
c001eed7:	b3 05                	mov    bl,0x5
c001eed9:	68 22 c4 02 c0       	push   0xc002c422
c001eede:	e8 95 3e ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001eee3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eee6:	83 c4 10             	add    esp,0x10
c001eee9:	e9 1c fe ff ff       	jmp    c001ed0a <Vm::faultHandler(regs*)+0xad>
c001eeee:	83 ec 0c             	sub    esp,0xc
c001eef1:	68 26 c4 02 c0       	push   0xc002c426
c001eef6:	e8 7d 3e ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001eefb:	83 c4 10             	add    esp,0x10
c001eefe:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef01:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001ef06:	e9 ff fd ff ff       	jmp    c001ed0a <Vm::faultHandler(regs*)+0xad>
c001ef0b:	50                   	push   eax
c001ef0c:	50                   	push   eax
c001ef0d:	6a 01                	push   0x1
c001ef0f:	68 2b c4 02 c0       	push   0xc002c42b
c001ef14:	e8 5f 3e ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001ef19:	83 c4 10             	add    esp,0x10
c001ef1c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef1f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001ef24:	e9 e1 fd ff ff       	jmp    c001ed0a <Vm::faultHandler(regs*)+0xad>
c001ef29:	83 ec 0c             	sub    esp,0xc
c001ef2c:	68 39 c4 02 c0       	push   0xc002c439
c001ef31:	e8 42 3e ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001ef36:	83 c4 10             	add    esp,0x10
c001ef39:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001ef3c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ef41:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001ef44:	74 2f                	je     c001ef75 <Vm::faultHandler(regs*)+0x318>
c001ef46:	83 ea 04             	sub    edx,0x4
c001ef49:	25 ff 0d 00 00       	and    eax,0xdff
c001ef4e:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ef54:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001ef57:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001ef5a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef60:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001ef64:	0f 84 bf 04 00 00    	je     c001f429 <Vm::faultHandler(regs*)+0x7cc>
c001ef6a:	80 cc 02             	or     ah,0x2
c001ef6d:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001ef70:	e9 b4 04 00 00       	jmp    c001f429 <Vm::faultHandler(regs*)+0x7cc>
c001ef75:	83 ea 02             	sub    edx,0x2
c001ef78:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ef7e:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001ef81:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001ef85:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef8b:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001ef8f:	74 05                	je     c001ef96 <Vm::faultHandler(regs*)+0x339>
c001ef91:	80 cc 02             	or     ah,0x2
c001ef94:	eb 03                	jmp    c001ef99 <Vm::faultHandler(regs*)+0x33c>
c001ef96:	80 e4 fd             	and    ah,0xfd
c001ef99:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001ef9d:	e9 87 04 00 00       	jmp    c001f429 <Vm::faultHandler(regs*)+0x7cc>
c001efa2:	83 ec 0c             	sub    esp,0xc
c001efa5:	68 40 c4 02 c0       	push   0xc002c440
c001efaa:	e8 c9 3d ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001efaf:	83 c4 10             	add    esp,0x10
c001efb2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001efb7:	74 28                	je     c001efe1 <Vm::faultHandler(regs*)+0x384>
c001efb9:	8b 06                	mov    eax,DWORD PTR [esi]
c001efbb:	25 ff 0d 00 00       	and    eax,0xdff
c001efc0:	0d 00 02 02 00       	or     eax,0x20200
c001efc5:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001efc8:	8b 06                	mov    eax,DWORD PTR [esi]
c001efca:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001efd0:	c1 e8 09             	shr    eax,0x9
c001efd3:	83 e0 01             	and    eax,0x1
c001efd6:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001efd9:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001efdc:	83 c0 04             	add    eax,0x4
c001efdf:	eb 24                	jmp    c001f005 <Vm::faultHandler(regs*)+0x3a8>
c001efe1:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001efe4:	0d 00 02 02 00       	or     eax,0x20200
c001efe9:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001efec:	66 8b 06             	mov    ax,WORD PTR [esi]
c001efef:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eff5:	66 c1 e8 09          	shr    ax,0x9
c001eff9:	83 e0 01             	and    eax,0x1
c001effc:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001efff:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f002:	83 c0 02             	add    eax,0x2
c001f005:	25 ff ff 00 00       	and    eax,0xffff
c001f00a:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f00d:	e9 17 04 00 00       	jmp    c001f429 <Vm::faultHandler(regs*)+0x7cc>
c001f012:	53                   	push   ebx
c001f013:	53                   	push   ebx
c001f014:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f018:	50                   	push   eax
c001f019:	68 46 c4 02 c0       	push   0xc002c446
c001f01e:	e8 55 3d ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001f023:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f027:	83 c4 10             	add    esp,0x10
c001f02a:	3c ee                	cmp    al,0xee
c001f02c:	75 10                	jne    c001f03e <Vm::faultHandler(regs*)+0x3e1>
c001f02e:	83 ec 0c             	sub    esp,0xc
c001f031:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f034:	e8 fa f8 ff ff       	call   c001e933 <Vm::mainloop3(unsigned long)>
c001f039:	e9 c0 03 00 00       	jmp    c001f3fe <Vm::faultHandler(regs*)+0x7a1>
c001f03e:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f042:	83 ec 0c             	sub    esp,0xc
c001f045:	53                   	push   ebx
c001f046:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f04a:	53                   	push   ebx
c001f04b:	55                   	push   ebp
c001f04c:	50                   	push   eax
c001f04d:	57                   	push   edi
c001f04e:	e8 0c fb ff ff       	call   c001eb5f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f053:	eb 36                	jmp    c001f08b <Vm::faultHandler(regs*)+0x42e>
c001f055:	83 ec 0c             	sub    esp,0xc
c001f058:	68 50 c4 02 c0       	push   0xc002c450
c001f05d:	e8 16 3d ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001f062:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f067:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f06b:	e9 8b 03 00 00       	jmp    c001f3fb <Vm::faultHandler(regs*)+0x79e>
c001f070:	83 ec 0c             	sub    esp,0xc
c001f073:	68 55 c4 02 c0       	push   0xc002c455
c001f078:	e8 fb 3c ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001f07d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f082:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f086:	e9 70 03 00 00       	jmp    c001f3fb <Vm::faultHandler(regs*)+0x79e>
c001f08b:	83 c4 20             	add    esp,0x20
c001f08e:	e9 99 03 00 00       	jmp    c001f42c <Vm::faultHandler(regs*)+0x7cf>
c001f093:	83 ec 0c             	sub    esp,0xc
c001f096:	68 93 c4 02 c0       	push   0xc002c493
c001f09b:	e8 d8 3c ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001f0a0:	83 c4 10             	add    esp,0x10
c001f0a3:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f0a6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f0ab:	74 0d                	je     c001f0ba <Vm::faultHandler(regs*)+0x45d>
c001f0ad:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f0b4:	0f 87 9e 01 00 00    	ja     c001f258 <Vm::faultHandler(regs*)+0x5fb>
c001f0ba:	83 ec 0c             	sub    esp,0xc
c001f0bd:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f0c1:	0f b7 db             	movzx  ebx,bx
c001f0c4:	50                   	push   eax
c001f0c5:	e8 9e f7 ff ff       	call   c001e868 <Vm::inbv(unsigned short)>
c001f0ca:	83 c4 0c             	add    esp,0xc
c001f0cd:	0f b6 c0             	movzx  eax,al
c001f0d0:	50                   	push   eax
c001f0d1:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f0d5:	50                   	push   eax
c001f0d6:	53                   	push   ebx
c001f0d7:	e8 41 fb ff ff       	call   c001ec1d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f0dc:	83 c4 10             	add    esp,0x10
c001f0df:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f0e2:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f0e6:	74 03                	je     c001f0eb <Vm::faultHandler(regs*)+0x48e>
c001f0e8:	48                   	dec    eax
c001f0e9:	eb 01                	jmp    c001f0ec <Vm::faultHandler(regs*)+0x48f>
c001f0eb:	40                   	inc    eax
c001f0ec:	0f b7 c0             	movzx  eax,ax
c001f0ef:	eb 7f                	jmp    c001f170 <Vm::faultHandler(regs*)+0x513>
c001f0f1:	83 ec 0c             	sub    esp,0xc
c001f0f4:	68 c5 c4 02 c0       	push   0xc002c4c5
c001f0f9:	e8 7a 3c ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001f0fe:	83 c4 10             	add    esp,0x10
c001f101:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f104:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f109:	74 0d                	je     c001f118 <Vm::faultHandler(regs*)+0x4bb>
c001f10b:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f112:	0f 87 40 01 00 00    	ja     c001f258 <Vm::faultHandler(regs*)+0x5fb>
c001f118:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f11b:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f11f:	0f b7 db             	movzx  ebx,bx
c001f122:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f127:	74 20                	je     c001f149 <Vm::faultHandler(regs*)+0x4ec>
c001f129:	ed                   	in     eax,dx
c001f12a:	51                   	push   ecx
c001f12b:	50                   	push   eax
c001f12c:	56                   	push   esi
c001f12d:	53                   	push   ebx
c001f12e:	e8 15 fb ff ff       	call   c001ec48 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f133:	83 c4 10             	add    esp,0x10
c001f136:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f139:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f13d:	74 05                	je     c001f144 <Vm::faultHandler(regs*)+0x4e7>
c001f13f:	83 e8 04             	sub    eax,0x4
c001f142:	eb 27                	jmp    c001f16b <Vm::faultHandler(regs*)+0x50e>
c001f144:	83 c0 04             	add    eax,0x4
c001f147:	eb 22                	jmp    c001f16b <Vm::faultHandler(regs*)+0x50e>
c001f149:	66 ed                	in     ax,dx
c001f14b:	0f b7 c0             	movzx  eax,ax
c001f14e:	52                   	push   edx
c001f14f:	50                   	push   eax
c001f150:	56                   	push   esi
c001f151:	53                   	push   ebx
c001f152:	e8 db fa ff ff       	call   c001ec32 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f157:	83 c4 10             	add    esp,0x10
c001f15a:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f15d:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f161:	74 05                	je     c001f168 <Vm::faultHandler(regs*)+0x50b>
c001f163:	83 e8 02             	sub    eax,0x2
c001f166:	eb 03                	jmp    c001f16b <Vm::faultHandler(regs*)+0x50e>
c001f168:	83 c0 02             	add    eax,0x2
c001f16b:	25 ff ff 00 00       	and    eax,0xffff
c001f170:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f173:	e9 b1 02 00 00       	jmp    c001f429 <Vm::faultHandler(regs*)+0x7cc>
c001f178:	83 ec 0c             	sub    esp,0xc
c001f17b:	4b                   	dec    ebx
c001f17c:	68 cb c4 02 c0       	push   0xc002c4cb
c001f181:	e8 f2 3b ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001f186:	83 c4 10             	add    esp,0x10
c001f189:	80 fb 05             	cmp    bl,0x5
c001f18c:	77 0a                	ja     c001f198 <Vm::faultHandler(regs*)+0x53b>
c001f18e:	0f b6 db             	movzx  ebx,bl
c001f191:	ff 24 9d 3c c5 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3ac4]
c001f198:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f19c:	eb 1b                	jmp    c001f1b9 <Vm::faultHandler(regs*)+0x55c>
c001f19e:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f1a2:	eb 15                	jmp    c001f1b9 <Vm::faultHandler(regs*)+0x55c>
c001f1a4:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f1a8:	eb 0f                	jmp    c001f1b9 <Vm::faultHandler(regs*)+0x55c>
c001f1aa:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f1ae:	eb 09                	jmp    c001f1b9 <Vm::faultHandler(regs*)+0x55c>
c001f1b0:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f1b3:	eb 04                	jmp    c001f1b9 <Vm::faultHandler(regs*)+0x55c>
c001f1b5:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f1b9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f1be:	74 0d                	je     c001f1cd <Vm::faultHandler(regs*)+0x570>
c001f1c0:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f1c7:	0f 87 8b 00 00 00    	ja     c001f258 <Vm::faultHandler(regs*)+0x5fb>
c001f1cd:	53                   	push   ebx
c001f1ce:	53                   	push   ebx
c001f1cf:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f1d3:	52                   	push   edx
c001f1d4:	50                   	push   eax
c001f1d5:	e8 0f fa ff ff       	call   c001ebe9 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f1da:	5e                   	pop    esi
c001f1db:	0f b6 c0             	movzx  eax,al
c001f1de:	5d                   	pop    ebp
c001f1df:	50                   	push   eax
c001f1e0:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f1e4:	50                   	push   eax
c001f1e5:	e8 91 f6 ff ff       	call   c001e87b <Vm::outbv(unsigned short, unsigned char)>
c001f1ea:	83 c4 10             	add    esp,0x10
c001f1ed:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f1f0:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f1f4:	74 03                	je     c001f1f9 <Vm::faultHandler(regs*)+0x59c>
c001f1f6:	48                   	dec    eax
c001f1f7:	eb 01                	jmp    c001f1fa <Vm::faultHandler(regs*)+0x59d>
c001f1f9:	40                   	inc    eax
c001f1fa:	0f b7 c0             	movzx  eax,ax
c001f1fd:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f200:	e9 24 02 00 00       	jmp    c001f429 <Vm::faultHandler(regs*)+0x7cc>
c001f205:	83 ec 0c             	sub    esp,0xc
c001f208:	4b                   	dec    ebx
c001f209:	68 cb c4 02 c0       	push   0xc002c4cb
c001f20e:	e8 65 3b ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001f213:	83 c4 10             	add    esp,0x10
c001f216:	80 fb 05             	cmp    bl,0x5
c001f219:	77 0a                	ja     c001f225 <Vm::faultHandler(regs*)+0x5c8>
c001f21b:	0f b6 db             	movzx  ebx,bl
c001f21e:	ff 24 9d 54 c5 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3aac]
c001f225:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f229:	eb 1b                	jmp    c001f246 <Vm::faultHandler(regs*)+0x5e9>
c001f22b:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f22f:	eb 15                	jmp    c001f246 <Vm::faultHandler(regs*)+0x5e9>
c001f231:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f235:	eb 0f                	jmp    c001f246 <Vm::faultHandler(regs*)+0x5e9>
c001f237:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f23b:	eb 09                	jmp    c001f246 <Vm::faultHandler(regs*)+0x5e9>
c001f23d:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f240:	eb 04                	jmp    c001f246 <Vm::faultHandler(regs*)+0x5e9>
c001f242:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f246:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f249:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f24e:	74 39                	je     c001f289 <Vm::faultHandler(regs*)+0x62c>
c001f250:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f256:	76 31                	jbe    c001f289 <Vm::faultHandler(regs*)+0x62c>
c001f258:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f25c:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f260:	51                   	push   ecx
c001f261:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f265:	51                   	push   ecx
c001f266:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f26a:	51                   	push   ecx
c001f26b:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f26f:	51                   	push   ecx
c001f270:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f274:	52                   	push   edx
c001f275:	50                   	push   eax
c001f276:	50                   	push   eax
c001f277:	68 98 c4 02 c0       	push   0xc002c498
c001f27c:	e8 f7 3a ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001f281:	83 c4 20             	add    esp,0x20
c001f284:	e9 fb 01 00 00       	jmp    c001f484 <Vm::faultHandler(regs*)+0x827>
c001f289:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f28c:	0f b7 d3             	movzx  edx,bx
c001f28f:	81 e6 00 04 00 00    	and    esi,0x400
c001f295:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f298:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f29d:	74 1d                	je     c001f2bc <Vm::faultHandler(regs*)+0x65f>
c001f29f:	51                   	push   ecx
c001f2a0:	51                   	push   ecx
c001f2a1:	52                   	push   edx
c001f2a2:	50                   	push   eax
c001f2a3:	e8 64 f9 ff ff       	call   c001ec0c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f2a8:	83 c4 10             	add    esp,0x10
c001f2ab:	89 ea                	mov    edx,ebp
c001f2ad:	ef                   	out    dx,eax
c001f2ae:	85 f6                	test   esi,esi
c001f2b0:	74 05                	je     c001f2b7 <Vm::faultHandler(regs*)+0x65a>
c001f2b2:	83 eb 04             	sub    ebx,0x4
c001f2b5:	eb 21                	jmp    c001f2d8 <Vm::faultHandler(regs*)+0x67b>
c001f2b7:	83 c3 04             	add    ebx,0x4
c001f2ba:	eb 1c                	jmp    c001f2d8 <Vm::faultHandler(regs*)+0x67b>
c001f2bc:	51                   	push   ecx
c001f2bd:	51                   	push   ecx
c001f2be:	52                   	push   edx
c001f2bf:	50                   	push   eax
c001f2c0:	e8 35 f9 ff ff       	call   c001ebfa <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f2c5:	83 c4 10             	add    esp,0x10
c001f2c8:	89 ea                	mov    edx,ebp
c001f2ca:	66 ef                	out    dx,ax
c001f2cc:	85 f6                	test   esi,esi
c001f2ce:	74 05                	je     c001f2d5 <Vm::faultHandler(regs*)+0x678>
c001f2d0:	83 eb 02             	sub    ebx,0x2
c001f2d3:	eb 03                	jmp    c001f2d8 <Vm::faultHandler(regs*)+0x67b>
c001f2d5:	83 c3 02             	add    ebx,0x2
c001f2d8:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f2de:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f2e1:	e9 43 01 00 00       	jmp    c001f429 <Vm::faultHandler(regs*)+0x7cc>
c001f2e6:	53                   	push   ebx
c001f2e7:	53                   	push   ebx
c001f2e8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2ec:	50                   	push   eax
c001f2ed:	68 d1 c4 02 c0       	push   0xc002c4d1
c001f2f2:	e8 81 3a ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001f2f7:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f2fe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f302:	89 04 24             	mov    DWORD PTR [esp],eax
c001f305:	e8 5e f5 ff ff       	call   c001e868 <Vm::inbv(unsigned short)>
c001f30a:	0f b6 c0             	movzx  eax,al
c001f30d:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f310:	eb 5e                	jmp    c001f370 <Vm::faultHandler(regs*)+0x713>
c001f312:	51                   	push   ecx
c001f313:	51                   	push   ecx
c001f314:	53                   	push   ebx
c001f315:	68 d7 c4 02 c0       	push   0xc002c4d7
c001f31a:	e8 59 3a ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001f31f:	83 c4 10             	add    esp,0x10
c001f322:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f327:	74 07                	je     c001f330 <Vm::faultHandler(regs*)+0x6d3>
c001f329:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f32d:	ed                   	in     eax,dx
c001f32e:	eb 14                	jmp    c001f344 <Vm::faultHandler(regs*)+0x6e7>
c001f330:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f333:	66 31 db             	xor    bx,bx
c001f336:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f339:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f33d:	66 ed                	in     ax,dx
c001f33f:	0f b7 c0             	movzx  eax,ax
c001f342:	09 d8                	or     eax,ebx
c001f344:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f347:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f34b:	e9 dc 00 00 00       	jmp    c001f42c <Vm::faultHandler(regs*)+0x7cf>
c001f350:	50                   	push   eax
c001f351:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f354:	53                   	push   ebx
c001f355:	68 dd c4 02 c0       	push   0xc002c4dd
c001f35a:	e8 19 3a ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001f35f:	58                   	pop    eax
c001f360:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f364:	5a                   	pop    edx
c001f365:	50                   	push   eax
c001f366:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f36a:	50                   	push   eax
c001f36b:	e8 0b f5 ff ff       	call   c001e87b <Vm::outbv(unsigned short, unsigned char)>
c001f370:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f374:	e9 85 00 00 00       	jmp    c001f3fe <Vm::faultHandler(regs*)+0x7a1>
c001f379:	50                   	push   eax
c001f37a:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f37d:	53                   	push   ebx
c001f37e:	68 e6 c4 02 c0       	push   0xc002c4e6
c001f383:	e8 f0 39 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001f388:	83 c4 10             	add    esp,0x10
c001f38b:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f38f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f394:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f397:	74 03                	je     c001f39c <Vm::faultHandler(regs*)+0x73f>
c001f399:	ef                   	out    dx,eax
c001f39a:	eb ab                	jmp    c001f347 <Vm::faultHandler(regs*)+0x6ea>
c001f39c:	66 ef                	out    dx,ax
c001f39e:	eb a7                	jmp    c001f347 <Vm::faultHandler(regs*)+0x6ea>
c001f3a0:	55                   	push   ebp
c001f3a1:	55                   	push   ebp
c001f3a2:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f3a5:	68 ef c4 02 c0       	push   0xc002c4ef
c001f3aa:	e8 c9 39 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001f3af:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f3b6:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f3ba:	89 04 24             	mov    DWORD PTR [esp],eax
c001f3bd:	e8 a6 f4 ff ff       	call   c001e868 <Vm::inbv(unsigned short)>
c001f3c2:	0f b6 c0             	movzx  eax,al
c001f3c5:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f3c8:	eb 31                	jmp    c001f3fb <Vm::faultHandler(regs*)+0x79e>
c001f3ca:	56                   	push   esi
c001f3cb:	56                   	push   esi
c001f3cc:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f3cf:	68 f5 c4 02 c0       	push   0xc002c4f5
c001f3d4:	e8 9f 39 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001f3d9:	83 c4 10             	add    esp,0x10
c001f3dc:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f3df:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f3e4:	74 03                	je     c001f3e9 <Vm::faultHandler(regs*)+0x78c>
c001f3e6:	ed                   	in     eax,dx
c001f3e7:	eb 0d                	jmp    c001f3f6 <Vm::faultHandler(regs*)+0x799>
c001f3e9:	66 ed                	in     ax,dx
c001f3eb:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f3ee:	0f b7 c0             	movzx  eax,ax
c001f3f1:	66 31 d2             	xor    dx,dx
c001f3f4:	09 d0                	or     eax,edx
c001f3f6:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f3f9:	eb 2e                	jmp    c001f429 <Vm::faultHandler(regs*)+0x7cc>
c001f3fb:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f3fe:	83 c4 10             	add    esp,0x10
c001f401:	eb 29                	jmp    c001f42c <Vm::faultHandler(regs*)+0x7cf>
c001f403:	50                   	push   eax
c001f404:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f407:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f40a:	68 04 c5 02 c0       	push   0xc002c504
c001f40f:	e8 64 39 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001f414:	83 c4 10             	add    esp,0x10
c001f417:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f41a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f41f:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f422:	74 03                	je     c001f427 <Vm::faultHandler(regs*)+0x7ca>
c001f424:	ef                   	out    dx,eax
c001f425:	eb 02                	jmp    c001f429 <Vm::faultHandler(regs*)+0x7cc>
c001f427:	66 ef                	out    dx,ax
c001f429:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f42c:	b0 01                	mov    al,0x1
c001f42e:	eb 56                	jmp    c001f486 <Vm::faultHandler(regs*)+0x829>
c001f430:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f434:	51                   	push   ecx
c001f435:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f439:	51                   	push   ecx
c001f43a:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f43e:	51                   	push   ecx
c001f43f:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f443:	51                   	push   ecx
c001f444:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f448:	52                   	push   edx
c001f449:	50                   	push   eax
c001f44a:	50                   	push   eax
c001f44b:	68 0d c5 02 c0       	push   0xc002c50d
c001f450:	e8 23 39 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c001f455:	83 c4 20             	add    esp,0x20
c001f458:	83 ec 0c             	sub    esp,0xc
c001f45b:	6a 60                	push   0x60
c001f45d:	e8 06 f4 ff ff       	call   c001e868 <Vm::inbv(unsigned short)>
c001f462:	83 c4 10             	add    esp,0x10
c001f465:	3c 1c                	cmp    al,0x1c
c001f467:	74 04                	je     c001f46d <Vm::faultHandler(regs*)+0x810>
c001f469:	3c 5a                	cmp    al,0x5a
c001f46b:	75 eb                	jne    c001f458 <Vm::faultHandler(regs*)+0x7fb>
c001f46d:	3c 1c                	cmp    al,0x1c
c001f46f:	74 04                	je     c001f475 <Vm::faultHandler(regs*)+0x818>
c001f471:	3c 5a                	cmp    al,0x5a
c001f473:	75 0f                	jne    c001f484 <Vm::faultHandler(regs*)+0x827>
c001f475:	83 ec 0c             	sub    esp,0xc
c001f478:	6a 60                	push   0x60
c001f47a:	e8 e9 f3 ff ff       	call   c001e868 <Vm::inbv(unsigned short)>
c001f47f:	83 c4 10             	add    esp,0x10
c001f482:	eb e9                	jmp    c001f46d <Vm::faultHandler(regs*)+0x810>
c001f484:	31 c0                	xor    eax,eax
c001f486:	83 c4 1c             	add    esp,0x1c
c001f489:	5b                   	pop    ebx
c001f48a:	5e                   	pop    esi
c001f48b:	5f                   	pop    edi
c001f48c:	5d                   	pop    ebp
c001f48d:	c3                   	ret    

c001f48e <Vm::x87Save(void*)>:
c001f48e:	83 ec 10             	sub    esp,0x10
c001f491:	6a 48                	push   0x48
c001f493:	68 e0 17 03 c0       	push   0xc00317e0
c001f498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f49c:	e8 a3 12 fe ff       	call   c0000744 <memcpy>
c001f4a1:	83 c4 1c             	add    esp,0x1c
c001f4a4:	c3                   	ret    

c001f4a5 <Vm::x87Load(void*)>:
c001f4a5:	83 ec 10             	sub    esp,0x10
c001f4a8:	6a 48                	push   0x48
c001f4aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f4ae:	68 e0 17 03 c0       	push   0xc00317e0
c001f4b3:	e8 8c 12 fe ff       	call   c0000744 <memcpy>
c001f4b8:	83 c4 1c             	add    esp,0x1c
c001f4bb:	c3                   	ret    

c001f4bc <Vm::fpuInternalTo32(unsigned long long)>:
c001f4bc:	57                   	push   edi
c001f4bd:	56                   	push   esi
c001f4be:	53                   	push   ebx
c001f4bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4c7:	89 d6                	mov    esi,edx
c001f4c9:	89 d7                	mov    edi,edx
c001f4cb:	89 c1                	mov    ecx,eax
c001f4cd:	c1 ef 14             	shr    edi,0x14
c001f4d0:	89 d3                	mov    ebx,edx
c001f4d2:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f4d8:	31 d2                	xor    edx,edx
c001f4da:	89 f8                	mov    eax,edi
c001f4dc:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f4e2:	bf ff 00 00 00       	mov    edi,0xff
c001f4e7:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f4ec:	83 d2 ff             	adc    edx,0xffffffff
c001f4ef:	39 c7                	cmp    edi,eax
c001f4f1:	bf 00 00 00 00       	mov    edi,0x0
c001f4f6:	19 d7                	sbb    edi,edx
c001f4f8:	72 15                	jb     c001f50f <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f4fa:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f4fe:	c1 e0 17             	shl    eax,0x17
c001f501:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f507:	09 f1                	or     ecx,esi
c001f509:	09 c1                	or     ecx,eax
c001f50b:	89 cf                	mov    edi,ecx
c001f50d:	eb 02                	jmp    c001f511 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f50f:	31 ff                	xor    edi,edi
c001f511:	89 f8                	mov    eax,edi
c001f513:	5b                   	pop    ebx
c001f514:	5e                   	pop    esi
c001f515:	5f                   	pop    edi
c001f516:	c3                   	ret    

c001f517 <Vm::fpuInternalTo64(unsigned long long)>:
c001f517:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f51b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f51f:	c3                   	ret    

c001f520 <Vm::fpu32ToInternal(unsigned int)>:
c001f520:	57                   	push   edi
c001f521:	31 ff                	xor    edi,edi
c001f523:	56                   	push   esi
c001f524:	53                   	push   ebx
c001f525:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f529:	89 cb                	mov    ebx,ecx
c001f52b:	89 ce                	mov    esi,ecx
c001f52d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f533:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f539:	c1 e9 17             	shr    ecx,0x17
c001f53c:	89 f0                	mov    eax,esi
c001f53e:	0f b6 d1             	movzx  edx,cl
c001f541:	81 c2 80 03 00 00    	add    edx,0x380
c001f547:	89 d1                	mov    ecx,edx
c001f549:	89 fa                	mov    edx,edi
c001f54b:	c1 e1 14             	shl    ecx,0x14
c001f54e:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f552:	c1 e0 1d             	shl    eax,0x1d
c001f555:	89 d7                	mov    edi,edx
c001f557:	89 c6                	mov    esi,eax
c001f559:	89 ca                	mov    edx,ecx
c001f55b:	89 f0                	mov    eax,esi
c001f55d:	09 fa                	or     edx,edi
c001f55f:	09 da                	or     edx,ebx
c001f561:	5b                   	pop    ebx
c001f562:	5e                   	pop    esi
c001f563:	5f                   	pop    edi
c001f564:	c3                   	ret    

c001f565 <Vm::fpu64ToInternal(unsigned long long)>:
c001f565:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f569:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f56d:	c3                   	ret    

c001f56e <Vm::fpuFloatToLong(unsigned long long)>:
c001f56e:	57                   	push   edi
c001f56f:	31 c0                	xor    eax,eax
c001f571:	56                   	push   esi
c001f572:	31 d2                	xor    edx,edx
c001f574:	53                   	push   ebx
c001f575:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f579:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f57d:	89 d9                	mov    ecx,ebx
c001f57f:	c1 e9 14             	shr    ecx,0x14
c001f582:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f588:	89 cf                	mov    edi,ecx
c001f58a:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f590:	78 33                	js     c001f5c5 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f592:	89 d9                	mov    ecx,ebx
c001f594:	89 f0                	mov    eax,esi
c001f596:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f59c:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f5a2:	89 ca                	mov    edx,ecx
c001f5a4:	b9 34 00 00 00       	mov    ecx,0x34
c001f5a9:	29 f9                	sub    ecx,edi
c001f5ab:	0f ad d0             	shrd   eax,edx,cl
c001f5ae:	d3 fa                	sar    edx,cl
c001f5b0:	f6 c1 20             	test   cl,0x20
c001f5b3:	74 05                	je     c001f5ba <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f5b5:	89 d0                	mov    eax,edx
c001f5b7:	c1 fa 1f             	sar    edx,0x1f
c001f5ba:	85 db                	test   ebx,ebx
c001f5bc:	79 07                	jns    c001f5c5 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f5be:	f7 d8                	neg    eax
c001f5c0:	83 d2 00             	adc    edx,0x0
c001f5c3:	f7 da                	neg    edx
c001f5c5:	5b                   	pop    ebx
c001f5c6:	5e                   	pop    esi
c001f5c7:	5f                   	pop    edi
c001f5c8:	c3                   	ret    

c001f5c9 <Vm::fpuULongToFloat(unsigned long long)>:
c001f5c9:	57                   	push   edi
c001f5ca:	31 c9                	xor    ecx,ecx
c001f5cc:	56                   	push   esi
c001f5cd:	53                   	push   ebx
c001f5ce:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f5d2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f5d6:	0f ba e7 14          	bt     edi,0x14
c001f5da:	72 07                	jb     c001f5e3 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f5dc:	01 f6                	add    esi,esi
c001f5de:	11 ff                	adc    edi,edi
c001f5e0:	41                   	inc    ecx
c001f5e1:	eb f3                	jmp    c001f5d6 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f5e3:	89 fa                	mov    edx,edi
c001f5e5:	89 f0                	mov    eax,esi
c001f5e7:	bb 33 04 00 00       	mov    ebx,0x433
c001f5ec:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f5f2:	29 cb                	sub    ebx,ecx
c001f5f4:	89 d9                	mov    ecx,ebx
c001f5f6:	5b                   	pop    ebx
c001f5f7:	c1 e1 14             	shl    ecx,0x14
c001f5fa:	5e                   	pop    esi
c001f5fb:	09 ca                	or     edx,ecx
c001f5fd:	5f                   	pop    edi
c001f5fe:	c3                   	ret    

c001f5ff <Vm::fpuLongToFloat(long long)>:
c001f5ff:	56                   	push   esi
c001f600:	31 c0                	xor    eax,eax
c001f602:	53                   	push   ebx
c001f603:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f607:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f60b:	39 c8                	cmp    eax,ecx
c001f60d:	19 d8                	sbb    eax,ebx
c001f60f:	7d 04                	jge    c001f615 <Vm::fpuLongToFloat(long long)+0x16>
c001f611:	31 f6                	xor    esi,esi
c001f613:	eb 0c                	jmp    c001f621 <Vm::fpuLongToFloat(long long)+0x22>
c001f615:	f7 d9                	neg    ecx
c001f617:	be 01 00 00 00       	mov    esi,0x1
c001f61c:	83 d3 00             	adc    ebx,0x0
c001f61f:	f7 db                	neg    ebx
c001f621:	31 c0                	xor    eax,eax
c001f623:	0f ba e3 14          	bt     ebx,0x14
c001f627:	72 07                	jb     c001f630 <Vm::fpuLongToFloat(long long)+0x31>
c001f629:	01 c9                	add    ecx,ecx
c001f62b:	11 db                	adc    ebx,ebx
c001f62d:	40                   	inc    eax
c001f62e:	eb f3                	jmp    c001f623 <Vm::fpuLongToFloat(long long)+0x24>
c001f630:	ba 33 04 00 00       	mov    edx,0x433
c001f635:	29 c2                	sub    edx,eax
c001f637:	89 c8                	mov    eax,ecx
c001f639:	c1 e2 14             	shl    edx,0x14
c001f63c:	89 d9                	mov    ecx,ebx
c001f63e:	89 f3                	mov    ebx,esi
c001f640:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f646:	09 ca                	or     edx,ecx
c001f648:	84 db                	test   bl,bl
c001f64a:	74 06                	je     c001f652 <Vm::fpuLongToFloat(long long)+0x53>
c001f64c:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f652:	5b                   	pop    ebx
c001f653:	5e                   	pop    esi
c001f654:	c3                   	ret    

c001f655 <Vm::fpuGet0()>:
c001f655:	31 c0                	xor    eax,eax
c001f657:	31 d2                	xor    edx,edx
c001f659:	c3                   	ret    

c001f65a <Vm::fpuGet1()>:
c001f65a:	b8 01 00 00 00       	mov    eax,0x1
c001f65f:	31 d2                	xor    edx,edx
c001f661:	c3                   	ret    

c001f662 <Vm::fpuGetPi()>:
c001f662:	b8 03 00 00 00       	mov    eax,0x3
c001f667:	31 d2                	xor    edx,edx
c001f669:	c3                   	ret    

c001f66a <Vm::fpuGetLog2E()>:
c001f66a:	83 ec 18             	sub    esp,0x18
c001f66d:	68 6c c5 02 c0       	push   0xc002c56c
c001f672:	e8 dc ad ff ff       	call   c001a453 <Krnl::panic(char const*)>
c001f677:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f67c:	31 d2                	xor    edx,edx
c001f67e:	83 c4 1c             	add    esp,0x1c
c001f681:	c3                   	ret    

c001f682 <Vm::fpuGetLogE2()>:
c001f682:	83 ec 18             	sub    esp,0x18
c001f685:	68 78 c5 02 c0       	push   0xc002c578
c001f68a:	e8 c4 ad ff ff       	call   c001a453 <Krnl::panic(char const*)>
c001f68f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f694:	31 d2                	xor    edx,edx
c001f696:	83 c4 1c             	add    esp,0x1c
c001f699:	c3                   	ret    

c001f69a <Vm::fpuGetLog210()>:
c001f69a:	83 ec 18             	sub    esp,0x18
c001f69d:	68 84 c5 02 c0       	push   0xc002c584
c001f6a2:	e8 ac ad ff ff       	call   c001a453 <Krnl::panic(char const*)>
c001f6a7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6ac:	31 d2                	xor    edx,edx
c001f6ae:	83 c4 1c             	add    esp,0x1c
c001f6b1:	c3                   	ret    

c001f6b2 <Vm::fpuGetLog102()>:
c001f6b2:	83 ec 18             	sub    esp,0x18
c001f6b5:	68 91 c5 02 c0       	push   0xc002c591
c001f6ba:	e8 94 ad ff ff       	call   c001a453 <Krnl::panic(char const*)>
c001f6bf:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6c4:	31 d2                	xor    edx,edx
c001f6c6:	83 c4 1c             	add    esp,0x1c
c001f6c9:	c3                   	ret    

c001f6ca <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f6ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6ce:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f6d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f6d6:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f6da:	0f 92 c0             	setb   al
c001f6dd:	c3                   	ret    

c001f6de <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f6de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6e6:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f6ea:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f6ee:	09 c2                	or     edx,eax
c001f6f0:	0f 94 c0             	sete   al
c001f6f3:	c3                   	ret    

c001f6f4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f6f4:	57                   	push   edi
c001f6f5:	56                   	push   esi
c001f6f6:	53                   	push   ebx
c001f6f7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6fb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f6ff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f703:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f707:	57                   	push   edi
c001f708:	56                   	push   esi
c001f709:	53                   	push   ebx
c001f70a:	51                   	push   ecx
c001f70b:	e8 ce ff ff ff       	call   c001f6de <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f710:	83 c4 10             	add    esp,0x10
c001f713:	88 c2                	mov    dl,al
c001f715:	31 c0                	xor    eax,eax
c001f717:	84 d2                	test   dl,dl
c001f719:	75 0c                	jne    c001f727 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f71b:	57                   	push   edi
c001f71c:	56                   	push   esi
c001f71d:	53                   	push   ebx
c001f71e:	51                   	push   ecx
c001f71f:	e8 a6 ff ff ff       	call   c001f6ca <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f724:	83 c4 10             	add    esp,0x10
c001f727:	83 e0 01             	and    eax,0x1
c001f72a:	5b                   	pop    ebx
c001f72b:	88 c1                	mov    cl,al
c001f72d:	83 e2 01             	and    edx,0x1
c001f730:	a0 e1 17 03 c0       	mov    al,ds:0xc00317e1
c001f735:	c1 e2 06             	shl    edx,0x6
c001f738:	83 e0 ba             	and    eax,0xffffffba
c001f73b:	5e                   	pop    esi
c001f73c:	09 c8                	or     eax,ecx
c001f73e:	5f                   	pop    edi
c001f73f:	09 d0                	or     eax,edx
c001f741:	a2 e1 17 03 c0       	mov    ds:0xc00317e1,al
c001f746:	c3                   	ret    

c001f747 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f747:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f74b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f74f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f753:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f757:	c3                   	ret    

c001f758 <Vm::fpuAbs(unsigned long long)>:
c001f758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f75c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f760:	c3                   	ret    

c001f761 <Vm::fpuChs(unsigned long long)>:
c001f761:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f765:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f769:	f7 d8                	neg    eax
c001f76b:	83 d2 00             	adc    edx,0x0
c001f76e:	f7 da                	neg    edx
c001f770:	c3                   	ret    

c001f771 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f771:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f775:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f77a:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f77e:	eb c7                	jmp    c001f747 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f780 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f780:	53                   	push   ebx
c001f781:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f785:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f789:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f78d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f791:	0f af ca             	imul   ecx,edx
c001f794:	0f af d8             	imul   ebx,eax
c001f797:	f7 e2                	mul    edx
c001f799:	01 d9                	add    ecx,ebx
c001f79b:	5b                   	pop    ebx
c001f79c:	01 ca                	add    edx,ecx
c001f79e:	c3                   	ret    

c001f79f <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f79f:	83 ec 0c             	sub    esp,0xc
c001f7a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7b2:	e8 a5 70 00 00       	call   c002685c <__udivdi3>
c001f7b7:	83 c4 1c             	add    esp,0x1c
c001f7ba:	c3                   	ret    

c001f7bb <Vm::fpuSquare(unsigned long long)>:
c001f7bb:	50                   	push   eax
c001f7bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f7c4:	52                   	push   edx
c001f7c5:	50                   	push   eax
c001f7c6:	52                   	push   edx
c001f7c7:	50                   	push   eax
c001f7c8:	e8 b3 ff ff ff       	call   c001f780 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f7cd:	83 c4 14             	add    esp,0x14
c001f7d0:	c3                   	ret    

c001f7d1 <Vm::fpuGetReg(int)>:
c001f7d1:	83 ec 0c             	sub    esp,0xc
c001f7d4:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f7d9:	76 10                	jbe    c001f7eb <Vm::fpuGetReg(int)+0x1a>
c001f7db:	83 ec 0c             	sub    esp,0xc
c001f7de:	68 9e c5 02 c0       	push   0xc002c59e
c001f7e3:	e8 6b ac ff ff       	call   c001a453 <Krnl::panic(char const*)>
c001f7e8:	83 c4 10             	add    esp,0x10
c001f7eb:	a0 e1 17 03 c0       	mov    al,ds:0xc00317e1
c001f7f0:	b9 08 00 00 00       	mov    ecx,0x8
c001f7f5:	c0 e8 03             	shr    al,0x3
c001f7f8:	83 e0 07             	and    eax,0x7
c001f7fb:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f7ff:	99                   	cdq    
c001f800:	f7 f9                	idiv   ecx
c001f802:	8b 04 d5 e4 17 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce81c]
c001f809:	8b 14 d5 e8 17 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce818]
c001f810:	83 c4 0c             	add    esp,0xc
c001f813:	c3                   	ret    

c001f814 <Vm::fpuSetReg(int, unsigned long long)>:
c001f814:	57                   	push   edi
c001f815:	56                   	push   esi
c001f816:	52                   	push   edx
c001f817:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f81b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f81f:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f824:	76 10                	jbe    c001f836 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f826:	83 ec 0c             	sub    esp,0xc
c001f829:	68 b1 c5 02 c0       	push   0xc002c5b1
c001f82e:	e8 20 ac ff ff       	call   c001a453 <Krnl::panic(char const*)>
c001f833:	83 c4 10             	add    esp,0x10
c001f836:	a0 e1 17 03 c0       	mov    al,ds:0xc00317e1
c001f83b:	b9 08 00 00 00       	mov    ecx,0x8
c001f840:	c0 e8 03             	shr    al,0x3
c001f843:	83 e0 07             	and    eax,0x7
c001f846:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f84a:	99                   	cdq    
c001f84b:	f7 f9                	idiv   ecx
c001f84d:	89 34 d5 e4 17 03 c0 	mov    DWORD PTR [edx*8-0x3ffce81c],esi
c001f854:	89 3c d5 e8 17 03 c0 	mov    DWORD PTR [edx*8-0x3ffce818],edi
c001f85b:	58                   	pop    eax
c001f85c:	5e                   	pop    esi
c001f85d:	5f                   	pop    edi
c001f85e:	c3                   	ret    

c001f85f <Vm::fpuPush(unsigned long long)>:
c001f85f:	a0 e1 17 03 c0       	mov    al,ds:0xc00317e1
c001f864:	c0 e8 03             	shr    al,0x3
c001f867:	83 e0 07             	and    eax,0x7
c001f86a:	83 c0 07             	add    eax,0x7
c001f86d:	88 c2                	mov    dl,al
c001f86f:	83 e0 07             	and    eax,0x7
c001f872:	83 e2 07             	and    edx,0x7
c001f875:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f87c:	8a 15 e1 17 03 c0    	mov    dl,BYTE PTR ds:0xc00317e1
c001f882:	83 e2 c7             	and    edx,0xffffffc7
c001f885:	09 ca                	or     edx,ecx
c001f887:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f88b:	88 15 e1 17 03 c0    	mov    BYTE PTR ds:0xc00317e1,dl
c001f891:	89 0c c5 e8 17 03 c0 	mov    DWORD PTR [eax*8-0x3ffce818],ecx
c001f898:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f89c:	89 14 c5 e4 17 03 c0 	mov    DWORD PTR [eax*8-0x3ffce81c],edx
c001f8a3:	a1 24 18 03 c0       	mov    eax,ds:0xc0031824
c001f8a8:	83 f8 08             	cmp    eax,0x8
c001f8ab:	75 08                	jne    c001f8b5 <Vm::fpuPush(unsigned long long)+0x56>
c001f8ad:	80 0d e0 17 03 c0 40 	or     BYTE PTR ds:0xc00317e0,0x40
c001f8b4:	c3                   	ret    
c001f8b5:	40                   	inc    eax
c001f8b6:	a3 24 18 03 c0       	mov    ds:0xc0031824,eax
c001f8bb:	c3                   	ret    

c001f8bc <Vm::fpuPop()>:
c001f8bc:	8a 0d e1 17 03 c0    	mov    cl,BYTE PTR ds:0xc00317e1
c001f8c2:	53                   	push   ebx
c001f8c3:	c0 e9 03             	shr    cl,0x3
c001f8c6:	8a 1d e1 17 03 c0    	mov    bl,BYTE PTR ds:0xc00317e1
c001f8cc:	83 e1 07             	and    ecx,0x7
c001f8cf:	83 e3 c7             	and    ebx,0xffffffc7
c001f8d2:	8b 04 cd e4 17 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce81c]
c001f8d9:	8b 14 cd e8 17 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce818]
c001f8e0:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f8e7:	83 e1 38             	and    ecx,0x38
c001f8ea:	09 d9                	or     ecx,ebx
c001f8ec:	88 0d e1 17 03 c0    	mov    BYTE PTR ds:0xc00317e1,cl
c001f8f2:	8b 0d 24 18 03 c0    	mov    ecx,DWORD PTR ds:0xc0031824
c001f8f8:	85 c9                	test   ecx,ecx
c001f8fa:	74 09                	je     c001f905 <Vm::fpuPop()+0x49>
c001f8fc:	49                   	dec    ecx
c001f8fd:	89 0d 24 18 03 c0    	mov    DWORD PTR ds:0xc0031824,ecx
c001f903:	eb 07                	jmp    c001f90c <Vm::fpuPop()+0x50>
c001f905:	80 0d e0 17 03 c0 40 	or     BYTE PTR ds:0xc00317e0,0x40
c001f90c:	5b                   	pop    ebx
c001f90d:	c3                   	ret    

c001f90e <Vm::x87Handler(regs*)>:
c001f90e:	55                   	push   ebp
c001f90f:	57                   	push   edi
c001f910:	56                   	push   esi
c001f911:	53                   	push   ebx
c001f912:	83 ec 1c             	sub    esp,0x1c
c001f915:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f919:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f91e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f921:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f929:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f92d:	50                   	push   eax
c001f92e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f932:	50                   	push   eax
c001f933:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f937:	50                   	push   eax
c001f938:	53                   	push   ebx
c001f939:	e8 dc a1 ff ff       	call   c0019b1a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f93e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f941:	83 c4 10             	add    esp,0x10
c001f944:	89 c6                	mov    esi,eax
c001f946:	80 fa d9             	cmp    dl,0xd9
c001f949:	0f 85 52 01 00 00    	jne    c001faa1 <Vm::x87Handler(regs*)+0x193>
c001f94f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f953:	8d 50 20             	lea    edx,[eax+0x20]
c001f956:	80 fa 0e             	cmp    dl,0xe
c001f959:	0f 87 86 00 00 00    	ja     c001f9e5 <Vm::x87Handler(regs*)+0xd7>
c001f95f:	0f b6 d2             	movzx  edx,dl
c001f962:	ff 24 95 c4 c5 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3a3c]
c001f969:	e8 e7 fc ff ff       	call   c001f655 <Vm::fpuGet0()>
c001f96e:	eb 05                	jmp    c001f975 <Vm::x87Handler(regs*)+0x67>
c001f970:	e8 e5 fc ff ff       	call   c001f65a <Vm::fpuGet1()>
c001f975:	57                   	push   edi
c001f976:	57                   	push   edi
c001f977:	52                   	push   edx
c001f978:	50                   	push   eax
c001f979:	e8 e1 fe ff ff       	call   c001f85f <Vm::fpuPush(unsigned long long)>
c001f97e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f982:	83 c4 10             	add    esp,0x10
c001f985:	b0 01                	mov    al,0x1
c001f987:	e9 e3 09 00 00       	jmp    c002036f <Vm::x87Handler(regs*)+0xa61>
c001f98c:	83 ec 0c             	sub    esp,0xc
c001f98f:	6a 00                	push   0x0
c001f991:	e8 3b fe ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001f996:	59                   	pop    ecx
c001f997:	5e                   	pop    esi
c001f998:	52                   	push   edx
c001f999:	50                   	push   eax
c001f99a:	e8 c2 fd ff ff       	call   c001f761 <Vm::fpuChs(unsigned long long)>
c001f99f:	eb 13                	jmp    c001f9b4 <Vm::x87Handler(regs*)+0xa6>
c001f9a1:	83 ec 0c             	sub    esp,0xc
c001f9a4:	6a 00                	push   0x0
c001f9a6:	e8 26 fe ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001f9ab:	5f                   	pop    edi
c001f9ac:	5d                   	pop    ebp
c001f9ad:	52                   	push   edx
c001f9ae:	50                   	push   eax
c001f9af:	e8 a4 fd ff ff       	call   c001f758 <Vm::fpuAbs(unsigned long long)>
c001f9b4:	83 c4 0c             	add    esp,0xc
c001f9b7:	52                   	push   edx
c001f9b8:	50                   	push   eax
c001f9b9:	6a 00                	push   0x0
c001f9bb:	e8 54 fe ff ff       	call   c001f814 <Vm::fpuSetReg(int, unsigned long long)>
c001f9c0:	eb bc                	jmp    c001f97e <Vm::x87Handler(regs*)+0x70>
c001f9c2:	e8 d3 fc ff ff       	call   c001f69a <Vm::fpuGetLog210()>
c001f9c7:	eb ac                	jmp    c001f975 <Vm::x87Handler(regs*)+0x67>
c001f9c9:	e8 9c fc ff ff       	call   c001f66a <Vm::fpuGetLog2E()>
c001f9ce:	eb a5                	jmp    c001f975 <Vm::x87Handler(regs*)+0x67>
c001f9d0:	e8 8d fc ff ff       	call   c001f662 <Vm::fpuGetPi()>
c001f9d5:	eb 9e                	jmp    c001f975 <Vm::x87Handler(regs*)+0x67>
c001f9d7:	e8 d6 fc ff ff       	call   c001f6b2 <Vm::fpuGetLog102()>
c001f9dc:	eb 97                	jmp    c001f975 <Vm::x87Handler(regs*)+0x67>
c001f9de:	e8 9f fc ff ff       	call   c001f682 <Vm::fpuGetLogE2()>
c001f9e3:	eb 90                	jmp    c001f975 <Vm::x87Handler(regs*)+0x67>
c001f9e5:	8d 50 40             	lea    edx,[eax+0x40]
c001f9e8:	80 fa 07             	cmp    dl,0x7
c001f9eb:	77 15                	ja     c001fa02 <Vm::x87Handler(regs*)+0xf4>
c001f9ed:	83 ec 0c             	sub    esp,0xc
c001f9f0:	2d c0 00 00 00       	sub    eax,0xc0
c001f9f5:	50                   	push   eax
c001f9f6:	e8 d6 fd ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001f9fb:	59                   	pop    ecx
c001f9fc:	5e                   	pop    esi
c001f9fd:	e9 75 ff ff ff       	jmp    c001f977 <Vm::x87Handler(regs*)+0x69>
c001fa02:	8d 50 38             	lea    edx,[eax+0x38]
c001fa05:	80 fa 07             	cmp    dl,0x7
c001fa08:	77 3c                	ja     c001fa46 <Vm::x87Handler(regs*)+0x138>
c001fa0a:	83 ec 0c             	sub    esp,0xc
c001fa0d:	2d c8 00 00 00       	sub    eax,0xc8
c001fa12:	50                   	push   eax
c001fa13:	e8 b9 fd ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fa18:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa1f:	89 c6                	mov    esi,eax
c001fa21:	89 d7                	mov    edi,edx
c001fa23:	e8 a9 fd ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fa28:	83 c4 0c             	add    esp,0xc
c001fa2b:	52                   	push   edx
c001fa2c:	50                   	push   eax
c001fa2d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa31:	2d c8 00 00 00       	sub    eax,0xc8
c001fa36:	50                   	push   eax
c001fa37:	e8 d8 fd ff ff       	call   c001f814 <Vm::fpuSetReg(int, unsigned long long)>
c001fa3c:	83 c4 0c             	add    esp,0xc
c001fa3f:	57                   	push   edi
c001fa40:	56                   	push   esi
c001fa41:	e9 73 ff ff ff       	jmp    c001f9b9 <Vm::x87Handler(regs*)+0xab>
c001fa46:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fa4a:	84 d2                	test   dl,dl
c001fa4c:	75 0f                	jne    c001fa5d <Vm::x87Handler(regs*)+0x14f>
c001fa4e:	83 ec 0c             	sub    esp,0xc
c001fa51:	ff 36                	push   DWORD PTR [esi]
c001fa53:	e8 c8 fa ff ff       	call   c001f520 <Vm::fpu32ToInternal(unsigned int)>
c001fa58:	e9 bf 00 00 00       	jmp    c001fb1c <Vm::x87Handler(regs*)+0x20e>
c001fa5d:	80 fa 03             	cmp    dl,0x3
c001fa60:	75 13                	jne    c001fa75 <Vm::x87Handler(regs*)+0x167>
c001fa62:	e8 55 fe ff ff       	call   c001f8bc <Vm::fpuPop()>
c001fa67:	55                   	push   ebp
c001fa68:	55                   	push   ebp
c001fa69:	52                   	push   edx
c001fa6a:	50                   	push   eax
c001fa6b:	e8 4c fa ff ff       	call   c001f4bc <Vm::fpuInternalTo32(unsigned long long)>
c001fa70:	e9 88 00 00 00       	jmp    c001fafd <Vm::x87Handler(regs*)+0x1ef>
c001fa75:	80 fa 05             	cmp    dl,0x5
c001fa78:	75 0e                	jne    c001fa88 <Vm::x87Handler(regs*)+0x17a>
c001fa7a:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fa7d:	66 a3 e2 17 03 c0    	mov    ds:0xc00317e2,ax
c001fa83:	e9 df 00 00 00       	jmp    c001fb67 <Vm::x87Handler(regs*)+0x259>
c001fa88:	31 c0                	xor    eax,eax
c001fa8a:	80 fa 07             	cmp    dl,0x7
c001fa8d:	0f 85 dc 08 00 00    	jne    c002036f <Vm::x87Handler(regs*)+0xa61>
c001fa93:	66 a1 e2 17 03 c0    	mov    ax,ds:0xc00317e2
c001fa99:	66 89 06             	mov    WORD PTR [esi],ax
c001fa9c:	e9 c6 00 00 00       	jmp    c001fb67 <Vm::x87Handler(regs*)+0x259>
c001faa1:	80 fa d8             	cmp    dl,0xd8
c001faa4:	0f 84 c9 00 00 00    	je     c001fb73 <Vm::x87Handler(regs*)+0x265>
c001faaa:	80 fa dc             	cmp    dl,0xdc
c001faad:	0f 84 0d 02 00 00    	je     c001fcc0 <Vm::x87Handler(regs*)+0x3b2>
c001fab3:	80 fa de             	cmp    dl,0xde
c001fab6:	0f 84 cd 02 00 00    	je     c001fd89 <Vm::x87Handler(regs*)+0x47b>
c001fabc:	80 fa dd             	cmp    dl,0xdd
c001fabf:	0f 84 5f 04 00 00    	je     c001ff24 <Vm::x87Handler(regs*)+0x616>
c001fac5:	80 fa da             	cmp    dl,0xda
c001fac8:	0f 84 24 05 00 00    	je     c001fff2 <Vm::x87Handler(regs*)+0x6e4>
c001face:	80 fa df             	cmp    dl,0xdf
c001fad1:	0f 84 68 05 00 00    	je     c002003f <Vm::x87Handler(regs*)+0x731>
c001fad7:	31 c0                	xor    eax,eax
c001fad9:	80 fa db             	cmp    dl,0xdb
c001fadc:	0f 85 8d 08 00 00    	jne    c002036f <Vm::x87Handler(regs*)+0xa61>
c001fae2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fae6:	80 fa 03             	cmp    dl,0x3
c001fae9:	0f 85 70 06 00 00    	jne    c002015f <Vm::x87Handler(regs*)+0x851>
c001faef:	e8 c8 fd ff ff       	call   c001f8bc <Vm::fpuPop()>
c001faf4:	55                   	push   ebp
c001faf5:	55                   	push   ebp
c001faf6:	52                   	push   edx
c001faf7:	50                   	push   eax
c001faf8:	e8 71 fa ff ff       	call   c001f56e <Vm::fpuFloatToLong(unsigned long long)>
c001fafd:	83 c4 10             	add    esp,0x10
c001fb00:	89 06                	mov    DWORD PTR [esi],eax
c001fb02:	eb 63                	jmp    c001fb67 <Vm::x87Handler(regs*)+0x259>
c001fb04:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb08:	84 d2                	test   dl,dl
c001fb0a:	0f 85 e6 05 00 00    	jne    c00200f6 <Vm::x87Handler(regs*)+0x7e8>
c001fb10:	57                   	push   edi
c001fb11:	57                   	push   edi
c001fb12:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb15:	ff 36                	push   DWORD PTR [esi]
c001fb17:	e8 49 fa ff ff       	call   c001f565 <Vm::fpu64ToInternal(unsigned long long)>
c001fb1c:	5e                   	pop    esi
c001fb1d:	5f                   	pop    edi
c001fb1e:	52                   	push   edx
c001fb1f:	50                   	push   eax
c001fb20:	e8 3a fd ff ff       	call   c001f85f <Vm::fpuPush(unsigned long long)>
c001fb25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fb29:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fb2c:	e9 51 fe ff ff       	jmp    c001f982 <Vm::x87Handler(regs*)+0x74>
c001fb31:	80 fa 03             	cmp    dl,0x3
c001fb34:	0f 85 d7 06 00 00    	jne    c0020211 <Vm::x87Handler(regs*)+0x903>
c001fb3a:	57                   	push   edi
c001fb3b:	57                   	push   edi
c001fb3c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb3f:	ff 36                	push   DWORD PTR [esi]
c001fb41:	e8 1f fa ff ff       	call   c001f565 <Vm::fpu64ToInternal(unsigned long long)>
c001fb46:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb4d:	89 c6                	mov    esi,eax
c001fb4f:	89 d7                	mov    edi,edx
c001fb51:	e8 7b fc ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fb56:	57                   	push   edi
c001fb57:	56                   	push   esi
c001fb58:	52                   	push   edx
c001fb59:	50                   	push   eax
c001fb5a:	e8 95 fb ff ff       	call   c001f6f4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fb5f:	83 c4 20             	add    esp,0x20
c001fb62:	e8 55 fd ff ff       	call   c001f8bc <Vm::fpuPop()>
c001fb67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb6b:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fb6e:	e9 12 fe ff ff       	jmp    c001f985 <Vm::x87Handler(regs*)+0x77>
c001fb73:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb77:	8d 50 40             	lea    edx,[eax+0x40]
c001fb7a:	80 fa 07             	cmp    dl,0x7
c001fb7d:	77 29                	ja     c001fba8 <Vm::x87Handler(regs*)+0x29a>
c001fb7f:	83 ec 0c             	sub    esp,0xc
c001fb82:	2d c0 00 00 00       	sub    eax,0xc0
c001fb87:	50                   	push   eax
c001fb88:	e8 44 fc ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fb8d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb94:	89 c6                	mov    esi,eax
c001fb96:	89 d7                	mov    edi,edx
c001fb98:	e8 34 fc ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fb9d:	57                   	push   edi
c001fb9e:	56                   	push   esi
c001fb9f:	52                   	push   edx
c001fba0:	50                   	push   eax
c001fba1:	e8 a1 fb ff ff       	call   c001f747 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fba6:	eb 2f                	jmp    c001fbd7 <Vm::x87Handler(regs*)+0x2c9>
c001fba8:	8d 50 38             	lea    edx,[eax+0x38]
c001fbab:	80 fa 07             	cmp    dl,0x7
c001fbae:	77 2f                	ja     c001fbdf <Vm::x87Handler(regs*)+0x2d1>
c001fbb0:	83 ec 0c             	sub    esp,0xc
c001fbb3:	2d c8 00 00 00       	sub    eax,0xc8
c001fbb8:	50                   	push   eax
c001fbb9:	e8 13 fc ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fbbe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbc5:	89 c6                	mov    esi,eax
c001fbc7:	89 d7                	mov    edi,edx
c001fbc9:	e8 03 fc ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fbce:	57                   	push   edi
c001fbcf:	56                   	push   esi
c001fbd0:	52                   	push   edx
c001fbd1:	50                   	push   eax
c001fbd2:	e8 a9 fb ff ff       	call   c001f780 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fbd7:	83 c4 1c             	add    esp,0x1c
c001fbda:	e9 d8 fd ff ff       	jmp    c001f9b7 <Vm::x87Handler(regs*)+0xa9>
c001fbdf:	8d 50 30             	lea    edx,[eax+0x30]
c001fbe2:	80 fa 07             	cmp    dl,0x7
c001fbe5:	77 0d                	ja     c001fbf4 <Vm::x87Handler(regs*)+0x2e6>
c001fbe7:	83 ec 0c             	sub    esp,0xc
c001fbea:	2d d0 00 00 00       	sub    eax,0xd0
c001fbef:	e9 99 03 00 00       	jmp    c001ff8d <Vm::x87Handler(regs*)+0x67f>
c001fbf4:	8d 50 28             	lea    edx,[eax+0x28]
c001fbf7:	80 fa 07             	cmp    dl,0x7
c001fbfa:	77 0d                	ja     c001fc09 <Vm::x87Handler(regs*)+0x2fb>
c001fbfc:	83 ec 0c             	sub    esp,0xc
c001fbff:	2d d8 00 00 00       	sub    eax,0xd8
c001fc04:	e9 c0 03 00 00       	jmp    c001ffc9 <Vm::x87Handler(regs*)+0x6bb>
c001fc09:	8d 50 20             	lea    edx,[eax+0x20]
c001fc0c:	80 fa 07             	cmp    dl,0x7
c001fc0f:	77 1b                	ja     c001fc2c <Vm::x87Handler(regs*)+0x31e>
c001fc11:	83 ec 0c             	sub    esp,0xc
c001fc14:	2d e0 00 00 00       	sub    eax,0xe0
c001fc19:	50                   	push   eax
c001fc1a:	e8 b2 fb ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fc1f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc26:	89 c6                	mov    esi,eax
c001fc28:	89 d7                	mov    edi,edx
c001fc2a:	eb 22                	jmp    c001fc4e <Vm::x87Handler(regs*)+0x340>
c001fc2c:	8d 50 18             	lea    edx,[eax+0x18]
c001fc2f:	80 fa 07             	cmp    dl,0x7
c001fc32:	77 2d                	ja     c001fc61 <Vm::x87Handler(regs*)+0x353>
c001fc34:	83 ec 0c             	sub    esp,0xc
c001fc37:	6a 00                	push   0x0
c001fc39:	e8 93 fb ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fc3e:	89 c6                	mov    esi,eax
c001fc40:	89 d7                	mov    edi,edx
c001fc42:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc46:	2d e8 00 00 00       	sub    eax,0xe8
c001fc4b:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc4e:	e8 7e fb ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fc53:	57                   	push   edi
c001fc54:	56                   	push   esi
c001fc55:	52                   	push   edx
c001fc56:	50                   	push   eax
c001fc57:	e8 15 fb ff ff       	call   c001f771 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc5c:	e9 76 ff ff ff       	jmp    c001fbd7 <Vm::x87Handler(regs*)+0x2c9>
c001fc61:	8d 50 10             	lea    edx,[eax+0x10]
c001fc64:	80 fa 07             	cmp    dl,0x7
c001fc67:	77 1b                	ja     c001fc84 <Vm::x87Handler(regs*)+0x376>
c001fc69:	83 ec 0c             	sub    esp,0xc
c001fc6c:	2d f0 00 00 00       	sub    eax,0xf0
c001fc71:	50                   	push   eax
c001fc72:	e8 5a fb ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fc77:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc7e:	89 c6                	mov    esi,eax
c001fc80:	89 d7                	mov    edi,edx
c001fc82:	eb 22                	jmp    c001fca6 <Vm::x87Handler(regs*)+0x398>
c001fc84:	3c f7                	cmp    al,0xf7
c001fc86:	0f 86 d1 03 00 00    	jbe    c002005d <Vm::x87Handler(regs*)+0x74f>
c001fc8c:	83 ec 0c             	sub    esp,0xc
c001fc8f:	6a 00                	push   0x0
c001fc91:	e8 3b fb ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fc96:	89 c6                	mov    esi,eax
c001fc98:	89 d7                	mov    edi,edx
c001fc9a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc9e:	2d f8 00 00 00       	sub    eax,0xf8
c001fca3:	89 04 24             	mov    DWORD PTR [esp],eax
c001fca6:	e8 26 fb ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fcab:	57                   	push   edi
c001fcac:	56                   	push   esi
c001fcad:	52                   	push   edx
c001fcae:	50                   	push   eax
c001fcaf:	e8 eb fa ff ff       	call   c001f79f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fcb4:	83 c4 1c             	add    esp,0x1c
c001fcb7:	52                   	push   edx
c001fcb8:	50                   	push   eax
c001fcb9:	6a 00                	push   0x0
c001fcbb:	e9 51 02 00 00       	jmp    c001ff11 <Vm::x87Handler(regs*)+0x603>
c001fcc0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcc4:	8d 50 40             	lea    edx,[eax+0x40]
c001fcc7:	80 fa 07             	cmp    dl,0x7
c001fcca:	77 37                	ja     c001fd03 <Vm::x87Handler(regs*)+0x3f5>
c001fccc:	83 ec 0c             	sub    esp,0xc
c001fccf:	2d c0 00 00 00       	sub    eax,0xc0
c001fcd4:	50                   	push   eax
c001fcd5:	e8 f7 fa ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fcda:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fce1:	89 c6                	mov    esi,eax
c001fce3:	89 d7                	mov    edi,edx
c001fce5:	e8 e7 fa ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fcea:	57                   	push   edi
c001fceb:	56                   	push   esi
c001fcec:	52                   	push   edx
c001fced:	50                   	push   eax
c001fcee:	e8 54 fa ff ff       	call   c001f747 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fcf3:	83 c4 1c             	add    esp,0x1c
c001fcf6:	52                   	push   edx
c001fcf7:	50                   	push   eax
c001fcf8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcfc:	2d c0 00 00 00       	sub    eax,0xc0
c001fd01:	eb 3d                	jmp    c001fd40 <Vm::x87Handler(regs*)+0x432>
c001fd03:	8d 50 38             	lea    edx,[eax+0x38]
c001fd06:	80 fa 07             	cmp    dl,0x7
c001fd09:	77 3b                	ja     c001fd46 <Vm::x87Handler(regs*)+0x438>
c001fd0b:	83 ec 0c             	sub    esp,0xc
c001fd0e:	2d c8 00 00 00       	sub    eax,0xc8
c001fd13:	50                   	push   eax
c001fd14:	e8 b8 fa ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fd19:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd20:	89 c6                	mov    esi,eax
c001fd22:	89 d7                	mov    edi,edx
c001fd24:	e8 a8 fa ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fd29:	57                   	push   edi
c001fd2a:	56                   	push   esi
c001fd2b:	52                   	push   edx
c001fd2c:	50                   	push   eax
c001fd2d:	e8 4e fa ff ff       	call   c001f780 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd32:	83 c4 1c             	add    esp,0x1c
c001fd35:	52                   	push   edx
c001fd36:	50                   	push   eax
c001fd37:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd3b:	2d c8 00 00 00       	sub    eax,0xc8
c001fd40:	50                   	push   eax
c001fd41:	e9 75 fc ff ff       	jmp    c001f9bb <Vm::x87Handler(regs*)+0xad>
c001fd46:	83 c0 18             	add    eax,0x18
c001fd49:	3c 07                	cmp    al,0x7
c001fd4b:	0f 87 3b 04 00 00    	ja     c002018c <Vm::x87Handler(regs*)+0x87e>
c001fd51:	83 ec 0c             	sub    esp,0xc
c001fd54:	6a 00                	push   0x0
c001fd56:	e8 76 fa ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fd5b:	89 c6                	mov    esi,eax
c001fd5d:	89 d7                	mov    edi,edx
c001fd5f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd63:	2d e8 00 00 00       	sub    eax,0xe8
c001fd68:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd6b:	e8 61 fa ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fd70:	57                   	push   edi
c001fd71:	56                   	push   esi
c001fd72:	52                   	push   edx
c001fd73:	50                   	push   eax
c001fd74:	e8 f8 f9 ff ff       	call   c001f771 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fd79:	83 c4 1c             	add    esp,0x1c
c001fd7c:	52                   	push   edx
c001fd7d:	50                   	push   eax
c001fd7e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd82:	2d e8 00 00 00       	sub    eax,0xe8
c001fd87:	eb b7                	jmp    c001fd40 <Vm::x87Handler(regs*)+0x432>
c001fd89:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd8d:	8d 50 40             	lea    edx,[eax+0x40]
c001fd90:	80 fa 07             	cmp    dl,0x7
c001fd93:	77 3a                	ja     c001fdcf <Vm::x87Handler(regs*)+0x4c1>
c001fd95:	83 ec 0c             	sub    esp,0xc
c001fd98:	2d c0 00 00 00       	sub    eax,0xc0
c001fd9d:	50                   	push   eax
c001fd9e:	e8 2e fa ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fda3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdaa:	89 c6                	mov    esi,eax
c001fdac:	89 d7                	mov    edi,edx
c001fdae:	e8 1e fa ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fdb3:	57                   	push   edi
c001fdb4:	56                   	push   esi
c001fdb5:	52                   	push   edx
c001fdb6:	50                   	push   eax
c001fdb7:	e8 8b f9 ff ff       	call   c001f747 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fdbc:	83 c4 1c             	add    esp,0x1c
c001fdbf:	52                   	push   edx
c001fdc0:	50                   	push   eax
c001fdc1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdc5:	2d c0 00 00 00       	sub    eax,0xc0
c001fdca:	e9 9e 01 00 00       	jmp    c001ff6d <Vm::x87Handler(regs*)+0x65f>
c001fdcf:	8d 50 20             	lea    edx,[eax+0x20]
c001fdd2:	80 fa 07             	cmp    dl,0x7
c001fdd5:	77 3a                	ja     c001fe11 <Vm::x87Handler(regs*)+0x503>
c001fdd7:	83 ec 0c             	sub    esp,0xc
c001fdda:	2d e0 00 00 00       	sub    eax,0xe0
c001fddf:	50                   	push   eax
c001fde0:	e8 ec f9 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fde5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdec:	89 c6                	mov    esi,eax
c001fdee:	89 d7                	mov    edi,edx
c001fdf0:	e8 dc f9 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fdf5:	57                   	push   edi
c001fdf6:	56                   	push   esi
c001fdf7:	52                   	push   edx
c001fdf8:	50                   	push   eax
c001fdf9:	e8 73 f9 ff ff       	call   c001f771 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fdfe:	83 c4 1c             	add    esp,0x1c
c001fe01:	52                   	push   edx
c001fe02:	50                   	push   eax
c001fe03:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe07:	2d e0 00 00 00       	sub    eax,0xe0
c001fe0c:	e9 5c 01 00 00       	jmp    c001ff6d <Vm::x87Handler(regs*)+0x65f>
c001fe11:	8d 50 18             	lea    edx,[eax+0x18]
c001fe14:	80 fa 07             	cmp    dl,0x7
c001fe17:	77 3b                	ja     c001fe54 <Vm::x87Handler(regs*)+0x546>
c001fe19:	83 ec 0c             	sub    esp,0xc
c001fe1c:	6a 00                	push   0x0
c001fe1e:	e8 ae f9 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fe23:	89 c6                	mov    esi,eax
c001fe25:	89 d7                	mov    edi,edx
c001fe27:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe2b:	2d e8 00 00 00       	sub    eax,0xe8
c001fe30:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe33:	e8 99 f9 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fe38:	57                   	push   edi
c001fe39:	56                   	push   esi
c001fe3a:	52                   	push   edx
c001fe3b:	50                   	push   eax
c001fe3c:	e8 30 f9 ff ff       	call   c001f771 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe41:	83 c4 1c             	add    esp,0x1c
c001fe44:	52                   	push   edx
c001fe45:	50                   	push   eax
c001fe46:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe4a:	2d e8 00 00 00       	sub    eax,0xe8
c001fe4f:	e9 19 01 00 00       	jmp    c001ff6d <Vm::x87Handler(regs*)+0x65f>
c001fe54:	8d 50 38             	lea    edx,[eax+0x38]
c001fe57:	80 fa 07             	cmp    dl,0x7
c001fe5a:	77 37                	ja     c001fe93 <Vm::x87Handler(regs*)+0x585>
c001fe5c:	83 ec 0c             	sub    esp,0xc
c001fe5f:	2d c8 00 00 00       	sub    eax,0xc8
c001fe64:	50                   	push   eax
c001fe65:	e8 67 f9 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fe6a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe71:	89 c6                	mov    esi,eax
c001fe73:	89 d7                	mov    edi,edx
c001fe75:	e8 57 f9 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fe7a:	57                   	push   edi
c001fe7b:	56                   	push   esi
c001fe7c:	52                   	push   edx
c001fe7d:	50                   	push   eax
c001fe7e:	e8 fd f8 ff ff       	call   c001f780 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe83:	83 c4 1c             	add    esp,0x1c
c001fe86:	52                   	push   edx
c001fe87:	50                   	push   eax
c001fe88:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe8c:	2d c8 00 00 00       	sub    eax,0xc8
c001fe91:	eb 7d                	jmp    c001ff10 <Vm::x87Handler(regs*)+0x602>
c001fe93:	3c f7                	cmp    al,0xf7
c001fe95:	76 38                	jbe    c001fecf <Vm::x87Handler(regs*)+0x5c1>
c001fe97:	83 ec 0c             	sub    esp,0xc
c001fe9a:	6a 00                	push   0x0
c001fe9c:	e8 30 f9 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fea1:	89 c6                	mov    esi,eax
c001fea3:	89 d7                	mov    edi,edx
c001fea5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fea9:	2d f8 00 00 00       	sub    eax,0xf8
c001feae:	89 04 24             	mov    DWORD PTR [esp],eax
c001feb1:	e8 1b f9 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001feb6:	57                   	push   edi
c001feb7:	56                   	push   esi
c001feb8:	52                   	push   edx
c001feb9:	50                   	push   eax
c001feba:	e8 e0 f8 ff ff       	call   c001f79f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001febf:	83 c4 1c             	add    esp,0x1c
c001fec2:	52                   	push   edx
c001fec3:	50                   	push   eax
c001fec4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fec8:	2d f8 00 00 00       	sub    eax,0xf8
c001fecd:	eb 41                	jmp    c001ff10 <Vm::x87Handler(regs*)+0x602>
c001fecf:	8d 50 10             	lea    edx,[eax+0x10]
c001fed2:	80 fa 07             	cmp    dl,0x7
c001fed5:	0f 87 5a 01 00 00    	ja     c0020035 <Vm::x87Handler(regs*)+0x727>
c001fedb:	83 ec 0c             	sub    esp,0xc
c001fede:	2d f0 00 00 00       	sub    eax,0xf0
c001fee3:	50                   	push   eax
c001fee4:	e8 e8 f8 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fee9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fef0:	89 c6                	mov    esi,eax
c001fef2:	89 d7                	mov    edi,edx
c001fef4:	e8 d8 f8 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001fef9:	57                   	push   edi
c001fefa:	56                   	push   esi
c001fefb:	52                   	push   edx
c001fefc:	50                   	push   eax
c001fefd:	e8 9d f8 ff ff       	call   c001f79f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ff02:	83 c4 1c             	add    esp,0x1c
c001ff05:	52                   	push   edx
c001ff06:	50                   	push   eax
c001ff07:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff0b:	2d f0 00 00 00       	sub    eax,0xf0
c001ff10:	50                   	push   eax
c001ff11:	e8 fe f8 ff ff       	call   c001f814 <Vm::fpuSetReg(int, unsigned long long)>
c001ff16:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ff1a:	e8 9d f9 ff ff       	call   c001f8bc <Vm::fpuPop()>
c001ff1f:	e9 5e fa ff ff       	jmp    c001f982 <Vm::x87Handler(regs*)+0x74>
c001ff24:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff28:	8d 50 30             	lea    edx,[eax+0x30]
c001ff2b:	80 fa 07             	cmp    dl,0x7
c001ff2e:	77 1d                	ja     c001ff4d <Vm::x87Handler(regs*)+0x63f>
c001ff30:	83 ec 0c             	sub    esp,0xc
c001ff33:	6a 00                	push   0x0
c001ff35:	e8 97 f8 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001ff3a:	83 c4 0c             	add    esp,0xc
c001ff3d:	52                   	push   edx
c001ff3e:	50                   	push   eax
c001ff3f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff43:	2d d0 00 00 00       	sub    eax,0xd0
c001ff48:	e9 f3 fd ff ff       	jmp    c001fd40 <Vm::x87Handler(regs*)+0x432>
c001ff4d:	8d 50 28             	lea    edx,[eax+0x28]
c001ff50:	80 fa 07             	cmp    dl,0x7
c001ff53:	77 28                	ja     c001ff7d <Vm::x87Handler(regs*)+0x66f>
c001ff55:	83 ec 0c             	sub    esp,0xc
c001ff58:	6a 00                	push   0x0
c001ff5a:	e8 72 f8 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001ff5f:	83 c4 0c             	add    esp,0xc
c001ff62:	52                   	push   edx
c001ff63:	50                   	push   eax
c001ff64:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff68:	2d d8 00 00 00       	sub    eax,0xd8
c001ff6d:	50                   	push   eax
c001ff6e:	e8 a1 f8 ff ff       	call   c001f814 <Vm::fpuSetReg(int, unsigned long long)>
c001ff73:	e8 44 f9 ff ff       	call   c001f8bc <Vm::fpuPop()>
c001ff78:	e9 01 fa ff ff       	jmp    c001f97e <Vm::x87Handler(regs*)+0x70>
c001ff7d:	8d 50 20             	lea    edx,[eax+0x20]
c001ff80:	80 fa 07             	cmp    dl,0x7
c001ff83:	77 30                	ja     c001ffb5 <Vm::x87Handler(regs*)+0x6a7>
c001ff85:	83 ec 0c             	sub    esp,0xc
c001ff88:	2d e0 00 00 00       	sub    eax,0xe0
c001ff8d:	50                   	push   eax
c001ff8e:	e8 3e f8 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001ff93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff9a:	89 c6                	mov    esi,eax
c001ff9c:	89 d7                	mov    edi,edx
c001ff9e:	e8 2e f8 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001ffa3:	57                   	push   edi
c001ffa4:	56                   	push   esi
c001ffa5:	52                   	push   edx
c001ffa6:	50                   	push   eax
c001ffa7:	e8 48 f7 ff ff       	call   c001f6f4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ffac:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ffb0:	e9 54 02 00 00       	jmp    c0020209 <Vm::x87Handler(regs*)+0x8fb>
c001ffb5:	8d 50 18             	lea    edx,[eax+0x18]
c001ffb8:	80 fa 07             	cmp    dl,0x7
c001ffbb:	0f 87 43 fb ff ff    	ja     c001fb04 <Vm::x87Handler(regs*)+0x1f6>
c001ffc1:	83 ec 0c             	sub    esp,0xc
c001ffc4:	2d e8 00 00 00       	sub    eax,0xe8
c001ffc9:	50                   	push   eax
c001ffca:	e8 02 f8 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001ffcf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffd6:	89 c6                	mov    esi,eax
c001ffd8:	89 d7                	mov    edi,edx
c001ffda:	e8 f2 f7 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c001ffdf:	57                   	push   edi
c001ffe0:	56                   	push   esi
c001ffe1:	52                   	push   edx
c001ffe2:	50                   	push   eax
c001ffe3:	e8 0c f7 ff ff       	call   c001f6f4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ffe8:	83 c4 20             	add    esp,0x20
c001ffeb:	e8 cc f8 ff ff       	call   c001f8bc <Vm::fpuPop()>
c001fff0:	eb 62                	jmp    c0020054 <Vm::x87Handler(regs*)+0x746>
c001fff2:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fff6:	0f 85 0f 01 00 00    	jne    c002010b <Vm::x87Handler(regs*)+0x7fd>
c001fffc:	83 ec 0c             	sub    esp,0xc
c001ffff:	6a 01                	push   0x1
c0020001:	e8 cb f7 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c0020006:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002000d:	89 c6                	mov    esi,eax
c002000f:	89 d7                	mov    edi,edx
c0020011:	e8 bb f7 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c0020016:	57                   	push   edi
c0020017:	56                   	push   esi
c0020018:	52                   	push   edx
c0020019:	50                   	push   eax
c002001a:	e8 d5 f6 ff ff       	call   c001f6f4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002001f:	83 c4 20             	add    esp,0x20
c0020022:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020026:	e8 91 f8 ff ff       	call   c001f8bc <Vm::fpuPop()>
c002002b:	e8 8c f8 ff ff       	call   c001f8bc <Vm::fpuPop()>
c0020030:	e9 50 f9 ff ff       	jmp    c001f985 <Vm::x87Handler(regs*)+0x77>
c0020035:	3c d9                	cmp    al,0xd9
c0020037:	0f 85 b5 02 00 00    	jne    c00202f2 <Vm::x87Handler(regs*)+0x9e4>
c002003d:	eb bd                	jmp    c001fffc <Vm::x87Handler(regs*)+0x6ee>
c002003f:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020043:	0f 85 ea 02 00 00    	jne    c0020333 <Vm::x87Handler(regs*)+0xa25>
c0020049:	0f b7 05 e0 17 03 c0 	movzx  eax,WORD PTR ds:0xc00317e0
c0020050:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020054:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020058:	e9 28 f9 ff ff       	jmp    c001f985 <Vm::x87Handler(regs*)+0x77>
c002005d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020061:	84 d2                	test   dl,dl
c0020063:	75 0f                	jne    c0020074 <Vm::x87Handler(regs*)+0x766>
c0020065:	83 ec 0c             	sub    esp,0xc
c0020068:	ff 36                	push   DWORD PTR [esi]
c002006a:	e8 b1 f4 ff ff       	call   c001f520 <Vm::fpu32ToInternal(unsigned int)>
c002006f:	e9 2c 01 00 00       	jmp    c00201a0 <Vm::x87Handler(regs*)+0x892>
c0020074:	80 fa 01             	cmp    dl,0x1
c0020077:	75 0f                	jne    c0020088 <Vm::x87Handler(regs*)+0x77a>
c0020079:	83 ec 0c             	sub    esp,0xc
c002007c:	ff 36                	push   DWORD PTR [esi]
c002007e:	e8 9d f4 ff ff       	call   c001f520 <Vm::fpu32ToInternal(unsigned int)>
c0020083:	e9 81 02 00 00       	jmp    c0020309 <Vm::x87Handler(regs*)+0x9fb>
c0020088:	80 fa 04             	cmp    dl,0x4
c002008b:	75 0f                	jne    c002009c <Vm::x87Handler(regs*)+0x78e>
c002008d:	83 ec 0c             	sub    esp,0xc
c0020090:	ff 36                	push   DWORD PTR [esi]
c0020092:	e8 89 f4 ff ff       	call   c001f520 <Vm::fpu32ToInternal(unsigned int)>
c0020097:	e9 86 01 00 00       	jmp    c0020222 <Vm::x87Handler(regs*)+0x914>
c002009c:	80 fa 05             	cmp    dl,0x5
c002009f:	75 1b                	jne    c00200bc <Vm::x87Handler(regs*)+0x7ae>
c00200a1:	83 ec 0c             	sub    esp,0xc
c00200a4:	6a 00                	push   0x0
c00200a6:	e8 26 f7 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c00200ab:	89 c7                	mov    edi,eax
c00200ad:	89 d5                	mov    ebp,edx
c00200af:	58                   	pop    eax
c00200b0:	ff 36                	push   DWORD PTR [esi]
c00200b2:	e8 69 f4 ff ff       	call   c001f520 <Vm::fpu32ToInternal(unsigned int)>
c00200b7:	e9 a3 01 00 00       	jmp    c002025f <Vm::x87Handler(regs*)+0x951>
c00200bc:	80 fa 06             	cmp    dl,0x6
c00200bf:	75 0f                	jne    c00200d0 <Vm::x87Handler(regs*)+0x7c2>
c00200c1:	83 ec 0c             	sub    esp,0xc
c00200c4:	ff 36                	push   DWORD PTR [esi]
c00200c6:	e8 55 f4 ff ff       	call   c001f520 <Vm::fpu32ToInternal(unsigned int)>
c00200cb:	e9 ae 01 00 00       	jmp    c002027e <Vm::x87Handler(regs*)+0x970>
c00200d0:	31 c0                	xor    eax,eax
c00200d2:	80 fa 07             	cmp    dl,0x7
c00200d5:	0f 85 94 02 00 00    	jne    c002036f <Vm::x87Handler(regs*)+0xa61>
c00200db:	83 ec 0c             	sub    esp,0xc
c00200de:	6a 00                	push   0x0
c00200e0:	e8 ec f6 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c00200e5:	89 c7                	mov    edi,eax
c00200e7:	89 d5                	mov    ebp,edx
c00200e9:	58                   	pop    eax
c00200ea:	ff 36                	push   DWORD PTR [esi]
c00200ec:	e8 2f f4 ff ff       	call   c001f520 <Vm::fpu32ToInternal(unsigned int)>
c00200f1:	e9 cb 01 00 00       	jmp    c00202c1 <Vm::x87Handler(regs*)+0x9b3>
c00200f6:	80 fa 03             	cmp    dl,0x3
c00200f9:	0f 85 d3 01 00 00    	jne    c00202d2 <Vm::x87Handler(regs*)+0x9c4>
c00200ff:	e8 b8 f7 ff ff       	call   c001f8bc <Vm::fpuPop()>
c0020104:	51                   	push   ecx
c0020105:	51                   	push   ecx
c0020106:	e9 de 01 00 00       	jmp    c00202e9 <Vm::x87Handler(regs*)+0x9db>
c002010b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002010f:	80 fa 01             	cmp    dl,0x1
c0020112:	75 09                	jne    c002011d <Vm::x87Handler(regs*)+0x80f>
c0020114:	57                   	push   edi
c0020115:	57                   	push   edi
c0020116:	8b 06                	mov    eax,DWORD PTR [esi]
c0020118:	e9 e3 01 00 00       	jmp    c0020300 <Vm::x87Handler(regs*)+0x9f2>
c002011d:	80 fa 04             	cmp    dl,0x4
c0020120:	75 12                	jne    c0020134 <Vm::x87Handler(regs*)+0x826>
c0020122:	31 d2                	xor    edx,edx
c0020124:	51                   	push   ecx
c0020125:	51                   	push   ecx
c0020126:	8b 06                	mov    eax,DWORD PTR [esi]
c0020128:	52                   	push   edx
c0020129:	50                   	push   eax
c002012a:	e8 d0 f4 ff ff       	call   c001f5ff <Vm::fpuLongToFloat(long long)>
c002012f:	e9 ee 00 00 00       	jmp    c0020222 <Vm::x87Handler(regs*)+0x914>
c0020134:	31 c0                	xor    eax,eax
c0020136:	80 fa 07             	cmp    dl,0x7
c0020139:	0f 85 30 02 00 00    	jne    c002036f <Vm::x87Handler(regs*)+0xa61>
c002013f:	83 ec 0c             	sub    esp,0xc
c0020142:	6a 00                	push   0x0
c0020144:	e8 88 f6 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c0020149:	89 c7                	mov    edi,eax
c002014b:	89 d5                	mov    ebp,edx
c002014d:	58                   	pop    eax
c002014e:	8b 06                	mov    eax,DWORD PTR [esi]
c0020150:	5a                   	pop    edx
c0020151:	31 d2                	xor    edx,edx
c0020153:	52                   	push   edx
c0020154:	50                   	push   eax
c0020155:	e8 a5 f4 ff ff       	call   c001f5ff <Vm::fpuLongToFloat(long long)>
c002015a:	e9 62 01 00 00       	jmp    c00202c1 <Vm::x87Handler(regs*)+0x9b3>
c002015f:	84 d2                	test   dl,dl
c0020161:	75 0d                	jne    c0020170 <Vm::x87Handler(regs*)+0x862>
c0020163:	31 d2                	xor    edx,edx
c0020165:	55                   	push   ebp
c0020166:	55                   	push   ebp
c0020167:	8b 06                	mov    eax,DWORD PTR [esi]
c0020169:	52                   	push   edx
c002016a:	50                   	push   eax
c002016b:	e9 d3 01 00 00       	jmp    c0020343 <Vm::x87Handler(regs*)+0xa35>
c0020170:	31 c0                	xor    eax,eax
c0020172:	80 fa 02             	cmp    dl,0x2
c0020175:	0f 85 f4 01 00 00    	jne    c002036f <Vm::x87Handler(regs*)+0xa61>
c002017b:	83 ec 0c             	sub    esp,0xc
c002017e:	6a 00                	push   0x0
c0020180:	e8 4c f6 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c0020185:	59                   	pop    ecx
c0020186:	5f                   	pop    edi
c0020187:	e9 6a f9 ff ff       	jmp    c001faf6 <Vm::x87Handler(regs*)+0x1e8>
c002018c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020190:	84 d2                	test   dl,dl
c0020192:	75 2a                	jne    c00201be <Vm::x87Handler(regs*)+0x8b0>
c0020194:	50                   	push   eax
c0020195:	50                   	push   eax
c0020196:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020199:	ff 36                	push   DWORD PTR [esi]
c002019b:	e8 c5 f3 ff ff       	call   c001f565 <Vm::fpu64ToInternal(unsigned long long)>
c00201a0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201a7:	89 c6                	mov    esi,eax
c00201a9:	89 d7                	mov    edi,edx
c00201ab:	e8 21 f6 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c00201b0:	57                   	push   edi
c00201b1:	56                   	push   esi
c00201b2:	52                   	push   edx
c00201b3:	50                   	push   eax
c00201b4:	e8 8e f5 ff ff       	call   c001f747 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00201b9:	e9 64 01 00 00       	jmp    c0020322 <Vm::x87Handler(regs*)+0xa14>
c00201be:	80 fa 01             	cmp    dl,0x1
c00201c1:	75 11                	jne    c00201d4 <Vm::x87Handler(regs*)+0x8c6>
c00201c3:	50                   	push   eax
c00201c4:	50                   	push   eax
c00201c5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00201c8:	ff 36                	push   DWORD PTR [esi]
c00201ca:	e8 96 f3 ff ff       	call   c001f565 <Vm::fpu64ToInternal(unsigned long long)>
c00201cf:	e9 35 01 00 00       	jmp    c0020309 <Vm::x87Handler(regs*)+0x9fb>
c00201d4:	80 fa 02             	cmp    dl,0x2
c00201d7:	0f 85 54 f9 ff ff    	jne    c001fb31 <Vm::x87Handler(regs*)+0x223>
c00201dd:	55                   	push   ebp
c00201de:	55                   	push   ebp
c00201df:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00201e2:	ff 36                	push   DWORD PTR [esi]
c00201e4:	e8 7c f3 ff ff       	call   c001f565 <Vm::fpu64ToInternal(unsigned long long)>
c00201e9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201f0:	89 c6                	mov    esi,eax
c00201f2:	89 d7                	mov    edi,edx
c00201f4:	e8 d8 f5 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c00201f9:	57                   	push   edi
c00201fa:	56                   	push   esi
c00201fb:	52                   	push   edx
c00201fc:	50                   	push   eax
c00201fd:	e8 f2 f4 ff ff       	call   c001f6f4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020202:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020206:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020209:	83 c4 20             	add    esp,0x20
c002020c:	e9 74 f7 ff ff       	jmp    c001f985 <Vm::x87Handler(regs*)+0x77>
c0020211:	80 fa 04             	cmp    dl,0x4
c0020214:	75 2a                	jne    c0020240 <Vm::x87Handler(regs*)+0x932>
c0020216:	51                   	push   ecx
c0020217:	51                   	push   ecx
c0020218:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002021b:	ff 36                	push   DWORD PTR [esi]
c002021d:	e8 43 f3 ff ff       	call   c001f565 <Vm::fpu64ToInternal(unsigned long long)>
c0020222:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020229:	89 c6                	mov    esi,eax
c002022b:	89 d7                	mov    edi,edx
c002022d:	e8 9f f5 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c0020232:	57                   	push   edi
c0020233:	56                   	push   esi
c0020234:	52                   	push   edx
c0020235:	50                   	push   eax
c0020236:	e8 36 f5 ff ff       	call   c001f771 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002023b:	e9 e2 00 00 00       	jmp    c0020322 <Vm::x87Handler(regs*)+0xa14>
c0020240:	80 fa 05             	cmp    dl,0x5
c0020243:	75 28                	jne    c002026d <Vm::x87Handler(regs*)+0x95f>
c0020245:	83 ec 0c             	sub    esp,0xc
c0020248:	6a 00                	push   0x0
c002024a:	e8 82 f5 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c002024f:	89 c7                	mov    edi,eax
c0020251:	89 d5                	mov    ebp,edx
c0020253:	58                   	pop    eax
c0020254:	5a                   	pop    edx
c0020255:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020258:	ff 36                	push   DWORD PTR [esi]
c002025a:	e8 06 f3 ff ff       	call   c001f565 <Vm::fpu64ToInternal(unsigned long long)>
c002025f:	83 c4 10             	add    esp,0x10
c0020262:	55                   	push   ebp
c0020263:	57                   	push   edi
c0020264:	52                   	push   edx
c0020265:	50                   	push   eax
c0020266:	e8 06 f5 ff ff       	call   c001f771 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002026b:	eb 60                	jmp    c00202cd <Vm::x87Handler(regs*)+0x9bf>
c002026d:	80 fa 06             	cmp    dl,0x6
c0020270:	75 2a                	jne    c002029c <Vm::x87Handler(regs*)+0x98e>
c0020272:	51                   	push   ecx
c0020273:	51                   	push   ecx
c0020274:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020277:	ff 36                	push   DWORD PTR [esi]
c0020279:	e8 e7 f2 ff ff       	call   c001f565 <Vm::fpu64ToInternal(unsigned long long)>
c002027e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020285:	89 c6                	mov    esi,eax
c0020287:	89 d7                	mov    edi,edx
c0020289:	e8 43 f5 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c002028e:	57                   	push   edi
c002028f:	56                   	push   esi
c0020290:	52                   	push   edx
c0020291:	50                   	push   eax
c0020292:	e8 08 f5 ff ff       	call   c001f79f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020297:	e9 86 00 00 00       	jmp    c0020322 <Vm::x87Handler(regs*)+0xa14>
c002029c:	31 c0                	xor    eax,eax
c002029e:	80 fa 07             	cmp    dl,0x7
c00202a1:	0f 85 c8 00 00 00    	jne    c002036f <Vm::x87Handler(regs*)+0xa61>
c00202a7:	83 ec 0c             	sub    esp,0xc
c00202aa:	6a 00                	push   0x0
c00202ac:	e8 20 f5 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c00202b1:	89 c7                	mov    edi,eax
c00202b3:	89 d5                	mov    ebp,edx
c00202b5:	58                   	pop    eax
c00202b6:	5a                   	pop    edx
c00202b7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202ba:	ff 36                	push   DWORD PTR [esi]
c00202bc:	e8 a4 f2 ff ff       	call   c001f565 <Vm::fpu64ToInternal(unsigned long long)>
c00202c1:	83 c4 10             	add    esp,0x10
c00202c4:	55                   	push   ebp
c00202c5:	57                   	push   edi
c00202c6:	52                   	push   edx
c00202c7:	50                   	push   eax
c00202c8:	e8 d2 f4 ff ff       	call   c001f79f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00202cd:	83 c4 0c             	add    esp,0xc
c00202d0:	eb 53                	jmp    c0020325 <Vm::x87Handler(regs*)+0xa17>
c00202d2:	31 c0                	xor    eax,eax
c00202d4:	80 fa 02             	cmp    dl,0x2
c00202d7:	0f 85 92 00 00 00    	jne    c002036f <Vm::x87Handler(regs*)+0xa61>
c00202dd:	83 ec 0c             	sub    esp,0xc
c00202e0:	6a 00                	push   0x0
c00202e2:	e8 ea f4 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c00202e7:	59                   	pop    ecx
c00202e8:	5f                   	pop    edi
c00202e9:	52                   	push   edx
c00202ea:	50                   	push   eax
c00202eb:	e8 27 f2 ff ff       	call   c001f517 <Vm::fpuInternalTo64(unsigned long long)>
c00202f0:	eb 70                	jmp    c0020362 <Vm::x87Handler(regs*)+0xa54>
c00202f2:	31 c0                	xor    eax,eax
c00202f4:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c00202f9:	75 74                	jne    c002036f <Vm::x87Handler(regs*)+0xa61>
c00202fb:	50                   	push   eax
c00202fc:	50                   	push   eax
c00202fd:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020300:	31 d2                	xor    edx,edx
c0020302:	52                   	push   edx
c0020303:	50                   	push   eax
c0020304:	e8 f6 f2 ff ff       	call   c001f5ff <Vm::fpuLongToFloat(long long)>
c0020309:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020310:	89 c6                	mov    esi,eax
c0020312:	89 d7                	mov    edi,edx
c0020314:	e8 b8 f4 ff ff       	call   c001f7d1 <Vm::fpuGetReg(int)>
c0020319:	57                   	push   edi
c002031a:	56                   	push   esi
c002031b:	52                   	push   edx
c002031c:	50                   	push   eax
c002031d:	e8 5e f4 ff ff       	call   c001f780 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020322:	83 c4 1c             	add    esp,0x1c
c0020325:	52                   	push   edx
c0020326:	50                   	push   eax
c0020327:	6a 00                	push   0x0
c0020329:	e8 e6 f4 ff ff       	call   c001f814 <Vm::fpuSetReg(int, unsigned long long)>
c002032e:	e9 f2 f7 ff ff       	jmp    c001fb25 <Vm::x87Handler(regs*)+0x217>
c0020333:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020337:	80 fa 05             	cmp    dl,0x5
c002033a:	75 11                	jne    c002034d <Vm::x87Handler(regs*)+0xa3f>
c002033c:	55                   	push   ebp
c002033d:	55                   	push   ebp
c002033e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020341:	ff 36                	push   DWORD PTR [esi]
c0020343:	e8 81 f2 ff ff       	call   c001f5c9 <Vm::fpuULongToFloat(unsigned long long)>
c0020348:	e9 cf f7 ff ff       	jmp    c001fb1c <Vm::x87Handler(regs*)+0x20e>
c002034d:	31 c0                	xor    eax,eax
c002034f:	80 fa 07             	cmp    dl,0x7
c0020352:	75 1b                	jne    c002036f <Vm::x87Handler(regs*)+0xa61>
c0020354:	e8 63 f5 ff ff       	call   c001f8bc <Vm::fpuPop()>
c0020359:	51                   	push   ecx
c002035a:	51                   	push   ecx
c002035b:	52                   	push   edx
c002035c:	50                   	push   eax
c002035d:	e8 0c f2 ff ff       	call   c001f56e <Vm::fpuFloatToLong(unsigned long long)>
c0020362:	83 c4 10             	add    esp,0x10
c0020365:	89 06                	mov    DWORD PTR [esi],eax
c0020367:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c002036a:	e9 f8 f7 ff ff       	jmp    c001fb67 <Vm::x87Handler(regs*)+0x259>
c002036f:	83 c4 1c             	add    esp,0x1c
c0020372:	5b                   	pop    ebx
c0020373:	5e                   	pop    esi
c0020374:	5f                   	pop    edi
c0020375:	5d                   	pop    ebp
c0020376:	c3                   	ret    

c0020377 <__static_initialization_and_destruction_0(int, int)>:
c0020377:	83 ec 0c             	sub    esp,0xc
c002037a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c002037f:	75 1a                	jne    c002039b <__static_initialization_and_destruction_0(int, int)+0x24>
c0020381:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020389:	75 10                	jne    c002039b <__static_initialization_and_destruction_0(int, int)+0x24>
c002038b:	83 ec 0c             	sub    esp,0xc
c002038e:	68 e0 17 03 c0       	push   0xc00317e0
c0020393:	e8 18 88 00 00       	call   c0028bb0 <Vm::_FPUState::_FPUState()>
c0020398:	83 c4 10             	add    esp,0x10
c002039b:	90                   	nop
c002039c:	83 c4 0c             	add    esp,0xc
c002039f:	c3                   	ret    

c00203a0 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00203a0:	83 ec 0c             	sub    esp,0xc
c00203a3:	83 ec 08             	sub    esp,0x8
c00203a6:	68 ff ff 00 00       	push   0xffff
c00203ab:	6a 01                	push   0x1
c00203ad:	e8 c5 ff ff ff       	call   c0020377 <__static_initialization_and_destruction_0(int, int)>
c00203b2:	83 c4 10             	add    esp,0x10
c00203b5:	83 c4 0c             	add    esp,0xc
c00203b8:	c3                   	ret    
c00203b9:	90                   	nop

c00203ba <FAT::getName()>:
c00203ba:	b8 00 c6 02 c0       	mov    eax,0xc002c600
c00203bf:	c3                   	ret    

c00203c0 <FAT::tell(void*, unsigned long long*)>:
c00203c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00203c5:	75 06                	jne    c00203cd <FAT::tell(void*, unsigned long long*)+0xd>
c00203c7:	b8 04 00 00 00       	mov    eax,0x4
c00203cc:	c3                   	ret    
c00203cd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00203d2:	75 06                	jne    c00203da <FAT::tell(void*, unsigned long long*)+0x1a>
c00203d4:	b8 04 00 00 00       	mov    eax,0x4
c00203d9:	c3                   	ret    
c00203da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00203de:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00203e1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00203e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00203e8:	89 01                	mov    DWORD PTR [ecx],eax
c00203ea:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00203ed:	b8 00 00 00 00       	mov    eax,0x0
c00203f2:	c3                   	ret    
c00203f3:	90                   	nop

c00203f4 <FAT::stat(void*, unsigned long long*)>:
c00203f4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00203f9:	75 06                	jne    c0020401 <FAT::stat(void*, unsigned long long*)+0xd>
c00203fb:	b8 04 00 00 00       	mov    eax,0x4
c0020400:	c3                   	ret    
c0020401:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020406:	75 06                	jne    c002040e <FAT::stat(void*, unsigned long long*)+0x1a>
c0020408:	b8 04 00 00 00       	mov    eax,0x4
c002040d:	c3                   	ret    
c002040e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020412:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020415:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020418:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002041c:	89 01                	mov    DWORD PTR [ecx],eax
c002041e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020421:	b8 00 00 00 00       	mov    eax,0x0
c0020426:	c3                   	ret    
c0020427:	90                   	nop

c0020428 <FAT::~FAT()>:
c0020428:	83 ec 0c             	sub    esp,0xc
c002042b:	ba 84 c6 02 c0       	mov    edx,0xc002c684
c0020430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020434:	89 10                	mov    DWORD PTR [eax],edx
c0020436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002043a:	83 ec 0c             	sub    esp,0xc
c002043d:	50                   	push   eax
c002043e:	e8 5d 2c ff ff       	call   c00130a0 <Filesystem::~Filesystem()>
c0020443:	83 c4 10             	add    esp,0x10
c0020446:	90                   	nop
c0020447:	83 c4 0c             	add    esp,0xc
c002044a:	c3                   	ret    
c002044b:	90                   	nop

c002044c <FAT::~FAT()>:
c002044c:	83 ec 0c             	sub    esp,0xc
c002044f:	83 ec 0c             	sub    esp,0xc
c0020452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020456:	e8 cd ff ff ff       	call   c0020428 <FAT::~FAT()>
c002045b:	83 c4 10             	add    esp,0x10
c002045e:	83 ec 08             	sub    esp,0x8
c0020461:	6a 08                	push   0x8
c0020463:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020467:	e8 2c 28 ff ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c002046c:	83 c4 10             	add    esp,0x10
c002046f:	83 c4 0c             	add    esp,0xc
c0020472:	c3                   	ret    
c0020473:	90                   	nop

c0020474 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020474:	83 ec 1c             	sub    esp,0x1c
c0020477:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c002047e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020483:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020487:	8b 04 85 60 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce7a0]
c002048e:	83 f8 ff             	cmp    eax,0xffffffff
c0020491:	75 34                	jne    c00204c7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020493:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020497:	88 c2                	mov    dl,al
c0020499:	a1 40 18 03 c0       	mov    eax,ds:0xc0031840
c002049e:	01 d0                	add    eax,edx
c00204a0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00204a4:	8b 15 40 18 03 c0    	mov    edx,DWORD PTR ds:0xc0031840
c00204aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204ae:	89 14 85 60 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce7a0],edx
c00204b5:	a1 40 18 03 c0       	mov    eax,ds:0xc0031840
c00204ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00204be:	89 14 85 e0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce720],edx
c00204c5:	eb 17                	jmp    c00204de <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00204c7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00204cb:	88 c2                	mov    dl,al
c00204cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204d1:	8b 04 85 60 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce7a0]
c00204d8:	01 d0                	add    eax,edx
c00204da:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00204de:	83 ec 04             	sub    esp,0x4
c00204e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00204e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00204e9:	8d 44 24 15          	lea    eax,[esp+0x15]
c00204ed:	50                   	push   eax
c00204ee:	e8 45 68 fe ff       	call   c0006d38 <f_getlabel>
c00204f3:	83 c4 10             	add    esp,0x10
c00204f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00204fa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00204ff:	75 07                	jne    c0020508 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020501:	b8 00 00 00 00       	mov    eax,0x0
c0020506:	eb 05                	jmp    c002050d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020508:	b8 01 00 00 00       	mov    eax,0x1
c002050d:	83 c4 1c             	add    esp,0x1c
c0020510:	c3                   	ret    
c0020511:	90                   	nop

c0020512 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020512:	57                   	push   edi
c0020513:	83 ec 58             	sub    esp,0x58
c0020516:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002051e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020522:	b9 0f 00 00 00       	mov    ecx,0xf
c0020527:	b8 00 00 00 00       	mov    eax,0x0
c002052c:	fc                   	cld    
c002052d:	89 d7                	mov    edi,edx
c002052f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020531:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020535:	8b 04 85 60 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce7a0]
c002053c:	83 f8 ff             	cmp    eax,0xffffffff
c002053f:	75 34                	jne    c0020575 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020541:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020545:	88 c2                	mov    dl,al
c0020547:	a1 40 18 03 c0       	mov    eax,ds:0xc0031840
c002054c:	01 d0                	add    eax,edx
c002054e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020552:	8b 15 40 18 03 c0    	mov    edx,DWORD PTR ds:0xc0031840
c0020558:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002055c:	89 14 85 60 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce7a0],edx
c0020563:	a1 40 18 03 c0       	mov    eax,ds:0xc0031840
c0020568:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c002056c:	89 14 85 e0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce720],edx
c0020573:	eb 17                	jmp    c002058c <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020575:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020579:	88 c2                	mov    dl,al
c002057b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002057f:	8b 04 85 60 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce7a0]
c0020586:	01 d0                	add    eax,edx
c0020588:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002058c:	83 ec 08             	sub    esp,0x8
c002058f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020593:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020597:	50                   	push   eax
c0020598:	e8 d7 03 fe ff       	call   c0000974 <strcat>
c002059d:	83 c4 10             	add    esp,0x10
c00205a0:	83 ec 0c             	sub    esp,0xc
c00205a3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00205a7:	50                   	push   eax
c00205a8:	e8 79 69 fe ff       	call   c0006f26 <f_setlabel>
c00205ad:	83 c4 10             	add    esp,0x10
c00205b0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00205b4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00205b9:	75 07                	jne    c00205c2 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00205bb:	b8 00 00 00 00       	mov    eax,0x0
c00205c0:	eb 05                	jmp    c00205c7 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00205c2:	b8 01 00 00 00       	mov    eax,0x1
c00205c7:	83 c4 58             	add    esp,0x58
c00205ca:	5f                   	pop    edi
c00205cb:	c3                   	ret    

c00205cc <FAT::format(LogicalDisk*, int, char const*, int)>:
c00205cc:	83 ec 2c             	sub    esp,0x2c
c00205cf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00205d7:	83 ec 08             	sub    esp,0x8
c00205da:	68 24 c6 02 c0       	push   0xc002c624
c00205df:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00205e3:	e8 d8 02 fe ff       	call   c00008c0 <strcmp>
c00205e8:	83 c4 10             	add    esp,0x10
c00205eb:	85 c0                	test   eax,eax
c00205ed:	0f 94 c0             	sete   al
c00205f0:	84 c0                	test   al,al
c00205f2:	74 0d                	je     c0020601 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c00205f4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00205fc:	e9 a6 00 00 00       	jmp    c00206a7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020601:	83 ec 08             	sub    esp,0x8
c0020604:	68 16 c6 02 c0       	push   0xc002c616
c0020609:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002060d:	e8 ae 02 fe ff       	call   c00008c0 <strcmp>
c0020612:	83 c4 10             	add    esp,0x10
c0020615:	85 c0                	test   eax,eax
c0020617:	0f 94 c0             	sete   al
c002061a:	84 c0                	test   al,al
c002061c:	74 0a                	je     c0020628 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002061e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020626:	eb 7f                	jmp    c00206a7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020628:	83 ec 08             	sub    esp,0x8
c002062b:	68 1c c6 02 c0       	push   0xc002c61c
c0020630:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020634:	e8 87 02 fe ff       	call   c00008c0 <strcmp>
c0020639:	83 c4 10             	add    esp,0x10
c002063c:	85 c0                	test   eax,eax
c002063e:	0f 94 c0             	sete   al
c0020641:	84 c0                	test   al,al
c0020643:	74 0a                	je     c002064f <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020645:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002064d:	eb 58                	jmp    c00206a7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002064f:	83 ec 08             	sub    esp,0x8
c0020652:	68 0c 93 02 c0       	push   0xc002930c
c0020657:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002065b:	e8 60 02 fe ff       	call   c00008c0 <strcmp>
c0020660:	83 c4 10             	add    esp,0x10
c0020663:	85 c0                	test   eax,eax
c0020665:	0f 94 c0             	sete   al
c0020668:	84 c0                	test   al,al
c002066a:	74 0a                	je     c0020676 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c002066c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020674:	eb 31                	jmp    c00206a7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020676:	83 ec 08             	sub    esp,0x8
c0020679:	68 22 c6 02 c0       	push   0xc002c622
c002067e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020682:	e8 39 02 fe ff       	call   c00008c0 <strcmp>
c0020687:	83 c4 10             	add    esp,0x10
c002068a:	85 c0                	test   eax,eax
c002068c:	0f 94 c0             	sete   al
c002068f:	84 c0                	test   al,al
c0020691:	74 0a                	je     c002069d <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020693:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002069b:	eb 0a                	jmp    c00206a7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002069d:	b8 08 00 00 00       	mov    eax,0x8
c00206a2:	e9 04 01 00 00       	jmp    c00207ab <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00206a7:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00206ae:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00206b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206b7:	8b 04 85 60 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce7a0]
c00206be:	83 f8 ff             	cmp    eax,0xffffffff
c00206c1:	75 34                	jne    c00206f7 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00206c3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00206c7:	88 c2                	mov    dl,al
c00206c9:	a1 40 18 03 c0       	mov    eax,ds:0xc0031840
c00206ce:	01 d0                	add    eax,edx
c00206d0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00206d4:	8b 15 40 18 03 c0    	mov    edx,DWORD PTR ds:0xc0031840
c00206da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206de:	89 14 85 60 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce7a0],edx
c00206e5:	a1 40 18 03 c0       	mov    eax,ds:0xc0031840
c00206ea:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00206ee:	89 14 85 e0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce720],edx
c00206f5:	eb 17                	jmp    c002070e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00206f7:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00206fb:	88 c2                	mov    dl,al
c00206fd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020701:	8b 04 85 60 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce7a0]
c0020708:	01 d0                	add    eax,edx
c002070a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002070e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020712:	88 04 24             	mov    BYTE PTR [esp],al
c0020715:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020719:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002071d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020725:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002072a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020732:	83 ec 0c             	sub    esp,0xc
c0020735:	68 00 20 00 00       	push   0x2000
c002073a:	e8 04 f1 fe ff       	call   c000f843 <malloc>
c002073f:	83 c4 10             	add    esp,0x10
c0020742:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020746:	68 00 20 00 00       	push   0x2000
c002074b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002074f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020753:	50                   	push   eax
c0020754:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020758:	50                   	push   eax
c0020759:	e8 13 6c fe ff       	call   c0007371 <f_mkfs>
c002075e:	83 c4 10             	add    esp,0x10
c0020761:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020765:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002076a:	75 07                	jne    c0020773 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c002076c:	b8 00 00 00 00       	mov    eax,0x0
c0020771:	eb 38                	jmp    c00207ab <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020773:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020778:	75 17                	jne    c0020791 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c002077a:	83 ec 0c             	sub    esp,0xc
c002077d:	68 54 c6 02 c0       	push   0xc002c654
c0020782:	e8 f1 25 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0020787:	83 c4 10             	add    esp,0x10
c002078a:	b8 09 00 00 00       	mov    eax,0x9
c002078f:	eb 1a                	jmp    c00207ab <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020791:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020795:	83 ec 08             	sub    esp,0x8
c0020798:	50                   	push   eax
c0020799:	68 28 c6 02 c0       	push   0xc002c628
c002079e:	e8 d5 25 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00207a3:	83 c4 10             	add    esp,0x10
c00207a6:	b8 01 00 00 00       	mov    eax,0x1
c00207ab:	83 c4 2c             	add    esp,0x2c
c00207ae:	c3                   	ret    
c00207af:	90                   	nop

c00207b0 <FAT::tryMount(LogicalDisk*, int)>:
c00207b0:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00207b6:	a1 40 18 03 c0       	mov    eax,ds:0xc0031840
c00207bb:	83 f8 14             	cmp    eax,0x14
c00207be:	75 17                	jne    c00207d7 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00207c0:	83 ec 0c             	sub    esp,0xc
c00207c3:	68 3a c6 02 c0       	push   0xc002c63a
c00207c8:	e8 86 9c ff ff       	call   c001a453 <Krnl::panic(char const*)>
c00207cd:	83 c4 10             	add    esp,0x10
c00207d0:	b0 00                	mov    al,0x0
c00207d2:	e9 d7 01 00 00       	jmp    c00209ae <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00207d7:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00207de:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00207e4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00207ea:	3d 00 02 00 00       	cmp    eax,0x200
c00207ef:	74 07                	je     c00207f8 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00207f1:	b0 00                	mov    al,0x0
c00207f3:	e9 b6 01 00 00       	jmp    c00209ae <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00207f8:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020800:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020807:	8b 04 85 60 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce7a0]
c002080e:	83 f8 ff             	cmp    eax,0xffffffff
c0020811:	74 07                	je     c002081a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020813:	b0 01                	mov    al,0x1
c0020815:	e9 94 01 00 00       	jmp    c00209ae <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002081a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020824:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c002082c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020833:	88 c2                	mov    dl,al
c0020835:	a1 40 18 03 c0       	mov    eax,ds:0xc0031840
c002083a:	01 d0                	add    eax,edx
c002083c:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020843:	8b 15 40 18 03 c0    	mov    edx,DWORD PTR ds:0xc0031840
c0020849:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020850:	89 14 85 60 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce7a0],edx
c0020857:	a1 40 18 03 c0       	mov    eax,ds:0xc0031840
c002085c:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020863:	89 14 85 e0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce720],edx
c002086a:	83 ec 0c             	sub    esp,0xc
c002086d:	68 54 02 00 00       	push   0x254
c0020872:	e8 cc ef fe ff       	call   c000f843 <malloc>
c0020877:	83 c4 10             	add    esp,0x10
c002087a:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020881:	83 ec 04             	sub    esp,0x4
c0020884:	6a 00                	push   0x0
c0020886:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002088d:	50                   	push   eax
c002088e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020895:	e8 95 46 fe ff       	call   c0004f2f <f_mount>
c002089a:	83 c4 10             	add    esp,0x10
c002089d:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00208a4:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00208ac:	74 19                	je     c00208c7 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00208ae:	83 ec 0c             	sub    esp,0xc
c00208b1:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00208b8:	e8 a6 ef fe ff       	call   c000f863 <rfree>
c00208bd:	83 c4 10             	add    esp,0x10
c00208c0:	b0 00                	mov    al,0x0
c00208c2:	e9 e7 00 00 00       	jmp    c00209ae <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00208c7:	83 ec 04             	sub    esp,0x4
c00208ca:	68 00 01 00 00       	push   0x100
c00208cf:	6a 00                	push   0x0
c00208d1:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00208d8:	50                   	push   eax
c00208d9:	e8 9a fe fd ff       	call   c0000778 <memset>
c00208de:	83 c4 10             	add    esp,0x10
c00208e1:	83 ec 08             	sub    esp,0x8
c00208e4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00208eb:	50                   	push   eax
c00208ec:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00208f3:	50                   	push   eax
c00208f4:	e8 7b 00 fe ff       	call   c0000974 <strcat>
c00208f9:	83 c4 10             	add    esp,0x10
c00208fc:	83 ec 08             	sub    esp,0x8
c00208ff:	68 48 c6 02 c0       	push   0xc002c648
c0020904:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002090b:	50                   	push   eax
c002090c:	e8 63 00 fe ff       	call   c0000974 <strcat>
c0020911:	83 c4 10             	add    esp,0x10
c0020914:	83 ec 04             	sub    esp,0x4
c0020917:	6a 01                	push   0x1
c0020919:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020920:	50                   	push   eax
c0020921:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020925:	50                   	push   eax
c0020926:	e8 66 46 fe ff       	call   c0004f91 <f_open>
c002092b:	83 c4 10             	add    esp,0x10
c002092e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020935:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c002093c:	85 c0                	test   eax,eax
c002093e:	74 0a                	je     c002094a <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020940:	78 2d                	js     c002096f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020942:	83 e8 04             	sub    eax,0x4
c0020945:	83 f8 01             	cmp    eax,0x1
c0020948:	77 25                	ja     c002096f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002094a:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020952:	83 ec 0c             	sub    esp,0xc
c0020955:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020959:	50                   	push   eax
c002095a:	e8 84 51 fe ff       	call   c0005ae3 <f_close>
c002095f:	83 c4 10             	add    esp,0x10
c0020962:	90                   	nop
c0020963:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c002096b:	74 3a                	je     c00209a7 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c002096d:	eb 2d                	jmp    c002099c <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c002096f:	83 ec 0c             	sub    esp,0xc
c0020972:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020979:	e8 e5 ee fe ff       	call   c000f863 <rfree>
c002097e:	83 c4 10             	add    esp,0x10
c0020981:	83 ec 04             	sub    esp,0x4
c0020984:	6a 00                	push   0x0
c0020986:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002098d:	50                   	push   eax
c002098e:	6a 00                	push   0x0
c0020990:	e8 9a 45 fe ff       	call   c0004f2f <f_mount>
c0020995:	83 c4 10             	add    esp,0x10
c0020998:	b0 00                	mov    al,0x0
c002099a:	eb 12                	jmp    c00209ae <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002099c:	a1 40 18 03 c0       	mov    eax,ds:0xc0031840
c00209a1:	40                   	inc    eax
c00209a2:	a3 40 18 03 c0       	mov    ds:0xc0031840,eax
c00209a7:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00209ae:	81 c4 6c 03 00 00    	add    esp,0x36c
c00209b4:	c3                   	ret    
c00209b5:	90                   	nop

c00209b6 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00209b6:	81 ec 3c 02 00 00    	sub    esp,0x23c
c00209bc:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c00209c4:	74 0a                	je     c00209d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c00209c6:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c00209ce:	75 0a                	jne    c00209da <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c00209d0:	b8 04 00 00 00       	mov    eax,0x4
c00209d5:	e9 db 00 00 00       	jmp    c0020ab5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00209da:	83 ec 08             	sub    esp,0x8
c00209dd:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00209e4:	50                   	push   eax
c00209e5:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c00209ec:	e8 fc 56 fe ff       	call   c00060ed <f_readdir>
c00209f1:	83 c4 10             	add    esp,0x10
c00209f4:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c00209fb:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020a01:	83 ec 0c             	sub    esp,0xc
c0020a04:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020a0b:	83 c0 1a             	add    eax,0x1a
c0020a0e:	50                   	push   eax
c0020a0f:	e8 80 fd fd ff       	call   c0000794 <strlen>
c0020a14:	83 c4 10             	add    esp,0x10
c0020a17:	ba 00 00 00 00       	mov    edx,0x0
c0020a1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020a20:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020a24:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020a2b:	0f b6 c0             	movzx  eax,al
c0020a2e:	83 e0 10             	and    eax,0x10
c0020a31:	74 07                	je     c0020a3a <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020a33:	b8 02 00 00 00       	mov    eax,0x2
c0020a38:	eb 05                	jmp    c0020a3f <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020a3a:	b8 01 00 00 00       	mov    eax,0x1
c0020a3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a43:	83 ec 08             	sub    esp,0x8
c0020a46:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020a4d:	83 c0 1a             	add    eax,0x1a
c0020a50:	50                   	push   eax
c0020a51:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a55:	83 c0 10             	add    eax,0x10
c0020a58:	50                   	push   eax
c0020a59:	e8 d6 fd fd ff       	call   c0000834 <strcpy>
c0020a5e:	83 c4 10             	add    esp,0x10
c0020a61:	83 ec 04             	sub    esp,0x4
c0020a64:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020a6b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020a6f:	50                   	push   eax
c0020a70:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020a77:	e8 c8 fc fd ff       	call   c0000744 <memcpy>
c0020a7c:	83 c4 10             	add    esp,0x10
c0020a7f:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020a86:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020a8c:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020a93:	84 c0                	test   al,al
c0020a95:	75 07                	jne    c0020a9e <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020a97:	b8 07 00 00 00       	mov    eax,0x7
c0020a9c:	eb 17                	jmp    c0020ab5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020a9e:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020aa5:	85 c0                	test   eax,eax
c0020aa7:	75 07                	jne    c0020ab0 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020aa9:	b8 00 00 00 00       	mov    eax,0x0
c0020aae:	eb 05                	jmp    c0020ab5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020ab0:	b8 01 00 00 00       	mov    eax,0x1
c0020ab5:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020abb:	c3                   	ret    

c0020abc <FAT::read(void*, unsigned long, void*, int*)>:
c0020abc:	83 ec 1c             	sub    esp,0x1c
c0020abf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ac4:	74 07                	je     c0020acd <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020ac6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020acb:	75 07                	jne    c0020ad4 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020acd:	b8 04 00 00 00       	mov    eax,0x4
c0020ad2:	eb 3d                	jmp    c0020b11 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020ad4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ad8:	50                   	push   eax
c0020ad9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020add:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020ae1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ae5:	e8 e3 48 fe ff       	call   c00053cd <f_read>
c0020aea:	83 c4 10             	add    esp,0x10
c0020aed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020af1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020af5:	89 c2                	mov    edx,eax
c0020af7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020afb:	89 10                	mov    DWORD PTR [eax],edx
c0020afd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020b01:	85 c0                	test   eax,eax
c0020b03:	75 07                	jne    c0020b0c <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020b05:	b8 00 00 00 00       	mov    eax,0x0
c0020b0a:	eb 05                	jmp    c0020b11 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020b0c:	b8 01 00 00 00       	mov    eax,0x1
c0020b11:	83 c4 1c             	add    esp,0x1c
c0020b14:	c3                   	ret    
c0020b15:	90                   	nop

c0020b16 <FAT::write(void*, unsigned long, void*, int*)>:
c0020b16:	83 ec 1c             	sub    esp,0x1c
c0020b19:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020b1e:	74 07                	je     c0020b27 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020b20:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020b25:	75 07                	jne    c0020b2e <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020b27:	b8 04 00 00 00       	mov    eax,0x4
c0020b2c:	eb 3d                	jmp    c0020b6b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020b2e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b32:	50                   	push   eax
c0020b33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020b37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020b3b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020b3f:	e8 09 4b fe ff       	call   c000564d <f_write>
c0020b44:	83 c4 10             	add    esp,0x10
c0020b47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b4f:	89 c2                	mov    edx,eax
c0020b51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020b55:	89 10                	mov    DWORD PTR [eax],edx
c0020b57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020b5b:	85 c0                	test   eax,eax
c0020b5d:	75 07                	jne    c0020b66 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020b5f:	b8 00 00 00 00       	mov    eax,0x0
c0020b64:	eb 05                	jmp    c0020b6b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020b66:	b8 01 00 00 00       	mov    eax,0x1
c0020b6b:	83 c4 1c             	add    esp,0x1c
c0020b6e:	c3                   	ret    
c0020b6f:	90                   	nop

c0020b70 <FAT::close(void*)>:
c0020b70:	83 ec 1c             	sub    esp,0x1c
c0020b73:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020b78:	75 07                	jne    c0020b81 <FAT::close(void*)+0x11>
c0020b7a:	b8 04 00 00 00       	mov    eax,0x4
c0020b7f:	eb 36                	jmp    c0020bb7 <FAT::close(void*)+0x47>
c0020b81:	83 ec 0c             	sub    esp,0xc
c0020b84:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020b88:	e8 56 4f fe ff       	call   c0005ae3 <f_close>
c0020b8d:	83 c4 10             	add    esp,0x10
c0020b90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b94:	83 ec 0c             	sub    esp,0xc
c0020b97:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020b9b:	e8 b3 ec fe ff       	call   c000f853 <free>
c0020ba0:	83 c4 10             	add    esp,0x10
c0020ba3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ba7:	85 c0                	test   eax,eax
c0020ba9:	75 07                	jne    c0020bb2 <FAT::close(void*)+0x42>
c0020bab:	b8 00 00 00 00       	mov    eax,0x0
c0020bb0:	eb 05                	jmp    c0020bb7 <FAT::close(void*)+0x47>
c0020bb2:	b8 01 00 00 00       	mov    eax,0x1
c0020bb7:	83 c4 1c             	add    esp,0x1c
c0020bba:	c3                   	ret    
c0020bbb:	90                   	nop

c0020bbc <FAT::closeDir(void*)>:
c0020bbc:	83 ec 1c             	sub    esp,0x1c
c0020bbf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020bc4:	75 07                	jne    c0020bcd <FAT::closeDir(void*)+0x11>
c0020bc6:	b8 04 00 00 00       	mov    eax,0x4
c0020bcb:	eb 36                	jmp    c0020c03 <FAT::closeDir(void*)+0x47>
c0020bcd:	83 ec 0c             	sub    esp,0xc
c0020bd0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020bd4:	e8 f2 54 fe ff       	call   c00060cb <f_closedir>
c0020bd9:	83 c4 10             	add    esp,0x10
c0020bdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020be0:	83 ec 0c             	sub    esp,0xc
c0020be3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020be7:	e8 67 ec fe ff       	call   c000f853 <free>
c0020bec:	83 c4 10             	add    esp,0x10
c0020bef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020bf3:	85 c0                	test   eax,eax
c0020bf5:	75 07                	jne    c0020bfe <FAT::closeDir(void*)+0x42>
c0020bf7:	b8 00 00 00 00       	mov    eax,0x0
c0020bfc:	eb 05                	jmp    c0020c03 <FAT::closeDir(void*)+0x47>
c0020bfe:	b8 01 00 00 00       	mov    eax,0x1
c0020c03:	83 c4 1c             	add    esp,0x1c
c0020c06:	c3                   	ret    
c0020c07:	90                   	nop

c0020c08 <FAT::seek(void*, unsigned long long)>:
c0020c08:	83 ec 2c             	sub    esp,0x2c
c0020c0b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020c0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020c13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020c17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c1b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020c20:	75 07                	jne    c0020c29 <FAT::seek(void*, unsigned long long)+0x21>
c0020c22:	b8 04 00 00 00       	mov    eax,0x4
c0020c27:	eb 2f                	jmp    c0020c58 <FAT::seek(void*, unsigned long long)+0x50>
c0020c29:	83 ec 04             	sub    esp,0x4
c0020c2c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020c30:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020c34:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020c38:	e8 d5 4e fe ff       	call   c0005b12 <f_lseek>
c0020c3d:	83 c4 10             	add    esp,0x10
c0020c40:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020c44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020c48:	85 c0                	test   eax,eax
c0020c4a:	75 07                	jne    c0020c53 <FAT::seek(void*, unsigned long long)+0x4b>
c0020c4c:	b8 00 00 00 00       	mov    eax,0x0
c0020c51:	eb 05                	jmp    c0020c58 <FAT::seek(void*, unsigned long long)+0x50>
c0020c53:	b8 01 00 00 00       	mov    eax,0x1
c0020c58:	83 c4 2c             	add    esp,0x2c
c0020c5b:	c3                   	ret    

c0020c5c <fatWrapperReadDisk>:
c0020c5c:	83 ec 1c             	sub    esp,0x1c
c0020c5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020c63:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020c67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0020c6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020c72:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020c76:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020c7b:	8b 04 85 20 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17e0]
c0020c82:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020c86:	83 ec 0c             	sub    esp,0xc
c0020c89:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c8d:	52                   	push   edx
c0020c8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020c92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020c96:	50                   	push   eax
c0020c97:	e8 22 59 ff ff       	call   c00165be <LogicalDisk::read(unsigned long long, int, void*)>
c0020c9c:	83 c4 20             	add    esp,0x20
c0020c9f:	83 c4 1c             	add    esp,0x1c
c0020ca2:	c3                   	ret    

c0020ca3 <fatWrapperWriteDisk>:
c0020ca3:	83 ec 1c             	sub    esp,0x1c
c0020ca6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020caa:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020cae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020cb2:	89 04 24             	mov    DWORD PTR [esp],eax
c0020cb5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020cb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020cbd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020cc2:	8b 04 85 20 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17e0]
c0020cc9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ccd:	83 ec 0c             	sub    esp,0xc
c0020cd0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cd4:	52                   	push   edx
c0020cd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020cd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020cdd:	50                   	push   eax
c0020cde:	e8 47 59 ff ff       	call   c001662a <LogicalDisk::write(unsigned long long, int, void*)>
c0020ce3:	83 c4 20             	add    esp,0x20
c0020ce6:	83 c4 1c             	add    esp,0x1c
c0020ce9:	c3                   	ret    

c0020cea <fatWrapperIoctl>:
c0020cea:	53                   	push   ebx
c0020ceb:	83 ec 28             	sub    esp,0x28
c0020cee:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020cf2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020cf6:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020cfa:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020cfe:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020d03:	75 31                	jne    c0020d36 <fatWrapperIoctl+0x4c>
c0020d05:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d09:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020d0d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d12:	8b 04 85 20 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17e0]
c0020d19:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020d1f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020d25:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020d29:	66 89 02             	mov    WORD PTR [edx],ax
c0020d2c:	b8 00 00 00 00       	mov    eax,0x0
c0020d31:	e9 b2 00 00 00       	jmp    c0020de8 <fatWrapperIoctl+0xfe>
c0020d36:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020d3b:	75 6a                	jne    c0020da7 <fatWrapperIoctl+0xbd>
c0020d3d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020d45:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d4a:	8b 04 85 20 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd17e0]
c0020d51:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020d57:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020d5d:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020d63:	89 c8                	mov    eax,ecx
c0020d65:	89 da                	mov    edx,ebx
c0020d67:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020d6b:	c1 e0 0a             	shl    eax,0xa
c0020d6e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020d73:	8b 0c 8d 20 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd17e0]
c0020d7a:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020d80:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020d86:	89 cb                	mov    ebx,ecx
c0020d88:	c1 fb 1f             	sar    ebx,0x1f
c0020d8b:	53                   	push   ebx
c0020d8c:	51                   	push   ecx
c0020d8d:	52                   	push   edx
c0020d8e:	50                   	push   eax
c0020d8f:	e8 c8 5a 00 00       	call   c002685c <__udivdi3>
c0020d94:	83 c4 10             	add    esp,0x10
c0020d97:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020d9b:	89 01                	mov    DWORD PTR [ecx],eax
c0020d9d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020da0:	b8 00 00 00 00       	mov    eax,0x0
c0020da5:	eb 41                	jmp    c0020de8 <fatWrapperIoctl+0xfe>
c0020da7:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020dac:	75 07                	jne    c0020db5 <fatWrapperIoctl+0xcb>
c0020dae:	b8 00 00 00 00       	mov    eax,0x0
c0020db3:	eb 33                	jmp    c0020de8 <fatWrapperIoctl+0xfe>
c0020db5:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020dba:	75 19                	jne    c0020dd5 <fatWrapperIoctl+0xeb>
c0020dbc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020dc0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020dc4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020dc8:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020dce:	b8 00 00 00 00       	mov    eax,0x0
c0020dd3:	eb 13                	jmp    c0020de8 <fatWrapperIoctl+0xfe>
c0020dd5:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020dda:	75 07                	jne    c0020de3 <fatWrapperIoctl+0xf9>
c0020ddc:	b8 00 00 00 00       	mov    eax,0x0
c0020de1:	eb 05                	jmp    c0020de8 <fatWrapperIoctl+0xfe>
c0020de3:	b8 04 00 00 00       	mov    eax,0x4
c0020de8:	83 c4 28             	add    esp,0x28
c0020deb:	5b                   	pop    ebx
c0020dec:	c3                   	ret    
c0020ded:	90                   	nop

c0020dee <FAT::FAT()>:
c0020dee:	83 ec 1c             	sub    esp,0x1c
c0020df1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020df5:	83 ec 0c             	sub    esp,0xc
c0020df8:	50                   	push   eax
c0020df9:	e8 7e 22 ff ff       	call   c001307c <Filesystem::Filesystem()>
c0020dfe:	83 c4 10             	add    esp,0x10
c0020e01:	ba 84 c6 02 c0       	mov    edx,0xc002c684
c0020e06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e0a:	89 10                	mov    DWORD PTR [eax],edx
c0020e0c:	c7 05 40 18 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031840,0x0
c0020e16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020e1e:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020e23:	7f 15                	jg     c0020e3a <FAT::FAT()+0x4c>
c0020e25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e29:	c7 04 85 60 18 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce7a0],0xffffffff
c0020e34:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020e38:	eb e4                	jmp    c0020e1e <FAT::FAT()+0x30>
c0020e3a:	90                   	nop
c0020e3b:	83 c4 1c             	add    esp,0x1c
c0020e3e:	c3                   	ret    
c0020e3f:	90                   	nop

c0020e40 <FAT::fixFilepath(char*)>:
c0020e40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e44:	8a 00                	mov    al,BYTE PTR [eax]
c0020e46:	3c 40                	cmp    al,0x40
c0020e48:	7e 2c                	jle    c0020e76 <FAT::fixFilepath(char*)+0x36>
c0020e4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e4e:	8a 00                	mov    al,BYTE PTR [eax]
c0020e50:	83 e8 41             	sub    eax,0x41
c0020e53:	88 c2                	mov    dl,al
c0020e55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e59:	88 10                	mov    BYTE PTR [eax],dl
c0020e5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e5f:	8a 00                	mov    al,BYTE PTR [eax]
c0020e61:	0f be c0             	movsx  eax,al
c0020e64:	8b 04 85 60 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce7a0]
c0020e6b:	83 c0 30             	add    eax,0x30
c0020e6e:	88 c2                	mov    dl,al
c0020e70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e74:	88 10                	mov    BYTE PTR [eax],dl
c0020e76:	90                   	nop
c0020e77:	c3                   	ret    

c0020e78 <FAT::open(char const*, void**, FileOpenMode)>:
c0020e78:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020e7e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020e86:	74 0a                	je     c0020e92 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020e88:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020e90:	75 0a                	jne    c0020e9c <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020e92:	b8 04 00 00 00       	mov    eax,0x4
c0020e97:	e9 fd 00 00 00       	jmp    c0020f99 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020e9c:	83 ec 08             	sub    esp,0x8
c0020e9f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ea6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020eaa:	50                   	push   eax
c0020eab:	e8 84 f9 fd ff       	call   c0000834 <strcpy>
c0020eb0:	83 c4 10             	add    esp,0x10
c0020eb3:	83 ec 08             	sub    esp,0x8
c0020eb6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020eba:	50                   	push   eax
c0020ebb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ec2:	e8 79 ff ff ff       	call   c0020e40 <FAT::fixFilepath(char*)>
c0020ec7:	83 c4 10             	add    esp,0x10
c0020eca:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020ed2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ed9:	83 e0 01             	and    eax,0x1
c0020edc:	74 08                	je     c0020ee6 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020ede:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020ee6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020eed:	83 e0 04             	and    eax,0x4
c0020ef0:	74 10                	je     c0020f02 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020ef2:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020efa:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020f02:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f09:	83 e0 02             	and    eax,0x2
c0020f0c:	74 08                	je     c0020f16 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020f0e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020f16:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f1d:	83 e0 08             	and    eax,0x8
c0020f20:	74 08                	je     c0020f2a <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020f22:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020f2a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f31:	83 e0 10             	and    eax,0x10
c0020f34:	74 08                	je     c0020f3e <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020f36:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020f3e:	83 ec 0c             	sub    esp,0xc
c0020f41:	68 50 02 00 00       	push   0x250
c0020f46:	e8 f8 e8 fe ff       	call   c000f843 <malloc>
c0020f4b:	83 c4 10             	add    esp,0x10
c0020f4e:	89 c2                	mov    edx,eax
c0020f50:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020f57:	89 10                	mov    DWORD PTR [eax],edx
c0020f59:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020f61:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020f68:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f6a:	83 ec 04             	sub    esp,0x4
c0020f6d:	52                   	push   edx
c0020f6e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020f72:	52                   	push   edx
c0020f73:	50                   	push   eax
c0020f74:	e8 18 40 fe ff       	call   c0004f91 <f_open>
c0020f79:	83 c4 10             	add    esp,0x10
c0020f7c:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020f83:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020f8b:	74 07                	je     c0020f94 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020f8d:	b8 01 00 00 00       	mov    eax,0x1
c0020f92:	eb 05                	jmp    c0020f99 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020f94:	b8 00 00 00 00       	mov    eax,0x0
c0020f99:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020f9f:	c3                   	ret    

c0020fa0 <FAT::openDir(char const*, void**)>:
c0020fa0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020fa6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020fae:	74 0a                	je     c0020fba <FAT::openDir(char const*, void**)+0x1a>
c0020fb0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020fb8:	75 07                	jne    c0020fc1 <FAT::openDir(char const*, void**)+0x21>
c0020fba:	b8 04 00 00 00       	mov    eax,0x4
c0020fbf:	eb 7d                	jmp    c002103e <FAT::openDir(char const*, void**)+0x9e>
c0020fc1:	83 ec 08             	sub    esp,0x8
c0020fc4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fcb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020fcf:	50                   	push   eax
c0020fd0:	e8 5f f8 fd ff       	call   c0000834 <strcpy>
c0020fd5:	83 c4 10             	add    esp,0x10
c0020fd8:	83 ec 08             	sub    esp,0x8
c0020fdb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020fdf:	50                   	push   eax
c0020fe0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020fe7:	e8 54 fe ff ff       	call   c0020e40 <FAT::fixFilepath(char*)>
c0020fec:	83 c4 10             	add    esp,0x10
c0020fef:	83 ec 0c             	sub    esp,0xc
c0020ff2:	6a 4c                	push   0x4c
c0020ff4:	e8 4a e8 fe ff       	call   c000f843 <malloc>
c0020ff9:	83 c4 10             	add    esp,0x10
c0020ffc:	89 c2                	mov    edx,eax
c0020ffe:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021005:	89 10                	mov    DWORD PTR [eax],edx
c0021007:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002100e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021010:	83 ec 08             	sub    esp,0x8
c0021013:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021017:	52                   	push   edx
c0021018:	50                   	push   eax
c0021019:	e8 ab 4f fe ff       	call   c0005fc9 <f_opendir>
c002101e:	83 c4 10             	add    esp,0x10
c0021021:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021028:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021030:	74 07                	je     c0021039 <FAT::openDir(char const*, void**)+0x99>
c0021032:	b8 01 00 00 00       	mov    eax,0x1
c0021037:	eb 05                	jmp    c002103e <FAT::openDir(char const*, void**)+0x9e>
c0021039:	b8 00 00 00 00       	mov    eax,0x0
c002103e:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021044:	c3                   	ret    
c0021045:	90                   	nop

c0021046 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021046:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002104c:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021054:	75 0a                	jne    c0021060 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021056:	b8 04 00 00 00       	mov    eax,0x4
c002105b:	e9 c9 00 00 00       	jmp    c0021129 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021060:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021068:	75 0a                	jne    c0021074 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c002106a:	b8 04 00 00 00       	mov    eax,0x4
c002106f:	e9 b5 00 00 00       	jmp    c0021129 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021074:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c002107c:	75 0a                	jne    c0021088 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c002107e:	b8 04 00 00 00       	mov    eax,0x4
c0021083:	e9 a1 00 00 00       	jmp    c0021129 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021088:	83 ec 08             	sub    esp,0x8
c002108b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021092:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021099:	50                   	push   eax
c002109a:	e8 95 f7 fd ff       	call   c0000834 <strcpy>
c002109f:	83 c4 10             	add    esp,0x10
c00210a2:	83 ec 08             	sub    esp,0x8
c00210a5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00210ac:	50                   	push   eax
c00210ad:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00210b4:	e8 87 fd ff ff       	call   c0020e40 <FAT::fixFilepath(char*)>
c00210b9:	83 c4 10             	add    esp,0x10
c00210bc:	83 ec 08             	sub    esp,0x8
c00210bf:	8d 44 24 08          	lea    eax,[esp+0x8]
c00210c3:	50                   	push   eax
c00210c4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00210cb:	50                   	push   eax
c00210cc:	e8 b7 50 fe ff       	call   c0006188 <f_stat>
c00210d1:	83 c4 10             	add    esp,0x10
c00210d4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00210db:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00210e2:	85 c0                	test   eax,eax
c00210e4:	74 07                	je     c00210ed <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00210e6:	83 f8 04             	cmp    eax,0x4
c00210e9:	74 32                	je     c002111d <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00210eb:	eb 37                	jmp    c0021124 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00210ed:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00210f1:	0f b6 c0             	movzx  eax,al
c00210f4:	83 e0 10             	and    eax,0x10
c00210f7:	0f 95 c2             	setne  dl
c00210fa:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021101:	88 10                	mov    BYTE PTR [eax],dl
c0021103:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021106:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002110a:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021111:	89 01                	mov    DWORD PTR [ecx],eax
c0021113:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021116:	b8 00 00 00 00       	mov    eax,0x0
c002111b:	eb 0c                	jmp    c0021129 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002111d:	b8 02 00 00 00       	mov    eax,0x2
c0021122:	eb 05                	jmp    c0021129 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021124:	b8 01 00 00 00       	mov    eax,0x1
c0021129:	81 c4 2c 02 00 00    	add    esp,0x22c
c002112f:	c3                   	ret    

c0021130 <FAT::unlink(char const*)>:
c0021130:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021136:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002113e:	75 07                	jne    c0021147 <FAT::unlink(char const*)+0x17>
c0021140:	b8 04 00 00 00       	mov    eax,0x4
c0021145:	eb 5c                	jmp    c00211a3 <FAT::unlink(char const*)+0x73>
c0021147:	83 ec 08             	sub    esp,0x8
c002114a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021151:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021155:	50                   	push   eax
c0021156:	e8 d9 f6 fd ff       	call   c0000834 <strcpy>
c002115b:	83 c4 10             	add    esp,0x10
c002115e:	83 ec 08             	sub    esp,0x8
c0021161:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021165:	50                   	push   eax
c0021166:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002116d:	e8 ce fc ff ff       	call   c0020e40 <FAT::fixFilepath(char*)>
c0021172:	83 c4 10             	add    esp,0x10
c0021175:	83 ec 0c             	sub    esp,0xc
c0021178:	8d 44 24 18          	lea    eax,[esp+0x18]
c002117c:	50                   	push   eax
c002117d:	e8 58 53 fe ff       	call   c00064da <f_unlink>
c0021182:	83 c4 10             	add    esp,0x10
c0021185:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002118c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021193:	85 c0                	test   eax,eax
c0021195:	75 07                	jne    c002119e <FAT::unlink(char const*)+0x6e>
c0021197:	b8 00 00 00 00       	mov    eax,0x0
c002119c:	eb 05                	jmp    c00211a3 <FAT::unlink(char const*)+0x73>
c002119e:	b8 01 00 00 00       	mov    eax,0x1
c00211a3:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211a9:	c3                   	ret    

c00211aa <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00211aa:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00211b0:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00211b7:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00211be:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00211c2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00211c6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00211ce:	75 0a                	jne    c00211da <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00211d0:	b8 04 00 00 00       	mov    eax,0x4
c00211d5:	e9 1c 01 00 00       	jmp    c00212f6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00211da:	83 ec 08             	sub    esp,0x8
c00211dd:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00211e4:	8d 44 24 24          	lea    eax,[esp+0x24]
c00211e8:	50                   	push   eax
c00211e9:	e8 46 f6 fd ff       	call   c0000834 <strcpy>
c00211ee:	83 c4 10             	add    esp,0x10
c00211f1:	83 ec 08             	sub    esp,0x8
c00211f4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00211f8:	50                   	push   eax
c00211f9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021200:	e8 3b fc ff ff       	call   c0020e40 <FAT::fixFilepath(char*)>
c0021205:	83 c4 10             	add    esp,0x10
c0021208:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021210:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021218:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002121d:	83 e0 01             	and    eax,0x1
c0021220:	74 08                	je     c002122a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021222:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c002122a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002122f:	83 e0 02             	and    eax,0x2
c0021232:	74 08                	je     c002123c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021234:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c002123c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021241:	83 e0 04             	and    eax,0x4
c0021244:	74 08                	je     c002124e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021246:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c002124e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021253:	83 e0 08             	and    eax,0x8
c0021256:	74 08                	je     c0021260 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021258:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021260:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021265:	83 e0 01             	and    eax,0x1
c0021268:	74 08                	je     c0021272 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c002126a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021272:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021277:	83 e0 02             	and    eax,0x2
c002127a:	74 08                	je     c0021284 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c002127c:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021284:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021289:	83 e0 04             	and    eax,0x4
c002128c:	74 08                	je     c0021296 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c002128e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021296:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002129b:	83 e0 08             	and    eax,0x8
c002129e:	74 08                	je     c00212a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00212a0:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00212a8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00212af:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00212b6:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00212be:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00212c6:	83 ec 04             	sub    esp,0x4
c00212c9:	52                   	push   edx
c00212ca:	50                   	push   eax
c00212cb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00212cf:	50                   	push   eax
c00212d0:	e8 a7 58 fe ff       	call   c0006b7c <f_chmod>
c00212d5:	83 c4 10             	add    esp,0x10
c00212d8:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00212df:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00212e6:	85 c0                	test   eax,eax
c00212e8:	75 07                	jne    c00212f1 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00212ea:	b8 00 00 00 00       	mov    eax,0x0
c00212ef:	eb 05                	jmp    c00212f6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00212f1:	b8 01 00 00 00       	mov    eax,0x1
c00212f6:	81 c4 2c 01 00 00    	add    esp,0x12c
c00212fc:	c3                   	ret    
c00212fd:	90                   	nop

c00212fe <FAT::rename(char const*, char const*)>:
c00212fe:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021304:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002130c:	74 0a                	je     c0021318 <FAT::rename(char const*, char const*)+0x1a>
c002130e:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021316:	75 0a                	jne    c0021322 <FAT::rename(char const*, char const*)+0x24>
c0021318:	b8 04 00 00 00       	mov    eax,0x4
c002131d:	e9 98 00 00 00       	jmp    c00213ba <FAT::rename(char const*, char const*)+0xbc>
c0021322:	83 ec 08             	sub    esp,0x8
c0021325:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002132c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021333:	50                   	push   eax
c0021334:	e8 fb f4 fd ff       	call   c0000834 <strcpy>
c0021339:	83 c4 10             	add    esp,0x10
c002133c:	83 ec 08             	sub    esp,0x8
c002133f:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021346:	50                   	push   eax
c0021347:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002134e:	e8 ed fa ff ff       	call   c0020e40 <FAT::fixFilepath(char*)>
c0021353:	83 c4 10             	add    esp,0x10
c0021356:	83 ec 08             	sub    esp,0x8
c0021359:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021360:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021364:	50                   	push   eax
c0021365:	e8 ca f4 fd ff       	call   c0000834 <strcpy>
c002136a:	83 c4 10             	add    esp,0x10
c002136d:	83 ec 08             	sub    esp,0x8
c0021370:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021374:	50                   	push   eax
c0021375:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002137c:	e8 bf fa ff ff       	call   c0020e40 <FAT::fixFilepath(char*)>
c0021381:	83 c4 10             	add    esp,0x10
c0021384:	83 ec 08             	sub    esp,0x8
c0021387:	8d 44 24 14          	lea    eax,[esp+0x14]
c002138b:	50                   	push   eax
c002138c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021393:	50                   	push   eax
c0021394:	e8 f0 54 fe ff       	call   c0006889 <f_rename>
c0021399:	83 c4 10             	add    esp,0x10
c002139c:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00213a3:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00213aa:	85 c0                	test   eax,eax
c00213ac:	75 07                	jne    c00213b5 <FAT::rename(char const*, char const*)+0xb7>
c00213ae:	b8 00 00 00 00       	mov    eax,0x0
c00213b3:	eb 05                	jmp    c00213ba <FAT::rename(char const*, char const*)+0xbc>
c00213b5:	b8 01 00 00 00       	mov    eax,0x1
c00213ba:	81 c4 1c 02 00 00    	add    esp,0x21c
c00213c0:	c3                   	ret    
c00213c1:	90                   	nop

c00213c2 <FAT::mkdir(char const*)>:
c00213c2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00213c8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00213d0:	75 07                	jne    c00213d9 <FAT::mkdir(char const*)+0x17>
c00213d2:	b8 04 00 00 00       	mov    eax,0x4
c00213d7:	eb 5c                	jmp    c0021435 <FAT::mkdir(char const*)+0x73>
c00213d9:	83 ec 08             	sub    esp,0x8
c00213dc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00213e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00213e7:	50                   	push   eax
c00213e8:	e8 47 f4 fd ff       	call   c0000834 <strcpy>
c00213ed:	83 c4 10             	add    esp,0x10
c00213f0:	83 ec 08             	sub    esp,0x8
c00213f3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00213f7:	50                   	push   eax
c00213f8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00213ff:	e8 3c fa ff ff       	call   c0020e40 <FAT::fixFilepath(char*)>
c0021404:	83 c4 10             	add    esp,0x10
c0021407:	83 ec 0c             	sub    esp,0xc
c002140a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002140e:	50                   	push   eax
c002140f:	e8 49 52 fe ff       	call   c000665d <f_mkdir>
c0021414:	83 c4 10             	add    esp,0x10
c0021417:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002141e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021425:	85 c0                	test   eax,eax
c0021427:	75 07                	jne    c0021430 <FAT::mkdir(char const*)+0x6e>
c0021429:	b8 00 00 00 00       	mov    eax,0x0
c002142e:	eb 05                	jmp    c0021435 <FAT::mkdir(char const*)+0x73>
c0021430:	b8 01 00 00 00       	mov    eax,0x1
c0021435:	81 c4 1c 01 00 00    	add    esp,0x11c
c002143b:	c3                   	ret    

c002143c <FAT::exists(char const*)>:
c002143c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021442:	83 ec 08             	sub    esp,0x8
c0021445:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002144c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021450:	50                   	push   eax
c0021451:	e8 de f3 fd ff       	call   c0000834 <strcpy>
c0021456:	83 c4 10             	add    esp,0x10
c0021459:	83 ec 08             	sub    esp,0x8
c002145c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021460:	50                   	push   eax
c0021461:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021468:	e8 d3 f9 ff ff       	call   c0020e40 <FAT::fixFilepath(char*)>
c002146d:	83 c4 10             	add    esp,0x10
c0021470:	83 ec 08             	sub    esp,0x8
c0021473:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c002147a:	50                   	push   eax
c002147b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002147f:	50                   	push   eax
c0021480:	e8 03 4d fe ff       	call   c0006188 <f_stat>
c0021485:	83 c4 10             	add    esp,0x10
c0021488:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002148f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021496:	85 c0                	test   eax,eax
c0021498:	75 04                	jne    c002149e <FAT::exists(char const*)+0x62>
c002149a:	b0 01                	mov    al,0x1
c002149c:	eb 02                	jmp    c00214a0 <FAT::exists(char const*)+0x64>
c002149e:	b0 00                	mov    al,0x0
c00214a0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00214a6:	c3                   	ret    
c00214a7:	90                   	nop

c00214a8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00214a8:	b8 08 00 00 00       	mov    eax,0x8
c00214ad:	c3                   	ret    

c00214ae <ISO9660::seek(void*, unsigned long long)>:
c00214ae:	53                   	push   ebx
c00214af:	b8 04 00 00 00       	mov    eax,0x4
c00214b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00214b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00214bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00214c0:	85 d2                	test   edx,edx
c00214c2:	74 17                	je     c00214db <ISO9660::seek(void*, unsigned long long)+0x2d>
c00214c4:	89 c8                	mov    eax,ecx
c00214c6:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00214c9:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00214cc:	b8 01 00 00 00       	mov    eax,0x1
c00214d1:	73 08                	jae    c00214db <ISO9660::seek(void*, unsigned long long)+0x2d>
c00214d3:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00214d6:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00214d9:	31 c0                	xor    eax,eax
c00214db:	5b                   	pop    ebx
c00214dc:	c3                   	ret    
c00214dd:	90                   	nop

c00214de <ISO9660::tell(void*, unsigned long long*)>:
c00214de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00214e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00214e6:	85 d2                	test   edx,edx
c00214e8:	74 12                	je     c00214fc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00214ea:	85 c0                	test   eax,eax
c00214ec:	74 0e                	je     c00214fc <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00214ee:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00214f1:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00214f4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00214f7:	89 10                	mov    DWORD PTR [eax],edx
c00214f9:	31 c0                	xor    eax,eax
c00214fb:	c3                   	ret    
c00214fc:	b8 04 00 00 00       	mov    eax,0x4
c0021501:	c3                   	ret    

c0021502 <ISO9660::getName()>:
c0021502:	b8 e0 c6 02 c0       	mov    eax,0xc002c6e0
c0021507:	c3                   	ret    

c0021508 <ISO9660::stat(void*, unsigned long long*)>:
c0021508:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002150c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021510:	85 d2                	test   edx,edx
c0021512:	74 12                	je     c0021526 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021514:	85 c0                	test   eax,eax
c0021516:	74 0e                	je     c0021526 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021518:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c002151b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002151e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021521:	89 10                	mov    DWORD PTR [eax],edx
c0021523:	31 c0                	xor    eax,eax
c0021525:	c3                   	ret    
c0021526:	b8 04 00 00 00       	mov    eax,0x4
c002152b:	c3                   	ret    

c002152c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002152c:	b8 01 00 00 00       	mov    eax,0x1
c0021531:	c3                   	ret    

c0021532 <ISO9660::unlink(char const*)>:
c0021532:	b8 01 00 00 00       	mov    eax,0x1
c0021537:	c3                   	ret    

c0021538 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021538:	b8 01 00 00 00       	mov    eax,0x1
c002153d:	c3                   	ret    

c002153e <ISO9660::rename(char const*, char const*)>:
c002153e:	b8 01 00 00 00       	mov    eax,0x1
c0021543:	c3                   	ret    

c0021544 <ISO9660::mkdir(char const*)>:
c0021544:	b8 01 00 00 00       	mov    eax,0x1
c0021549:	c3                   	ret    

c002154a <ISO9660::close(void*)>:
c002154a:	83 ec 0c             	sub    esp,0xc
c002154d:	b8 04 00 00 00       	mov    eax,0x4
c0021552:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021556:	85 d2                	test   edx,edx
c0021558:	74 0e                	je     c0021568 <ISO9660::close(void*)+0x1e>
c002155a:	83 ec 0c             	sub    esp,0xc
c002155d:	52                   	push   edx
c002155e:	e8 f0 e2 fe ff       	call   c000f853 <free>
c0021563:	83 c4 10             	add    esp,0x10
c0021566:	31 c0                	xor    eax,eax
c0021568:	83 c4 0c             	add    esp,0xc
c002156b:	c3                   	ret    

c002156c <ISO9660::closeDir(void*)>:
c002156c:	83 ec 0c             	sub    esp,0xc
c002156f:	b8 04 00 00 00       	mov    eax,0x4
c0021574:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021578:	85 d2                	test   edx,edx
c002157a:	74 0e                	je     c002158a <ISO9660::closeDir(void*)+0x1e>
c002157c:	83 ec 0c             	sub    esp,0xc
c002157f:	52                   	push   edx
c0021580:	e8 ce e2 fe ff       	call   c000f853 <free>
c0021585:	83 c4 10             	add    esp,0x10
c0021588:	31 c0                	xor    eax,eax
c002158a:	83 c4 0c             	add    esp,0xc
c002158d:	c3                   	ret    

c002158e <ISO9660::~ISO9660()>:
c002158e:	83 ec 0c             	sub    esp,0xc
c0021591:	ba 44 c7 02 c0       	mov    edx,0xc002c744
c0021596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002159a:	89 10                	mov    DWORD PTR [eax],edx
c002159c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215a0:	83 ec 0c             	sub    esp,0xc
c00215a3:	50                   	push   eax
c00215a4:	e8 f7 1a ff ff       	call   c00130a0 <Filesystem::~Filesystem()>
c00215a9:	83 c4 10             	add    esp,0x10
c00215ac:	90                   	nop
c00215ad:	83 c4 0c             	add    esp,0xc
c00215b0:	c3                   	ret    
c00215b1:	90                   	nop

c00215b2 <ISO9660::~ISO9660()>:
c00215b2:	83 ec 0c             	sub    esp,0xc
c00215b5:	83 ec 0c             	sub    esp,0xc
c00215b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215bc:	e8 cd ff ff ff       	call   c002158e <ISO9660::~ISO9660()>
c00215c1:	83 c4 10             	add    esp,0x10
c00215c4:	83 ec 08             	sub    esp,0x8
c00215c7:	6a 08                	push   0x8
c00215c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215cd:	e8 c6 16 ff ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c00215d2:	83 c4 10             	add    esp,0x10
c00215d5:	83 c4 0c             	add    esp,0xc
c00215d8:	c3                   	ret    

c00215d9 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00215d9:	55                   	push   ebp
c00215da:	31 c9                	xor    ecx,ecx
c00215dc:	57                   	push   edi
c00215dd:	56                   	push   esi
c00215de:	53                   	push   ebx
c00215df:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00215e3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00215e7:	89 eb                	mov    ebx,ebp
c00215e9:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00215ed:	39 ce                	cmp    esi,ecx
c00215ef:	7e 17                	jle    c0021608 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00215f1:	31 d2                	xor    edx,edx
c00215f3:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00215f7:	7d 13                	jge    c002160c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00215f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00215fd:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021600:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021603:	75 0d                	jne    c0021612 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021605:	42                   	inc    edx
c0021606:	eb eb                	jmp    c00215f3 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021608:	31 c0                	xor    eax,eax
c002160a:	eb 0a                	jmp    c0021616 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002160c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021610:	eb 04                	jmp    c0021616 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021612:	41                   	inc    ecx
c0021613:	43                   	inc    ebx
c0021614:	eb d7                	jmp    c00215ed <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021616:	5b                   	pop    ebx
c0021617:	5e                   	pop    esi
c0021618:	5f                   	pop    edi
c0021619:	5d                   	pop    ebp
c002161a:	c3                   	ret    

c002161b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002161b:	56                   	push   esi
c002161c:	53                   	push   ebx
c002161d:	52                   	push   edx
c002161e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021622:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021626:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002162a:	39 0d 40 19 03 c0    	cmp    DWORD PTR ds:0xc0031940,ecx
c0021630:	75 08                	jne    c002163a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021632:	38 05 94 d7 02 c0    	cmp    BYTE PTR ds:0xc002d794,al
c0021638:	74 2b                	je     c0021665 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c002163a:	83 ec 0c             	sub    esp,0xc
c002163d:	a2 94 d7 02 c0       	mov    ds:0xc002d794,al
c0021642:	68 60 19 03 c0       	push   0xc0031960
c0021647:	0f be c0             	movsx  eax,al
c002164a:	6a 01                	push   0x1
c002164c:	89 0d 40 19 03 c0    	mov    DWORD PTR ds:0xc0031940,ecx
c0021652:	31 db                	xor    ebx,ebx
c0021654:	53                   	push   ebx
c0021655:	51                   	push   ecx
c0021656:	ff 34 85 1c e7 02 c0 	push   DWORD PTR [eax*4-0x3ffd18e4]
c002165d:	e8 5c 4f ff ff       	call   c00165be <LogicalDisk::read(unsigned long long, int, void*)>
c0021662:	83 c4 20             	add    esp,0x20
c0021665:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c002166d:	c7 44 24 14 60 19 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031960
c0021675:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021679:	58                   	pop    eax
c002167a:	5b                   	pop    ebx
c002167b:	5e                   	pop    esi
c002167c:	e9 c3 f0 fd ff       	jmp    c0000744 <memcpy>
c0021681:	90                   	nop

c0021682 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021682:	81 ec 10 08 00 00    	sub    esp,0x810
c0021688:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c002168f:	83 c0 41             	add    eax,0x41
c0021692:	0f be c0             	movsx  eax,al
c0021695:	50                   	push   eax
c0021696:	8d 44 24 08          	lea    eax,[esp+0x8]
c002169a:	50                   	push   eax
c002169b:	6a 10                	push   0x10
c002169d:	e8 79 ff ff ff       	call   c002161b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00216a2:	83 c4 10             	add    esp,0x10
c00216a5:	31 c0                	xor    eax,eax
c00216a7:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00216ac:	75 1d                	jne    c00216cb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00216ae:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00216b3:	75 16                	jne    c00216cb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00216b5:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00216ba:	75 0f                	jne    c00216cb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00216bc:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00216c1:	75 08                	jne    c00216cb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00216c3:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00216c8:	0f 94 c0             	sete   al
c00216cb:	81 c4 0c 08 00 00    	add    esp,0x80c
c00216d1:	c3                   	ret    

c00216d2 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00216d2:	55                   	push   ebp
c00216d3:	57                   	push   edi
c00216d4:	56                   	push   esi
c00216d5:	53                   	push   ebx
c00216d6:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00216dc:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00216e3:	85 ed                	test   ebp,ebp
c00216e5:	0f 84 d6 01 00 00    	je     c00218c1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00216eb:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00216f3:	0f 84 c8 01 00 00    	je     c00218c1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00216f9:	b8 01 00 00 00       	mov    eax,0x1
c00216fe:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021702:	0f 85 be 01 00 00    	jne    c00218c6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021708:	31 d2                	xor    edx,edx
c002170a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021711:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021714:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021717:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002171b:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c002171e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021721:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021725:	01 f0                	add    eax,esi
c0021727:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002172a:	11 fa                	adc    edx,edi
c002172c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021730:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021734:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021738:	19 d1                	sbb    ecx,edx
c002173a:	72 0a                	jb     c0021746 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c002173c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021740:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021744:	eb 13                	jmp    c0021759 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002174a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002174e:	29 f0                	sub    eax,esi
c0021750:	19 fa                	sbb    edx,edi
c0021752:	89 04 24             	mov    DWORD PTR [esp],eax
c0021755:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021759:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002175c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c002175f:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021763:	51                   	push   ecx
c0021764:	c1 e0 0b             	shl    eax,0xb
c0021767:	01 c6                	add    esi,eax
c0021769:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002176d:	11 d7                	adc    edi,edx
c002176f:	50                   	push   eax
c0021770:	89 fa                	mov    edx,edi
c0021772:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021776:	89 f0                	mov    eax,esi
c0021778:	53                   	push   ebx
c0021779:	0f ac d0 0b          	shrd   eax,edx,0xb
c002177d:	50                   	push   eax
c002177e:	e8 98 fe ff ff       	call   c002161b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021783:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021787:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002178a:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c002178e:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021794:	83 c4 10             	add    esp,0x10
c0021797:	b8 00 08 00 00       	mov    eax,0x800
c002179c:	29 d0                	sub    eax,edx
c002179e:	39 c1                	cmp    ecx,eax
c00217a0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00217a4:	83 d9 00             	sbb    ecx,0x0
c00217a7:	7d 1c                	jge    c00217c5 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00217a9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00217ae:	75 12                	jne    c00217c2 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c00217b0:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00217b7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00217bd:	e9 fb 00 00 00       	jmp    c00218bd <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c00217c2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00217c5:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c00217c8:	31 d2                	xor    edx,edx
c00217ca:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00217ce:	39 c2                	cmp    edx,eax
c00217d0:	7d 14                	jge    c00217e6 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c00217d2:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00217d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00217dd:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00217e0:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00217e3:	42                   	inc    edx
c00217e4:	eb e8                	jmp    c00217ce <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c00217e6:	89 c3                	mov    ebx,eax
c00217e8:	85 c0                	test   eax,eax
c00217ea:	79 02                	jns    c00217ee <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c00217ec:	31 db                	xor    ebx,ebx
c00217ee:	99                   	cdq    
c00217ef:	01 c3                	add    ebx,eax
c00217f1:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c00217f8:	01 c6                	add    esi,eax
c00217fa:	11 d7                	adc    edi,edx
c00217fc:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021800:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021804:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021807:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c002180b:	29 c6                	sub    esi,eax
c002180d:	19 d7                	sbb    edi,edx
c002180f:	89 34 24             	mov    DWORD PTR [esp],esi
c0021812:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021816:	b8 ff 07 00 00       	mov    eax,0x7ff
c002181b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002181e:	b8 00 00 00 00       	mov    eax,0x0
c0021823:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021827:	7d 3e                	jge    c0021867 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021829:	52                   	push   edx
c002182a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002182e:	50                   	push   eax
c002182f:	53                   	push   ebx
c0021830:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021834:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021838:	0f ac d0 0b          	shrd   eax,edx,0xb
c002183c:	50                   	push   eax
c002183d:	e8 d9 fd ff ff       	call   c002161b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021842:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c002184a:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c002184f:	81 c3 00 08 00 00    	add    ebx,0x800
c0021855:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c002185d:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021862:	83 c4 10             	add    esp,0x10
c0021865:	eb af                	jmp    c0021816 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021867:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002186b:	0b 04 24             	or     eax,DWORD PTR [esp]
c002186e:	74 32                	je     c00218a2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021870:	50                   	push   eax
c0021871:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021875:	50                   	push   eax
c0021876:	8d 44 24 28          	lea    eax,[esp+0x28]
c002187a:	50                   	push   eax
c002187b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002187f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021883:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021887:	56                   	push   esi
c0021888:	e8 8e fd ff ff       	call   c002161b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002188d:	83 c4 0c             	add    esp,0xc
c0021890:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021894:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021898:	50                   	push   eax
c0021899:	53                   	push   ebx
c002189a:	e8 a5 ee fd ff       	call   c0000744 <memcpy>
c002189f:	83 c4 10             	add    esp,0x10
c00218a2:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00218a9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00218ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00218b1:	89 38                	mov    DWORD PTR [eax],edi
c00218b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218b7:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00218ba:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00218bd:	31 c0                	xor    eax,eax
c00218bf:	eb 05                	jmp    c00218c6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00218c1:	b8 04 00 00 00       	mov    eax,0x4
c00218c6:	81 c4 2c 08 00 00    	add    esp,0x82c
c00218cc:	5b                   	pop    ebx
c00218cd:	5e                   	pop    esi
c00218ce:	5f                   	pop    edi
c00218cf:	5d                   	pop    ebp
c00218d0:	c3                   	ret    
c00218d1:	90                   	nop

c00218d2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00218d2:	55                   	push   ebp
c00218d3:	57                   	push   edi
c00218d4:	56                   	push   esi
c00218d5:	53                   	push   ebx
c00218d6:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00218dc:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c00218e3:	85 f6                	test   esi,esi
c00218e5:	0f 84 64 02 00 00    	je     c0021b4f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00218eb:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00218f3:	0f 84 56 02 00 00    	je     c0021b4f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c00218f9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00218fc:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c00218ff:	75 0a                	jne    c002190b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021901:	b8 07 00 00 00       	mov    eax,0x7
c0021906:	e9 49 02 00 00       	jmp    c0021b54 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c002190b:	50                   	push   eax
c002190c:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021910:	50                   	push   eax
c0021911:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021918:	53                   	push   ebx
c0021919:	8b 06                	mov    eax,DWORD PTR [esi]
c002191b:	c1 e0 0b             	shl    eax,0xb
c002191e:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021921:	c1 e8 0b             	shr    eax,0xb
c0021924:	50                   	push   eax
c0021925:	e8 f1 fc ff ff       	call   c002161b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002192a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002192d:	83 c4 10             	add    esp,0x10
c0021930:	89 c1                	mov    ecx,eax
c0021932:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021935:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002193b:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c002193e:	84 db                	test   bl,bl
c0021940:	0f 85 90 00 00 00    	jne    c00219d6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021946:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c002194c:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021952:	29 c7                	sub    edi,eax
c0021954:	89 fb                	mov    ebx,edi
c0021956:	c1 fb 1f             	sar    ebx,0x1f
c0021959:	01 f8                	add    eax,edi
c002195b:	11 da                	adc    edx,ebx
c002195d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021961:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021965:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021968:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c002196b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c002196e:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021971:	89 04 24             	mov    DWORD PTR [esp],eax
c0021974:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021978:	89 d8                	mov    eax,ebx
c002197a:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002197d:	ba 00 00 00 00       	mov    edx,0x0
c0021982:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021986:	b8 00 00 00 00       	mov    eax,0x0
c002198b:	73 0b                	jae    c0021998 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c002198d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021990:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021994:	29 f8                	sub    eax,edi
c0021996:	19 da                	sbb    edx,ebx
c0021998:	89 d3                	mov    ebx,edx
c002199a:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c002199d:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c00219a0:	09 c3                	or     ebx,eax
c00219a2:	0f 84 59 ff ff ff    	je     c0021901 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00219a8:	55                   	push   ebp
c00219a9:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00219ad:	50                   	push   eax
c00219ae:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00219b5:	53                   	push   ebx
c00219b6:	8b 06                	mov    eax,DWORD PTR [esi]
c00219b8:	c1 e0 0b             	shl    eax,0xb
c00219bb:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c00219bf:	c1 e8 0b             	shr    eax,0xb
c00219c2:	50                   	push   eax
c00219c3:	e8 53 fc ff ff       	call   c002161b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219c8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00219cb:	83 c4 10             	add    esp,0x10
c00219ce:	25 ff 07 00 00       	and    eax,0x7ff
c00219d3:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00219d6:	57                   	push   edi
c00219d7:	6a 28                	push   0x28
c00219d9:	6a 00                	push   0x0
c00219db:	8d 44 24 24          	lea    eax,[esp+0x24]
c00219df:	50                   	push   eax
c00219e0:	e8 93 ed fd ff       	call   c0000778 <memset>
c00219e5:	31 d2                	xor    edx,edx
c00219e7:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00219ea:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00219f0:	89 f8                	mov    eax,edi
c00219f2:	83 c0 21             	add    eax,0x21
c00219f5:	83 d2 00             	adc    edx,0x0
c00219f8:	89 c7                	mov    edi,eax
c00219fa:	89 d5                	mov    ebp,edx
c00219fc:	83 c4 10             	add    esp,0x10
c00219ff:	31 c9                	xor    ecx,ecx
c0021a01:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021a08:	83 f9 28             	cmp    ecx,0x28
c0021a0b:	88 04 24             	mov    BYTE PTR [esp],al
c0021a0e:	0f 94 c2             	sete   dl
c0021a11:	88 d0                	mov    al,dl
c0021a13:	ba ff 07 00 00       	mov    edx,0x7ff
c0021a18:	39 fa                	cmp    edx,edi
c0021a1a:	ba 00 00 00 00       	mov    edx,0x0
c0021a1f:	19 ea                	sbb    edx,ebp
c0021a21:	0f 92 c2             	setb   dl
c0021a24:	09 c2                	or     edx,eax
c0021a26:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021a2a:	0f 94 c0             	sete   al
c0021a2d:	08 d0                	or     al,dl
c0021a2f:	75 16                	jne    c0021a47 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021a31:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021a35:	74 10                	je     c0021a47 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021a37:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021a3a:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021a3e:	41                   	inc    ecx
c0021a3f:	83 c7 01             	add    edi,0x1
c0021a42:	83 d5 00             	adc    ebp,0x0
c0021a45:	eb ba                	jmp    c0021a01 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021a47:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021a4e:	83 ec 0c             	sub    esp,0xc
c0021a51:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021a55:	57                   	push   edi
c0021a56:	e8 39 ed fd ff       	call   c0000794 <strlen>
c0021a5b:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021a63:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021a67:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021a6e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021a71:	5a                   	pop    edx
c0021a72:	25 ff 07 00 00       	and    eax,0x7ff
c0021a77:	01 c8                	add    eax,ecx
c0021a79:	59                   	pop    ecx
c0021a7a:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021a80:	83 e0 02             	and    eax,0x2
c0021a83:	3c 01                	cmp    al,0x1
c0021a85:	19 c0                	sbb    eax,eax
c0021a87:	83 c0 02             	add    eax,0x2
c0021a8a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021a8e:	57                   	push   edi
c0021a8f:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021a93:	50                   	push   eax
c0021a94:	e8 9b ed fd ff       	call   c0000834 <strcpy>
c0021a99:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021a9d:	83 c4 10             	add    esp,0x10
c0021aa0:	84 c0                	test   al,al
c0021aa2:	75 21                	jne    c0021ac5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021aa4:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021aac:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021ab4:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021abc:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021ac3:	eb 28                	jmp    c0021aed <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021ac5:	fe c8                	dec    al
c0021ac7:	75 24                	jne    c0021aed <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021ac9:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021ad1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021ad9:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021ae1:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021ae8:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021aed:	0f b6 fb             	movzx  edi,bl
c0021af0:	31 db                	xor    ebx,ebx
c0021af2:	50                   	push   eax
c0021af3:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021afa:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021afe:	50                   	push   eax
c0021aff:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021b06:	e8 39 ec fd ff       	call   c0000744 <memcpy>
c0021b0b:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021b12:	89 f9                	mov    ecx,edi
c0021b14:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021b1a:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021b1d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021b20:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021b23:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021b26:	83 c4 10             	add    esp,0x10
c0021b29:	39 c7                	cmp    edi,eax
c0021b2b:	89 df                	mov    edi,ebx
c0021b2d:	19 d7                	sbb    edi,edx
c0021b2f:	72 10                	jb     c0021b41 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021b31:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021b38:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021b3f:	eb 0a                	jmp    c0021b4b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021b41:	29 c8                	sub    eax,ecx
c0021b43:	19 da                	sbb    edx,ebx
c0021b45:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021b48:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021b4b:	31 c0                	xor    eax,eax
c0021b4d:	eb 05                	jmp    c0021b54 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021b4f:	b8 04 00 00 00       	mov    eax,0x4
c0021b54:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021b5a:	5b                   	pop    ebx
c0021b5b:	5e                   	pop    esi
c0021b5c:	5f                   	pop    edi
c0021b5d:	5d                   	pop    ebp
c0021b5e:	c3                   	ret    

c0021b5f <readRoot(unsigned int*, unsigned int*, char)>:
c0021b5f:	81 ec 40 08 00 00    	sub    esp,0x840
c0021b65:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021b6d:	50                   	push   eax
c0021b6e:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021b72:	50                   	push   eax
c0021b73:	6a 10                	push   0x10
c0021b75:	e8 a1 fa ff ff       	call   c002161b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b7a:	83 c4 0c             	add    esp,0xc
c0021b7d:	6a 22                	push   0x22
c0021b7f:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021b86:	50                   	push   eax
c0021b87:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021b8b:	50                   	push   eax
c0021b8c:	e8 b3 eb fd ff       	call   c0000744 <memcpy>
c0021b91:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021b98:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021b9c:	89 10                	mov    DWORD PTR [eax],edx
c0021b9e:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021ba5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021ba9:	89 10                	mov    DWORD PTR [eax],edx
c0021bab:	b0 01                	mov    al,0x1
c0021bad:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021bb3:	c3                   	ret    

c0021bb4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021bb4:	55                   	push   ebp
c0021bb5:	57                   	push   edi
c0021bb6:	56                   	push   esi
c0021bb7:	53                   	push   ebx
c0021bb8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021bbe:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021bc5:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021bcc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021bd0:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021bd4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021bd8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021bdc:	75 03                	jne    c0021be1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021bde:	83 c3 02             	add    ebx,0x2
c0021be1:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021be4:	75 03                	jne    c0021be9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021be6:	43                   	inc    ebx
c0021be7:	eb f8                	jmp    c0021be1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021be9:	51                   	push   ecx
c0021bea:	68 00 01 00 00       	push   0x100
c0021bef:	6a 00                	push   0x0
c0021bf1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021bf5:	50                   	push   eax
c0021bf6:	e8 7d eb fd ff       	call   c0000778 <memset>
c0021bfb:	83 c4 10             	add    esp,0x10
c0021bfe:	31 d2                	xor    edx,edx
c0021c00:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021c03:	84 c0                	test   al,al
c0021c05:	74 21                	je     c0021c28 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021c07:	3c 2f                	cmp    al,0x2f
c0021c09:	75 0b                	jne    c0021c16 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021c0b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021c0f:	bd 01 00 00 00       	mov    ebp,0x1
c0021c14:	eb 14                	jmp    c0021c2a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021c16:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021c19:	80 f9 19             	cmp    cl,0x19
c0021c1c:	77 03                	ja     c0021c21 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021c1e:	83 e8 20             	sub    eax,0x20
c0021c21:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021c25:	42                   	inc    edx
c0021c26:	eb d8                	jmp    c0021c00 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021c28:	31 ed                	xor    ebp,ebp
c0021c2a:	83 ec 0c             	sub    esp,0xc
c0021c2d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021c34:	e8 0a dc fe ff       	call   c000f843 <malloc>
c0021c39:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021c40:	89 c6                	mov    esi,eax
c0021c42:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021c48:	c1 ef 0b             	shr    edi,0xb
c0021c4b:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021c52:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021c56:	83 c4 10             	add    esp,0x10
c0021c59:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021c5e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021c62:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021c69:	74 28                	je     c0021c93 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021c6b:	52                   	push   edx
c0021c6c:	57                   	push   edi
c0021c6d:	50                   	push   eax
c0021c6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021c72:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021c79:	e8 9d f9 ff ff       	call   c002161b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c7e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021c82:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021c89:	05 00 08 00 00       	add    eax,0x800
c0021c8e:	83 c4 10             	add    esp,0x10
c0021c91:	eb cb                	jmp    c0021c5e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021c93:	83 ec 0c             	sub    esp,0xc
c0021c96:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021c9a:	57                   	push   edi
c0021c9b:	e8 f4 ea fd ff       	call   c0000794 <strlen>
c0021ca0:	50                   	push   eax
c0021ca1:	57                   	push   edi
c0021ca2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021ca9:	56                   	push   esi
c0021caa:	e8 2a f9 ff ff       	call   c00215d9 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021caf:	83 c4 20             	add    esp,0x20
c0021cb2:	85 c0                	test   eax,eax
c0021cb4:	75 13                	jne    c0021cc9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021cb6:	83 ec 0c             	sub    esp,0xc
c0021cb9:	56                   	push   esi
c0021cba:	e8 94 db fe ff       	call   c000f853 <free>
c0021cbf:	83 c4 10             	add    esp,0x10
c0021cc2:	31 c0                	xor    eax,eax
c0021cc4:	e9 b3 00 00 00       	jmp    c0021d7c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021cc9:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021ccd:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021cd1:	c1 e7 08             	shl    edi,0x8
c0021cd4:	c1 e2 10             	shl    edx,0x10
c0021cd7:	09 d7                	or     edi,edx
c0021cd9:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021cdd:	09 d7                	or     edi,edx
c0021cdf:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021ce3:	c1 e2 18             	shl    edx,0x18
c0021ce6:	09 d7                	or     edi,edx
c0021ce8:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021cec:	89 d1                	mov    ecx,edx
c0021cee:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021cf2:	c1 e1 08             	shl    ecx,0x8
c0021cf5:	c1 e2 10             	shl    edx,0x10
c0021cf8:	09 ca                	or     edx,ecx
c0021cfa:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021cfe:	09 ca                	or     edx,ecx
c0021d00:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021d04:	c1 e1 18             	shl    ecx,0x18
c0021d07:	09 ca                	or     edx,ecx
c0021d09:	89 e9                	mov    ecx,ebp
c0021d0b:	84 c9                	test   cl,cl
c0021d0d:	74 3c                	je     c0021d4b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021d0f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021d13:	83 ec 0c             	sub    esp,0xc
c0021d16:	56                   	push   esi
c0021d17:	e8 37 db fe ff       	call   c000f853 <free>
c0021d1c:	83 c4 0c             	add    esp,0xc
c0021d1f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d26:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021d2b:	50                   	push   eax
c0021d2c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d33:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021d3e:	52                   	push   edx
c0021d3f:	57                   	push   edi
c0021d40:	53                   	push   ebx
c0021d41:	e8 6e fe ff ff       	call   c0021bb4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021d46:	83 c4 20             	add    esp,0x20
c0021d49:	eb 31                	jmp    c0021d7c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021d4b:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021d4e:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021d55:	d0 e8                	shr    al,1
c0021d57:	89 3b                	mov    DWORD PTR [ebx],edi
c0021d59:	83 e0 01             	and    eax,0x1
c0021d5c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021d63:	83 ec 0c             	sub    esp,0xc
c0021d66:	89 13                	mov    DWORD PTR [ebx],edx
c0021d68:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021d6f:	89 03                	mov    DWORD PTR [ebx],eax
c0021d71:	56                   	push   esi
c0021d72:	e8 dc da fe ff       	call   c000f853 <free>
c0021d77:	83 c4 10             	add    esp,0x10
c0021d7a:	b0 01                	mov    al,0x1
c0021d7c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021d82:	5b                   	pop    ebx
c0021d83:	5e                   	pop    esi
c0021d84:	5f                   	pop    edi
c0021d85:	5d                   	pop    ebp
c0021d86:	c3                   	ret    

c0021d87 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021d87:	55                   	push   ebp
c0021d88:	57                   	push   edi
c0021d89:	56                   	push   esi
c0021d8a:	53                   	push   ebx
c0021d8b:	83 ec 20             	sub    esp,0x20
c0021d8e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021d92:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021d96:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021d9a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021da2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021daa:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021daf:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021db5:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021dbb:	57                   	push   edi
c0021dbc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021dc0:	50                   	push   eax
c0021dc1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021dc5:	50                   	push   eax
c0021dc6:	e8 94 fd ff ff       	call   c0021b5f <readRoot(unsigned int*, unsigned int*, char)>
c0021dcb:	5a                   	pop    edx
c0021dcc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021dd0:	e8 bf e9 fd ff       	call   c0000794 <strlen>
c0021dd5:	83 c4 10             	add    esp,0x10
c0021dd8:	83 f8 03             	cmp    eax,0x3
c0021ddb:	77 17                	ja     c0021df4 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021ddd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021de1:	89 03                	mov    DWORD PTR [ebx],eax
c0021de3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021de7:	89 06                	mov    DWORD PTR [esi],eax
c0021de9:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021df0:	b0 01                	mov    al,0x1
c0021df2:	eb 19                	jmp    c0021e0d <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021df4:	50                   	push   eax
c0021df5:	55                   	push   ebp
c0021df6:	57                   	push   edi
c0021df7:	56                   	push   esi
c0021df8:	53                   	push   ebx
c0021df9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021dfd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e01:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021e05:	e8 aa fd ff ff       	call   c0021bb4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021e0a:	83 c4 20             	add    esp,0x20
c0021e0d:	83 c4 1c             	add    esp,0x1c
c0021e10:	5b                   	pop    ebx
c0021e11:	5e                   	pop    esi
c0021e12:	5f                   	pop    edi
c0021e13:	5d                   	pop    ebp
c0021e14:	c3                   	ret    
c0021e15:	90                   	nop

c0021e16 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021e16:	57                   	push   edi
c0021e17:	56                   	push   esi
c0021e18:	53                   	push   ebx
c0021e19:	83 ec 10             	sub    esp,0x10
c0021e1c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021e20:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021e24:	85 ff                	test   edi,edi
c0021e26:	0f 84 9d 00 00 00    	je     c0021ec9 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021e2c:	85 f6                	test   esi,esi
c0021e2e:	0f 84 95 00 00 00    	je     c0021ec9 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021e34:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021e39:	74 17                	je     c0021e52 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021e3b:	83 ec 0c             	sub    esp,0xc
c0021e3e:	68 fb c6 02 c0       	push   0xc002c6fb
c0021e43:	e8 30 0f ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0021e48:	83 c4 10             	add    esp,0x10
c0021e4b:	b8 03 00 00 00       	mov    eax,0x3
c0021e50:	eb 7c                	jmp    c0021ece <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021e52:	83 ec 0c             	sub    esp,0xc
c0021e55:	6a 1c                	push   0x1c
c0021e57:	e8 e7 d9 fe ff       	call   c000f843 <malloc>
c0021e5c:	89 07                	mov    DWORD PTR [edi],eax
c0021e5e:	89 c3                	mov    ebx,eax
c0021e60:	58                   	pop    eax
c0021e61:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021e65:	50                   	push   eax
c0021e66:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021e69:	50                   	push   eax
c0021e6a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e6e:	50                   	push   eax
c0021e6f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e73:	50                   	push   eax
c0021e74:	56                   	push   esi
c0021e75:	e8 0d ff ff ff       	call   c0021d87 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021e7a:	83 c4 20             	add    esp,0x20
c0021e7d:	84 c0                	test   al,al
c0021e7f:	74 07                	je     c0021e88 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021e81:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021e86:	74 0b                	je     c0021e93 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021e88:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021e8c:	b8 01 00 00 00       	mov    eax,0x1
c0021e91:	eb 3b                	jmp    c0021ece <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021e93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e97:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021e9b:	89 03                	mov    DWORD PTR [ebx],eax
c0021e9d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021ea4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ea8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021eaf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021eb6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021eb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021ec0:	8a 06                	mov    al,BYTE PTR [esi]
c0021ec2:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021ec5:	31 c0                	xor    eax,eax
c0021ec7:	eb 05                	jmp    c0021ece <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021ec9:	b8 04 00 00 00       	mov    eax,0x4
c0021ece:	83 c4 10             	add    esp,0x10
c0021ed1:	5b                   	pop    ebx
c0021ed2:	5e                   	pop    esi
c0021ed3:	5f                   	pop    edi
c0021ed4:	c3                   	ret    
c0021ed5:	90                   	nop

c0021ed6 <ISO9660::exists(char const*)>:
c0021ed6:	83 ec 28             	sub    esp,0x28
c0021ed9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021edd:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021ee1:	52                   	push   edx
c0021ee2:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021ee5:	52                   	push   edx
c0021ee6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021eea:	52                   	push   edx
c0021eeb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021eef:	52                   	push   edx
c0021ef0:	50                   	push   eax
c0021ef1:	e8 91 fe ff ff       	call   c0021d87 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021ef6:	83 c4 3c             	add    esp,0x3c
c0021ef9:	c3                   	ret    

c0021efa <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021efa:	56                   	push   esi
c0021efb:	53                   	push   ebx
c0021efc:	83 ec 14             	sub    esp,0x14
c0021eff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021f03:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021f07:	85 db                	test   ebx,ebx
c0021f09:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021f0d:	0f 94 c2             	sete   dl
c0021f10:	85 f6                	test   esi,esi
c0021f12:	0f 94 c0             	sete   al
c0021f15:	08 c2                	or     dl,al
c0021f17:	75 68                	jne    c0021f81 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021f19:	85 c9                	test   ecx,ecx
c0021f1b:	74 64                	je     c0021f81 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021f1d:	83 ec 0c             	sub    esp,0xc
c0021f20:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021f23:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f27:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021f2d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f34:	50                   	push   eax
c0021f35:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021f38:	50                   	push   eax
c0021f39:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f3d:	50                   	push   eax
c0021f3e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f42:	50                   	push   eax
c0021f43:	51                   	push   ecx
c0021f44:	e8 3e fe ff ff       	call   c0021d87 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021f49:	83 c4 20             	add    esp,0x20
c0021f4c:	ba 01 00 00 00       	mov    edx,0x1
c0021f51:	84 c0                	test   al,al
c0021f53:	74 31                	je     c0021f86 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021f55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f59:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f60:	89 03                	mov    DWORD PTR [ebx],eax
c0021f62:	ba 00 00 00 00       	mov    edx,0x0
c0021f67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f6b:	85 c0                	test   eax,eax
c0021f6d:	0f 95 06             	setne  BYTE PTR [esi]
c0021f70:	74 14                	je     c0021f86 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021f72:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021f78:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f7f:	eb 05                	jmp    c0021f86 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021f81:	ba 04 00 00 00       	mov    edx,0x4
c0021f86:	83 c4 14             	add    esp,0x14
c0021f89:	89 d0                	mov    eax,edx
c0021f8b:	5b                   	pop    ebx
c0021f8c:	5e                   	pop    esi
c0021f8d:	c3                   	ret    

c0021f8e <ISO9660::openDir(char const*, void**)>:
c0021f8e:	57                   	push   edi
c0021f8f:	56                   	push   esi
c0021f90:	53                   	push   ebx
c0021f91:	83 ec 10             	sub    esp,0x10
c0021f94:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021f98:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021f9c:	85 ff                	test   edi,edi
c0021f9e:	0f 84 95 00 00 00    	je     c0022039 <ISO9660::openDir(char const*, void**)+0xab>
c0021fa4:	85 f6                	test   esi,esi
c0021fa6:	0f 84 8d 00 00 00    	je     c0022039 <ISO9660::openDir(char const*, void**)+0xab>
c0021fac:	83 ec 0c             	sub    esp,0xc
c0021faf:	6a 1c                	push   0x1c
c0021fb1:	e8 8d d8 fe ff       	call   c000f843 <malloc>
c0021fb6:	89 07                	mov    DWORD PTR [edi],eax
c0021fb8:	89 c3                	mov    ebx,eax
c0021fba:	59                   	pop    ecx
c0021fbb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021fbf:	50                   	push   eax
c0021fc0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021fc3:	50                   	push   eax
c0021fc4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fc8:	50                   	push   eax
c0021fc9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021fcd:	50                   	push   eax
c0021fce:	56                   	push   esi
c0021fcf:	e8 b3 fd ff ff       	call   c0021d87 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021fd4:	83 c4 20             	add    esp,0x20
c0021fd7:	84 c0                	test   al,al
c0021fd9:	74 07                	je     c0021fe2 <ISO9660::openDir(char const*, void**)+0x54>
c0021fdb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021fe0:	75 21                	jne    c0022003 <ISO9660::openDir(char const*, void**)+0x75>
c0021fe2:	0f b6 c0             	movzx  eax,al
c0021fe5:	52                   	push   edx
c0021fe6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021fea:	50                   	push   eax
c0021feb:	68 21 c7 02 c0       	push   0xc002c721
c0021ff0:	e8 83 0d ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0021ff5:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021ff9:	83 c4 10             	add    esp,0x10
c0021ffc:	b8 01 00 00 00       	mov    eax,0x1
c0022001:	eb 3b                	jmp    c002203e <ISO9660::openDir(char const*, void**)+0xb0>
c0022003:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022007:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002200b:	89 03                	mov    DWORD PTR [ebx],eax
c002200d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022014:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022018:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002201f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022026:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022029:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022030:	8a 06                	mov    al,BYTE PTR [esi]
c0022032:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022035:	31 c0                	xor    eax,eax
c0022037:	eb 05                	jmp    c002203e <ISO9660::openDir(char const*, void**)+0xb0>
c0022039:	b8 04 00 00 00       	mov    eax,0x4
c002203e:	83 c4 10             	add    esp,0x10
c0022041:	5b                   	pop    ebx
c0022042:	5e                   	pop    esi
c0022043:	5f                   	pop    edi
c0022044:	c3                   	ret    
c0022045:	90                   	nop

c0022046 <ISO9660::ISO9660()>:
c0022046:	83 ec 0c             	sub    esp,0xc
c0022049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002204d:	83 ec 0c             	sub    esp,0xc
c0022050:	50                   	push   eax
c0022051:	e8 26 10 ff ff       	call   c001307c <Filesystem::Filesystem()>
c0022056:	83 c4 10             	add    esp,0x10
c0022059:	ba 44 c7 02 c0       	mov    edx,0xc002c744
c002205e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022062:	89 10                	mov    DWORD PTR [eax],edx
c0022064:	90                   	nop
c0022065:	83 c4 0c             	add    esp,0xc
c0022068:	c3                   	ret    
c0022069:	90                   	nop

c002206a <SoundChannel::~SoundChannel()>:
c002206a:	83 ec 0c             	sub    esp,0xc
c002206d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022071:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022074:	83 ec 0c             	sub    esp,0xc
c0022077:	50                   	push   eax
c0022078:	e8 d6 d7 fe ff       	call   c000f853 <free>
c002207d:	83 c4 10             	add    esp,0x10
c0022080:	90                   	nop
c0022081:	83 c4 0c             	add    esp,0xc
c0022084:	c3                   	ret    
c0022085:	90                   	nop

c0022086 <SoundChannel::setSpeed(float)>:
c0022086:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002208a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002208e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0022091:	c3                   	ret    

c0022092 <SoundChannel::getSpeed()>:
c0022092:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022096:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022099:	c3                   	ret    

c002209a <SoundChannel::setVolume(int)>:
c002209a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002209e:	83 f8 64             	cmp    eax,0x64
c00220a1:	7e 05                	jle    c00220a8 <SoundChannel::setVolume(int)+0xe>
c00220a3:	b8 64 00 00 00       	mov    eax,0x64
c00220a8:	85 c0                	test   eax,eax
c00220aa:	79 02                	jns    c00220ae <SoundChannel::setVolume(int)+0x14>
c00220ac:	31 c0                	xor    eax,eax
c00220ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00220b2:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00220b5:	c3                   	ret    

c00220b6 <SoundChannel::getVolume()>:
c00220b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220ba:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00220bd:	c3                   	ret    

c00220be <SoundChannel::pause()>:
c00220be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220c2:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00220c6:	c3                   	ret    
c00220c7:	90                   	nop

c00220c8 <SoundChannel::SoundChannel(int, int, int, int)>:
c00220c8:	83 ec 1c             	sub    esp,0x1c
c00220cb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00220cf:	e8 ea ff ff ff       	call   c00220be <SoundChannel::pause()>
c00220d4:	83 c4 04             	add    esp,0x4
c00220d7:	6a 50                	push   0x50
c00220d9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00220dd:	e8 b8 ff ff ff       	call   c002209a <SoundChannel::setVolume(int)>
c00220e2:	83 c4 08             	add    esp,0x8
c00220e5:	a1 bc c7 02 c0       	mov    eax,ds:0xc002c7bc
c00220ea:	50                   	push   eax
c00220eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00220ef:	e8 92 ff ff ff       	call   c0022086 <SoundChannel::setSpeed(float)>
c00220f4:	83 c4 08             	add    esp,0x8
c00220f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00220fb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00220ff:	89 10                	mov    DWORD PTR [eax],edx
c0022101:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022105:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022109:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002210c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022110:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022114:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022117:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002211c:	75 23                	jne    c0022141 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002211e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022122:	8b 10                	mov    edx,DWORD PTR [eax]
c0022124:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022128:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002212b:	0f af c2             	imul   eax,edx
c002212e:	85 c0                	test   eax,eax
c0022130:	79 03                	jns    c0022135 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022132:	83 c0 03             	add    eax,0x3
c0022135:	c1 f8 02             	sar    eax,0x2
c0022138:	05 a0 0f 00 00       	add    eax,0xfa0
c002213d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022141:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022145:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022149:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c002214c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022150:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022157:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002215b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022162:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022166:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022169:	c1 e0 02             	shl    eax,0x2
c002216c:	83 ec 0c             	sub    esp,0xc
c002216f:	50                   	push   eax
c0022170:	e8 ce d6 fe ff       	call   c000f843 <malloc>
c0022175:	83 c4 10             	add    esp,0x10
c0022178:	89 c2                	mov    edx,eax
c002217a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002217e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022181:	83 ec 04             	sub    esp,0x4
c0022184:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022188:	50                   	push   eax
c0022189:	6a 01                	push   0x1
c002218b:	6a 04                	push   0x4
c002218d:	e8 0d 6a fe ff       	call   c0008b9f <src_new>
c0022192:	83 c4 10             	add    esp,0x10
c0022195:	89 c2                	mov    edx,eax
c0022197:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002219b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002219e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221a2:	85 c0                	test   eax,eax
c00221a4:	74 10                	je     c00221b6 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00221a6:	83 ec 0c             	sub    esp,0xc
c00221a9:	68 a0 c7 02 c0       	push   0xc002c7a0
c00221ae:	e8 a0 82 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c00221b3:	83 c4 10             	add    esp,0x10
c00221b6:	a0 60 25 03 c0       	mov    al,ds:0xc0032560
c00221bb:	83 f0 01             	xor    eax,0x1
c00221be:	84 c0                	test   al,al
c00221c0:	74 57                	je     c0022219 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00221c2:	a1 c0 c7 02 c0       	mov    eax,ds:0xc002c7c0
c00221c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221cb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00221d3:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00221db:	7f 35                	jg     c0022212 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00221dd:	83 ec 0c             	sub    esp,0xc
c00221e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00221e4:	e8 9e 4f 00 00       	call   c0027187 <__floatsisf>
c00221e9:	83 c4 10             	add    esp,0x10
c00221ec:	8b 15 c0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7c0
c00221f2:	83 ec 08             	sub    esp,0x8
c00221f5:	52                   	push   edx
c00221f6:	50                   	push   eax
c00221f7:	e8 9d 4b 00 00       	call   c0026d99 <__mulsf3>
c00221fc:	83 c4 10             	add    esp,0x10
c00221ff:	89 c2                	mov    edx,eax
c0022201:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022205:	89 14 85 60 21 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdea0],edx
c002220c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022210:	eb c1                	jmp    c00221d3 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022212:	c6 05 60 25 03 c0 01 	mov    BYTE PTR ds:0xc0032560,0x1
c0022219:	90                   	nop
c002221a:	83 c4 1c             	add    esp,0x1c
c002221d:	c3                   	ret    

c002221e <SoundChannel::play()>:
c002221e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022222:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022226:	c3                   	ret    
c0022227:	90                   	nop

c0022228 <SoundChannel::paused()>:
c0022228:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002222c:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c002222f:	c3                   	ret    

c0022230 <SoundChannel::getSampleRate()>:
c0022230:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022234:	8b 00                	mov    eax,DWORD PTR [eax]
c0022236:	c3                   	ret    
c0022237:	90                   	nop

c0022238 <SoundChannel::getBits()>:
c0022238:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002223c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002223f:	c3                   	ret    

c0022240 <SoundChannel::getBufferUsed()>:
c0022240:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022244:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022247:	c3                   	ret    

c0022248 <SoundChannel::getBufferSize()>:
c0022248:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002224c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002224f:	c3                   	ret    

c0022250 <SoundChannel::unbuffer(float*, int, int)>:
c0022250:	56                   	push   esi
c0022251:	53                   	push   ebx
c0022252:	83 ec 40             	sub    esp,0x40
c0022255:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022259:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002225c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022260:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022263:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022267:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002226b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002226f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022273:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022277:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c002227b:	e8 07 4f 00 00       	call   c0027187 <__floatsisf>
c0022280:	5a                   	pop    edx
c0022281:	89 c6                	mov    esi,eax
c0022283:	ff 33                	push   DWORD PTR [ebx]
c0022285:	e8 fd 4e 00 00       	call   c0027187 <__floatsisf>
c002228a:	59                   	pop    ecx
c002228b:	5a                   	pop    edx
c002228c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002228f:	50                   	push   eax
c0022290:	e8 04 4b 00 00       	call   c0026d99 <__mulsf3>
c0022295:	59                   	pop    ecx
c0022296:	5a                   	pop    edx
c0022297:	50                   	push   eax
c0022298:	56                   	push   esi
c0022299:	e8 be 4c 00 00       	call   c0026f5c <__divsf3>
c002229e:	89 04 24             	mov    DWORD PTR [esp],eax
c00222a1:	e8 b1 61 00 00       	call   c0028457 <__extendsfdf2>
c00222a6:	59                   	pop    ecx
c00222a7:	5e                   	pop    esi
c00222a8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00222ac:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00222b0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00222b8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00222bc:	50                   	push   eax
c00222bd:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00222c0:	e8 cf 64 fe ff       	call   c0008794 <src_process>
c00222c5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00222c9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00222cc:	83 c4 0c             	add    esp,0xc
c00222cf:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00222d2:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00222d5:	29 d0                	sub    eax,edx
c00222d7:	c1 e0 02             	shl    eax,0x2
c00222da:	50                   	push   eax
c00222db:	8d 04 91             	lea    eax,[ecx+edx*4]
c00222de:	50                   	push   eax
c00222df:	51                   	push   ecx
c00222e0:	e8 97 e3 fd ff       	call   c000067c <memmove>
c00222e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00222e9:	83 c4 44             	add    esp,0x44
c00222ec:	5b                   	pop    ebx
c00222ed:	5e                   	pop    esi
c00222ee:	c3                   	ret    
c00222ef:	90                   	nop

c00222f0 <SoundChannel::buffer8(unsigned char*, int)>:
c00222f0:	55                   	push   ebp
c00222f1:	57                   	push   edi
c00222f2:	56                   	push   esi
c00222f3:	53                   	push   ebx
c00222f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00222f8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00222fc:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00222ff:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022303:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022306:	74 7a                	je     c0022382 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022308:	85 ff                	test   edi,edi
c002230a:	7e 76                	jle    c0022382 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002230c:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022310:	8d 70 01             	lea    esi,[eax+0x1]
c0022313:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022316:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022319:	8b 1c 9d 60 21 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdea0]
c0022320:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022323:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022326:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022329:	74 5e                	je     c0022389 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c002232b:	83 ff 01             	cmp    edi,0x1
c002232e:	74 4b                	je     c002237b <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022330:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022334:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022337:	8d 70 01             	lea    esi,[eax+0x1]
c002233a:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002233d:	8b 1c 9d 60 21 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdea0]
c0022344:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022347:	b8 02 00 00 00       	mov    eax,0x2
c002234c:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002234f:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022352:	75 23                	jne    c0022377 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022354:	eb 27                	jmp    c002237d <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022356:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c002235b:	8d 71 01             	lea    esi,[ecx+0x1]
c002235e:	40                   	inc    eax
c002235f:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022362:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022365:	8b 1c 9d 60 21 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdea0]
c002236c:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c002236f:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022372:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022375:	74 06                	je     c002237d <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022377:	39 c7                	cmp    edi,eax
c0022379:	75 db                	jne    c0022356 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c002237b:	89 f8                	mov    eax,edi
c002237d:	5b                   	pop    ebx
c002237e:	5e                   	pop    esi
c002237f:	5f                   	pop    edi
c0022380:	5d                   	pop    ebp
c0022381:	c3                   	ret    
c0022382:	5b                   	pop    ebx
c0022383:	31 c0                	xor    eax,eax
c0022385:	5e                   	pop    esi
c0022386:	5f                   	pop    edi
c0022387:	5d                   	pop    ebp
c0022388:	c3                   	ret    
c0022389:	b8 01 00 00 00       	mov    eax,0x1
c002238e:	eb ed                	jmp    c002237d <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022390 <SoundDevice::SoundDevice(char const*)>:
c0022390:	83 ec 1c             	sub    esp,0x1c
c0022393:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022397:	83 ec 08             	sub    esp,0x8
c002239a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002239e:	50                   	push   eax
c002239f:	e8 ea 1f ff ff       	call   c001438e <Device::Device(char const*)>
c00223a4:	83 c4 10             	add    esp,0x10
c00223a7:	ba cc c7 02 c0       	mov    edx,0xc002c7cc
c00223ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223b0:	89 10                	mov    DWORD PTR [eax],edx
c00223b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223b6:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00223c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223c4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00223ce:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00223d6:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00223db:	7f 19                	jg     c00223f6 <SoundDevice::SoundDevice(char const*)+0x66>
c00223dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00223e5:	83 c2 54             	add    edx,0x54
c00223e8:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00223f0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00223f4:	eb e0                	jmp    c00223d6 <SoundDevice::SoundDevice(char const*)+0x46>
c00223f6:	90                   	nop
c00223f7:	83 c4 1c             	add    esp,0x1c
c00223fa:	c3                   	ret    
c00223fb:	90                   	nop

c00223fc <SoundDevice::~SoundDevice()>:
c00223fc:	53                   	push   ebx
c00223fd:	83 ec 18             	sub    esp,0x18
c0022400:	ba cc c7 02 c0       	mov    edx,0xc002c7cc
c0022405:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022409:	89 10                	mov    DWORD PTR [eax],edx
c002240b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022413:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022418:	7f 46                	jg     c0022460 <SoundDevice::~SoundDevice()+0x64>
c002241a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002241e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022422:	83 c2 54             	add    edx,0x54
c0022425:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022429:	85 c0                	test   eax,eax
c002242b:	74 2d                	je     c002245a <SoundDevice::~SoundDevice()+0x5e>
c002242d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022431:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022435:	83 c2 54             	add    edx,0x54
c0022438:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002243c:	85 db                	test   ebx,ebx
c002243e:	74 1a                	je     c002245a <SoundDevice::~SoundDevice()+0x5e>
c0022440:	83 ec 0c             	sub    esp,0xc
c0022443:	53                   	push   ebx
c0022444:	e8 21 fc ff ff       	call   c002206a <SoundChannel::~SoundChannel()>
c0022449:	83 c4 10             	add    esp,0x10
c002244c:	83 ec 08             	sub    esp,0x8
c002244f:	6a 2c                	push   0x2c
c0022451:	53                   	push   ebx
c0022452:	e8 41 08 ff ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0022457:	83 c4 10             	add    esp,0x10
c002245a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002245e:	eb b3                	jmp    c0022413 <SoundDevice::~SoundDevice()+0x17>
c0022460:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022464:	83 ec 0c             	sub    esp,0xc
c0022467:	50                   	push   eax
c0022468:	e8 03 1c ff ff       	call   c0014070 <Device::~Device()>
c002246d:	83 c4 10             	add    esp,0x10
c0022470:	90                   	nop
c0022471:	83 c4 18             	add    esp,0x18
c0022474:	5b                   	pop    ebx
c0022475:	c3                   	ret    

c0022476 <SoundDevice::~SoundDevice()>:
c0022476:	83 ec 0c             	sub    esp,0xc
c0022479:	83 ec 0c             	sub    esp,0xc
c002247c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022480:	e8 77 ff ff ff       	call   c00223fc <SoundDevice::~SoundDevice()>
c0022485:	83 c4 10             	add    esp,0x10
c0022488:	83 ec 08             	sub    esp,0x8
c002248b:	68 e4 01 00 00       	push   0x1e4
c0022490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022494:	e8 ff 07 ff ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0022499:	83 c4 10             	add    esp,0x10
c002249c:	83 c4 0c             	add    esp,0xc
c002249f:	c3                   	ret    

c00224a0 <SoundDevice::getFreeChannelNum()>:
c00224a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00224a4:	31 c0                	xor    eax,eax
c00224a6:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00224ae:	74 09                	je     c00224b9 <SoundDevice::getFreeChannelNum()+0x19>
c00224b0:	40                   	inc    eax
c00224b1:	83 f8 20             	cmp    eax,0x20
c00224b4:	75 f0                	jne    c00224a6 <SoundDevice::getFreeChannelNum()+0x6>
c00224b6:	83 c8 ff             	or     eax,0xffffffff
c00224b9:	c3                   	ret    

c00224ba <SoundDevice::addChannel(SoundChannel*)>:
c00224ba:	56                   	push   esi
c00224bb:	53                   	push   ebx
c00224bc:	51                   	push   ecx
c00224bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00224c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00224c5:	53                   	push   ebx
c00224c6:	e8 d5 ff ff ff       	call   c00224a0 <SoundDevice::getFreeChannelNum()>
c00224cb:	5a                   	pop    edx
c00224cc:	83 f8 ff             	cmp    eax,0xffffffff
c00224cf:	74 51                	je     c0022522 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00224d1:	85 f6                	test   esi,esi
c00224d3:	74 4d                	je     c0022522 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00224d5:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00224dc:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00224e3:	75 30                	jne    c0022515 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00224e5:	83 ec 0c             	sub    esp,0xc
c00224e8:	56                   	push   esi
c00224e9:	e8 42 fd ff ff       	call   c0022230 <SoundChannel::getSampleRate()>
c00224ee:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00224f4:	89 34 24             	mov    DWORD PTR [esp],esi
c00224f7:	e8 3c fd ff ff       	call   c0022238 <SoundChannel::getBits()>
c00224fc:	83 c4 0c             	add    esp,0xc
c00224ff:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022505:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022507:	50                   	push   eax
c0022508:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002250e:	53                   	push   ebx
c002250f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022512:	83 c4 10             	add    esp,0x10
c0022515:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c002251b:	b8 01 00 00 00       	mov    eax,0x1
c0022520:	eb 03                	jmp    c0022525 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022522:	83 c8 ff             	or     eax,0xffffffff
c0022525:	5a                   	pop    edx
c0022526:	5b                   	pop    ebx
c0022527:	5e                   	pop    esi
c0022528:	c3                   	ret    
c0022529:	90                   	nop

c002252a <SoundDevice::removeChannel(int)>:
c002252a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002252e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022532:	83 fa 1f             	cmp    edx,0x1f
c0022535:	77 23                	ja     c002255a <SoundDevice::removeChannel(int)+0x30>
c0022537:	8d 14 90             	lea    edx,[eax+edx*4]
c002253a:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022541:	74 17                	je     c002255a <SoundDevice::removeChannel(int)+0x30>
c0022543:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002254d:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022553:	75 05                	jne    c002255a <SoundDevice::removeChannel(int)+0x30>
c0022555:	8b 00                	mov    eax,DWORD PTR [eax]
c0022557:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c002255a:	c3                   	ret    
c002255b:	90                   	nop

c002255c <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002255c:	57                   	push   edi
c002255d:	56                   	push   esi
c002255e:	53                   	push   ebx
c002255f:	31 db                	xor    ebx,ebx
c0022561:	83 ec 10             	sub    esp,0x10
c0022564:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022568:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002256c:	0f 8d cb 00 00 00    	jge    c002263d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022572:	83 ec 0c             	sub    esp,0xc
c0022575:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022579:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002257c:	e8 d6 5e 00 00       	call   c0028457 <__extendsfdf2>
c0022581:	83 c4 10             	add    esp,0x10
c0022584:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022588:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002258c:	68 00 00 f0 3f       	push   0x3ff00000
c0022591:	6a 00                	push   0x0
c0022593:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022597:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002259b:	e8 43 4e 00 00       	call   c00273e3 <__adddf3>
c00225a0:	83 c4 10             	add    esp,0x10
c00225a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00225ab:	68 00 00 e0 3f       	push   0x3fe00000
c00225b0:	6a 00                	push   0x0
c00225b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225ba:	e8 a1 54 00 00       	call   c0027a60 <__muldf3>
c00225bf:	83 c4 10             	add    esp,0x10
c00225c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00225ca:	68 00 00 60 40       	push   0x40600000
c00225cf:	6a 00                	push   0x0
c00225d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225d9:	e8 82 54 00 00       	call   c0027a60 <__muldf3>
c00225de:	59                   	pop    ecx
c00225df:	5f                   	pop    edi
c00225e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00225e4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00225e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225f0:	e8 3e 5d 00 00       	call   c0028333 <__truncdfsf2>
c00225f5:	5a                   	pop    edx
c00225f6:	89 c7                	mov    edi,eax
c00225f8:	59                   	pop    ecx
c00225f9:	68 00 00 fe 42       	push   0x42fe0000
c00225fe:	50                   	push   eax
c00225ff:	e8 d9 4d 00 00       	call   c00273dd <__gesf2>
c0022604:	83 c4 10             	add    esp,0x10
c0022607:	85 c0                	test   eax,eax
c0022609:	78 06                	js     c0022611 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002260b:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002260f:	eb 26                	jmp    c0022637 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022611:	50                   	push   eax
c0022612:	50                   	push   eax
c0022613:	6a 00                	push   0x0
c0022615:	57                   	push   edi
c0022616:	e8 c6 4d 00 00       	call   c00273e1 <__lesf2>
c002261b:	83 c4 10             	add    esp,0x10
c002261e:	85 c0                	test   eax,eax
c0022620:	7f 06                	jg     c0022628 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022622:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022626:	eb 0f                	jmp    c0022637 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022628:	83 ec 0c             	sub    esp,0xc
c002262b:	57                   	push   edi
c002262c:	e8 bb 5e 00 00       	call   c00284ec <lrintf>
c0022631:	83 c4 10             	add    esp,0x10
c0022634:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022637:	43                   	inc    ebx
c0022638:	e9 2b ff ff ff       	jmp    c0022568 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002263d:	83 c4 10             	add    esp,0x10
c0022640:	5b                   	pop    ebx
c0022641:	5e                   	pop    esi
c0022642:	5f                   	pop    edi
c0022643:	c3                   	ret    

c0022644 <SoundDevice::getAudio(int, float*, float*)>:
c0022644:	55                   	push   ebp
c0022645:	57                   	push   edi
c0022646:	56                   	push   esi
c0022647:	53                   	push   ebx
c0022648:	31 db                	xor    ebx,ebx
c002264a:	83 ec 20             	sub    esp,0x20
c002264d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022651:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022655:	c1 e0 02             	shl    eax,0x2
c0022658:	50                   	push   eax
c0022659:	6a 00                	push   0x0
c002265b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002265f:	e8 14 e1 fd ff       	call   c0000778 <memset>
c0022664:	83 c4 10             	add    esp,0x10
c0022667:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002266b:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0022672:	85 c0                	test   eax,eax
c0022674:	0f 84 d7 00 00 00    	je     c0022751 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002267a:	83 ec 0c             	sub    esp,0xc
c002267d:	50                   	push   eax
c002267e:	e8 a5 fb ff ff       	call   c0022228 <SoundChannel::paused()>
c0022683:	83 c4 10             	add    esp,0x10
c0022686:	84 c0                	test   al,al
c0022688:	0f 85 c3 00 00 00    	jne    c0022751 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002268e:	83 ec 0c             	sub    esp,0xc
c0022691:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022698:	e8 19 fa ff ff       	call   c00220b6 <SoundChannel::getVolume()>
c002269d:	83 c4 10             	add    esp,0x10
c00226a0:	85 c0                	test   eax,eax
c00226a2:	0f 84 a9 00 00 00    	je     c0022751 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00226a8:	83 ec 0c             	sub    esp,0xc
c00226ab:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00226b2:	e8 ff f9 ff ff       	call   c00220b6 <SoundChannel::getVolume()>
c00226b7:	83 ec 0c             	sub    esp,0xc
c00226ba:	50                   	push   eax
c00226bb:	e8 c7 4a 00 00       	call   c0027187 <__floatsisf>
c00226c0:	59                   	pop    ecx
c00226c1:	5d                   	pop    ebp
c00226c2:	31 ed                	xor    ebp,ebp
c00226c4:	68 00 00 c8 42       	push   0x42c80000
c00226c9:	50                   	push   eax
c00226ca:	e8 8d 48 00 00       	call   c0026f5c <__divsf3>
c00226cf:	83 c4 10             	add    esp,0x10
c00226d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00226d6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00226da:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00226e0:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00226e4:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00226eb:	e8 60 fb ff ff       	call   c0022250 <SoundChannel::unbuffer(float*, int, int)>
c00226f0:	83 c4 20             	add    esp,0x20
c00226f3:	89 c1                	mov    ecx,eax
c00226f5:	39 cd                	cmp    ebp,ecx
c00226f7:	7d 52                	jge    c002274b <SoundDevice::getAudio(int, float*, float*)+0x107>
c00226f9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00226fd:	50                   	push   eax
c00226fe:	50                   	push   eax
c00226ff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022703:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022706:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002270a:	e8 8a 46 00 00       	call   c0026d99 <__mulsf3>
c002270f:	5a                   	pop    edx
c0022710:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022714:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c002271a:	e8 68 4a 00 00       	call   c0027187 <__floatsisf>
c002271f:	59                   	pop    ecx
c0022720:	5a                   	pop    edx
c0022721:	50                   	push   eax
c0022722:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022726:	e8 31 48 00 00       	call   c0026f5c <__divsf3>
c002272b:	59                   	pop    ecx
c002272c:	5a                   	pop    edx
c002272d:	50                   	push   eax
c002272e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022732:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022735:	e8 3c 43 00 00       	call   c0026a76 <__addsf3>
c002273a:	83 c4 10             	add    esp,0x10
c002273d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022741:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022745:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022748:	45                   	inc    ebp
c0022749:	eb aa                	jmp    c00226f5 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c002274b:	39 cf                	cmp    edi,ecx
c002274d:	7e 02                	jle    c0022751 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002274f:	89 cf                	mov    edi,ecx
c0022751:	43                   	inc    ebx
c0022752:	83 fb 20             	cmp    ebx,0x20
c0022755:	0f 85 10 ff ff ff    	jne    c002266b <SoundDevice::getAudio(int, float*, float*)+0x27>
c002275b:	83 c4 1c             	add    esp,0x1c
c002275e:	89 f8                	mov    eax,edi
c0022760:	5b                   	pop    ebx
c0022761:	5e                   	pop    esi
c0022762:	5f                   	pop    edi
c0022763:	5d                   	pop    ebp
c0022764:	c3                   	ret    
c0022765:	90                   	nop

c0022766 <PCI::open(int, int, void*)>:
c0022766:	83 ec 18             	sub    esp,0x18
c0022769:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002276d:	8b 10                	mov    edx,DWORD PTR [eax]
c002276f:	50                   	push   eax
c0022770:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022773:	31 c0                	xor    eax,eax
c0022775:	83 c4 1c             	add    esp,0x1c
c0022778:	c3                   	ret    
c0022779:	90                   	nop

c002277a <PCI::close(int, int, void*)>:
c002277a:	31 c0                	xor    eax,eax
c002277c:	c3                   	ret    
c002277d:	90                   	nop

c002277e <PCI::PCI()>:
c002277e:	83 ec 0c             	sub    esp,0xc
c0022781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022785:	83 ec 08             	sub    esp,0x8
c0022788:	68 fc c7 02 c0       	push   0xc002c7fc
c002278d:	50                   	push   eax
c002278e:	e8 7f 12 ff ff       	call   c0013a12 <Bus::Bus(char const*)>
c0022793:	83 c4 10             	add    esp,0x10
c0022796:	ba 68 c8 02 c0       	mov    edx,0xc002c868
c002279b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002279f:	89 10                	mov    DWORD PTR [eax],edx
c00227a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227a5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00227ab:	0f b6 d0             	movzx  edx,al
c00227ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227b2:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00227b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227bd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00227c3:	0f b6 d0             	movzx  edx,al
c00227c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227ca:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00227cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227d3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00227d9:	8d 50 01             	lea    edx,[eax+0x1]
c00227dc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00227e0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00227e6:	0f b6 d0             	movzx  edx,al
c00227e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227ed:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00227f1:	83 c9 c0             	or     ecx,0xffffffc0
c00227f4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00227f8:	90                   	nop
c00227f9:	83 c4 0c             	add    esp,0xc
c00227fc:	c3                   	ret    
c00227fd:	90                   	nop

c00227fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00227fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022802:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022807:	89 ca                	mov    edx,ecx
c0022809:	c1 e0 10             	shl    eax,0x10
c002280c:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022812:	09 d0                	or     eax,edx
c0022814:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022819:	c1 e2 08             	shl    edx,0x8
c002281c:	09 d0                	or     eax,edx
c002281e:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022823:	c1 e2 0b             	shl    edx,0xb
c0022826:	09 d0                	or     eax,edx
c0022828:	ba f8 0c 00 00       	mov    edx,0xcf8
c002282d:	0d 00 00 00 80       	or     eax,0x80000000
c0022832:	ef                   	out    dx,eax
c0022833:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022838:	ed                   	in     eax,dx
c0022839:	83 e1 02             	and    ecx,0x2
c002283c:	0f b6 c9             	movzx  ecx,cl
c002283f:	c1 e1 03             	shl    ecx,0x3
c0022842:	d3 e8                	shr    eax,cl
c0022844:	c3                   	ret    
c0022845:	90                   	nop

c0022846 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022846:	6a 00                	push   0x0
c0022848:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002284d:	50                   	push   eax
c002284e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022853:	50                   	push   eax
c0022854:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022859:	50                   	push   eax
c002285a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002285e:	e8 9b ff ff ff       	call   c00227fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022863:	83 c4 14             	add    esp,0x14
c0022866:	c3                   	ret    
c0022867:	90                   	nop

c0022868 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022868:	6a 0e                	push   0xe
c002286a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002286f:	50                   	push   eax
c0022870:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022875:	50                   	push   eax
c0022876:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002287b:	50                   	push   eax
c002287c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022880:	e8 79 ff ff ff       	call   c00227fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022885:	83 c4 14             	add    esp,0x14
c0022888:	0f b6 c0             	movzx  eax,al
c002288b:	c3                   	ret    

c002288c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002288c:	55                   	push   ebp
c002288d:	57                   	push   edi
c002288e:	56                   	push   esi
c002288f:	53                   	push   ebx
c0022890:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022895:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c002289a:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c002289f:	6a 0a                	push   0xa
c00228a1:	56                   	push   esi
c00228a2:	55                   	push   ebp
c00228a3:	57                   	push   edi
c00228a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00228a8:	e8 51 ff ff ff       	call   c00227fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228ad:	6a 0a                	push   0xa
c00228af:	89 c3                	mov    ebx,eax
c00228b1:	56                   	push   esi
c00228b2:	0f b6 db             	movzx  ebx,bl
c00228b5:	55                   	push   ebp
c00228b6:	57                   	push   edi
c00228b7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00228bb:	e8 3e ff ff ff       	call   c00227fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228c0:	83 c4 28             	add    esp,0x28
c00228c3:	25 00 ff 00 00       	and    eax,0xff00
c00228c8:	09 d8                	or     eax,ebx
c00228ca:	5b                   	pop    ebx
c00228cb:	5e                   	pop    esi
c00228cc:	5f                   	pop    edi
c00228cd:	5d                   	pop    ebp
c00228ce:	c3                   	ret    
c00228cf:	90                   	nop

c00228d0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00228d0:	6a 08                	push   0x8
c00228d2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00228d7:	50                   	push   eax
c00228d8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00228dd:	50                   	push   eax
c00228de:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00228e3:	50                   	push   eax
c00228e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228e8:	e8 11 ff ff ff       	call   c00227fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228ed:	83 c4 14             	add    esp,0x14
c00228f0:	0f b6 c4             	movzx  eax,ah
c00228f3:	c3                   	ret    

c00228f4 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00228f4:	6a 08                	push   0x8
c00228f6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00228fb:	50                   	push   eax
c00228fc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022901:	50                   	push   eax
c0022902:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022907:	50                   	push   eax
c0022908:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002290c:	e8 ed fe ff ff       	call   c00227fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022911:	83 c4 14             	add    esp,0x14
c0022914:	c3                   	ret    
c0022915:	90                   	nop

c0022916 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022916:	6a 3c                	push   0x3c
c0022918:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002291d:	50                   	push   eax
c002291e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022923:	50                   	push   eax
c0022924:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022929:	50                   	push   eax
c002292a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002292e:	e8 cb fe ff ff       	call   c00227fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022933:	83 c4 14             	add    esp,0x14
c0022936:	c3                   	ret    
c0022937:	90                   	nop

c0022938 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022938:	6a 18                	push   0x18
c002293a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002293f:	50                   	push   eax
c0022940:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022945:	50                   	push   eax
c0022946:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002294b:	50                   	push   eax
c002294c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022950:	e8 a9 fe ff ff       	call   c00227fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022955:	83 c4 14             	add    esp,0x14
c0022958:	0f b6 c4             	movzx  eax,ah
c002295b:	c3                   	ret    

c002295c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002295c:	55                   	push   ebp
c002295d:	57                   	push   edi
c002295e:	56                   	push   esi
c002295f:	53                   	push   ebx
c0022960:	50                   	push   eax
c0022961:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022965:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c002296a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002296f:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022974:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002297b:	8d 43 12             	lea    eax,[ebx+0x12]
c002297e:	83 c3 10             	add    ebx,0x10
c0022981:	0f b6 c0             	movzx  eax,al
c0022984:	0f b6 db             	movzx  ebx,bl
c0022987:	50                   	push   eax
c0022988:	51                   	push   ecx
c0022989:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002298d:	57                   	push   edi
c002298e:	55                   	push   ebp
c002298f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022993:	e8 66 fe ff ff       	call   c00227fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022998:	53                   	push   ebx
c0022999:	89 c6                	mov    esi,eax
c002299b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002299f:	c1 e6 10             	shl    esi,0x10
c00229a2:	51                   	push   ecx
c00229a3:	57                   	push   edi
c00229a4:	55                   	push   ebp
c00229a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00229a9:	e8 50 fe ff ff       	call   c00227fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229ae:	83 c4 2c             	add    esp,0x2c
c00229b1:	0f b7 c0             	movzx  eax,ax
c00229b4:	5b                   	pop    ebx
c00229b5:	09 f0                	or     eax,esi
c00229b7:	5e                   	pop    esi
c00229b8:	5f                   	pop    edi
c00229b9:	5d                   	pop    ebp
c00229ba:	c3                   	ret    
c00229bb:	90                   	nop

c00229bc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00229bc:	53                   	push   ebx
c00229bd:	ba f8 0c 00 00       	mov    edx,0xcf8
c00229c2:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00229c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00229cb:	c1 e1 10             	shl    ecx,0x10
c00229ce:	25 fc 00 00 00       	and    eax,0xfc
c00229d3:	09 c1                	or     ecx,eax
c00229d5:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00229da:	c1 e0 08             	shl    eax,0x8
c00229dd:	09 c1                	or     ecx,eax
c00229df:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00229e4:	c1 e0 0b             	shl    eax,0xb
c00229e7:	09 c1                	or     ecx,eax
c00229e9:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00229ef:	89 c8                	mov    eax,ecx
c00229f1:	ef                   	out    dx,eax
c00229f2:	ba fc 0c 00 00       	mov    edx,0xcfc
c00229f7:	ed                   	in     eax,dx
c00229f8:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00229fd:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022a02:	74 0a                	je     c0022a0e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022a04:	0f b7 d8             	movzx  ebx,ax
c0022a07:	89 d0                	mov    eax,edx
c0022a09:	c1 e0 10             	shl    eax,0x10
c0022a0c:	eb 05                	jmp    c0022a13 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022a0e:	66 31 c0             	xor    ax,ax
c0022a11:	89 d3                	mov    ebx,edx
c0022a13:	09 c3                	or     ebx,eax
c0022a15:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022a1a:	89 c8                	mov    eax,ecx
c0022a1c:	ef                   	out    dx,eax
c0022a1d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a22:	89 d8                	mov    eax,ebx
c0022a24:	ef                   	out    dx,eax
c0022a25:	5b                   	pop    ebx
c0022a26:	c3                   	ret    
c0022a27:	90                   	nop

c0022a28 <PCI::checkBus(unsigned char)>:
c0022a28:	56                   	push   esi
c0022a29:	53                   	push   ebx
c0022a2a:	31 db                	xor    ebx,ebx
c0022a2c:	51                   	push   ecx
c0022a2d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022a32:	52                   	push   edx
c0022a33:	53                   	push   ebx
c0022a34:	43                   	inc    ebx
c0022a35:	56                   	push   esi
c0022a36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a3a:	e8 2b 03 00 00       	call   c0022d6a <PCI::checkDevice(unsigned char, unsigned char)>
c0022a3f:	83 c4 10             	add    esp,0x10
c0022a42:	83 fb 20             	cmp    ebx,0x20
c0022a45:	75 eb                	jne    c0022a32 <PCI::checkBus(unsigned char)+0xa>
c0022a47:	58                   	pop    eax
c0022a48:	5b                   	pop    ebx
c0022a49:	5e                   	pop    esi
c0022a4a:	c3                   	ret    
c0022a4b:	90                   	nop

c0022a4c <PCI::foundDevice(PCIDeviceInfo)>:
c0022a4c:	55                   	push   ebp
c0022a4d:	57                   	push   edi
c0022a4e:	56                   	push   esi
c0022a4f:	53                   	push   ebx
c0022a50:	83 ec 1c             	sub    esp,0x1c
c0022a53:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022a57:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022a5d:	0f 84 52 01 00 00    	je     c0022bb5 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022a63:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022a67:	66 81 f9 06 04       	cmp    cx,0x406
c0022a6c:	75 2c                	jne    c0022a9a <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022a6e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022a73:	50                   	push   eax
c0022a74:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022a79:	50                   	push   eax
c0022a7a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022a7f:	50                   	push   eax
c0022a80:	56                   	push   esi
c0022a81:	e8 b2 fe ff ff       	call   c0022938 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022a86:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022a8a:	0f b6 c0             	movzx  eax,al
c0022a8d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022a91:	83 c4 2c             	add    esp,0x2c
c0022a94:	5b                   	pop    ebx
c0022a95:	5e                   	pop    esi
c0022a96:	5f                   	pop    edi
c0022a97:	5d                   	pop    ebp
c0022a98:	eb 8e                	jmp    c0022a28 <PCI::checkBus(unsigned char)>
c0022a9a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022a9e:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022aa4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022aa8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022aac:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022ab0:	88 d3                	mov    bl,dl
c0022ab2:	85 c0                	test   eax,eax
c0022ab4:	74 33                	je     c0022ae9 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022ab6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022ab9:	85 d2                	test   edx,edx
c0022abb:	74 28                	je     c0022ae5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022abd:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022ac3:	31 ef                	xor    edi,ebp
c0022ac5:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022acb:	75 18                	jne    c0022ae5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022acd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022ad1:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022ad7:	75 0c                	jne    c0022ae5 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022ad9:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022adf:	0f 84 d0 00 00 00    	je     c0022bb5 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022ae5:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ae7:	eb c9                	jmp    c0022ab2 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022ae9:	66 81 f9 01 06       	cmp    cx,0x601
c0022aee:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022af2:	75 19                	jne    c0022b0d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022af4:	83 ec 0c             	sub    esp,0xc
c0022af7:	68 64 01 00 00       	push   0x164
c0022afc:	e8 42 cd fe ff       	call   c000f843 <malloc>
c0022b01:	89 c5                	mov    ebp,eax
c0022b03:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b06:	e8 95 0f 00 00       	call   c0023aa0 <SATABus::SATABus()>
c0022b0b:	eb 1e                	jmp    c0022b2b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022b0d:	66 81 f9 01 01       	cmp    cx,0x101
c0022b12:	75 60                	jne    c0022b74 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022b14:	83 ec 0c             	sub    esp,0xc
c0022b17:	68 70 02 00 00       	push   0x270
c0022b1c:	e8 22 cd fe ff       	call   c000f843 <malloc>
c0022b21:	89 c5                	mov    ebp,eax
c0022b23:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b26:	e8 03 03 00 00       	call   c0022e2e <IDE::IDE()>
c0022b2b:	58                   	pop    eax
c0022b2c:	5a                   	pop    edx
c0022b2d:	55                   	push   ebp
c0022b2e:	56                   	push   esi
c0022b2f:	e8 6a 16 ff ff       	call   c001419e <Device::addChild(Device*)>
c0022b34:	83 ec 1c             	sub    esp,0x1c
c0022b37:	b9 09 00 00 00       	mov    ecx,0x9
c0022b3c:	fc                   	cld    
c0022b3d:	89 e7                	mov    edi,esp
c0022b3f:	89 de                	mov    esi,ebx
c0022b41:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022b43:	55                   	push   ebp
c0022b44:	e8 5f 15 ff ff       	call   c00140a8 <Device::preOpenPCI(PCIDeviceInfo)>
c0022b49:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022b4c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022b50:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022b58:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022b60:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022b68:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b6b:	83 c4 4c             	add    esp,0x4c
c0022b6e:	5b                   	pop    ebx
c0022b6f:	5e                   	pop    esi
c0022b70:	5f                   	pop    edi
c0022b71:	5d                   	pop    ebp
c0022b72:	ff e0                	jmp    eax
c0022b74:	83 ec 0c             	sub    esp,0xc
c0022b77:	68 58 01 00 00       	push   0x158
c0022b7c:	e8 c2 cc fe ff       	call   c000f843 <malloc>
c0022b81:	89 c5                	mov    ebp,eax
c0022b83:	58                   	pop    eax
c0022b84:	5a                   	pop    edx
c0022b85:	68 04 c8 02 c0       	push   0xc002c804
c0022b8a:	55                   	push   ebp
c0022b8b:	e8 04 19 ff ff       	call   c0014494 <DriverlessDevice::DriverlessDevice(char const*)>
c0022b90:	59                   	pop    ecx
c0022b91:	5f                   	pop    edi
c0022b92:	55                   	push   ebp
c0022b93:	56                   	push   esi
c0022b94:	e8 05 16 ff ff       	call   c001419e <Device::addChild(Device*)>
c0022b99:	b9 09 00 00 00       	mov    ecx,0x9
c0022b9e:	fc                   	cld    
c0022b9f:	89 df                	mov    edi,ebx
c0022ba1:	89 de                	mov    esi,ebx
c0022ba3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022ba5:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022ba9:	83 c4 2c             	add    esp,0x2c
c0022bac:	5b                   	pop    ebx
c0022bad:	5e                   	pop    esi
c0022bae:	5f                   	pop    edi
c0022baf:	5d                   	pop    ebp
c0022bb0:	e9 f3 14 ff ff       	jmp    c00140a8 <Device::preOpenPCI(PCIDeviceInfo)>
c0022bb5:	83 c4 1c             	add    esp,0x1c
c0022bb8:	5b                   	pop    ebx
c0022bb9:	5e                   	pop    esi
c0022bba:	5f                   	pop    edi
c0022bbb:	5d                   	pop    ebp
c0022bbc:	c3                   	ret    
c0022bbd:	90                   	nop

c0022bbe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022bbe:	55                   	push   ebp
c0022bbf:	57                   	push   edi
c0022bc0:	56                   	push   esi
c0022bc1:	53                   	push   ebx
c0022bc2:	83 ec 5c             	sub    esp,0x5c
c0022bc5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022bc9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022bcd:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022bd1:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022bd6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022bda:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022bde:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022be3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022be7:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022bec:	6a 0c                	push   0xc
c0022bee:	55                   	push   ebp
c0022bef:	53                   	push   ebx
c0022bf0:	57                   	push   edi
c0022bf1:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022bf8:	e8 01 fc ff ff       	call   c00227fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bfd:	55                   	push   ebp
c0022bfe:	53                   	push   ebx
c0022bff:	57                   	push   edi
c0022c00:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022c07:	e8 80 fc ff ff       	call   c002288c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022c0c:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022c11:	83 c4 24             	add    esp,0x24
c0022c14:	55                   	push   ebp
c0022c15:	53                   	push   ebx
c0022c16:	57                   	push   edi
c0022c17:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022c1b:	e8 f6 fc ff ff       	call   c0022916 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022c20:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022c24:	6a 3c                	push   0x3c
c0022c26:	55                   	push   ebp
c0022c27:	53                   	push   ebx
c0022c28:	57                   	push   edi
c0022c29:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022c30:	e8 c9 fb ff ff       	call   c00227fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c35:	0f b6 c4             	movzx  eax,ah
c0022c38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022c3c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022c40:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022c44:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0022c49:	83 c4 24             	add    esp,0x24
c0022c4c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022c52:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022c59:	74 6c                	je     c0022cc7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022c5b:	31 f6                	xor    esi,esi
c0022c5d:	8b 15 08 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e208
c0022c63:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022c69:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022c6f:	7e 56                	jle    c0022cc7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022c71:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022c74:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022c7b:	39 cb                	cmp    ebx,ecx
c0022c7d:	75 45                	jne    c0022cc4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022c7f:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022c86:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022c8a:	75 38                	jne    c0022cc4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022c8c:	83 ec 0c             	sub    esp,0xc
c0022c8f:	68 1e c8 02 c0       	push   0xc002c81e
c0022c94:	e8 df 00 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0022c99:	8b 15 08 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e208
c0022c9f:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022ca5:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022cad:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022cb1:	52                   	push   edx
c0022cb2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022cb6:	53                   	push   ebx
c0022cb7:	68 43 c8 02 c0       	push   0xc002c843
c0022cbc:	e8 b7 00 ff ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0022cc1:	83 c4 20             	add    esp,0x20
c0022cc4:	46                   	inc    esi
c0022cc5:	eb 96                	jmp    c0022c5d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022cc7:	31 d2                	xor    edx,edx
c0022cc9:	83 ec 0c             	sub    esp,0xc
c0022ccc:	55                   	push   ebp
c0022ccd:	53                   	push   ebx
c0022cce:	57                   	push   edi
c0022ccf:	52                   	push   edx
c0022cd0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022cd4:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022cdb:	e8 7c fc ff ff       	call   c002295c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ce0:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022ce4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022ce8:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022cec:	42                   	inc    edx
c0022ced:	83 c4 20             	add    esp,0x20
c0022cf0:	83 fa 06             	cmp    edx,0x6
c0022cf3:	75 d4                	jne    c0022cc9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022cf5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022cf9:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022cfd:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022d01:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022d05:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022d09:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022d0d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022d12:	86 e0                	xchg   al,ah
c0022d14:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022d19:	55                   	push   ebp
c0022d1a:	53                   	push   ebx
c0022d1b:	57                   	push   edi
c0022d1c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022d20:	e8 ab fb ff ff       	call   c00228d0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022d25:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022d29:	55                   	push   ebp
c0022d2a:	53                   	push   ebx
c0022d2b:	57                   	push   edi
c0022d2c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022d33:	e8 0e fb ff ff       	call   c0022846 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022d38:	83 ec 0c             	sub    esp,0xc
c0022d3b:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022d40:	b9 09 00 00 00       	mov    ecx,0x9
c0022d45:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022d49:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022d4d:	fc                   	cld    
c0022d4e:	89 e7                	mov    edi,esp
c0022d50:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d52:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022d59:	e8 ee fc ff ff       	call   c0022a4c <PCI::foundDevice(PCIDeviceInfo)>
c0022d5e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022d64:	5b                   	pop    ebx
c0022d65:	5e                   	pop    esi
c0022d66:	5f                   	pop    edi
c0022d67:	5d                   	pop    ebp
c0022d68:	c3                   	ret    
c0022d69:	90                   	nop

c0022d6a <PCI::checkDevice(unsigned char, unsigned char)>:
c0022d6a:	55                   	push   ebp
c0022d6b:	57                   	push   edi
c0022d6c:	56                   	push   esi
c0022d6d:	53                   	push   ebx
c0022d6e:	83 ec 0c             	sub    esp,0xc
c0022d71:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022d75:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022d7a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022d7f:	6a 00                	push   0x0
c0022d81:	56                   	push   esi
c0022d82:	57                   	push   edi
c0022d83:	55                   	push   ebp
c0022d84:	e8 bd fa ff ff       	call   c0022846 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022d89:	6a 00                	push   0x0
c0022d8b:	56                   	push   esi
c0022d8c:	57                   	push   edi
c0022d8d:	55                   	push   ebp
c0022d8e:	e8 2b fe ff ff       	call   c0022bbe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022d93:	83 c4 20             	add    esp,0x20
c0022d96:	6a 00                	push   0x0
c0022d98:	56                   	push   esi
c0022d99:	57                   	push   edi
c0022d9a:	55                   	push   ebp
c0022d9b:	e8 c8 fa ff ff       	call   c0022868 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022da0:	83 c4 10             	add    esp,0x10
c0022da3:	84 c0                	test   al,al
c0022da5:	79 27                	jns    c0022dce <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022da7:	bb 01 00 00 00       	mov    ebx,0x1
c0022dac:	53                   	push   ebx
c0022dad:	56                   	push   esi
c0022dae:	57                   	push   edi
c0022daf:	55                   	push   ebp
c0022db0:	e8 91 fa ff ff       	call   c0022846 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022db5:	83 c4 10             	add    esp,0x10
c0022db8:	66 40                	inc    ax
c0022dba:	74 0c                	je     c0022dc8 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022dbc:	53                   	push   ebx
c0022dbd:	56                   	push   esi
c0022dbe:	57                   	push   edi
c0022dbf:	55                   	push   ebp
c0022dc0:	e8 f9 fd ff ff       	call   c0022bbe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022dc5:	83 c4 10             	add    esp,0x10
c0022dc8:	43                   	inc    ebx
c0022dc9:	83 fb 08             	cmp    ebx,0x8
c0022dcc:	75 de                	jne    c0022dac <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022dce:	83 c4 0c             	add    esp,0xc
c0022dd1:	5b                   	pop    ebx
c0022dd2:	5e                   	pop    esi
c0022dd3:	5f                   	pop    edi
c0022dd4:	5d                   	pop    ebp
c0022dd5:	c3                   	ret    

c0022dd6 <PCI::detect()>:
c0022dd6:	56                   	push   esi
c0022dd7:	53                   	push   ebx
c0022dd8:	53                   	push   ebx
c0022dd9:	31 db                	xor    ebx,ebx
c0022ddb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022ddf:	6a 00                	push   0x0
c0022de1:	6a 00                	push   0x0
c0022de3:	6a 00                	push   0x0
c0022de5:	56                   	push   esi
c0022de6:	e8 7d fa ff ff       	call   c0022868 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022deb:	83 c4 10             	add    esp,0x10
c0022dee:	a8 80                	test   al,0x80
c0022df0:	75 21                	jne    c0022e13 <PCI::detect()+0x3d>
c0022df2:	51                   	push   ecx
c0022df3:	51                   	push   ecx
c0022df4:	6a 00                	push   0x0
c0022df6:	56                   	push   esi
c0022df7:	e8 2c fc ff ff       	call   c0022a28 <PCI::checkBus(unsigned char)>
c0022dfc:	83 c4 10             	add    esp,0x10
c0022dff:	eb 24                	jmp    c0022e25 <PCI::detect()+0x4f>
c0022e01:	52                   	push   edx
c0022e02:	52                   	push   edx
c0022e03:	53                   	push   ebx
c0022e04:	43                   	inc    ebx
c0022e05:	56                   	push   esi
c0022e06:	e8 1d fc ff ff       	call   c0022a28 <PCI::checkBus(unsigned char)>
c0022e0b:	83 c4 10             	add    esp,0x10
c0022e0e:	83 fb 08             	cmp    ebx,0x8
c0022e11:	74 12                	je     c0022e25 <PCI::detect()+0x4f>
c0022e13:	53                   	push   ebx
c0022e14:	6a 00                	push   0x0
c0022e16:	6a 00                	push   0x0
c0022e18:	56                   	push   esi
c0022e19:	e8 28 fa ff ff       	call   c0022846 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e1e:	83 c4 10             	add    esp,0x10
c0022e21:	66 40                	inc    ax
c0022e23:	74 dc                	je     c0022e01 <PCI::detect()+0x2b>
c0022e25:	58                   	pop    eax
c0022e26:	5b                   	pop    ebx
c0022e27:	5e                   	pop    esi
c0022e28:	c3                   	ret    
c0022e29:	90                   	nop

c0022e2a <IDE::close(int, int, void*)>:
c0022e2a:	83 c8 ff             	or     eax,0xffffffff
c0022e2d:	c3                   	ret    

c0022e2e <IDE::IDE()>:
c0022e2e:	83 ec 0c             	sub    esp,0xc
c0022e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e35:	83 ec 08             	sub    esp,0x8
c0022e38:	68 8c c8 02 c0       	push   0xc002c88c
c0022e3d:	50                   	push   eax
c0022e3e:	e8 e7 16 ff ff       	call   c001452a <HardDiskController::HardDiskController(char const*)>
c0022e43:	83 c4 10             	add    esp,0x10
c0022e46:	ba cc ca 02 c0       	mov    edx,0xc002cacc
c0022e4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e4f:	89 10                	mov    DWORD PTR [eax],edx
c0022e51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e55:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022e5c:	90                   	nop
c0022e5d:	83 c4 0c             	add    esp,0xc
c0022e60:	c3                   	ret    
c0022e61:	90                   	nop

c0022e62 <IDE::prepareInterrupt(unsigned char)>:
c0022e62:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022e67:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022e6b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022e73:	c3                   	ret    

c0022e74 <selectDrive(unsigned char, unsigned char)>:
c0022e74:	c3                   	ret    
c0022e75:	90                   	nop

c0022e76 <IDE::getBase(unsigned char)>:
c0022e76:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022e7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e7f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022e87:	c3                   	ret    

c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022e88:	55                   	push   ebp
c0022e89:	57                   	push   edi
c0022e8a:	56                   	push   esi
c0022e8b:	53                   	push   ebx
c0022e8c:	83 ec 1c             	sub    esp,0x1c
c0022e8f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022e93:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022e97:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022e9a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022e9e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022ea2:	80 f9 03             	cmp    cl,0x3
c0022ea5:	77 51                	ja     c0022ef8 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022ea7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022eab:	0f b6 f2             	movzx  esi,dl
c0022eae:	0f b6 db             	movzx  ebx,bl
c0022eb1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022eb4:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022eb8:	83 ca 80             	or     edx,0xffffff80
c0022ebb:	0f b6 d2             	movzx  edx,dl
c0022ebe:	52                   	push   edx
c0022ebf:	6a 0c                	push   0xc
c0022ec1:	56                   	push   esi
c0022ec2:	57                   	push   edi
c0022ec3:	e8 c0 ff ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022ec8:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022ecd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022ed1:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022ed5:	ee                   	out    dx,al
c0022ed6:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022edb:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022edf:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022ee3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022ee7:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022eef:	83 c4 2c             	add    esp,0x2c
c0022ef2:	5b                   	pop    ebx
c0022ef3:	5e                   	pop    esi
c0022ef4:	5f                   	pop    edi
c0022ef5:	5d                   	pop    ebp
c0022ef6:	eb 90                	jmp    c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022ef8:	80 fb 07             	cmp    bl,0x7
c0022efb:	77 12                	ja     c0022f0f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022efd:	0f b6 d2             	movzx  edx,dl
c0022f00:	0f b6 db             	movzx  ebx,bl
c0022f03:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022f0b:	89 da                	mov    edx,ebx
c0022f0d:	eb 2f                	jmp    c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022f0f:	80 fb 0d             	cmp    bl,0xd
c0022f12:	77 13                	ja     c0022f27 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022f14:	0f b6 d2             	movzx  edx,dl
c0022f17:	0f b6 db             	movzx  ebx,bl
c0022f1a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022f21:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022f25:	eb 17                	jmp    c0022f3e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022f27:	80 fb 15             	cmp    bl,0x15
c0022f2a:	77 13                	ja     c0022f3f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022f2c:	0f b6 d2             	movzx  edx,dl
c0022f2f:	0f b6 db             	movzx  ebx,bl
c0022f32:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022f3a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022f3e:	ee                   	out    dx,al
c0022f3f:	83 c4 1c             	add    esp,0x1c
c0022f42:	5b                   	pop    ebx
c0022f43:	5e                   	pop    esi
c0022f44:	5f                   	pop    edi
c0022f45:	5d                   	pop    ebp
c0022f46:	c3                   	ret    
c0022f47:	90                   	nop

c0022f48 <IDE::read(unsigned char, unsigned char)>:
c0022f48:	55                   	push   ebp
c0022f49:	57                   	push   edi
c0022f4a:	56                   	push   esi
c0022f4b:	53                   	push   ebx
c0022f4c:	83 ec 1c             	sub    esp,0x1c
c0022f4f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022f53:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022f57:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022f5a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022f5e:	3c 03                	cmp    al,0x3
c0022f60:	77 43                	ja     c0022fa5 <IDE::read(unsigned char, unsigned char)+0x5d>
c0022f62:	0f b6 f2             	movzx  esi,dl
c0022f65:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022f68:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022f6c:	83 c8 80             	or     eax,0xffffff80
c0022f6f:	0f b6 c0             	movzx  eax,al
c0022f72:	50                   	push   eax
c0022f73:	6a 0c                	push   0xc
c0022f75:	56                   	push   esi
c0022f76:	57                   	push   edi
c0022f77:	e8 0c ff ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f7c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022f81:	0f b6 c3             	movzx  eax,bl
c0022f84:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022f88:	ec                   	in     al,dx
c0022f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022f8d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022f92:	52                   	push   edx
c0022f93:	6a 0c                	push   0xc
c0022f95:	56                   	push   esi
c0022f96:	57                   	push   edi
c0022f97:	e8 ec fe ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f9c:	83 c4 20             	add    esp,0x20
c0022f9f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022fa3:	eb 49                	jmp    c0022fee <IDE::read(unsigned char, unsigned char)+0xa6>
c0022fa5:	80 fb 07             	cmp    bl,0x7
c0022fa8:	77 12                	ja     c0022fbc <IDE::read(unsigned char, unsigned char)+0x74>
c0022faa:	0f b6 d2             	movzx  edx,dl
c0022fad:	0f b6 c3             	movzx  eax,bl
c0022fb0:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022fb8:	89 c2                	mov    edx,eax
c0022fba:	eb 31                	jmp    c0022fed <IDE::read(unsigned char, unsigned char)+0xa5>
c0022fbc:	80 fb 0d             	cmp    bl,0xd
c0022fbf:	77 13                	ja     c0022fd4 <IDE::read(unsigned char, unsigned char)+0x8c>
c0022fc1:	0f b6 d2             	movzx  edx,dl
c0022fc4:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022fcb:	0f b6 d3             	movzx  edx,bl
c0022fce:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022fd2:	eb 19                	jmp    c0022fed <IDE::read(unsigned char, unsigned char)+0xa5>
c0022fd4:	31 c0                	xor    eax,eax
c0022fd6:	80 fb 15             	cmp    bl,0x15
c0022fd9:	77 13                	ja     c0022fee <IDE::read(unsigned char, unsigned char)+0xa6>
c0022fdb:	0f b6 d2             	movzx  edx,dl
c0022fde:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0022fe6:	0f b6 d3             	movzx  edx,bl
c0022fe9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0022fed:	ec                   	in     al,dx
c0022fee:	83 c4 1c             	add    esp,0x1c
c0022ff1:	5b                   	pop    ebx
c0022ff2:	5e                   	pop    esi
c0022ff3:	5f                   	pop    edi
c0022ff4:	5d                   	pop    ebp
c0022ff5:	c3                   	ret    

c0022ff6 <IDE::waitInterrupt(unsigned char)>:
c0022ff6:	55                   	push   ebp
c0022ff7:	57                   	push   edi
c0022ff8:	56                   	push   esi
c0022ff9:	53                   	push   ebx
c0022ffa:	31 db                	xor    ebx,ebx
c0022ffc:	83 ec 0c             	sub    esp,0xc
c0022fff:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023003:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023008:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023010:	89 e8                	mov    eax,ebp
c0023012:	84 c0                	test   al,al
c0023014:	75 34                	jne    c002304a <IDE::waitInterrupt(unsigned char)+0x54>
c0023016:	52                   	push   edx
c0023017:	6a 0c                	push   0xc
c0023019:	56                   	push   esi
c002301a:	57                   	push   edi
c002301b:	e8 28 ff ff ff       	call   c0022f48 <IDE::read(unsigned char, unsigned char)>
c0023020:	83 c4 10             	add    esp,0x10
c0023023:	a8 01                	test   al,0x1
c0023025:	75 2b                	jne    c0023052 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023027:	f6 c3 04             	test   bl,0x4
c002302a:	75 16                	jne    c0023042 <IDE::waitInterrupt(unsigned char)+0x4c>
c002302c:	83 fb 32             	cmp    ebx,0x32
c002302f:	7e 11                	jle    c0023042 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023031:	50                   	push   eax
c0023032:	50                   	push   eax
c0023033:	6a 00                	push   0x0
c0023035:	68 80 96 98 00       	push   0x989680
c002303a:	e8 5d b1 ff ff       	call   c001e19c <nanoSleep(unsigned long long)>
c002303f:	83 c4 10             	add    esp,0x10
c0023042:	83 fb 3c             	cmp    ebx,0x3c
c0023045:	74 0b                	je     c0023052 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023047:	43                   	inc    ebx
c0023048:	eb be                	jmp    c0023008 <IDE::waitInterrupt(unsigned char)+0x12>
c002304a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023052:	83 c4 0c             	add    esp,0xc
c0023055:	89 e8                	mov    eax,ebp
c0023057:	5b                   	pop    ebx
c0023058:	5e                   	pop    esi
c0023059:	5f                   	pop    edi
c002305a:	5d                   	pop    ebp
c002305b:	c3                   	ret    

c002305c <ideChannel0IRQHandler(regs*, void*)>:
c002305c:	83 ec 10             	sub    esp,0x10
c002305f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023063:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002306a:	6a 07                	push   0x7
c002306c:	6a 00                	push   0x0
c002306e:	50                   	push   eax
c002306f:	e8 d4 fe ff ff       	call   c0022f48 <IDE::read(unsigned char, unsigned char)>
c0023074:	83 c4 1c             	add    esp,0x1c
c0023077:	c3                   	ret    

c0023078 <ideChannel1IRQHandler(regs*, void*)>:
c0023078:	83 ec 10             	sub    esp,0x10
c002307b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002307f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023086:	6a 07                	push   0x7
c0023088:	6a 01                	push   0x1
c002308a:	50                   	push   eax
c002308b:	e8 b8 fe ff ff       	call   c0022f48 <IDE::read(unsigned char, unsigned char)>
c0023090:	83 c4 1c             	add    esp,0x1c
c0023093:	c3                   	ret    

c0023094 <IDE::enableIRQs(unsigned char, bool)>:
c0023094:	57                   	push   edi
c0023095:	56                   	push   esi
c0023096:	be 04 00 00 00       	mov    esi,0x4
c002309b:	53                   	push   ebx
c002309c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00230a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00230a5:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00230aa:	0f 94 c0             	sete   al
c00230ad:	d1 e0                	shl    eax,1
c00230af:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00230b6:	0f b6 c0             	movzx  eax,al
c00230b9:	50                   	push   eax
c00230ba:	6a 0c                	push   0xc
c00230bc:	57                   	push   edi
c00230bd:	53                   	push   ebx
c00230be:	e8 c5 fd ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230c3:	83 c4 10             	add    esp,0x10
c00230c6:	50                   	push   eax
c00230c7:	6a 0c                	push   0xc
c00230c9:	57                   	push   edi
c00230ca:	53                   	push   ebx
c00230cb:	e8 78 fe ff ff       	call   c0022f48 <IDE::read(unsigned char, unsigned char)>
c00230d0:	83 c4 10             	add    esp,0x10
c00230d3:	4e                   	dec    esi
c00230d4:	75 f0                	jne    c00230c6 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00230d6:	5b                   	pop    ebx
c00230d7:	5e                   	pop    esi
c00230d8:	5f                   	pop    edi
c00230d9:	c3                   	ret    

c00230da <IDE::open(int, int, void*)>:
c00230da:	55                   	push   ebp
c00230db:	57                   	push   edi
c00230dc:	56                   	push   esi
c00230dd:	53                   	push   ebx
c00230de:	83 ec 1c             	sub    esp,0x1c
c00230e1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00230e5:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00230ee:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00230f7:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00230fe:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023105:	0f 85 b0 02 00 00    	jne    c00233bb <IDE::open(int, int, void*)+0x2e1>
c002310b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023111:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023115:	83 e0 7f             	and    eax,0x7f
c0023118:	3c 05                	cmp    al,0x5
c002311a:	74 04                	je     c0023120 <IDE::open(int, int, void*)+0x46>
c002311c:	3c 0f                	cmp    al,0xf
c002311e:	75 32                	jne    c0023152 <IDE::open(int, int, void*)+0x78>
c0023120:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023126:	83 e0 fc             	and    eax,0xfffffffc
c0023129:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023130:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023136:	83 e0 fc             	and    eax,0xfffffffc
c0023139:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023140:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023146:	83 e0 fc             	and    eax,0xfffffffc
c0023149:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023150:	eb 14                	jmp    c0023166 <IDE::open(int, int, void*)+0x8c>
c0023152:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002315c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023166:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002316d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023174:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023178:	89 c6                	mov    esi,eax
c002317a:	bf f8 0c 00 00       	mov    edi,0xcf8
c002317f:	c1 e6 10             	shl    esi,0x10
c0023182:	89 e8                	mov    eax,ebp
c0023184:	89 fa                	mov    edx,edi
c0023186:	c1 e0 0b             	shl    eax,0xb
c0023189:	09 f0                	or     eax,esi
c002318b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023192:	c1 e6 08             	shl    esi,0x8
c0023195:	09 c6                	or     esi,eax
c0023197:	89 f0                	mov    eax,esi
c0023199:	0d 08 00 00 80       	or     eax,0x80000008
c002319e:	ef                   	out    dx,eax
c002319f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00231a4:	89 ca                	mov    edx,ecx
c00231a6:	ed                   	in     eax,dx
c00231a7:	c1 e8 10             	shr    eax,0x10
c00231aa:	3d ff ff 00 00       	cmp    eax,0xffff
c00231af:	0f 84 f5 00 00 00    	je     c00232aa <IDE::open(int, int, void*)+0x1d0>
c00231b5:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00231bb:	89 fa                	mov    edx,edi
c00231bd:	89 f0                	mov    eax,esi
c00231bf:	ef                   	out    dx,eax
c00231c0:	b0 fe                	mov    al,0xfe
c00231c2:	89 ca                	mov    edx,ecx
c00231c4:	ee                   	out    dx,al
c00231c5:	89 f0                	mov    eax,esi
c00231c7:	89 fa                	mov    edx,edi
c00231c9:	ef                   	out    dx,eax
c00231ca:	89 ca                	mov    edx,ecx
c00231cc:	ed                   	in     eax,dx
c00231cd:	3c fe                	cmp    al,0xfe
c00231cf:	0f 85 a9 00 00 00    	jne    c002327e <IDE::open(int, int, void*)+0x1a4>
c00231d5:	8b 15 08 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e208
c00231db:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00231e2:	74 33                	je     c0023217 <IDE::open(int, int, void*)+0x13d>
c00231e4:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00231ea:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00231ee:	40                   	inc    eax
c00231ef:	83 ec 0c             	sub    esp,0xc
c00231f2:	0f b6 c0             	movzx  eax,al
c00231f5:	50                   	push   eax
c00231f6:	55                   	push   ebp
c00231f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00231fb:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023201:	51                   	push   ecx
c0023202:	e8 a1 4e ff ff       	call   c00180a8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023207:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002320c:	83 c4 1c             	add    esp,0x1c
c002320f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023215:	eb 0a                	jmp    c0023221 <IDE::open(int, int, void*)+0x147>
c0023217:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023221:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023228:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002322f:	c1 e1 10             	shl    ecx,0x10
c0023232:	c1 e0 08             	shl    eax,0x8
c0023235:	bf f8 0c 00 00       	mov    edi,0xcf8
c002323a:	09 c1                	or     ecx,eax
c002323c:	89 fa                	mov    edx,edi
c002323e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023245:	c1 e0 0b             	shl    eax,0xb
c0023248:	09 c1                	or     ecx,eax
c002324a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023250:	89 c8                	mov    eax,ecx
c0023252:	ef                   	out    dx,eax
c0023253:	be fc 0c 00 00       	mov    esi,0xcfc
c0023258:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002325e:	89 f2                	mov    edx,esi
c0023260:	ee                   	out    dx,al
c0023261:	89 c8                	mov    eax,ecx
c0023263:	89 fa                	mov    edx,edi
c0023265:	ef                   	out    dx,eax
c0023266:	89 f2                	mov    edx,esi
c0023268:	ed                   	in     eax,dx
c0023269:	0f b6 c0             	movzx  eax,al
c002326c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023272:	74 46                	je     c00232ba <IDE::open(int, int, void*)+0x1e0>
c0023274:	83 ec 0c             	sub    esp,0xc
c0023277:	68 a4 c8 02 c0       	push   0xc002c8a4
c002327c:	eb 34                	jmp    c00232b2 <IDE::open(int, int, void*)+0x1d8>
c002327e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023287:	75 17                	jne    c00232a0 <IDE::open(int, int, void*)+0x1c6>
c0023289:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002328e:	74 07                	je     c0023297 <IDE::open(int, int, void*)+0x1bd>
c0023290:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023295:	75 09                	jne    c00232a0 <IDE::open(int, int, void*)+0x1c6>
c0023297:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002329e:	eb 1a                	jmp    c00232ba <IDE::open(int, int, void*)+0x1e0>
c00232a0:	83 ec 0c             	sub    esp,0xc
c00232a3:	68 ac c8 02 c0       	push   0xc002c8ac
c00232a8:	eb 08                	jmp    c00232b2 <IDE::open(int, int, void*)+0x1d8>
c00232aa:	83 ec 0c             	sub    esp,0xc
c00232ad:	68 dd c8 02 c0       	push   0xc002c8dd
c00232b2:	e8 9c 71 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c00232b7:	83 c4 10             	add    esp,0x10
c00232ba:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00232c1:	79 1a                	jns    c00232dd <IDE::open(int, int, void*)+0x203>
c00232c3:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00232c9:	83 e0 fc             	and    eax,0xfffffffc
c00232cc:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00232d3:	83 c0 08             	add    eax,0x8
c00232d6:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00232dd:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00232e3:	89 c2                	mov    edx,eax
c00232e5:	83 e2 0f             	and    edx,0xf
c00232e8:	66 83 fa 08          	cmp    dx,0x8
c00232ec:	75 0a                	jne    c00232f8 <IDE::open(int, int, void*)+0x21e>
c00232ee:	83 e8 02             	sub    eax,0x2
c00232f1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00232f8:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00232fe:	89 c2                	mov    edx,eax
c0023300:	83 e2 0f             	and    edx,0xf
c0023303:	66 83 fa 08          	cmp    dx,0x8
c0023307:	75 0a                	jne    c0023313 <IDE::open(int, int, void*)+0x239>
c0023309:	83 e8 02             	sub    eax,0x2
c002330c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023313:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002331a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023321:	89 d0                	mov    eax,edx
c0023323:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023326:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002332a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002332e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023331:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023336:	0f b6 c9             	movzx  ecx,cl
c0023339:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023340:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023343:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023347:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002334b:	8d 50 02             	lea    edx,[eax+0x2]
c002334e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023353:	0f b6 d2             	movzx  edx,dl
c0023356:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002335c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002335f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023363:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023367:	8d 48 03             	lea    ecx,[eax+0x3]
c002336a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002336f:	0f b6 c9             	movzx  ecx,cl
c0023372:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023378:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002337b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002337f:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023383:	8d 50 04             	lea    edx,[eax+0x4]
c0023386:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002338c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023391:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023398:	66 85 f6             	test   si,si
c002339b:	74 3e                	je     c00233db <IDE::open(int, int, void*)+0x301>
c002339d:	0f b6 d2             	movzx  edx,dl
c00233a0:	83 c0 05             	add    eax,0x5
c00233a3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00233a6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00233aa:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00233ae:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00233b4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00233b9:	eb 20                	jmp    c00233db <IDE::open(int, int, void*)+0x301>
c00233bb:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00233c5:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00233cf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00233d6:	e9 02 ff ff ff       	jmp    c00232dd <IDE::open(int, int, void*)+0x203>
c00233db:	52                   	push   edx
c00233dc:	52                   	push   edx
c00233dd:	6a 00                	push   0x0
c00233df:	53                   	push   ebx
c00233e0:	e8 7d fa ff ff       	call   c0022e62 <IDE::prepareInterrupt(unsigned char)>
c00233e5:	59                   	pop    ecx
c00233e6:	5e                   	pop    esi
c00233e7:	6a 01                	push   0x1
c00233e9:	53                   	push   ebx
c00233ea:	e8 73 fa ff ff       	call   c0022e62 <IDE::prepareInterrupt(unsigned char)>
c00233ef:	83 c4 0c             	add    esp,0xc
c00233f2:	6a 00                	push   0x0
c00233f4:	6a 00                	push   0x0
c00233f6:	53                   	push   ebx
c00233f7:	e8 98 fc ff ff       	call   c0023094 <IDE::enableIRQs(unsigned char, bool)>
c00233fc:	83 c4 0c             	add    esp,0xc
c00233ff:	6a 00                	push   0x0
c0023401:	6a 01                	push   0x1
c0023403:	53                   	push   ebx
c0023404:	e8 8b fc ff ff       	call   c0023094 <IDE::enableIRQs(unsigned char, bool)>
c0023409:	83 c4 10             	add    esp,0x10
c002340c:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023413:	74 40                	je     c0023455 <IDE::open(int, int, void*)+0x37b>
c0023415:	83 ec 0c             	sub    esp,0xc
c0023418:	68 07 c9 02 c0       	push   0xc002c907
c002341d:	e8 56 f9 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0023422:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023425:	6a 01                	push   0x1
c0023427:	68 5c 30 02 c0       	push   0xc002305c
c002342c:	6a 0e                	push   0xe
c002342e:	53                   	push   ebx
c002342f:	e8 ee 0c ff ff       	call   c0014122 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023434:	83 c4 14             	add    esp,0x14
c0023437:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002343d:	53                   	push   ebx
c002343e:	6a 01                	push   0x1
c0023440:	68 78 30 02 c0       	push   0xc0023078
c0023445:	6a 0f                	push   0xf
c0023447:	53                   	push   ebx
c0023448:	e8 d5 0c ff ff       	call   c0014122 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002344d:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023453:	eb 4a                	jmp    c002349f <IDE::open(int, int, void*)+0x3c5>
c0023455:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002345f:	50                   	push   eax
c0023460:	6a 0f                	push   0xf
c0023462:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023468:	68 23 c9 02 c0       	push   0xc002c923
c002346d:	e8 06 f9 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0023472:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023475:	6a 00                	push   0x0
c0023477:	68 5c 30 02 c0       	push   0xc002305c
c002347c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023482:	53                   	push   ebx
c0023483:	e8 9a 0c ff ff       	call   c0014122 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023488:	83 c4 14             	add    esp,0x14
c002348b:	53                   	push   ebx
c002348c:	6a 00                	push   0x0
c002348e:	68 78 30 02 c0       	push   0xc0023078
c0023493:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023499:	53                   	push   ebx
c002349a:	e8 83 0c ff ff       	call   c0014122 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002349f:	8b 03                	mov    eax,DWORD PTR [ebx]
c00234a1:	83 c4 20             	add    esp,0x20
c00234a4:	83 ec 0c             	sub    esp,0xc
c00234a7:	53                   	push   ebx
c00234a8:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00234ab:	83 c4 0c             	add    esp,0xc
c00234ae:	6a 07                	push   0x7
c00234b0:	6a 00                	push   0x0
c00234b2:	53                   	push   ebx
c00234b3:	e8 90 fa ff ff       	call   c0022f48 <IDE::read(unsigned char, unsigned char)>
c00234b8:	83 c4 0c             	add    esp,0xc
c00234bb:	6a 07                	push   0x7
c00234bd:	6a 01                	push   0x1
c00234bf:	53                   	push   ebx
c00234c0:	e8 83 fa ff ff       	call   c0022f48 <IDE::read(unsigned char, unsigned char)>
c00234c5:	83 c4 0c             	add    esp,0xc
c00234c8:	6a 01                	push   0x1
c00234ca:	6a 00                	push   0x0
c00234cc:	53                   	push   ebx
c00234cd:	e8 c2 fb ff ff       	call   c0023094 <IDE::enableIRQs(unsigned char, bool)>
c00234d2:	83 c4 0c             	add    esp,0xc
c00234d5:	6a 01                	push   0x1
c00234d7:	6a 01                	push   0x1
c00234d9:	53                   	push   ebx
c00234da:	e8 b5 fb ff ff       	call   c0023094 <IDE::enableIRQs(unsigned char, bool)>
c00234df:	83 c4 2c             	add    esp,0x2c
c00234e2:	31 c0                	xor    eax,eax
c00234e4:	5b                   	pop    ebx
c00234e5:	5e                   	pop    esi
c00234e6:	5f                   	pop    edi
c00234e7:	5d                   	pop    ebp
c00234e8:	c3                   	ret    
c00234e9:	90                   	nop

c00234ea <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00234ea:	55                   	push   ebp
c00234eb:	57                   	push   edi
c00234ec:	56                   	push   esi
c00234ed:	53                   	push   ebx
c00234ee:	83 ec 1c             	sub    esp,0x1c
c00234f1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00234f5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00234f9:	8d 50 f8             	lea    edx,[eax-0x8]
c00234fc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023500:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023504:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023508:	80 fa 03             	cmp    dl,0x3
c002350b:	77 5d                	ja     c002356a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002350d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023511:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023515:	0f b6 db             	movzx  ebx,bl
c0023518:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002351b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002351f:	83 ca 80             	or     edx,0xffffff80
c0023522:	0f b6 d2             	movzx  edx,dl
c0023525:	52                   	push   edx
c0023526:	6a 0c                	push   0xc
c0023528:	53                   	push   ebx
c0023529:	56                   	push   esi
c002352a:	e8 59 f9 ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002352f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023534:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023538:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002353c:	0f b6 c0             	movzx  eax,al
c002353f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023543:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023545:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002354a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002354e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023552:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023556:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002355e:	83 c4 2c             	add    esp,0x2c
c0023561:	5b                   	pop    ebx
c0023562:	5e                   	pop    esi
c0023563:	5f                   	pop    edi
c0023564:	5d                   	pop    ebp
c0023565:	e9 1e f9 ff ff       	jmp    c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002356a:	3c 07                	cmp    al,0x7
c002356c:	77 10                	ja     c002357e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002356e:	0f b6 db             	movzx  ebx,bl
c0023571:	0f b6 d0             	movzx  edx,al
c0023574:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002357c:	eb 2d                	jmp    c00235ab <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002357e:	3c 0d                	cmp    al,0xd
c0023580:	77 13                	ja     c0023595 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023582:	0f b6 db             	movzx  ebx,bl
c0023585:	0f b6 c0             	movzx  eax,al
c0023588:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002358f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023593:	eb 16                	jmp    c00235ab <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023595:	3c 15                	cmp    al,0x15
c0023597:	77 14                	ja     c00235ad <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023599:	0f b6 db             	movzx  ebx,bl
c002359c:	0f b6 c0             	movzx  eax,al
c002359f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00235a7:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00235ab:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00235ad:	83 c4 1c             	add    esp,0x1c
c00235b0:	5b                   	pop    ebx
c00235b1:	5e                   	pop    esi
c00235b2:	5f                   	pop    edi
c00235b3:	5d                   	pop    ebp
c00235b4:	c3                   	ret    
c00235b5:	90                   	nop

c00235b6 <IDE::detect()>:
c00235b6:	55                   	push   ebp
c00235b7:	57                   	push   edi
c00235b8:	56                   	push   esi
c00235b9:	53                   	push   ebx
c00235ba:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00235c0:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00235c7:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00235ce:	0f 85 be 02 00 00    	jne    c0023892 <IDE::detect()+0x2dc>
c00235d4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00235db:	31 f6                	xor    esi,esi
c00235dd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00235e5:	31 ed                	xor    ebp,ebp
c00235e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00235eb:	c1 e0 06             	shl    eax,0x6
c00235ee:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00235f6:	89 e8                	mov    eax,ebp
c00235f8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00235fc:	c1 e0 04             	shl    eax,0x4
c00235ff:	83 c8 a0             	or     eax,0xffffffa0
c0023602:	0f b6 c0             	movzx  eax,al
c0023605:	50                   	push   eax
c0023606:	6a 06                	push   0x6
c0023608:	56                   	push   esi
c0023609:	53                   	push   ebx
c002360a:	e8 79 f8 ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002360f:	83 c4 0c             	add    esp,0xc
c0023612:	6a 0c                	push   0xc
c0023614:	56                   	push   esi
c0023615:	53                   	push   ebx
c0023616:	e8 2d f9 ff ff       	call   c0022f48 <IDE::read(unsigned char, unsigned char)>
c002361b:	83 c4 0c             	add    esp,0xc
c002361e:	6a 0c                	push   0xc
c0023620:	56                   	push   esi
c0023621:	53                   	push   ebx
c0023622:	e8 21 f9 ff ff       	call   c0022f48 <IDE::read(unsigned char, unsigned char)>
c0023627:	83 c4 0c             	add    esp,0xc
c002362a:	6a 0c                	push   0xc
c002362c:	56                   	push   esi
c002362d:	53                   	push   ebx
c002362e:	e8 15 f9 ff ff       	call   c0022f48 <IDE::read(unsigned char, unsigned char)>
c0023633:	83 c4 0c             	add    esp,0xc
c0023636:	6a 0c                	push   0xc
c0023638:	56                   	push   esi
c0023639:	53                   	push   ebx
c002363a:	e8 09 f9 ff ff       	call   c0022f48 <IDE::read(unsigned char, unsigned char)>
c002363f:	68 ec 00 00 00       	push   0xec
c0023644:	6a 07                	push   0x7
c0023646:	56                   	push   esi
c0023647:	53                   	push   ebx
c0023648:	e8 3b f8 ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002364d:	83 c4 1c             	add    esp,0x1c
c0023650:	6a 0c                	push   0xc
c0023652:	56                   	push   esi
c0023653:	53                   	push   ebx
c0023654:	e8 ef f8 ff ff       	call   c0022f48 <IDE::read(unsigned char, unsigned char)>
c0023659:	83 c4 0c             	add    esp,0xc
c002365c:	6a 0c                	push   0xc
c002365e:	56                   	push   esi
c002365f:	53                   	push   ebx
c0023660:	e8 e3 f8 ff ff       	call   c0022f48 <IDE::read(unsigned char, unsigned char)>
c0023665:	83 c4 0c             	add    esp,0xc
c0023668:	6a 0c                	push   0xc
c002366a:	56                   	push   esi
c002366b:	53                   	push   ebx
c002366c:	e8 d7 f8 ff ff       	call   c0022f48 <IDE::read(unsigned char, unsigned char)>
c0023671:	83 c4 0c             	add    esp,0xc
c0023674:	6a 0c                	push   0xc
c0023676:	56                   	push   esi
c0023677:	53                   	push   ebx
c0023678:	e8 cb f8 ff ff       	call   c0022f48 <IDE::read(unsigned char, unsigned char)>
c002367d:	83 c4 0c             	add    esp,0xc
c0023680:	6a 0c                	push   0xc
c0023682:	56                   	push   esi
c0023683:	53                   	push   ebx
c0023684:	e8 bf f8 ff ff       	call   c0022f48 <IDE::read(unsigned char, unsigned char)>
c0023689:	83 c4 10             	add    esp,0x10
c002368c:	84 c0                	test   al,al
c002368e:	0f 84 8b 01 00 00    	je     c002381f <IDE::detect()+0x269>
c0023694:	31 ff                	xor    edi,edi
c0023696:	50                   	push   eax
c0023697:	6a 0c                	push   0xc
c0023699:	56                   	push   esi
c002369a:	53                   	push   ebx
c002369b:	e8 a8 f8 ff ff       	call   c0022f48 <IDE::read(unsigned char, unsigned char)>
c00236a0:	83 c4 10             	add    esp,0x10
c00236a3:	a8 01                	test   al,0x1
c00236a5:	0f 85 8e 01 00 00    	jne    c0023839 <IDE::detect()+0x283>
c00236ab:	84 c0                	test   al,al
c00236ad:	78 04                	js     c00236b3 <IDE::detect()+0xfd>
c00236af:	a8 08                	test   al,0x8
c00236b1:	75 27                	jne    c00236da <IDE::detect()+0x124>
c00236b3:	47                   	inc    edi
c00236b4:	81 ff 17 01 00 00    	cmp    edi,0x117
c00236ba:	7e da                	jle    c0023696 <IDE::detect()+0xe0>
c00236bc:	50                   	push   eax
c00236bd:	50                   	push   eax
c00236be:	6a 00                	push   0x0
c00236c0:	68 40 4b 4c 00       	push   0x4c4b40
c00236c5:	e8 d2 aa ff ff       	call   c001e19c <nanoSleep(unsigned long long)>
c00236ca:	83 c4 10             	add    esp,0x10
c00236cd:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00236d3:	75 c1                	jne    c0023696 <IDE::detect()+0xe0>
c00236d5:	e9 5f 01 00 00       	jmp    c0023839 <IDE::detect()+0x283>
c00236da:	31 c9                	xor    ecx,ecx
c00236dc:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00236e0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00236e4:	83 ec 0c             	sub    esp,0xc
c00236e7:	68 80 00 00 00       	push   0x80
c00236ec:	57                   	push   edi
c00236ed:	6a 00                	push   0x0
c00236ef:	56                   	push   esi
c00236f0:	53                   	push   ebx
c00236f1:	e8 f4 fd ff ff       	call   c00234ea <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00236f6:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00236fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00236ff:	89 d1                	mov    ecx,edx
c0023701:	c1 e0 06             	shl    eax,0x6
c0023704:	01 d8                	add    eax,ebx
c0023706:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002370d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023714:	89 f2                	mov    edx,esi
c0023716:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002371c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023720:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023726:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002372a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023731:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023739:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023740:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023748:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002374e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023755:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002375b:	8d 54 24 58          	lea    edx,[esp+0x58]
c002375f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023763:	83 c4 20             	add    esp,0x20
c0023766:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023769:	83 c0 02             	add    eax,0x2
c002376c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023772:	83 c7 02             	add    edi,0x2
c0023775:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023778:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002377e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023782:	75 e2                	jne    c0023766 <IDE::detect()+0x1b0>
c0023784:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023788:	c1 e0 06             	shl    eax,0x6
c002378b:	01 d8                	add    eax,ebx
c002378d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023793:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002379a:	66 c1 ea 09          	shr    dx,0x9
c002379e:	83 e2 01             	and    edx,0x1
c00237a1:	84 c9                	test   cl,cl
c00237a3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00237a9:	75 2f                	jne    c00237da <IDE::detect()+0x224>
c00237ab:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00237b1:	85 c0                	test   eax,eax
c00237b3:	74 66                	je     c002381b <IDE::detect()+0x265>
c00237b5:	50                   	push   eax
c00237b6:	55                   	push   ebp
c00237b7:	56                   	push   esi
c00237b8:	68 3f c9 02 c0       	push   0xc002c93f
c00237bd:	e8 b6 f5 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00237c2:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00237c9:	e8 75 c0 fe ff       	call   c000f843 <malloc>
c00237ce:	89 c7                	mov    edi,eax
c00237d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00237d3:	e8 78 06 00 00       	call   c0023e50 <ATA::ATA()>
c00237d8:	eb 28                	jmp    c0023802 <IDE::detect()+0x24c>
c00237da:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00237e0:	55                   	push   ebp
c00237e1:	56                   	push   esi
c00237e2:	68 6e c9 02 c0       	push   0xc002c96e
c00237e7:	e8 8c f5 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00237ec:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00237f3:	e8 4b c0 fe ff       	call   c000f843 <malloc>
c00237f8:	89 c7                	mov    edi,eax
c00237fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00237fd:	e8 8e 0c 00 00       	call   c0024490 <ATAPI::ATAPI()>
c0023802:	5a                   	pop    edx
c0023803:	59                   	pop    ecx
c0023804:	57                   	push   edi
c0023805:	53                   	push   ebx
c0023806:	e8 93 09 ff ff       	call   c001419e <Device::addChild(Device*)>
c002380b:	8b 07                	mov    eax,DWORD PTR [edi]
c002380d:	53                   	push   ebx
c002380e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023812:	6a 00                	push   0x0
c0023814:	57                   	push   edi
c0023815:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023818:	83 c4 20             	add    esp,0x20
c002381b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002381f:	4d                   	dec    ebp
c0023820:	74 0a                	je     c002382c <IDE::detect()+0x276>
c0023822:	bd 01 00 00 00       	mov    ebp,0x1
c0023827:	e9 bb fd ff ff       	jmp    c00235e7 <IDE::detect()+0x31>
c002382c:	4e                   	dec    esi
c002382d:	74 63                	je     c0023892 <IDE::detect()+0x2dc>
c002382f:	be 01 00 00 00       	mov    esi,0x1
c0023834:	e9 ac fd ff ff       	jmp    c00235e5 <IDE::detect()+0x2f>
c0023839:	50                   	push   eax
c002383a:	6a 04                	push   0x4
c002383c:	56                   	push   esi
c002383d:	53                   	push   ebx
c002383e:	e8 05 f7 ff ff       	call   c0022f48 <IDE::read(unsigned char, unsigned char)>
c0023843:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023847:	83 c4 0c             	add    esp,0xc
c002384a:	6a 05                	push   0x5
c002384c:	56                   	push   esi
c002384d:	53                   	push   ebx
c002384e:	e8 f5 f6 ff ff       	call   c0022f48 <IDE::read(unsigned char, unsigned char)>
c0023853:	83 c4 10             	add    esp,0x10
c0023856:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002385a:	80 fa 14             	cmp    dl,0x14
c002385d:	75 04                	jne    c0023863 <IDE::detect()+0x2ad>
c002385f:	3c eb                	cmp    al,0xeb
c0023861:	eb 07                	jmp    c002386a <IDE::detect()+0x2b4>
c0023863:	3c 96                	cmp    al,0x96
c0023865:	75 b8                	jne    c002381f <IDE::detect()+0x269>
c0023867:	80 fa 69             	cmp    dl,0x69
c002386a:	75 b3                	jne    c002381f <IDE::detect()+0x269>
c002386c:	68 a1 00 00 00       	push   0xa1
c0023871:	6a 07                	push   0x7
c0023873:	56                   	push   esi
c0023874:	53                   	push   ebx
c0023875:	e8 0e f6 ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002387a:	5f                   	pop    edi
c002387b:	58                   	pop    eax
c002387c:	6a 00                	push   0x0
c002387e:	68 40 42 0f 00       	push   0xf4240
c0023883:	e8 14 a9 ff ff       	call   c001e19c <nanoSleep(unsigned long long)>
c0023888:	83 c4 10             	add    esp,0x10
c002388b:	b1 01                	mov    cl,0x1
c002388d:	e9 4a fe ff ff       	jmp    c00236dc <IDE::detect()+0x126>
c0023892:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023898:	5b                   	pop    ebx
c0023899:	5e                   	pop    esi
c002389a:	5f                   	pop    edi
c002389b:	5d                   	pop    ebp
c002389c:	c3                   	ret    
c002389d:	90                   	nop

c002389e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002389e:	55                   	push   ebp
c002389f:	57                   	push   edi
c00238a0:	56                   	push   esi
c00238a1:	53                   	push   ebx
c00238a2:	83 ec 1c             	sub    esp,0x1c
c00238a5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00238a9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00238ad:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00238b1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00238b5:	88 c3                	mov    bl,al
c00238b7:	84 c0                	test   al,al
c00238b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00238bd:	0f 84 67 01 00 00    	je     c0023a2a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00238c3:	83 ec 0c             	sub    esp,0xc
c00238c6:	68 9f c9 02 c0       	push   0xc002c99f
c00238cb:	e8 a8 f4 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00238d0:	83 c4 10             	add    esp,0x10
c00238d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00238d7:	3c 01                	cmp    al,0x1
c00238d9:	75 17                	jne    c00238f2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00238db:	83 ec 0c             	sub    esp,0xc
c00238de:	b3 13                	mov    bl,0x13
c00238e0:	68 ab c9 02 c0       	push   0xc002c9ab
c00238e5:	e8 8e f4 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00238ea:	83 c4 10             	add    esp,0x10
c00238ed:	e9 25 01 00 00       	jmp    c0023a17 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00238f2:	3c 02                	cmp    al,0x2
c00238f4:	0f 85 ef 00 00 00    	jne    c00239e9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c00238fa:	d1 e6                	shl    esi,1
c00238fc:	09 ee                	or     esi,ebp
c00238fe:	52                   	push   edx
c00238ff:	89 f0                	mov    eax,esi
c0023901:	6a 01                	push   0x1
c0023903:	0f b6 f0             	movzx  esi,al
c0023906:	c1 e6 06             	shl    esi,0x6
c0023909:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023911:	50                   	push   eax
c0023912:	57                   	push   edi
c0023913:	e8 30 f6 ff ff       	call   c0022f48 <IDE::read(unsigned char, unsigned char)>
c0023918:	83 c4 10             	add    esp,0x10
c002391b:	89 c6                	mov    esi,eax
c002391d:	a8 01                	test   al,0x1
c002391f:	74 12                	je     c0023933 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023921:	83 ec 0c             	sub    esp,0xc
c0023924:	b3 07                	mov    bl,0x7
c0023926:	68 c0 c9 02 c0       	push   0xc002c9c0
c002392b:	e8 48 f4 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0023930:	83 c4 10             	add    esp,0x10
c0023933:	f7 c6 02 00 00 00    	test   esi,0x2
c0023939:	74 12                	je     c002394d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c002393b:	83 ec 0c             	sub    esp,0xc
c002393e:	b3 03                	mov    bl,0x3
c0023940:	68 de c9 02 c0       	push   0xc002c9de
c0023945:	e8 2e f4 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c002394a:	83 c4 10             	add    esp,0x10
c002394d:	f7 c6 04 00 00 00    	test   esi,0x4
c0023953:	74 12                	je     c0023967 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023955:	83 ec 0c             	sub    esp,0xc
c0023958:	b3 14                	mov    bl,0x14
c002395a:	68 fe c9 02 c0       	push   0xc002c9fe
c002395f:	e8 14 f4 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0023964:	83 c4 10             	add    esp,0x10
c0023967:	f7 c6 08 00 00 00    	test   esi,0x8
c002396d:	74 12                	je     c0023981 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c002396f:	83 ec 0c             	sub    esp,0xc
c0023972:	b3 03                	mov    bl,0x3
c0023974:	68 de c9 02 c0       	push   0xc002c9de
c0023979:	e8 fa f3 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c002397e:	83 c4 10             	add    esp,0x10
c0023981:	f7 c6 10 00 00 00    	test   esi,0x10
c0023987:	74 12                	je     c002399b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023989:	83 ec 0c             	sub    esp,0xc
c002398c:	b3 15                	mov    bl,0x15
c002398e:	68 16 ca 02 c0       	push   0xc002ca16
c0023993:	e8 e0 f3 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0023998:	83 c4 10             	add    esp,0x10
c002399b:	f7 c6 20 00 00 00    	test   esi,0x20
c00239a1:	74 12                	je     c00239b5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00239a3:	83 ec 0c             	sub    esp,0xc
c00239a6:	b3 03                	mov    bl,0x3
c00239a8:	68 de c9 02 c0       	push   0xc002c9de
c00239ad:	e8 c6 f3 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00239b2:	83 c4 10             	add    esp,0x10
c00239b5:	f7 c6 40 00 00 00    	test   esi,0x40
c00239bb:	74 12                	je     c00239cf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00239bd:	83 ec 0c             	sub    esp,0xc
c00239c0:	b3 16                	mov    bl,0x16
c00239c2:	68 30 ca 02 c0       	push   0xc002ca30
c00239c7:	e8 ac f3 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00239cc:	83 c4 10             	add    esp,0x10
c00239cf:	89 f0                	mov    eax,esi
c00239d1:	84 c0                	test   al,al
c00239d3:	79 42                	jns    c0023a17 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00239d5:	83 ec 0c             	sub    esp,0xc
c00239d8:	b3 0d                	mov    bl,0xd
c00239da:	68 51 ca 02 c0       	push   0xc002ca51
c00239df:	e8 94 f3 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00239e4:	83 c4 10             	add    esp,0x10
c00239e7:	eb 2e                	jmp    c0023a17 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00239e9:	3c 03                	cmp    al,0x3
c00239eb:	75 14                	jne    c0023a01 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c00239ed:	83 ec 0c             	sub    esp,0xc
c00239f0:	b3 17                	mov    bl,0x17
c00239f2:	68 65 ca 02 c0       	push   0xc002ca65
c00239f7:	e8 7c f3 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00239fc:	83 c4 10             	add    esp,0x10
c00239ff:	eb 16                	jmp    c0023a17 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a01:	3c 04                	cmp    al,0x4
c0023a03:	75 12                	jne    c0023a17 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a05:	83 ec 0c             	sub    esp,0xc
c0023a08:	b3 08                	mov    bl,0x8
c0023a0a:	68 7b ca 02 c0       	push   0xc002ca7b
c0023a0f:	e8 64 f3 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0023a14:	83 c4 10             	add    esp,0x10
c0023a17:	50                   	push   eax
c0023a18:	50                   	push   eax
c0023a19:	0f b6 c3             	movzx  eax,bl
c0023a1c:	50                   	push   eax
c0023a1d:	68 93 ca 02 c0       	push   0xc002ca93
c0023a22:	e8 51 f3 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0023a27:	83 c4 10             	add    esp,0x10
c0023a2a:	83 c4 1c             	add    esp,0x1c
c0023a2d:	88 d8                	mov    al,bl
c0023a2f:	5b                   	pop    ebx
c0023a30:	5e                   	pop    esi
c0023a31:	5f                   	pop    edi
c0023a32:	5d                   	pop    ebp
c0023a33:	c3                   	ret    

c0023a34 <IDE::polling(unsigned char, unsigned int)>:
c0023a34:	57                   	push   edi
c0023a35:	56                   	push   esi
c0023a36:	53                   	push   ebx
c0023a37:	bb 04 00 00 00       	mov    ebx,0x4
c0023a3c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023a40:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023a45:	52                   	push   edx
c0023a46:	6a 0c                	push   0xc
c0023a48:	56                   	push   esi
c0023a49:	57                   	push   edi
c0023a4a:	e8 f9 f4 ff ff       	call   c0022f48 <IDE::read(unsigned char, unsigned char)>
c0023a4f:	83 c4 10             	add    esp,0x10
c0023a52:	4b                   	dec    ebx
c0023a53:	75 f0                	jne    c0023a45 <IDE::polling(unsigned char, unsigned int)+0x11>
c0023a55:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023a5a:	50                   	push   eax
c0023a5b:	6a 0c                	push   0xc
c0023a5d:	56                   	push   esi
c0023a5e:	57                   	push   edi
c0023a5f:	e8 e4 f4 ff ff       	call   c0022f48 <IDE::read(unsigned char, unsigned char)>
c0023a64:	83 c4 10             	add    esp,0x10
c0023a67:	a8 01                	test   al,0x1
c0023a69:	74 12                	je     c0023a7d <IDE::polling(unsigned char, unsigned int)+0x49>
c0023a6b:	83 ec 0c             	sub    esp,0xc
c0023a6e:	68 ad ca 02 c0       	push   0xc002caad
c0023a73:	e8 00 f3 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0023a78:	83 c4 10             	add    esp,0x10
c0023a7b:	eb 17                	jmp    c0023a94 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023a7d:	a8 20                	test   al,0x20
c0023a7f:	75 0f                	jne    c0023a90 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023a81:	4b                   	dec    ebx
c0023a82:	74 10                	je     c0023a94 <IDE::polling(unsigned char, unsigned int)+0x60>
c0023a84:	84 c0                	test   al,al
c0023a86:	78 d2                	js     c0023a5a <IDE::polling(unsigned char, unsigned int)+0x26>
c0023a88:	a8 08                	test   al,0x8
c0023a8a:	74 ce                	je     c0023a5a <IDE::polling(unsigned char, unsigned int)+0x26>
c0023a8c:	31 c0                	xor    eax,eax
c0023a8e:	eb 06                	jmp    c0023a96 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023a90:	b0 01                	mov    al,0x1
c0023a92:	eb 02                	jmp    c0023a96 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023a94:	b0 02                	mov    al,0x2
c0023a96:	5b                   	pop    ebx
c0023a97:	5e                   	pop    esi
c0023a98:	5f                   	pop    edi
c0023a99:	c3                   	ret    

c0023a9a <SATABus::close(int, int, void*)>:
c0023a9a:	31 c0                	xor    eax,eax
c0023a9c:	c3                   	ret    
c0023a9d:	90                   	nop

c0023a9e <SATABus::detect()>:
c0023a9e:	c3                   	ret    
c0023a9f:	90                   	nop

c0023aa0 <SATABus::SATABus()>:
c0023aa0:	83 ec 0c             	sub    esp,0xc
c0023aa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023aa7:	83 ec 08             	sub    esp,0x8
c0023aaa:	68 f0 ca 02 c0       	push   0xc002caf0
c0023aaf:	50                   	push   eax
c0023ab0:	e8 75 0a ff ff       	call   c001452a <HardDiskController::HardDiskController(char const*)>
c0023ab5:	83 c4 10             	add    esp,0x10
c0023ab8:	ba ac cb 02 c0       	mov    edx,0xc002cbac
c0023abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ac1:	89 10                	mov    DWORD PTR [eax],edx
c0023ac3:	83 ec 0c             	sub    esp,0xc
c0023ac6:	6a 50                	push   0x50
c0023ac8:	e8 f8 c4 fe ff       	call   c000ffc5 <Phys::allocateContiguousPages(int)>
c0023acd:	83 c4 10             	add    esp,0x10
c0023ad0:	89 c2                	mov    edx,eax
c0023ad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ad6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023adc:	83 ec 0c             	sub    esp,0xc
c0023adf:	6a 50                	push   0x50
c0023ae1:	e8 59 e0 fe ff       	call   c0011b3f <Virt::allocateKernelVirtualPages(int)>
c0023ae6:	83 c4 10             	add    esp,0x10
c0023ae9:	89 c2                	mov    edx,eax
c0023aeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023aef:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023af5:	e8 ec e2 fe ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0023afa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023afe:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023b04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023b08:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023b0e:	83 ec 0c             	sub    esp,0xc
c0023b11:	6a 03                	push   0x3
c0023b13:	6a 50                	push   0x50
c0023b15:	51                   	push   ecx
c0023b16:	52                   	push   edx
c0023b17:	50                   	push   eax
c0023b18:	e8 df e9 fe ff       	call   c00124fc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023b1d:	83 c4 20             	add    esp,0x20
c0023b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b24:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b2e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023b34:	83 ec 04             	sub    esp,0x4
c0023b37:	52                   	push   edx
c0023b38:	50                   	push   eax
c0023b39:	68 14 cb 02 c0       	push   0xc002cb14
c0023b3e:	e8 35 f2 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0023b43:	83 c4 10             	add    esp,0x10
c0023b46:	90                   	nop
c0023b47:	83 c4 0c             	add    esp,0xc
c0023b4a:	c3                   	ret    
c0023b4b:	90                   	nop

c0023b4c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023b4c:	83 ec 0c             	sub    esp,0xc
c0023b4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023b53:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023b56:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023b59:	09 c2                	or     edx,eax
c0023b5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b5f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023b65:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023b67:	31 c0                	xor    eax,eax
c0023b69:	c1 e9 08             	shr    ecx,0x8
c0023b6c:	83 e1 0f             	and    ecx,0xf
c0023b6f:	39 c8                	cmp    eax,ecx
c0023b71:	74 0a                	je     c0023b7d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023b73:	f6 c2 01             	test   dl,0x1
c0023b76:	74 18                	je     c0023b90 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023b78:	d1 ea                	shr    edx,1
c0023b7a:	40                   	inc    eax
c0023b7b:	eb f2                	jmp    c0023b6f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023b7d:	83 ec 0c             	sub    esp,0xc
c0023b80:	68 38 cb 02 c0       	push   0xc002cb38
c0023b85:	e8 c9 68 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c0023b8a:	83 c4 10             	add    esp,0x10
c0023b8d:	83 c8 ff             	or     eax,0xffffffff
c0023b90:	83 c4 0c             	add    esp,0xc
c0023b93:	c3                   	ret    

c0023b94 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023b94:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023b98:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023b9b:	89 c2                	mov    edx,eax
c0023b9d:	c1 ea 08             	shr    edx,0x8
c0023ba0:	83 e2 0f             	and    edx,0xf
c0023ba3:	fe ca                	dec    dl
c0023ba5:	75 31                	jne    c0023bd8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023ba7:	83 e0 0f             	and    eax,0xf
c0023baa:	3c 03                	cmp    al,0x3
c0023bac:	75 2a                	jne    c0023bd8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023bae:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023bb1:	b8 02 00 00 00       	mov    eax,0x2
c0023bb6:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023bbc:	74 1c                	je     c0023bda <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023bbe:	b8 04 00 00 00       	mov    eax,0x4
c0023bc3:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023bc9:	74 0f                	je     c0023bda <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023bcb:	31 c0                	xor    eax,eax
c0023bcd:	83 fa 03             	cmp    edx,0x3
c0023bd0:	0f 94 c0             	sete   al
c0023bd3:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023bd7:	c3                   	ret    
c0023bd8:	31 c0                	xor    eax,eax
c0023bda:	c3                   	ret    
c0023bdb:	90                   	nop

c0023bdc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023bdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023be0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023be3:	0f ba e2 0f          	bt     edx,0xf
c0023be7:	72 f7                	jb     c0023be0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023be9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023bec:	83 ca 10             	or     edx,0x10
c0023bef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023bf2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023bf5:	83 ca 01             	or     edx,0x1
c0023bf8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023bfb:	c3                   	ret    

c0023bfc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023bfc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023c00:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c03:	83 e2 fe             	and    edx,0xfffffffe
c0023c06:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c09:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c0c:	83 e2 ef             	and    edx,0xffffffef
c0023c0f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c12:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c15:	0f ba e2 0e          	bt     edx,0xe
c0023c19:	72 f7                	jb     c0023c12 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023c1b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c1e:	0f ba e2 0f          	bt     edx,0xf
c0023c22:	72 ee                	jb     c0023c12 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023c24:	c3                   	ret    
c0023c25:	90                   	nop

c0023c26 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023c26:	55                   	push   ebp
c0023c27:	57                   	push   edi
c0023c28:	56                   	push   esi
c0023c29:	53                   	push   ebx
c0023c2a:	83 ec 1c             	sub    esp,0x1c
c0023c2d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023c31:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023c35:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023c39:	53                   	push   ebx
c0023c3a:	89 fd                	mov    ebp,edi
c0023c3c:	56                   	push   esi
c0023c3d:	c1 e5 0a             	shl    ebp,0xa
c0023c40:	e8 b7 ff ff ff       	call   c0023bfc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023c45:	83 ec 0c             	sub    esp,0xc
c0023c48:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023c4e:	01 e8                	add    eax,ebp
c0023c50:	89 03                	mov    DWORD PTR [ebx],eax
c0023c52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023c54:	68 00 04 00 00       	push   0x400
c0023c59:	6a 00                	push   0x0
c0023c5b:	50                   	push   eax
c0023c5c:	e8 17 cb fd ff       	call   c0000778 <memset>
c0023c61:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023c67:	89 fa                	mov    edx,edi
c0023c69:	01 e8                	add    eax,ebp
c0023c6b:	c1 e7 0d             	shl    edi,0xd
c0023c6e:	89 03                	mov    DWORD PTR [ebx],eax
c0023c70:	c1 e2 08             	shl    edx,0x8
c0023c73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023c7a:	81 c2 00 80 00 00    	add    edx,0x8000
c0023c80:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023c84:	89 d0                	mov    eax,edx
c0023c86:	83 c4 1c             	add    esp,0x1c
c0023c89:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023c8f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023c92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023c95:	68 00 01 00 00       	push   0x100
c0023c9a:	6a 00                	push   0x0
c0023c9c:	50                   	push   eax
c0023c9d:	e8 d6 ca fd ff       	call   c0000778 <memset>
c0023ca2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023ca6:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023cac:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023cb2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023cb6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023cb9:	83 c4 10             	add    esp,0x10
c0023cbc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023cc3:	31 ff                	xor    edi,edi
c0023cc5:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023ccb:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023cd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023cd5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023cdb:	83 c5 20             	add    ebp,0x20
c0023cde:	01 f8                	add    eax,edi
c0023ce0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023ce3:	52                   	push   edx
c0023ce4:	68 00 01 00 00       	push   0x100
c0023ce9:	6a 00                	push   0x0
c0023ceb:	50                   	push   eax
c0023cec:	e8 87 ca fd ff       	call   c0000778 <memset>
c0023cf1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023cf5:	83 c4 10             	add    esp,0x10
c0023cf8:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023cfe:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023d05:	01 f8                	add    eax,edi
c0023d07:	81 c7 00 01 00 00    	add    edi,0x100
c0023d0d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023d10:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023d16:	75 b3                	jne    c0023ccb <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023d18:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023d1c:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023d20:	83 c4 1c             	add    esp,0x1c
c0023d23:	5b                   	pop    ebx
c0023d24:	5e                   	pop    esi
c0023d25:	5f                   	pop    edi
c0023d26:	5d                   	pop    ebp
c0023d27:	e9 b0 fe ff ff       	jmp    c0023bdc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023d2c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023d2c:	55                   	push   ebp
c0023d2d:	57                   	push   edi
c0023d2e:	56                   	push   esi
c0023d2f:	53                   	push   ebx
c0023d30:	31 db                	xor    ebx,ebx
c0023d32:	83 ec 0c             	sub    esp,0xc
c0023d35:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023d39:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023d3d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023d40:	f7 c7 01 00 00 00    	test   edi,0x1
c0023d46:	0f 84 aa 00 00 00    	je     c0023df6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023d4c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023d50:	89 d8                	mov    eax,ebx
c0023d52:	c1 e0 07             	shl    eax,0x7
c0023d55:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023d5c:	55                   	push   ebp
c0023d5d:	56                   	push   esi
c0023d5e:	e8 31 fe ff ff       	call   c0023b94 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023d63:	5a                   	pop    edx
c0023d64:	83 f8 01             	cmp    eax,0x1
c0023d67:	59                   	pop    ecx
c0023d68:	75 30                	jne    c0023d9a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023d6a:	50                   	push   eax
c0023d6b:	50                   	push   eax
c0023d6c:	53                   	push   ebx
c0023d6d:	68 5d cb 02 c0       	push   0xc002cb5d
c0023d72:	e8 01 f0 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0023d77:	83 c4 0c             	add    esp,0xc
c0023d7a:	53                   	push   ebx
c0023d7b:	55                   	push   ebp
c0023d7c:	56                   	push   esi
c0023d7d:	e8 a4 fe ff ff       	call   c0023c26 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023d82:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023d89:	e8 b5 ba fe ff       	call   c000f843 <malloc>
c0023d8e:	89 c5                	mov    ebp,eax
c0023d90:	89 04 24             	mov    DWORD PTR [esp],eax
c0023d93:	e8 60 0d 00 00       	call   c0024af8 <SATA::SATA()>
c0023d98:	eb 33                	jmp    c0023dcd <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023d9a:	83 f8 04             	cmp    eax,0x4
c0023d9d:	75 47                	jne    c0023de6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023d9f:	50                   	push   eax
c0023da0:	50                   	push   eax
c0023da1:	53                   	push   ebx
c0023da2:	68 74 cb 02 c0       	push   0xc002cb74
c0023da7:	e8 cc ef fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0023dac:	83 c4 0c             	add    esp,0xc
c0023daf:	53                   	push   ebx
c0023db0:	55                   	push   ebp
c0023db1:	56                   	push   esi
c0023db2:	e8 6f fe ff ff       	call   c0023c26 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023db7:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023dbe:	e8 80 ba fe ff       	call   c000f843 <malloc>
c0023dc3:	89 c5                	mov    ebp,eax
c0023dc5:	89 04 24             	mov    DWORD PTR [esp],eax
c0023dc8:	e8 d7 10 00 00       	call   c0024ea4 <SATAPI::SATAPI()>
c0023dcd:	5a                   	pop    edx
c0023dce:	59                   	pop    ecx
c0023dcf:	55                   	push   ebp
c0023dd0:	56                   	push   esi
c0023dd1:	e8 c8 03 ff ff       	call   c001419e <Device::addChild(Device*)>
c0023dd6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023dd9:	56                   	push   esi
c0023dda:	6a 00                	push   0x0
c0023ddc:	53                   	push   ebx
c0023ddd:	55                   	push   ebp
c0023dde:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023de1:	83 c4 20             	add    esp,0x20
c0023de4:	eb 10                	jmp    c0023df6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023de6:	50                   	push   eax
c0023de7:	50                   	push   eax
c0023de8:	53                   	push   ebx
c0023de9:	68 8d cb 02 c0       	push   0xc002cb8d
c0023dee:	e8 85 ef fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0023df3:	83 c4 10             	add    esp,0x10
c0023df6:	d1 ef                	shr    edi,1
c0023df8:	43                   	inc    ebx
c0023df9:	83 fb 20             	cmp    ebx,0x20
c0023dfc:	0f 85 3e ff ff ff    	jne    c0023d40 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023e02:	83 c4 0c             	add    esp,0xc
c0023e05:	5b                   	pop    ebx
c0023e06:	5e                   	pop    esi
c0023e07:	5f                   	pop    edi
c0023e08:	5d                   	pop    ebp
c0023e09:	c3                   	ret    

c0023e0a <SATABus::open(int, int, void*)>:
c0023e0a:	83 ec 14             	sub    esp,0x14
c0023e0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023e11:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023e17:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023e1d:	52                   	push   edx
c0023e1e:	50                   	push   eax
c0023e1f:	e8 08 ff ff ff       	call   c0023d2c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023e24:	31 c0                	xor    eax,eax
c0023e26:	83 c4 1c             	add    esp,0x1c
c0023e29:	c3                   	ret    

c0023e2a <ATA::close(int, int, void*)>:
c0023e2a:	83 ec 0c             	sub    esp,0xc
c0023e2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e31:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023e37:	85 c0                	test   eax,eax
c0023e39:	74 0c                	je     c0023e47 <ATA::close(int, int, void*)+0x1d>
c0023e3b:	83 ec 0c             	sub    esp,0xc
c0023e3e:	8b 10                	mov    edx,DWORD PTR [eax]
c0023e40:	50                   	push   eax
c0023e41:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023e44:	83 c4 10             	add    esp,0x10
c0023e47:	31 c0                	xor    eax,eax
c0023e49:	83 c4 0c             	add    esp,0xc
c0023e4c:	c3                   	ret    
c0023e4d:	90                   	nop

c0023e4e <ATA::powerSaving(PowerSavingLevel)>:
c0023e4e:	c3                   	ret    
c0023e4f:	90                   	nop

c0023e50 <ATA::ATA()>:
c0023e50:	83 ec 0c             	sub    esp,0xc
c0023e53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e57:	83 ec 04             	sub    esp,0x4
c0023e5a:	68 00 02 00 00       	push   0x200
c0023e5f:	68 75 cc 02 c0       	push   0xc002cc75
c0023e64:	50                   	push   eax
c0023e65:	e8 58 07 ff ff       	call   c00145c2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023e6a:	83 c4 10             	add    esp,0x10
c0023e6d:	ba f8 cb 02 c0       	mov    edx,0xc002cbf8
c0023e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e76:	89 10                	mov    DWORD PTR [eax],edx
c0023e78:	90                   	nop
c0023e79:	83 c4 0c             	add    esp,0xc
c0023e7c:	c3                   	ret    
c0023e7d:	90                   	nop

c0023e7e <ATA::flush(bool)>:
c0023e7e:	53                   	push   ebx
c0023e7f:	83 ec 08             	sub    esp,0x8
c0023e82:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023e87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023e8b:	19 c0                	sbb    eax,eax
c0023e8d:	83 e0 fd             	and    eax,0xfffffffd
c0023e90:	05 ea 00 00 00       	add    eax,0xea
c0023e95:	50                   	push   eax
c0023e96:	6a 07                	push   0x7
c0023e98:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e9f:	50                   	push   eax
c0023ea0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ea6:	e8 dd ef ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023eab:	83 c4 0c             	add    esp,0xc
c0023eae:	6a 00                	push   0x0
c0023eb0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023eb7:	50                   	push   eax
c0023eb8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ebe:	e8 71 fb ff ff       	call   c0023a34 <IDE::polling(unsigned char, unsigned int)>
c0023ec3:	83 c4 18             	add    esp,0x18
c0023ec6:	5b                   	pop    ebx
c0023ec7:	c3                   	ret    

c0023ec8 <ATA::readyForCommand()>:
c0023ec8:	56                   	push   esi
c0023ec9:	53                   	push   ebx
c0023eca:	31 db                	xor    ebx,ebx
c0023ecc:	50                   	push   eax
c0023ecd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023ed1:	50                   	push   eax
c0023ed2:	6a 0c                	push   0xc
c0023ed4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023edb:	50                   	push   eax
c0023edc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023ee2:	e8 61 f0 ff ff       	call   c0022f48 <IDE::read(unsigned char, unsigned char)>
c0023ee7:	83 c4 10             	add    esp,0x10
c0023eea:	a8 88                	test   al,0x88
c0023eec:	74 23                	je     c0023f11 <ATA::readyForCommand()+0x49>
c0023eee:	43                   	inc    ebx
c0023eef:	83 fb 63             	cmp    ebx,0x63
c0023ef2:	7e dd                	jle    c0023ed1 <ATA::readyForCommand()+0x9>
c0023ef4:	51                   	push   ecx
c0023ef5:	51                   	push   ecx
c0023ef6:	6a 00                	push   0x0
c0023ef8:	68 40 42 0f 00       	push   0xf4240
c0023efd:	e8 9a a2 ff ff       	call   c001e19c <nanoSleep(unsigned long long)>
c0023f02:	83 c4 10             	add    esp,0x10
c0023f05:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023f0b:	75 c4                	jne    c0023ed1 <ATA::readyForCommand()+0x9>
c0023f0d:	31 c0                	xor    eax,eax
c0023f0f:	eb 02                	jmp    c0023f13 <ATA::readyForCommand()+0x4b>
c0023f11:	b0 01                	mov    al,0x1
c0023f13:	5a                   	pop    edx
c0023f14:	5b                   	pop    ebx
c0023f15:	5e                   	pop    esi
c0023f16:	c3                   	ret    
c0023f17:	90                   	nop

c0023f18 <ATA::access(unsigned long long, int, void*, bool)>:
c0023f18:	55                   	push   ebp
c0023f19:	57                   	push   edi
c0023f1a:	56                   	push   esi
c0023f1b:	53                   	push   ebx
c0023f1c:	83 ec 2c             	sub    esp,0x2c
c0023f1f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023f23:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023f27:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023f2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023f2f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023f33:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023f37:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023f3b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023f41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023f45:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023f4b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023f4f:	c1 e0 06             	shl    eax,0x6
c0023f52:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023f5a:	74 5d                	je     c0023fb9 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023f5c:	89 fa                	mov    edx,edi
c0023f5e:	89 f0                	mov    eax,esi
c0023f60:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023f64:	c1 ea 1c             	shr    edx,0x1c
c0023f67:	89 d1                	mov    ecx,edx
c0023f69:	09 c1                	or     ecx,eax
c0023f6b:	74 25                	je     c0023f92 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023f6d:	31 ed                	xor    ebp,ebp
c0023f6f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023f76:	89 fa                	mov    edx,edi
c0023f78:	89 f0                	mov    eax,esi
c0023f7a:	0f ad d0             	shrd   eax,edx,cl
c0023f7d:	d3 ea                	shr    edx,cl
c0023f7f:	f6 c1 20             	test   cl,0x20
c0023f82:	74 02                	je     c0023f86 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023f84:	89 d0                	mov    eax,edx
c0023f86:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023f8a:	45                   	inc    ebp
c0023f8b:	83 fd 06             	cmp    ebp,0x6
c0023f8e:	75 df                	jne    c0023f6f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023f90:	eb 76                	jmp    c0024008 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023f92:	89 f0                	mov    eax,esi
c0023f94:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023f99:	89 fa                	mov    edx,edi
c0023f9b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023fa2:	0f ac d0 10          	shrd   eax,edx,0x10
c0023fa6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023fab:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023faf:	c1 ee 18             	shr    esi,0x18
c0023fb2:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023fb7:	eb 56                	jmp    c002400f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023fb9:	6a 00                	push   0x0
c0023fbb:	6a 3f                	push   0x3f
c0023fbd:	57                   	push   edi
c0023fbe:	56                   	push   esi
c0023fbf:	e8 98 29 00 00       	call   c002695c <__umoddi3>
c0023fc4:	83 c4 10             	add    esp,0x10
c0023fc7:	40                   	inc    eax
c0023fc8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023fcc:	6a 00                	push   0x0
c0023fce:	68 f0 03 00 00       	push   0x3f0
c0023fd3:	57                   	push   edi
c0023fd4:	56                   	push   esi
c0023fd5:	e8 82 28 00 00       	call   c002685c <__udivdi3>
c0023fda:	83 c4 10             	add    esp,0x10
c0023fdd:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023fe2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023fe9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023fee:	6a 00                	push   0x0
c0023ff0:	6a 3f                	push   0x3f
c0023ff2:	57                   	push   edi
c0023ff3:	56                   	push   esi
c0023ff4:	e8 63 28 00 00       	call   c002685c <__udivdi3>
c0023ff9:	83 c4 10             	add    esp,0x10
c0023ffc:	89 c6                	mov    esi,eax
c0023ffe:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024003:	83 e6 0f             	and    esi,0xf
c0024006:	eb 07                	jmp    c002400f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024008:	31 f6                	xor    esi,esi
c002400a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002400f:	bf 01 00 00 00       	mov    edi,0x1
c0024014:	50                   	push   eax
c0024015:	6a 00                	push   0x0
c0024017:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002401e:	50                   	push   eax
c002401f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024023:	e8 6c f0 ff ff       	call   c0023094 <IDE::enableIRQs(unsigned char, bool)>
c0024028:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002402b:	e8 98 fe ff ff       	call   c0023ec8 <ATA::readyForCommand()>
c0024030:	83 c4 10             	add    esp,0x10
c0024033:	84 c0                	test   al,al
c0024035:	0f 84 5a 02 00 00    	je     c0024295 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002403b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024041:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024047:	c1 e0 04             	shl    eax,0x4
c002404a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024051:	09 c6                	or     esi,eax
c0024053:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024058:	75 05                	jne    c002405f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002405a:	83 ce a0             	or     esi,0xffffffa0
c002405d:	eb 03                	jmp    c0024062 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002405f:	83 ce e0             	or     esi,0xffffffe0
c0024062:	89 f0                	mov    eax,esi
c0024064:	0f b6 f0             	movzx  esi,al
c0024067:	56                   	push   esi
c0024068:	6a 06                	push   0x6
c002406a:	51                   	push   ecx
c002406b:	52                   	push   edx
c002406c:	e8 17 ee ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024071:	83 c4 10             	add    esp,0x10
c0024074:	6a 00                	push   0x0
c0024076:	6a 01                	push   0x1
c0024078:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002407f:	50                   	push   eax
c0024080:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024086:	e8 fd ed ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002408b:	83 c4 10             	add    esp,0x10
c002408e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024093:	75 6e                	jne    c0024103 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024095:	6a 00                	push   0x0
c0024097:	6a 08                	push   0x8
c0024099:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240a0:	50                   	push   eax
c00240a1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240a7:	e8 dc ed ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240ac:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00240b1:	50                   	push   eax
c00240b2:	6a 09                	push   0x9
c00240b4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240bb:	50                   	push   eax
c00240bc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240c2:	e8 c1 ed ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240c7:	83 c4 20             	add    esp,0x20
c00240ca:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00240cf:	50                   	push   eax
c00240d0:	6a 0a                	push   0xa
c00240d2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240d9:	50                   	push   eax
c00240da:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240e0:	e8 a3 ed ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240e5:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00240ea:	50                   	push   eax
c00240eb:	6a 0b                	push   0xb
c00240ed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240f4:	50                   	push   eax
c00240f5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240fb:	e8 88 ed ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024100:	83 c4 20             	add    esp,0x20
c0024103:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024108:	50                   	push   eax
c0024109:	6a 02                	push   0x2
c002410b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024112:	50                   	push   eax
c0024113:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024119:	e8 6a ed ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002411e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024123:	50                   	push   eax
c0024124:	6a 03                	push   0x3
c0024126:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002412d:	50                   	push   eax
c002412e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024134:	e8 4f ed ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024139:	83 c4 20             	add    esp,0x20
c002413c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024141:	50                   	push   eax
c0024142:	6a 04                	push   0x4
c0024144:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002414b:	50                   	push   eax
c002414c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024152:	e8 31 ed ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024157:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002415c:	50                   	push   eax
c002415d:	6a 05                	push   0x5
c002415f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024166:	50                   	push   eax
c0024167:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002416d:	e8 16 ed ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024172:	83 c4 20             	add    esp,0x20
c0024175:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002417a:	0f 94 c0             	sete   al
c002417d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024182:	74 09                	je     c002418d <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024184:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c002418b:	eb 07                	jmp    c0024194 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c002418d:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024194:	0f b6 c0             	movzx  eax,al
c0024197:	50                   	push   eax
c0024198:	6a 07                	push   0x7
c002419a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241a1:	50                   	push   eax
c00241a2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241a8:	e8 db ec ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241ad:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00241b1:	83 c4 10             	add    esp,0x10
c00241b4:	85 f6                	test   esi,esi
c00241b6:	0f 84 ba 00 00 00    	je     c0024276 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00241bc:	50                   	push   eax
c00241bd:	6a 01                	push   0x1
c00241bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241c6:	50                   	push   eax
c00241c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241cd:	e8 62 f8 ff ff       	call   c0023a34 <IDE::polling(unsigned char, unsigned int)>
c00241d2:	83 c4 10             	add    esp,0x10
c00241d5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00241db:	84 c0                	test   al,al
c00241dd:	74 2c                	je     c002420b <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c00241df:	0f b6 f8             	movzx  edi,al
c00241e2:	0f b6 d2             	movzx  edx,dl
c00241e5:	57                   	push   edi
c00241e6:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00241ed:	50                   	push   eax
c00241ee:	52                   	push   edx
c00241ef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241f5:	e8 a4 f6 ff ff       	call   c002389e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00241fa:	c7 04 24 d0 cb 02 c0 	mov    DWORD PTR [esp],0xc002cbd0
c0024201:	e8 72 eb fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0024206:	e9 87 00 00 00       	jmp    c0024292 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c002420b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024210:	74 33                	je     c0024245 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024212:	31 ed                	xor    ebp,ebp
c0024214:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024218:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c002421c:	50                   	push   eax
c002421d:	50                   	push   eax
c002421e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024225:	50                   	push   eax
c0024226:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002422c:	e8 45 ec ff ff       	call   c0022e76 <IDE::getBase(unsigned char)>
c0024231:	89 c2                	mov    edx,eax
c0024233:	89 f8                	mov    eax,edi
c0024235:	66 ef                	out    dx,ax
c0024237:	45                   	inc    ebp
c0024238:	83 c4 10             	add    esp,0x10
c002423b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024241:	75 d1                	jne    c0024214 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024243:	eb 23                	jmp    c0024268 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024245:	0f b6 d2             	movzx  edx,dl
c0024248:	51                   	push   ecx
c0024249:	51                   	push   ecx
c002424a:	52                   	push   edx
c002424b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024251:	e8 20 ec ff ff       	call   c0022e76 <IDE::getBase(unsigned char)>
c0024256:	b9 00 01 00 00       	mov    ecx,0x100
c002425b:	89 c2                	mov    edx,eax
c002425d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024261:	fc                   	cld    
c0024262:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024265:	83 c4 10             	add    esp,0x10
c0024268:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024270:	4e                   	dec    esi
c0024271:	e9 3e ff ff ff       	jmp    c00241b4 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024276:	31 ff                	xor    edi,edi
c0024278:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002427d:	74 16                	je     c0024295 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002427f:	50                   	push   eax
c0024280:	50                   	push   eax
c0024281:	31 c0                	xor    eax,eax
c0024283:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024288:	0f 94 c0             	sete   al
c002428b:	50                   	push   eax
c002428c:	53                   	push   ebx
c002428d:	e8 ec fb ff ff       	call   c0023e7e <ATA::flush(bool)>
c0024292:	83 c4 10             	add    esp,0x10
c0024295:	83 c4 2c             	add    esp,0x2c
c0024298:	89 f8                	mov    eax,edi
c002429a:	5b                   	pop    ebx
c002429b:	5e                   	pop    esi
c002429c:	5f                   	pop    edi
c002429d:	5d                   	pop    ebp
c002429e:	c3                   	ret    
c002429f:	90                   	nop

c00242a0 <ATA::read(unsigned long long, int, void*)>:
c00242a0:	57                   	push   edi
c00242a1:	b8 04 00 00 00       	mov    eax,0x4
c00242a6:	56                   	push   esi
c00242a7:	53                   	push   ebx
c00242a8:	83 ec 10             	sub    esp,0x10
c00242ab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00242af:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00242b3:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00242b6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00242ba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00242be:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00242c4:	77 3b                	ja     c0024301 <ATA::read(unsigned long long, int, void*)+0x61>
c00242c6:	b8 06 00 00 00       	mov    eax,0x6
c00242cb:	85 d2                	test   edx,edx
c00242cd:	74 32                	je     c0024301 <ATA::read(unsigned long long, int, void*)+0x61>
c00242cf:	50                   	push   eax
c00242d0:	50                   	push   eax
c00242d1:	6a 00                	push   0x0
c00242d3:	52                   	push   edx
c00242d4:	53                   	push   ebx
c00242d5:	57                   	push   edi
c00242d6:	56                   	push   esi
c00242d7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00242db:	e8 38 fc ff ff       	call   c0023f18 <ATA::access(unsigned long long, int, void*, bool)>
c00242e0:	83 c4 20             	add    esp,0x20
c00242e3:	85 c0                	test   eax,eax
c00242e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00242e9:	75 11                	jne    c00242fc <ATA::read(unsigned long long, int, void*)+0x5c>
c00242eb:	01 1d 68 25 03 c0    	add    DWORD PTR ds:0xc0032568,ebx
c00242f1:	e8 9e c6 fe ff       	call   c0010994 <VgaText::updateDiskUsage()>
c00242f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00242fa:	eb 05                	jmp    c0024301 <ATA::read(unsigned long long, int, void*)+0x61>
c00242fc:	b8 01 00 00 00       	mov    eax,0x1
c0024301:	83 c4 10             	add    esp,0x10
c0024304:	5b                   	pop    ebx
c0024305:	5e                   	pop    esi
c0024306:	5f                   	pop    edi
c0024307:	c3                   	ret    

c0024308 <ATA::write(unsigned long long, int, void*)>:
c0024308:	57                   	push   edi
c0024309:	b8 04 00 00 00       	mov    eax,0x4
c002430e:	56                   	push   esi
c002430f:	53                   	push   ebx
c0024310:	83 ec 10             	sub    esp,0x10
c0024313:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024317:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002431b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002431e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024322:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024326:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002432c:	77 3b                	ja     c0024369 <ATA::write(unsigned long long, int, void*)+0x61>
c002432e:	b8 06 00 00 00       	mov    eax,0x6
c0024333:	85 d2                	test   edx,edx
c0024335:	74 32                	je     c0024369 <ATA::write(unsigned long long, int, void*)+0x61>
c0024337:	50                   	push   eax
c0024338:	50                   	push   eax
c0024339:	6a 01                	push   0x1
c002433b:	52                   	push   edx
c002433c:	53                   	push   ebx
c002433d:	57                   	push   edi
c002433e:	56                   	push   esi
c002433f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024343:	e8 d0 fb ff ff       	call   c0023f18 <ATA::access(unsigned long long, int, void*, bool)>
c0024348:	83 c4 20             	add    esp,0x20
c002434b:	85 c0                	test   eax,eax
c002434d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024351:	75 11                	jne    c0024364 <ATA::write(unsigned long long, int, void*)+0x5c>
c0024353:	01 1d 64 25 03 c0    	add    DWORD PTR ds:0xc0032564,ebx
c0024359:	e8 36 c6 fe ff       	call   c0010994 <VgaText::updateDiskUsage()>
c002435e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024362:	eb 05                	jmp    c0024369 <ATA::write(unsigned long long, int, void*)+0x61>
c0024364:	b8 01 00 00 00       	mov    eax,0x1
c0024369:	83 c4 10             	add    esp,0x10
c002436c:	5b                   	pop    ebx
c002436d:	5e                   	pop    esi
c002436e:	5f                   	pop    edi
c002436f:	c3                   	ret    

c0024370 <ATA::detectCHS()>:
c0024370:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024374:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002437a:	c1 e0 06             	shl    eax,0x6
c002437d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024383:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002438d:	c7 44 24 04 db cb 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cbdb
c0024395:	e9 b9 60 ff ff       	jmp    c001a453 <Krnl::panic(char const*)>

c002439a <ATA::open(int, int, void*)>:
c002439a:	53                   	push   ebx
c002439b:	83 ec 08             	sub    esp,0x8
c002439e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00243a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00243a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00243aa:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00243b0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00243b6:	c1 e0 06             	shl    eax,0x6
c00243b9:	01 d0                	add    eax,edx
c00243bb:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00243c2:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00243c8:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00243cf:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00243d9:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00243df:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00243e6:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00243ed:	75 0c                	jne    c00243fb <ATA::open(int, int, void*)+0x61>
c00243ef:	83 ec 0c             	sub    esp,0xc
c00243f2:	53                   	push   ebx
c00243f3:	e8 78 ff ff ff       	call   c0024370 <ATA::detectCHS()>
c00243f8:	83 c4 10             	add    esp,0x10
c00243fb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024401:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024407:	c1 e0 06             	shl    eax,0x6
c002440a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024411:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002441b:	d1 e8                	shr    eax,1
c002441d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024423:	6a 04                	push   0x4
c0024425:	6a 0c                	push   0xc
c0024427:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002442e:	50                   	push   eax
c002442f:	52                   	push   edx
c0024430:	e8 53 ea ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024435:	90                   	nop
c0024436:	90                   	nop
c0024437:	6a 00                	push   0x0
c0024439:	6a 0c                	push   0xc
c002443b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024442:	50                   	push   eax
c0024443:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024449:	e8 3a ea ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002444e:	83 c4 14             	add    esp,0x14
c0024451:	53                   	push   ebx
c0024452:	e8 d3 01 ff ff       	call   c001462a <PhysicalDisk::startCache()>
c0024457:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002445a:	e8 77 23 ff ff       	call   c00167d6 <createPartitionsForDisk(PhysicalDisk*)>
c002445f:	31 c0                	xor    eax,eax
c0024461:	83 c4 18             	add    esp,0x18
c0024464:	5b                   	pop    ebx
c0024465:	c3                   	ret    

c0024466 <ATAPI::write(unsigned long long, int, void*)>:
c0024466:	b8 03 00 00 00       	mov    eax,0x3
c002446b:	c3                   	ret    

c002446c <ATAPI::close(int, int, void*)>:
c002446c:	83 ec 0c             	sub    esp,0xc
c002446f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024473:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024479:	85 c0                	test   eax,eax
c002447b:	74 0c                	je     c0024489 <ATAPI::close(int, int, void*)+0x1d>
c002447d:	83 ec 0c             	sub    esp,0xc
c0024480:	8b 10                	mov    edx,DWORD PTR [eax]
c0024482:	50                   	push   eax
c0024483:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024486:	83 c4 10             	add    esp,0x10
c0024489:	31 c0                	xor    eax,eax
c002448b:	83 c4 0c             	add    esp,0xc
c002448e:	c3                   	ret    
c002448f:	90                   	nop

c0024490 <ATAPI::ATAPI()>:
c0024490:	83 ec 0c             	sub    esp,0xc
c0024493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024497:	83 ec 04             	sub    esp,0x4
c002449a:	68 00 08 00 00       	push   0x800
c002449f:	68 15 cd 02 c0       	push   0xc002cd15
c00244a4:	50                   	push   eax
c00244a5:	e8 18 01 ff ff       	call   c00145c2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00244aa:	83 c4 10             	add    esp,0x10
c00244ad:	ba 30 cc 02 c0       	mov    edx,0xc002cc30
c00244b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244b6:	89 10                	mov    DWORD PTR [eax],edx
c00244b8:	90                   	nop
c00244b9:	83 c4 0c             	add    esp,0xc
c00244bc:	c3                   	ret    
c00244bd:	90                   	nop

c00244be <ATAPI::readyForCommand()>:
c00244be:	56                   	push   esi
c00244bf:	53                   	push   ebx
c00244c0:	31 db                	xor    ebx,ebx
c00244c2:	50                   	push   eax
c00244c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00244c7:	50                   	push   eax
c00244c8:	6a 0c                	push   0xc
c00244ca:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00244d1:	50                   	push   eax
c00244d2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00244d8:	e8 6b ea ff ff       	call   c0022f48 <IDE::read(unsigned char, unsigned char)>
c00244dd:	83 c4 10             	add    esp,0x10
c00244e0:	a8 88                	test   al,0x88
c00244e2:	74 23                	je     c0024507 <ATAPI::readyForCommand()+0x49>
c00244e4:	43                   	inc    ebx
c00244e5:	83 fb 63             	cmp    ebx,0x63
c00244e8:	7e dd                	jle    c00244c7 <ATAPI::readyForCommand()+0x9>
c00244ea:	51                   	push   ecx
c00244eb:	51                   	push   ecx
c00244ec:	6a 00                	push   0x0
c00244ee:	68 40 42 0f 00       	push   0xf4240
c00244f3:	e8 a4 9c ff ff       	call   c001e19c <nanoSleep(unsigned long long)>
c00244f8:	83 c4 10             	add    esp,0x10
c00244fb:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024501:	75 c4                	jne    c00244c7 <ATAPI::readyForCommand()+0x9>
c0024503:	31 c0                	xor    eax,eax
c0024505:	eb 02                	jmp    c0024509 <ATAPI::readyForCommand()+0x4b>
c0024507:	b0 01                	mov    al,0x1
c0024509:	5a                   	pop    edx
c002450a:	5b                   	pop    ebx
c002450b:	5e                   	pop    esi
c002450c:	c3                   	ret    
c002450d:	90                   	nop

c002450e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002450e:	55                   	push   ebp
c002450f:	57                   	push   edi
c0024510:	56                   	push   esi
c0024511:	53                   	push   ebx
c0024512:	83 ec 20             	sub    esp,0x20
c0024515:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024519:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002451d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024521:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024525:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024529:	6a 01                	push   0x1
c002452b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024532:	50                   	push   eax
c0024533:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024539:	e8 56 eb ff ff       	call   c0023094 <IDE::enableIRQs(unsigned char, bool)>
c002453e:	5e                   	pop    esi
c002453f:	58                   	pop    eax
c0024540:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024547:	50                   	push   eax
c0024548:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002454e:	e8 0f e9 ff ff       	call   c0022e62 <IDE::prepareInterrupt(unsigned char)>
c0024553:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024556:	e8 63 ff ff ff       	call   c00244be <ATAPI::readyForCommand()>
c002455b:	83 c4 10             	add    esp,0x10
c002455e:	84 c0                	test   al,al
c0024560:	75 0a                	jne    c002456c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024562:	bb 01 00 00 00       	mov    ebx,0x1
c0024567:	e9 57 02 00 00       	jmp    c00247c3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002456c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024572:	c1 e0 04             	shl    eax,0x4
c0024575:	0f b6 c0             	movzx  eax,al
c0024578:	50                   	push   eax
c0024579:	6a 06                	push   0x6
c002457b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024582:	50                   	push   eax
c0024583:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024589:	e8 fa e8 ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002458e:	6a 00                	push   0x0
c0024590:	6a 01                	push   0x1
c0024592:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024599:	50                   	push   eax
c002459a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245a0:	e8 e3 e8 ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245a5:	83 c4 20             	add    esp,0x20
c00245a8:	0f b6 c3             	movzx  eax,bl
c00245ab:	0f b6 df             	movzx  ebx,bh
c00245ae:	50                   	push   eax
c00245af:	6a 04                	push   0x4
c00245b1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245b8:	50                   	push   eax
c00245b9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245bf:	e8 c4 e8 ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245c4:	53                   	push   ebx
c00245c5:	6a 05                	push   0x5
c00245c7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245ce:	50                   	push   eax
c00245cf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245d5:	e8 ae e8 ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245da:	83 c4 20             	add    esp,0x20
c00245dd:	68 a0 00 00 00       	push   0xa0
c00245e2:	6a 07                	push   0x7
c00245e4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245eb:	50                   	push   eax
c00245ec:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245f2:	e8 91 e8 ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245f7:	83 c4 0c             	add    esp,0xc
c00245fa:	6a 01                	push   0x1
c00245fc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024603:	50                   	push   eax
c0024604:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002460a:	e8 25 f4 ff ff       	call   c0023a34 <IDE::polling(unsigned char, unsigned int)>
c002460f:	83 c4 10             	add    esp,0x10
c0024612:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024618:	84 c0                	test   al,al
c002461a:	74 23                	je     c002463f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002461c:	0f b6 d8             	movzx  ebx,al
c002461f:	0f b6 d2             	movzx  edx,dl
c0024622:	53                   	push   ebx
c0024623:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002462a:	50                   	push   eax
c002462b:	52                   	push   edx
c002462c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024632:	e8 67 f2 ff ff       	call   c002389e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024637:	83 c4 10             	add    esp,0x10
c002463a:	e9 84 01 00 00       	jmp    c00247c3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002463f:	0f b6 d2             	movzx  edx,dl
c0024642:	53                   	push   ebx
c0024643:	53                   	push   ebx
c0024644:	52                   	push   edx
c0024645:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002464b:	e8 26 e8 ff ff       	call   c0022e76 <IDE::getBase(unsigned char)>
c0024650:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024654:	b9 06 00 00 00       	mov    ecx,0x6
c0024659:	89 c2                	mov    edx,eax
c002465b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002465e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024662:	83 c4 10             	add    esp,0x10
c0024665:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002466b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024672:	85 db                	test   ebx,ebx
c0024674:	0f 84 ec 00 00 00    	je     c0024766 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002467a:	51                   	push   ecx
c002467b:	51                   	push   ecx
c002467c:	52                   	push   edx
c002467d:	50                   	push   eax
c002467e:	e8 73 e9 ff ff       	call   c0022ff6 <IDE::waitInterrupt(unsigned char)>
c0024683:	83 c4 10             	add    esp,0x10
c0024686:	84 c0                	test   al,al
c0024688:	0f 84 d4 fe ff ff    	je     c0024562 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002468e:	56                   	push   esi
c002468f:	56                   	push   esi
c0024690:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024697:	50                   	push   eax
c0024698:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002469e:	e8 bf e7 ff ff       	call   c0022e62 <IDE::prepareInterrupt(unsigned char)>
c00246a3:	83 c4 0c             	add    esp,0xc
c00246a6:	6a 04                	push   0x4
c00246a8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246af:	50                   	push   eax
c00246b0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246b6:	e8 8d e8 ff ff       	call   c0022f48 <IDE::read(unsigned char, unsigned char)>
c00246bb:	83 c4 0c             	add    esp,0xc
c00246be:	89 c6                	mov    esi,eax
c00246c0:	6a 05                	push   0x5
c00246c2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246c9:	50                   	push   eax
c00246ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246d0:	e8 73 e8 ff ff       	call   c0022f48 <IDE::read(unsigned char, unsigned char)>
c00246d5:	89 f1                	mov    ecx,esi
c00246d7:	0f b6 c0             	movzx  eax,al
c00246da:	0f b6 f1             	movzx  esi,cl
c00246dd:	c1 e0 08             	shl    eax,0x8
c00246e0:	09 c6                	or     esi,eax
c00246e2:	d1 fe                	sar    esi,1
c00246e4:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00246e8:	83 c4 10             	add    esp,0x10
c00246eb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00246f0:	74 41                	je     c0024733 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00246f2:	31 c9                	xor    ecx,ecx
c00246f4:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00246fa:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024701:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024705:	75 0a                	jne    c0024711 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024707:	01 c9                	add    ecx,ecx
c0024709:	01 cd                	add    ebp,ecx
c002470b:	4b                   	dec    ebx
c002470c:	e9 54 ff ff ff       	jmp    c0024665 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024711:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024716:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002471a:	51                   	push   ecx
c002471b:	51                   	push   ecx
c002471c:	52                   	push   edx
c002471d:	50                   	push   eax
c002471e:	e8 53 e7 ff ff       	call   c0022e76 <IDE::getBase(unsigned char)>
c0024723:	89 c2                	mov    edx,eax
c0024725:	89 f0                	mov    eax,esi
c0024727:	66 ef                	out    dx,ax
c0024729:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002472d:	83 c4 10             	add    esp,0x10
c0024730:	41                   	inc    ecx
c0024731:	eb c1                	jmp    c00246f4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024733:	31 f6                	xor    esi,esi
c0024735:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002473b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024742:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024746:	75 06                	jne    c002474e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024748:	01 f6                	add    esi,esi
c002474a:	01 f5                	add    ebp,esi
c002474c:	eb bd                	jmp    c002470b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002474e:	51                   	push   ecx
c002474f:	51                   	push   ecx
c0024750:	52                   	push   edx
c0024751:	50                   	push   eax
c0024752:	e8 1f e7 ff ff       	call   c0022e76 <IDE::getBase(unsigned char)>
c0024757:	89 c2                	mov    edx,eax
c0024759:	66 ed                	in     ax,dx
c002475b:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024760:	83 c4 10             	add    esp,0x10
c0024763:	46                   	inc    esi
c0024764:	eb cf                	jmp    c0024735 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024766:	51                   	push   ecx
c0024767:	51                   	push   ecx
c0024768:	52                   	push   edx
c0024769:	50                   	push   eax
c002476a:	e8 87 e8 ff ff       	call   c0022ff6 <IDE::waitInterrupt(unsigned char)>
c002476f:	83 c4 10             	add    esp,0x10
c0024772:	84 c0                	test   al,al
c0024774:	0f 84 e8 fd ff ff    	je     c0024562 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002477a:	bb a0 86 01 00       	mov    ebx,0x186a0
c002477f:	52                   	push   edx
c0024780:	52                   	push   edx
c0024781:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024788:	50                   	push   eax
c0024789:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002478f:	e8 ce e6 ff ff       	call   c0022e62 <IDE::prepareInterrupt(unsigned char)>
c0024794:	83 c4 10             	add    esp,0x10
c0024797:	50                   	push   eax
c0024798:	50                   	push   eax
c0024799:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247a0:	50                   	push   eax
c00247a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247a7:	e8 ca e6 ff ff       	call   c0022e76 <IDE::getBase(unsigned char)>
c00247ac:	8d 50 07             	lea    edx,[eax+0x7]
c00247af:	ec                   	in     al,dx
c00247b0:	83 c4 10             	add    esp,0x10
c00247b3:	a8 88                	test   al,0x88
c00247b5:	74 0a                	je     c00247c1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00247b7:	4b                   	dec    ebx
c00247b8:	75 dd                	jne    c0024797 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00247ba:	bb 02 00 00 00       	mov    ebx,0x2
c00247bf:	eb 02                	jmp    c00247c3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00247c1:	31 db                	xor    ebx,ebx
c00247c3:	83 c4 1c             	add    esp,0x1c
c00247c6:	89 d8                	mov    eax,ebx
c00247c8:	5b                   	pop    ebx
c00247c9:	5e                   	pop    esi
c00247ca:	5f                   	pop    edi
c00247cb:	5d                   	pop    ebp
c00247cc:	c3                   	ret    
c00247cd:	90                   	nop

c00247ce <ATAPI::diskRemoved()>:
c00247ce:	83 ec 18             	sub    esp,0x18
c00247d1:	68 21 cd 02 c0       	push   0xc002cd21
c00247d6:	e8 9d e5 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00247db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00247df:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00247e6:	83 c4 1c             	add    esp,0x1c
c00247e9:	c3                   	ret    

c00247ea <ATAPI::eject()>:
c00247ea:	57                   	push   edi
c00247eb:	b9 03 00 00 00       	mov    ecx,0x3
c00247f0:	53                   	push   ebx
c00247f1:	83 ec 14             	sub    esp,0x14
c00247f4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00247f8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00247fc:	fc                   	cld    
c00247fd:	31 c0                	xor    eax,eax
c00247ff:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024801:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024806:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002480b:	50                   	push   eax
c002480c:	50                   	push   eax
c002480d:	6a 00                	push   0x0
c002480f:	6a 00                	push   0x0
c0024811:	6a 00                	push   0x0
c0024813:	6a 02                	push   0x2
c0024815:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024819:	50                   	push   eax
c002481a:	53                   	push   ebx
c002481b:	e8 ee fc ff ff       	call   c002450e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024820:	83 c4 14             	add    esp,0x14
c0024823:	53                   	push   ebx
c0024824:	e8 a5 ff ff ff       	call   c00247ce <ATAPI::diskRemoved()>
c0024829:	83 c4 24             	add    esp,0x24
c002482c:	31 c0                	xor    eax,eax
c002482e:	5b                   	pop    ebx
c002482f:	5f                   	pop    edi
c0024830:	c3                   	ret    
c0024831:	90                   	nop

c0024832 <ATAPI::diskInserted()>:
c0024832:	53                   	push   ebx
c0024833:	83 ec 14             	sub    esp,0x14
c0024836:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002483a:	68 38 cd 02 c0       	push   0xc002cd38
c002483f:	e8 34 e5 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0024844:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c002484b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002484e:	e8 d7 fd fe ff       	call   c001462a <PhysicalDisk::startCache()>
c0024853:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024857:	83 c4 18             	add    esp,0x18
c002485a:	5b                   	pop    ebx
c002485b:	e9 76 1f ff ff       	jmp    c00167d6 <createPartitionsForDisk(PhysicalDisk*)>

c0024860 <ATAPI::detectMedia()>:
c0024860:	56                   	push   esi
c0024861:	53                   	push   ebx
c0024862:	83 ec 28             	sub    esp,0x28
c0024865:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024869:	6a 0c                	push   0xc
c002486b:	6a 00                	push   0x0
c002486d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024871:	56                   	push   esi
c0024872:	e8 01 bf fd ff       	call   c0000778 <memset>
c0024877:	58                   	pop    eax
c0024878:	5a                   	pop    edx
c0024879:	6a 00                	push   0x0
c002487b:	6a 00                	push   0x0
c002487d:	6a 00                	push   0x0
c002487f:	6a 00                	push   0x0
c0024881:	56                   	push   esi
c0024882:	53                   	push   ebx
c0024883:	e8 86 fc ff ff       	call   c002450e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024888:	83 c4 1c             	add    esp,0x1c
c002488b:	6a 0c                	push   0xc
c002488d:	6a 00                	push   0x0
c002488f:	56                   	push   esi
c0024890:	e8 e3 be fd ff       	call   c0000778 <memset>
c0024895:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002489a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002489f:	59                   	pop    ecx
c00248a0:	58                   	pop    eax
c00248a1:	6a 01                	push   0x1
c00248a3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00248a7:	50                   	push   eax
c00248a8:	6a 00                	push   0x0
c00248aa:	6a 12                	push   0x12
c00248ac:	56                   	push   esi
c00248ad:	53                   	push   ebx
c00248ae:	e8 5b fc ff ff       	call   c002450e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00248b3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00248b7:	83 c4 20             	add    esp,0x20
c00248ba:	83 e0 7f             	and    eax,0x7f
c00248bd:	3c 70                	cmp    al,0x70
c00248bf:	74 15                	je     c00248d6 <ATAPI::detectMedia()+0x76>
c00248c1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00248c8:	75 0c                	jne    c00248d6 <ATAPI::detectMedia()+0x76>
c00248ca:	83 ec 0c             	sub    esp,0xc
c00248cd:	53                   	push   ebx
c00248ce:	e8 5f ff ff ff       	call   c0024832 <ATAPI::diskInserted()>
c00248d3:	83 c4 10             	add    esp,0x10
c00248d6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00248da:	83 e0 0f             	and    eax,0xf
c00248dd:	3c 02                	cmp    al,0x2
c00248df:	75 1b                	jne    c00248fc <ATAPI::detectMedia()+0x9c>
c00248e1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00248e6:	75 2d                	jne    c0024915 <ATAPI::detectMedia()+0xb5>
c00248e8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00248ef:	74 24                	je     c0024915 <ATAPI::detectMedia()+0xb5>
c00248f1:	83 ec 0c             	sub    esp,0xc
c00248f4:	53                   	push   ebx
c00248f5:	e8 d4 fe ff ff       	call   c00247ce <ATAPI::diskRemoved()>
c00248fa:	eb 16                	jmp    c0024912 <ATAPI::detectMedia()+0xb2>
c00248fc:	84 c0                	test   al,al
c00248fe:	75 15                	jne    c0024915 <ATAPI::detectMedia()+0xb5>
c0024900:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024907:	75 0c                	jne    c0024915 <ATAPI::detectMedia()+0xb5>
c0024909:	83 ec 0c             	sub    esp,0xc
c002490c:	53                   	push   ebx
c002490d:	e8 20 ff ff ff       	call   c0024832 <ATAPI::diskInserted()>
c0024912:	83 c4 10             	add    esp,0x10
c0024915:	83 c4 24             	add    esp,0x24
c0024918:	5b                   	pop    ebx
c0024919:	5e                   	pop    esi
c002491a:	c3                   	ret    
c002491b:	90                   	nop

c002491c <ATAPI::open(int, int, void*)>:
c002491c:	53                   	push   ebx
c002491d:	83 ec 08             	sub    esp,0x8
c0024920:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024924:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024928:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002492c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024932:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024938:	c1 e0 06             	shl    eax,0x6
c002493b:	01 d0                	add    eax,edx
c002493d:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024944:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002494a:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024951:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002495b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024961:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024968:	6a 04                	push   0x4
c002496a:	6a 0c                	push   0xc
c002496c:	51                   	push   ecx
c002496d:	52                   	push   edx
c002496e:	e8 15 e5 ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024973:	90                   	nop
c0024974:	90                   	nop
c0024975:	6a 00                	push   0x0
c0024977:	6a 0c                	push   0xc
c0024979:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024980:	50                   	push   eax
c0024981:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024987:	e8 fc e4 ff ff       	call   c0022e88 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002498c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024993:	83 c4 14             	add    esp,0x14
c0024996:	53                   	push   ebx
c0024997:	e8 c4 fe ff ff       	call   c0024860 <ATAPI::detectMedia()>
c002499c:	31 c0                	xor    eax,eax
c002499e:	83 c4 18             	add    esp,0x18
c00249a1:	5b                   	pop    ebx
c00249a2:	c3                   	ret    
c00249a3:	90                   	nop

c00249a4 <ATAPI::read(unsigned long long, int, void*)>:
c00249a4:	55                   	push   ebp
c00249a5:	57                   	push   edi
c00249a6:	56                   	push   esi
c00249a7:	53                   	push   ebx
c00249a8:	83 ec 1c             	sub    esp,0x1c
c00249ab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00249af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00249b3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00249b7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00249be:	74 41                	je     c0024a01 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00249c0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00249c4:	b9 03 00 00 00       	mov    ecx,0x3
c00249c9:	fc                   	cld    
c00249ca:	31 c0                	xor    eax,eax
c00249cc:	86 fb                	xchg   bl,bh
c00249ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00249d0:	c1 c3 10             	rol    ebx,0x10
c00249d3:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00249d8:	89 e8                	mov    eax,ebp
c00249da:	86 fb                	xchg   bl,bh
c00249dc:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00249e0:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00249e4:	50                   	push   eax
c00249e5:	50                   	push   eax
c00249e6:	55                   	push   ebp
c00249e7:	c1 e5 0b             	shl    ebp,0xb
c00249ea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00249ee:	6a 00                	push   0x0
c00249f0:	55                   	push   ebp
c00249f1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00249f5:	50                   	push   eax
c00249f6:	56                   	push   esi
c00249f7:	e8 12 fb ff ff       	call   c002450e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00249fc:	83 c4 20             	add    esp,0x20
c00249ff:	eb 1a                	jmp    c0024a1b <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024a01:	83 ec 0c             	sub    esp,0xc
c0024a04:	56                   	push   esi
c0024a05:	e8 56 fe ff ff       	call   c0024860 <ATAPI::detectMedia()>
c0024a0a:	83 c4 10             	add    esp,0x10
c0024a0d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024a14:	75 aa                	jne    c00249c0 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024a16:	b8 02 00 00 00       	mov    eax,0x2
c0024a1b:	83 c4 1c             	add    esp,0x1c
c0024a1e:	5b                   	pop    ebx
c0024a1f:	5e                   	pop    esi
c0024a20:	5f                   	pop    edi
c0024a21:	5d                   	pop    ebp
c0024a22:	c3                   	ret    
c0024a23:	90                   	nop

c0024a24 <SATA::close(int, int, void*)>:
c0024a24:	83 ec 0c             	sub    esp,0xc
c0024a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a2b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024a31:	85 c0                	test   eax,eax
c0024a33:	74 0c                	je     c0024a41 <SATA::close(int, int, void*)+0x1d>
c0024a35:	83 ec 0c             	sub    esp,0xc
c0024a38:	8b 10                	mov    edx,DWORD PTR [eax]
c0024a3a:	50                   	push   eax
c0024a3b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024a3e:	83 c4 10             	add    esp,0x10
c0024a41:	31 c0                	xor    eax,eax
c0024a43:	83 c4 0c             	add    esp,0xc
c0024a46:	c3                   	ret    
c0024a47:	90                   	nop

c0024a48 <SATA::powerSaving(PowerSavingLevel)>:
c0024a48:	c3                   	ret    
c0024a49:	90                   	nop

c0024a4a <SATA::open(int, int, void*)>:
c0024a4a:	56                   	push   esi
c0024a4b:	53                   	push   ebx
c0024a4c:	50                   	push   eax
c0024a4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024a55:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024a5f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024a65:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024a6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024a73:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024a7d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024a83:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024a8a:	e8 51 b4 fe ff       	call   c000fee0 <Phys::allocatePage()>
c0024a8f:	89 c6                	mov    esi,eax
c0024a91:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024a97:	81 c6 00 10 00 00    	add    esi,0x1000
c0024a9d:	e8 3e b4 fe ff       	call   c000fee0 <Phys::allocatePage()>
c0024aa2:	39 c6                	cmp    esi,eax
c0024aa4:	74 10                	je     c0024ab6 <SATA::open(int, int, void*)+0x6c>
c0024aa6:	83 ec 0c             	sub    esp,0xc
c0024aa9:	68 60 cc 02 c0       	push   0xc002cc60
c0024aae:	e8 a0 59 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c0024ab3:	83 c4 10             	add    esp,0x10
c0024ab6:	83 ec 0c             	sub    esp,0xc
c0024ab9:	6a 02                	push   0x2
c0024abb:	e8 7f d0 fe ff       	call   c0011b3f <Virt::allocateKernelVirtualPages(int)>
c0024ac0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024ac6:	e8 1b d3 fe ff       	call   c0011de6 <Virt::getAKernelVAS()>
c0024acb:	6a 03                	push   0x3
c0024acd:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024ad3:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024ad9:	50                   	push   eax
c0024ada:	e8 29 d7 fe ff       	call   c0012208 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024adf:	83 c4 14             	add    esp,0x14
c0024ae2:	53                   	push   ebx
c0024ae3:	e8 42 fb fe ff       	call   c001462a <PhysicalDisk::startCache()>
c0024ae8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024aeb:	e8 e6 1c ff ff       	call   c00167d6 <createPartitionsForDisk(PhysicalDisk*)>
c0024af0:	83 c4 14             	add    esp,0x14
c0024af3:	31 c0                	xor    eax,eax
c0024af5:	5b                   	pop    ebx
c0024af6:	5e                   	pop    esi
c0024af7:	c3                   	ret    

c0024af8 <SATA::SATA()>:
c0024af8:	83 ec 0c             	sub    esp,0xc
c0024afb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024aff:	83 ec 04             	sub    esp,0x4
c0024b02:	68 00 02 00 00       	push   0x200
c0024b07:	68 74 cc 02 c0       	push   0xc002cc74
c0024b0c:	50                   	push   eax
c0024b0d:	e8 b0 fa fe ff       	call   c00145c2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024b12:	83 c4 10             	add    esp,0x10
c0024b15:	ba e4 cc 02 c0       	mov    edx,0xc002cce4
c0024b1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b1e:	89 10                	mov    DWORD PTR [eax],edx
c0024b20:	90                   	nop
c0024b21:	83 c4 0c             	add    esp,0xc
c0024b24:	c3                   	ret    
c0024b25:	90                   	nop

c0024b26 <SATA::access(unsigned long long, int, void*, bool)>:
c0024b26:	55                   	push   ebp
c0024b27:	57                   	push   edi
c0024b28:	56                   	push   esi
c0024b29:	53                   	push   ebx
c0024b2a:	83 ec 2c             	sub    esp,0x2c
c0024b2d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024b31:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024b35:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024b39:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024b3d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024b41:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024b46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024b4a:	7e 10                	jle    c0024b5c <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024b4c:	83 ec 0c             	sub    esp,0xc
c0024b4f:	68 84 cc 02 c0       	push   0xc002cc84
c0024b54:	e8 fa 58 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c0024b59:	83 c4 10             	add    esp,0x10
c0024b5c:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024b62:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024b68:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024b6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024b72:	89 f0                	mov    eax,esi
c0024b74:	c1 e0 07             	shl    eax,0x7
c0024b77:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024b7b:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024b85:	53                   	push   ebx
c0024b86:	8d 46 02             	lea    eax,[esi+0x2]
c0024b89:	53                   	push   ebx
c0024b8a:	c1 e0 07             	shl    eax,0x7
c0024b8d:	bb 01 00 00 00       	mov    ebx,0x1
c0024b92:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024b96:	50                   	push   eax
c0024b97:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024b9d:	e8 aa ef ff ff       	call   c0023b4c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024ba2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024ba6:	83 c4 10             	add    esp,0x10
c0024ba9:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024bae:	0f 84 ce 01 00 00    	je     c0024d82 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024bb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024bb8:	c1 e0 09             	shl    eax,0x9
c0024bbb:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024bc0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024bc4:	74 17                	je     c0024bdd <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024bc6:	51                   	push   ecx
c0024bc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024bcb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024bcf:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024bd5:	e8 6a bb fd ff       	call   c0000744 <memcpy>
c0024bda:	83 c4 10             	add    esp,0x10
c0024bdd:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024be3:	8d 46 02             	lea    eax,[esi+0x2]
c0024be6:	c1 e0 07             	shl    eax,0x7
c0024be9:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024bed:	8b 00                	mov    eax,DWORD PTR [eax]
c0024bef:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024bf5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024bfb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024bff:	c1 e1 05             	shl    ecx,0x5
c0024c02:	01 c8                	add    eax,ecx
c0024c04:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024c08:	8a 18                	mov    bl,BYTE PTR [eax]
c0024c0a:	83 e1 01             	and    ecx,0x1
c0024c0d:	83 e3 bf             	and    ebx,0xffffffbf
c0024c10:	c1 e1 06             	shl    ecx,0x6
c0024c13:	09 d9                	or     ecx,ebx
c0024c15:	88 08                	mov    BYTE PTR [eax],cl
c0024c17:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024c19:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024c1f:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024c25:	89 08                	mov    DWORD PTR [eax],ecx
c0024c27:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024c2d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024c33:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024c39:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024c3c:	52                   	push   edx
c0024c3d:	68 90 00 00 00       	push   0x90
c0024c42:	6a 00                	push   0x0
c0024c44:	53                   	push   ebx
c0024c45:	e8 2e bb fd ff       	call   c0000778 <memset>
c0024c4a:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024c50:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024c54:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024c5a:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024c5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024c62:	83 c4 10             	add    esp,0x10
c0024c65:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024c68:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024c6e:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024c74:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024c79:	09 c8                	or     eax,ecx
c0024c7b:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024c81:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024c84:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024c8b:	66 25 00 7f          	and    ax,0x7f00
c0024c8f:	66 0d 27 80          	or     ax,0x8027
c0024c93:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024c98:	66 89 03             	mov    WORD PTR [ebx],ax
c0024c9b:	19 c0                	sbb    eax,eax
c0024c9d:	83 e0 f0             	and    eax,0xfffffff0
c0024ca0:	83 c0 35             	add    eax,0x35
c0024ca3:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024ca6:	89 f8                	mov    eax,edi
c0024ca8:	c1 e8 10             	shr    eax,0x10
c0024cab:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024cae:	89 f8                	mov    eax,edi
c0024cb0:	c1 e8 18             	shr    eax,0x18
c0024cb3:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024cb6:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024cba:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024cbd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024cc1:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024cc4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024cc8:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024ccc:	89 f3                	mov    ebx,esi
c0024cce:	31 c0                	xor    eax,eax
c0024cd0:	c1 e3 07             	shl    ebx,0x7
c0024cd3:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024cd7:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024cdd:	80 e1 88             	and    cl,0x88
c0024ce0:	74 0a                	je     c0024cec <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024ce2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024ce7:	74 0a                	je     c0024cf3 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024ce9:	40                   	inc    eax
c0024cea:	eb eb                	jmp    c0024cd7 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024cec:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024cf1:	75 0a                	jne    c0024cfd <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024cf3:	83 ec 0c             	sub    esp,0xc
c0024cf6:	68 bd cc 02 c0       	push   0xc002ccbd
c0024cfb:	eb 56                	jmp    c0024d53 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024cfd:	b8 01 00 00 00       	mov    eax,0x1
c0024d02:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024d06:	c1 e6 07             	shl    esi,0x7
c0024d09:	d3 e0                	shl    eax,cl
c0024d0b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024d0f:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024d15:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024d1b:	85 c8                	test   eax,ecx
c0024d1d:	74 20                	je     c0024d3f <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024d1f:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024d25:	0f ba e1 1e          	bt     ecx,0x1e
c0024d29:	73 ea                	jae    c0024d15 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024d2b:	83 ec 0c             	sub    esp,0xc
c0024d2e:	31 db                	xor    ebx,ebx
c0024d30:	68 cb cc 02 c0       	push   0xc002cccb
c0024d35:	e8 19 57 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c0024d3a:	83 c4 10             	add    esp,0x10
c0024d3d:	eb 43                	jmp    c0024d82 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d3f:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024d45:	0f ba e0 1e          	bt     eax,0x1e
c0024d49:	73 17                	jae    c0024d62 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024d4b:	83 ec 0c             	sub    esp,0xc
c0024d4e:	68 cb cc 02 c0       	push   0xc002cccb
c0024d53:	e8 fb 56 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c0024d58:	bb 01 00 00 00       	mov    ebx,0x1
c0024d5d:	83 c4 10             	add    esp,0x10
c0024d60:	eb 20                	jmp    c0024d82 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d62:	31 db                	xor    ebx,ebx
c0024d64:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024d69:	75 17                	jne    c0024d82 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d6b:	50                   	push   eax
c0024d6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d70:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024d76:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024d7a:	e8 c5 b9 fd ff       	call   c0000744 <memcpy>
c0024d7f:	83 c4 10             	add    esp,0x10
c0024d82:	83 c4 2c             	add    esp,0x2c
c0024d85:	89 d8                	mov    eax,ebx
c0024d87:	5b                   	pop    ebx
c0024d88:	5e                   	pop    esi
c0024d89:	5f                   	pop    edi
c0024d8a:	5d                   	pop    ebp
c0024d8b:	c3                   	ret    

c0024d8c <SATA::read(unsigned long long, int, void*)>:
c0024d8c:	57                   	push   edi
c0024d8d:	b8 04 00 00 00       	mov    eax,0x4
c0024d92:	56                   	push   esi
c0024d93:	53                   	push   ebx
c0024d94:	83 ec 10             	sub    esp,0x10
c0024d97:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024d9b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024d9f:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024da2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024da6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024daa:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024db0:	77 3b                	ja     c0024ded <SATA::read(unsigned long long, int, void*)+0x61>
c0024db2:	b8 06 00 00 00       	mov    eax,0x6
c0024db7:	85 d2                	test   edx,edx
c0024db9:	74 32                	je     c0024ded <SATA::read(unsigned long long, int, void*)+0x61>
c0024dbb:	50                   	push   eax
c0024dbc:	50                   	push   eax
c0024dbd:	6a 00                	push   0x0
c0024dbf:	52                   	push   edx
c0024dc0:	53                   	push   ebx
c0024dc1:	57                   	push   edi
c0024dc2:	56                   	push   esi
c0024dc3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024dc7:	e8 5a fd ff ff       	call   c0024b26 <SATA::access(unsigned long long, int, void*, bool)>
c0024dcc:	83 c4 20             	add    esp,0x20
c0024dcf:	85 c0                	test   eax,eax
c0024dd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024dd5:	75 11                	jne    c0024de8 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024dd7:	01 1d 68 25 03 c0    	add    DWORD PTR ds:0xc0032568,ebx
c0024ddd:	e8 b2 bb fe ff       	call   c0010994 <VgaText::updateDiskUsage()>
c0024de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024de6:	eb 05                	jmp    c0024ded <SATA::read(unsigned long long, int, void*)+0x61>
c0024de8:	b8 01 00 00 00       	mov    eax,0x1
c0024ded:	83 c4 10             	add    esp,0x10
c0024df0:	5b                   	pop    ebx
c0024df1:	5e                   	pop    esi
c0024df2:	5f                   	pop    edi
c0024df3:	c3                   	ret    

c0024df4 <SATA::write(unsigned long long, int, void*)>:
c0024df4:	55                   	push   ebp
c0024df5:	b8 04 00 00 00       	mov    eax,0x4
c0024dfa:	57                   	push   edi
c0024dfb:	56                   	push   esi
c0024dfc:	53                   	push   ebx
c0024dfd:	83 ec 1c             	sub    esp,0x1c
c0024e00:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024e04:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024e08:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024e0b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024e0f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024e13:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024e19:	77 56                	ja     c0024e71 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024e1b:	b8 06 00 00 00       	mov    eax,0x6
c0024e20:	85 ff                	test   edi,edi
c0024e22:	74 4d                	je     c0024e71 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024e24:	89 ee                	mov    esi,ebp
c0024e26:	c1 e6 09             	shl    esi,0x9
c0024e29:	01 fe                	add    esi,edi
c0024e2b:	89 c8                	mov    eax,ecx
c0024e2d:	89 da                	mov    edx,ebx
c0024e2f:	83 c0 01             	add    eax,0x1
c0024e32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024e36:	83 d2 00             	adc    edx,0x0
c0024e39:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024e3d:	50                   	push   eax
c0024e3e:	50                   	push   eax
c0024e3f:	6a 01                	push   0x1
c0024e41:	57                   	push   edi
c0024e42:	81 c7 00 02 00 00    	add    edi,0x200
c0024e48:	6a 01                	push   0x1
c0024e4a:	53                   	push   ebx
c0024e4b:	51                   	push   ecx
c0024e4c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024e50:	e8 d1 fc ff ff       	call   c0024b26 <SATA::access(unsigned long long, int, void*, bool)>
c0024e55:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024e59:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024e5d:	83 c4 20             	add    esp,0x20
c0024e60:	39 f7                	cmp    edi,esi
c0024e62:	75 c7                	jne    c0024e2b <SATA::write(unsigned long long, int, void*)+0x37>
c0024e64:	01 2d 64 25 03 c0    	add    DWORD PTR ds:0xc0032564,ebp
c0024e6a:	e8 25 bb fe ff       	call   c0010994 <VgaText::updateDiskUsage()>
c0024e6f:	31 c0                	xor    eax,eax
c0024e71:	83 c4 1c             	add    esp,0x1c
c0024e74:	5b                   	pop    ebx
c0024e75:	5e                   	pop    esi
c0024e76:	5f                   	pop    edi
c0024e77:	5d                   	pop    ebp
c0024e78:	c3                   	ret    
c0024e79:	90                   	nop

c0024e7a <SATAPI::write(unsigned long long, int, void*)>:
c0024e7a:	b8 03 00 00 00       	mov    eax,0x3
c0024e7f:	c3                   	ret    

c0024e80 <SATAPI::close(int, int, void*)>:
c0024e80:	83 ec 0c             	sub    esp,0xc
c0024e83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e87:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024e8d:	85 c0                	test   eax,eax
c0024e8f:	74 0c                	je     c0024e9d <SATAPI::close(int, int, void*)+0x1d>
c0024e91:	83 ec 0c             	sub    esp,0xc
c0024e94:	8b 10                	mov    edx,DWORD PTR [eax]
c0024e96:	50                   	push   eax
c0024e97:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024e9a:	83 c4 10             	add    esp,0x10
c0024e9d:	31 c0                	xor    eax,eax
c0024e9f:	83 c4 0c             	add    esp,0xc
c0024ea2:	c3                   	ret    
c0024ea3:	90                   	nop

c0024ea4 <SATAPI::SATAPI()>:
c0024ea4:	83 ec 0c             	sub    esp,0xc
c0024ea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024eab:	83 ec 04             	sub    esp,0x4
c0024eae:	68 00 08 00 00       	push   0x800
c0024eb3:	68 14 cd 02 c0       	push   0xc002cd14
c0024eb8:	50                   	push   eax
c0024eb9:	e8 04 f7 fe ff       	call   c00145c2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024ebe:	83 c4 10             	add    esp,0x10
c0024ec1:	ba c0 cd 02 c0       	mov    edx,0xc002cdc0
c0024ec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024eca:	89 10                	mov    DWORD PTR [eax],edx
c0024ecc:	90                   	nop
c0024ecd:	83 c4 0c             	add    esp,0xc
c0024ed0:	c3                   	ret    
c0024ed1:	90                   	nop

c0024ed2 <SATAPI::diskRemoved()>:
c0024ed2:	83 ec 18             	sub    esp,0x18
c0024ed5:	68 20 cd 02 c0       	push   0xc002cd20
c0024eda:	e8 99 de fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0024edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ee3:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024eea:	83 c4 1c             	add    esp,0x1c
c0024eed:	c3                   	ret    

c0024eee <SATAPI::diskInserted()>:
c0024eee:	53                   	push   ebx
c0024eef:	83 ec 14             	sub    esp,0x14
c0024ef2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024ef6:	68 37 cd 02 c0       	push   0xc002cd37
c0024efb:	e8 78 de fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0024f00:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024f07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024f0a:	e8 1b f7 fe ff       	call   c001462a <PhysicalDisk::startCache()>
c0024f0f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024f13:	83 c4 18             	add    esp,0x18
c0024f16:	5b                   	pop    ebx
c0024f17:	e9 ba 18 ff ff       	jmp    c00167d6 <createPartitionsForDisk(PhysicalDisk*)>

c0024f1c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024f1c:	55                   	push   ebp
c0024f1d:	57                   	push   edi
c0024f1e:	56                   	push   esi
c0024f1f:	53                   	push   ebx
c0024f20:	83 ec 24             	sub    esp,0x24
c0024f23:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024f27:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024f2b:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0024f31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024f35:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024f39:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0024f3f:	8d 5f 02             	lea    ebx,[edi+0x2]
c0024f42:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024f48:	c1 e3 07             	shl    ebx,0x7
c0024f4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024f4f:	89 f8                	mov    eax,edi
c0024f51:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0024f55:	c1 e0 07             	shl    eax,0x7
c0024f58:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024f5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024f60:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024f6a:	53                   	push   ebx
c0024f6b:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0024f71:	e8 d6 eb ff ff       	call   c0023b4c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024f76:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024f7a:	83 c4 10             	add    esp,0x10
c0024f7d:	b8 01 00 00 00       	mov    eax,0x1
c0024f82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0024f87:	0f 84 8a 01 00 00    	je     c0025117 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0024f8d:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024f93:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024f95:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024f9b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024fa1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0024fa5:	c1 e1 05             	shl    ecx,0x5
c0024fa8:	01 c8                	add    eax,ecx
c0024faa:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024fac:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024fb2:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024fb8:	89 08                	mov    DWORD PTR [eax],ecx
c0024fba:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024fc0:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024fc6:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024fcc:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024fcf:	52                   	push   edx
c0024fd0:	68 90 00 00 00       	push   0x90
c0024fd5:	6a 00                	push   0x0
c0024fd7:	53                   	push   ebx
c0024fd8:	e8 9b b7 fd ff       	call   c0000778 <memset>
c0024fdd:	83 c4 0c             	add    esp,0xc
c0024fe0:	8d 43 40             	lea    eax,[ebx+0x40]
c0024fe3:	6a 0c                	push   0xc
c0024fe5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024fe9:	50                   	push   eax
c0024fea:	e8 55 b7 fd ff       	call   c0000744 <memcpy>
c0024fef:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0024ff5:	89 ea                	mov    edx,ebp
c0024ff7:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024ffd:	c1 ea 18             	shr    edx,0x18
c0025000:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025004:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025007:	8d 48 ff             	lea    ecx,[eax-0x1]
c002500a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002500e:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025014:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c002501a:	25 00 00 c0 ff       	and    eax,0xffc00000
c002501f:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0025023:	09 c8                	or     eax,ecx
c0025025:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025029:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002502f:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025032:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025039:	66 25 00 7f          	and    ax,0x7f00
c002503d:	66 0d 27 80          	or     ax,0x8027
c0025041:	66 89 03             	mov    WORD PTR [ebx],ax
c0025044:	89 e8                	mov    eax,ebp
c0025046:	c1 e8 10             	shr    eax,0x10
c0025049:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002504c:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0025050:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025053:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025057:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002505a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002505e:	83 c4 10             	add    esp,0x10
c0025061:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025065:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025069:	31 c0                	xor    eax,eax
c002506b:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0025071:	80 e1 88             	and    cl,0x88
c0025074:	74 0a                	je     c0025080 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0025076:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002507b:	74 0a                	je     c0025087 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c002507d:	40                   	inc    eax
c002507e:	eb eb                	jmp    c002506b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c0025080:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025085:	75 0f                	jne    c0025096 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0025087:	83 ec 0c             	sub    esp,0xc
c002508a:	68 bd cc 02 c0       	push   0xc002ccbd
c002508f:	e8 bf 53 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c0025094:	eb 3a                	jmp    c00250d0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0025096:	b8 01 00 00 00       	mov    eax,0x1
c002509b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002509f:	c1 e7 07             	shl    edi,0x7
c00250a2:	d3 e0                	shl    eax,cl
c00250a4:	03 3c 24             	add    edi,DWORD PTR [esp]
c00250a7:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00250ad:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00250b3:	85 d0                	test   eax,edx
c00250b5:	74 23                	je     c00250da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00250b7:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c00250bd:	0f ba e2 1e          	bt     edx,0x1e
c00250c1:	73 ea                	jae    c00250ad <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c00250c3:	83 ec 0c             	sub    esp,0xc
c00250c6:	68 4f cd 02 c0       	push   0xc002cd4f
c00250cb:	e8 a8 dc fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00250d0:	83 c4 10             	add    esp,0x10
c00250d3:	b8 01 00 00 00       	mov    eax,0x1
c00250d8:	eb 3d                	jmp    c0025117 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00250da:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00250e0:	0f ba e0 1e          	bt     eax,0x1e
c00250e4:	73 0a                	jae    c00250f0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c00250e6:	83 ec 0c             	sub    esp,0xc
c00250e9:	68 62 cd 02 c0       	push   0xc002cd62
c00250ee:	eb db                	jmp    c00250cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c00250f0:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00250f5:	74 1e                	je     c0025115 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00250f7:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00250fc:	74 17                	je     c0025115 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c00250fe:	50                   	push   eax
c00250ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025103:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025109:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002510d:	e8 32 b6 fd ff       	call   c0000744 <memcpy>
c0025112:	83 c4 10             	add    esp,0x10
c0025115:	31 c0                	xor    eax,eax
c0025117:	83 c4 1c             	add    esp,0x1c
c002511a:	5b                   	pop    ebx
c002511b:	5e                   	pop    esi
c002511c:	5f                   	pop    edi
c002511d:	5d                   	pop    ebp
c002511e:	c3                   	ret    
c002511f:	90                   	nop

c0025120 <SATAPI::eject()>:
c0025120:	57                   	push   edi
c0025121:	b9 03 00 00 00       	mov    ecx,0x3
c0025126:	53                   	push   ebx
c0025127:	83 ec 14             	sub    esp,0x14
c002512a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002512e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025132:	fc                   	cld    
c0025133:	31 c0                	xor    eax,eax
c0025135:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025137:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002513c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025141:	50                   	push   eax
c0025142:	6a 00                	push   0x0
c0025144:	6a 00                	push   0x0
c0025146:	6a 00                	push   0x0
c0025148:	6a 00                	push   0x0
c002514a:	6a 02                	push   0x2
c002514c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025150:	50                   	push   eax
c0025151:	53                   	push   ebx
c0025152:	e8 c5 fd ff ff       	call   c0024f1c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025157:	83 c4 14             	add    esp,0x14
c002515a:	53                   	push   ebx
c002515b:	e8 72 fd ff ff       	call   c0024ed2 <SATAPI::diskRemoved()>
c0025160:	83 c4 24             	add    esp,0x24
c0025163:	31 c0                	xor    eax,eax
c0025165:	5b                   	pop    ebx
c0025166:	5f                   	pop    edi
c0025167:	c3                   	ret    

c0025168 <SATAPI::detectMedia()>:
c0025168:	56                   	push   esi
c0025169:	53                   	push   ebx
c002516a:	83 ec 28             	sub    esp,0x28
c002516d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025171:	6a 0c                	push   0xc
c0025173:	6a 00                	push   0x0
c0025175:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025179:	56                   	push   esi
c002517a:	e8 f9 b5 fd ff       	call   c0000778 <memset>
c002517f:	83 c4 0c             	add    esp,0xc
c0025182:	6a 00                	push   0x0
c0025184:	6a 00                	push   0x0
c0025186:	6a 00                	push   0x0
c0025188:	6a 00                	push   0x0
c002518a:	6a 00                	push   0x0
c002518c:	56                   	push   esi
c002518d:	53                   	push   ebx
c002518e:	e8 89 fd ff ff       	call   c0024f1c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025193:	83 c4 1c             	add    esp,0x1c
c0025196:	6a 0c                	push   0xc
c0025198:	6a 00                	push   0x0
c002519a:	56                   	push   esi
c002519b:	e8 d8 b5 fd ff       	call   c0000778 <memset>
c00251a0:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00251a5:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00251aa:	83 c4 0c             	add    esp,0xc
c00251ad:	6a 01                	push   0x1
c00251af:	8d 44 24 16          	lea    eax,[esp+0x16]
c00251b3:	50                   	push   eax
c00251b4:	6a 00                	push   0x0
c00251b6:	6a 00                	push   0x0
c00251b8:	6a 12                	push   0x12
c00251ba:	56                   	push   esi
c00251bb:	53                   	push   ebx
c00251bc:	e8 5b fd ff ff       	call   c0024f1c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00251c1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00251c5:	83 c4 20             	add    esp,0x20
c00251c8:	83 e0 7f             	and    eax,0x7f
c00251cb:	3c 70                	cmp    al,0x70
c00251cd:	74 15                	je     c00251e4 <SATAPI::detectMedia()+0x7c>
c00251cf:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00251d6:	75 0c                	jne    c00251e4 <SATAPI::detectMedia()+0x7c>
c00251d8:	83 ec 0c             	sub    esp,0xc
c00251db:	53                   	push   ebx
c00251dc:	e8 0d fd ff ff       	call   c0024eee <SATAPI::diskInserted()>
c00251e1:	83 c4 10             	add    esp,0x10
c00251e4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00251e8:	83 e0 0f             	and    eax,0xf
c00251eb:	3c 02                	cmp    al,0x2
c00251ed:	75 1b                	jne    c002520a <SATAPI::detectMedia()+0xa2>
c00251ef:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00251f4:	75 2d                	jne    c0025223 <SATAPI::detectMedia()+0xbb>
c00251f6:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00251fd:	74 24                	je     c0025223 <SATAPI::detectMedia()+0xbb>
c00251ff:	83 ec 0c             	sub    esp,0xc
c0025202:	53                   	push   ebx
c0025203:	e8 ca fc ff ff       	call   c0024ed2 <SATAPI::diskRemoved()>
c0025208:	eb 16                	jmp    c0025220 <SATAPI::detectMedia()+0xb8>
c002520a:	84 c0                	test   al,al
c002520c:	75 15                	jne    c0025223 <SATAPI::detectMedia()+0xbb>
c002520e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025215:	75 0c                	jne    c0025223 <SATAPI::detectMedia()+0xbb>
c0025217:	83 ec 0c             	sub    esp,0xc
c002521a:	53                   	push   ebx
c002521b:	e8 ce fc ff ff       	call   c0024eee <SATAPI::diskInserted()>
c0025220:	83 c4 10             	add    esp,0x10
c0025223:	83 c4 24             	add    esp,0x24
c0025226:	5b                   	pop    ebx
c0025227:	5e                   	pop    esi
c0025228:	c3                   	ret    
c0025229:	90                   	nop

c002522a <SATAPI::open(int, int, void*)>:
c002522a:	56                   	push   esi
c002522b:	53                   	push   ebx
c002522c:	50                   	push   eax
c002522d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025231:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025235:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002523f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025245:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002524f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025253:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002525d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025263:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002526a:	e8 71 ac fe ff       	call   c000fee0 <Phys::allocatePage()>
c002526f:	89 c6                	mov    esi,eax
c0025271:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025277:	81 c6 00 10 00 00    	add    esi,0x1000
c002527d:	e8 5e ac fe ff       	call   c000fee0 <Phys::allocatePage()>
c0025282:	39 c6                	cmp    esi,eax
c0025284:	74 10                	je     c0025296 <SATAPI::open(int, int, void*)+0x6c>
c0025286:	83 ec 0c             	sub    esp,0xc
c0025289:	68 77 cd 02 c0       	push   0xc002cd77
c002528e:	e8 c0 51 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c0025293:	83 c4 10             	add    esp,0x10
c0025296:	83 ec 0c             	sub    esp,0xc
c0025299:	6a 02                	push   0x2
c002529b:	e8 9f c8 fe ff       	call   c0011b3f <Virt::allocateKernelVirtualPages(int)>
c00252a0:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00252a6:	e8 3b cb fe ff       	call   c0011de6 <Virt::getAKernelVAS()>
c00252ab:	6a 03                	push   0x3
c00252ad:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00252b3:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00252b9:	50                   	push   eax
c00252ba:	e8 49 cf fe ff       	call   c0012208 <VAS::mapPage(unsigned long, unsigned long, int)>
c00252bf:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00252c6:	83 c4 14             	add    esp,0x14
c00252c9:	53                   	push   ebx
c00252ca:	e8 99 fe ff ff       	call   c0025168 <SATAPI::detectMedia()>
c00252cf:	83 c4 14             	add    esp,0x14
c00252d2:	31 c0                	xor    eax,eax
c00252d4:	5b                   	pop    ebx
c00252d5:	5e                   	pop    esi
c00252d6:	c3                   	ret    
c00252d7:	90                   	nop

c00252d8 <SATAPI::read(unsigned long long, int, void*)>:
c00252d8:	55                   	push   ebp
c00252d9:	57                   	push   edi
c00252da:	56                   	push   esi
c00252db:	53                   	push   ebx
c00252dc:	83 ec 1c             	sub    esp,0x1c
c00252df:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00252e3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00252e7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00252eb:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00252f2:	74 19                	je     c002530d <SATAPI::read(unsigned long long, int, void*)+0x35>
c00252f4:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00252f9:	7e 2e                	jle    c0025329 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00252fb:	83 ec 0c             	sub    esp,0xc
c00252fe:	68 8d cd 02 c0       	push   0xc002cd8d
c0025303:	e8 4b 51 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c0025308:	83 c4 10             	add    esp,0x10
c002530b:	eb 1c                	jmp    c0025329 <SATAPI::read(unsigned long long, int, void*)+0x51>
c002530d:	83 ec 0c             	sub    esp,0xc
c0025310:	55                   	push   ebp
c0025311:	e8 52 fe ff ff       	call   c0025168 <SATAPI::detectMedia()>
c0025316:	83 c4 10             	add    esp,0x10
c0025319:	b8 02 00 00 00       	mov    eax,0x2
c002531e:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025325:	75 cd                	jne    c00252f4 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025327:	eb 49                	jmp    c0025372 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025329:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002532d:	b9 03 00 00 00       	mov    ecx,0x3
c0025332:	fc                   	cld    
c0025333:	31 c0                	xor    eax,eax
c0025335:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025337:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002533c:	89 d8                	mov    eax,ebx
c002533e:	86 e0                	xchg   al,ah
c0025340:	c1 c0 10             	rol    eax,0x10
c0025343:	86 e0                	xchg   al,ah
c0025345:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025349:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002534d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025351:	50                   	push   eax
c0025352:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025356:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002535a:	56                   	push   esi
c002535b:	53                   	push   ebx
c002535c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025360:	c1 e0 0b             	shl    eax,0xb
c0025363:	50                   	push   eax
c0025364:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025368:	50                   	push   eax
c0025369:	55                   	push   ebp
c002536a:	e8 ad fb ff ff       	call   c0024f1c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002536f:	83 c4 20             	add    esp,0x20
c0025372:	83 c4 1c             	add    esp,0x1c
c0025375:	5b                   	pop    ebx
c0025376:	5e                   	pop    esi
c0025377:	5f                   	pop    edi
c0025378:	5d                   	pop    ebp
c0025379:	c3                   	ret    

c002537a <AVX::open(int, int, void*)>:
c002537a:	83 ec 0c             	sub    esp,0xc
c002537d:	e8 46 11 00 00       	call   c00264c8 <avxInit>
c0025382:	b8 00 00 00 00       	mov    eax,0x0
c0025387:	83 c4 0c             	add    esp,0xc
c002538a:	c3                   	ret    
c002538b:	90                   	nop

c002538c <AVX::close(int, int, void*)>:
c002538c:	83 ec 0c             	sub    esp,0xc
c002538f:	e8 35 11 00 00       	call   c00264c9 <avxClose>
c0025394:	b8 00 00 00 00       	mov    eax,0x0
c0025399:	83 c4 0c             	add    esp,0xc
c002539c:	c3                   	ret    
c002539d:	90                   	nop

c002539e <AVX::available()>:
c002539e:	83 ec 0c             	sub    esp,0xc
c00253a1:	e8 1a 11 00 00       	call   c00264c0 <avxDetect>
c00253a6:	85 c0                	test   eax,eax
c00253a8:	0f 95 c0             	setne  al
c00253ab:	83 c4 0c             	add    esp,0xc
c00253ae:	c3                   	ret    
c00253af:	90                   	nop

c00253b0 <AVX::save(void*)>:
c00253b0:	83 ec 0c             	sub    esp,0xc
c00253b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253b7:	83 ec 0c             	sub    esp,0xc
c00253ba:	50                   	push   eax
c00253bb:	e8 06 11 00 00       	call   c00264c6 <avxSave>
c00253c0:	83 c4 10             	add    esp,0x10
c00253c3:	90                   	nop
c00253c4:	83 c4 0c             	add    esp,0xc
c00253c7:	c3                   	ret    

c00253c8 <AVX::load(void*)>:
c00253c8:	83 ec 0c             	sub    esp,0xc
c00253cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253cf:	83 ec 0c             	sub    esp,0xc
c00253d2:	50                   	push   eax
c00253d3:	e8 ef 10 00 00       	call   c00264c7 <avxLoad>
c00253d8:	83 c4 10             	add    esp,0x10
c00253db:	90                   	nop
c00253dc:	83 c4 0c             	add    esp,0xc
c00253df:	c3                   	ret    

c00253e0 <AVX::AVX()>:
c00253e0:	83 ec 0c             	sub    esp,0xc
c00253e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253e7:	83 ec 08             	sub    esp,0x8
c00253ea:	68 f0 cd 02 c0       	push   0xc002cdf0
c00253ef:	50                   	push   eax
c00253f0:	e8 ab f2 fe ff       	call   c00146a0 <FPU::FPU(char const*)>
c00253f5:	83 c4 10             	add    esp,0x10
c00253f8:	ba 00 ce 02 c0       	mov    edx,0xc002ce00
c00253fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025401:	89 10                	mov    DWORD PTR [eax],edx
c0025403:	90                   	nop
c0025404:	83 c4 0c             	add    esp,0xc
c0025407:	c3                   	ret    

c0025408 <MMX::available()>:
c0025408:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c002540d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025413:	83 e0 20             	and    eax,0x20
c0025416:	84 c0                	test   al,al
c0025418:	0f 95 c0             	setne  al
c002541b:	c3                   	ret    

c002541c <MMX::open(int, int, void*)>:
c002541c:	83 ec 0c             	sub    esp,0xc
c002541f:	e8 28 11 00 00       	call   c002654c <x87Init>
c0025424:	b8 00 00 00 00       	mov    eax,0x0
c0025429:	83 c4 0c             	add    esp,0xc
c002542c:	c3                   	ret    
c002542d:	90                   	nop

c002542e <MMX::close(int, int, void*)>:
c002542e:	83 ec 0c             	sub    esp,0xc
c0025431:	e8 30 11 00 00       	call   c0026566 <x87Close>
c0025436:	b8 00 00 00 00       	mov    eax,0x0
c002543b:	83 c4 0c             	add    esp,0xc
c002543e:	c3                   	ret    
c002543f:	90                   	nop

c0025440 <MMX::save(void*)>:
c0025440:	83 ec 0c             	sub    esp,0xc
c0025443:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025447:	83 ec 0c             	sub    esp,0xc
c002544a:	50                   	push   eax
c002544b:	e8 f1 10 00 00       	call   c0026541 <x87Save>
c0025450:	83 c4 10             	add    esp,0x10
c0025453:	90                   	nop
c0025454:	83 c4 0c             	add    esp,0xc
c0025457:	c3                   	ret    

c0025458 <MMX::load(void*)>:
c0025458:	83 ec 0c             	sub    esp,0xc
c002545b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002545f:	83 ec 0c             	sub    esp,0xc
c0025462:	50                   	push   eax
c0025463:	e8 df 10 00 00       	call   c0026547 <x87Load>
c0025468:	83 c4 10             	add    esp,0x10
c002546b:	90                   	nop
c002546c:	83 c4 0c             	add    esp,0xc
c002546f:	c3                   	ret    

c0025470 <MMX::MMX()>:
c0025470:	83 ec 0c             	sub    esp,0xc
c0025473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025477:	83 ec 08             	sub    esp,0x8
c002547a:	68 30 ce 02 c0       	push   0xc002ce30
c002547f:	50                   	push   eax
c0025480:	e8 1b f2 fe ff       	call   c00146a0 <FPU::FPU(char const*)>
c0025485:	83 c4 10             	add    esp,0x10
c0025488:	ba 40 ce 02 c0       	mov    edx,0xc002ce40
c002548d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025491:	89 10                	mov    DWORD PTR [eax],edx
c0025493:	90                   	nop
c0025494:	83 c4 0c             	add    esp,0xc
c0025497:	c3                   	ret    

c0025498 <SSE::open(int, int, void*)>:
c0025498:	83 ec 0c             	sub    esp,0xc
c002549b:	e8 64 10 00 00       	call   c0026504 <sseInit>
c00254a0:	b8 00 00 00 00       	mov    eax,0x0
c00254a5:	83 c4 0c             	add    esp,0xc
c00254a8:	c3                   	ret    
c00254a9:	90                   	nop

c00254aa <SSE::close(int, int, void*)>:
c00254aa:	83 ec 0c             	sub    esp,0xc
c00254ad:	e8 62 10 00 00       	call   c0026514 <sseClose>
c00254b2:	b8 00 00 00 00       	mov    eax,0x0
c00254b7:	83 c4 0c             	add    esp,0xc
c00254ba:	c3                   	ret    
c00254bb:	90                   	nop

c00254bc <SSE::available()>:
c00254bc:	83 ec 1c             	sub    esp,0x1c
c00254bf:	e8 1c 10 00 00       	call   c00264e0 <absolutelyNoChanceInHell>
c00254c4:	85 c0                	test   eax,eax
c00254c6:	0f 95 c0             	setne  al
c00254c9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00254cd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00254d1:	83 c4 1c             	add    esp,0x1c
c00254d4:	c3                   	ret    
c00254d5:	90                   	nop

c00254d6 <SSE::save(void*)>:
c00254d6:	83 ec 0c             	sub    esp,0xc
c00254d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254dd:	83 ec 0c             	sub    esp,0xc
c00254e0:	50                   	push   eax
c00254e1:	e8 12 10 00 00       	call   c00264f8 <sseSave>
c00254e6:	83 c4 10             	add    esp,0x10
c00254e9:	90                   	nop
c00254ea:	83 c4 0c             	add    esp,0xc
c00254ed:	c3                   	ret    

c00254ee <SSE::load(void*)>:
c00254ee:	83 ec 0c             	sub    esp,0xc
c00254f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00254f5:	83 ec 0c             	sub    esp,0xc
c00254f8:	50                   	push   eax
c00254f9:	e8 00 10 00 00       	call   c00264fe <sseLoad>
c00254fe:	83 c4 10             	add    esp,0x10
c0025501:	90                   	nop
c0025502:	83 c4 0c             	add    esp,0xc
c0025505:	c3                   	ret    

c0025506 <SSE::SSE()>:
c0025506:	83 ec 0c             	sub    esp,0xc
c0025509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002550d:	83 ec 08             	sub    esp,0x8
c0025510:	68 70 ce 02 c0       	push   0xc002ce70
c0025515:	50                   	push   eax
c0025516:	e8 85 f1 fe ff       	call   c00146a0 <FPU::FPU(char const*)>
c002551b:	83 c4 10             	add    esp,0x10
c002551e:	ba 80 ce 02 c0       	mov    edx,0xc002ce80
c0025523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025527:	89 10                	mov    DWORD PTR [eax],edx
c0025529:	90                   	nop
c002552a:	83 c4 0c             	add    esp,0xc
c002552d:	c3                   	ret    

c002552e <x87::open(int, int, void*)>:
c002552e:	83 ec 0c             	sub    esp,0xc
c0025531:	e8 16 10 00 00       	call   c002654c <x87Init>
c0025536:	b8 00 00 00 00       	mov    eax,0x0
c002553b:	83 c4 0c             	add    esp,0xc
c002553e:	c3                   	ret    
c002553f:	90                   	nop

c0025540 <x87::close(int, int, void*)>:
c0025540:	83 ec 0c             	sub    esp,0xc
c0025543:	e8 1e 10 00 00       	call   c0026566 <x87Close>
c0025548:	b8 00 00 00 00       	mov    eax,0x0
c002554d:	83 c4 0c             	add    esp,0xc
c0025550:	c3                   	ret    
c0025551:	90                   	nop

c0025552 <x87::available()>:
c0025552:	83 ec 0c             	sub    esp,0xc
c0025555:	e8 cc 0f 00 00       	call   c0026526 <x87Detect>
c002555a:	85 c0                	test   eax,eax
c002555c:	0f 95 c0             	setne  al
c002555f:	83 c4 0c             	add    esp,0xc
c0025562:	c3                   	ret    
c0025563:	90                   	nop

c0025564 <x87::save(void*)>:
c0025564:	83 ec 0c             	sub    esp,0xc
c0025567:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002556b:	83 ec 0c             	sub    esp,0xc
c002556e:	50                   	push   eax
c002556f:	e8 cd 0f 00 00       	call   c0026541 <x87Save>
c0025574:	83 c4 10             	add    esp,0x10
c0025577:	90                   	nop
c0025578:	83 c4 0c             	add    esp,0xc
c002557b:	c3                   	ret    

c002557c <x87::load(void*)>:
c002557c:	83 ec 0c             	sub    esp,0xc
c002557f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025583:	83 ec 0c             	sub    esp,0xc
c0025586:	50                   	push   eax
c0025587:	e8 bb 0f 00 00       	call   c0026547 <x87Load>
c002558c:	83 c4 10             	add    esp,0x10
c002558f:	90                   	nop
c0025590:	83 c4 0c             	add    esp,0xc
c0025593:	c3                   	ret    

c0025594 <x87::x87()>:
c0025594:	83 ec 0c             	sub    esp,0xc
c0025597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002559b:	83 ec 08             	sub    esp,0x8
c002559e:	68 b0 ce 02 c0       	push   0xc002ceb0
c00255a3:	50                   	push   eax
c00255a4:	e8 f7 f0 fe ff       	call   c00146a0 <FPU::FPU(char const*)>
c00255a9:	83 c4 10             	add    esp,0x10
c00255ac:	ba c0 ce 02 c0       	mov    edx,0xc002cec0
c00255b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255b5:	89 10                	mov    DWORD PTR [eax],edx
c00255b7:	90                   	nop
c00255b8:	83 c4 0c             	add    esp,0xc
c00255bb:	c3                   	ret    

c00255bc <APIC::disable()>:
c00255bc:	90                   	nop
c00255bd:	c3                   	ret    

c00255be <APIC::close(int, int, void*)>:
c00255be:	55                   	push   ebp
c00255bf:	89 e5                	mov    ebp,esp
c00255c1:	83 ec 08             	sub    esp,0x8
c00255c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00255c9:	83 c0 3c             	add    eax,0x3c
c00255cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00255ce:	83 ec 0c             	sub    esp,0xc
c00255d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00255d4:	ff d0                	call   eax
c00255d6:	83 c4 10             	add    esp,0x10
c00255d9:	b8 00 00 00 00       	mov    eax,0x0
c00255de:	c9                   	leave  
c00255df:	c3                   	ret    

c00255e0 <IOAPIC::close(int, int, void*)>:
c00255e0:	b8 00 00 00 00       	mov    eax,0x0
c00255e5:	c3                   	ret    

c00255e6 <APIC::io_wait()>:
c00255e6:	eb 00                	jmp    c00255e8 <APIC::io_wait()+0x2>
c00255e8:	eb 00                	jmp    c00255ea <APIC::io_wait()+0x4>
c00255ea:	90                   	nop
c00255eb:	c3                   	ret    

c00255ec <APIC::getBase()>:
c00255ec:	55                   	push   ebp
c00255ed:	89 e5                	mov    ebp,esp
c00255ef:	83 ec 18             	sub    esp,0x18
c00255f2:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c00255f7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00255fd:	83 e0 08             	and    eax,0x8
c0025600:	84 c0                	test   al,al
c0025602:	75 07                	jne    c002560b <APIC::getBase()+0x1f>
c0025604:	b8 00 00 00 00       	mov    eax,0x0
c0025609:	eb 21                	jmp    c002562c <APIC::getBase()+0x40>
c002560b:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0025610:	83 ec 08             	sub    esp,0x8
c0025613:	6a 1b                	push   0x1b
c0025615:	50                   	push   eax
c0025616:	e8 cd 97 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c002561b:	83 c4 10             	add    esp,0x10
c002561e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025621:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025624:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025627:	25 00 f0 ff ff       	and    eax,0xfffff000
c002562c:	c9                   	leave  
c002562d:	c3                   	ret    

c002562e <APIC::eoi(unsigned char)>:
c002562e:	55                   	push   ebp
c002562f:	89 e5                	mov    ebp,esp
c0025631:	83 ec 28             	sub    esp,0x28
c0025634:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025637:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002563a:	83 ec 0c             	sub    esp,0xc
c002563d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025640:	e8 a7 ff ff ff       	call   c00255ec <APIC::getBase()>
c0025645:	83 c4 10             	add    esp,0x10
c0025648:	05 b0 00 00 00       	add    eax,0xb0
c002564d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025650:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025653:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025659:	90                   	nop
c002565a:	c9                   	leave  
c002565b:	c3                   	ret    

c002565c <APIC::open(int, int, void*)>:
c002565c:	55                   	push   ebp
c002565d:	89 e5                	mov    ebp,esp
c002565f:	57                   	push   edi
c0025660:	56                   	push   esi
c0025661:	53                   	push   ebx
c0025662:	83 ec 2c             	sub    esp,0x2c
c0025665:	83 ec 0c             	sub    esp,0xc
c0025668:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002566b:	e8 7c ff ff ff       	call   c00255ec <APIC::getBase()>
c0025670:	83 c4 10             	add    esp,0x10
c0025673:	89 c2                	mov    edx,eax
c0025675:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025678:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002567e:	0f b6 f8             	movzx  edi,al
c0025681:	89 d0                	mov    eax,edx
c0025683:	ba 00 00 00 00       	mov    edx,0x0
c0025688:	89 c1                	mov    ecx,eax
c002568a:	80 e5 ff             	and    ch,0xff
c002568d:	89 cb                	mov    ebx,ecx
c002568f:	0f b6 f2             	movzx  esi,dl
c0025692:	89 d8                	mov    eax,ebx
c0025694:	89 f2                	mov    edx,esi
c0025696:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025699:	8d 5f 08             	lea    ebx,[edi+0x8]
c002569c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00256a0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00256a4:	83 e0 00             	and    eax,0x0
c00256a7:	09 d0                	or     eax,edx
c00256a9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00256ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256b0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00256b6:	8d 50 01             	lea    edx,[eax+0x1]
c00256b9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00256bc:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00256c2:	0f b6 d0             	movzx  edx,al
c00256c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256c8:	83 c2 08             	add    edx,0x8
c00256cb:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00256cf:	0f b6 c9             	movzx  ecx,cl
c00256d2:	81 c9 00 00 01 00    	or     ecx,0x10000
c00256d8:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00256dc:	83 ec 0c             	sub    esp,0xc
c00256df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256e2:	e8 05 ff ff ff       	call   c00255ec <APIC::getBase()>
c00256e7:	83 c4 10             	add    esp,0x10
c00256ea:	05 f0 00 00 00       	add    eax,0xf0
c00256ef:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00256f2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00256f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00256f7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00256fa:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025701:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025708:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002570b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002570e:	89 10                	mov    DWORD PTR [eax],edx
c0025710:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025717:	a1 f0 0a 03 c0       	mov    eax,ds:0xc0030af0
c002571c:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002571f:	7d 7c                	jge    c002579d <APIC::open(int, int, void*)+0x141>
c0025721:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025724:	8b 04 85 00 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf500]
c002572b:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002572e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025731:	8b 04 85 00 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf500]
c0025738:	c1 e8 08             	shr    eax,0x8
c002573b:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002573f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025742:	8b 04 85 00 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf500]
c0025749:	c1 e8 18             	shr    eax,0x18
c002574c:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002574f:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025753:	75 40                	jne    c0025795 <APIC::open(int, int, void*)+0x139>
c0025755:	83 ec 0c             	sub    esp,0xc
c0025758:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002575b:	e8 8c fe ff ff       	call   c00255ec <APIC::getBase()>
c0025760:	83 c4 10             	add    esp,0x10
c0025763:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025767:	75 07                	jne    c0025770 <APIC::open(int, int, void*)+0x114>
c0025769:	ba 60 03 00 00       	mov    edx,0x360
c002576e:	eb 05                	jmp    c0025775 <APIC::open(int, int, void*)+0x119>
c0025770:	ba 50 03 00 00       	mov    edx,0x350
c0025775:	01 d0                	add    eax,edx
c0025777:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002577a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002577d:	8b 00                	mov    eax,DWORD PTR [eax]
c002577f:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025782:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025789:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c002578d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025790:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025793:	89 10                	mov    DWORD PTR [eax],edx
c0025795:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025798:	e9 7a ff ff ff       	jmp    c0025717 <APIC::open(int, int, void*)+0xbb>
c002579d:	b8 00 00 00 00       	mov    eax,0x0
c00257a2:	8d 65 f4             	lea    esp,[ebp-0xc]
c00257a5:	5b                   	pop    ebx
c00257a6:	5e                   	pop    esi
c00257a7:	5f                   	pop    edi
c00257a8:	5d                   	pop    ebp
c00257a9:	c3                   	ret    

c00257aa <IOAPIC::IOAPIC()>:
c00257aa:	83 ec 0c             	sub    esp,0xc
c00257ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257b1:	83 ec 08             	sub    esp,0x8
c00257b4:	68 f0 ce 02 c0       	push   0xc002cef0
c00257b9:	50                   	push   eax
c00257ba:	e8 cf eb fe ff       	call   c001438e <Device::Device(char const*)>
c00257bf:	83 c4 10             	add    esp,0x10
c00257c2:	ba 18 d0 02 c0       	mov    edx,0xc002d018
c00257c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257cb:	89 10                	mov    DWORD PTR [eax],edx
c00257cd:	90                   	nop
c00257ce:	83 c4 0c             	add    esp,0xc
c00257d1:	c3                   	ret    

c00257d2 <APIC::APIC()>:
c00257d2:	53                   	push   ebx
c00257d3:	83 ec 18             	sub    esp,0x18
c00257d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00257da:	83 ec 08             	sub    esp,0x8
c00257dd:	68 f8 ce 02 c0       	push   0xc002cef8
c00257e2:	50                   	push   eax
c00257e3:	e8 12 f3 fe ff       	call   c0014afa <InterruptController::InterruptController(char const*)>
c00257e8:	83 c4 10             	add    esp,0x10
c00257eb:	ba d0 cf 02 c0       	mov    edx,0xc002cfd0
c00257f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00257f4:	89 10                	mov    DWORD PTR [eax],edx
c00257f6:	a0 c0 25 03 c0       	mov    al,ds:0xc00325c0
c00257fb:	83 f0 01             	xor    eax,0x1
c00257fe:	84 c0                	test   al,al
c0025800:	0f 84 a1 00 00 00    	je     c00258a7 <APIC::APIC()+0xd5>
c0025806:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002580b:	a0 a0 0b 03 c0       	mov    al,ds:0xc0030ba0
c0025810:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025814:	0f 83 86 00 00 00    	jae    c00258a0 <APIC::APIC()+0xce>
c002581a:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025822:	83 ec 0c             	sub    esp,0xc
c0025825:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025829:	e8 15 a0 fe ff       	call   c000f843 <malloc>
c002582e:	83 c4 10             	add    esp,0x10
c0025831:	89 c3                	mov    ebx,eax
c0025833:	83 ec 0c             	sub    esp,0xc
c0025836:	53                   	push   ebx
c0025837:	e8 6e ff ff ff       	call   c00257aa <IOAPIC::IOAPIC()>
c002583c:	83 c4 10             	add    esp,0x10
c002583f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025843:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025848:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002584c:	89 14 85 a0 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcda60],edx
c0025853:	a1 80 25 03 c0       	mov    eax,ds:0xc0032580
c0025858:	40                   	inc    eax
c0025859:	a3 80 25 03 c0       	mov    ds:0xc0032580,eax
c002585e:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0025863:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025869:	83 ec 08             	sub    esp,0x8
c002586c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025870:	50                   	push   eax
c0025871:	e8 28 e9 fe ff       	call   c001419e <Device::addChild(Device*)>
c0025876:	83 c4 10             	add    esp,0x10
c0025879:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002587d:	8b 00                	mov    eax,DWORD PTR [eax]
c002587f:	83 c0 08             	add    eax,0x8
c0025882:	8b 00                	mov    eax,DWORD PTR [eax]
c0025884:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025889:	6a 00                	push   0x0
c002588b:	6a 00                	push   0x0
c002588d:	52                   	push   edx
c002588e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025892:	ff d0                	call   eax
c0025894:	83 c4 10             	add    esp,0x10
c0025897:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002589b:	e9 6b ff ff ff       	jmp    c002580b <APIC::APIC()+0x39>
c00258a0:	c6 05 c0 25 03 c0 01 	mov    BYTE PTR ds:0xc00325c0,0x1
c00258a7:	90                   	nop
c00258a8:	83 c4 18             	add    esp,0x18
c00258ab:	5b                   	pop    ebx
c00258ac:	c3                   	ret    
c00258ad:	90                   	nop

c00258ae <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00258ae:	55                   	push   ebp
c00258af:	89 e5                	mov    ebp,esp
c00258b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258b4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00258ba:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00258bd:	72 1d                	jb     c00258dc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00258bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258c2:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00258c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258cb:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00258d1:	01 d0                	add    eax,edx
c00258d3:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00258d6:	73 04                	jae    c00258dc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00258d8:	b0 01                	mov    al,0x1
c00258da:	eb 02                	jmp    c00258de <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00258dc:	b0 00                	mov    al,0x0
c00258de:	5d                   	pop    ebp
c00258df:	c3                   	ret    

c00258e0 <IOAPIC::read(int)>:
c00258e0:	55                   	push   ebp
c00258e1:	89 e5                	mov    ebp,esp
c00258e3:	83 ec 10             	sub    esp,0x10
c00258e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258e9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00258ef:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00258f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258f5:	0f b6 d0             	movzx  edx,al
c00258f8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00258fb:	89 10                	mov    DWORD PTR [eax],edx
c00258fd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025900:	83 c0 10             	add    eax,0x10
c0025903:	8b 00                	mov    eax,DWORD PTR [eax]
c0025905:	c9                   	leave  
c0025906:	c3                   	ret    
c0025907:	90                   	nop

c0025908 <IOAPIC::open(int, int, void*)>:
c0025908:	55                   	push   ebp
c0025909:	89 e5                	mov    ebp,esp
c002590b:	57                   	push   edi
c002590c:	56                   	push   esi
c002590d:	53                   	push   ebx
c002590e:	83 ec 0c             	sub    esp,0xc
c0025911:	83 ec 0c             	sub    esp,0xc
c0025914:	68 23 cf 02 c0       	push   0xc002cf23
c0025919:	e8 5a d4 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c002591e:	83 c4 10             	add    esp,0x10
c0025921:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025924:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025927:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002592d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025930:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025936:	8b 14 85 e0 0b 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf420]
c002593d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025940:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025946:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025949:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002594f:	8b 14 85 60 0c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf3a0]
c0025956:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025959:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002595f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025962:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025968:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002596b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025971:	0f b6 f8             	movzx  edi,al
c0025974:	89 d0                	mov    eax,edx
c0025976:	ba 00 00 00 00       	mov    edx,0x0
c002597b:	89 c1                	mov    ecx,eax
c002597d:	80 e5 ff             	and    ch,0xff
c0025980:	89 cb                	mov    ebx,ecx
c0025982:	0f b6 f2             	movzx  esi,dl
c0025985:	89 d8                	mov    eax,ebx
c0025987:	89 f2                	mov    edx,esi
c0025989:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002598c:	8d 5f 08             	lea    ebx,[edi+0x8]
c002598f:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025993:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025997:	83 e0 00             	and    eax,0x0
c002599a:	09 d0                	or     eax,edx
c002599c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00259a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259a3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00259a9:	8d 50 01             	lea    edx,[eax+0x1]
c00259ac:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00259af:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00259b5:	0f b6 d0             	movzx  edx,al
c00259b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259bb:	83 c2 08             	add    edx,0x8
c00259be:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00259c2:	0f b6 c9             	movzx  ecx,cl
c00259c5:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00259cb:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00259cf:	83 ec 08             	sub    esp,0x8
c00259d2:	6a 01                	push   0x1
c00259d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259d7:	e8 04 ff ff ff       	call   c00258e0 <IOAPIC::read(int)>
c00259dc:	83 c4 10             	add    esp,0x10
c00259df:	c1 f8 10             	sar    eax,0x10
c00259e2:	0f b6 c0             	movzx  eax,al
c00259e5:	8d 50 01             	lea    edx,[eax+0x1]
c00259e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259eb:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00259f1:	b8 00 00 00 00       	mov    eax,0x0
c00259f6:	8d 65 f4             	lea    esp,[ebp-0xc]
c00259f9:	5b                   	pop    ebx
c00259fa:	5e                   	pop    esi
c00259fb:	5f                   	pop    edi
c00259fc:	5d                   	pop    ebp
c00259fd:	c3                   	ret    

c00259fe <IOAPIC::write(int, int)>:
c00259fe:	55                   	push   ebp
c00259ff:	89 e5                	mov    ebp,esp
c0025a01:	83 ec 10             	sub    esp,0x10
c0025a04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a07:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a0d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a13:	0f b6 d0             	movzx  edx,al
c0025a16:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a19:	89 10                	mov    DWORD PTR [eax],edx
c0025a1b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a1e:	8d 50 10             	lea    edx,[eax+0x10]
c0025a21:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025a24:	89 02                	mov    DWORD PTR [edx],eax
c0025a26:	90                   	nop
c0025a27:	c9                   	leave  
c0025a28:	c3                   	ret    
c0025a29:	90                   	nop

c0025a2a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025a2a:	55                   	push   ebp
c0025a2b:	89 e5                	mov    ebp,esp
c0025a2d:	53                   	push   ebx
c0025a2e:	83 ec 2c             	sub    esp,0x2c
c0025a31:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a34:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025a37:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025a3a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025a3d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025a40:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025a43:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025a46:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025a49:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025a4c:	88 d8                	mov    al,bl
c0025a4e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025a51:	88 c8                	mov    al,cl
c0025a53:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025a56:	88 d0                	mov    al,dl
c0025a58:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025a5b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025a5f:	83 c0 08             	add    eax,0x8
c0025a62:	01 c0                	add    eax,eax
c0025a64:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025a67:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025a6b:	83 c0 08             	add    eax,0x8
c0025a6e:	01 c0                	add    eax,eax
c0025a70:	40                   	inc    eax
c0025a71:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025a74:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025a77:	50                   	push   eax
c0025a78:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a7b:	e8 60 fe ff ff       	call   c00258e0 <IOAPIC::read(int)>
c0025a80:	83 c4 08             	add    esp,0x8
c0025a83:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025a86:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025a8d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025a90:	c1 e0 18             	shl    eax,0x18
c0025a93:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025a96:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025a99:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025a9c:	52                   	push   edx
c0025a9d:	50                   	push   eax
c0025a9e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025aa1:	e8 58 ff ff ff       	call   c00259fe <IOAPIC::write(int, int)>
c0025aa6:	83 c4 0c             	add    esp,0xc
c0025aa9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025aac:	50                   	push   eax
c0025aad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ab0:	e8 2b fe ff ff       	call   c00258e0 <IOAPIC::read(int)>
c0025ab5:	83 c4 08             	add    esp,0x8
c0025ab8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025abb:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025ac2:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025ac9:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025ad0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025ad4:	74 09                	je     c0025adf <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025ad6:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025add:	eb 07                	jmp    c0025ae6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025adf:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025ae6:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025aea:	74 09                	je     c0025af5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025aec:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025af3:	eb 07                	jmp    c0025afc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025af5:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025afc:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025b03:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025b07:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025b0a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025b0d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025b10:	52                   	push   edx
c0025b11:	50                   	push   eax
c0025b12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b15:	e8 e4 fe ff ff       	call   c00259fe <IOAPIC::write(int, int)>
c0025b1a:	83 c4 0c             	add    esp,0xc
c0025b1d:	90                   	nop
c0025b1e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025b21:	c9                   	leave  
c0025b22:	c3                   	ret    
c0025b23:	90                   	nop

c0025b24 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025b24:	55                   	push   ebp
c0025b25:	89 e5                	mov    ebp,esp
c0025b27:	57                   	push   edi
c0025b28:	56                   	push   esi
c0025b29:	53                   	push   ebx
c0025b2a:	83 ec 2c             	sub    esp,0x2c
c0025b2d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025b30:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025b33:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025b37:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025b3b:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025b3f:	74 5a                	je     c0025b9b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025b41:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025b45:	7f 44                	jg     c0025b8b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025b47:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b4a:	05 60 d4 02 c0       	add    eax,0xc002d460
c0025b4f:	8a 00                	mov    al,BYTE PTR [eax]
c0025b51:	0f b6 c0             	movzx  eax,al
c0025b54:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025b57:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b5a:	66 8b 84 00 80 0b 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf480]
c0025b62:	0f b7 c0             	movzx  eax,ax
c0025b65:	83 e0 02             	and    eax,0x2
c0025b68:	85 c0                	test   eax,eax
c0025b6a:	74 04                	je     c0025b70 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025b6c:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025b70:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b73:	66 8b 84 00 80 0b 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf480]
c0025b7b:	0f b7 c0             	movzx  eax,ax
c0025b7e:	83 e0 08             	and    eax,0x8
c0025b81:	85 c0                	test   eax,eax
c0025b83:	74 16                	je     c0025b9b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025b85:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025b89:	eb 10                	jmp    c0025b9b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025b8b:	83 ec 0c             	sub    esp,0xc
c0025b8e:	68 34 cf 02 c0       	push   0xc002cf34
c0025b93:	e8 bb 48 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c0025b98:	83 c4 10             	add    esp,0x10
c0025b9b:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025b9f:	a1 80 25 03 c0       	mov    eax,ds:0xc0032580
c0025ba4:	83 ec 08             	sub    esp,0x8
c0025ba7:	50                   	push   eax
c0025ba8:	68 6c cf 02 c0       	push   0xc002cf6c
c0025bad:	e8 c6 d1 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0025bb2:	83 c4 10             	add    esp,0x10
c0025bb5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025bbc:	a1 80 25 03 c0       	mov    eax,ds:0xc0032580
c0025bc1:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025bc4:	7d 67                	jge    c0025c2d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025bc6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025bc9:	8b 04 85 a0 25 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcda60]
c0025bd0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025bd3:	83 ec 08             	sub    esp,0x8
c0025bd6:	52                   	push   edx
c0025bd7:	50                   	push   eax
c0025bd8:	e8 d1 fc ff ff       	call   c00258ae <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025bdd:	83 c4 10             	add    esp,0x10
c0025be0:	84 c0                	test   al,al
c0025be2:	74 44                	je     c0025c28 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025be4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025be7:	8b 1c 85 a0 25 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcda60]
c0025bee:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025bf2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025bf5:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025bf9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bfc:	83 c0 20             	add    eax,0x20
c0025bff:	0f b6 f0             	movzx  esi,al
c0025c02:	b8 00 00 00 00       	mov    eax,0x0
c0025c07:	99                   	cdq    
c0025c08:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025c0b:	0f b6 c9             	movzx  ecx,cl
c0025c0e:	83 ec 04             	sub    esp,0x4
c0025c11:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025c14:	57                   	push   edi
c0025c15:	56                   	push   esi
c0025c16:	52                   	push   edx
c0025c17:	50                   	push   eax
c0025c18:	51                   	push   ecx
c0025c19:	53                   	push   ebx
c0025c1a:	e8 0b fe ff ff       	call   c0025a2a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025c1f:	83 c4 20             	add    esp,0x20
c0025c22:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025c26:	eb 05                	jmp    c0025c2d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025c28:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025c2b:	eb 8f                	jmp    c0025bbc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025c2d:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025c30:	83 f0 01             	xor    eax,0x1
c0025c33:	84 c0                	test   al,al
c0025c35:	74 10                	je     c0025c47 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025c37:	83 ec 0c             	sub    esp,0xc
c0025c3a:	68 83 cf 02 c0       	push   0xc002cf83
c0025c3f:	e8 0f 48 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c0025c44:	83 c4 10             	add    esp,0x10
c0025c47:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025c4b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025c52:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025c56:	7f 65                	jg     c0025cbd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025c58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c5b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025c5e:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025c65:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025c68:	01 ca                	add    edx,ecx
c0025c6a:	83 c2 54             	add    edx,0x54
c0025c6d:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025c71:	85 c0                	test   eax,eax
c0025c73:	75 43                	jne    c0025cb8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025c75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c78:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025c7b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025c82:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025c85:	01 ca                	add    edx,ecx
c0025c87:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025c8a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025c8d:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025c91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c94:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025c97:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025c9e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ca1:	01 ca                	add    edx,ecx
c0025ca3:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025ca9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025cac:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025cb0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cb3:	83 e8 20             	sub    eax,0x20
c0025cb6:	eb 1a                	jmp    c0025cd2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025cb8:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025cbb:	eb 95                	jmp    c0025c52 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025cbd:	83 ec 0c             	sub    esp,0xc
c0025cc0:	68 90 cf 02 c0       	push   0xc002cf90
c0025cc5:	e8 89 47 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c0025cca:	83 c4 10             	add    esp,0x10
c0025ccd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025cd2:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025cd5:	5b                   	pop    ebx
c0025cd6:	5e                   	pop    esi
c0025cd7:	5f                   	pop    edi
c0025cd8:	5d                   	pop    ebp
c0025cd9:	c3                   	ret    

c0025cda <PIC::disable()>:
c0025cda:	55                   	push   ebp
c0025cdb:	89 e5                	mov    ebp,esp
c0025cdd:	83 ec 10             	sub    esp,0x10
c0025ce0:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025ce6:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025cea:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025ced:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025cf1:	ee                   	out    dx,al
c0025cf2:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025cf8:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025cfc:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025cff:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025d03:	ee                   	out    dx,al
c0025d04:	90                   	nop
c0025d05:	c9                   	leave  
c0025d06:	c3                   	ret    
c0025d07:	90                   	nop

c0025d08 <PIC::close(int, int, void*)>:
c0025d08:	55                   	push   ebp
c0025d09:	89 e5                	mov    ebp,esp
c0025d0b:	83 ec 08             	sub    esp,0x8
c0025d0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d11:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d13:	83 c0 3c             	add    eax,0x3c
c0025d16:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d18:	83 ec 0c             	sub    esp,0xc
c0025d1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d1e:	ff d0                	call   eax
c0025d20:	83 c4 10             	add    esp,0x10
c0025d23:	b8 00 00 00 00       	mov    eax,0x0
c0025d28:	c9                   	leave  
c0025d29:	c3                   	ret    

c0025d2a <PIC::PIC()>:
c0025d2a:	83 ec 0c             	sub    esp,0xc
c0025d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d31:	83 ec 08             	sub    esp,0x8
c0025d34:	68 3c d0 02 c0       	push   0xc002d03c
c0025d39:	50                   	push   eax
c0025d3a:	e8 bb ed fe ff       	call   c0014afa <InterruptController::InterruptController(char const*)>
c0025d3f:	83 c4 10             	add    esp,0x10
c0025d42:	ba 68 d0 02 c0       	mov    edx,0xc002d068
c0025d47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d4b:	89 10                	mov    DWORD PTR [eax],edx
c0025d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d51:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d57:	0f b6 d0             	movzx  edx,al
c0025d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d5e:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025d65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d69:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d6f:	0f b6 d0             	movzx  edx,al
c0025d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d76:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d7f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d85:	8d 50 01             	lea    edx,[eax+0x1]
c0025d88:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025d8c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025d92:	0f b6 d0             	movzx  edx,al
c0025d95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d99:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025d9d:	83 e1 3f             	and    ecx,0x3f
c0025da0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025da8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025dae:	0f b6 d0             	movzx  edx,al
c0025db1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025db5:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025dbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dc0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025dc6:	0f b6 d0             	movzx  edx,al
c0025dc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dcd:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dd6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ddc:	8d 50 01             	lea    edx,[eax+0x1]
c0025ddf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025de3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025de9:	0f b6 d0             	movzx  edx,al
c0025dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025df0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025df4:	83 e1 3f             	and    ecx,0x3f
c0025df7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025dfb:	90                   	nop
c0025dfc:	83 c4 0c             	add    esp,0xc
c0025dff:	c3                   	ret    

c0025e00 <PIC::ioWait()>:
c0025e00:	eb 00                	jmp    c0025e02 <PIC::ioWait()+0x2>
c0025e02:	eb 00                	jmp    c0025e04 <PIC::ioWait()+0x4>
c0025e04:	90                   	nop
c0025e05:	c3                   	ret    

c0025e06 <PIC::getIRQReg(int)>:
c0025e06:	55                   	push   ebp
c0025e07:	89 e5                	mov    ebp,esp
c0025e09:	83 ec 10             	sub    esp,0x10
c0025e0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e0f:	0f b6 c0             	movzx  eax,al
c0025e12:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025e18:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025e1b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025e1e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025e22:	ee                   	out    dx,al
c0025e23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e26:	0f b6 c0             	movzx  eax,al
c0025e29:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025e2f:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025e32:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025e35:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025e39:	ee                   	out    dx,al
c0025e3a:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025e40:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025e44:	89 c2                	mov    edx,eax
c0025e46:	ec                   	in     al,dx
c0025e47:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025e4a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e4d:	0f b6 c0             	movzx  eax,al
c0025e50:	c1 e0 08             	shl    eax,0x8
c0025e53:	89 c1                	mov    ecx,eax
c0025e55:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025e5b:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025e5f:	89 c2                	mov    edx,eax
c0025e61:	ec                   	in     al,dx
c0025e62:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025e65:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025e68:	0f b6 c0             	movzx  eax,al
c0025e6b:	09 c8                	or     eax,ecx
c0025e6d:	c9                   	leave  
c0025e6e:	c3                   	ret    
c0025e6f:	90                   	nop

c0025e70 <PIC::eoi(unsigned char)>:
c0025e70:	55                   	push   ebp
c0025e71:	89 e5                	mov    ebp,esp
c0025e73:	83 ec 14             	sub    esp,0x14
c0025e76:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e79:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025e7c:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025e80:	75 1e                	jne    c0025ea0 <PIC::eoi(unsigned char)+0x30>
c0025e82:	6a 0b                	push   0xb
c0025e84:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e87:	e8 7a ff ff ff       	call   c0025e06 <PIC::getIRQReg(int)>
c0025e8c:	83 c4 08             	add    esp,0x8
c0025e8f:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025e93:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025e97:	25 80 00 00 00       	and    eax,0x80
c0025e9c:	85 c0                	test   eax,eax
c0025e9e:	74 5f                	je     c0025eff <PIC::eoi(unsigned char)+0x8f>
c0025ea0:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025ea4:	75 2d                	jne    c0025ed3 <PIC::eoi(unsigned char)+0x63>
c0025ea6:	6a 0b                	push   0xb
c0025ea8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025eab:	e8 56 ff ff ff       	call   c0025e06 <PIC::getIRQReg(int)>
c0025eb0:	83 c4 08             	add    esp,0x8
c0025eb3:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025eb7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025eba:	66 85 c0             	test   ax,ax
c0025ebd:	78 14                	js     c0025ed3 <PIC::eoi(unsigned char)+0x63>
c0025ebf:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025ec5:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025ec9:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025ecc:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025ed0:	ee                   	out    dx,al
c0025ed1:	eb 2d                	jmp    c0025f00 <PIC::eoi(unsigned char)+0x90>
c0025ed3:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025ed7:	76 12                	jbe    c0025eeb <PIC::eoi(unsigned char)+0x7b>
c0025ed9:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025edf:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025ee3:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025ee6:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025eea:	ee                   	out    dx,al
c0025eeb:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025ef1:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025ef5:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025ef8:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025efc:	ee                   	out    dx,al
c0025efd:	eb 01                	jmp    c0025f00 <PIC::eoi(unsigned char)+0x90>
c0025eff:	90                   	nop
c0025f00:	c9                   	leave  
c0025f01:	c3                   	ret    

c0025f02 <PIC::remap()>:
c0025f02:	55                   	push   ebp
c0025f03:	89 e5                	mov    ebp,esp
c0025f05:	83 ec 48             	sub    esp,0x48
c0025f08:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025f0f:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025f16:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025f1c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025f1f:	89 c2                	mov    edx,eax
c0025f21:	ec                   	in     al,dx
c0025f22:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025f25:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025f28:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025f2b:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025f31:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025f34:	89 c2                	mov    edx,eax
c0025f36:	ec                   	in     al,dx
c0025f37:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025f3a:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025f3d:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025f40:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025f46:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025f4a:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025f4d:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025f50:	ee                   	out    dx,al
c0025f51:	83 ec 0c             	sub    esp,0xc
c0025f54:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f57:	e8 a4 fe ff ff       	call   c0025e00 <PIC::ioWait()>
c0025f5c:	83 c4 10             	add    esp,0x10
c0025f5f:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025f65:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025f69:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025f6c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025f6f:	ee                   	out    dx,al
c0025f70:	83 ec 0c             	sub    esp,0xc
c0025f73:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f76:	e8 85 fe ff ff       	call   c0025e00 <PIC::ioWait()>
c0025f7b:	83 c4 10             	add    esp,0x10
c0025f7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025f81:	0f b6 c0             	movzx  eax,al
c0025f84:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025f8a:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025f8d:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025f90:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025f93:	ee                   	out    dx,al
c0025f94:	83 ec 0c             	sub    esp,0xc
c0025f97:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f9a:	e8 61 fe ff ff       	call   c0025e00 <PIC::ioWait()>
c0025f9f:	83 c4 10             	add    esp,0x10
c0025fa2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025fa5:	0f b6 c0             	movzx  eax,al
c0025fa8:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025fae:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025fb1:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025fb4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025fb7:	ee                   	out    dx,al
c0025fb8:	83 ec 0c             	sub    esp,0xc
c0025fbb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fbe:	e8 3d fe ff ff       	call   c0025e00 <PIC::ioWait()>
c0025fc3:	83 c4 10             	add    esp,0x10
c0025fc6:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025fcc:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025fd0:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025fd3:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025fd6:	ee                   	out    dx,al
c0025fd7:	83 ec 0c             	sub    esp,0xc
c0025fda:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fdd:	e8 1e fe ff ff       	call   c0025e00 <PIC::ioWait()>
c0025fe2:	83 c4 10             	add    esp,0x10
c0025fe5:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025feb:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025fef:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025ff2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ff5:	ee                   	out    dx,al
c0025ff6:	83 ec 0c             	sub    esp,0xc
c0025ff9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ffc:	e8 ff fd ff ff       	call   c0025e00 <PIC::ioWait()>
c0026001:	83 c4 10             	add    esp,0x10
c0026004:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002600a:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c002600e:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026011:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026014:	ee                   	out    dx,al
c0026015:	83 ec 0c             	sub    esp,0xc
c0026018:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002601b:	e8 e0 fd ff ff       	call   c0025e00 <PIC::ioWait()>
c0026020:	83 c4 10             	add    esp,0x10
c0026023:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026029:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c002602d:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026030:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026033:	ee                   	out    dx,al
c0026034:	83 ec 0c             	sub    esp,0xc
c0026037:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002603a:	e8 c1 fd ff ff       	call   c0025e00 <PIC::ioWait()>
c002603f:	83 c4 10             	add    esp,0x10
c0026042:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026046:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c002604c:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c002604f:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026052:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026055:	ee                   	out    dx,al
c0026056:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c002605a:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026060:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026063:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026066:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026069:	ee                   	out    dx,al
c002606a:	90                   	nop
c002606b:	c9                   	leave  
c002606c:	c3                   	ret    
c002606d:	90                   	nop

c002606e <PIC::open(int, int, void*)>:
c002606e:	55                   	push   ebp
c002606f:	89 e5                	mov    ebp,esp
c0026071:	83 ec 18             	sub    esp,0x18
c0026074:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c002607a:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c002607e:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026081:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026085:	ee                   	out    dx,al
c0026086:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c002608c:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026090:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026093:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026097:	ee                   	out    dx,al
c0026098:	83 ec 0c             	sub    esp,0xc
c002609b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002609e:	e8 5f fe ff ff       	call   c0025f02 <PIC::remap()>
c00260a3:	83 c4 10             	add    esp,0x10
c00260a6:	b8 00 00 00 00       	mov    eax,0x0
c00260ab:	c9                   	leave  
c00260ac:	c3                   	ret    
c00260ad:	90                   	nop

c00260ae <APICTimer::close(int, int, void*)>:
c00260ae:	b8 00 00 00 00       	mov    eax,0x0
c00260b3:	c3                   	ret    

c00260b4 <apicTimerHandler(regs*, void*)>:
c00260b4:	83 ec 0c             	sub    esp,0xc
c00260b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00260bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00260bd:	99                   	cdq    
c00260be:	52                   	push   edx
c00260bf:	50                   	push   eax
c00260c0:	6a 00                	push   0x0
c00260c2:	68 00 ca 9a 3b       	push   0x3b9aca00
c00260c7:	e8 90 07 00 00       	call   c002685c <__udivdi3>
c00260cc:	83 c4 10             	add    esp,0x10
c00260cf:	83 ec 08             	sub    esp,0x8
c00260d2:	52                   	push   edx
c00260d3:	50                   	push   eax
c00260d4:	e8 a2 0a ff ff       	call   c0016b7b <timerHandler(unsigned long long)>
c00260d9:	83 c4 10             	add    esp,0x10
c00260dc:	90                   	nop
c00260dd:	83 c4 0c             	add    esp,0xc
c00260e0:	c3                   	ret    
c00260e1:	90                   	nop

c00260e2 <APICTimer::write(int)>:
c00260e2:	53                   	push   ebx
c00260e3:	83 ec 28             	sub    esp,0x28
c00260e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00260ea:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00260ee:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00260f4:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c00260f9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00260ff:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026105:	83 ec 0c             	sub    esp,0xc
c0026108:	50                   	push   eax
c0026109:	e8 de f4 ff ff       	call   c00255ec <APIC::getBase()>
c002610e:	83 c4 10             	add    esp,0x10
c0026111:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026115:	a1 90 e8 02 c0       	mov    eax,ds:0xc002e890
c002611a:	8b 15 94 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e894
c0026120:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026124:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026128:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002612c:	05 e0 03 00 00       	add    eax,0x3e0
c0026131:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026137:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002613b:	05 80 03 00 00       	add    eax,0x380
c0026140:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026146:	fb                   	sti    
c0026147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002614b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002614f:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026154:	83 d2 00             	adc    edx,0x0
c0026157:	89 c1                	mov    ecx,eax
c0026159:	89 d3                	mov    ebx,edx
c002615b:	a1 90 e8 02 c0       	mov    eax,ds:0xc002e890
c0026160:	8b 15 94 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e894
c0026166:	39 c8                	cmp    eax,ecx
c0026168:	89 d0                	mov    eax,edx
c002616a:	19 d8                	sbb    eax,ebx
c002616c:	73 02                	jae    c0026170 <APICTimer::write(int)+0x8e>
c002616e:	eb d7                	jmp    c0026147 <APICTimer::write(int)+0x65>
c0026170:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026174:	05 20 03 00 00       	add    eax,0x320
c0026179:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002617f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026183:	05 90 03 00 00       	add    eax,0x390
c0026188:	8b 00                	mov    eax,DWORD PTR [eax]
c002618a:	f7 d0                	not    eax
c002618c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026190:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026194:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026198:	ba 00 00 00 00       	mov    edx,0x0
c002619d:	f7 f3                	div    ebx
c002619f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00261a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00261a7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00261ad:	0d 00 00 02 00       	or     eax,0x20000
c00261b2:	89 c2                	mov    edx,eax
c00261b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261b8:	05 20 03 00 00       	add    eax,0x320
c00261bd:	89 10                	mov    DWORD PTR [eax],edx
c00261bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261c3:	05 e0 03 00 00       	add    eax,0x3e0
c00261c8:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00261ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261d2:	05 80 03 00 00       	add    eax,0x380
c00261d7:	89 c2                	mov    edx,eax
c00261d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00261dd:	89 02                	mov    DWORD PTR [edx],eax
c00261df:	90                   	nop
c00261e0:	83 c4 28             	add    esp,0x28
c00261e3:	5b                   	pop    ebx
c00261e4:	c3                   	ret    
c00261e5:	90                   	nop

c00261e6 <APICTimer::open(int, int, void*)>:
c00261e6:	57                   	push   edi
c00261e7:	56                   	push   esi
c00261e8:	53                   	push   ebx
c00261e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00261ef:	83 c0 24             	add    eax,0x24
c00261f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00261f4:	83 ec 08             	sub    esp,0x8
c00261f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00261fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00261ff:	ff d0                	call   eax
c0026201:	83 c4 10             	add    esp,0x10
c0026204:	a1 08 e2 02 c0       	mov    eax,ds:0xc002e208
c0026209:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002620f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026215:	83 ec 0c             	sub    esp,0xc
c0026218:	50                   	push   eax
c0026219:	e8 ce f3 ff ff       	call   c00255ec <APIC::getBase()>
c002621e:	83 c4 10             	add    esp,0x10
c0026221:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002622b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026231:	0f b6 f8             	movzx  edi,al
c0026234:	89 d0                	mov    eax,edx
c0026236:	ba 00 00 00 00       	mov    edx,0x0
c002623b:	89 c1                	mov    ecx,eax
c002623d:	80 e5 ff             	and    ch,0xff
c0026240:	89 cb                	mov    ebx,ecx
c0026242:	0f b6 f2             	movzx  esi,dl
c0026245:	89 d8                	mov    eax,ebx
c0026247:	89 f2                	mov    edx,esi
c0026249:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002624d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026250:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026254:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026258:	83 e0 00             	and    eax,0x0
c002625b:	09 d0                	or     eax,edx
c002625d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026265:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002626b:	8d 50 01             	lea    edx,[eax+0x1]
c002626e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026272:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026278:	0f b6 d0             	movzx  edx,al
c002627b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002627f:	83 c2 08             	add    edx,0x8
c0026282:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026286:	0f b6 c9             	movzx  ecx,cl
c0026289:	81 c9 00 00 01 00    	or     ecx,0x10000
c002628f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002629b:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00262a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00262a9:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00262af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00262b3:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00262b9:	83 ec 0c             	sub    esp,0xc
c00262bc:	51                   	push   ecx
c00262bd:	6a 01                	push   0x1
c00262bf:	68 b4 60 02 c0       	push   0xc00260b4
c00262c4:	52                   	push   edx
c00262c5:	50                   	push   eax
c00262c6:	e8 57 de fe ff       	call   c0014122 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00262cb:	83 c4 20             	add    esp,0x20
c00262ce:	89 c2                	mov    edx,eax
c00262d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262d4:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00262da:	b8 00 00 00 00       	mov    eax,0x0
c00262df:	5b                   	pop    ebx
c00262e0:	5e                   	pop    esi
c00262e1:	5f                   	pop    edi
c00262e2:	c3                   	ret    
c00262e3:	90                   	nop

c00262e4 <APICTimer::APICTimer()>:
c00262e4:	83 ec 0c             	sub    esp,0xc
c00262e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262eb:	83 ec 08             	sub    esp,0x8
c00262ee:	68 a8 d0 02 c0       	push   0xc002d0a8
c00262f3:	50                   	push   eax
c00262f4:	e8 f3 07 ff ff       	call   c0016aec <Timer::Timer(char const*)>
c00262f9:	83 c4 10             	add    esp,0x10
c00262fc:	ba bc d0 02 c0       	mov    edx,0xc002d0bc
c0026301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026305:	89 10                	mov    DWORD PTR [eax],edx
c0026307:	90                   	nop
c0026308:	83 c4 0c             	add    esp,0xc
c002630b:	c3                   	ret    

c002630c <PIT::write(int)>:
c002630c:	83 ec 10             	sub    esp,0x10
c002630f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026313:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026317:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002631d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026321:	a3 c4 25 03 c0       	mov    ds:0xc00325c4,eax
c0026326:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002632b:	99                   	cdq    
c002632c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026330:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026334:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002633b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026340:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026344:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026349:	ee                   	out    dx,al
c002634a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002634e:	0f b6 c0             	movzx  eax,al
c0026351:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026358:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002635c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026360:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026365:	ee                   	out    dx,al
c0026366:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002636a:	c1 f8 08             	sar    eax,0x8
c002636d:	0f b6 c0             	movzx  eax,al
c0026370:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026377:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002637b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002637f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026384:	ee                   	out    dx,al
c0026385:	90                   	nop
c0026386:	83 c4 10             	add    esp,0x10
c0026389:	c3                   	ret    

c002638a <pitHandler(regs*, void*)>:
c002638a:	83 ec 0c             	sub    esp,0xc
c002638d:	a1 c4 25 03 c0       	mov    eax,ds:0xc00325c4
c0026392:	99                   	cdq    
c0026393:	52                   	push   edx
c0026394:	50                   	push   eax
c0026395:	6a 00                	push   0x0
c0026397:	68 00 ca 9a 3b       	push   0x3b9aca00
c002639c:	e8 bb 04 00 00       	call   c002685c <__udivdi3>
c00263a1:	83 c4 10             	add    esp,0x10
c00263a4:	83 ec 08             	sub    esp,0x8
c00263a7:	52                   	push   edx
c00263a8:	50                   	push   eax
c00263a9:	e8 cd 07 ff ff       	call   c0016b7b <timerHandler(unsigned long long)>
c00263ae:	83 c4 10             	add    esp,0x10
c00263b1:	90                   	nop
c00263b2:	83 c4 0c             	add    esp,0xc
c00263b5:	c3                   	ret    

c00263b6 <PIT::open(int, int, void*)>:
c00263b6:	83 ec 0c             	sub    esp,0xc
c00263b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00263bf:	83 c0 24             	add    eax,0x24
c00263c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00263c4:	83 ec 08             	sub    esp,0x8
c00263c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263cf:	ff d0                	call   eax
c00263d1:	83 c4 10             	add    esp,0x10
c00263d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263d8:	83 ec 0c             	sub    esp,0xc
c00263db:	6a 00                	push   0x0
c00263dd:	6a 01                	push   0x1
c00263df:	68 8a 63 02 c0       	push   0xc002638a
c00263e4:	6a 00                	push   0x0
c00263e6:	50                   	push   eax
c00263e7:	e8 36 dd fe ff       	call   c0014122 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00263ec:	83 c4 20             	add    esp,0x20
c00263ef:	89 c2                	mov    edx,eax
c00263f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263f5:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00263fb:	b8 00 00 00 00       	mov    eax,0x0
c0026400:	83 c4 0c             	add    esp,0xc
c0026403:	c3                   	ret    

c0026404 <PIT::close(int, int, void*)>:
c0026404:	83 ec 0c             	sub    esp,0xc
c0026407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002640b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026419:	6a 01                	push   0x1
c002641b:	68 8a 63 02 c0       	push   0xc002638a
c0026420:	6a 00                	push   0x0
c0026422:	50                   	push   eax
c0026423:	e8 38 dd fe ff       	call   c0014160 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026428:	83 c4 10             	add    esp,0x10
c002642b:	b8 00 00 00 00       	mov    eax,0x0
c0026430:	83 c4 0c             	add    esp,0xc
c0026433:	c3                   	ret    

c0026434 <PIT::PIT()>:
c0026434:	83 ec 0c             	sub    esp,0xc
c0026437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002643b:	83 ec 08             	sub    esp,0x8
c002643e:	68 e4 d0 02 c0       	push   0xc002d0e4
c0026443:	50                   	push   eax
c0026444:	e8 a3 06 ff ff       	call   c0016aec <Timer::Timer(char const*)>
c0026449:	83 c4 10             	add    esp,0x10
c002644c:	ba 0c d1 02 c0       	mov    edx,0xc002d10c
c0026451:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026455:	89 10                	mov    DWORD PTR [eax],edx
c0026457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002645b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026461:	0f b6 d0             	movzx  edx,al
c0026464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026468:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002646f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026473:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026479:	0f b6 d0             	movzx  edx,al
c002647c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026480:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026489:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002648f:	8d 50 01             	lea    edx,[eax+0x1]
c0026492:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026496:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002649c:	0f b6 d0             	movzx  edx,al
c002649f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264a3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00264a7:	83 e1 3f             	and    ecx,0x3f
c00264aa:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00264ae:	90                   	nop
c00264af:	83 c4 0c             	add    esp,0xc
c00264b2:	c3                   	ret    
c00264b3:	66 90                	xchg   ax,ax
c00264b5:	66 90                	xchg   ax,ax
c00264b7:	66 90                	xchg   ax,ax
c00264b9:	66 90                	xchg   ax,ax
c00264bb:	66 90                	xchg   ax,ax
c00264bd:	66 90                	xchg   ax,ax
c00264bf:	90                   	nop

c00264c0 <avxDetect>:
c00264c0:	b8 00 00 00 00       	mov    eax,0x0
c00264c5:	c3                   	ret    

c00264c6 <avxSave>:
c00264c6:	c3                   	ret    

c00264c7 <avxLoad>:
c00264c7:	c3                   	ret    

c00264c8 <avxInit>:
c00264c8:	c3                   	ret    

c00264c9 <avxClose>:
c00264c9:	c3                   	ret    

c00264ca <wouldSheSayYes>:
c00264ca:	c3                   	ret    
c00264cb:	49                   	dec    ecx
c00264cc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00264d0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00264d4:	75 20                	jne    c00264f6 <sseDetect.noSSE+0x1>
c00264d6:	4e                   	dec    esi
c00264d7:	79 61                	jns    c002653a <x87Detect+0x14>
c00264d9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00264de:	66 90                	xchg   ax,ax

c00264e0 <absolutelyNoChanceInHell>:
c00264e0:	b8 01 00 00 00       	mov    eax,0x1
c00264e5:	0f a2                	cpuid  
c00264e7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00264ed:	74 06                	je     c00264f5 <sseDetect.noSSE>
c00264ef:	b8 01 00 00 00       	mov    eax,0x1
c00264f4:	c3                   	ret    

c00264f5 <sseDetect.noSSE>:
c00264f5:	31 c0                	xor    eax,eax
c00264f7:	c3                   	ret    

c00264f8 <sseSave>:
c00264f8:	0f ae 44 24 08       	fxsave [esp+0x8]
c00264fd:	c3                   	ret    

c00264fe <sseLoad>:
c00264fe:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026503:	c3                   	ret    

c0026504 <sseInit>:
c0026504:	e8 43 00 00 00       	call   c002654c <x87Init>
c0026509:	0f 20 e0             	mov    eax,cr4
c002650c:	66 0d 00 06          	or     ax,0x600
c0026510:	0f 22 e0             	mov    cr4,eax
c0026513:	c3                   	ret    

c0026514 <sseClose>:
c0026514:	c3                   	ret    
c0026515:	66 90                	xchg   ax,ax
c0026517:	66 90                	xchg   ax,ax
c0026519:	66 90                	xchg   ax,ax
c002651b:	66 90                	xchg   ax,ax
c002651d:	66 90                	xchg   ax,ax
c002651f:	90                   	nop

c0026520 <value_37F>:
c0026520:	7f 03                	jg     c0026525 <value_37A+0x1>

c0026522 <value_37E>:
c0026522:	7e 03                	jle    c0026527 <x87Detect+0x1>

c0026524 <value_37A>:
c0026524:	7a 03                	jp     c0026529 <x87Detect+0x3>

c0026526 <x87Detect>:
c0026526:	b8 01 00 00 00       	mov    eax,0x1
c002652b:	0f a2                	cpuid  
c002652d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026533:	74 06                	je     c002653b <x87Detect.nox87>
c0026535:	b8 01 00 00 00       	mov    eax,0x1
c002653a:	c3                   	ret    

c002653b <x87Detect.nox87>:
c002653b:	b8 00 00 00 00       	mov    eax,0x0
c0026540:	c3                   	ret    

c0026541 <x87Save>:
c0026541:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026546:	c3                   	ret    

c0026547 <x87Load>:
c0026547:	dd 64 24 08          	frstor [esp+0x8]
c002654b:	c3                   	ret    

c002654c <x87Init>:
c002654c:	9b db e3             	finit  
c002654f:	0f 20 c0             	mov    eax,cr0
c0026552:	66 25 fb ff          	and    ax,0xfffb
c0026556:	66 0d 22 00          	or     ax,0x22
c002655a:	0f 22 c0             	mov    cr0,eax
c002655d:	0f 06                	clts   
c002655f:	d9 2d 24 65 02 c0    	fldcw  WORD PTR ds:0xc0026524
c0026565:	c3                   	ret    

c0026566 <x87Close>:
c0026566:	c3                   	ret    
c0026567:	90                   	nop

c0026568 <__do_global_ctors_aux>:
c0026568:	a1 ac 90 02 c0       	mov    eax,ds:0xc00290ac
c002656d:	83 f8 ff             	cmp    eax,0xffffffff
c0026570:	74 1a                	je     c002658c <__do_global_ctors_aux+0x24>
c0026572:	55                   	push   ebp
c0026573:	89 e5                	mov    ebp,esp
c0026575:	53                   	push   ebx
c0026576:	52                   	push   edx
c0026577:	bb ac 90 02 c0       	mov    ebx,0xc00290ac
c002657c:	ff d0                	call   eax
c002657e:	83 eb 04             	sub    ebx,0x4
c0026581:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026583:	83 f8 ff             	cmp    eax,0xffffffff
c0026586:	75 f4                	jne    c002657c <__do_global_ctors_aux+0x14>
c0026588:	58                   	pop    eax
c0026589:	5b                   	pop    ebx
c002658a:	5d                   	pop    ebp
c002658b:	c3                   	ret    
c002658c:	c3                   	ret    
c002658d:	66 90                	xchg   ax,ax
c002658f:	90                   	nop

c0026590 <__divdi3>:
c0026590:	55                   	push   ebp
c0026591:	57                   	push   edi
c0026592:	56                   	push   esi
c0026593:	53                   	push   ebx
c0026594:	83 ec 1c             	sub    esp,0x1c
c0026597:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002659b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002659f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00265a2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00265a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00265aa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00265ae:	85 db                	test   ebx,ebx
c00265b0:	0f 88 8e 00 00 00    	js     c0026644 <__divdi3+0xb4>
c00265b6:	89 dd                	mov    ebp,ebx
c00265b8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00265c0:	89 d3                	mov    ebx,edx
c00265c2:	85 d2                	test   edx,edx
c00265c4:	79 0d                	jns    c00265d3 <__divdi3+0x43>
c00265c6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00265ca:	f7 d8                	neg    eax
c00265cc:	83 d2 00             	adc    edx,0x0
c00265cf:	f7 da                	neg    edx
c00265d1:	89 d3                	mov    ebx,edx
c00265d3:	89 c7                	mov    edi,eax
c00265d5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00265d8:	85 db                	test   ebx,ebx
c00265da:	75 48                	jne    c0026624 <__divdi3+0x94>
c00265dc:	39 ef                	cmp    edi,ebp
c00265de:	76 24                	jbe    c0026604 <__divdi3+0x74>
c00265e0:	89 ea                	mov    edx,ebp
c00265e2:	f7 f7                	div    edi
c00265e4:	89 c1                	mov    ecx,eax
c00265e6:	31 f6                	xor    esi,esi
c00265e8:	89 c8                	mov    eax,ecx
c00265ea:	89 f2                	mov    edx,esi
c00265ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00265f0:	85 c9                	test   ecx,ecx
c00265f2:	74 07                	je     c00265fb <__divdi3+0x6b>
c00265f4:	f7 d8                	neg    eax
c00265f6:	83 d2 00             	adc    edx,0x0
c00265f9:	f7 da                	neg    edx
c00265fb:	83 c4 1c             	add    esp,0x1c
c00265fe:	5b                   	pop    ebx
c00265ff:	5e                   	pop    esi
c0026600:	5f                   	pop    edi
c0026601:	5d                   	pop    ebp
c0026602:	c3                   	ret    
c0026603:	90                   	nop
c0026604:	85 ff                	test   edi,edi
c0026606:	75 0b                	jne    c0026613 <__divdi3+0x83>
c0026608:	b8 01 00 00 00       	mov    eax,0x1
c002660d:	31 d2                	xor    edx,edx
c002660f:	f7 f3                	div    ebx
c0026611:	89 c7                	mov    edi,eax
c0026613:	31 d2                	xor    edx,edx
c0026615:	89 e8                	mov    eax,ebp
c0026617:	f7 f7                	div    edi
c0026619:	89 c6                	mov    esi,eax
c002661b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002661e:	f7 f7                	div    edi
c0026620:	89 c1                	mov    ecx,eax
c0026622:	eb c4                	jmp    c00265e8 <__divdi3+0x58>
c0026624:	39 eb                	cmp    ebx,ebp
c0026626:	77 3c                	ja     c0026664 <__divdi3+0xd4>
c0026628:	0f bd f3             	bsr    esi,ebx
c002662b:	83 f6 1f             	xor    esi,0x1f
c002662e:	75 40                	jne    c0026670 <__divdi3+0xe0>
c0026630:	39 eb                	cmp    ebx,ebp
c0026632:	72 09                	jb     c002663d <__divdi3+0xad>
c0026634:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026637:	0f 87 97 00 00 00    	ja     c00266d4 <__divdi3+0x144>
c002663d:	b9 01 00 00 00       	mov    ecx,0x1
c0026642:	eb a4                	jmp    c00265e8 <__divdi3+0x58>
c0026644:	f7 d9                	neg    ecx
c0026646:	83 d3 00             	adc    ebx,0x0
c0026649:	f7 db                	neg    ebx
c002664b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002664e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026652:	89 dd                	mov    ebp,ebx
c0026654:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002665c:	e9 5f ff ff ff       	jmp    c00265c0 <__divdi3+0x30>
c0026661:	8d 76 00             	lea    esi,[esi+0x0]
c0026664:	31 f6                	xor    esi,esi
c0026666:	31 c9                	xor    ecx,ecx
c0026668:	e9 7b ff ff ff       	jmp    c00265e8 <__divdi3+0x58>
c002666d:	8d 76 00             	lea    esi,[esi+0x0]
c0026670:	b8 20 00 00 00       	mov    eax,0x20
c0026675:	29 f0                	sub    eax,esi
c0026677:	89 f1                	mov    ecx,esi
c0026679:	d3 e3                	shl    ebx,cl
c002667b:	89 fa                	mov    edx,edi
c002667d:	88 c1                	mov    cl,al
c002667f:	d3 ea                	shr    edx,cl
c0026681:	09 da                	or     edx,ebx
c0026683:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026687:	89 f1                	mov    ecx,esi
c0026689:	d3 e7                	shl    edi,cl
c002668b:	89 eb                	mov    ebx,ebp
c002668d:	88 c1                	mov    cl,al
c002668f:	d3 eb                	shr    ebx,cl
c0026691:	89 f1                	mov    ecx,esi
c0026693:	d3 e5                	shl    ebp,cl
c0026695:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026698:	88 c1                	mov    cl,al
c002669a:	d3 ea                	shr    edx,cl
c002669c:	09 d5                	or     ebp,edx
c002669e:	89 e8                	mov    eax,ebp
c00266a0:	89 da                	mov    edx,ebx
c00266a2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00266a6:	89 d3                	mov    ebx,edx
c00266a8:	89 c5                	mov    ebp,eax
c00266aa:	f7 e7                	mul    edi
c00266ac:	39 d3                	cmp    ebx,edx
c00266ae:	72 18                	jb     c00266c8 <__divdi3+0x138>
c00266b0:	74 0a                	je     c00266bc <__divdi3+0x12c>
c00266b2:	89 e9                	mov    ecx,ebp
c00266b4:	31 f6                	xor    esi,esi
c00266b6:	e9 2d ff ff ff       	jmp    c00265e8 <__divdi3+0x58>
c00266bb:	90                   	nop
c00266bc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00266bf:	89 f1                	mov    ecx,esi
c00266c1:	d3 e7                	shl    edi,cl
c00266c3:	39 c7                	cmp    edi,eax
c00266c5:	73 eb                	jae    c00266b2 <__divdi3+0x122>
c00266c7:	90                   	nop
c00266c8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00266cb:	31 f6                	xor    esi,esi
c00266cd:	e9 16 ff ff ff       	jmp    c00265e8 <__divdi3+0x58>
c00266d2:	66 90                	xchg   ax,ax
c00266d4:	31 c9                	xor    ecx,ecx
c00266d6:	e9 0d ff ff ff       	jmp    c00265e8 <__divdi3+0x58>
c00266db:	90                   	nop

c00266dc <__moddi3>:
c00266dc:	55                   	push   ebp
c00266dd:	57                   	push   edi
c00266de:	56                   	push   esi
c00266df:	53                   	push   ebx
c00266e0:	83 ec 2c             	sub    esp,0x2c
c00266e3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00266e7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00266eb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00266ef:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00266f3:	85 db                	test   ebx,ebx
c00266f5:	0f 88 85 00 00 00    	js     c0026780 <__moddi3+0xa4>
c00266fb:	89 de                	mov    esi,ebx
c00266fd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026705:	89 d7                	mov    edi,edx
c0026707:	85 d2                	test   edx,edx
c0026709:	79 09                	jns    c0026714 <__moddi3+0x38>
c002670b:	f7 d8                	neg    eax
c002670d:	83 d2 00             	adc    edx,0x0
c0026710:	f7 da                	neg    edx
c0026712:	89 d7                	mov    edi,edx
c0026714:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026718:	89 cd                	mov    ebp,ecx
c002671a:	85 ff                	test   edi,edi
c002671c:	75 52                	jne    c0026770 <__moddi3+0x94>
c002671e:	89 c3                	mov    ebx,eax
c0026720:	39 f0                	cmp    eax,esi
c0026722:	76 24                	jbe    c0026748 <__moddi3+0x6c>
c0026724:	89 c8                	mov    eax,ecx
c0026726:	89 f2                	mov    edx,esi
c0026728:	f7 f3                	div    ebx
c002672a:	89 d6                	mov    esi,edx
c002672c:	89 f0                	mov    eax,esi
c002672e:	31 d2                	xor    edx,edx
c0026730:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026734:	85 c9                	test   ecx,ecx
c0026736:	74 07                	je     c002673f <__moddi3+0x63>
c0026738:	f7 d8                	neg    eax
c002673a:	83 d2 00             	adc    edx,0x0
c002673d:	f7 da                	neg    edx
c002673f:	83 c4 2c             	add    esp,0x2c
c0026742:	5b                   	pop    ebx
c0026743:	5e                   	pop    esi
c0026744:	5f                   	pop    edi
c0026745:	5d                   	pop    ebp
c0026746:	c3                   	ret    
c0026747:	90                   	nop
c0026748:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002674c:	85 db                	test   ebx,ebx
c002674e:	75 0d                	jne    c002675d <__moddi3+0x81>
c0026750:	b8 01 00 00 00       	mov    eax,0x1
c0026755:	31 d2                	xor    edx,edx
c0026757:	f7 f7                	div    edi
c0026759:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002675d:	89 f0                	mov    eax,esi
c002675f:	31 d2                	xor    edx,edx
c0026761:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026765:	f7 f7                	div    edi
c0026767:	89 e8                	mov    eax,ebp
c0026769:	f7 f7                	div    edi
c002676b:	89 d6                	mov    esi,edx
c002676d:	eb bd                	jmp    c002672c <__moddi3+0x50>
c002676f:	90                   	nop
c0026770:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026774:	39 f7                	cmp    edi,esi
c0026776:	76 20                	jbe    c0026798 <__moddi3+0xbc>
c0026778:	89 c8                	mov    eax,ecx
c002677a:	89 f2                	mov    edx,esi
c002677c:	eb b2                	jmp    c0026730 <__moddi3+0x54>
c002677e:	66 90                	xchg   ax,ax
c0026780:	f7 d9                	neg    ecx
c0026782:	83 d3 00             	adc    ebx,0x0
c0026785:	f7 db                	neg    ebx
c0026787:	89 de                	mov    esi,ebx
c0026789:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026791:	e9 6f ff ff ff       	jmp    c0026705 <__moddi3+0x29>
c0026796:	66 90                	xchg   ax,ax
c0026798:	0f bd c7             	bsr    eax,edi
c002679b:	83 f0 1f             	xor    eax,0x1f
c002679e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00267a2:	75 24                	jne    c00267c8 <__moddi3+0xec>
c00267a4:	39 f7                	cmp    edi,esi
c00267a6:	72 06                	jb     c00267ae <__moddi3+0xd2>
c00267a8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00267ac:	77 0c                	ja     c00267ba <__moddi3+0xde>
c00267ae:	89 e9                	mov    ecx,ebp
c00267b0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00267b4:	19 fe                	sbb    esi,edi
c00267b6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00267ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00267be:	89 f2                	mov    edx,esi
c00267c0:	e9 6b ff ff ff       	jmp    c0026730 <__moddi3+0x54>
c00267c5:	8d 76 00             	lea    esi,[esi+0x0]
c00267c8:	b8 20 00 00 00       	mov    eax,0x20
c00267cd:	89 c2                	mov    edx,eax
c00267cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00267d3:	29 da                	sub    edx,ebx
c00267d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00267d9:	88 d9                	mov    cl,bl
c00267db:	d3 e7                	shl    edi,cl
c00267dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00267e1:	88 d1                	mov    cl,dl
c00267e3:	d3 e8                	shr    eax,cl
c00267e5:	09 c7                	or     edi,eax
c00267e7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00267eb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00267ef:	89 d8                	mov    eax,ebx
c00267f1:	88 d9                	mov    cl,bl
c00267f3:	d3 e7                	shl    edi,cl
c00267f5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00267f9:	89 f3                	mov    ebx,esi
c00267fb:	88 d1                	mov    cl,dl
c00267fd:	d3 eb                	shr    ebx,cl
c00267ff:	89 c7                	mov    edi,eax
c0026801:	88 c1                	mov    cl,al
c0026803:	d3 e6                	shl    esi,cl
c0026805:	89 e8                	mov    eax,ebp
c0026807:	88 d1                	mov    cl,dl
c0026809:	d3 e8                	shr    eax,cl
c002680b:	09 f0                	or     eax,esi
c002680d:	89 f9                	mov    ecx,edi
c002680f:	d3 e5                	shl    ebp,cl
c0026811:	89 da                	mov    edx,ebx
c0026813:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026817:	89 d3                	mov    ebx,edx
c0026819:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002681d:	89 c6                	mov    esi,eax
c002681f:	89 d1                	mov    ecx,edx
c0026821:	39 d3                	cmp    ebx,edx
c0026823:	72 27                	jb     c002684c <__moddi3+0x170>
c0026825:	74 21                	je     c0026848 <__moddi3+0x16c>
c0026827:	29 f5                	sub    ebp,esi
c0026829:	19 cb                	sbb    ebx,ecx
c002682b:	89 de                	mov    esi,ebx
c002682d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026831:	d3 e6                	shl    esi,cl
c0026833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026837:	89 f9                	mov    ecx,edi
c0026839:	d3 ed                	shr    ebp,cl
c002683b:	09 ee                	or     esi,ebp
c002683d:	89 f0                	mov    eax,esi
c002683f:	d3 eb                	shr    ebx,cl
c0026841:	89 da                	mov    edx,ebx
c0026843:	e9 e8 fe ff ff       	jmp    c0026730 <__moddi3+0x54>
c0026848:	39 c5                	cmp    ebp,eax
c002684a:	73 db                	jae    c0026827 <__moddi3+0x14b>
c002684c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026850:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026854:	89 d1                	mov    ecx,edx
c0026856:	89 c6                	mov    esi,eax
c0026858:	eb cd                	jmp    c0026827 <__moddi3+0x14b>
c002685a:	66 90                	xchg   ax,ax

c002685c <__udivdi3>:
c002685c:	55                   	push   ebp
c002685d:	57                   	push   edi
c002685e:	56                   	push   esi
c002685f:	53                   	push   ebx
c0026860:	83 ec 1c             	sub    esp,0x1c
c0026863:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026867:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002686b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002686f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026873:	85 d2                	test   edx,edx
c0026875:	75 41                	jne    c00268b8 <__udivdi3+0x5c>
c0026877:	39 f7                	cmp    edi,esi
c0026879:	76 15                	jbe    c0026890 <__udivdi3+0x34>
c002687b:	89 e8                	mov    eax,ebp
c002687d:	89 f2                	mov    edx,esi
c002687f:	f7 f7                	div    edi
c0026881:	31 db                	xor    ebx,ebx
c0026883:	89 da                	mov    edx,ebx
c0026885:	83 c4 1c             	add    esp,0x1c
c0026888:	5b                   	pop    ebx
c0026889:	5e                   	pop    esi
c002688a:	5f                   	pop    edi
c002688b:	5d                   	pop    ebp
c002688c:	c3                   	ret    
c002688d:	8d 76 00             	lea    esi,[esi+0x0]
c0026890:	89 f9                	mov    ecx,edi
c0026892:	85 ff                	test   edi,edi
c0026894:	75 0b                	jne    c00268a1 <__udivdi3+0x45>
c0026896:	b8 01 00 00 00       	mov    eax,0x1
c002689b:	31 d2                	xor    edx,edx
c002689d:	f7 f7                	div    edi
c002689f:	89 c1                	mov    ecx,eax
c00268a1:	31 d2                	xor    edx,edx
c00268a3:	89 f0                	mov    eax,esi
c00268a5:	f7 f1                	div    ecx
c00268a7:	89 c3                	mov    ebx,eax
c00268a9:	89 e8                	mov    eax,ebp
c00268ab:	f7 f1                	div    ecx
c00268ad:	89 da                	mov    edx,ebx
c00268af:	83 c4 1c             	add    esp,0x1c
c00268b2:	5b                   	pop    ebx
c00268b3:	5e                   	pop    esi
c00268b4:	5f                   	pop    edi
c00268b5:	5d                   	pop    ebp
c00268b6:	c3                   	ret    
c00268b7:	90                   	nop
c00268b8:	39 f2                	cmp    edx,esi
c00268ba:	77 1c                	ja     c00268d8 <__udivdi3+0x7c>
c00268bc:	0f bd da             	bsr    ebx,edx
c00268bf:	83 f3 1f             	xor    ebx,0x1f
c00268c2:	75 24                	jne    c00268e8 <__udivdi3+0x8c>
c00268c4:	39 f2                	cmp    edx,esi
c00268c6:	72 08                	jb     c00268d0 <__udivdi3+0x74>
c00268c8:	39 ef                	cmp    edi,ebp
c00268ca:	0f 87 84 00 00 00    	ja     c0026954 <__udivdi3+0xf8>
c00268d0:	b8 01 00 00 00       	mov    eax,0x1
c00268d5:	eb ac                	jmp    c0026883 <__udivdi3+0x27>
c00268d7:	90                   	nop
c00268d8:	31 db                	xor    ebx,ebx
c00268da:	31 c0                	xor    eax,eax
c00268dc:	89 da                	mov    edx,ebx
c00268de:	83 c4 1c             	add    esp,0x1c
c00268e1:	5b                   	pop    ebx
c00268e2:	5e                   	pop    esi
c00268e3:	5f                   	pop    edi
c00268e4:	5d                   	pop    ebp
c00268e5:	c3                   	ret    
c00268e6:	66 90                	xchg   ax,ax
c00268e8:	b8 20 00 00 00       	mov    eax,0x20
c00268ed:	29 d8                	sub    eax,ebx
c00268ef:	88 d9                	mov    cl,bl
c00268f1:	d3 e2                	shl    edx,cl
c00268f3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00268f7:	89 fa                	mov    edx,edi
c00268f9:	88 c1                	mov    cl,al
c00268fb:	d3 ea                	shr    edx,cl
c00268fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026901:	09 d1                	or     ecx,edx
c0026903:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026907:	88 d9                	mov    cl,bl
c0026909:	d3 e7                	shl    edi,cl
c002690b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002690f:	89 f7                	mov    edi,esi
c0026911:	88 c1                	mov    cl,al
c0026913:	d3 ef                	shr    edi,cl
c0026915:	88 d9                	mov    cl,bl
c0026917:	d3 e6                	shl    esi,cl
c0026919:	89 ea                	mov    edx,ebp
c002691b:	88 c1                	mov    cl,al
c002691d:	d3 ea                	shr    edx,cl
c002691f:	09 d6                	or     esi,edx
c0026921:	89 f0                	mov    eax,esi
c0026923:	89 fa                	mov    edx,edi
c0026925:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026929:	89 d7                	mov    edi,edx
c002692b:	89 c6                	mov    esi,eax
c002692d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026931:	39 d7                	cmp    edi,edx
c0026933:	72 13                	jb     c0026948 <__udivdi3+0xec>
c0026935:	74 09                	je     c0026940 <__udivdi3+0xe4>
c0026937:	89 f0                	mov    eax,esi
c0026939:	31 db                	xor    ebx,ebx
c002693b:	e9 43 ff ff ff       	jmp    c0026883 <__udivdi3+0x27>
c0026940:	88 d9                	mov    cl,bl
c0026942:	d3 e5                	shl    ebp,cl
c0026944:	39 c5                	cmp    ebp,eax
c0026946:	73 ef                	jae    c0026937 <__udivdi3+0xdb>
c0026948:	8d 46 ff             	lea    eax,[esi-0x1]
c002694b:	31 db                	xor    ebx,ebx
c002694d:	e9 31 ff ff ff       	jmp    c0026883 <__udivdi3+0x27>
c0026952:	66 90                	xchg   ax,ax
c0026954:	31 c0                	xor    eax,eax
c0026956:	e9 28 ff ff ff       	jmp    c0026883 <__udivdi3+0x27>
c002695b:	90                   	nop

c002695c <__umoddi3>:
c002695c:	55                   	push   ebp
c002695d:	57                   	push   edi
c002695e:	56                   	push   esi
c002695f:	53                   	push   ebx
c0026960:	83 ec 1c             	sub    esp,0x1c
c0026963:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026967:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002696b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002696f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026973:	89 da                	mov    edx,ebx
c0026975:	85 c0                	test   eax,eax
c0026977:	75 37                	jne    c00269b0 <__umoddi3+0x54>
c0026979:	39 df                	cmp    edi,ebx
c002697b:	76 13                	jbe    c0026990 <__umoddi3+0x34>
c002697d:	89 f0                	mov    eax,esi
c002697f:	f7 f7                	div    edi
c0026981:	89 d0                	mov    eax,edx
c0026983:	31 d2                	xor    edx,edx
c0026985:	83 c4 1c             	add    esp,0x1c
c0026988:	5b                   	pop    ebx
c0026989:	5e                   	pop    esi
c002698a:	5f                   	pop    edi
c002698b:	5d                   	pop    ebp
c002698c:	c3                   	ret    
c002698d:	8d 76 00             	lea    esi,[esi+0x0]
c0026990:	89 fd                	mov    ebp,edi
c0026992:	85 ff                	test   edi,edi
c0026994:	75 0b                	jne    c00269a1 <__umoddi3+0x45>
c0026996:	b8 01 00 00 00       	mov    eax,0x1
c002699b:	31 d2                	xor    edx,edx
c002699d:	f7 f7                	div    edi
c002699f:	89 c5                	mov    ebp,eax
c00269a1:	89 d8                	mov    eax,ebx
c00269a3:	31 d2                	xor    edx,edx
c00269a5:	f7 f5                	div    ebp
c00269a7:	89 f0                	mov    eax,esi
c00269a9:	f7 f5                	div    ebp
c00269ab:	89 d0                	mov    eax,edx
c00269ad:	eb d4                	jmp    c0026983 <__umoddi3+0x27>
c00269af:	90                   	nop
c00269b0:	89 f1                	mov    ecx,esi
c00269b2:	39 d8                	cmp    eax,ebx
c00269b4:	76 0a                	jbe    c00269c0 <__umoddi3+0x64>
c00269b6:	89 f0                	mov    eax,esi
c00269b8:	83 c4 1c             	add    esp,0x1c
c00269bb:	5b                   	pop    ebx
c00269bc:	5e                   	pop    esi
c00269bd:	5f                   	pop    edi
c00269be:	5d                   	pop    ebp
c00269bf:	c3                   	ret    
c00269c0:	0f bd e8             	bsr    ebp,eax
c00269c3:	83 f5 1f             	xor    ebp,0x1f
c00269c6:	75 1c                	jne    c00269e4 <__umoddi3+0x88>
c00269c8:	39 d8                	cmp    eax,ebx
c00269ca:	72 04                	jb     c00269d0 <__umoddi3+0x74>
c00269cc:	39 f7                	cmp    edi,esi
c00269ce:	77 08                	ja     c00269d8 <__umoddi3+0x7c>
c00269d0:	89 da                	mov    edx,ebx
c00269d2:	29 fe                	sub    esi,edi
c00269d4:	19 c2                	sbb    edx,eax
c00269d6:	89 f1                	mov    ecx,esi
c00269d8:	89 c8                	mov    eax,ecx
c00269da:	83 c4 1c             	add    esp,0x1c
c00269dd:	5b                   	pop    ebx
c00269de:	5e                   	pop    esi
c00269df:	5f                   	pop    edi
c00269e0:	5d                   	pop    ebp
c00269e1:	c3                   	ret    
c00269e2:	66 90                	xchg   ax,ax
c00269e4:	ba 20 00 00 00       	mov    edx,0x20
c00269e9:	29 ea                	sub    edx,ebp
c00269eb:	89 e9                	mov    ecx,ebp
c00269ed:	d3 e0                	shl    eax,cl
c00269ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00269f3:	89 f8                	mov    eax,edi
c00269f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00269f9:	88 d1                	mov    cl,dl
c00269fb:	d3 e8                	shr    eax,cl
c00269fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a01:	09 c1                	or     ecx,eax
c0026a03:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026a07:	89 e9                	mov    ecx,ebp
c0026a09:	d3 e7                	shl    edi,cl
c0026a0b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a0f:	89 d8                	mov    eax,ebx
c0026a11:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026a15:	88 d1                	mov    cl,dl
c0026a17:	d3 e8                	shr    eax,cl
c0026a19:	89 c7                	mov    edi,eax
c0026a1b:	89 e9                	mov    ecx,ebp
c0026a1d:	d3 e3                	shl    ebx,cl
c0026a1f:	89 f0                	mov    eax,esi
c0026a21:	88 d1                	mov    cl,dl
c0026a23:	d3 e8                	shr    eax,cl
c0026a25:	09 d8                	or     eax,ebx
c0026a27:	89 e9                	mov    ecx,ebp
c0026a29:	d3 e6                	shl    esi,cl
c0026a2b:	89 f3                	mov    ebx,esi
c0026a2d:	89 fa                	mov    edx,edi
c0026a2f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026a33:	89 d1                	mov    ecx,edx
c0026a35:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a39:	89 c6                	mov    esi,eax
c0026a3b:	89 d7                	mov    edi,edx
c0026a3d:	39 d1                	cmp    ecx,edx
c0026a3f:	72 27                	jb     c0026a68 <__umoddi3+0x10c>
c0026a41:	74 21                	je     c0026a64 <__umoddi3+0x108>
c0026a43:	89 ca                	mov    edx,ecx
c0026a45:	29 f3                	sub    ebx,esi
c0026a47:	19 fa                	sbb    edx,edi
c0026a49:	89 d0                	mov    eax,edx
c0026a4b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026a4f:	d3 e0                	shl    eax,cl
c0026a51:	89 e9                	mov    ecx,ebp
c0026a53:	d3 eb                	shr    ebx,cl
c0026a55:	09 d8                	or     eax,ebx
c0026a57:	d3 ea                	shr    edx,cl
c0026a59:	83 c4 1c             	add    esp,0x1c
c0026a5c:	5b                   	pop    ebx
c0026a5d:	5e                   	pop    esi
c0026a5e:	5f                   	pop    edi
c0026a5f:	5d                   	pop    ebp
c0026a60:	c3                   	ret    
c0026a61:	8d 76 00             	lea    esi,[esi+0x0]
c0026a64:	39 c3                	cmp    ebx,eax
c0026a66:	73 db                	jae    c0026a43 <__umoddi3+0xe7>
c0026a68:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026a6c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026a70:	89 d7                	mov    edi,edx
c0026a72:	89 c6                	mov    esi,eax
c0026a74:	eb cd                	jmp    c0026a43 <__umoddi3+0xe7>

c0026a76 <__addsf3>:
c0026a76:	55                   	push   ebp
c0026a77:	89 e5                	mov    ebp,esp
c0026a79:	57                   	push   edi
c0026a7a:	56                   	push   esi
c0026a7b:	53                   	push   ebx
c0026a7c:	83 ec 08             	sub    esp,0x8
c0026a7f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026a82:	89 fa                	mov    edx,edi
c0026a84:	89 f8                	mov    eax,edi
c0026a86:	c1 f8 17             	sar    eax,0x17
c0026a89:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026a8c:	c1 e2 08             	shl    edx,0x8
c0026a8f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026a95:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026a98:	89 de                	mov    esi,ebx
c0026a9a:	c1 fe 17             	sar    esi,0x17
c0026a9d:	c1 e3 08             	shl    ebx,0x8
c0026aa0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026aa6:	31 f0                	xor    eax,esi
c0026aa8:	0f 88 3b 01 00 00    	js     c0026be9 <__addsf3+0x173>
c0026aae:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026ab1:	29 f1                	sub    ecx,esi
c0026ab3:	85 c9                	test   ecx,ecx
c0026ab5:	7e 54                	jle    c0026b0b <__addsf3+0x95>
c0026ab7:	89 f0                	mov    eax,esi
c0026ab9:	84 c0                	test   al,al
c0026abb:	75 10                	jne    c0026acd <__addsf3+0x57>
c0026abd:	85 db                	test   ebx,ebx
c0026abf:	0f 84 aa 02 00 00    	je     c0026d6f <__addsf3+0x2f9>
c0026ac5:	49                   	dec    ecx
c0026ac6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026ac9:	74 38                	je     c0026b03 <__addsf3+0x8d>
c0026acb:	eb 13                	jmp    c0026ae0 <__addsf3+0x6a>
c0026acd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ad0:	f7 d0                	not    eax
c0026ad2:	84 c0                	test   al,al
c0026ad4:	0f 84 95 02 00 00    	je     c0026d6f <__addsf3+0x2f9>
c0026ada:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026ae0:	83 f9 1f             	cmp    ecx,0x1f
c0026ae3:	0f 8f 86 02 00 00    	jg     c0026d6f <__addsf3+0x2f9>
c0026ae9:	89 de                	mov    esi,ebx
c0026aeb:	d3 ee                	shr    esi,cl
c0026aed:	b8 20 00 00 00       	mov    eax,0x20
c0026af2:	29 c8                	sub    eax,ecx
c0026af4:	89 c1                	mov    ecx,eax
c0026af6:	d3 e3                	shl    ebx,cl
c0026af8:	31 c0                	xor    eax,eax
c0026afa:	85 db                	test   ebx,ebx
c0026afc:	0f 95 c0             	setne  al
c0026aff:	09 f0                	or     eax,esi
c0026b01:	01 d0                	add    eax,edx
c0026b03:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b06:	e9 b6 00 00 00       	jmp    c0026bc1 <__addsf3+0x14b>
c0026b0b:	74 5c                	je     c0026b69 <__addsf3+0xf3>
c0026b0d:	89 f1                	mov    ecx,esi
c0026b0f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026b12:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b15:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026b19:	75 14                	jne    c0026b2f <__addsf3+0xb9>
c0026b1b:	85 d2                	test   edx,edx
c0026b1d:	0f 84 4c 02 00 00    	je     c0026d6f <__addsf3+0x2f9>
c0026b23:	49                   	dec    ecx
c0026b24:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026b27:	0f 84 94 00 00 00    	je     c0026bc1 <__addsf3+0x14b>
c0026b2d:	eb 12                	jmp    c0026b41 <__addsf3+0xcb>
c0026b2f:	89 f0                	mov    eax,esi
c0026b31:	f7 d0                	not    eax
c0026b33:	84 c0                	test   al,al
c0026b35:	0f 84 34 02 00 00    	je     c0026d6f <__addsf3+0x2f9>
c0026b3b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b41:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b44:	83 f9 1f             	cmp    ecx,0x1f
c0026b47:	0f 8f 22 02 00 00    	jg     c0026d6f <__addsf3+0x2f9>
c0026b4d:	89 d7                	mov    edi,edx
c0026b4f:	d3 ef                	shr    edi,cl
c0026b51:	b8 20 00 00 00       	mov    eax,0x20
c0026b56:	29 c8                	sub    eax,ecx
c0026b58:	89 c1                	mov    ecx,eax
c0026b5a:	d3 e2                	shl    edx,cl
c0026b5c:	31 c0                	xor    eax,eax
c0026b5e:	85 d2                	test   edx,edx
c0026b60:	0f 95 c0             	setne  al
c0026b63:	09 f8                	or     eax,edi
c0026b65:	01 d8                	add    eax,ebx
c0026b67:	eb 58                	jmp    c0026bc1 <__addsf3+0x14b>
c0026b69:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026b6c:	8d 70 01             	lea    esi,[eax+0x1]
c0026b6f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026b75:	75 32                	jne    c0026ba9 <__addsf3+0x133>
c0026b77:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026b7b:	75 1f                	jne    c0026b9c <__addsf3+0x126>
c0026b7d:	85 d2                	test   edx,edx
c0026b7f:	0f 84 e0 01 00 00    	je     c0026d65 <__addsf3+0x2ef>
c0026b85:	85 db                	test   ebx,ebx
c0026b87:	0f 84 e2 01 00 00    	je     c0026d6f <__addsf3+0x2f9>
c0026b8d:	89 d0                	mov    eax,edx
c0026b8f:	01 d8                	add    eax,ebx
c0026b91:	0f 89 a9 01 00 00    	jns    c0026d40 <__addsf3+0x2ca>
c0026b97:	e9 9d 01 00 00       	jmp    c0026d39 <__addsf3+0x2c3>
c0026b9c:	85 d2                	test   edx,edx
c0026b9e:	0f 85 cb 01 00 00    	jne    c0026d6f <__addsf3+0x2f9>
c0026ba4:	e9 bc 01 00 00       	jmp    c0026d65 <__addsf3+0x2ef>
c0026ba9:	31 c0                	xor    eax,eax
c0026bab:	89 f1                	mov    ecx,esi
c0026bad:	f7 d1                	not    ecx
c0026baf:	84 c9                	test   cl,cl
c0026bb1:	0f 84 90 01 00 00    	je     c0026d47 <__addsf3+0x2d1>
c0026bb7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026bba:	d1 e8                	shr    eax,1
c0026bbc:	e9 86 01 00 00       	jmp    c0026d47 <__addsf3+0x2d1>
c0026bc1:	85 c0                	test   eax,eax
c0026bc3:	0f 89 7e 01 00 00    	jns    c0026d47 <__addsf3+0x2d1>
c0026bc9:	46                   	inc    esi
c0026bca:	89 f2                	mov    edx,esi
c0026bcc:	f7 d2                	not    edx
c0026bce:	84 d2                	test   dl,dl
c0026bd0:	0f 84 6f 01 00 00    	je     c0026d45 <__addsf3+0x2cf>
c0026bd6:	89 c2                	mov    edx,eax
c0026bd8:	83 e2 01             	and    edx,0x1
c0026bdb:	d1 e8                	shr    eax,1
c0026bdd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026be2:	09 d0                	or     eax,edx
c0026be4:	e9 5e 01 00 00       	jmp    c0026d47 <__addsf3+0x2d1>
c0026be9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026bed:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026bf0:	89 f0                	mov    eax,esi
c0026bf2:	0f b6 c0             	movzx  eax,al
c0026bf5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026bf8:	29 c1                	sub    ecx,eax
c0026bfa:	85 c9                	test   ecx,ecx
c0026bfc:	7e 55                	jle    c0026c53 <__addsf3+0x1dd>
c0026bfe:	85 c0                	test   eax,eax
c0026c00:	75 11                	jne    c0026c13 <__addsf3+0x19d>
c0026c02:	85 db                	test   ebx,ebx
c0026c04:	0f 84 65 01 00 00    	je     c0026d6f <__addsf3+0x2f9>
c0026c0a:	49                   	dec    ecx
c0026c0b:	75 19                	jne    c0026c26 <__addsf3+0x1b0>
c0026c0d:	89 d0                	mov    eax,edx
c0026c0f:	29 d8                	sub    eax,ebx
c0026c11:	eb 38                	jmp    c0026c4b <__addsf3+0x1d5>
c0026c13:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c16:	f7 d0                	not    eax
c0026c18:	84 c0                	test   al,al
c0026c1a:	0f 84 4f 01 00 00    	je     c0026d6f <__addsf3+0x2f9>
c0026c20:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c26:	83 f9 1f             	cmp    ecx,0x1f
c0026c29:	0f 8f 40 01 00 00    	jg     c0026d6f <__addsf3+0x2f9>
c0026c2f:	89 de                	mov    esi,ebx
c0026c31:	d3 ee                	shr    esi,cl
c0026c33:	b8 20 00 00 00       	mov    eax,0x20
c0026c38:	29 c8                	sub    eax,ecx
c0026c3a:	89 c1                	mov    ecx,eax
c0026c3c:	d3 e3                	shl    ebx,cl
c0026c3e:	31 c0                	xor    eax,eax
c0026c40:	85 db                	test   ebx,ebx
c0026c42:	0f 95 c0             	setne  al
c0026c45:	09 f0                	or     eax,esi
c0026c47:	29 c2                	sub    edx,eax
c0026c49:	89 d0                	mov    eax,edx
c0026c4b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c4e:	e9 af 00 00 00       	jmp    c0026d02 <__addsf3+0x28c>
c0026c53:	74 5c                	je     c0026cb1 <__addsf3+0x23b>
c0026c55:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026c58:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c5b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026c5f:	75 14                	jne    c0026c75 <__addsf3+0x1ff>
c0026c61:	85 d2                	test   edx,edx
c0026c63:	0f 84 06 01 00 00    	je     c0026d6f <__addsf3+0x2f9>
c0026c69:	48                   	dec    eax
c0026c6a:	75 1b                	jne    c0026c87 <__addsf3+0x211>
c0026c6c:	89 d8                	mov    eax,ebx
c0026c6e:	29 d0                	sub    eax,edx
c0026c70:	e9 8d 00 00 00       	jmp    c0026d02 <__addsf3+0x28c>
c0026c75:	89 f1                	mov    ecx,esi
c0026c77:	f7 d1                	not    ecx
c0026c79:	84 c9                	test   cl,cl
c0026c7b:	0f 84 ee 00 00 00    	je     c0026d6f <__addsf3+0x2f9>
c0026c81:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026c87:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c8a:	83 f8 1f             	cmp    eax,0x1f
c0026c8d:	0f 8f dc 00 00 00    	jg     c0026d6f <__addsf3+0x2f9>
c0026c93:	89 d7                	mov    edi,edx
c0026c95:	88 c1                	mov    cl,al
c0026c97:	d3 ef                	shr    edi,cl
c0026c99:	b9 20 00 00 00       	mov    ecx,0x20
c0026c9e:	29 c1                	sub    ecx,eax
c0026ca0:	d3 e2                	shl    edx,cl
c0026ca2:	31 c0                	xor    eax,eax
c0026ca4:	85 d2                	test   edx,edx
c0026ca6:	0f 95 c0             	setne  al
c0026ca9:	09 f8                	or     eax,edi
c0026cab:	29 c3                	sub    ebx,eax
c0026cad:	89 d8                	mov    eax,ebx
c0026caf:	eb 51                	jmp    c0026d02 <__addsf3+0x28c>
c0026cb1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026cb4:	40                   	inc    eax
c0026cb5:	a8 fe                	test   al,0xfe
c0026cb7:	75 3d                	jne    c0026cf6 <__addsf3+0x280>
c0026cb9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026cbd:	0f 85 a7 00 00 00    	jne    c0026d6a <__addsf3+0x2f4>
c0026cc3:	85 d2                	test   edx,edx
c0026cc5:	75 12                	jne    c0026cd9 <__addsf3+0x263>
c0026cc7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026cca:	85 db                	test   ebx,ebx
c0026ccc:	0f 85 9d 00 00 00    	jne    c0026d6f <__addsf3+0x2f9>
c0026cd2:	31 ff                	xor    edi,edi
c0026cd4:	e9 96 00 00 00       	jmp    c0026d6f <__addsf3+0x2f9>
c0026cd9:	85 db                	test   ebx,ebx
c0026cdb:	0f 84 8e 00 00 00    	je     c0026d6f <__addsf3+0x2f9>
c0026ce1:	89 d0                	mov    eax,edx
c0026ce3:	29 d8                	sub    eax,ebx
c0026ce5:	79 06                	jns    c0026ced <__addsf3+0x277>
c0026ce7:	89 d8                	mov    eax,ebx
c0026ce9:	29 d0                	sub    eax,edx
c0026ceb:	eb 5a                	jmp    c0026d47 <__addsf3+0x2d1>
c0026ced:	bf 00 00 00 00       	mov    edi,0x0
c0026cf2:	74 7b                	je     c0026d6f <__addsf3+0x2f9>
c0026cf4:	eb 4a                	jmp    c0026d40 <__addsf3+0x2ca>
c0026cf6:	89 d0                	mov    eax,edx
c0026cf8:	29 d8                	sub    eax,ebx
c0026cfa:	79 12                	jns    c0026d0e <__addsf3+0x298>
c0026cfc:	89 d8                	mov    eax,ebx
c0026cfe:	29 d0                	sub    eax,edx
c0026d00:	eb 09                	jmp    c0026d0b <__addsf3+0x295>
c0026d02:	85 c0                	test   eax,eax
c0026d04:	79 41                	jns    c0026d47 <__addsf3+0x2d1>
c0026d06:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026d0b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026d0e:	31 f6                	xor    esi,esi
c0026d10:	85 c0                	test   eax,eax
c0026d12:	74 33                	je     c0026d47 <__addsf3+0x2d1>
c0026d14:	0f bd c8             	bsr    ecx,eax
c0026d17:	83 f1 1f             	xor    ecx,0x1f
c0026d1a:	d3 e0                	shl    eax,cl
c0026d1c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026d20:	39 ca                	cmp    edx,ecx
c0026d22:	7f 10                	jg     c0026d34 <__addsf3+0x2be>
c0026d24:	29 d1                	sub    ecx,edx
c0026d26:	41                   	inc    ecx
c0026d27:	d3 e8                	shr    eax,cl
c0026d29:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d2c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026d32:	eb 13                	jmp    c0026d47 <__addsf3+0x2d1>
c0026d34:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d37:	29 ce                	sub    esi,ecx
c0026d39:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026d3e:	eb 07                	jmp    c0026d47 <__addsf3+0x2d1>
c0026d40:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d43:	eb 02                	jmp    c0026d47 <__addsf3+0x2d1>
c0026d45:	31 c0                	xor    eax,eax
c0026d47:	89 c2                	mov    edx,eax
c0026d49:	c1 ea 08             	shr    edx,0x8
c0026d4c:	a8 7f                	test   al,0x7f
c0026d4e:	0f 95 c1             	setne  cl
c0026d51:	09 d1                	or     ecx,edx
c0026d53:	83 e1 01             	and    ecx,0x1
c0026d56:	c1 e8 07             	shr    eax,0x7
c0026d59:	21 c8                	and    eax,ecx
c0026d5b:	c1 e6 17             	shl    esi,0x17
c0026d5e:	09 d6                	or     esi,edx
c0026d60:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026d63:	eb 0a                	jmp    c0026d6f <__addsf3+0x2f9>
c0026d65:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d68:	eb 05                	jmp    c0026d6f <__addsf3+0x2f9>
c0026d6a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026d6f:	89 f8                	mov    eax,edi
c0026d71:	5a                   	pop    edx
c0026d72:	59                   	pop    ecx
c0026d73:	5b                   	pop    ebx
c0026d74:	5e                   	pop    esi
c0026d75:	5f                   	pop    edi
c0026d76:	5d                   	pop    ebp
c0026d77:	c3                   	ret    

c0026d78 <__subsf3>:
c0026d78:	55                   	push   ebp
c0026d79:	89 e5                	mov    ebp,esp
c0026d7b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d7e:	05 00 00 00 80       	add    eax,0x80000000
c0026d83:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026d86:	5d                   	pop    ebp
c0026d87:	e9 ea fc ff ff       	jmp    c0026a76 <__addsf3>

c0026d8c <__negsf2>:
c0026d8c:	55                   	push   ebp
c0026d8d:	89 e5                	mov    ebp,esp
c0026d8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026d92:	05 00 00 00 80       	add    eax,0x80000000
c0026d97:	5d                   	pop    ebp
c0026d98:	c3                   	ret    

c0026d99 <__mulsf3>:
c0026d99:	55                   	push   ebp
c0026d9a:	89 e5                	mov    ebp,esp
c0026d9c:	57                   	push   edi
c0026d9d:	56                   	push   esi
c0026d9e:	53                   	push   ebx
c0026d9f:	83 ec 1c             	sub    esp,0x1c
c0026da2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026da5:	89 f0                	mov    eax,esi
c0026da7:	89 f1                	mov    ecx,esi
c0026da9:	c1 f9 17             	sar    ecx,0x17
c0026dac:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026daf:	c1 e0 08             	shl    eax,0x8
c0026db2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026db7:	89 c1                	mov    ecx,eax
c0026db9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026dbc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026dbf:	89 c7                	mov    edi,eax
c0026dc1:	c1 ff 17             	sar    edi,0x17
c0026dc4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026dc8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026dcb:	89 f8                	mov    eax,edi
c0026dcd:	0f b6 c0             	movzx  eax,al
c0026dd0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026dd3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026dd7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026dda:	42                   	inc    edx
c0026ddb:	80 e2 fe             	and    dl,0xfe
c0026dde:	75 7b                	jne    c0026e5b <__mulsf3+0xc2>
c0026de0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026de4:	74 54                	je     c0026e3a <__mulsf3+0xa1>
c0026de6:	85 c9                	test   ecx,ecx
c0026de8:	0f 85 64 01 00 00    	jne    c0026f52 <__mulsf3+0x1b9>
c0026dee:	8d 57 01             	lea    edx,[edi+0x1]
c0026df1:	80 e2 fe             	and    dl,0xfe
c0026df4:	75 1f                	jne    c0026e15 <__mulsf3+0x7c>
c0026df6:	85 c0                	test   eax,eax
c0026df8:	b8 00 00 00 00       	mov    eax,0x0
c0026dfd:	74 29                	je     c0026e28 <__mulsf3+0x8f>
c0026dff:	53                   	push   ebx
c0026e00:	53                   	push   ebx
c0026e01:	50                   	push   eax
c0026e02:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e05:	e8 96 05 00 00       	call   c00273a0 <__nesf2>
c0026e0a:	83 c4 10             	add    esp,0x10
c0026e0d:	85 c0                	test   eax,eax
c0026e0f:	0f 85 3a 01 00 00    	jne    c0026f4f <__mulsf3+0x1b6>
c0026e15:	85 ff                	test   edi,edi
c0026e17:	0f 89 35 01 00 00    	jns    c0026f52 <__mulsf3+0x1b9>
c0026e1d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026e23:	e9 2a 01 00 00       	jmp    c0026f52 <__mulsf3+0x1b9>
c0026e28:	51                   	push   ecx
c0026e29:	51                   	push   ecx
c0026e2a:	50                   	push   eax
c0026e2b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e2e:	e8 6d 05 00 00       	call   c00273a0 <__nesf2>
c0026e33:	83 c4 10             	add    esp,0x10
c0026e36:	85 c0                	test   eax,eax
c0026e38:	eb 15                	jmp    c0026e4f <__mulsf3+0xb6>
c0026e3a:	85 c9                	test   ecx,ecx
c0026e3c:	74 0b                	je     c0026e49 <__mulsf3+0xb0>
c0026e3e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026e41:	01 c9                	add    ecx,ecx
c0026e43:	78 16                	js     c0026e5b <__mulsf3+0xc2>
c0026e45:	89 d3                	mov    ebx,edx
c0026e47:	eb f5                	jmp    c0026e3e <__mulsf3+0xa5>
c0026e49:	89 f8                	mov    eax,edi
c0026e4b:	f7 d0                	not    eax
c0026e4d:	84 c0                	test   al,al
c0026e4f:	75 c4                	jne    c0026e15 <__mulsf3+0x7c>
c0026e51:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026e56:	e9 f7 00 00 00       	jmp    c0026f52 <__mulsf3+0x1b9>
c0026e5b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026e5e:	c1 e6 08             	shl    esi,0x8
c0026e61:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026e67:	8d 57 01             	lea    edx,[edi+0x1]
c0026e6a:	80 e2 fe             	and    dl,0xfe
c0026e6d:	75 63                	jne    c0026ed2 <__mulsf3+0x139>
c0026e6f:	85 c0                	test   eax,eax
c0026e71:	74 2f                	je     c0026ea2 <__mulsf3+0x109>
c0026e73:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026e77:	0f 89 d2 00 00 00    	jns    c0026f4f <__mulsf3+0x1b6>
c0026e7d:	52                   	push   edx
c0026e7e:	52                   	push   edx
c0026e7f:	6a 00                	push   0x0
c0026e81:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e84:	e8 dc 04 00 00       	call   c0027365 <__eqsf2>
c0026e89:	83 c4 10             	add    esp,0x10
c0026e8c:	85 c0                	test   eax,eax
c0026e8e:	0f 85 bb 00 00 00    	jne    c0026f4f <__mulsf3+0x1b6>
c0026e94:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e97:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026e9d:	e9 b0 00 00 00       	jmp    c0026f52 <__mulsf3+0x1b9>
c0026ea2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026ea5:	50                   	push   eax
c0026ea6:	50                   	push   eax
c0026ea7:	6a 00                	push   0x0
c0026ea9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026eac:	e8 b4 04 00 00       	call   c0027365 <__eqsf2>
c0026eb1:	83 c4 10             	add    esp,0x10
c0026eb4:	85 c0                	test   eax,eax
c0026eb6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026eb9:	75 0c                	jne    c0026ec7 <__mulsf3+0x12e>
c0026ebb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026ebf:	0f 89 8a 00 00 00    	jns    c0026f4f <__mulsf3+0x1b6>
c0026ec5:	eb cd                	jmp    c0026e94 <__mulsf3+0xfb>
c0026ec7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026eca:	01 f6                	add    esi,esi
c0026ecc:	78 04                	js     c0026ed2 <__mulsf3+0x139>
c0026ece:	89 c3                	mov    ebx,eax
c0026ed0:	eb f5                	jmp    c0026ec7 <__mulsf3+0x12e>
c0026ed2:	89 c8                	mov    eax,ecx
c0026ed4:	0d 00 00 00 80       	or     eax,0x80000000
c0026ed9:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026edf:	f7 e6                	mul    esi
c0026ee1:	85 c0                	test   eax,eax
c0026ee3:	0f 95 c0             	setne  al
c0026ee6:	0f b6 c0             	movzx  eax,al
c0026ee9:	09 c2                	or     edx,eax
c0026eeb:	78 03                	js     c0026ef0 <__mulsf3+0x157>
c0026eed:	01 d2                	add    edx,edx
c0026eef:	4b                   	dec    ebx
c0026ef0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026ef6:	7f 22                	jg     c0026f1a <__mulsf3+0x181>
c0026ef8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026efe:	85 db                	test   ebx,ebx
c0026f00:	7f 23                	jg     c0026f25 <__mulsf3+0x18c>
c0026f02:	83 fb e9             	cmp    ebx,0xffffffe9
c0026f05:	7c 1a                	jl     c0026f21 <__mulsf3+0x188>
c0026f07:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026f0d:	b9 01 00 00 00       	mov    ecx,0x1
c0026f12:	29 d9                	sub    ecx,ebx
c0026f14:	d3 ea                	shr    edx,cl
c0026f16:	31 db                	xor    ebx,ebx
c0026f18:	eb 0b                	jmp    c0026f25 <__mulsf3+0x18c>
c0026f1a:	bb ff 00 00 00       	mov    ebx,0xff
c0026f1f:	eb 02                	jmp    c0026f23 <__mulsf3+0x18a>
c0026f21:	31 db                	xor    ebx,ebx
c0026f23:	31 d2                	xor    edx,edx
c0026f25:	89 d0                	mov    eax,edx
c0026f27:	c1 e8 08             	shr    eax,0x8
c0026f2a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026f2d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026f33:	09 fb                	or     ebx,edi
c0026f35:	c1 e3 17             	shl    ebx,0x17
c0026f38:	09 c3                	or     ebx,eax
c0026f3a:	f6 c2 7f             	test   dl,0x7f
c0026f3d:	0f 95 c1             	setne  cl
c0026f40:	09 c8                	or     eax,ecx
c0026f42:	83 e0 01             	and    eax,0x1
c0026f45:	c1 ea 07             	shr    edx,0x7
c0026f48:	21 c2                	and    edx,eax
c0026f4a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026f4d:	eb 03                	jmp    c0026f52 <__mulsf3+0x1b9>
c0026f4f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026f52:	89 f0                	mov    eax,esi
c0026f54:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026f57:	5b                   	pop    ebx
c0026f58:	5e                   	pop    esi
c0026f59:	5f                   	pop    edi
c0026f5a:	5d                   	pop    ebp
c0026f5b:	c3                   	ret    

c0026f5c <__divsf3>:
c0026f5c:	55                   	push   ebp
c0026f5d:	89 e5                	mov    ebp,esp
c0026f5f:	57                   	push   edi
c0026f60:	56                   	push   esi
c0026f61:	53                   	push   ebx
c0026f62:	83 ec 1c             	sub    esp,0x1c
c0026f65:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026f68:	89 d8                	mov    eax,ebx
c0026f6a:	89 d9                	mov    ecx,ebx
c0026f6c:	c1 f9 17             	sar    ecx,0x17
c0026f6f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026f72:	c1 e0 08             	shl    eax,0x8
c0026f75:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026f7a:	89 c1                	mov    ecx,eax
c0026f7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f7f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026f82:	89 c7                	mov    edi,eax
c0026f84:	c1 ff 17             	sar    edi,0x17
c0026f87:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026f8b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026f8e:	89 f8                	mov    eax,edi
c0026f90:	0f b6 c0             	movzx  eax,al
c0026f93:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026f96:	29 c6                	sub    esi,eax
c0026f98:	83 c6 7f             	add    esi,0x7f
c0026f9b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026f9e:	42                   	inc    edx
c0026f9f:	80 e2 fe             	and    dl,0xfe
c0026fa2:	0f 85 9c 00 00 00    	jne    c0027044 <__divsf3+0xe8>
c0026fa8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026fac:	74 33                	je     c0026fe1 <__divsf3+0x85>
c0026fae:	85 c9                	test   ecx,ecx
c0026fb0:	0f 85 c7 01 00 00    	jne    c002717d <__divsf3+0x221>
c0026fb6:	8d 57 01             	lea    edx,[edi+0x1]
c0026fb9:	80 e2 fe             	and    dl,0xfe
c0026fbc:	75 2f                	jne    c0026fed <__divsf3+0x91>
c0026fbe:	85 c0                	test   eax,eax
c0026fc0:	74 2b                	je     c0026fed <__divsf3+0x91>
c0026fc2:	51                   	push   ecx
c0026fc3:	51                   	push   ecx
c0026fc4:	6a 00                	push   0x0
c0026fc6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fc9:	e8 d2 03 00 00       	call   c00273a0 <__nesf2>
c0026fce:	83 c4 10             	add    esp,0x10
c0026fd1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026fd4:	85 c0                	test   eax,eax
c0026fd6:	0f 85 a1 01 00 00    	jne    c002717d <__divsf3+0x221>
c0026fdc:	e9 92 01 00 00       	jmp    c0027173 <__divsf3+0x217>
c0026fe1:	85 c9                	test   ecx,ecx
c0026fe3:	75 1b                	jne    c0027000 <__divsf3+0xa4>
c0026fe5:	8d 57 01             	lea    edx,[edi+0x1]
c0026fe8:	80 e2 fe             	and    dl,0xfe
c0026feb:	74 1e                	je     c002700b <__divsf3+0xaf>
c0026fed:	85 ff                	test   edi,edi
c0026fef:	0f 89 88 01 00 00    	jns    c002717d <__divsf3+0x221>
c0026ff5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026ffb:	e9 7d 01 00 00       	jmp    c002717d <__divsf3+0x221>
c0027000:	8d 56 ff             	lea    edx,[esi-0x1]
c0027003:	01 c9                	add    ecx,ecx
c0027005:	78 3d                	js     c0027044 <__divsf3+0xe8>
c0027007:	89 d6                	mov    esi,edx
c0027009:	eb f5                	jmp    c0027000 <__divsf3+0xa4>
c002700b:	85 c0                	test   eax,eax
c002700d:	b8 00 00 00 00       	mov    eax,0x0
c0027012:	74 18                	je     c002702c <__divsf3+0xd0>
c0027014:	52                   	push   edx
c0027015:	52                   	push   edx
c0027016:	50                   	push   eax
c0027017:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002701a:	e8 81 03 00 00       	call   c00273a0 <__nesf2>
c002701f:	83 c4 10             	add    esp,0x10
c0027022:	85 c0                	test   eax,eax
c0027024:	0f 85 50 01 00 00    	jne    c002717a <__divsf3+0x21e>
c002702a:	eb c1                	jmp    c0026fed <__divsf3+0x91>
c002702c:	56                   	push   esi
c002702d:	56                   	push   esi
c002702e:	50                   	push   eax
c002702f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027032:	e8 69 03 00 00       	call   c00273a0 <__nesf2>
c0027037:	83 c4 10             	add    esp,0x10
c002703a:	85 c0                	test   eax,eax
c002703c:	0f 84 31 01 00 00    	je     c0027173 <__divsf3+0x217>
c0027042:	eb a9                	jmp    c0026fed <__divsf3+0x91>
c0027044:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027047:	c1 e3 08             	shl    ebx,0x8
c002704a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027050:	8d 57 01             	lea    edx,[edi+0x1]
c0027053:	80 e2 fe             	and    dl,0xfe
c0027056:	75 71                	jne    c00270c9 <__divsf3+0x16d>
c0027058:	85 c0                	test   eax,eax
c002705a:	ba 00 00 00 00       	mov    edx,0x0
c002705f:	74 2f                	je     c0027090 <__divsf3+0x134>
c0027061:	51                   	push   ecx
c0027062:	51                   	push   ecx
c0027063:	52                   	push   edx
c0027064:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027067:	e8 f9 02 00 00       	call   c0027365 <__eqsf2>
c002706c:	83 c4 10             	add    esp,0x10
c002706f:	85 c0                	test   eax,eax
c0027071:	0f 85 03 01 00 00    	jne    c002717a <__divsf3+0x21e>
c0027077:	31 d2                	xor    edx,edx
c0027079:	89 d3                	mov    ebx,edx
c002707b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002707e:	31 f8                	xor    eax,edi
c0027080:	0f 89 f7 00 00 00    	jns    c002717d <__divsf3+0x221>
c0027086:	bb 00 00 00 80       	mov    ebx,0x80000000
c002708b:	e9 ed 00 00 00       	jmp    c002717d <__divsf3+0x221>
c0027090:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027093:	50                   	push   eax
c0027094:	50                   	push   eax
c0027095:	52                   	push   edx
c0027096:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027099:	e8 c7 02 00 00       	call   c0027365 <__eqsf2>
c002709e:	83 c4 10             	add    esp,0x10
c00270a1:	85 c0                	test   eax,eax
c00270a3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00270a6:	75 16                	jne    c00270be <__divsf3+0x162>
c00270a8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00270ab:	31 fb                	xor    ebx,edi
c00270ad:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00270b3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00270b9:	e9 bf 00 00 00       	jmp    c002717d <__divsf3+0x221>
c00270be:	8d 46 01             	lea    eax,[esi+0x1]
c00270c1:	01 db                	add    ebx,ebx
c00270c3:	78 04                	js     c00270c9 <__divsf3+0x16d>
c00270c5:	89 c6                	mov    esi,eax
c00270c7:	eb f5                	jmp    c00270be <__divsf3+0x162>
c00270c9:	89 c8                	mov    eax,ecx
c00270cb:	0d 00 00 00 80       	or     eax,0x80000000
c00270d0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00270d6:	31 d2                	xor    edx,edx
c00270d8:	39 d8                	cmp    eax,ebx
c00270da:	72 07                	jb     c00270e3 <__divsf3+0x187>
c00270dc:	29 d8                	sub    eax,ebx
c00270de:	ba 01 00 00 00       	mov    edx,0x1
c00270e3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00270ea:	01 d2                	add    edx,edx
c00270ec:	89 c1                	mov    ecx,eax
c00270ee:	01 c0                	add    eax,eax
c00270f0:	85 c9                	test   ecx,ecx
c00270f2:	78 04                	js     c00270f8 <__divsf3+0x19c>
c00270f4:	39 c3                	cmp    ebx,eax
c00270f6:	77 05                	ja     c00270fd <__divsf3+0x1a1>
c00270f8:	29 d8                	sub    eax,ebx
c00270fa:	83 ca 01             	or     edx,0x1
c00270fd:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027100:	75 e8                	jne    c00270ea <__divsf3+0x18e>
c0027102:	85 c0                	test   eax,eax
c0027104:	0f 95 c0             	setne  al
c0027107:	0f b6 c0             	movzx  eax,al
c002710a:	c1 e2 06             	shl    edx,0x6
c002710d:	09 c2                	or     edx,eax
c002710f:	78 03                	js     c0027114 <__divsf3+0x1b8>
c0027111:	01 d2                	add    edx,edx
c0027113:	4e                   	dec    esi
c0027114:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002711a:	7f 22                	jg     c002713e <__divsf3+0x1e2>
c002711c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027122:	85 f6                	test   esi,esi
c0027124:	7f 23                	jg     c0027149 <__divsf3+0x1ed>
c0027126:	83 fe e9             	cmp    esi,0xffffffe9
c0027129:	7c 1a                	jl     c0027145 <__divsf3+0x1e9>
c002712b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027131:	b9 01 00 00 00       	mov    ecx,0x1
c0027136:	29 f1                	sub    ecx,esi
c0027138:	d3 ea                	shr    edx,cl
c002713a:	31 f6                	xor    esi,esi
c002713c:	eb 0b                	jmp    c0027149 <__divsf3+0x1ed>
c002713e:	be ff 00 00 00       	mov    esi,0xff
c0027143:	eb 02                	jmp    c0027147 <__divsf3+0x1eb>
c0027145:	31 f6                	xor    esi,esi
c0027147:	31 d2                	xor    edx,edx
c0027149:	89 d0                	mov    eax,edx
c002714b:	c1 e8 08             	shr    eax,0x8
c002714e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027151:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027157:	09 fe                	or     esi,edi
c0027159:	c1 e6 17             	shl    esi,0x17
c002715c:	09 c6                	or     esi,eax
c002715e:	f6 c2 7f             	test   dl,0x7f
c0027161:	0f 95 c1             	setne  cl
c0027164:	09 c8                	or     eax,ecx
c0027166:	83 e0 01             	and    eax,0x1
c0027169:	c1 ea 07             	shr    edx,0x7
c002716c:	21 c2                	and    edx,eax
c002716e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027171:	eb 0a                	jmp    c002717d <__divsf3+0x221>
c0027173:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027178:	eb 03                	jmp    c002717d <__divsf3+0x221>
c002717a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002717d:	89 d8                	mov    eax,ebx
c002717f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027182:	5b                   	pop    ebx
c0027183:	5e                   	pop    esi
c0027184:	5f                   	pop    edi
c0027185:	5d                   	pop    ebp
c0027186:	c3                   	ret    

c0027187 <__floatsisf>:
c0027187:	55                   	push   ebp
c0027188:	89 e5                	mov    ebp,esp
c002718a:	53                   	push   ebx
c002718b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002718e:	85 d2                	test   edx,edx
c0027190:	7e 2b                	jle    c00271bd <__floatsisf+0x36>
c0027192:	0f bd ca             	bsr    ecx,edx
c0027195:	83 f1 1f             	xor    ecx,0x1f
c0027198:	d3 e2                	shl    edx,cl
c002719a:	89 d0                	mov    eax,edx
c002719c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00271a1:	89 c3                	mov    ebx,eax
c00271a3:	c1 eb 08             	shr    ebx,0x8
c00271a6:	80 e2 7f             	and    dl,0x7f
c00271a9:	0f 95 c2             	setne  dl
c00271ac:	09 da                	or     edx,ebx
c00271ae:	83 e2 01             	and    edx,0x1
c00271b1:	c1 e8 07             	shr    eax,0x7
c00271b4:	21 c2                	and    edx,eax
c00271b6:	b8 9e 00 00 00       	mov    eax,0x9e
c00271bb:	eb 32                	jmp    c00271ef <__floatsisf+0x68>
c00271bd:	b8 00 00 00 00       	mov    eax,0x0
c00271c2:	74 34                	je     c00271f8 <__floatsisf+0x71>
c00271c4:	f7 da                	neg    edx
c00271c6:	0f bd ca             	bsr    ecx,edx
c00271c9:	83 f1 1f             	xor    ecx,0x1f
c00271cc:	d3 e2                	shl    edx,cl
c00271ce:	89 d0                	mov    eax,edx
c00271d0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00271d5:	89 c3                	mov    ebx,eax
c00271d7:	c1 eb 08             	shr    ebx,0x8
c00271da:	80 e2 7f             	and    dl,0x7f
c00271dd:	0f 95 c2             	setne  dl
c00271e0:	09 da                	or     edx,ebx
c00271e2:	83 e2 01             	and    edx,0x1
c00271e5:	c1 e8 07             	shr    eax,0x7
c00271e8:	21 c2                	and    edx,eax
c00271ea:	b8 9e 01 00 00       	mov    eax,0x19e
c00271ef:	29 c8                	sub    eax,ecx
c00271f1:	c1 e0 17             	shl    eax,0x17
c00271f4:	09 d8                	or     eax,ebx
c00271f6:	01 d0                	add    eax,edx
c00271f8:	5b                   	pop    ebx
c00271f9:	5d                   	pop    ebp
c00271fa:	c3                   	ret    

c00271fb <__floatunsisf>:
c00271fb:	55                   	push   ebp
c00271fc:	89 e5                	mov    ebp,esp
c00271fe:	53                   	push   ebx
c00271ff:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027202:	31 c0                	xor    eax,eax
c0027204:	85 d2                	test   edx,edx
c0027206:	74 32                	je     c002723a <__floatunsisf+0x3f>
c0027208:	0f bd ca             	bsr    ecx,edx
c002720b:	83 f1 1f             	xor    ecx,0x1f
c002720e:	d3 e2                	shl    edx,cl
c0027210:	89 d0                	mov    eax,edx
c0027212:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027217:	89 c3                	mov    ebx,eax
c0027219:	c1 eb 08             	shr    ebx,0x8
c002721c:	80 e2 7f             	and    dl,0x7f
c002721f:	0f 95 c2             	setne  dl
c0027222:	09 da                	or     edx,ebx
c0027224:	83 e2 01             	and    edx,0x1
c0027227:	c1 e8 07             	shr    eax,0x7
c002722a:	21 c2                	and    edx,eax
c002722c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027231:	29 c8                	sub    eax,ecx
c0027233:	c1 e0 17             	shl    eax,0x17
c0027236:	09 d8                	or     eax,ebx
c0027238:	01 d0                	add    eax,edx
c002723a:	5b                   	pop    ebx
c002723b:	5d                   	pop    ebp
c002723c:	c3                   	ret    

c002723d <__fixsfsi>:
c002723d:	55                   	push   ebp
c002723e:	89 e5                	mov    ebp,esp
c0027240:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027243:	89 d1                	mov    ecx,edx
c0027245:	c1 e1 08             	shl    ecx,0x8
c0027248:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002724e:	c1 fa 17             	sar    edx,0x17
c0027251:	78 1c                	js     c002726f <__fixsfsi+0x32>
c0027253:	83 ea 7f             	sub    edx,0x7f
c0027256:	31 c0                	xor    eax,eax
c0027258:	83 fa 1e             	cmp    edx,0x1e
c002725b:	77 40                	ja     c002729d <__fixsfsi+0x60>
c002725d:	89 c8                	mov    eax,ecx
c002725f:	0d 00 00 00 80       	or     eax,0x80000000
c0027264:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027269:	29 d1                	sub    ecx,edx
c002726b:	d3 e8                	shr    eax,cl
c002726d:	eb 2e                	jmp    c002729d <__fixsfsi+0x60>
c002726f:	31 c0                	xor    eax,eax
c0027271:	81 c2 81 00 00 00    	add    edx,0x81
c0027277:	78 24                	js     c002729d <__fixsfsi+0x60>
c0027279:	83 fa 1e             	cmp    edx,0x1e
c002727c:	7e 09                	jle    c0027287 <__fixsfsi+0x4a>
c002727e:	83 fa 1f             	cmp    edx,0x1f
c0027281:	75 18                	jne    c002729b <__fixsfsi+0x5e>
c0027283:	85 c9                	test   ecx,ecx
c0027285:	75 14                	jne    c002729b <__fixsfsi+0x5e>
c0027287:	89 c8                	mov    eax,ecx
c0027289:	0d 00 00 00 80       	or     eax,0x80000000
c002728e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027293:	29 d1                	sub    ecx,edx
c0027295:	d3 e8                	shr    eax,cl
c0027297:	f7 d8                	neg    eax
c0027299:	eb 02                	jmp    c002729d <__fixsfsi+0x60>
c002729b:	31 c0                	xor    eax,eax
c002729d:	5d                   	pop    ebp
c002729e:	c3                   	ret    

c002729f <__fixunssfsi>:
c002729f:	55                   	push   ebp
c00272a0:	89 e5                	mov    ebp,esp
c00272a2:	53                   	push   ebx
c00272a3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00272a6:	89 d3                	mov    ebx,edx
c00272a8:	c1 fb 17             	sar    ebx,0x17
c00272ab:	83 eb 7f             	sub    ebx,0x7f
c00272ae:	31 c0                	xor    eax,eax
c00272b0:	83 fb 1f             	cmp    ebx,0x1f
c00272b3:	77 18                	ja     c00272cd <__fixunssfsi+0x2e>
c00272b5:	89 d0                	mov    eax,edx
c00272b7:	c1 e0 08             	shl    eax,0x8
c00272ba:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00272bf:	0d 00 00 00 80       	or     eax,0x80000000
c00272c4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00272c9:	29 d9                	sub    ecx,ebx
c00272cb:	d3 e8                	shr    eax,cl
c00272cd:	5b                   	pop    ebx
c00272ce:	5d                   	pop    ebp
c00272cf:	c3                   	ret    

c00272d0 <__cmpsf2>:
c00272d0:	55                   	push   ebp
c00272d1:	89 e5                	mov    ebp,esp
c00272d3:	57                   	push   edi
c00272d4:	56                   	push   esi
c00272d5:	53                   	push   ebx
c00272d6:	83 ec 24             	sub    esp,0x24
c00272d9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00272df:	e8 4f 10 00 00       	call   c0028333 <__truncdfsf2>
c00272e4:	5a                   	pop    edx
c00272e5:	59                   	pop    ecx
c00272e6:	89 c3                	mov    ebx,eax
c00272e8:	c1 e8 17             	shr    eax,0x17
c00272eb:	0f b6 f0             	movzx  esi,al
c00272ee:	89 d8                	mov    eax,ebx
c00272f0:	c1 e8 1f             	shr    eax,0x1f
c00272f3:	31 c6                	xor    esi,eax
c00272f5:	c1 e3 08             	shl    ebx,0x8
c00272f8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00272fb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00272fe:	e8 30 10 00 00       	call   c0028333 <__truncdfsf2>
c0027303:	83 c4 10             	add    esp,0x10
c0027306:	89 c1                	mov    ecx,eax
c0027308:	c1 e9 17             	shr    ecx,0x17
c002730b:	0f b6 c9             	movzx  ecx,cl
c002730e:	89 c7                	mov    edi,eax
c0027310:	c1 ef 1f             	shr    edi,0x1f
c0027313:	89 ca                	mov    edx,ecx
c0027315:	31 fa                	xor    edx,edi
c0027317:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002731a:	c1 e0 08             	shl    eax,0x8
c002731d:	89 c2                	mov    edx,eax
c002731f:	89 d8                	mov    eax,ebx
c0027321:	09 d0                	or     eax,edx
c0027323:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027328:	09 f0                	or     eax,esi
c002732a:	75 08                	jne    c0027334 <__cmpsf2+0x64>
c002732c:	31 c0                	xor    eax,eax
c002732e:	39 f9                	cmp    ecx,edi
c0027330:	75 0c                	jne    c002733e <__cmpsf2+0x6e>
c0027332:	eb 29                	jmp    c002735d <__cmpsf2+0x8d>
c0027334:	b8 01 00 00 00       	mov    eax,0x1
c0027339:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002733c:	7f 1f                	jg     c002735d <__cmpsf2+0x8d>
c002733e:	83 c8 ff             	or     eax,0xffffffff
c0027341:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027344:	7c 17                	jl     c002735d <__cmpsf2+0x8d>
c0027346:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002734c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027352:	b8 01 00 00 00       	mov    eax,0x1
c0027357:	39 d3                	cmp    ebx,edx
c0027359:	77 02                	ja     c002735d <__cmpsf2+0x8d>
c002735b:	19 c0                	sbb    eax,eax
c002735d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027360:	5b                   	pop    ebx
c0027361:	5e                   	pop    esi
c0027362:	5f                   	pop    edi
c0027363:	5d                   	pop    ebp
c0027364:	c3                   	ret    

c0027365 <__eqsf2>:
c0027365:	55                   	push   ebp
c0027366:	89 e5                	mov    ebp,esp
c0027368:	83 ec 24             	sub    esp,0x24
c002736b:	6a 01                	push   0x1
c002736d:	83 ec 0c             	sub    esp,0xc
c0027370:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027373:	e8 df 10 00 00       	call   c0028457 <__extendsfdf2>
c0027378:	83 c4 10             	add    esp,0x10
c002737b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002737e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027381:	52                   	push   edx
c0027382:	50                   	push   eax
c0027383:	50                   	push   eax
c0027384:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027387:	e8 cb 10 00 00       	call   c0028457 <__extendsfdf2>
c002738c:	59                   	pop    ecx
c002738d:	59                   	pop    ecx
c002738e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027391:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027394:	52                   	push   edx
c0027395:	50                   	push   eax
c0027396:	e8 35 ff ff ff       	call   c00272d0 <__cmpsf2>
c002739b:	83 c4 20             	add    esp,0x20
c002739e:	c9                   	leave  
c002739f:	c3                   	ret    

c00273a0 <__nesf2>:
c00273a0:	eb c3                	jmp    c0027365 <__eqsf2>

c00273a2 <__gtsf2>:
c00273a2:	55                   	push   ebp
c00273a3:	89 e5                	mov    ebp,esp
c00273a5:	83 ec 24             	sub    esp,0x24
c00273a8:	6a ff                	push   0xffffffff
c00273aa:	83 ec 0c             	sub    esp,0xc
c00273ad:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273b0:	e8 a2 10 00 00       	call   c0028457 <__extendsfdf2>
c00273b5:	83 c4 10             	add    esp,0x10
c00273b8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00273bb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00273be:	52                   	push   edx
c00273bf:	50                   	push   eax
c00273c0:	50                   	push   eax
c00273c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00273c4:	e8 8e 10 00 00       	call   c0028457 <__extendsfdf2>
c00273c9:	59                   	pop    ecx
c00273ca:	59                   	pop    ecx
c00273cb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00273ce:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00273d1:	52                   	push   edx
c00273d2:	50                   	push   eax
c00273d3:	e8 f8 fe ff ff       	call   c00272d0 <__cmpsf2>
c00273d8:	83 c4 20             	add    esp,0x20
c00273db:	c9                   	leave  
c00273dc:	c3                   	ret    

c00273dd <__gesf2>:
c00273dd:	eb c3                	jmp    c00273a2 <__gtsf2>

c00273df <__ltsf2>:
c00273df:	eb 84                	jmp    c0027365 <__eqsf2>

c00273e1 <__lesf2>:
c00273e1:	eb 82                	jmp    c0027365 <__eqsf2>

c00273e3 <__adddf3>:
c00273e3:	55                   	push   ebp
c00273e4:	89 e5                	mov    ebp,esp
c00273e6:	57                   	push   edi
c00273e7:	56                   	push   esi
c00273e8:	53                   	push   ebx
c00273e9:	83 ec 24             	sub    esp,0x24
c00273ec:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00273ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00273f2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00273f5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00273f8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00273fb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00273fe:	89 c8                	mov    eax,ecx
c0027400:	89 ce                	mov    esi,ecx
c0027402:	c1 fe 14             	sar    esi,0x14
c0027405:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027408:	89 fb                	mov    ebx,edi
c002740a:	89 fa                	mov    edx,edi
c002740c:	c1 e2 0b             	shl    edx,0xb
c002740f:	c1 e0 0b             	shl    eax,0xb
c0027412:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027417:	c1 eb 15             	shr    ebx,0x15
c002741a:	09 d8                	or     eax,ebx
c002741c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002741f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027422:	c1 fe 14             	sar    esi,0x14
c0027425:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027428:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002742b:	89 f3                	mov    ebx,esi
c002742d:	c1 e3 0b             	shl    ebx,0xb
c0027430:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027433:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027436:	c1 e3 0b             	shl    ebx,0xb
c0027439:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002743f:	c1 ee 15             	shr    esi,0x15
c0027442:	09 f3                	or     ebx,esi
c0027444:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027447:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002744a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002744d:	0f 88 5f 02 00 00    	js     c00276b2 <__adddf3+0x2cf>
c0027453:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027456:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027459:	85 db                	test   ebx,ebx
c002745b:	0f 8e c7 00 00 00    	jle    c0027528 <__adddf3+0x145>
c0027461:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027468:	75 1a                	jne    c0027484 <__adddf3+0xa1>
c002746a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002746d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027470:	0f 84 b2 05 00 00    	je     c0027a28 <__adddf3+0x645>
c0027476:	4b                   	dec    ebx
c0027477:	75 23                	jne    c002749c <__adddf3+0xb9>
c0027479:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002747c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002747f:	e9 99 00 00 00       	jmp    c002751d <__adddf3+0x13a>
c0027484:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027487:	f7 d6                	not    esi
c0027489:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002748f:	0f 84 93 05 00 00    	je     c0027a28 <__adddf3+0x645>
c0027495:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002749c:	83 fb 1f             	cmp    ebx,0x1f
c002749f:	7e 42                	jle    c00274e3 <__adddf3+0x100>
c00274a1:	83 fb 3f             	cmp    ebx,0x3f
c00274a4:	0f 8f 7e 05 00 00    	jg     c0027a28 <__adddf3+0x645>
c00274aa:	83 e3 1f             	and    ebx,0x1f
c00274ad:	89 d9                	mov    ecx,ebx
c00274af:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00274b2:	d3 ef                	shr    edi,cl
c00274b4:	31 db                	xor    ebx,ebx
c00274b6:	85 c9                	test   ecx,ecx
c00274b8:	74 15                	je     c00274cf <__adddf3+0xec>
c00274ba:	be 20 00 00 00       	mov    esi,0x20
c00274bf:	29 ce                	sub    esi,ecx
c00274c1:	89 f1                	mov    ecx,esi
c00274c3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274c6:	d3 e6                	shl    esi,cl
c00274c8:	31 db                	xor    ebx,ebx
c00274ca:	85 f6                	test   esi,esi
c00274cc:	0f 95 c3             	setne  bl
c00274cf:	31 c9                	xor    ecx,ecx
c00274d1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00274d5:	0f 95 c1             	setne  cl
c00274d8:	09 cf                	or     edi,ecx
c00274da:	09 fb                	or     ebx,edi
c00274dc:	01 da                	add    edx,ebx
c00274de:	83 d0 00             	adc    eax,0x0
c00274e1:	eb 3a                	jmp    c002751d <__adddf3+0x13a>
c00274e3:	bf 20 00 00 00       	mov    edi,0x20
c00274e8:	29 df                	sub    edi,ebx
c00274ea:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00274ed:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274f0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00274f3:	d3 e6                	shl    esi,cl
c00274f5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00274f8:	88 d9                	mov    cl,bl
c00274fa:	d3 ef                	shr    edi,cl
c00274fc:	09 fe                	or     esi,edi
c00274fe:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027501:	88 d9                	mov    cl,bl
c0027503:	d3 ef                	shr    edi,cl
c0027505:	89 fb                	mov    ebx,edi
c0027507:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002750a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002750d:	d3 e7                	shl    edi,cl
c002750f:	85 ff                	test   edi,edi
c0027511:	0f 95 c1             	setne  cl
c0027514:	0f b6 c9             	movzx  ecx,cl
c0027517:	09 ce                	or     esi,ecx
c0027519:	01 f2                	add    edx,esi
c002751b:	11 d8                	adc    eax,ebx
c002751d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027520:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027523:	e9 52 01 00 00       	jmp    c002767a <__adddf3+0x297>
c0027528:	0f 84 d5 00 00 00    	je     c0027603 <__adddf3+0x220>
c002752e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027531:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027534:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027537:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002753a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027541:	75 20                	jne    c0027563 <__adddf3+0x180>
c0027543:	89 d6                	mov    esi,edx
c0027545:	09 c6                	or     esi,eax
c0027547:	0f 84 db 04 00 00    	je     c0027a28 <__adddf3+0x645>
c002754d:	4b                   	dec    ebx
c002754e:	75 29                	jne    c0027579 <__adddf3+0x196>
c0027550:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027553:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027556:	01 d1                	add    ecx,edx
c0027558:	11 c6                	adc    esi,eax
c002755a:	89 f0                	mov    eax,esi
c002755c:	89 ca                	mov    edx,ecx
c002755e:	e9 17 01 00 00       	jmp    c002767a <__adddf3+0x297>
c0027563:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027566:	f7 d6                	not    esi
c0027568:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002756e:	0f 84 b4 04 00 00    	je     c0027a28 <__adddf3+0x645>
c0027574:	0d 00 00 00 80       	or     eax,0x80000000
c0027579:	83 fb 1f             	cmp    ebx,0x1f
c002757c:	7e 48                	jle    c00275c6 <__adddf3+0x1e3>
c002757e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027581:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027584:	83 fb 3f             	cmp    ebx,0x3f
c0027587:	0f 8f 9b 04 00 00    	jg     c0027a28 <__adddf3+0x645>
c002758d:	83 e3 1f             	and    ebx,0x1f
c0027590:	89 d9                	mov    ecx,ebx
c0027592:	89 c7                	mov    edi,eax
c0027594:	d3 ef                	shr    edi,cl
c0027596:	31 db                	xor    ebx,ebx
c0027598:	85 c9                	test   ecx,ecx
c002759a:	74 12                	je     c00275ae <__adddf3+0x1cb>
c002759c:	be 20 00 00 00       	mov    esi,0x20
c00275a1:	29 ce                	sub    esi,ecx
c00275a3:	89 f1                	mov    ecx,esi
c00275a5:	d3 e0                	shl    eax,cl
c00275a7:	31 db                	xor    ebx,ebx
c00275a9:	85 c0                	test   eax,eax
c00275ab:	0f 95 c3             	setne  bl
c00275ae:	31 c0                	xor    eax,eax
c00275b0:	85 d2                	test   edx,edx
c00275b2:	0f 95 c0             	setne  al
c00275b5:	09 c7                	or     edi,eax
c00275b7:	09 fb                	or     ebx,edi
c00275b9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275bc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00275bf:	01 da                	add    edx,ebx
c00275c1:	83 d6 00             	adc    esi,0x0
c00275c4:	eb 39                	jmp    c00275ff <__adddf3+0x21c>
c00275c6:	be 20 00 00 00       	mov    esi,0x20
c00275cb:	29 de                	sub    esi,ebx
c00275cd:	89 c7                	mov    edi,eax
c00275cf:	89 f1                	mov    ecx,esi
c00275d1:	d3 e7                	shl    edi,cl
c00275d3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00275d6:	89 d7                	mov    edi,edx
c00275d8:	88 d9                	mov    cl,bl
c00275da:	d3 ef                	shr    edi,cl
c00275dc:	89 f9                	mov    ecx,edi
c00275de:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00275e1:	09 cf                	or     edi,ecx
c00275e3:	88 d9                	mov    cl,bl
c00275e5:	d3 e8                	shr    eax,cl
c00275e7:	89 f1                	mov    ecx,esi
c00275e9:	d3 e2                	shl    edx,cl
c00275eb:	85 d2                	test   edx,edx
c00275ed:	0f 95 c2             	setne  dl
c00275f0:	0f b6 d2             	movzx  edx,dl
c00275f3:	09 d7                	or     edi,edx
c00275f5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275f8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00275fb:	01 fa                	add    edx,edi
c00275fd:	11 c6                	adc    esi,eax
c00275ff:	89 f0                	mov    eax,esi
c0027601:	eb 77                	jmp    c002767a <__adddf3+0x297>
c0027603:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027606:	46                   	inc    esi
c0027607:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002760a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027610:	75 41                	jne    c0027653 <__adddf3+0x270>
c0027612:	89 d3                	mov    ebx,edx
c0027614:	09 c3                	or     ebx,eax
c0027616:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002761d:	75 27                	jne    c0027646 <__adddf3+0x263>
c002761f:	85 db                	test   ebx,ebx
c0027621:	0f 84 fb 03 00 00    	je     c0027a22 <__adddf3+0x63f>
c0027627:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002762a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002762d:	0f 84 f5 03 00 00    	je     c0027a28 <__adddf3+0x645>
c0027633:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027636:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027639:	85 c0                	test   eax,eax
c002763b:	0f 89 91 03 00 00    	jns    c00279d2 <__adddf3+0x5ef>
c0027641:	e9 85 03 00 00       	jmp    c00279cb <__adddf3+0x5e8>
c0027646:	85 db                	test   ebx,ebx
c0027648:	0f 85 da 03 00 00    	jne    c0027a28 <__adddf3+0x645>
c002764e:	e9 cf 03 00 00       	jmp    c0027a22 <__adddf3+0x63f>
c0027653:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027656:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027659:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002765c:	f7 d1                	not    ecx
c002765e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027664:	0f 84 70 03 00 00    	je     c00279da <__adddf3+0x5f7>
c002766a:	d1 ea                	shr    edx,1
c002766c:	89 c1                	mov    ecx,eax
c002766e:	c1 e1 1f             	shl    ecx,0x1f
c0027671:	09 ca                	or     edx,ecx
c0027673:	d1 e8                	shr    eax,1
c0027675:	e9 6f 03 00 00       	jmp    c00279e9 <__adddf3+0x606>
c002767a:	85 c0                	test   eax,eax
c002767c:	0f 89 67 03 00 00    	jns    c00279e9 <__adddf3+0x606>
c0027682:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027685:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027688:	f7 d1                	not    ecx
c002768a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027690:	0f 84 44 03 00 00    	je     c00279da <__adddf3+0x5f7>
c0027696:	89 d1                	mov    ecx,edx
c0027698:	d1 e9                	shr    ecx,1
c002769a:	83 e2 01             	and    edx,0x1
c002769d:	09 ca                	or     edx,ecx
c002769f:	89 c1                	mov    ecx,eax
c00276a1:	c1 e1 1f             	shl    ecx,0x1f
c00276a4:	09 ca                	or     edx,ecx
c00276a6:	d1 e8                	shr    eax,1
c00276a8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00276ad:	e9 37 03 00 00       	jmp    c00279e9 <__adddf3+0x606>
c00276b2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00276b5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276bb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00276be:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00276c1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00276c7:	29 de                	sub    esi,ebx
c00276c9:	85 f6                	test   esi,esi
c00276cb:	0f 8e bd 00 00 00    	jle    c002778e <__adddf3+0x3ab>
c00276d1:	85 db                	test   ebx,ebx
c00276d3:	75 17                	jne    c00276ec <__adddf3+0x309>
c00276d5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00276d8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00276db:	0f 84 47 03 00 00    	je     c0027a28 <__adddf3+0x645>
c00276e1:	4e                   	dec    esi
c00276e2:	75 20                	jne    c0027704 <__adddf3+0x321>
c00276e4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00276e7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00276ea:	eb 5b                	jmp    c0027747 <__adddf3+0x364>
c00276ec:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00276ef:	f7 d3                	not    ebx
c00276f1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00276f7:	0f 84 2b 03 00 00    	je     c0027a28 <__adddf3+0x645>
c00276fd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027704:	83 fe 1f             	cmp    esi,0x1f
c0027707:	7e 49                	jle    c0027752 <__adddf3+0x36f>
c0027709:	83 fe 3f             	cmp    esi,0x3f
c002770c:	0f 8f 16 03 00 00    	jg     c0027a28 <__adddf3+0x645>
c0027712:	83 e6 1f             	and    esi,0x1f
c0027715:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027718:	89 f1                	mov    ecx,esi
c002771a:	d3 ef                	shr    edi,cl
c002771c:	31 db                	xor    ebx,ebx
c002771e:	85 f6                	test   esi,esi
c0027720:	74 13                	je     c0027735 <__adddf3+0x352>
c0027722:	b9 20 00 00 00       	mov    ecx,0x20
c0027727:	29 f1                	sub    ecx,esi
c0027729:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002772c:	d3 e6                	shl    esi,cl
c002772e:	31 db                	xor    ebx,ebx
c0027730:	85 f6                	test   esi,esi
c0027732:	0f 95 c3             	setne  bl
c0027735:	31 c9                	xor    ecx,ecx
c0027737:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002773b:	0f 95 c1             	setne  cl
c002773e:	09 cf                	or     edi,ecx
c0027740:	09 fb                	or     ebx,edi
c0027742:	29 da                	sub    edx,ebx
c0027744:	83 d8 00             	sbb    eax,0x0
c0027747:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002774a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002774d:	e9 aa 01 00 00       	jmp    c00278fc <__adddf3+0x519>
c0027752:	bf 20 00 00 00       	mov    edi,0x20
c0027757:	29 f7                	sub    edi,esi
c0027759:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002775c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002775f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027762:	d3 e3                	shl    ebx,cl
c0027764:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027767:	89 f1                	mov    ecx,esi
c0027769:	d3 ef                	shr    edi,cl
c002776b:	09 fb                	or     ebx,edi
c002776d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027770:	89 f1                	mov    ecx,esi
c0027772:	d3 ef                	shr    edi,cl
c0027774:	89 fe                	mov    esi,edi
c0027776:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027779:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002777c:	d3 e7                	shl    edi,cl
c002777e:	85 ff                	test   edi,edi
c0027780:	0f 95 c1             	setne  cl
c0027783:	0f b6 c9             	movzx  ecx,cl
c0027786:	09 cb                	or     ebx,ecx
c0027788:	29 da                	sub    edx,ebx
c002778a:	19 f0                	sbb    eax,esi
c002778c:	eb b9                	jmp    c0027747 <__adddf3+0x364>
c002778e:	0f 84 cd 00 00 00    	je     c0027861 <__adddf3+0x47e>
c0027794:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027797:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002779a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002779d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00277a1:	75 1b                	jne    c00277be <__adddf3+0x3db>
c00277a3:	89 d6                	mov    esi,edx
c00277a5:	09 c6                	or     esi,eax
c00277a7:	0f 84 7b 02 00 00    	je     c0027a28 <__adddf3+0x645>
c00277ad:	4b                   	dec    ebx
c00277ae:	75 24                	jne    c00277d4 <__adddf3+0x3f1>
c00277b0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277b3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00277b6:	29 d1                	sub    ecx,edx
c00277b8:	19 c6                	sbb    esi,eax
c00277ba:	89 ca                	mov    edx,ecx
c00277bc:	eb 61                	jmp    c002781f <__adddf3+0x43c>
c00277be:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00277c1:	f7 d6                	not    esi
c00277c3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00277c9:	0f 84 59 02 00 00    	je     c0027a28 <__adddf3+0x645>
c00277cf:	0d 00 00 00 80       	or     eax,0x80000000
c00277d4:	83 fb 1f             	cmp    ebx,0x1f
c00277d7:	7e 4d                	jle    c0027826 <__adddf3+0x443>
c00277d9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277dc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277df:	83 fb 3f             	cmp    ebx,0x3f
c00277e2:	0f 8f 40 02 00 00    	jg     c0027a28 <__adddf3+0x645>
c00277e8:	83 e3 1f             	and    ebx,0x1f
c00277eb:	89 d9                	mov    ecx,ebx
c00277ed:	89 c7                	mov    edi,eax
c00277ef:	d3 ef                	shr    edi,cl
c00277f1:	31 db                	xor    ebx,ebx
c00277f3:	85 c9                	test   ecx,ecx
c00277f5:	74 12                	je     c0027809 <__adddf3+0x426>
c00277f7:	be 20 00 00 00       	mov    esi,0x20
c00277fc:	29 ce                	sub    esi,ecx
c00277fe:	89 f1                	mov    ecx,esi
c0027800:	d3 e0                	shl    eax,cl
c0027802:	31 db                	xor    ebx,ebx
c0027804:	85 c0                	test   eax,eax
c0027806:	0f 95 c3             	setne  bl
c0027809:	31 c0                	xor    eax,eax
c002780b:	85 d2                	test   edx,edx
c002780d:	0f 95 c0             	setne  al
c0027810:	09 c7                	or     edi,eax
c0027812:	09 fb                	or     ebx,edi
c0027814:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027817:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002781a:	29 da                	sub    edx,ebx
c002781c:	83 de 00             	sbb    esi,0x0
c002781f:	89 f0                	mov    eax,esi
c0027821:	e9 d6 00 00 00       	jmp    c00278fc <__adddf3+0x519>
c0027826:	be 20 00 00 00       	mov    esi,0x20
c002782b:	29 de                	sub    esi,ebx
c002782d:	89 c7                	mov    edi,eax
c002782f:	89 f1                	mov    ecx,esi
c0027831:	d3 e7                	shl    edi,cl
c0027833:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027836:	89 d7                	mov    edi,edx
c0027838:	88 d9                	mov    cl,bl
c002783a:	d3 ef                	shr    edi,cl
c002783c:	89 f9                	mov    ecx,edi
c002783e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027841:	09 cf                	or     edi,ecx
c0027843:	88 d9                	mov    cl,bl
c0027845:	d3 e8                	shr    eax,cl
c0027847:	89 f1                	mov    ecx,esi
c0027849:	d3 e2                	shl    edx,cl
c002784b:	85 d2                	test   edx,edx
c002784d:	0f 95 c2             	setne  dl
c0027850:	0f b6 d2             	movzx  edx,dl
c0027853:	09 d7                	or     edi,edx
c0027855:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027858:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002785b:	29 fa                	sub    edx,edi
c002785d:	19 c6                	sbb    esi,eax
c002785f:	eb be                	jmp    c002781f <__adddf3+0x43c>
c0027861:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027864:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027867:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002786d:	75 6a                	jne    c00278d9 <__adddf3+0x4f6>
c002786f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027873:	75 58                	jne    c00278cd <__adddf3+0x4ea>
c0027875:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027878:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002787b:	89 d6                	mov    esi,edx
c002787d:	09 c6                	or     esi,eax
c002787f:	75 17                	jne    c0027898 <__adddf3+0x4b5>
c0027881:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027884:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027887:	85 db                	test   ebx,ebx
c0027889:	0f 85 99 01 00 00    	jne    c0027a28 <__adddf3+0x645>
c002788f:	31 ff                	xor    edi,edi
c0027891:	31 c9                	xor    ecx,ecx
c0027893:	e9 90 01 00 00       	jmp    c0027a28 <__adddf3+0x645>
c0027898:	85 db                	test   ebx,ebx
c002789a:	0f 84 88 01 00 00    	je     c0027a28 <__adddf3+0x645>
c00278a0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00278a3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00278a6:	85 c0                	test   eax,eax
c00278a8:	79 10                	jns    c00278ba <__adddf3+0x4d7>
c00278aa:	31 c9                	xor    ecx,ecx
c00278ac:	f7 da                	neg    edx
c00278ae:	0f 95 c1             	setne  cl
c00278b1:	01 c8                	add    eax,ecx
c00278b3:	f7 d8                	neg    eax
c00278b5:	e9 2f 01 00 00       	jmp    c00279e9 <__adddf3+0x606>
c00278ba:	31 ff                	xor    edi,edi
c00278bc:	31 c9                	xor    ecx,ecx
c00278be:	89 c3                	mov    ebx,eax
c00278c0:	09 d3                	or     ebx,edx
c00278c2:	0f 84 60 01 00 00    	je     c0027a28 <__adddf3+0x645>
c00278c8:	e9 05 01 00 00       	jmp    c00279d2 <__adddf3+0x5ef>
c00278cd:	31 ff                	xor    edi,edi
c00278cf:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00278d4:	e9 4f 01 00 00       	jmp    c0027a28 <__adddf3+0x645>
c00278d9:	89 c1                	mov    ecx,eax
c00278db:	89 d0                	mov    eax,edx
c00278dd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00278e0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00278e3:	89 ca                	mov    edx,ecx
c00278e5:	85 c9                	test   ecx,ecx
c00278e7:	79 2c                	jns    c0027915 <__adddf3+0x532>
c00278e9:	31 c9                	xor    ecx,ecx
c00278eb:	f7 d8                	neg    eax
c00278ed:	0f 95 c1             	setne  cl
c00278f0:	01 ca                	add    edx,ecx
c00278f2:	f7 da                	neg    edx
c00278f4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00278f7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00278fa:	eb 19                	jmp    c0027915 <__adddf3+0x532>
c00278fc:	85 c0                	test   eax,eax
c00278fe:	0f 89 e5 00 00 00    	jns    c00279e9 <__adddf3+0x606>
c0027904:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027909:	89 c1                	mov    ecx,eax
c002790b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002790e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027911:	89 d0                	mov    eax,edx
c0027913:	89 ca                	mov    edx,ecx
c0027915:	85 d2                	test   edx,edx
c0027917:	74 59                	je     c0027972 <__adddf3+0x58f>
c0027919:	0f bd da             	bsr    ebx,edx
c002791c:	83 f3 1f             	xor    ebx,0x1f
c002791f:	88 d9                	mov    cl,bl
c0027921:	d3 e2                	shl    edx,cl
c0027923:	bf 20 00 00 00       	mov    edi,0x20
c0027928:	89 f9                	mov    ecx,edi
c002792a:	29 d9                	sub    ecx,ebx
c002792c:	89 c6                	mov    esi,eax
c002792e:	d3 ee                	shr    esi,cl
c0027930:	09 d6                	or     esi,edx
c0027932:	88 d9                	mov    cl,bl
c0027934:	d3 e0                	shl    eax,cl
c0027936:	89 c2                	mov    edx,eax
c0027938:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002793b:	25 ff 07 00 00       	and    eax,0x7ff
c0027940:	39 d8                	cmp    eax,ebx
c0027942:	7f 22                	jg     c0027966 <__adddf3+0x583>
c0027944:	29 c3                	sub    ebx,eax
c0027946:	43                   	inc    ebx
c0027947:	88 d9                	mov    cl,bl
c0027949:	d3 ea                	shr    edx,cl
c002794b:	29 df                	sub    edi,ebx
c002794d:	89 f9                	mov    ecx,edi
c002794f:	89 f0                	mov    eax,esi
c0027951:	d3 e0                	shl    eax,cl
c0027953:	09 c2                	or     edx,eax
c0027955:	89 f0                	mov    eax,esi
c0027957:	88 d9                	mov    cl,bl
c0027959:	d3 e8                	shr    eax,cl
c002795b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002795e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027964:	eb 6f                	jmp    c00279d5 <__adddf3+0x5f2>
c0027966:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027969:	29 d8                	sub    eax,ebx
c002796b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002796e:	89 f0                	mov    eax,esi
c0027970:	eb 59                	jmp    c00279cb <__adddf3+0x5e8>
c0027972:	85 c0                	test   eax,eax
c0027974:	74 6a                	je     c00279e0 <__adddf3+0x5fd>
c0027976:	0f bd c8             	bsr    ecx,eax
c0027979:	83 f1 1f             	xor    ecx,0x1f
c002797c:	d3 e0                	shl    eax,cl
c002797e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027981:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027987:	83 c1 20             	add    ecx,0x20
c002798a:	39 cb                	cmp    ebx,ecx
c002798c:	7f 35                	jg     c00279c3 <__adddf3+0x5e0>
c002798e:	29 d9                	sub    ecx,ebx
c0027990:	8d 71 01             	lea    esi,[ecx+0x1]
c0027993:	83 fe 1f             	cmp    esi,0x1f
c0027996:	7e 09                	jle    c00279a1 <__adddf3+0x5be>
c0027998:	83 e9 1f             	sub    ecx,0x1f
c002799b:	d3 e8                	shr    eax,cl
c002799d:	89 c3                	mov    ebx,eax
c002799f:	eb 11                	jmp    c00279b2 <__adddf3+0x5cf>
c00279a1:	b9 20 00 00 00       	mov    ecx,0x20
c00279a6:	29 f1                	sub    ecx,esi
c00279a8:	89 c3                	mov    ebx,eax
c00279aa:	d3 e3                	shl    ebx,cl
c00279ac:	89 f1                	mov    ecx,esi
c00279ae:	d3 e8                	shr    eax,cl
c00279b0:	89 c2                	mov    edx,eax
c00279b2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279b5:	25 00 f8 ff ff       	and    eax,0xfffff800
c00279ba:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00279bd:	89 d0                	mov    eax,edx
c00279bf:	89 da                	mov    edx,ebx
c00279c1:	eb 26                	jmp    c00279e9 <__adddf3+0x606>
c00279c3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279c6:	29 cf                	sub    edi,ecx
c00279c8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00279cb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00279d0:	eb 17                	jmp    c00279e9 <__adddf3+0x606>
c00279d2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279d5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00279d8:	eb 0f                	jmp    c00279e9 <__adddf3+0x606>
c00279da:	31 d2                	xor    edx,edx
c00279dc:	31 c0                	xor    eax,eax
c00279de:	eb 09                	jmp    c00279e9 <__adddf3+0x606>
c00279e0:	89 c2                	mov    edx,eax
c00279e2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00279e9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00279ec:	c1 e1 14             	shl    ecx,0x14
c00279ef:	89 c3                	mov    ebx,eax
c00279f1:	c1 eb 0b             	shr    ebx,0xb
c00279f4:	09 d9                	or     ecx,ebx
c00279f6:	89 d3                	mov    ebx,edx
c00279f8:	c1 eb 0b             	shr    ebx,0xb
c00279fb:	c1 e0 15             	shl    eax,0x15
c00279fe:	09 d8                	or     eax,ebx
c0027a00:	89 c7                	mov    edi,eax
c0027a02:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027a08:	0f 95 c0             	setne  al
c0027a0b:	89 c6                	mov    esi,eax
c0027a0d:	09 f3                	or     ebx,esi
c0027a0f:	83 e3 01             	and    ebx,0x1
c0027a12:	c1 ea 0a             	shr    edx,0xa
c0027a15:	21 da                	and    edx,ebx
c0027a17:	89 f8                	mov    eax,edi
c0027a19:	01 d0                	add    eax,edx
c0027a1b:	83 d1 00             	adc    ecx,0x0
c0027a1e:	89 c7                	mov    edi,eax
c0027a20:	eb 06                	jmp    c0027a28 <__adddf3+0x645>
c0027a22:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a25:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a28:	89 f8                	mov    eax,edi
c0027a2a:	89 ca                	mov    edx,ecx
c0027a2c:	83 c4 24             	add    esp,0x24
c0027a2f:	5b                   	pop    ebx
c0027a30:	5e                   	pop    esi
c0027a31:	5f                   	pop    edi
c0027a32:	5d                   	pop    ebp
c0027a33:	c3                   	ret    

c0027a34 <__subdf3>:
c0027a34:	55                   	push   ebp
c0027a35:	89 e5                	mov    ebp,esp
c0027a37:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027a3a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027a3d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027a43:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027a46:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027a49:	5d                   	pop    ebp
c0027a4a:	e9 94 f9 ff ff       	jmp    c00273e3 <__adddf3>

c0027a4f <__negdf2>:
c0027a4f:	55                   	push   ebp
c0027a50:	89 e5                	mov    ebp,esp
c0027a52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027a55:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027a58:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027a5e:	5d                   	pop    ebp
c0027a5f:	c3                   	ret    

c0027a60 <__muldf3>:
c0027a60:	55                   	push   ebp
c0027a61:	89 e5                	mov    ebp,esp
c0027a63:	57                   	push   edi
c0027a64:	56                   	push   esi
c0027a65:	53                   	push   ebx
c0027a66:	83 ec 24             	sub    esp,0x24
c0027a69:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027a6c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027a6f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a72:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027a75:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027a78:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027a7b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027a7e:	89 c8                	mov    eax,ecx
c0027a80:	c1 f8 14             	sar    eax,0x14
c0027a83:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027a86:	89 f8                	mov    eax,edi
c0027a88:	89 fb                	mov    ebx,edi
c0027a8a:	c1 e3 0b             	shl    ebx,0xb
c0027a8d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027a90:	c1 e1 0b             	shl    ecx,0xb
c0027a93:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027a99:	c1 e8 15             	shr    eax,0x15
c0027a9c:	09 c1                	or     ecx,eax
c0027a9e:	89 d6                	mov    esi,edx
c0027aa0:	89 d0                	mov    eax,edx
c0027aa2:	c1 f8 14             	sar    eax,0x14
c0027aa5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027aa8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027aab:	89 c3                	mov    ebx,eax
c0027aad:	c1 e3 0b             	shl    ebx,0xb
c0027ab0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027ab3:	c1 e6 0b             	shl    esi,0xb
c0027ab6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027abc:	c1 e8 15             	shr    eax,0x15
c0027abf:	09 c6                	or     esi,eax
c0027ac1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ac4:	25 ff 07 00 00       	and    eax,0x7ff
c0027ac9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027acc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027acf:	25 ff 07 00 00       	and    eax,0x7ff
c0027ad4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027ad7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027ada:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027add:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027ae4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ae7:	40                   	inc    eax
c0027ae8:	a9 fe 07 00 00       	test   eax,0x7fe
c0027aed:	0f 85 8d 00 00 00    	jne    c0027b80 <__muldf3+0x120>
c0027af3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027af6:	09 c8                	or     eax,ecx
c0027af8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027afc:	74 44                	je     c0027b42 <__muldf3+0xe2>
c0027afe:	85 c0                	test   eax,eax
c0027b00:	0f 85 31 02 00 00    	jne    c0027d37 <__muldf3+0x2d7>
c0027b06:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b09:	40                   	inc    eax
c0027b0a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027b0f:	75 13                	jne    c0027b24 <__muldf3+0xc4>
c0027b11:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027b14:	09 f1                	or     ecx,esi
c0027b16:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027b1a:	74 22                	je     c0027b3e <__muldf3+0xde>
c0027b1c:	85 c9                	test   ecx,ecx
c0027b1e:	0f 85 0d 02 00 00    	jne    c0027d31 <__muldf3+0x2d1>
c0027b24:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027b28:	0f 89 09 02 00 00    	jns    c0027d37 <__muldf3+0x2d7>
c0027b2e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b31:	05 00 00 00 80       	add    eax,0x80000000
c0027b36:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b39:	e9 f9 01 00 00       	jmp    c0027d37 <__muldf3+0x2d7>
c0027b3e:	85 c9                	test   ecx,ecx
c0027b40:	eb 2e                	jmp    c0027b70 <__muldf3+0x110>
c0027b42:	85 c0                	test   eax,eax
c0027b44:	74 20                	je     c0027b66 <__muldf3+0x106>
c0027b46:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027b49:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b4c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b4f:	c1 ef 1f             	shr    edi,0x1f
c0027b52:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027b55:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027b58:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027b5b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b5e:	09 f9                	or     ecx,edi
c0027b60:	78 1e                	js     c0027b80 <__muldf3+0x120>
c0027b62:	89 c3                	mov    ebx,eax
c0027b64:	eb e0                	jmp    c0027b46 <__muldf3+0xe6>
c0027b66:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b69:	f7 d0                	not    eax
c0027b6b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027b70:	75 b2                	jne    c0027b24 <__muldf3+0xc4>
c0027b72:	31 ff                	xor    edi,edi
c0027b74:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027b7b:	e9 b7 01 00 00       	jmp    c0027d37 <__muldf3+0x2d7>
c0027b80:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b83:	40                   	inc    eax
c0027b84:	a9 fe 07 00 00       	test   eax,0x7fe
c0027b89:	75 57                	jne    c0027be2 <__muldf3+0x182>
c0027b8b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027b8e:	09 f0                	or     eax,esi
c0027b90:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027b94:	74 23                	je     c0027bb9 <__muldf3+0x159>
c0027b96:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027b9a:	0f 89 91 01 00 00    	jns    c0027d31 <__muldf3+0x2d1>
c0027ba0:	85 c0                	test   eax,eax
c0027ba2:	0f 85 89 01 00 00    	jne    c0027d31 <__muldf3+0x2d1>
c0027ba8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027bab:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027bb1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bb4:	e9 7e 01 00 00       	jmp    c0027d37 <__muldf3+0x2d7>
c0027bb9:	85 c0                	test   eax,eax
c0027bbb:	75 0c                	jne    c0027bc9 <__muldf3+0x169>
c0027bbd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027bc1:	0f 89 6a 01 00 00    	jns    c0027d31 <__muldf3+0x2d1>
c0027bc7:	eb df                	jmp    c0027ba8 <__muldf3+0x148>
c0027bc9:	01 f6                	add    esi,esi
c0027bcb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027bce:	c1 ea 1f             	shr    edx,0x1f
c0027bd1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027bd4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027bd7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027bda:	09 d6                	or     esi,edx
c0027bdc:	78 04                	js     c0027be2 <__muldf3+0x182>
c0027bde:	89 c3                	mov    ebx,eax
c0027be0:	eb e7                	jmp    c0027bc9 <__muldf3+0x169>
c0027be2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027be8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027bee:	89 c8                	mov    eax,ecx
c0027bf0:	f7 e6                	mul    esi
c0027bf2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027bf5:	89 c7                	mov    edi,eax
c0027bf7:	89 c8                	mov    eax,ecx
c0027bf9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027bfc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027bff:	89 c1                	mov    ecx,eax
c0027c01:	89 f0                	mov    eax,esi
c0027c03:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027c06:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027c09:	89 c6                	mov    esi,eax
c0027c0b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c0e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027c11:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027c14:	31 c0                	xor    eax,eax
c0027c16:	01 f1                	add    ecx,esi
c0027c18:	0f 92 c0             	setb   al
c0027c1b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027c1e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027c21:	83 d6 00             	adc    esi,0x0
c0027c24:	01 c7                	add    edi,eax
c0027c26:	83 d6 00             	adc    esi,0x0
c0027c29:	01 ca                	add    edx,ecx
c0027c2b:	0f 92 c1             	setb   cl
c0027c2e:	0f b6 c9             	movzx  ecx,cl
c0027c31:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027c34:	83 d6 00             	adc    esi,0x0
c0027c37:	01 cf                	add    edi,ecx
c0027c39:	83 d6 00             	adc    esi,0x0
c0027c3c:	31 c9                	xor    ecx,ecx
c0027c3e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027c41:	0f 95 c1             	setne  cl
c0027c44:	09 cf                	or     edi,ecx
c0027c46:	85 f6                	test   esi,esi
c0027c48:	78 0c                	js     c0027c56 <__muldf3+0x1f6>
c0027c4a:	01 f6                	add    esi,esi
c0027c4c:	89 f8                	mov    eax,edi
c0027c4e:	c1 e8 1f             	shr    eax,0x1f
c0027c51:	09 c6                	or     esi,eax
c0027c53:	01 ff                	add    edi,edi
c0027c55:	4b                   	dec    ebx
c0027c56:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027c5c:	0f 8f 85 00 00 00    	jg     c0027ce7 <__muldf3+0x287>
c0027c62:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027c68:	85 db                	test   ebx,ebx
c0027c6a:	0f 8f 84 00 00 00    	jg     c0027cf4 <__muldf3+0x294>
c0027c70:	83 fb cc             	cmp    ebx,0xffffffcc
c0027c73:	7c 79                	jl     c0027cee <__muldf3+0x28e>
c0027c75:	ba 01 00 00 00       	mov    edx,0x1
c0027c7a:	29 da                	sub    edx,ebx
c0027c7c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027c82:	83 fa 1f             	cmp    edx,0x1f
c0027c85:	7e 30                	jle    c0027cb7 <__muldf3+0x257>
c0027c87:	83 fa 20             	cmp    edx,0x20
c0027c8a:	75 0b                	jne    c0027c97 <__muldf3+0x237>
c0027c8c:	31 c0                	xor    eax,eax
c0027c8e:	85 ff                	test   edi,edi
c0027c90:	0f 95 c0             	setne  al
c0027c93:	89 c7                	mov    edi,eax
c0027c95:	eb 1a                	jmp    c0027cb1 <__muldf3+0x251>
c0027c97:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027c9a:	89 f0                	mov    eax,esi
c0027c9c:	d3 e0                	shl    eax,cl
c0027c9e:	09 f8                	or     eax,edi
c0027ca0:	0f 95 c0             	setne  al
c0027ca3:	0f b6 c0             	movzx  eax,al
c0027ca6:	89 c7                	mov    edi,eax
c0027ca8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027cad:	29 d9                	sub    ecx,ebx
c0027caf:	d3 ee                	shr    esi,cl
c0027cb1:	09 f7                	or     edi,esi
c0027cb3:	31 db                	xor    ebx,ebx
c0027cb5:	eb 3b                	jmp    c0027cf2 <__muldf3+0x292>
c0027cb7:	83 c3 1f             	add    ebx,0x1f
c0027cba:	89 f0                	mov    eax,esi
c0027cbc:	88 d9                	mov    cl,bl
c0027cbe:	d3 e0                	shl    eax,cl
c0027cc0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cc3:	89 f8                	mov    eax,edi
c0027cc5:	88 d1                	mov    cl,dl
c0027cc7:	d3 e8                	shr    eax,cl
c0027cc9:	89 c1                	mov    ecx,eax
c0027ccb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027cce:	09 c8                	or     eax,ecx
c0027cd0:	88 d9                	mov    cl,bl
c0027cd2:	d3 e7                	shl    edi,cl
c0027cd4:	31 db                	xor    ebx,ebx
c0027cd6:	85 ff                	test   edi,edi
c0027cd8:	0f 95 c3             	setne  bl
c0027cdb:	89 df                	mov    edi,ebx
c0027cdd:	09 c7                	or     edi,eax
c0027cdf:	88 d1                	mov    cl,dl
c0027ce1:	d3 ee                	shr    esi,cl
c0027ce3:	31 db                	xor    ebx,ebx
c0027ce5:	eb 0d                	jmp    c0027cf4 <__muldf3+0x294>
c0027ce7:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027cec:	eb 02                	jmp    c0027cf0 <__muldf3+0x290>
c0027cee:	31 db                	xor    ebx,ebx
c0027cf0:	31 ff                	xor    edi,edi
c0027cf2:	31 f6                	xor    esi,esi
c0027cf4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027cf7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027cfa:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027cff:	09 c3                	or     ebx,eax
c0027d01:	c1 e3 14             	shl    ebx,0x14
c0027d04:	89 f0                	mov    eax,esi
c0027d06:	c1 e8 0b             	shr    eax,0xb
c0027d09:	09 c3                	or     ebx,eax
c0027d0b:	89 f8                	mov    eax,edi
c0027d0d:	c1 e8 0b             	shr    eax,0xb
c0027d10:	c1 e6 15             	shl    esi,0x15
c0027d13:	09 c6                	or     esi,eax
c0027d15:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027d1b:	0f 95 c1             	setne  cl
c0027d1e:	09 c8                	or     eax,ecx
c0027d20:	83 e0 01             	and    eax,0x1
c0027d23:	c1 ef 0a             	shr    edi,0xa
c0027d26:	21 c7                	and    edi,eax
c0027d28:	01 f7                	add    edi,esi
c0027d2a:	83 d3 00             	adc    ebx,0x0
c0027d2d:	89 da                	mov    edx,ebx
c0027d2f:	eb 03                	jmp    c0027d34 <__muldf3+0x2d4>
c0027d31:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027d34:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027d37:	89 f8                	mov    eax,edi
c0027d39:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027d3c:	83 c4 24             	add    esp,0x24
c0027d3f:	5b                   	pop    ebx
c0027d40:	5e                   	pop    esi
c0027d41:	5f                   	pop    edi
c0027d42:	5d                   	pop    ebp
c0027d43:	c3                   	ret    

c0027d44 <__divdf3>:
c0027d44:	55                   	push   ebp
c0027d45:	89 e5                	mov    ebp,esp
c0027d47:	57                   	push   edi
c0027d48:	56                   	push   esi
c0027d49:	53                   	push   ebx
c0027d4a:	83 ec 2c             	sub    esp,0x2c
c0027d4d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027d50:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027d53:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027d56:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027d59:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027d5c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027d5f:	89 ce                	mov    esi,ecx
c0027d61:	89 c8                	mov    eax,ecx
c0027d63:	c1 f8 14             	sar    eax,0x14
c0027d66:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027d69:	89 f8                	mov    eax,edi
c0027d6b:	89 fb                	mov    ebx,edi
c0027d6d:	c1 e3 0b             	shl    ebx,0xb
c0027d70:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027d73:	c1 e6 0b             	shl    esi,0xb
c0027d76:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027d7c:	c1 e8 15             	shr    eax,0x15
c0027d7f:	09 c6                	or     esi,eax
c0027d81:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027d84:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027d87:	89 c2                	mov    edx,eax
c0027d89:	c1 fa 14             	sar    edx,0x14
c0027d8c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027d8f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027d92:	89 de                	mov    esi,ebx
c0027d94:	c1 e6 0b             	shl    esi,0xb
c0027d97:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027d9a:	c1 e0 0b             	shl    eax,0xb
c0027d9d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027da2:	c1 eb 15             	shr    ebx,0x15
c0027da5:	09 d8                	or     eax,ebx
c0027da7:	89 c2                	mov    edx,eax
c0027da9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027dac:	25 ff 07 00 00       	and    eax,0x7ff
c0027db1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027db4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027db7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027dbd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027dc0:	29 d8                	sub    eax,ebx
c0027dc2:	05 ff 03 00 00       	add    eax,0x3ff
c0027dc7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027dca:	46                   	inc    esi
c0027dcb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027dd1:	0f 85 a5 00 00 00    	jne    c0027e7c <__divdf3+0x138>
c0027dd7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027dda:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027ddd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027de1:	74 2a                	je     c0027e0d <__divdf3+0xc9>
c0027de3:	85 f6                	test   esi,esi
c0027de5:	0f 85 cc 02 00 00    	jne    c00280b7 <__divdf3+0x373>
c0027deb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027dee:	40                   	inc    eax
c0027def:	a9 fe 07 00 00       	test   eax,0x7fe
c0027df4:	75 26                	jne    c0027e1c <__divdf3+0xd8>
c0027df6:	85 db                	test   ebx,ebx
c0027df8:	74 22                	je     c0027e1c <__divdf3+0xd8>
c0027dfa:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027dfd:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027e00:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027e03:	09 d0                	or     eax,edx
c0027e05:	0f 85 ac 02 00 00    	jne    c00280b7 <__divdf3+0x373>
c0027e0b:	eb 63                	jmp    c0027e70 <__divdf3+0x12c>
c0027e0d:	85 f6                	test   esi,esi
c0027e0f:	75 22                	jne    c0027e33 <__divdf3+0xef>
c0027e11:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e14:	40                   	inc    eax
c0027e15:	a9 fe 07 00 00       	test   eax,0x7fe
c0027e1a:	74 36                	je     c0027e52 <__divdf3+0x10e>
c0027e1c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027e20:	0f 89 91 02 00 00    	jns    c00280b7 <__divdf3+0x373>
c0027e26:	89 f8                	mov    eax,edi
c0027e28:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027e2e:	e9 80 02 00 00       	jmp    c00280b3 <__divdf3+0x36f>
c0027e33:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027e36:	01 f6                	add    esi,esi
c0027e38:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027e3b:	c1 ef 1f             	shr    edi,0x1f
c0027e3e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027e41:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027e44:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027e47:	09 f7                	or     edi,esi
c0027e49:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027e4c:	78 2e                	js     c0027e7c <__divdf3+0x138>
c0027e4e:	89 c8                	mov    eax,ecx
c0027e50:	eb e1                	jmp    c0027e33 <__divdf3+0xef>
c0027e52:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027e55:	09 d0                	or     eax,edx
c0027e57:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027e5b:	74 0f                	je     c0027e6c <__divdf3+0x128>
c0027e5d:	85 c0                	test   eax,eax
c0027e5f:	74 bb                	je     c0027e1c <__divdf3+0xd8>
c0027e61:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027e64:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027e67:	e9 4b 02 00 00       	jmp    c00280b7 <__divdf3+0x373>
c0027e6c:	85 c0                	test   eax,eax
c0027e6e:	75 ac                	jne    c0027e1c <__divdf3+0xd8>
c0027e70:	31 ff                	xor    edi,edi
c0027e72:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027e77:	e9 3b 02 00 00       	jmp    c00280b7 <__divdf3+0x373>
c0027e7c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027e7f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027e82:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027e88:	75 6b                	jne    c0027ef5 <__divdf3+0x1b1>
c0027e8a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e8d:	09 d6                	or     esi,edx
c0027e8f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027e93:	74 28                	je     c0027ebd <__divdf3+0x179>
c0027e95:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027e98:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027e9b:	85 f6                	test   esi,esi
c0027e9d:	0f 85 14 02 00 00    	jne    c00280b7 <__divdf3+0x373>
c0027ea3:	31 ff                	xor    edi,edi
c0027ea5:	31 c9                	xor    ecx,ecx
c0027ea7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027eaa:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027ead:	0f 89 04 02 00 00    	jns    c00280b7 <__divdf3+0x373>
c0027eb3:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027eb8:	e9 fa 01 00 00       	jmp    c00280b7 <__divdf3+0x373>
c0027ebd:	85 f6                	test   esi,esi
c0027ebf:	75 1b                	jne    c0027edc <__divdf3+0x198>
c0027ec1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ec4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027ec7:	25 00 00 00 80       	and    eax,0x80000000
c0027ecc:	31 c9                	xor    ecx,ecx
c0027ece:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027ed3:	89 cf                	mov    edi,ecx
c0027ed5:	89 c1                	mov    ecx,eax
c0027ed7:	e9 db 01 00 00       	jmp    c00280b7 <__divdf3+0x373>
c0027edc:	01 d2                	add    edx,edx
c0027ede:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027ee1:	c1 eb 1f             	shr    ebx,0x1f
c0027ee4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ee7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027eea:	8d 48 01             	lea    ecx,[eax+0x1]
c0027eed:	09 da                	or     edx,ebx
c0027eef:	78 04                	js     c0027ef5 <__divdf3+0x1b1>
c0027ef1:	89 c8                	mov    eax,ecx
c0027ef3:	eb e7                	jmp    c0027edc <__divdf3+0x198>
c0027ef5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027ef8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027efe:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027f04:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027f07:	39 d6                	cmp    esi,edx
c0027f09:	77 0d                	ja     c0027f18 <__divdf3+0x1d4>
c0027f0b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027f0e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027f11:	72 1b                	jb     c0027f2e <__divdf3+0x1ea>
c0027f13:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027f16:	75 16                	jne    c0027f2e <__divdf3+0x1ea>
c0027f18:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027f1b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027f1e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027f21:	83 de 00             	sbb    esi,0x0
c0027f24:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027f27:	ba 01 00 00 00       	mov    edx,0x1
c0027f2c:	eb 02                	jmp    c0027f30 <__divdf3+0x1ec>
c0027f2e:	31 d2                	xor    edx,edx
c0027f30:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027f37:	31 ff                	xor    edi,edi
c0027f39:	01 ff                	add    edi,edi
c0027f3b:	89 d1                	mov    ecx,edx
c0027f3d:	c1 e9 1f             	shr    ecx,0x1f
c0027f40:	09 cf                	or     edi,ecx
c0027f42:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027f45:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027f48:	89 da                	mov    edx,ebx
c0027f4a:	89 f3                	mov    ebx,esi
c0027f4c:	8d 34 36             	lea    esi,[esi+esi*1]
c0027f4f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027f52:	c1 e9 1f             	shr    ecx,0x1f
c0027f55:	09 ce                	or     esi,ecx
c0027f57:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027f5a:	01 c9                	add    ecx,ecx
c0027f5c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027f5f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027f62:	85 db                	test   ebx,ebx
c0027f64:	78 29                	js     c0027f8f <__divdf3+0x24b>
c0027f66:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027f69:	72 07                	jb     c0027f72 <__divdf3+0x22e>
c0027f6b:	75 3c                	jne    c0027fa9 <__divdf3+0x265>
c0027f6d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027f70:	77 37                	ja     c0027fa9 <__divdf3+0x265>
c0027f72:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027f75:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027f78:	31 d2                	xor    edx,edx
c0027f7a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027f7d:	0f 97 c2             	seta   dl
c0027f80:	29 d6                	sub    esi,edx
c0027f82:	89 d9                	mov    ecx,ebx
c0027f84:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027f87:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027f8a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027f8d:	eb 17                	jmp    c0027fa6 <__divdf3+0x262>
c0027f8f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027f92:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027f95:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027f98:	0f 97 c1             	seta   cl
c0027f9b:	0f b6 c9             	movzx  ecx,cl
c0027f9e:	29 ce                	sub    esi,ecx
c0027fa0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027fa3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027fa6:	83 ca 01             	or     edx,0x1
c0027fa9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027fac:	75 8b                	jne    c0027f39 <__divdf3+0x1f5>
c0027fae:	c1 e7 09             	shl    edi,0x9
c0027fb1:	89 d1                	mov    ecx,edx
c0027fb3:	c1 e9 17             	shr    ecx,0x17
c0027fb6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027fb9:	09 f3                	or     ebx,esi
c0027fbb:	0f 95 c3             	setne  bl
c0027fbe:	0f b6 db             	movzx  ebx,bl
c0027fc1:	c1 e2 09             	shl    edx,0x9
c0027fc4:	09 d3                	or     ebx,edx
c0027fc6:	89 ca                	mov    edx,ecx
c0027fc8:	09 fa                	or     edx,edi
c0027fca:	78 0c                	js     c0027fd8 <__divdf3+0x294>
c0027fcc:	01 d2                	add    edx,edx
c0027fce:	89 d9                	mov    ecx,ebx
c0027fd0:	c1 e9 1f             	shr    ecx,0x1f
c0027fd3:	09 ca                	or     edx,ecx
c0027fd5:	01 db                	add    ebx,ebx
c0027fd7:	48                   	dec    eax
c0027fd8:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027fdd:	0f 8f 83 00 00 00    	jg     c0028066 <__divdf3+0x322>
c0027fe3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027fe9:	85 c0                	test   eax,eax
c0027feb:	0f 8f 82 00 00 00    	jg     c0028073 <__divdf3+0x32f>
c0027ff1:	83 f8 cc             	cmp    eax,0xffffffcc
c0027ff4:	7c 77                	jl     c002806d <__divdf3+0x329>
c0027ff6:	be 01 00 00 00       	mov    esi,0x1
c0027ffb:	29 c6                	sub    esi,eax
c0027ffd:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028003:	83 fe 1f             	cmp    esi,0x1f
c0028006:	7e 2f                	jle    c0028037 <__divdf3+0x2f3>
c0028008:	83 fe 20             	cmp    esi,0x20
c002800b:	75 0a                	jne    c0028017 <__divdf3+0x2d3>
c002800d:	85 db                	test   ebx,ebx
c002800f:	0f 95 c3             	setne  bl
c0028012:	0f b6 db             	movzx  ebx,bl
c0028015:	eb 1a                	jmp    c0028031 <__divdf3+0x2ed>
c0028017:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002801a:	89 d7                	mov    edi,edx
c002801c:	d3 e7                	shl    edi,cl
c002801e:	89 f9                	mov    ecx,edi
c0028020:	09 d9                	or     ecx,ebx
c0028022:	0f 95 c3             	setne  bl
c0028025:	0f b6 db             	movzx  ebx,bl
c0028028:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002802d:	29 c1                	sub    ecx,eax
c002802f:	d3 ea                	shr    edx,cl
c0028031:	09 d3                	or     ebx,edx
c0028033:	31 c0                	xor    eax,eax
c0028035:	eb 3a                	jmp    c0028071 <__divdf3+0x32d>
c0028037:	83 c0 1f             	add    eax,0x1f
c002803a:	89 d7                	mov    edi,edx
c002803c:	88 c1                	mov    cl,al
c002803e:	d3 e7                	shl    edi,cl
c0028040:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028043:	89 df                	mov    edi,ebx
c0028045:	89 f1                	mov    ecx,esi
c0028047:	d3 ef                	shr    edi,cl
c0028049:	89 f9                	mov    ecx,edi
c002804b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002804e:	09 cf                	or     edi,ecx
c0028050:	88 c1                	mov    cl,al
c0028052:	d3 e3                	shl    ebx,cl
c0028054:	85 db                	test   ebx,ebx
c0028056:	0f 95 c3             	setne  bl
c0028059:	0f b6 db             	movzx  ebx,bl
c002805c:	09 fb                	or     ebx,edi
c002805e:	89 f1                	mov    ecx,esi
c0028060:	d3 ea                	shr    edx,cl
c0028062:	31 c0                	xor    eax,eax
c0028064:	eb 0d                	jmp    c0028073 <__divdf3+0x32f>
c0028066:	b8 ff 07 00 00       	mov    eax,0x7ff
c002806b:	eb 02                	jmp    c002806f <__divdf3+0x32b>
c002806d:	31 c0                	xor    eax,eax
c002806f:	31 db                	xor    ebx,ebx
c0028071:	31 d2                	xor    edx,edx
c0028073:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028076:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028079:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002807f:	09 c8                	or     eax,ecx
c0028081:	c1 e0 14             	shl    eax,0x14
c0028084:	89 d1                	mov    ecx,edx
c0028086:	c1 e9 0b             	shr    ecx,0xb
c0028089:	09 c8                	or     eax,ecx
c002808b:	89 c6                	mov    esi,eax
c002808d:	89 d9                	mov    ecx,ebx
c002808f:	c1 e9 0b             	shr    ecx,0xb
c0028092:	c1 e2 15             	shl    edx,0x15
c0028095:	09 ca                	or     edx,ecx
c0028097:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002809d:	0f 95 c0             	setne  al
c00280a0:	09 c1                	or     ecx,eax
c00280a2:	83 e1 01             	and    ecx,0x1
c00280a5:	c1 eb 0a             	shr    ebx,0xa
c00280a8:	21 cb                	and    ebx,ecx
c00280aa:	01 d3                	add    ebx,edx
c00280ac:	89 d8                	mov    eax,ebx
c00280ae:	83 d6 00             	adc    esi,0x0
c00280b1:	89 f2                	mov    edx,esi
c00280b3:	89 c7                	mov    edi,eax
c00280b5:	89 d1                	mov    ecx,edx
c00280b7:	89 f8                	mov    eax,edi
c00280b9:	89 ca                	mov    edx,ecx
c00280bb:	83 c4 2c             	add    esp,0x2c
c00280be:	5b                   	pop    ebx
c00280bf:	5e                   	pop    esi
c00280c0:	5f                   	pop    edi
c00280c1:	5d                   	pop    ebp
c00280c2:	c3                   	ret    

c00280c3 <__floatsidf>:
c00280c3:	55                   	push   ebp
c00280c4:	89 e5                	mov    ebp,esp
c00280c6:	56                   	push   esi
c00280c7:	53                   	push   ebx
c00280c8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00280cb:	85 db                	test   ebx,ebx
c00280cd:	7e 15                	jle    c00280e4 <__floatsidf+0x21>
c00280cf:	0f bd cb             	bsr    ecx,ebx
c00280d2:	83 f1 1f             	xor    ecx,0x1f
c00280d5:	d3 e3                	shl    ebx,cl
c00280d7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00280dd:	b8 1e 04 00 00       	mov    eax,0x41e
c00280e2:	eb 21                	jmp    c0028105 <__floatsidf+0x42>
c00280e4:	b8 00 00 00 00       	mov    eax,0x0
c00280e9:	ba 00 00 00 00       	mov    edx,0x0
c00280ee:	74 2a                	je     c002811a <__floatsidf+0x57>
c00280f0:	f7 db                	neg    ebx
c00280f2:	0f bd cb             	bsr    ecx,ebx
c00280f5:	83 f1 1f             	xor    ecx,0x1f
c00280f8:	d3 e3                	shl    ebx,cl
c00280fa:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028100:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028105:	29 c8                	sub    eax,ecx
c0028107:	c1 e0 14             	shl    eax,0x14
c002810a:	89 c1                	mov    ecx,eax
c002810c:	89 de                	mov    esi,ebx
c002810e:	c1 ee 0b             	shr    esi,0xb
c0028111:	09 f1                	or     ecx,esi
c0028113:	89 ca                	mov    edx,ecx
c0028115:	c1 e3 15             	shl    ebx,0x15
c0028118:	89 d8                	mov    eax,ebx
c002811a:	5b                   	pop    ebx
c002811b:	5e                   	pop    esi
c002811c:	5d                   	pop    ebp
c002811d:	c3                   	ret    

c002811e <__floatunsidf>:
c002811e:	55                   	push   ebp
c002811f:	89 e5                	mov    ebp,esp
c0028121:	56                   	push   esi
c0028122:	53                   	push   ebx
c0028123:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028126:	85 db                	test   ebx,ebx
c0028128:	74 2a                	je     c0028154 <__floatunsidf+0x36>
c002812a:	0f bd cb             	bsr    ecx,ebx
c002812d:	83 f1 1f             	xor    ecx,0x1f
c0028130:	d3 e3                	shl    ebx,cl
c0028132:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028138:	b8 1e 04 00 00       	mov    eax,0x41e
c002813d:	29 c8                	sub    eax,ecx
c002813f:	c1 e0 14             	shl    eax,0x14
c0028142:	89 c1                	mov    ecx,eax
c0028144:	89 de                	mov    esi,ebx
c0028146:	c1 ee 0b             	shr    esi,0xb
c0028149:	09 f1                	or     ecx,esi
c002814b:	89 ca                	mov    edx,ecx
c002814d:	c1 e3 15             	shl    ebx,0x15
c0028150:	89 d8                	mov    eax,ebx
c0028152:	eb 04                	jmp    c0028158 <__floatunsidf+0x3a>
c0028154:	31 c0                	xor    eax,eax
c0028156:	31 d2                	xor    edx,edx
c0028158:	5b                   	pop    ebx
c0028159:	5e                   	pop    esi
c002815a:	5d                   	pop    ebp
c002815b:	c3                   	ret    

c002815c <__fixdfsi>:
c002815c:	55                   	push   ebp
c002815d:	89 e5                	mov    ebp,esp
c002815f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028162:	89 d1                	mov    ecx,edx
c0028164:	c1 e1 0b             	shl    ecx,0xb
c0028167:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002816d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028170:	c1 e8 15             	shr    eax,0x15
c0028173:	09 c1                	or     ecx,eax
c0028175:	c1 fa 14             	sar    edx,0x14
c0028178:	78 1f                	js     c0028199 <__fixdfsi+0x3d>
c002817a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028180:	31 c0                	xor    eax,eax
c0028182:	83 fa 1e             	cmp    edx,0x1e
c0028185:	77 40                	ja     c00281c7 <__fixdfsi+0x6b>
c0028187:	89 c8                	mov    eax,ecx
c0028189:	0d 00 00 00 80       	or     eax,0x80000000
c002818e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028193:	29 d1                	sub    ecx,edx
c0028195:	d3 e8                	shr    eax,cl
c0028197:	eb 2e                	jmp    c00281c7 <__fixdfsi+0x6b>
c0028199:	31 c0                	xor    eax,eax
c002819b:	81 c2 01 04 00 00    	add    edx,0x401
c00281a1:	78 24                	js     c00281c7 <__fixdfsi+0x6b>
c00281a3:	83 fa 1e             	cmp    edx,0x1e
c00281a6:	7e 09                	jle    c00281b1 <__fixdfsi+0x55>
c00281a8:	83 fa 1f             	cmp    edx,0x1f
c00281ab:	75 18                	jne    c00281c5 <__fixdfsi+0x69>
c00281ad:	85 c9                	test   ecx,ecx
c00281af:	75 14                	jne    c00281c5 <__fixdfsi+0x69>
c00281b1:	89 c8                	mov    eax,ecx
c00281b3:	0d 00 00 00 80       	or     eax,0x80000000
c00281b8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00281bd:	29 d1                	sub    ecx,edx
c00281bf:	d3 e8                	shr    eax,cl
c00281c1:	f7 d8                	neg    eax
c00281c3:	eb 02                	jmp    c00281c7 <__fixdfsi+0x6b>
c00281c5:	31 c0                	xor    eax,eax
c00281c7:	5d                   	pop    ebp
c00281c8:	c3                   	ret    

c00281c9 <__fixunsdfsi>:
c00281c9:	55                   	push   ebp
c00281ca:	89 e5                	mov    ebp,esp
c00281cc:	53                   	push   ebx
c00281cd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00281d0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00281d3:	89 d3                	mov    ebx,edx
c00281d5:	c1 fb 14             	sar    ebx,0x14
c00281d8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00281de:	31 c0                	xor    eax,eax
c00281e0:	83 fb 1f             	cmp    ebx,0x1f
c00281e3:	77 1d                	ja     c0028202 <__fixunsdfsi+0x39>
c00281e5:	89 d0                	mov    eax,edx
c00281e7:	c1 e0 0b             	shl    eax,0xb
c00281ea:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00281ef:	c1 e9 15             	shr    ecx,0x15
c00281f2:	09 c8                	or     eax,ecx
c00281f4:	0d 00 00 00 80       	or     eax,0x80000000
c00281f9:	b9 1f 00 00 00       	mov    ecx,0x1f
c00281fe:	29 d9                	sub    ecx,ebx
c0028200:	d3 e8                	shr    eax,cl
c0028202:	5b                   	pop    ebx
c0028203:	5d                   	pop    ebp
c0028204:	c3                   	ret    

c0028205 <__cmpdf2>:
c0028205:	55                   	push   ebp
c0028206:	89 e5                	mov    ebp,esp
c0028208:	57                   	push   edi
c0028209:	56                   	push   esi
c002820a:	53                   	push   ebx
c002820b:	83 ec 0c             	sub    esp,0xc
c002820e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028211:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028214:	89 ca                	mov    edx,ecx
c0028216:	c1 ea 14             	shr    edx,0x14
c0028219:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002821f:	89 cb                	mov    ebx,ecx
c0028221:	c1 fb 1f             	sar    ebx,0x1f
c0028224:	31 da                	xor    edx,ebx
c0028226:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028229:	89 df                	mov    edi,ebx
c002822b:	c1 e7 0b             	shl    edi,0xb
c002822e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028231:	c1 e1 0b             	shl    ecx,0xb
c0028234:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002823a:	c1 eb 15             	shr    ebx,0x15
c002823d:	09 d9                	or     ecx,ebx
c002823f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028242:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028245:	89 ce                	mov    esi,ecx
c0028247:	c1 ee 14             	shr    esi,0x14
c002824a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028250:	89 cb                	mov    ebx,ecx
c0028252:	c1 fb 1f             	sar    ebx,0x1f
c0028255:	31 de                	xor    esi,ebx
c0028257:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002825a:	89 df                	mov    edi,ebx
c002825c:	c1 e7 0b             	shl    edi,0xb
c002825f:	c1 e1 0b             	shl    ecx,0xb
c0028262:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028268:	c1 eb 15             	shr    ebx,0x15
c002826b:	09 d9                	or     ecx,ebx
c002826d:	89 d3                	mov    ebx,edx
c002826f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028275:	43                   	inc    ebx
c0028276:	83 fb 01             	cmp    ebx,0x1
c0028279:	77 08                	ja     c0028283 <__cmpdf2+0x7e>
c002827b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002827e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028281:	75 68                	jne    c00282eb <__cmpdf2+0xe6>
c0028283:	89 f3                	mov    ebx,esi
c0028285:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002828b:	43                   	inc    ebx
c002828c:	83 fb 01             	cmp    ebx,0x1
c002828f:	77 06                	ja     c0028297 <__cmpdf2+0x92>
c0028291:	89 fb                	mov    ebx,edi
c0028293:	09 cb                	or     ebx,ecx
c0028295:	75 54                	jne    c00282eb <__cmpdf2+0xe6>
c0028297:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002829a:	09 f8                	or     eax,edi
c002829c:	09 c8                	or     eax,ecx
c002829e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00282a1:	75 12                	jne    c00282b5 <__cmpdf2+0xb0>
c00282a3:	8d 42 01             	lea    eax,[edx+0x1]
c00282a6:	83 f8 01             	cmp    eax,0x1
c00282a9:	77 0a                	ja     c00282b5 <__cmpdf2+0xb0>
c00282ab:	8d 5e 01             	lea    ebx,[esi+0x1]
c00282ae:	31 c0                	xor    eax,eax
c00282b0:	83 fb 01             	cmp    ebx,0x1
c00282b3:	76 36                	jbe    c00282eb <__cmpdf2+0xe6>
c00282b5:	b8 01 00 00 00       	mov    eax,0x1
c00282ba:	39 f2                	cmp    edx,esi
c00282bc:	7f 2d                	jg     c00282eb <__cmpdf2+0xe6>
c00282be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00282c3:	7c 26                	jl     c00282eb <__cmpdf2+0xe6>
c00282c5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00282c8:	77 07                	ja     c00282d1 <__cmpdf2+0xcc>
c00282ca:	72 16                	jb     c00282e2 <__cmpdf2+0xdd>
c00282cc:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00282cf:	76 0a                	jbe    c00282db <__cmpdf2+0xd6>
c00282d1:	89 d0                	mov    eax,edx
c00282d3:	c1 f8 1f             	sar    eax,0x1f
c00282d6:	83 c8 01             	or     eax,0x1
c00282d9:	eb 10                	jmp    c00282eb <__cmpdf2+0xe6>
c00282db:	b8 00 00 00 00       	mov    eax,0x0
c00282e0:	73 09                	jae    c00282eb <__cmpdf2+0xe6>
c00282e2:	89 d0                	mov    eax,edx
c00282e4:	c1 f8 1f             	sar    eax,0x1f
c00282e7:	83 e0 02             	and    eax,0x2
c00282ea:	48                   	dec    eax
c00282eb:	83 c4 0c             	add    esp,0xc
c00282ee:	5b                   	pop    ebx
c00282ef:	5e                   	pop    esi
c00282f0:	5f                   	pop    edi
c00282f1:	5d                   	pop    ebp
c00282f2:	c3                   	ret    

c00282f3 <__eqdf2>:
c00282f3:	55                   	push   ebp
c00282f4:	89 e5                	mov    ebp,esp
c00282f6:	50                   	push   eax
c00282f7:	6a 01                	push   0x1
c00282f9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00282fc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00282ff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028302:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028305:	e8 fb fe ff ff       	call   c0028205 <__cmpdf2>
c002830a:	83 c4 18             	add    esp,0x18
c002830d:	c9                   	leave  
c002830e:	c3                   	ret    

c002830f <__nedf2>:
c002830f:	eb e2                	jmp    c00282f3 <__eqdf2>

c0028311 <__gtdf2>:
c0028311:	55                   	push   ebp
c0028312:	89 e5                	mov    ebp,esp
c0028314:	50                   	push   eax
c0028315:	6a ff                	push   0xffffffff
c0028317:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002831a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002831d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028320:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028323:	e8 dd fe ff ff       	call   c0028205 <__cmpdf2>
c0028328:	83 c4 18             	add    esp,0x18
c002832b:	c9                   	leave  
c002832c:	c3                   	ret    

c002832d <__gedf2>:
c002832d:	eb e2                	jmp    c0028311 <__gtdf2>

c002832f <__ltdf2>:
c002832f:	eb c2                	jmp    c00282f3 <__eqdf2>

c0028331 <__ledf2>:
c0028331:	eb c0                	jmp    c00282f3 <__eqdf2>

c0028333 <__truncdfsf2>:
c0028333:	55                   	push   ebp
c0028334:	89 e5                	mov    ebp,esp
c0028336:	57                   	push   edi
c0028337:	56                   	push   esi
c0028338:	53                   	push   ebx
c0028339:	83 ec 0c             	sub    esp,0xc
c002833c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002833f:	89 d1                	mov    ecx,edx
c0028341:	c1 f9 14             	sar    ecx,0x14
c0028344:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028347:	89 df                	mov    edi,ebx
c0028349:	c1 e7 0b             	shl    edi,0xb
c002834c:	89 d0                	mov    eax,edx
c002834e:	c1 e0 0b             	shl    eax,0xb
c0028351:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028356:	c1 eb 15             	shr    ebx,0x15
c0028359:	09 d8                	or     eax,ebx
c002835b:	89 cb                	mov    ebx,ecx
c002835d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028363:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028369:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002836f:	0f 86 9e 00 00 00    	jbe    c0028413 <__truncdfsf2+0xe0>
c0028375:	85 db                	test   ebx,ebx
c0028377:	75 0a                	jne    c0028383 <__truncdfsf2+0x50>
c0028379:	c1 fa 17             	sar    edx,0x17
c002837c:	30 d2                	xor    dl,dl
c002837e:	e9 84 00 00 00       	jmp    c0028407 <__truncdfsf2+0xd4>
c0028383:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028389:	83 fe 83             	cmp    esi,0xffffff83
c002838c:	7d 4b                	jge    c00283d9 <__truncdfsf2+0xa6>
c002838e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028393:	29 f1                	sub    ecx,esi
c0028395:	83 f9 1f             	cmp    ecx,0x1f
c0028398:	7f 6b                	jg     c0028405 <__truncdfsf2+0xd2>
c002839a:	0d 00 00 00 80       	or     eax,0x80000000
c002839f:	89 c3                	mov    ebx,eax
c00283a1:	d3 eb                	shr    ebx,cl
c00283a3:	be 01 00 00 00       	mov    esi,0x1
c00283a8:	d3 e6                	shl    esi,cl
c00283aa:	4e                   	dec    esi
c00283ab:	21 f0                	and    eax,esi
c00283ad:	09 f8                	or     eax,edi
c00283af:	0f 95 c0             	setne  al
c00283b2:	0f b6 c0             	movzx  eax,al
c00283b5:	09 c3                	or     ebx,eax
c00283b7:	89 d9                	mov    ecx,ebx
c00283b9:	c1 e9 08             	shr    ecx,0x8
c00283bc:	f6 c3 7f             	test   bl,0x7f
c00283bf:	0f 95 c0             	setne  al
c00283c2:	09 c8                	or     eax,ecx
c00283c4:	83 e0 01             	and    eax,0x1
c00283c7:	c1 eb 07             	shr    ebx,0x7
c00283ca:	21 c3                	and    ebx,eax
c00283cc:	81 e2 00 00 00 80    	and    edx,0x80000000
c00283d2:	09 d1                	or     ecx,edx
c00283d4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00283d7:	eb 76                	jmp    c002844f <__truncdfsf2+0x11c>
c00283d9:	83 c6 80             	add    esi,0xffffff80
c00283dc:	7e 1d                	jle    c00283fb <__truncdfsf2+0xc8>
c00283de:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00283e4:	75 0b                	jne    c00283f1 <__truncdfsf2+0xbe>
c00283e6:	09 f8                	or     eax,edi
c00283e8:	74 09                	je     c00283f3 <__truncdfsf2+0xc0>
c00283ea:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00283ef:	eb 02                	jmp    c00283f3 <__truncdfsf2+0xc0>
c00283f1:	31 c0                	xor    eax,eax
c00283f3:	c1 fa 17             	sar    edx,0x17
c00283f6:	80 ca ff             	or     dl,0xff
c00283f9:	eb 0e                	jmp    c0028409 <__truncdfsf2+0xd6>
c00283fb:	c1 fa 1f             	sar    edx,0x1f
c00283fe:	c1 e2 08             	shl    edx,0x8
c0028401:	09 ca                	or     edx,ecx
c0028403:	eb 04                	jmp    c0028409 <__truncdfsf2+0xd6>
c0028405:	31 d2                	xor    edx,edx
c0028407:	31 c0                	xor    eax,eax
c0028409:	c1 e2 17             	shl    edx,0x17
c002840c:	c1 e8 08             	shr    eax,0x8
c002840f:	09 d0                	or     eax,edx
c0028411:	eb 3c                	jmp    c002844f <__truncdfsf2+0x11c>
c0028413:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028419:	89 ca                	mov    edx,ecx
c002841b:	c1 fa 0b             	sar    edx,0xb
c002841e:	c1 e2 08             	shl    edx,0x8
c0028421:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028424:	31 db                	xor    ebx,ebx
c0028426:	85 ff                	test   edi,edi
c0028428:	0f 95 c3             	setne  bl
c002842b:	09 d8                	or     eax,ebx
c002842d:	89 c3                	mov    ebx,eax
c002842f:	c1 eb 08             	shr    ebx,0x8
c0028432:	a8 7f                	test   al,0x7f
c0028434:	0f 95 c2             	setne  dl
c0028437:	89 d6                	mov    esi,edx
c0028439:	09 de                	or     esi,ebx
c002843b:	83 e6 01             	and    esi,0x1
c002843e:	c1 e8 07             	shr    eax,0x7
c0028441:	21 f0                	and    eax,esi
c0028443:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028446:	09 ca                	or     edx,ecx
c0028448:	c1 e2 17             	shl    edx,0x17
c002844b:	09 da                	or     edx,ebx
c002844d:	01 d0                	add    eax,edx
c002844f:	83 c4 0c             	add    esp,0xc
c0028452:	5b                   	pop    ebx
c0028453:	5e                   	pop    esi
c0028454:	5f                   	pop    edi
c0028455:	5d                   	pop    ebp
c0028456:	c3                   	ret    

c0028457 <__extendsfdf2>:
c0028457:	55                   	push   ebp
c0028458:	89 e5                	mov    ebp,esp
c002845a:	57                   	push   edi
c002845b:	56                   	push   esi
c002845c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002845f:	89 d1                	mov    ecx,edx
c0028461:	c1 f9 17             	sar    ecx,0x17
c0028464:	c1 e2 08             	shl    edx,0x8
c0028467:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002846d:	89 c8                	mov    eax,ecx
c002846f:	80 e4 f8             	and    ah,0xf8
c0028472:	8d 71 01             	lea    esi,[ecx+0x1]
c0028475:	81 e6 fe 00 00 00    	and    esi,0xfe
c002847b:	75 27                	jne    c00284a4 <__extendsfdf2+0x4d>
c002847d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028483:	75 18                	jne    c002849d <__extendsfdf2+0x46>
c0028485:	85 d2                	test   edx,edx
c0028487:	74 20                	je     c00284a9 <__extendsfdf2+0x52>
c0028489:	41                   	inc    ecx
c002848a:	01 d2                	add    edx,edx
c002848c:	79 fb                	jns    c0028489 <__extendsfdf2+0x32>
c002848e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028494:	29 c8                	sub    eax,ecx
c0028496:	05 81 03 00 00       	add    eax,0x381
c002849b:	eb 0c                	jmp    c00284a9 <__extendsfdf2+0x52>
c002849d:	05 00 07 00 00       	add    eax,0x700
c00284a2:	eb 05                	jmp    c00284a9 <__extendsfdf2+0x52>
c00284a4:	05 80 03 00 00       	add    eax,0x380
c00284a9:	c1 e0 14             	shl    eax,0x14
c00284ac:	89 c1                	mov    ecx,eax
c00284ae:	89 d0                	mov    eax,edx
c00284b0:	c1 e8 0b             	shr    eax,0xb
c00284b3:	09 c1                	or     ecx,eax
c00284b5:	c1 e2 15             	shl    edx,0x15
c00284b8:	89 d0                	mov    eax,edx
c00284ba:	89 ca                	mov    edx,ecx
c00284bc:	5e                   	pop    esi
c00284bd:	5f                   	pop    edi
c00284be:	5d                   	pop    ebp
c00284bf:	c3                   	ret    

c00284c0 <fabs>:
c00284c0:	83 ec 0c             	sub    esp,0xc
c00284c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00284ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00284ce:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00284d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00284d7:	dd 04 24             	fld    QWORD PTR [esp]
c00284da:	83 c4 0c             	add    esp,0xc
c00284dd:	c3                   	ret    
c00284de:	66 90                	xchg   ax,ax

c00284e0 <lrint>:
c00284e0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00284e4:	83 ec 04             	sub    esp,0x4
c00284e7:	db 1c 24             	fistp  DWORD PTR [esp]
c00284ea:	58                   	pop    eax
c00284eb:	c3                   	ret    

c00284ec <lrintf>:
c00284ec:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00284f0:	83 ec 04             	sub    esp,0x4
c00284f3:	db 1c 24             	fistp  DWORD PTR [esp]
c00284f6:	58                   	pop    eax
c00284f7:	c3                   	ret    

Disassembly of section .init:

c00284f8 <_init>:
c00284f8:	55                   	push   ebp
c00284f9:	89 e5                	mov    ebp,esp
c00284fb:	e8 18 7c fd ff       	call   c0000118 <frame_dummy>
c0028500:	e8 63 e0 ff ff       	call   c0026568 <__do_global_ctors_aux>
c0028505:	5d                   	pop    ebp
c0028506:	c3                   	ret    

Disassembly of section .fini:

c0028507 <_fini>:
c0028507:	55                   	push   ebp
c0028508:	89 e5                	mov    ebp,esp
c002850a:	e8 99 7b fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002850f:	5d                   	pop    ebp
c0028510:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028512 <Computer::~Computer()>:
c0028512:	83 ec 0c             	sub    esp,0xc
c0028515:	ba 48 a0 02 c0       	mov    edx,0xc002a048
c002851a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002851e:	89 10                	mov    DWORD PTR [eax],edx
c0028520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028524:	83 ec 0c             	sub    esp,0xc
c0028527:	50                   	push   eax
c0028528:	e8 43 bb fe ff       	call   c0014070 <Device::~Device()>
c002852d:	83 c4 10             	add    esp,0x10
c0028530:	90                   	nop
c0028531:	83 c4 0c             	add    esp,0xc
c0028534:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028536 <Computer::~Computer()>:
c0028536:	83 ec 0c             	sub    esp,0xc
c0028539:	83 ec 0c             	sub    esp,0xc
c002853c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028540:	e8 cd ff ff ff       	call   c0028512 <Computer::~Computer()>
c0028545:	83 c4 10             	add    esp,0x10
c0028548:	83 ec 08             	sub    esp,0x8
c002854b:	68 ec 01 00 00       	push   0x1ec
c0028550:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028554:	e8 3f a7 fe ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0028559:	83 c4 10             	add    esp,0x10
c002855c:	83 c4 0c             	add    esp,0xc
c002855f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028560 <idleCommon()>:
c0028560:	83 ec 0c             	sub    esp,0xc
c0028563:	e8 e5 56 ff ff       	call   c001dc4d <lockScheduler()>
c0028568:	e8 1b 5a ff ff       	call   c001df88 <schedule()>
c002856d:	83 c4 0c             	add    esp,0xc
c0028570:	e9 da 56 ff ff       	jmp    c001dc4f <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028576 <LinkedList<UnixFile>::~LinkedList()>:
c0028576:	90                   	nop
c0028577:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028578 <LinkedList<UnixFile>::LinkedList()>:
c0028578:	83 ec 0c             	sub    esp,0xc
c002857b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002857f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028589:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028594:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002859b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002859f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00285a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00285bb:	83 ec 0c             	sub    esp,0xc
c00285be:	68 06 a3 02 c0       	push   0xc002a306
c00285c3:	e8 b0 a7 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00285c8:	83 c4 10             	add    esp,0x10
c00285cb:	90                   	nop
c00285cc:	83 c4 0c             	add    esp,0xc
c00285cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00285d0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00285d0:	83 ec 0c             	sub    esp,0xc
c00285d3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00285d8:	75 10                	jne    c00285ea <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00285da:	83 ec 0c             	sub    esp,0xc
c00285dd:	68 20 a3 02 c0       	push   0xc002a320
c00285e2:	e8 6c 1e ff ff       	call   c001a453 <Krnl::panic(char const*)>
c00285e7:	83 c4 10             	add    esp,0x10
c00285ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00285f0:	85 c0                	test   eax,eax
c00285f2:	74 34                	je     c0028628 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00285f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285fb:	85 c0                	test   eax,eax
c00285fd:	74 29                	je     c0028628 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00285ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028603:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028606:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002860a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002860d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028611:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028615:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002861c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002861f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028626:	eb 65                	jmp    c002868d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002862c:	8b 00                	mov    eax,DWORD PTR [eax]
c002862e:	85 c0                	test   eax,eax
c0028630:	75 4b                	jne    c002867d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028636:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028639:	85 c0                	test   eax,eax
c002863b:	75 40                	jne    c002867d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002863d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028641:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028645:	89 10                	mov    DWORD PTR [eax],edx
c0028647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002864b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002864f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028656:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028659:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028664:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028667:	85 c0                	test   eax,eax
c0028669:	74 22                	je     c002868d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002866b:	83 ec 0c             	sub    esp,0xc
c002866e:	68 42 a3 02 c0       	push   0xc002a342
c0028673:	e8 db 1d ff ff       	call   c001a453 <Krnl::panic(char const*)>
c0028678:	83 c4 10             	add    esp,0x10
c002867b:	eb 10                	jmp    c002868d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002867d:	83 ec 0c             	sub    esp,0xc
c0028680:	68 4c a3 02 c0       	push   0xc002a34c
c0028685:	e8 c9 1d ff ff       	call   c001a453 <Krnl::panic(char const*)>
c002868a:	83 c4 10             	add    esp,0x10
c002868d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028691:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028694:	8d 50 01             	lea    edx,[eax+0x1]
c0028697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002869b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002869e:	90                   	nop
c002869f:	83 c4 0c             	add    esp,0xc
c00286a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00286a4 <LinkedList<UnixFile>::getFirstElement()>:
c00286a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00286aa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00286ac <LinkedList<UnixFile>::removeFirst()>:
c00286ac:	83 ec 0c             	sub    esp,0xc
c00286af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00286b5:	85 c0                	test   eax,eax
c00286b7:	75 12                	jne    c00286cb <LinkedList<UnixFile>::removeFirst()+0x1f>
c00286b9:	83 ec 0c             	sub    esp,0xc
c00286bc:	68 58 a3 02 c0       	push   0xc002a358
c00286c1:	e8 8d 1d ff ff       	call   c001a453 <Krnl::panic(char const*)>
c00286c6:	83 c4 10             	add    esp,0x10
c00286c9:	eb 7e                	jmp    c0028749 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00286cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286d5:	85 c0                	test   eax,eax
c00286d7:	74 10                	je     c00286e9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00286d9:	83 ec 0c             	sub    esp,0xc
c00286dc:	68 a3 a3 02 c0       	push   0xc002a3a3
c00286e1:	e8 6d 1d ff ff       	call   c001a453 <Krnl::panic(char const*)>
c00286e6:	83 c4 10             	add    esp,0x10
c00286e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00286ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286f2:	85 c0                	test   eax,eax
c00286f4:	75 33                	jne    c0028729 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00286f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028704:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002870b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002870f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028712:	83 f8 01             	cmp    eax,0x1
c0028715:	74 21                	je     c0028738 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028717:	83 ec 0c             	sub    esp,0xc
c002871a:	68 7c a3 02 c0       	push   0xc002a37c
c002871f:	e8 2f 1d ff ff       	call   c001a453 <Krnl::panic(char const*)>
c0028724:	83 c4 10             	add    esp,0x10
c0028727:	eb 0f                	jmp    c0028738 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872d:	8b 00                	mov    eax,DWORD PTR [eax]
c002872f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028736:	89 10                	mov    DWORD PTR [eax],edx
c0028738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002873c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002873f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028746:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028749:	83 c4 0c             	add    esp,0xc
c002874c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002874e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002874e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028752:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028755:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028756 <DriverlessDevice::~DriverlessDevice()>:
c0028756:	ba 84 aa 02 c0       	mov    edx,0xc002aa84
c002875b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002875f:	89 10                	mov    DWORD PTR [eax],edx
c0028761:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028765:	50                   	push   eax
c0028766:	e8 05 b9 fe ff       	call   c0014070 <Device::~Device()>
c002876b:	83 c4 04             	add    esp,0x4
c002876e:	90                   	nop
c002876f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028770 <DriverlessDevice::~DriverlessDevice()>:
c0028770:	83 ec 0c             	sub    esp,0xc
c0028773:	83 ec 0c             	sub    esp,0xc
c0028776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002877a:	e8 d7 ff ff ff       	call   c0028756 <DriverlessDevice::~DriverlessDevice()>
c002877f:	83 c4 10             	add    esp,0x10
c0028782:	83 ec 08             	sub    esp,0x8
c0028785:	68 58 01 00 00       	push   0x158
c002878a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002878e:	e8 05 a5 fe ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0028793:	83 c4 10             	add    esp,0x10
c0028796:	83 c4 0c             	add    esp,0xc
c0028799:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002879a <LinkedList<Device>::addElement(Device*)>:
c002879a:	83 ec 0c             	sub    esp,0xc
c002879d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00287a2:	75 10                	jne    c00287b4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00287a4:	83 ec 0c             	sub    esp,0xc
c00287a7:	68 20 a3 02 c0       	push   0xc002a320
c00287ac:	e8 a2 1c ff ff       	call   c001a453 <Krnl::panic(char const*)>
c00287b1:	83 c4 10             	add    esp,0x10
c00287b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00287ba:	85 c0                	test   eax,eax
c00287bc:	74 3a                	je     c00287f8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00287be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287c5:	85 c0                	test   eax,eax
c00287c7:	74 2f                	je     c00287f8 <LinkedList<Device>::addElement(Device*)+0x5e>
c00287c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287cd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287d4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00287da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287e2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287ec:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00287f6:	eb 68                	jmp    c0028860 <LinkedList<Device>::addElement(Device*)+0xc6>
c00287f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00287fe:	85 c0                	test   eax,eax
c0028800:	75 4e                	jne    c0028850 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028806:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028809:	85 c0                	test   eax,eax
c002880b:	75 43                	jne    c0028850 <LinkedList<Device>::addElement(Device*)+0xb6>
c002880d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028811:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028815:	89 10                	mov    DWORD PTR [eax],edx
c0028817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002881f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028826:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028829:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028837:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002883a:	85 c0                	test   eax,eax
c002883c:	74 22                	je     c0028860 <LinkedList<Device>::addElement(Device*)+0xc6>
c002883e:	83 ec 0c             	sub    esp,0xc
c0028841:	68 42 a3 02 c0       	push   0xc002a342
c0028846:	e8 08 1c ff ff       	call   c001a453 <Krnl::panic(char const*)>
c002884b:	83 c4 10             	add    esp,0x10
c002884e:	eb 10                	jmp    c0028860 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028850:	83 ec 0c             	sub    esp,0xc
c0028853:	68 4c a3 02 c0       	push   0xc002a34c
c0028858:	e8 f6 1b ff ff       	call   c001a453 <Krnl::panic(char const*)>
c002885d:	83 c4 10             	add    esp,0x10
c0028860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028864:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028867:	8d 50 01             	lea    edx,[eax+0x1]
c002886a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028871:	90                   	nop
c0028872:	83 c4 0c             	add    esp,0xc
c0028875:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028876 <LinkedList<Device>::LinkedList()>:
c0028876:	83 ec 0c             	sub    esp,0xc
c0028879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028887:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002888e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028892:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00288b9:	83 ec 0c             	sub    esp,0xc
c00288bc:	68 06 a3 02 c0       	push   0xc002a306
c00288c1:	e8 b2 a4 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c00288c6:	83 c4 10             	add    esp,0x10
c00288c9:	90                   	nop
c00288ca:	83 c4 0c             	add    esp,0xc
c00288cd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00288ce <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00288ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00288d4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00288d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00288d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288da:	8b 00                	mov    eax,DWORD PTR [eax]
c00288dc:	85 c0                	test   eax,eax
c00288de:	75 0e                	jne    c00288ee <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00288e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288e7:	85 c0                	test   eax,eax
c00288e9:	75 03                	jne    c00288ee <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00288eb:	b0 01                	mov    al,0x1
c00288ed:	c3                   	ret    
c00288ee:	b0 00                	mov    al,0x0
c00288f0:	90                   	nop
c00288f1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00288f2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00288f2:	83 ec 0c             	sub    esp,0xc
c00288f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00288fb:	85 c0                	test   eax,eax
c00288fd:	75 15                	jne    c0028914 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00288ff:	83 ec 0c             	sub    esp,0xc
c0028902:	68 58 a3 02 c0       	push   0xc002a358
c0028907:	e8 47 1b ff ff       	call   c001a453 <Krnl::panic(char const*)>
c002890c:	83 c4 10             	add    esp,0x10
c002890f:	e9 88 00 00 00       	jmp    c002899c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028918:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002891b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002891e:	85 c0                	test   eax,eax
c0028920:	0f 95 c0             	setne  al
c0028923:	84 c0                	test   al,al
c0028925:	74 10                	je     c0028937 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028927:	83 ec 0c             	sub    esp,0xc
c002892a:	68 a3 a3 02 c0       	push   0xc002a3a3
c002892f:	e8 1f 1b ff ff       	call   c001a453 <Krnl::panic(char const*)>
c0028934:	83 c4 10             	add    esp,0x10
c0028937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002893b:	8b 00                	mov    eax,DWORD PTR [eax]
c002893d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028940:	85 c0                	test   eax,eax
c0028942:	0f 94 c0             	sete   al
c0028945:	84 c0                	test   al,al
c0028947:	74 33                	je     c002897c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028957:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002895e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028962:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028965:	83 f8 01             	cmp    eax,0x1
c0028968:	74 21                	je     c002898b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002896a:	83 ec 0c             	sub    esp,0xc
c002896d:	68 7c a3 02 c0       	push   0xc002a37c
c0028972:	e8 dc 1a ff ff       	call   c001a453 <Krnl::panic(char const*)>
c0028977:	83 c4 10             	add    esp,0x10
c002897a:	eb 0f                	jmp    c002898b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002897c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028980:	8b 00                	mov    eax,DWORD PTR [eax]
c0028982:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028989:	89 10                	mov    DWORD PTR [eax],edx
c002898b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002898f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028992:	8d 50 ff             	lea    edx,[eax-0x1]
c0028995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028999:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002899c:	83 c4 0c             	add    esp,0xc
c002899f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00289a0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00289a0:	83 ec 0c             	sub    esp,0xc
c00289a3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00289a8:	75 10                	jne    c00289ba <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00289aa:	83 ec 0c             	sub    esp,0xc
c00289ad:	68 20 a3 02 c0       	push   0xc002a320
c00289b2:	e8 9c 1a ff ff       	call   c001a453 <Krnl::panic(char const*)>
c00289b7:	83 c4 10             	add    esp,0x10
c00289ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289be:	8b 00                	mov    eax,DWORD PTR [eax]
c00289c0:	85 c0                	test   eax,eax
c00289c2:	74 34                	je     c00289f8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00289c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289cb:	85 c0                	test   eax,eax
c00289cd:	74 29                	je     c00289f8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00289cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289da:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00289dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289e5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00289e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289ef:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00289f6:	eb 65                	jmp    c0028a5d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00289f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00289fe:	85 c0                	test   eax,eax
c0028a00:	75 4b                	jne    c0028a4d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a09:	85 c0                	test   eax,eax
c0028a0b:	75 40                	jne    c0028a4d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028a0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a15:	89 10                	mov    DWORD PTR [eax],edx
c0028a17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a1f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a29:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a37:	85 c0                	test   eax,eax
c0028a39:	74 22                	je     c0028a5d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028a3b:	83 ec 0c             	sub    esp,0xc
c0028a3e:	68 42 a3 02 c0       	push   0xc002a342
c0028a43:	e8 0b 1a ff ff       	call   c001a453 <Krnl::panic(char const*)>
c0028a48:	83 c4 10             	add    esp,0x10
c0028a4b:	eb 10                	jmp    c0028a5d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028a4d:	83 ec 0c             	sub    esp,0xc
c0028a50:	68 4c a3 02 c0       	push   0xc002a34c
c0028a55:	e8 f9 19 ff ff       	call   c001a453 <Krnl::panic(char const*)>
c0028a5a:	83 c4 10             	add    esp,0x10
c0028a5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a61:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a64:	8d 50 01             	lea    edx,[eax+0x1]
c0028a67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a6b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a6e:	90                   	nop
c0028a6f:	83 c4 0c             	add    esp,0xc
c0028a72:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028a74 <ACPI::~ACPI()>:
c0028a74:	83 ec 0c             	sub    esp,0xc
c0028a77:	ba ec b3 02 c0       	mov    edx,0xc002b3ec
c0028a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a80:	89 10                	mov    DWORD PTR [eax],edx
c0028a82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a86:	83 ec 0c             	sub    esp,0xc
c0028a89:	50                   	push   eax
c0028a8a:	e8 e1 b5 fe ff       	call   c0014070 <Device::~Device()>
c0028a8f:	83 c4 10             	add    esp,0x10
c0028a92:	90                   	nop
c0028a93:	83 c4 0c             	add    esp,0xc
c0028a96:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028a98 <ACPI::~ACPI()>:
c0028a98:	83 ec 0c             	sub    esp,0xc
c0028a9b:	83 ec 0c             	sub    esp,0xc
c0028a9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028aa2:	e8 cd ff ff ff       	call   c0028a74 <ACPI::~ACPI()>
c0028aa7:	83 c4 10             	add    esp,0x10
c0028aaa:	83 ec 08             	sub    esp,0x8
c0028aad:	68 68 12 00 00       	push   0x1268
c0028ab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ab6:	e8 dd a1 fe ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0028abb:	83 c4 10             	add    esp,0x10
c0028abe:	83 c4 0c             	add    esp,0xc
c0028ac1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028ac2 <CPU::~CPU()>:
c0028ac2:	83 ec 0c             	sub    esp,0xc
c0028ac5:	ba dc b7 02 c0       	mov    edx,0xc002b7dc
c0028aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ace:	89 10                	mov    DWORD PTR [eax],edx
c0028ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad4:	83 ec 0c             	sub    esp,0xc
c0028ad7:	50                   	push   eax
c0028ad8:	e8 93 b5 fe ff       	call   c0014070 <Device::~Device()>
c0028add:	83 c4 10             	add    esp,0x10
c0028ae0:	90                   	nop
c0028ae1:	83 c4 0c             	add    esp,0xc
c0028ae4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028ae6 <CPU::~CPU()>:
c0028ae6:	83 ec 0c             	sub    esp,0xc
c0028ae9:	83 ec 0c             	sub    esp,0xc
c0028aec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028af0:	e8 cd ff ff ff       	call   c0028ac2 <CPU::~CPU()>
c0028af5:	83 c4 10             	add    esp,0x10
c0028af8:	83 ec 08             	sub    esp,0x8
c0028afb:	68 98 11 00 00       	push   0x1198
c0028b00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b04:	e8 8f a1 fe ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0028b09:	83 c4 10             	add    esp,0x10
c0028b0c:	83 c4 0c             	add    esp,0xc
c0028b0f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028b10 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028b10:	90                   	nop
c0028b11:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028b12 <ThreadControlBlock::ThreadControlBlock()>:
c0028b12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b16:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b21:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028b28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b2c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028b33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b37:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028b3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b42:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028b46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b4a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028b4e:	90                   	nop
c0028b4f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028b50 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028b50:	83 ec 0c             	sub    esp,0xc
c0028b53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b57:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b61:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b6c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b77:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b8c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b93:	83 ec 0c             	sub    esp,0xc
c0028b96:	68 06 a3 02 c0       	push   0xc002a306
c0028b9b:	e8 d8 a1 fe ff       	call   c0012d78 <Dbg::kprintf(char const*, ...)>
c0028ba0:	83 c4 10             	add    esp,0x10
c0028ba3:	90                   	nop
c0028ba4:	83 c4 0c             	add    esp,0xc
c0028ba7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028ba8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028ba8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028bac:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028baf:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028bb0 <Vm::_FPUState::_FPUState()>:
c0028bb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bb4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028bbb:	90                   	nop
c0028bbc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028bbe <PCI::~PCI()>:
c0028bbe:	83 ec 0c             	sub    esp,0xc
c0028bc1:	ba 68 c8 02 c0       	mov    edx,0xc002c868
c0028bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bca:	89 10                	mov    DWORD PTR [eax],edx
c0028bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd0:	83 ec 0c             	sub    esp,0xc
c0028bd3:	50                   	push   eax
c0028bd4:	e8 6f ae fe ff       	call   c0013a48 <Bus::~Bus()>
c0028bd9:	83 c4 10             	add    esp,0x10
c0028bdc:	90                   	nop
c0028bdd:	83 c4 0c             	add    esp,0xc
c0028be0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028be2 <PCI::~PCI()>:
c0028be2:	83 ec 0c             	sub    esp,0xc
c0028be5:	83 ec 0c             	sub    esp,0xc
c0028be8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bec:	e8 cd ff ff ff       	call   c0028bbe <PCI::~PCI()>
c0028bf1:	83 c4 10             	add    esp,0x10
c0028bf4:	83 ec 08             	sub    esp,0x8
c0028bf7:	68 58 01 00 00       	push   0x158
c0028bfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c00:	e8 93 a0 fe ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0028c05:	83 c4 10             	add    esp,0x10
c0028c08:	83 c4 0c             	add    esp,0xc
c0028c0b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028c0c <IDE::~IDE()>:
c0028c0c:	83 ec 0c             	sub    esp,0xc
c0028c0f:	ba cc ca 02 c0       	mov    edx,0xc002cacc
c0028c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c18:	89 10                	mov    DWORD PTR [eax],edx
c0028c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c1e:	83 ec 0c             	sub    esp,0xc
c0028c21:	50                   	push   eax
c0028c22:	e8 39 b9 fe ff       	call   c0014560 <HardDiskController::~HardDiskController()>
c0028c27:	83 c4 10             	add    esp,0x10
c0028c2a:	90                   	nop
c0028c2b:	83 c4 0c             	add    esp,0xc
c0028c2e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028c30 <IDE::~IDE()>:
c0028c30:	83 ec 0c             	sub    esp,0xc
c0028c33:	83 ec 0c             	sub    esp,0xc
c0028c36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c3a:	e8 cd ff ff ff       	call   c0028c0c <IDE::~IDE()>
c0028c3f:	83 c4 10             	add    esp,0x10
c0028c42:	83 ec 08             	sub    esp,0x8
c0028c45:	68 70 02 00 00       	push   0x270
c0028c4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c4e:	e8 45 a0 fe ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0028c53:	83 c4 10             	add    esp,0x10
c0028c56:	83 c4 0c             	add    esp,0xc
c0028c59:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028c5a <SATABus::~SATABus()>:
c0028c5a:	83 ec 0c             	sub    esp,0xc
c0028c5d:	ba ac cb 02 c0       	mov    edx,0xc002cbac
c0028c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c66:	89 10                	mov    DWORD PTR [eax],edx
c0028c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c6c:	83 ec 0c             	sub    esp,0xc
c0028c6f:	50                   	push   eax
c0028c70:	e8 eb b8 fe ff       	call   c0014560 <HardDiskController::~HardDiskController()>
c0028c75:	83 c4 10             	add    esp,0x10
c0028c78:	90                   	nop
c0028c79:	83 c4 0c             	add    esp,0xc
c0028c7c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028c7e <SATABus::~SATABus()>:
c0028c7e:	83 ec 0c             	sub    esp,0xc
c0028c81:	83 ec 0c             	sub    esp,0xc
c0028c84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c88:	e8 cd ff ff ff       	call   c0028c5a <SATABus::~SATABus()>
c0028c8d:	83 c4 10             	add    esp,0x10
c0028c90:	83 ec 08             	sub    esp,0x8
c0028c93:	68 64 01 00 00       	push   0x164
c0028c98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c9c:	e8 f7 9f fe ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0028ca1:	83 c4 10             	add    esp,0x10
c0028ca4:	83 c4 0c             	add    esp,0xc
c0028ca7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028ca8 <ATA::~ATA()>:
c0028ca8:	83 ec 0c             	sub    esp,0xc
c0028cab:	ba f8 cb 02 c0       	mov    edx,0xc002cbf8
c0028cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb4:	89 10                	mov    DWORD PTR [eax],edx
c0028cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cba:	83 ec 0c             	sub    esp,0xc
c0028cbd:	50                   	push   eax
c0028cbe:	e8 8f b9 fe ff       	call   c0014652 <PhysicalDisk::~PhysicalDisk()>
c0028cc3:	83 c4 10             	add    esp,0x10
c0028cc6:	90                   	nop
c0028cc7:	83 c4 0c             	add    esp,0xc
c0028cca:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028ccc <ATA::~ATA()>:
c0028ccc:	83 ec 0c             	sub    esp,0xc
c0028ccf:	83 ec 0c             	sub    esp,0xc
c0028cd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cd6:	e8 cd ff ff ff       	call   c0028ca8 <ATA::~ATA()>
c0028cdb:	83 c4 10             	add    esp,0x10
c0028cde:	83 ec 08             	sub    esp,0x8
c0028ce1:	68 7c 01 00 00       	push   0x17c
c0028ce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cea:	e8 a9 9f fe ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0028cef:	83 c4 10             	add    esp,0x10
c0028cf2:	83 c4 0c             	add    esp,0xc
c0028cf5:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028cf6 <ATAPI::~ATAPI()>:
c0028cf6:	83 ec 0c             	sub    esp,0xc
c0028cf9:	ba 30 cc 02 c0       	mov    edx,0xc002cc30
c0028cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d02:	89 10                	mov    DWORD PTR [eax],edx
c0028d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d08:	83 ec 0c             	sub    esp,0xc
c0028d0b:	50                   	push   eax
c0028d0c:	e8 41 b9 fe ff       	call   c0014652 <PhysicalDisk::~PhysicalDisk()>
c0028d11:	83 c4 10             	add    esp,0x10
c0028d14:	90                   	nop
c0028d15:	83 c4 0c             	add    esp,0xc
c0028d18:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028d1a <ATAPI::~ATAPI()>:
c0028d1a:	83 ec 0c             	sub    esp,0xc
c0028d1d:	83 ec 0c             	sub    esp,0xc
c0028d20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d24:	e8 cd ff ff ff       	call   c0028cf6 <ATAPI::~ATAPI()>
c0028d29:	83 c4 10             	add    esp,0x10
c0028d2c:	83 ec 08             	sub    esp,0x8
c0028d2f:	68 80 01 00 00       	push   0x180
c0028d34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d38:	e8 5b 9f fe ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0028d3d:	83 c4 10             	add    esp,0x10
c0028d40:	83 c4 0c             	add    esp,0xc
c0028d43:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028d44 <SATA::~SATA()>:
c0028d44:	83 ec 0c             	sub    esp,0xc
c0028d47:	ba e4 cc 02 c0       	mov    edx,0xc002cce4
c0028d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d50:	89 10                	mov    DWORD PTR [eax],edx
c0028d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d56:	83 ec 0c             	sub    esp,0xc
c0028d59:	50                   	push   eax
c0028d5a:	e8 f3 b8 fe ff       	call   c0014652 <PhysicalDisk::~PhysicalDisk()>
c0028d5f:	83 c4 10             	add    esp,0x10
c0028d62:	90                   	nop
c0028d63:	83 c4 0c             	add    esp,0xc
c0028d66:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028d68 <SATA::~SATA()>:
c0028d68:	83 ec 0c             	sub    esp,0xc
c0028d6b:	83 ec 0c             	sub    esp,0xc
c0028d6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d72:	e8 cd ff ff ff       	call   c0028d44 <SATA::~SATA()>
c0028d77:	83 c4 10             	add    esp,0x10
c0028d7a:	83 ec 08             	sub    esp,0x8
c0028d7d:	68 7c 01 00 00       	push   0x17c
c0028d82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d86:	e8 0d 9f fe ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0028d8b:	83 c4 10             	add    esp,0x10
c0028d8e:	83 c4 0c             	add    esp,0xc
c0028d91:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028d92 <SATAPI::~SATAPI()>:
c0028d92:	83 ec 0c             	sub    esp,0xc
c0028d95:	ba c0 cd 02 c0       	mov    edx,0xc002cdc0
c0028d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d9e:	89 10                	mov    DWORD PTR [eax],edx
c0028da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da4:	83 ec 0c             	sub    esp,0xc
c0028da7:	50                   	push   eax
c0028da8:	e8 a5 b8 fe ff       	call   c0014652 <PhysicalDisk::~PhysicalDisk()>
c0028dad:	83 c4 10             	add    esp,0x10
c0028db0:	90                   	nop
c0028db1:	83 c4 0c             	add    esp,0xc
c0028db4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028db6 <SATAPI::~SATAPI()>:
c0028db6:	83 ec 0c             	sub    esp,0xc
c0028db9:	83 ec 0c             	sub    esp,0xc
c0028dbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dc0:	e8 cd ff ff ff       	call   c0028d92 <SATAPI::~SATAPI()>
c0028dc5:	83 c4 10             	add    esp,0x10
c0028dc8:	83 ec 08             	sub    esp,0x8
c0028dcb:	68 80 01 00 00       	push   0x180
c0028dd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dd4:	e8 bf 9e fe ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0028dd9:	83 c4 10             	add    esp,0x10
c0028ddc:	83 c4 0c             	add    esp,0xc
c0028ddf:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028de0 <AVX::~AVX()>:
c0028de0:	83 ec 0c             	sub    esp,0xc
c0028de3:	ba 00 ce 02 c0       	mov    edx,0xc002ce00
c0028de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dec:	89 10                	mov    DWORD PTR [eax],edx
c0028dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df2:	83 ec 0c             	sub    esp,0xc
c0028df5:	50                   	push   eax
c0028df6:	e8 db b8 fe ff       	call   c00146d6 <FPU::~FPU()>
c0028dfb:	83 c4 10             	add    esp,0x10
c0028dfe:	90                   	nop
c0028dff:	83 c4 0c             	add    esp,0xc
c0028e02:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028e04 <AVX::~AVX()>:
c0028e04:	83 ec 0c             	sub    esp,0xc
c0028e07:	83 ec 0c             	sub    esp,0xc
c0028e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e0e:	e8 cd ff ff ff       	call   c0028de0 <AVX::~AVX()>
c0028e13:	83 c4 10             	add    esp,0x10
c0028e16:	83 ec 08             	sub    esp,0x8
c0028e19:	68 58 01 00 00       	push   0x158
c0028e1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e22:	e8 71 9e fe ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0028e27:	83 c4 10             	add    esp,0x10
c0028e2a:	83 c4 0c             	add    esp,0xc
c0028e2d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028e2e <MMX::~MMX()>:
c0028e2e:	83 ec 0c             	sub    esp,0xc
c0028e31:	ba 40 ce 02 c0       	mov    edx,0xc002ce40
c0028e36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e3a:	89 10                	mov    DWORD PTR [eax],edx
c0028e3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e40:	83 ec 0c             	sub    esp,0xc
c0028e43:	50                   	push   eax
c0028e44:	e8 8d b8 fe ff       	call   c00146d6 <FPU::~FPU()>
c0028e49:	83 c4 10             	add    esp,0x10
c0028e4c:	90                   	nop
c0028e4d:	83 c4 0c             	add    esp,0xc
c0028e50:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028e52 <MMX::~MMX()>:
c0028e52:	83 ec 0c             	sub    esp,0xc
c0028e55:	83 ec 0c             	sub    esp,0xc
c0028e58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e5c:	e8 cd ff ff ff       	call   c0028e2e <MMX::~MMX()>
c0028e61:	83 c4 10             	add    esp,0x10
c0028e64:	83 ec 08             	sub    esp,0x8
c0028e67:	68 58 01 00 00       	push   0x158
c0028e6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e70:	e8 23 9e fe ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0028e75:	83 c4 10             	add    esp,0x10
c0028e78:	83 c4 0c             	add    esp,0xc
c0028e7b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028e7c <SSE::~SSE()>:
c0028e7c:	83 ec 0c             	sub    esp,0xc
c0028e7f:	ba 80 ce 02 c0       	mov    edx,0xc002ce80
c0028e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e88:	89 10                	mov    DWORD PTR [eax],edx
c0028e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e8e:	83 ec 0c             	sub    esp,0xc
c0028e91:	50                   	push   eax
c0028e92:	e8 3f b8 fe ff       	call   c00146d6 <FPU::~FPU()>
c0028e97:	83 c4 10             	add    esp,0x10
c0028e9a:	90                   	nop
c0028e9b:	83 c4 0c             	add    esp,0xc
c0028e9e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028ea0 <SSE::~SSE()>:
c0028ea0:	83 ec 0c             	sub    esp,0xc
c0028ea3:	83 ec 0c             	sub    esp,0xc
c0028ea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eaa:	e8 cd ff ff ff       	call   c0028e7c <SSE::~SSE()>
c0028eaf:	83 c4 10             	add    esp,0x10
c0028eb2:	83 ec 08             	sub    esp,0x8
c0028eb5:	68 58 01 00 00       	push   0x158
c0028eba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ebe:	e8 d5 9d fe ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0028ec3:	83 c4 10             	add    esp,0x10
c0028ec6:	83 c4 0c             	add    esp,0xc
c0028ec9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028eca <x87::~x87()>:
c0028eca:	83 ec 0c             	sub    esp,0xc
c0028ecd:	ba c0 ce 02 c0       	mov    edx,0xc002cec0
c0028ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ed6:	89 10                	mov    DWORD PTR [eax],edx
c0028ed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028edc:	83 ec 0c             	sub    esp,0xc
c0028edf:	50                   	push   eax
c0028ee0:	e8 f1 b7 fe ff       	call   c00146d6 <FPU::~FPU()>
c0028ee5:	83 c4 10             	add    esp,0x10
c0028ee8:	90                   	nop
c0028ee9:	83 c4 0c             	add    esp,0xc
c0028eec:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028eee <x87::~x87()>:
c0028eee:	83 ec 0c             	sub    esp,0xc
c0028ef1:	83 ec 0c             	sub    esp,0xc
c0028ef4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ef8:	e8 cd ff ff ff       	call   c0028eca <x87::~x87()>
c0028efd:	83 c4 10             	add    esp,0x10
c0028f00:	83 ec 08             	sub    esp,0x8
c0028f03:	68 58 01 00 00       	push   0x158
c0028f08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f0c:	e8 87 9d fe ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0028f11:	83 c4 10             	add    esp,0x10
c0028f14:	83 c4 0c             	add    esp,0xc
c0028f17:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028f18 <IOAPIC::~IOAPIC()>:
c0028f18:	83 ec 0c             	sub    esp,0xc
c0028f1b:	ba 18 d0 02 c0       	mov    edx,0xc002d018
c0028f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f24:	89 10                	mov    DWORD PTR [eax],edx
c0028f26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f2a:	83 ec 0c             	sub    esp,0xc
c0028f2d:	50                   	push   eax
c0028f2e:	e8 3d b1 fe ff       	call   c0014070 <Device::~Device()>
c0028f33:	83 c4 10             	add    esp,0x10
c0028f36:	90                   	nop
c0028f37:	83 c4 0c             	add    esp,0xc
c0028f3a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028f3c <IOAPIC::~IOAPIC()>:
c0028f3c:	83 ec 0c             	sub    esp,0xc
c0028f3f:	83 ec 0c             	sub    esp,0xc
c0028f42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f46:	e8 cd ff ff ff       	call   c0028f18 <IOAPIC::~IOAPIC()>
c0028f4b:	83 c4 10             	add    esp,0x10
c0028f4e:	83 ec 08             	sub    esp,0x8
c0028f51:	68 68 01 00 00       	push   0x168
c0028f56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f5a:	e8 39 9d fe ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0028f5f:	83 c4 10             	add    esp,0x10
c0028f62:	83 c4 0c             	add    esp,0xc
c0028f65:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028f66 <APIC::~APIC()>:
c0028f66:	83 ec 0c             	sub    esp,0xc
c0028f69:	ba d0 cf 02 c0       	mov    edx,0xc002cfd0
c0028f6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f72:	89 10                	mov    DWORD PTR [eax],edx
c0028f74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f78:	83 ec 0c             	sub    esp,0xc
c0028f7b:	50                   	push   eax
c0028f7c:	e8 1f bc fe ff       	call   c0014ba0 <InterruptController::~InterruptController()>
c0028f81:	83 c4 10             	add    esp,0x10
c0028f84:	90                   	nop
c0028f85:	83 c4 0c             	add    esp,0xc
c0028f88:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028f8a <APIC::~APIC()>:
c0028f8a:	83 ec 0c             	sub    esp,0xc
c0028f8d:	83 ec 0c             	sub    esp,0xc
c0028f90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f94:	e8 cd ff ff ff       	call   c0028f66 <APIC::~APIC()>
c0028f99:	83 c4 10             	add    esp,0x10
c0028f9c:	83 ec 08             	sub    esp,0x8
c0028f9f:	68 58 21 00 00       	push   0x2158
c0028fa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fa8:	e8 eb 9c fe ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0028fad:	83 c4 10             	add    esp,0x10
c0028fb0:	83 c4 0c             	add    esp,0xc
c0028fb3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028fb4 <PIC::~PIC()>:
c0028fb4:	83 ec 0c             	sub    esp,0xc
c0028fb7:	ba 68 d0 02 c0       	mov    edx,0xc002d068
c0028fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc0:	89 10                	mov    DWORD PTR [eax],edx
c0028fc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc6:	83 ec 0c             	sub    esp,0xc
c0028fc9:	50                   	push   eax
c0028fca:	e8 d1 bb fe ff       	call   c0014ba0 <InterruptController::~InterruptController()>
c0028fcf:	83 c4 10             	add    esp,0x10
c0028fd2:	90                   	nop
c0028fd3:	83 c4 0c             	add    esp,0xc
c0028fd6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028fd8 <PIC::~PIC()>:
c0028fd8:	83 ec 0c             	sub    esp,0xc
c0028fdb:	83 ec 0c             	sub    esp,0xc
c0028fde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fe2:	e8 cd ff ff ff       	call   c0028fb4 <PIC::~PIC()>
c0028fe7:	83 c4 10             	add    esp,0x10
c0028fea:	83 ec 08             	sub    esp,0x8
c0028fed:	68 58 21 00 00       	push   0x2158
c0028ff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ff6:	e8 9d 9c fe ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0028ffb:	83 c4 10             	add    esp,0x10
c0028ffe:	83 c4 0c             	add    esp,0xc
c0029001:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029002 <APICTimer::~APICTimer()>:
c0029002:	83 ec 0c             	sub    esp,0xc
c0029005:	ba bc d0 02 c0       	mov    edx,0xc002d0bc
c002900a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002900e:	89 10                	mov    DWORD PTR [eax],edx
c0029010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029014:	83 ec 0c             	sub    esp,0xc
c0029017:	50                   	push   eax
c0029018:	e8 05 db fe ff       	call   c0016b22 <Timer::~Timer()>
c002901d:	83 c4 10             	add    esp,0x10
c0029020:	90                   	nop
c0029021:	83 c4 0c             	add    esp,0xc
c0029024:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029026 <APICTimer::~APICTimer()>:
c0029026:	83 ec 0c             	sub    esp,0xc
c0029029:	83 ec 0c             	sub    esp,0xc
c002902c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029030:	e8 cd ff ff ff       	call   c0029002 <APICTimer::~APICTimer()>
c0029035:	83 c4 10             	add    esp,0x10
c0029038:	83 ec 08             	sub    esp,0x8
c002903b:	68 60 01 00 00       	push   0x160
c0029040:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029044:	e8 4f 9c fe ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0029049:	83 c4 10             	add    esp,0x10
c002904c:	83 c4 0c             	add    esp,0xc
c002904f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029050 <PIT::~PIT()>:
c0029050:	83 ec 0c             	sub    esp,0xc
c0029053:	ba 0c d1 02 c0       	mov    edx,0xc002d10c
c0029058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002905c:	89 10                	mov    DWORD PTR [eax],edx
c002905e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029062:	83 ec 0c             	sub    esp,0xc
c0029065:	50                   	push   eax
c0029066:	e8 b7 da fe ff       	call   c0016b22 <Timer::~Timer()>
c002906b:	83 c4 10             	add    esp,0x10
c002906e:	90                   	nop
c002906f:	83 c4 0c             	add    esp,0xc
c0029072:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029074 <PIT::~PIT()>:
c0029074:	83 ec 0c             	sub    esp,0xc
c0029077:	83 ec 0c             	sub    esp,0xc
c002907a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002907e:	e8 cd ff ff ff       	call   c0029050 <PIT::~PIT()>
c0029083:	83 c4 10             	add    esp,0x10
c0029086:	83 ec 08             	sub    esp,0x8
c0029089:	68 5c 01 00 00       	push   0x15c
c002908e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029092:	e8 01 9c fe ff       	call   c0012c98 <operator delete(void*, unsigned long)>
c0029097:	83 c4 10             	add    esp,0x10
c002909a:	83 c4 0c             	add    esp,0xc
c002909d:	c3                   	ret    
