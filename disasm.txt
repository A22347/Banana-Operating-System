
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 c6 f8 00 00       	call   c000f8e6 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 a3 8e 02 00       	call   c0028ec8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 5e 9b 02 c0       	mov    ebx,0xc0029b5e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 6c 9b 02 c0    	cmp    ebx,0xc0029b6c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 b8 e5 02 c0       	mov    eax,0xc002e5b8
c0000049:	3d b8 e5 02 c0       	cmp    eax,0xc002e5b8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 b8 e5 02 c0       	push   0xc002e5b8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 b8 e5 02 c0       	mov    eax,0xc002e5b8
c0000075:	2d b8 e5 02 c0       	sub    eax,0xc002e5b8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 b8 e5 02 c0       	push   0xc002e5b8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d e8 eb 02 c0 00 	cmp    BYTE PTR ds:0xc002ebe8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 74 9b 02 c0       	mov    ebx,0xc0029b74
c00000bb:	81 eb 70 9b 02 c0    	sub    ebx,0xc0029b70
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 70 9b 02 c0       	mov    esi,0xc0029b70
c00000ca:	a1 ec eb 02 c0       	mov    eax,ds:0xc002ebec
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ec eb 02 c0       	mov    ds:0xc002ebec,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ec eb 02 c0       	mov    eax,ds:0xc002ebec
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 b8 e5 02 c0       	push   0xc002e5b8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 e8 eb 02 c0 01 	mov    BYTE PTR ds:0xc002ebe8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 f0 eb 02 c0       	push   0xc002ebf0
c000012c:	68 b8 e5 02 c0       	push   0xc002e5b8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 e9 d5 01 00       	call   c001d98c <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 1a 23 01 00       	call   c00126d5 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 c7 d5 01 00       	call   c001d98c <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 6f da 01 00       	call   c001de53 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 cd e0 01 00       	call   c001e4ba <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 30 f0 02 c0 	lgdtd  ds:0xc002f030
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 2b 40 01 00       	call   c001460d <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 08 ec 02 c0       	mov    ds:0xc002ec08,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 08 ec 02 c0    	mov    DWORD PTR ds:0xc002ec08,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 08 ec 02 c0    	mov    ebx,DWORD PTR ds:0xc002ec08
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 80 9b 02 c0 02 	test   BYTE PTR [edx-0x3ffd6480],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 80 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd6480],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 80 9b 02 c0 08 	test   BYTE PTR [edx-0x3ffd6480],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 80 9b 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6480],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 80 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd6480],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 20 ec 02 c0    	mov    ecx,DWORD PTR ds:0xc002ec20
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 20 ec 02 c0    	mov    DWORD PTR ds:0xc002ec20,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 24 ec 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd13dc]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 24 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd13dc],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 20 ec 02 c0    	mov    DWORD PTR ds:0xc002ec20,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 4c ec 02 c0    	cmp    DWORD PTR ds:0xc002ec4c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 5c ec 02 c0    	mov    ecx,DWORD PTR ds:0xc002ec5c
c0000e38:	c7 42 0c 54 ec 02 c0 	mov    DWORD PTR [edx+0xc],0xc002ec54
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 5c ec 02 c0    	mov    DWORD PTR ds:0xc002ec5c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 4c ec 02 c0    	mov    DWORD PTR ds:0xc002ec4c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 20 ec 02 c0 02 	test   BYTE PTR ds:0xc002ec20,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 20 ec 02 c0       	mov    eax,0xc002ec20
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 cf e7 00 00       	call   c000f6e8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 11 e7 00 00       	call   c000f6e8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 fb e6 00 00       	call   c000f6e8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 d7 e6 00 00       	call   c000f6e8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 20 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec20
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 20 ec 02 c0       	mov    eax,0xc002ec20
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 24 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd13dc]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 24 ec 02 c0 	mov    DWORD PTR [edx*4-0x3ffd13dc],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 54 ec 02 c0 	lea    edx,[eax*8-0x3ffd13ac]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 20 ec 02 c0       	mov    eax,0xc002ec20
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 60 ec 02 c0    	mov    ebx,DWORD PTR ds:0xc002ec60
c00011ba:	81 fb 54 ec 02 c0    	cmp    ebx,0xc002ec54
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 54 ec 02 c0       	cmp    eax,0xc002ec54
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 50 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec50,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 5c ec 02 c0       	mov    ds:0xc002ec5c,eax
c00011f6:	a3 60 ec 02 c0       	mov    ds:0xc002ec60,eax
c00011fb:	a3 50 ec 02 c0       	mov    ds:0xc002ec50,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 54 ec 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ec54
c0001209:	c7 40 0c 54 ec 02 c0 	mov    DWORD PTR [eax+0xc],0xc002ec54
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 60 ec 02 c0       	mov    ds:0xc002ec60,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 54 ec 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ec54
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 18 ec 02 c0 	lea    ebp,[edx*4-0x3ffd13e8]
c000125a:	8b 14 95 20 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13e0]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 20 ec 02 c0 	lea    ecx,[edx*4-0x3ffd13e0]
c0001275:	8b 14 95 20 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd13e0]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 54 ef 02 c0 	or     DWORD PTR [edi*4-0x3ffd10ac],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 54 ec 02 c0 	lea    eax,[eax*8-0x3ffd13ac]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 5c ec 02 c0    	mov    DWORD PTR ds:0xc002ec5c,ecx
c000132f:	89 0d 60 ec 02 c0    	mov    DWORD PTR ds:0xc002ec60,ecx
c0001335:	c7 41 08 54 ec 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002ec54
c000133c:	c7 41 0c 54 ec 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002ec54
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 4c ec 02 c0 	lea    edx,[ecx*8-0x3ffd13b4]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 54 ef 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd10ac]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 54 ef 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd10ac]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 4c ec 02 c0 	lea    edx,[eax*4-0x3ffd13b4]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 54 ef 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd10ac],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 5c ec 02 c0    	mov    DWORD PTR ds:0xc002ec5c,edi
c0001402:	89 3d 60 ec 02 c0    	mov    DWORD PTR ds:0xc002ec60,edi
c0001408:	c7 47 08 54 ec 02 c0 	mov    DWORD PTR [edi+0x8],0xc002ec54
c000140f:	c7 47 0c 54 ec 02 c0 	mov    DWORD PTR [edi+0xc],0xc002ec54
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 50 ec 02 c0    	mov    DWORD PTR ds:0xc002ec50,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 4c ec 02 c0       	mov    eax,ds:0xc002ec4c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 4c ec 02 c0    	mov    DWORD PTR ds:0xc002ec4c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 20 ec 02 c0       	mov    edx,0xc002ec20
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 20 ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ec20,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 20 ec 02 c0       	mov    eax,0xc002ec20
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 74 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002ef74
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 74 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ef74,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 74 ef 02 c0    	mov    DWORD PTR ds:0xc002ef74,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 4c ec 02 c0    	cmp    DWORD PTR ds:0xc002ec4c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 4c ec 02 c0    	mov    DWORD PTR ds:0xc002ec4c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 20 ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ec20,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 20 ec 02 c0       	mov    eax,0xc002ec20
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 7c ef 02 c0    	push   DWORD PTR ds:0xc002ef7c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 20 ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ec20,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 20 ec 02 c0       	mov    eax,0xc002ec20
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 7c ef 02 c0       	mov    eax,ds:0xc002ef7c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 20 ec 02 c0       	mov    eax,0xc002ec20
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 4c ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ec4c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 20 ec 02 c0       	mov    eax,0xc002ec20
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 4c ec 02 c0       	mov    eax,ds:0xc002ec4c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 24 ec 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd13dc]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 54 ec 02 c0       	mov    eax,0xc002ec54
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 4c ef 02 c0       	cmp    eax,0xc002ef4c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 88 ef 02 c0       	mov    eax,ds:0xc002ef88
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 70 ef 02 c0    	mov    esi,DWORD PTR ds:0xc002ef70
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 84 ef 02 c0    	mov    esi,DWORD PTR ds:0xc002ef84
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 94 ef 02 c0    	mov    esi,DWORD PTR ds:0xc002ef94
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 20 ec 02 c0       	mov    eax,0xc002ec20
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 84 9c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd637c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 20 ec 02 c0       	mov    eax,ds:0xc002ec20
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 20 ec 02 c0       	mov    ds:0xc002ec20,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 64 ef 02 c0    	mov    DWORD PTR ds:0xc002ef64,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 68 ef 02 c0    	mov    DWORD PTR ds:0xc002ef68,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 6c ef 02 c0    	mov    DWORD PTR ds:0xc002ef6c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 74 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ef74,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 e0 26 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd920]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 18 f4 01 00       	jmp    c002100a <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 e0 26 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd920]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 49 f4 01 00       	jmp    c0021051 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 e0 26 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd920]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 71 f4 01 00       	jmp    c0021098 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 1a 53 02 00       	call   c0027224 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 a0 9d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6260]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 a0 9d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6260]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba a0 9c 02 c0       	mov    edx,0xc0029ca0
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba c0 9d 02 c0       	mov    edx,0xc0029dc0
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 0c d1 02 c0       	mov    edx,0xc002d10c
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba cc 9d 02 c0       	mov    edx,0xc0029dcc
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba b0 9d 02 c0       	mov    edx,0xc0029db0
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 c0 ef 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1040]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 a0 ef 02 c0    	mov    ax,ds:0xc002efa0
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 a0 ef 02 c0    	mov    ds:0xc002efa0,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 17 41 02 00       	call   c0027224 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 d2 9d 02 c0       	mov    eax,0xc0029dd2
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 20 9d 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd62e0]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 db 9d 02 c0       	mov    eax,0xc0029ddb
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 a0 9d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6260]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 e2 2a 02 00       	call   c0027224 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba b0 9d 02 c0       	mov    edx,0xc0029db0
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba a0 9c 02 c0       	mov    edx,0xc0029ca0
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba b0 9c 02 c0       	mov    edx,0xc0029cb0
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 c0 ef 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1040]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 c0 ef 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1040],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 a9 14 02 00       	call   c0027224 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 8f 14 02 00       	call   c0027224 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 f7 9c 02 c0       	mov    eax,0xc0029cf7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 f0 9c 02 c0       	mov    eax,0xc0029cf0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 c0 ef 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1040]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be e0 9c 02 c0       	mov    esi,0xc0029ce0
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 d2 fb 01 00       	call   c0027224 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba c0 9d 02 c0       	mov    edx,0xc0029dc0
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba c0 9c 02 c0       	mov    edx,0xc0029cc0
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba d0 9c 02 c0       	mov    edx,0xc0029cd0
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba e2 9d 02 c0       	mov    edx,0xc0029de2
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba ee 9d 02 c0       	mov    edx,0xc0029dee
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba 02 9e 02 c0       	mov    edx,0xc0029e02
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 23 74 00 00       	call   c000f88c <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 1d 74 00 00       	call   c000f89c <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c 20 a1 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a120
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 20 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a120
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 20 9f 02 c0       	mov    eax,0xc0029f20
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 60 9e 02 c0       	mov    eax,0xc0029e60
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 20 9e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd61e0]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 62 71 00 00       	call   c000f89c <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 4c 71 00 00       	call   c000f89c <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 26 05 02 00       	call   c0028cf7 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 e9 04 02 00       	call   c0028cd9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 bd 04 02 00       	call   c0028cf7 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 70 fb 01 00       	call   c00283fc <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 f2 05 02 00       	call   c0028e90 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 37 04 02 00       	call   c0028cf7 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 79 03 02 00       	call   c0028cf7 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 46 03 02 00       	call   c0028cd9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 33 02 02 00       	call   c0028cf7 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 fb 01 02 00       	call   c0028cd9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 2b 6d 00 00       	call   c000f8bc <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 c6 6c 00 00       	call   c000f89c <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 20 a2 02 c0       	mov    eax,0xc002a220
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 07 00 02 00       	call   c0028cf7 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 cc ff 01 00       	call   c0028cd9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 80 a6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5980]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 dc fc 01 00       	call   c0028a8b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 5a f6 01 00       	call   c0028428 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 16 ff 01 00       	call   c0028cfb <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 04 00 02 00       	call   c0028e1f <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 ee f5 01 00       	call   c0028428 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 99 fe 01 00       	call   c0028cf5 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 7a fe 01 00       	call   c0028cf9 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 10 00 02 00       	call   c0028eb0 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 ba fb 01 00       	call   c0028a8b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 38 f5 01 00       	call   c0028428 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 f4 fd 01 00       	call   c0028cfb <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 e2 fe 01 00       	call   c0028e1f <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 cc f4 01 00       	call   c0028428 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 77 fd 01 00       	call   c0028cf5 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 57 fd 01 00       	call   c0028cf9 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 ec fe 01 00       	call   c0028eb0 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 92 fc 01 00       	call   c0028cf7 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 50 fc 01 00       	call   c0028cd9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 38 fc 01 00       	call   c0028cf7 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 aa f9 01 00       	call   c0028a8b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 ac ec 01 00       	call   c0027dab <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 0f f3 01 00       	call   c0028428 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 61 f9 01 00       	call   c0028a8b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 67 ec 01 00       	call   c0027dab <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 36 f9 01 00       	call   c0028a8b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 86 fb 01 00       	call   c0028cf5 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 63 f2 01 00       	call   c00283fc <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 e5 fc 01 00       	call   c0028e90 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 0c fb 01 00       	call   c0028cd9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 07 f2 01 00       	call   c00283fc <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 85 f8 01 00       	call   c0028a8b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 08 f2 01 00       	call   c0028428 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 5a f8 01 00       	call   c0028a8b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 c1 f4 01 00       	call   c002870c <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 40 eb 01 00       	call   c0027dab <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 a0 e4 01 00       	call   c0027740 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 77 fb 01 00       	call   c0028e1f <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 60 f1 01 00       	call   c0028428 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 47 fb 01 00       	call   c0028e1f <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 b9 ea 01 00       	call   c0027dab <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 f2 f9 01 00       	call   c0028cfb <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 da f3 01 00       	call   c002870c <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 60 ea 01 00       	call   c0027dab <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 4e fb 01 00       	call   c0028eb0 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 20 f7 01 00       	call   c0028a8b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 77 f0 01 00       	call   c00283fc <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 56 f9 01 00       	call   c0028cf7 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 ef e9 01 00       	call   c0027dab <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 1b f0 01 00       	call   c00283fc <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 bd fa 01 00       	call   c0028eb0 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 6e f6 01 00       	call   c0028a8b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 eb ef 01 00       	call   c0028428 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 3e f6 01 00       	call   c0028a8b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 44 e9 01 00       	call   c0027dab <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 14 f6 01 00       	call   c0028a8b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 66 f8 01 00       	call   c0028cf7 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 3d ef 01 00       	call   c00283fc <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 bf f9 01 00       	call   c0028e90 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 e6 f7 01 00       	call   c0028cd9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 e0 ee 01 00       	call   c00283fc <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 5e f5 01 00       	call   c0028a8b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 e1 ee 01 00       	call   c0028428 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 33 f5 01 00       	call   c0028a8b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 9a f1 01 00       	call   c002870c <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 19 e8 01 00       	call   c0027dab <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 69 e1 01 00       	call   c0027740 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 40 f8 01 00       	call   c0028e1f <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 29 ee 01 00       	call   c0028428 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 10 f8 01 00       	call   c0028e1f <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 82 e7 01 00       	call   c0027dab <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 bb f6 01 00       	call   c0028cfb <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 a2 f0 01 00       	call   c002870c <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 21 e7 01 00       	call   c0027dab <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 0f f8 01 00       	call   c0028eb0 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 e1 f3 01 00       	call   c0028a8b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 38 ed 01 00       	call   c00283fc <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 17 f6 01 00       	call   c0028cf7 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 b0 e6 01 00       	call   c0027dab <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 dc ec 01 00       	call   c00283fc <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 51 f3 01 00       	call   c0028a8b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 57 e6 01 00       	call   c0027dab <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 e0 a6 02 c0       	mov    eax,0xc002a6e0
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 f4 a6 02 c0       	mov    eax,0xc002a6f4
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 5f 60 00 00       	call   c000f89c <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 61 60 00 00       	call   c000f8bc <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 cc f1 01 00       	call   c0028a8b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 4a eb 01 00       	call   c0028428 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 dc dd 01 00       	call   c0027740 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 b3 f4 01 00       	call   c0028e1f <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 9c ea 01 00       	call   c0028428 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 7f f4 01 00       	call   c0028e1f <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 f1 e3 01 00       	call   c0027dab <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 51 f4 01 00       	call   c0028e1f <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 40 ea 01 00       	call   c0028428 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 a9 e3 01 00       	call   c0027dab <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 ca dc 01 00       	call   c0027740 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 a1 f3 01 00       	call   c0028e1f <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 8a e9 01 00       	call   c0028428 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 6d f3 01 00       	call   c0028e1f <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 df e2 01 00       	call   c0027dab <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 3f f3 01 00       	call   c0028e1f <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 2e e9 01 00       	call   c0028428 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 97 e2 01 00       	call   c0027dab <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 75 e2 01 00       	call   c0027dab <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 51 db 01 00       	call   c0027740 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 28 f2 01 00       	call   c0028e1f <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 11 e8 01 00       	call   c0028428 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 f4 f1 01 00       	call   c0028e1f <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 66 e1 01 00       	call   c0027dab <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 c6 f1 01 00       	call   c0028e1f <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 af e7 01 00       	call   c0028428 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 18 e1 01 00       	call   c0027dab <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 78 f1 01 00       	call   c0028e1f <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 61 e7 01 00       	call   c0028428 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 ca e0 01 00       	call   c0027dab <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 df d9 01 00       	call   c0027740 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 b6 f0 01 00       	call   c0028e1f <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 9f e6 01 00       	call   c0028428 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 86 f0 01 00       	call   c0028e1f <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 f8 df 01 00       	call   c0027dab <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 58 f0 01 00       	call   c0028e1f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 41 e6 01 00       	call   c0028428 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 aa df 01 00       	call   c0027dab <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 0a f0 01 00       	call   c0028e1f <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 f3 e5 01 00       	call   c0028428 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 5c df 01 00       	call   c0027dab <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 30 df 01 00       	call   c0027dab <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 8d e5 01 00       	call   c0028428 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 49 ee 01 00       	call   c0028cfb <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 d8 de 01 00       	call   c0027dab <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 35 e5 01 00       	call   c0028428 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 f1 ed 01 00       	call   c0028cfb <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 6b d7 01 00       	call   c0027740 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 42 ee 01 00       	call   c0028e1f <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 2b e4 01 00       	call   c0028428 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 0e ee 01 00       	call   c0028e1f <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 80 dd 01 00       	call   c0027dab <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 e0 ed 01 00       	call   c0028e1f <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 c9 e3 01 00       	call   c0028428 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 32 dd 01 00       	call   c0027dab <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 92 ed 01 00       	call   c0028e1f <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 7b e3 01 00       	call   c0028428 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 e4 dc 01 00       	call   c0027dab <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 44 ed 01 00       	call   c0028e1f <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 2d e3 01 00       	call   c0028428 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 96 dc 01 00       	call   c0027dab <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 f6 ec 01 00       	call   c0028e1f <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 df e2 01 00       	call   c0028428 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 48 dc 01 00       	call   c0027dab <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 4a d5 01 00       	call   c0027740 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 21 ec 01 00       	call   c0028e1f <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 0a e2 01 00       	call   c0028428 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 f1 eb 01 00       	call   c0028e1f <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 63 db 01 00       	call   c0027dab <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 c3 eb 01 00       	call   c0028e1f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 ac e1 01 00       	call   c0028428 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 15 db 01 00       	call   c0027dab <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 75 eb 01 00       	call   c0028e1f <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 5e e1 01 00       	call   c0028428 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 c7 da 01 00       	call   c0027dab <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 27 eb 01 00       	call   c0028e1f <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 10 e1 01 00       	call   c0028428 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 79 da 01 00       	call   c0027dab <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 d9 ea 01 00       	call   c0028e1f <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 c2 e0 01 00       	call   c0028428 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 2b da 01 00       	call   c0027dab <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 ff d9 01 00       	call   c0027dab <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 5c e0 01 00       	call   c0028428 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 18 e9 01 00       	call   c0028cfb <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 a7 d9 01 00       	call   c0027dab <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 04 e0 01 00       	call   c0028428 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 c0 e8 01 00       	call   c0028cfb <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 4e d9 01 00       	call   c0027dab <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 ab df 01 00       	call   c0028428 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 67 e8 01 00       	call   c0028cfb <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 f5 d8 01 00       	call   c0027dab <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 52 df 01 00       	call   c0028428 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 0e e8 01 00       	call   c0028cfb <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 6c d1 01 00       	call   c0027740 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 43 e8 01 00       	call   c0028e1f <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 2c de 01 00       	call   c0028428 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 0f e8 01 00       	call   c0028e1f <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 81 d7 01 00       	call   c0027dab <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 e1 e7 01 00       	call   c0028e1f <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 ca dd 01 00       	call   c0028428 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 33 d7 01 00       	call   c0027dab <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 93 e7 01 00       	call   c0028e1f <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 7c dd 01 00       	call   c0028428 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 e5 d6 01 00       	call   c0027dab <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 45 e7 01 00       	call   c0028e1f <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 2e dd 01 00       	call   c0028428 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 97 d6 01 00       	call   c0027dab <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 f7 e6 01 00       	call   c0028e1f <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 e0 dc 01 00       	call   c0028428 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 49 d6 01 00       	call   c0027dab <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 a9 e6 01 00       	call   c0028e1f <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 92 dc 01 00       	call   c0028428 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 f8 d5 01 00       	call   c0027dab <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 58 e6 01 00       	call   c0028e1f <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 41 dc 01 00       	call   c0028428 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 aa d5 01 00       	call   c0027dab <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 a4 ce 01 00       	call   c0027740 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 7b e5 01 00       	call   c0028e1f <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 64 db 01 00       	call   c0028428 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 44 e5 01 00       	call   c0028e1f <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 b6 d4 01 00       	call   c0027dab <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 16 e5 01 00       	call   c0028e1f <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 ff da 01 00       	call   c0028428 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 68 d4 01 00       	call   c0027dab <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 c8 e4 01 00       	call   c0028e1f <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 b1 da 01 00       	call   c0028428 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 1a d4 01 00       	call   c0027dab <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 7a e4 01 00       	call   c0028e1f <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 63 da 01 00       	call   c0028428 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 cc d3 01 00       	call   c0027dab <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 2c e4 01 00       	call   c0028e1f <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 15 da 01 00       	call   c0028428 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 7e d3 01 00       	call   c0027dab <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 de e3 01 00       	call   c0028e1f <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 c7 d9 01 00       	call   c0028428 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 2d d3 01 00       	call   c0027dab <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 8d e3 01 00       	call   c0028e1f <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 76 d9 01 00       	call   c0028428 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 e5 d2 01 00       	call   c0027dab <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 be d2 01 00       	call   c0027dab <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 1c d9 01 00       	call   c0028428 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 d8 e1 01 00       	call   c0028cfb <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 67 d2 01 00       	call   c0027dab <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 c5 d8 01 00       	call   c0028428 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 81 e1 01 00       	call   c0028cfb <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 0f d2 01 00       	call   c0027dab <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 6d d8 01 00       	call   c0028428 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 29 e1 01 00       	call   c0028cfb <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 b7 d1 01 00       	call   c0027dab <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 15 d8 01 00       	call   c0028428 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 d1 e0 01 00       	call   c0028cfb <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 5f d1 01 00       	call   c0027dab <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 bd d7 01 00       	call   c0028428 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 79 e0 01 00       	call   c0028cfb <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 0d d1 01 00       	call   c0027dab <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 6b d7 01 00       	call   c0028428 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 27 e0 01 00       	call   c0028cfb <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 3b c9 01 00       	call   c0027740 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 12 e0 01 00       	call   c0028e1f <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 fb d5 01 00       	call   c0028428 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 e2 df 01 00       	call   c0028e1f <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 54 cf 01 00       	call   c0027dab <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 24 a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd58dc]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 88 df 01 00       	call   c0028e1f <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 71 d5 01 00       	call   c0028428 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 dc ce 01 00       	call   c0027dab <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 29 df 01 00       	call   c0028e1f <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 12 d5 01 00       	call   c0028428 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 7d ce 01 00       	call   c0027dab <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 ca de 01 00       	call   c0028e1f <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 b3 d4 01 00       	call   c0028428 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 1e ce 01 00       	call   c0027dab <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 6b de 01 00       	call   c0028e1f <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 54 d4 01 00       	call   c0028428 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 bf cd 01 00       	call   c0027dab <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 0c de 01 00       	call   c0028e1f <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 f5 d3 01 00       	call   c0028428 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 60 cd 01 00       	call   c0027dab <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 ad dd 01 00       	call   c0028e1f <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 96 d3 01 00       	call   c0028428 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 01 cd 01 00       	call   c0027dab <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 4e dd 01 00       	call   c0028e1f <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 37 d3 01 00       	call   c0028428 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 a2 cc 01 00       	call   c0027dab <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 ef dc 01 00       	call   c0028e1f <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 d8 d2 01 00       	call   c0028428 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 43 cc 01 00       	call   c0027dab <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 4d c5 01 00       	call   c0027740 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 24 dc 01 00       	call   c0028e1f <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 0d d2 01 00       	call   c0028428 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 f4 db 01 00       	call   c0028e1f <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 66 cb 01 00       	call   c0027dab <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 40 a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd58c0]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 99 db 01 00       	call   c0028e1f <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 82 d1 01 00       	call   c0028428 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 ed ca 01 00       	call   c0027dab <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 39 db 01 00       	call   c0028e1f <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 22 d1 01 00       	call   c0028428 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 8d ca 01 00       	call   c0027dab <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 d9 da 01 00       	call   c0028e1f <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 c2 d0 01 00       	call   c0028428 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 2d ca 01 00       	call   c0027dab <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 79 da 01 00       	call   c0028e1f <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 62 d0 01 00       	call   c0028428 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 cd c9 01 00       	call   c0027dab <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 19 da 01 00       	call   c0028e1f <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 02 d0 01 00       	call   c0028428 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 6d c9 01 00       	call   c0027dab <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 b9 d9 01 00       	call   c0028e1f <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 a2 cf 01 00       	call   c0028428 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 0d c9 01 00       	call   c0027dab <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 59 d9 01 00       	call   c0028e1f <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 42 cf 01 00       	call   c0028428 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 ad c8 01 00       	call   c0027dab <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 f9 d8 01 00       	call   c0028e1f <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 e2 ce 01 00       	call   c0028428 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 4d c8 01 00       	call   c0027dab <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 5c a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd58a4]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 f2 c7 01 00       	call   c0027dab <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 4f ce 01 00       	call   c0028428 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 0b d7 01 00       	call   c0028cfb <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 95 c7 01 00       	call   c0027dab <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 f2 cd 01 00       	call   c0028428 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 ae d6 01 00       	call   c0028cfb <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 38 c7 01 00       	call   c0027dab <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 95 cd 01 00       	call   c0028428 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 51 d6 01 00       	call   c0028cfb <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 db c6 01 00       	call   c0027dab <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 38 cd 01 00       	call   c0028428 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 f4 d5 01 00       	call   c0028cfb <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 7e c6 01 00       	call   c0027dab <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 db cc 01 00       	call   c0028428 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 97 d5 01 00       	call   c0028cfb <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 21 c6 01 00       	call   c0027dab <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 7e cc 01 00       	call   c0028428 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 3a d5 01 00       	call   c0028cfb <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 c4 c5 01 00       	call   c0027dab <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 21 cc 01 00       	call   c0028428 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 dd d4 01 00       	call   c0028cfb <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 67 c5 01 00       	call   c0027dab <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 c4 cb 01 00       	call   c0028428 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 80 d4 01 00       	call   c0028cfb <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 7c cb 01 00       	call   c0028428 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 f4 d5 01 00       	jmp    c0028eb0 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 5e d2 01 00       	call   c0028cf7 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 1c d2 01 00       	call   c0028cd9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 b3 cf 01 00       	call   c0028a8b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 b4 c2 01 00       	call   c0027dab <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 83 cf 01 00       	call   c0028a8b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 ea cb 01 00       	call   c002870c <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 89 d1 01 00       	call   c0028cd9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 8c d1 01 00       	call   c0028cf7 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 5f d1 01 00       	call   c0028cf7 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 58 cb 01 00       	call   c002870c <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 e2 d2 01 00       	call   c0028eb0 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 bd d2 01 00       	call   c0028eb0 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 8f ce 01 00       	call   c0028a8b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 e6 c7 01 00       	call   c00283fc <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 c5 d0 01 00       	call   c0028cf7 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 5e c1 01 00       	call   c0027dab <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 82 c7 01 00       	call   c00283fc <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 24 d2 01 00       	call   c0028eb0 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 5c ca 01 00       	call   c002870c <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 d9 c0 01 00       	call   c0027dab <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 05 cd 01 00       	call   c0028a8b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 05 c0 01 00       	call   c0027dab <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 e5 bf 01 00       	call   c0027dab <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 b5 cc 01 00       	call   c0028a8b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 05 cf 01 00       	call   c0028cf5 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 e4 c5 01 00       	call   c00283fc <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 66 d0 01 00       	call   c0028e90 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 8d ce 01 00       	call   c0028cd9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 8b c5 01 00       	call   c00283fc <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 09 cc 01 00       	call   c0028a8b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 8c c5 01 00       	call   c0028428 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 de cb 01 00       	call   c0028a8b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 45 c8 01 00       	call   c002870c <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 c4 be 01 00       	call   c0027dab <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 8e cb 01 00       	call   c0028a8b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 da cd 01 00       	call   c0028cf7 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 cf c4 01 00       	call   c0028428 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 a1 c4 01 00       	call   c0028428 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 da ca 01 00       	call   c0028a8b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 3e c7 01 00       	call   c002870c <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 06 c7 01 00       	call   c002870c <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 85 bd 01 00       	call   c0027dab <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 72 ce 01 00       	call   c0028eb0 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 44 ca 01 00       	call   c0028a8b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 9b c3 01 00       	call   c00283fc <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 7a cc 01 00       	call   c0028cf7 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 12 bd 01 00       	call   c0027dab <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 36 c3 01 00       	call   c00283fc <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 d8 cd 01 00       	call   c0028eb0 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 99 cb 01 00       	call   c0028cf7 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 57 cb 01 00       	call   c0028cd9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 ee c8 01 00       	call   c0028a8b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 ef bb 01 00       	call   c0027dab <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 be c8 01 00       	call   c0028a8b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 25 c5 01 00       	call   c002870c <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 c4 ca 01 00       	call   c0028cd9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 c7 ca 01 00       	call   c0028cf7 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 9a ca 01 00       	call   c0028cf7 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 93 c4 01 00       	call   c002870c <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 1d cc 01 00       	call   c0028eb0 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 f8 cb 01 00       	call   c0028eb0 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 ca c7 01 00       	call   c0028a8b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 21 c1 01 00       	call   c00283fc <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 00 ca 01 00       	call   c0028cf7 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 99 ba 01 00       	call   c0027dab <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 bd c0 01 00       	call   c00283fc <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 5f cb 01 00       	call   c0028eb0 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 97 c3 01 00       	call   c002870c <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 14 ba 01 00       	call   c0027dab <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 3f c6 01 00       	call   c0028a8b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 3f b9 01 00       	call   c0027dab <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 1f b9 01 00       	call   c0027dab <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 ef c5 01 00       	call   c0028a8b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 3f c8 01 00       	call   c0028cf5 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 1d bf 01 00       	call   c00283fc <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 9f c9 01 00       	call   c0028e90 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 c6 c7 01 00       	call   c0028cd9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 c3 be 01 00       	call   c00283fc <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 41 c5 01 00       	call   c0028a8b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 c4 be 01 00       	call   c0028428 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 16 c5 01 00       	call   c0028a8b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 7d c1 01 00       	call   c002870c <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 fc b7 01 00       	call   c0027dab <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 c6 c4 01 00       	call   c0028a8b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 12 c7 01 00       	call   c0028cf7 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 07 be 01 00       	call   c0028428 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 d9 bd 01 00       	call   c0028428 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 10 c4 01 00       	call   c0028a8b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 74 c0 01 00       	call   c002870c <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 41 c0 01 00       	call   c002870c <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 c0 b6 01 00       	call   c0027dab <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 ad c7 01 00       	call   c0028eb0 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 7f c3 01 00       	call   c0028a8b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 d6 bc 01 00       	call   c00283fc <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 b5 c5 01 00       	call   c0028cf7 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 4d b6 01 00       	call   c0027dab <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 71 bc 01 00       	call   c00283fc <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 13 c7 01 00       	call   c0028eb0 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 d4 c4 01 00       	call   c0028cf7 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 92 c4 01 00       	call   c0028cd9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 29 c2 01 00       	call   c0028a8b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 2a b5 01 00       	call   c0027dab <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 f9 c1 01 00       	call   c0028a8b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 60 be 01 00       	call   c002870c <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 ff c3 01 00       	call   c0028cd9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 02 c4 01 00       	call   c0028cf7 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 d5 c3 01 00       	call   c0028cf7 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 ce bd 01 00       	call   c002870c <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 58 c5 01 00       	call   c0028eb0 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 33 c5 01 00       	call   c0028eb0 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 05 c1 01 00       	call   c0028a8b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 5c ba 01 00       	call   c00283fc <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 3b c3 01 00       	call   c0028cf7 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 d4 b3 01 00       	call   c0027dab <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 f8 b9 01 00       	call   c00283fc <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 9a c4 01 00       	call   c0028eb0 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 d2 bc 01 00       	call   c002870c <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 4f b3 01 00       	call   c0027dab <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 7a bf 01 00       	call   c0028a8b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 7a b2 01 00       	call   c0027dab <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 5a b2 01 00       	call   c0027dab <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 2a bf 01 00       	call   c0028a8b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 7a c1 01 00       	call   c0028cf5 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 58 b8 01 00       	call   c00283fc <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 da c2 01 00       	call   c0028e90 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 01 c1 01 00       	call   c0028cd9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 fe b7 01 00       	call   c00283fc <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 7c be 01 00       	call   c0028a8b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 ff b7 01 00       	call   c0028428 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 51 be 01 00       	call   c0028a8b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 b8 ba 01 00       	call   c002870c <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 37 b1 01 00       	call   c0027dab <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 01 be 01 00       	call   c0028a8b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 4d c0 01 00       	call   c0028cf7 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 42 b7 01 00       	call   c0028428 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 14 b7 01 00       	call   c0028428 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 4b bd 01 00       	call   c0028a8b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 af b9 01 00       	call   c002870c <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 7c b9 01 00       	call   c002870c <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 fb af 01 00       	call   c0027dab <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 e8 c0 01 00       	call   c0028eb0 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 ba bc 01 00       	call   c0028a8b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 11 b6 01 00       	call   c00283fc <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 f0 be 01 00       	call   c0028cf7 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 88 af 01 00       	call   c0027dab <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 ac b5 01 00       	call   c00283fc <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 4e c0 01 00       	call   c0028eb0 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 0f be 01 00       	call   c0028cf7 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 cd bd 01 00       	call   c0028cd9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 64 bb 01 00       	call   c0028a8b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 65 ae 01 00       	call   c0027dab <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 34 bb 01 00       	call   c0028a8b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 9b b7 01 00       	call   c002870c <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 3a bd 01 00       	call   c0028cd9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 3d bd 01 00       	call   c0028cf7 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 10 bd 01 00       	call   c0028cf7 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 09 b7 01 00       	call   c002870c <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 93 be 01 00       	call   c0028eb0 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 6e be 01 00       	call   c0028eb0 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 40 ba 01 00       	call   c0028a8b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 97 b3 01 00       	call   c00283fc <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 76 bc 01 00       	call   c0028cf7 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 0f ad 01 00       	call   c0027dab <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 33 b3 01 00       	call   c00283fc <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 d5 bd 01 00       	call   c0028eb0 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 0d b6 01 00       	call   c002870c <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 8a ac 01 00       	call   c0027dab <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 b5 b8 01 00       	call   c0028a8b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 b5 ab 01 00       	call   c0027dab <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 95 ab 01 00       	call   c0027dab <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 65 b8 01 00       	call   c0028a8b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 b5 ba 01 00       	call   c0028cf5 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 93 b1 01 00       	call   c00283fc <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 15 bc 01 00       	call   c0028e90 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 3c ba 01 00       	call   c0028cd9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 39 b1 01 00       	call   c00283fc <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 b7 b7 01 00       	call   c0028a8b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 3a b1 01 00       	call   c0028428 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 8c b7 01 00       	call   c0028a8b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 f3 b3 01 00       	call   c002870c <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 72 aa 01 00       	call   c0027dab <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 3c b7 01 00       	call   c0028a8b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 88 b9 01 00       	call   c0028cf7 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 7d b0 01 00       	call   c0028428 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 4f b0 01 00       	call   c0028428 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 86 b6 01 00       	call   c0028a8b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 ea b2 01 00       	call   c002870c <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 b7 b2 01 00       	call   c002870c <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 36 a9 01 00       	call   c0027dab <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 23 ba 01 00       	call   c0028eb0 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 f5 b5 01 00       	call   c0028a8b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 4c af 01 00       	call   c00283fc <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 2b b8 01 00       	call   c0028cf7 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 c3 a8 01 00       	call   c0027dab <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 e7 ae 01 00       	call   c00283fc <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 89 b9 01 00       	call   c0028eb0 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 47 b7 01 00       	call   c0028cf7 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 05 b7 01 00       	call   c0028cd9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 9c b4 01 00       	call   c0028a8b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 9d a7 01 00       	call   c0027dab <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 6c b4 01 00       	call   c0028a8b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 d3 b0 01 00       	call   c002870c <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 72 b6 01 00       	call   c0028cd9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 75 b6 01 00       	call   c0028cf7 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 48 b6 01 00       	call   c0028cf7 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 41 b0 01 00       	call   c002870c <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 cb b7 01 00       	call   c0028eb0 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 a2 b7 01 00       	call   c0028eb0 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 74 b3 01 00       	call   c0028a8b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 cb ac 01 00       	call   c00283fc <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 aa b5 01 00       	call   c0028cf7 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 43 a6 01 00       	call   c0027dab <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 6b ac 01 00       	call   c00283fc <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 0d b7 01 00       	call   c0028eb0 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 46 af 01 00       	call   c002870c <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 c3 a5 01 00       	call   c0027dab <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 ef b1 01 00       	call   c0028a8b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 ef a4 01 00       	call   c0027dab <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 cf a4 01 00       	call   c0027dab <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 9f b1 01 00       	call   c0028a8b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 d3 b3 01 00       	call   c0028cd9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 ca aa 01 00       	call   c00283fc <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 4c b5 01 00       	call   c0028e90 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 73 b3 01 00       	call   c0028cd9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 6d aa 01 00       	call   c00283fc <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 eb b0 01 00       	call   c0028a8b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 6e aa 01 00       	call   c0028428 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 c0 b0 01 00       	call   c0028a8b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 27 ad 01 00       	call   c002870c <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 a6 a3 01 00       	call   c0027dab <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 70 b0 01 00       	call   c0028a8b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 bc b2 01 00       	call   c0028cf7 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 b1 a9 01 00       	call   c0028428 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 83 a9 01 00       	call   c0028428 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 c7 af 01 00       	call   c0028a8b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 2e ac 01 00       	call   c002870c <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 17 a9 01 00       	call   c0028428 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 d3 b1 01 00       	call   c0028cfb <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 c6 ab 01 00       	call   c002870c <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 45 a2 01 00       	call   c0027dab <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 32 b3 01 00       	call   c0028eb0 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 04 af 01 00       	call   c0028a8b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 5b a8 01 00       	call   c00283fc <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 3a b1 01 00       	call   c0028cf7 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 d2 a1 01 00       	call   c0027dab <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 fa a7 01 00       	call   c00283fc <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 9c b2 01 00       	call   c0028eb0 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 84 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd587c]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 78 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5888]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 25 1c 00 00       	call   c000f89c <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 4f af 01 00       	call   c0028cf7 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 0d af 01 00       	call   c0028cd9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 f9 ae 01 00       	call   c0028cf7 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 6b ac 01 00       	call   c0028a8b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 e9 a5 01 00       	call   c0028428 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 3b ac 01 00       	call   c0028a8b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 41 9f 01 00       	call   c0027dab <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 10 ac 01 00       	call   c0028a8b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 60 ae 01 00       	call   c0028cf5 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 41 a5 01 00       	call   c00283fc <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 c3 af 01 00       	call   c0028e90 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 ea ad 01 00       	call   c0028cd9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 e9 a4 01 00       	call   c00283fc <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 67 ab 01 00       	call   c0028a8b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 ea a4 01 00       	call   c0028428 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 3c ab 01 00       	call   c0028a8b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 a3 a7 01 00       	call   c002870c <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 22 9e 01 00       	call   c0027dab <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 4a a7 01 00       	call   c002870c <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 d0 9d 01 00       	call   c0027dab <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 be ae 01 00       	call   c0028eb0 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 90 aa 01 00       	call   c0028a8b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 e7 a3 01 00       	call   c00283fc <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 c6 ac 01 00       	call   c0028cf7 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 5f 9d 01 00       	call   c0027dab <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 8b a3 01 00       	call   c00283fc <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 2d ae 01 00       	call   c0028eb0 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 da a9 01 00       	call   c0028a8b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 57 a3 01 00       	call   c0028428 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 a8 a9 01 00       	call   c0028a8b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 ae 9c 01 00       	call   c0027dab <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 7e a9 01 00       	call   c0028a8b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 d2 ab 01 00       	call   c0028cf9 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 ab a2 01 00       	call   c00283fc <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 2d ad 01 00       	call   c0028e90 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 54 ab 01 00       	call   c0028cd9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 52 a2 01 00       	call   c00283fc <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 d0 a8 01 00       	call   c0028a8b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 53 a2 01 00       	call   c0028428 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 a5 a8 01 00       	call   c0028a8b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 0c a5 01 00       	call   c002870c <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 8b 9b 01 00       	call   c0027dab <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 a7 a4 01 00       	call   c002870c <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 26 9b 01 00       	call   c0027dab <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 14 ac 01 00       	call   c0028eb0 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 e6 a7 01 00       	call   c0028a8b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 3d a1 01 00       	call   c00283fc <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 1c aa 01 00       	call   c0028cf7 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 b5 9a 01 00       	call   c0027dab <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 e1 a0 01 00       	call   c00283fc <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 52 a7 01 00       	call   c0028a8b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 58 9a 01 00       	call   c0027dab <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 9e a8 02 c0       	mov    eax,0xc002a89e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 af a8 02 c0       	mov    eax,0xc002a8af
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 67 14 00 00       	call   c000f89c <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 69 14 00 00       	call   c000f8bc <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 e3 13 00 00       	jmp    c000f88c <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 fe 13 00 00       	jmp    c000f8ac <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c000e4e3:	ff 05 44 25 03 c0    	inc    DWORD PTR ds:0xc0032544
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 44 25 03 c0       	mov    ds:0xc0032544,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 40 25 03 c0 00 	cmp    DWORD PTR ds:0xc0032540,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 40 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032540,0x0
c000e50d:	e8 ce fb 00 00       	call   c001e0e0 <schedule()>
c000e512:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c000e517:	48                   	dec    eax
c000e518:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 90 f1 02 c0       	mov    eax,ds:0xc002f190
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 e6 a8 02 c0       	push   0xc002a8e6
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 28 f0 02 c0       	mov    eax,0xc002f028
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 ef a8 02 c0       	push   0xc002a8ef
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 24 72 02 c0       	mov    eax,0xc0027224
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 f9 a8 02 c0       	push   0xc002a8f9
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 58 6f 02 c0       	mov    eax,0xc0026f58
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 02 a9 02 c0       	push   0xc002a902
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 24 73 02 c0       	mov    eax,0xc0027324
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 0c a9 02 c0       	push   0xc002a90c
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 a4 70 02 c0       	mov    eax,0xc00270a4
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 15 a9 02 c0       	push   0xc002a915
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 2c f0 02 c0       	mov    eax,0xc002f02c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 22 a9 02 c0       	push   0xc002a922
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 2d f0 02 c0       	mov    eax,0xc002f02d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 4d 58 00 00       	call   c0013eba <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 3f 07 00 00       	push   0x73f
c000e69e:	e8 e9 11 00 00       	call   c000f88c <malloc>
c000e6a3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6aa:	89 c3                	mov    ebx,eax
c000e6ac:	ff 35 70 25 03 c0    	push   DWORD PTR ds:0xc0032570
c000e6b2:	68 2f a9 02 c0       	push   0xc002a92f
c000e6b7:	6a 01                	push   0x1
c000e6b9:	50                   	push   eax
c000e6ba:	e8 e5 f5 00 00       	call   c001dca4 <Process::Process(bool, char const*, Process*, char**)>
c000e6bf:	83 c4 20             	add    esp,0x20
c000e6c2:	68 ff 00 00 00       	push   0xff
c000e6c7:	6a 00                	push   0x0
c000e6c9:	68 1f f2 00 c0       	push   0xc000f21f
c000e6ce:	53                   	push   ebx
c000e6cf:	e8 c8 f7 00 00       	call   c001de9c <Process::createThread(void (*)(void*), void*, int)>
c000e6d4:	6a 7a                	push   0x7a
c000e6d6:	6a 00                	push   0x0
c000e6d8:	68 1a e9 01 c0       	push   0xc001e91a
c000e6dd:	ff 35 70 25 03 c0    	push   DWORD PTR ds:0xc0032570
c000e6e3:	e8 b4 f7 00 00       	call   c001de9c <Process::createThread(void (*)(void*), void*, int)>
c000e6e8:	83 c4 20             	add    esp,0x20
c000e6eb:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c000e6f0:	c6 05 2d f0 02 c0 01 	mov    BYTE PTR ds:0xc002f02d,0x1
c000e6f7:	e8 55 06 01 00       	call   c001ed51 <Vm::initialise8086()>
c000e6fc:	e8 81 45 00 00       	call   c0012c82 <Fs::initVFS()>
c000e701:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c000e706:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e70c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e70e:	6a 00                	push   0x0
c000e710:	6a 00                	push   0x0
c000e712:	6a 00                	push   0x0
c000e714:	50                   	push   eax
c000e715:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e718:	e8 14 de 00 00       	call   c001c531 <Sys::loadSyscalls()>
c000e71d:	e8 d2 ba 00 00       	call   c001a1f4 <Krnl::loadSystemEnv()>
c000e722:	83 c4 0c             	add    esp,0xc
c000e725:	6a 3a                	push   0x3a
c000e727:	68 3c a9 02 c0       	push   0xc002a93c
c000e72c:	68 45 a9 02 c0       	push   0xc002a945
c000e731:	e8 ad c9 00 00       	call   c001b0e3 <Reg::readIntWithDefault(char*, char*, int)>
c000e736:	89 04 24             	mov    DWORD PTR [esp],eax
c000e739:	e8 34 50 00 00       	call   c0013772 <User::loadClockSettings(int)>
c000e73e:	58                   	pop    eax
c000e73f:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c000e744:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e74a:	e8 2b 57 00 00       	call   c0013e7a <Device::loadDriversForAll()>
c000e74f:	e8 ec b5 00 00       	call   c0019d40 <Krnl::startCPUs()>
c000e754:	5a                   	pop    edx
c000e755:	8b 1d 28 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f028
c000e75b:	59                   	pop    ecx
c000e75c:	6a 01                	push   0x1
c000e75e:	68 4d a9 02 c0       	push   0xc002a94d
c000e763:	e8 99 ef 00 00       	call   c001d701 <Thr::loadDLL(char const*, bool)>
c000e768:	5a                   	pop    edx
c000e769:	59                   	pop    ecx
c000e76a:	53                   	push   ebx
c000e76b:	50                   	push   eax
c000e76c:	e8 bb f1 00 00       	call   c001d92c <Thr::executeDLL(unsigned long, void*)>
c000e771:	83 c4 10             	add    esp,0x10
c000e774:	83 ec 0c             	sub    esp,0xc
c000e777:	6a 02                	push   0x2
c000e779:	e8 61 fb 00 00       	call   c001e2df <blockTask(TaskState)>
c000e77e:	83 c4 10             	add    esp,0x10
c000e781:	eb f1                	jmp    c000e774 <Krnl::firstTask()+0xe0>
c000e783:	90                   	nop

c000e784 <Computer::Computer()>:
c000e784:	83 ec 0c             	sub    esp,0xc
c000e787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78b:	83 ec 08             	sub    esp,0x8
c000e78e:	68 69 a9 02 c0       	push   0xc002a969
c000e793:	50                   	push   eax
c000e794:	e8 9b 57 00 00       	call   c0013f34 <Device::Device(char const*)>
c000e799:	83 c4 10             	add    esp,0x10
c000e79c:	ba 08 ab 02 c0       	mov    edx,0xc002ab08
c000e7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a5:	89 10                	mov    DWORD PTR [eax],edx
c000e7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ab:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e7b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b9:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e7cd:	83 ca 04             	or     edx,0x4
c000e7d0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7e0:	0f b6 d0             	movzx  edx,al
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7f8:	0f b6 d0             	movzx  edx,al
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e808:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e80e:	8d 50 01             	lea    edx,[eax+0x1]
c000e811:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e815:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e81b:	0f b6 d0             	movzx  edx,al
c000e81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e822:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e826:	83 e1 3f             	and    ecx,0x3f
c000e829:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e831:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e837:	0f b6 d0             	movzx  edx,al
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e849:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84f:	0f b6 d0             	movzx  edx,al
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e865:	8d 50 01             	lea    edx,[eax+0x1]
c000e868:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e86c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e872:	0f b6 d0             	movzx  edx,al
c000e875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e879:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e87d:	83 e1 3f             	and    ecx,0x3f
c000e880:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e888:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e88e:	0f b6 d0             	movzx  edx,al
c000e891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e895:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a6:	0f b6 d0             	movzx  edx,al
c000e8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ad:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8bc:	8d 50 01             	lea    edx,[eax+0x1]
c000e8bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8c3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c9:	0f b6 d0             	movzx  edx,al
c000e8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8d4:	83 e1 3f             	and    ecx,0x3f
c000e8d7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8db:	90                   	nop
c000e8dc:	83 c4 0c             	add    esp,0xc
c000e8df:	c3                   	ret    

c000e8e0 <Computer::setBootMessage(char const*)>:
c000e8e0:	c3                   	ret    
c000e8e1:	90                   	nop

c000e8e2 <Computer::detectFeatures()>:
c000e8e2:	55                   	push   ebp
c000e8e3:	57                   	push   edi
c000e8e4:	56                   	push   esi
c000e8e5:	53                   	push   ebx
c000e8e6:	83 ec 1c             	sub    esp,0x1c
c000e8e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8ed:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8f7:	e8 e8 19 ff ff       	call   c00002e4 <detectCPUID>
c000e8fc:	85 c0                	test   eax,eax
c000e8fe:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e904:	0f 95 c2             	setne  dl
c000e907:	83 e0 fd             	and    eax,0xfffffffd
c000e90a:	d1 e2                	shl    edx,1
c000e90c:	09 d0                	or     eax,edx
c000e90e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e914:	a8 02                	test   al,0x2
c000e916:	75 46                	jne    c000e95e <Computer::detectFeatures()+0x7c>
c000e918:	f6 05 41 f0 02 c0 04 	test   BYTE PTR ds:0xc002f041,0x4
c000e91f:	74 07                	je     c000e928 <Computer::detectFeatures()+0x46>
c000e921:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e928:	e8 b9 85 01 00       	call   c0026ee6 <x87Detect>
c000e92d:	83 e0 01             	and    eax,0x1
c000e930:	c1 e0 04             	shl    eax,0x4
c000e933:	88 c2                	mov    dl,al
c000e935:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e93b:	83 e0 ef             	and    eax,0xffffffef
c000e93e:	09 d0                	or     eax,edx
c000e940:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e946:	a8 10                	test   al,0x10
c000e948:	0f 85 2a 01 00 00    	jne    c000ea78 <Computer::detectFeatures()+0x196>
c000e94e:	84 c0                	test   al,al
c000e950:	0f 88 45 01 00 00    	js     c000ea9b <Computer::detectFeatures()+0x1b9>
c000e956:	83 c4 1c             	add    esp,0x1c
c000e959:	5b                   	pop    ebx
c000e95a:	5e                   	pop    esi
c000e95b:	5f                   	pop    edi
c000e95c:	5d                   	pop    ebp
c000e95d:	c3                   	ret    
c000e95e:	83 ec 0c             	sub    esp,0xc
c000e961:	6a 20                	push   0x20
c000e963:	e8 e8 a0 00 00       	call   c0018a50 <CPU::cpuidCheckEDX(unsigned int)>
c000e968:	83 e0 01             	and    eax,0x1
c000e96b:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e972:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e978:	83 e0 f7             	and    eax,0xfffffff7
c000e97b:	09 d0                	or     eax,edx
c000e97d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e983:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e98a:	e8 c1 a0 00 00       	call   c0018a50 <CPU::cpuidCheckEDX(unsigned int)>
c000e98f:	83 e0 01             	and    eax,0x1
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e99a:	83 e0 fe             	and    eax,0xfffffffe
c000e99d:	09 d0                	or     eax,edx
c000e99f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9a5:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9ac:	e8 9f a0 00 00       	call   c0018a50 <CPU::cpuidCheckEDX(unsigned int)>
c000e9b1:	c1 e0 07             	shl    eax,0x7
c000e9b4:	88 c2                	mov    dl,al
c000e9b6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9bc:	83 e0 7f             	and    eax,0x7f
c000e9bf:	09 d0                	or     eax,edx
c000e9c1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9c7:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e9ce:	e8 7d a0 00 00       	call   c0018a50 <CPU::cpuidCheckEDX(unsigned int)>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	83 e0 01             	and    eax,0x1
c000e9d9:	c1 e0 05             	shl    eax,0x5
c000e9dc:	88 c2                	mov    dl,al
c000e9de:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9e4:	83 e0 df             	and    eax,0xffffffdf
c000e9e7:	09 d0                	or     eax,edx
c000e9e9:	f7 05 40 f0 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002f040,0x401
c000e9f3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9f9:	0f 84 c2 00 00 00    	je     c000eac1 <Computer::detectFeatures()+0x1df>
c000e9ff:	83 e0 fe             	and    eax,0xfffffffe
c000ea02:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea08:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea0e:	88 c2                	mov    dl,al
c000ea10:	83 e2 09             	and    edx,0x9
c000ea13:	fe ca                	dec    dl
c000ea15:	75 09                	jne    c000ea20 <Computer::detectFeatures()+0x13e>
c000ea17:	83 e0 fe             	and    eax,0xfffffffe
c000ea1a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea20:	83 ec 0c             	sub    esp,0xc
c000ea23:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea27:	50                   	push   eax
c000ea28:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea2c:	55                   	push   ebp
c000ea2d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea31:	57                   	push   edi
c000ea32:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea36:	56                   	push   esi
c000ea37:	68 00 00 00 80       	push   0x80000000
c000ea3c:	e8 8b 9f 00 00       	call   c00189cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea41:	83 c4 20             	add    esp,0x20
c000ea44:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea4f:	0f 86 c3 fe ff ff    	jbe    c000e918 <Computer::detectFeatures()+0x36>
c000ea55:	83 ec 0c             	sub    esp,0xc
c000ea58:	50                   	push   eax
c000ea59:	55                   	push   ebp
c000ea5a:	57                   	push   edi
c000ea5b:	56                   	push   esi
c000ea5c:	68 01 00 00 80       	push   0x80000001
c000ea61:	e8 66 9f 00 00       	call   c00189cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea66:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea70:	83 c4 20             	add    esp,0x20
c000ea73:	e9 a0 fe ff ff       	jmp    c000e918 <Computer::detectFeatures()+0x36>
c000ea78:	e8 23 84 01 00       	call   c0026ea0 <absolutelyNoChanceInHell>
c000ea7d:	88 c2                	mov    dl,al
c000ea7f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea85:	c1 e2 07             	shl    edx,0x7
c000ea88:	83 e0 7f             	and    eax,0x7f
c000ea8b:	09 d0                	or     eax,edx
c000ea8d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea93:	84 c0                	test   al,al
c000ea95:	0f 89 bb fe ff ff    	jns    c000e956 <Computer::detectFeatures()+0x74>
c000ea9b:	e8 e0 83 01 00       	call   c0026e80 <avxDetect>
c000eaa0:	83 e0 01             	and    eax,0x1
c000eaa3:	c1 e0 05             	shl    eax,0x5
c000eaa6:	88 c2                	mov    dl,al
c000eaa8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eaae:	83 e0 df             	and    eax,0xffffffdf
c000eab1:	09 d0                	or     eax,edx
c000eab3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eab9:	83 c4 1c             	add    esp,0x1c
c000eabc:	5b                   	pop    ebx
c000eabd:	5e                   	pop    esi
c000eabe:	5f                   	pop    edi
c000eabf:	5d                   	pop    ebp
c000eac0:	c3                   	ret    
c000eac1:	83 ec 0c             	sub    esp,0xc
c000eac4:	68 00 02 00 00       	push   0x200
c000eac9:	e8 82 9f 00 00       	call   c0018a50 <CPU::cpuidCheckEDX(unsigned int)>
c000eace:	83 c4 10             	add    esp,0x10
c000ead1:	83 e0 01             	and    eax,0x1
c000ead4:	88 c2                	mov    dl,al
c000ead6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eadc:	83 e0 fe             	and    eax,0xfffffffe
c000eadf:	09 d0                	or     eax,edx
c000eae1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae7:	e9 1c ff ff ff       	jmp    c000ea08 <Computer::detectFeatures()+0x126>

c000eaec <Computer::displayFeatures()>:
c000eaec:	53                   	push   ebx
c000eaed:	83 ec 14             	sub    esp,0x14
c000eaf0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaf4:	68 79 a9 02 c0       	push   0xc002a979
c000eaf9:	e8 f9 3d 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000eafe:	83 c4 10             	add    esp,0x10
c000eb01:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb08:	0f 85 73 02 00 00    	jne    c000ed81 <Computer::displayFeatures()+0x295>
c000eb0e:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000eb13:	83 ec 08             	sub    esp,0x8
c000eb16:	50                   	push   eax
c000eb17:	68 8c a9 02 c0       	push   0xc002a98c
c000eb1c:	e8 d6 3d 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000eb21:	83 c4 10             	add    esp,0x10
c000eb24:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb2b:	0f 85 8c 02 00 00    	jne    c000edbd <Computer::displayFeatures()+0x2d1>
c000eb31:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000eb36:	83 ec 08             	sub    esp,0x8
c000eb39:	50                   	push   eax
c000eb3a:	68 9d a9 02 c0       	push   0xc002a99d
c000eb3f:	e8 b3 3d 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000eb44:	83 c4 10             	add    esp,0x10
c000eb47:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb4e:	0f 85 5f 02 00 00    	jne    c000edb3 <Computer::displayFeatures()+0x2c7>
c000eb54:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000eb59:	83 ec 08             	sub    esp,0x8
c000eb5c:	50                   	push   eax
c000eb5d:	68 ae a9 02 c0       	push   0xc002a9ae
c000eb62:	e8 90 3d 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb71:	0f 85 32 02 00 00    	jne    c000eda9 <Computer::displayFeatures()+0x2bd>
c000eb77:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000eb7c:	83 ec 08             	sub    esp,0x8
c000eb7f:	50                   	push   eax
c000eb80:	68 bf a9 02 c0       	push   0xc002a9bf
c000eb85:	e8 6d 3d 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000eb8a:	83 c4 10             	add    esp,0x10
c000eb8d:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb94:	0f 85 05 02 00 00    	jne    c000ed9f <Computer::displayFeatures()+0x2b3>
c000eb9a:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000eb9f:	83 ec 08             	sub    esp,0x8
c000eba2:	50                   	push   eax
c000eba3:	68 d0 a9 02 c0       	push   0xc002a9d0
c000eba8:	e8 4a 3d 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000ebad:	83 c4 10             	add    esp,0x10
c000ebb0:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ebb7:	0f 85 d8 01 00 00    	jne    c000ed95 <Computer::displayFeatures()+0x2a9>
c000ebbd:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000ebc2:	83 ec 08             	sub    esp,0x8
c000ebc5:	50                   	push   eax
c000ebc6:	68 e1 a9 02 c0       	push   0xc002a9e1
c000ebcb:	e8 27 3d 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000ebd0:	83 c4 10             	add    esp,0x10
c000ebd3:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ebda:	0f 85 ab 01 00 00    	jne    c000ed8b <Computer::displayFeatures()+0x29f>
c000ebe0:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000ebe5:	83 ec 08             	sub    esp,0x8
c000ebe8:	50                   	push   eax
c000ebe9:	68 f2 a9 02 c0       	push   0xc002a9f2
c000ebee:	e8 04 3d 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000ebf3:	83 c4 10             	add    esp,0x10
c000ebf6:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebfd:	0f 88 1b 02 00 00    	js     c000ee1e <Computer::displayFeatures()+0x332>
c000ec03:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000ec08:	83 ec 08             	sub    esp,0x8
c000ec0b:	50                   	push   eax
c000ec0c:	68 03 aa 02 c0       	push   0xc002aa03
c000ec11:	e8 e1 3c 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000ec16:	83 c4 10             	add    esp,0x10
c000ec19:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec20:	0f 85 a1 01 00 00    	jne    c000edc7 <Computer::displayFeatures()+0x2db>
c000ec26:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000ec2b:	83 ec 08             	sub    esp,0x8
c000ec2e:	50                   	push   eax
c000ec2f:	68 14 aa 02 c0       	push   0xc002aa14
c000ec34:	e8 be 3c 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000ec39:	83 c4 10             	add    esp,0x10
c000ec3c:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec43:	0f 85 cb 01 00 00    	jne    c000ee14 <Computer::displayFeatures()+0x328>
c000ec49:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000ec4e:	83 ec 08             	sub    esp,0x8
c000ec51:	50                   	push   eax
c000ec52:	68 25 aa 02 c0       	push   0xc002aa25
c000ec57:	e8 9b 3c 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000ec5c:	83 c4 10             	add    esp,0x10
c000ec5f:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec66:	0f 85 9e 01 00 00    	jne    c000ee0a <Computer::displayFeatures()+0x31e>
c000ec6c:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000ec71:	83 ec 08             	sub    esp,0x8
c000ec74:	50                   	push   eax
c000ec75:	68 36 aa 02 c0       	push   0xc002aa36
c000ec7a:	e8 78 3c 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000ec7f:	83 c4 10             	add    esp,0x10
c000ec82:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec89:	0f 85 71 01 00 00    	jne    c000ee00 <Computer::displayFeatures()+0x314>
c000ec8f:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000ec94:	83 ec 08             	sub    esp,0x8
c000ec97:	50                   	push   eax
c000ec98:	68 47 aa 02 c0       	push   0xc002aa47
c000ec9d:	e8 55 3c 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000eca2:	83 c4 10             	add    esp,0x10
c000eca5:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ecac:	0f 85 44 01 00 00    	jne    c000edf6 <Computer::displayFeatures()+0x30a>
c000ecb2:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000ecb7:	83 ec 08             	sub    esp,0x8
c000ecba:	50                   	push   eax
c000ecbb:	68 58 aa 02 c0       	push   0xc002aa58
c000ecc0:	e8 32 3c 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000ecc5:	83 c4 10             	add    esp,0x10
c000ecc8:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000eccf:	0f 85 17 01 00 00    	jne    c000edec <Computer::displayFeatures()+0x300>
c000ecd5:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000ecda:	83 ec 08             	sub    esp,0x8
c000ecdd:	50                   	push   eax
c000ecde:	68 69 aa 02 c0       	push   0xc002aa69
c000ece3:	e8 0f 3c 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000ece8:	83 c4 10             	add    esp,0x10
c000eceb:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ecf2:	0f 85 ea 00 00 00    	jne    c000ede2 <Computer::displayFeatures()+0x2f6>
c000ecf8:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000ecfd:	83 ec 08             	sub    esp,0x8
c000ed00:	50                   	push   eax
c000ed01:	68 7a aa 02 c0       	push   0xc002aa7a
c000ed06:	e8 ec 3b 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000ed0b:	83 c4 10             	add    esp,0x10
c000ed0e:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed15:	0f 88 0d 01 00 00    	js     c000ee28 <Computer::displayFeatures()+0x33c>
c000ed1b:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000ed20:	83 ec 08             	sub    esp,0x8
c000ed23:	50                   	push   eax
c000ed24:	68 8b aa 02 c0       	push   0xc002aa8b
c000ed29:	e8 c9 3b 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000ed2e:	83 c4 10             	add    esp,0x10
c000ed31:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed38:	0f 85 9a 00 00 00    	jne    c000edd8 <Computer::displayFeatures()+0x2ec>
c000ed3e:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000ed43:	83 ec 08             	sub    esp,0x8
c000ed46:	50                   	push   eax
c000ed47:	68 9c aa 02 c0       	push   0xc002aa9c
c000ed4c:	e8 a6 3b 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000ed51:	83 c4 10             	add    esp,0x10
c000ed54:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed5b:	75 74                	jne    c000edd1 <Computer::displayFeatures()+0x2e5>
c000ed5d:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c000ed62:	83 ec 08             	sub    esp,0x8
c000ed65:	50                   	push   eax
c000ed66:	68 ad aa 02 c0       	push   0xc002aaad
c000ed6b:	e8 87 3b 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000ed70:	c7 44 24 20 90 c4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c490
c000ed78:	83 c4 18             	add    esp,0x18
c000ed7b:	5b                   	pop    ebx
c000ed7c:	e9 76 3b 00 00       	jmp    c00128f7 <Dbg::kprintf(char const*, ...)>
c000ed81:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000ed86:	e9 88 fd ff ff       	jmp    c000eb13 <Computer::displayFeatures()+0x27>
c000ed8b:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000ed90:	e9 50 fe ff ff       	jmp    c000ebe5 <Computer::displayFeatures()+0xf9>
c000ed95:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000ed9a:	e9 23 fe ff ff       	jmp    c000ebc2 <Computer::displayFeatures()+0xd6>
c000ed9f:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000eda4:	e9 f6 fd ff ff       	jmp    c000eb9f <Computer::displayFeatures()+0xb3>
c000eda9:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000edae:	e9 c9 fd ff ff       	jmp    c000eb7c <Computer::displayFeatures()+0x90>
c000edb3:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000edb8:	e9 9c fd ff ff       	jmp    c000eb59 <Computer::displayFeatures()+0x6d>
c000edbd:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000edc2:	e9 6f fd ff ff       	jmp    c000eb36 <Computer::displayFeatures()+0x4a>
c000edc7:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000edcc:	e9 5a fe ff ff       	jmp    c000ec2b <Computer::displayFeatures()+0x13f>
c000edd1:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000edd6:	eb 8a                	jmp    c000ed62 <Computer::displayFeatures()+0x276>
c000edd8:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000eddd:	e9 61 ff ff ff       	jmp    c000ed43 <Computer::displayFeatures()+0x257>
c000ede2:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000ede7:	e9 11 ff ff ff       	jmp    c000ecfd <Computer::displayFeatures()+0x211>
c000edec:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000edf1:	e9 e4 fe ff ff       	jmp    c000ecda <Computer::displayFeatures()+0x1ee>
c000edf6:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000edfb:	e9 b7 fe ff ff       	jmp    c000ecb7 <Computer::displayFeatures()+0x1cb>
c000ee00:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000ee05:	e9 8a fe ff ff       	jmp    c000ec94 <Computer::displayFeatures()+0x1a8>
c000ee0a:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000ee0f:	e9 5d fe ff ff       	jmp    c000ec71 <Computer::displayFeatures()+0x185>
c000ee14:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000ee19:	e9 30 fe ff ff       	jmp    c000ec4e <Computer::displayFeatures()+0x162>
c000ee1e:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000ee23:	e9 e0 fd ff ff       	jmp    c000ec08 <Computer::displayFeatures()+0x11c>
c000ee28:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c000ee2d:	e9 ee fe ff ff       	jmp    c000ed20 <Computer::displayFeatures()+0x234>

c000ee32 <Computer::rdmsr(unsigned int)>:
c000ee32:	83 ec 0c             	sub    esp,0xc
c000ee35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee39:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee40:	74 0a                	je     c000ee4c <Computer::rdmsr(unsigned int)+0x1a>
c000ee42:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee46:	0f 32                	rdmsr  
c000ee48:	83 c4 0c             	add    esp,0xc
c000ee4b:	c3                   	ret    
c000ee4c:	83 ec 0c             	sub    esp,0xc
c000ee4f:	68 be aa 02 c0       	push   0xc002aabe
c000ee54:	e8 d4 b4 00 00       	call   c001a32d <Krnl::panic(char const*)>
c000ee59:	83 c4 10             	add    esp,0x10
c000ee5c:	eb e4                	jmp    c000ee42 <Computer::rdmsr(unsigned int)+0x10>

c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee5e:	57                   	push   edi
c000ee5f:	56                   	push   esi
c000ee60:	52                   	push   edx
c000ee61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee65:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee6d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee74:	74 0e                	je     c000ee84 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee76:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee7a:	89 f0                	mov    eax,esi
c000ee7c:	89 fa                	mov    edx,edi
c000ee7e:	0f 30                	wrmsr  
c000ee80:	58                   	pop    eax
c000ee81:	5e                   	pop    esi
c000ee82:	5f                   	pop    edi
c000ee83:	c3                   	ret    
c000ee84:	83 ec 0c             	sub    esp,0xc
c000ee87:	68 c4 aa 02 c0       	push   0xc002aac4
c000ee8c:	e8 9c b4 00 00       	call   c001a32d <Krnl::panic(char const*)>
c000ee91:	83 c4 10             	add    esp,0x10
c000ee94:	eb e0                	jmp    c000ee76 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee96 <Computer::nmiEnabled()>:
c000ee96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee9a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eea0:	c3                   	ret    
c000eea1:	90                   	nop

c000eea2 <Computer::readCMOS(unsigned char)>:
c000eea2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eea6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eead:	19 c0                	sbb    eax,eax
c000eeaf:	83 e0 80             	and    eax,0xffffff80
c000eeb2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eeb6:	e6 70                	out    0x70,al
c000eeb8:	e4 71                	in     al,0x71
c000eeba:	c3                   	ret    
c000eebb:	90                   	nop

c000eebc <Computer::enableNMI(bool)>:
c000eebc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eec4:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eeca:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eed2:	eb ce                	jmp    c000eea2 <Computer::readCMOS(unsigned char)>

c000eed4 <Computer::open(int, int, void*)>:
c000eed4:	56                   	push   esi
c000eed5:	53                   	push   ebx
c000eed6:	83 ec 10             	sub    esp,0x10
c000eed9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eedd:	f6 05 40 f0 02 c0 04 	test   BYTE PTR ds:0xc002f040,0x4
c000eee4:	68 64 12 00 00       	push   0x1264
c000eee9:	0f 94 05 60 df 02 c0 	sete   BYTE PTR ds:0xc002df60
c000eef0:	e8 97 09 00 00       	call   c000f88c <malloc>
c000eef5:	89 04 24             	mov    DWORD PTR [esp],eax
c000eef8:	89 c6                	mov    esi,eax
c000eefa:	e8 8d 8e 00 00       	call   c0017d8c <ACPI::ACPI()>
c000eeff:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef05:	58                   	pop    eax
c000ef06:	5a                   	pop    edx
c000ef07:	56                   	push   esi
c000ef08:	53                   	push   ebx
c000ef09:	e8 22 4e 00 00       	call   c0013d30 <Device::addChild(Device*)>
c000ef0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef11:	e8 cc f9 ff ff       	call   c000e8e2 <Computer::detectFeatures()>
c000ef16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef19:	e8 ce fb ff ff       	call   c000eaec <Computer::displayFeatures()>
c000ef1e:	59                   	pop    ecx
c000ef1f:	5e                   	pop    esi
c000ef20:	6a 01                	push   0x1
c000ef22:	53                   	push   ebx
c000ef23:	e8 94 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000ef28:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef2f:	e8 58 09 00 00       	call   c000f88c <malloc>
c000ef34:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef37:	89 c6                	mov    esi,eax
c000ef39:	e8 ca 9b 00 00       	call   c0018b08 <CPU::CPU()>
c000ef3e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef44:	58                   	pop    eax
c000ef45:	5a                   	pop    edx
c000ef46:	56                   	push   esi
c000ef47:	53                   	push   ebx
c000ef48:	e8 e3 4d 00 00       	call   c0013d30 <Device::addChild(Device*)>
c000ef4d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef53:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef59:	6a 00                	push   0x0
c000ef5b:	6a 00                	push   0x0
c000ef5d:	50                   	push   eax
c000ef5e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef61:	83 c4 20             	add    esp,0x20
c000ef64:	e8 6f 53 00 00       	call   c00142d8 <setupFPU()>
c000ef69:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef6f:	85 c0                	test   eax,eax
c000ef71:	74 1f                	je     c000ef92 <Computer::open(int, int, void*)+0xbe>
c000ef73:	83 ec 08             	sub    esp,0x8
c000ef76:	50                   	push   eax
c000ef77:	53                   	push   ebx
c000ef78:	e8 b3 4d 00 00       	call   c0013d30 <Device::addChild(Device*)>
c000ef7d:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef83:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef85:	6a 00                	push   0x0
c000ef87:	6a 00                	push   0x0
c000ef89:	6a 00                	push   0x0
c000ef8b:	50                   	push   eax
c000ef8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef8f:	83 c4 20             	add    esp,0x20
c000ef92:	83 ec 0c             	sub    esp,0xc
c000ef95:	68 94 e6 00 c0       	push   0xc000e694
c000ef9a:	e8 1f f0 00 00       	call   c001dfbe <setupMultitasking(void (*)())>
c000ef9f:	83 c4 14             	add    esp,0x14
c000efa2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efa7:	5b                   	pop    ebx
c000efa8:	5e                   	pop    esi
c000efa9:	c3                   	ret    

c000efaa <Computer::disableNMI()>:
c000efaa:	6a 00                	push   0x0
c000efac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efb0:	e8 07 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000efb5:	58                   	pop    eax
c000efb6:	5a                   	pop    edx
c000efb7:	c3                   	ret    

c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efbc:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efc3:	19 c0                	sbb    eax,eax
c000efc5:	83 e0 80             	and    eax,0xffffff80
c000efc8:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000efcc:	e6 70                	out    0x70,al
c000efce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efd2:	e6 71                	out    0x71,al
c000efd4:	c3                   	ret    
c000efd5:	90                   	nop

c000efd6 <Computer::handleNMI()>:
c000efd6:	56                   	push   esi
c000efd7:	53                   	push   ebx
c000efd8:	83 ec 10             	sub    esp,0x10
c000efdb:	e4 92                	in     al,0x92
c000efdd:	89 c6                	mov    esi,eax
c000efdf:	e4 61                	in     al,0x61
c000efe1:	68 ca aa 02 c0       	push   0xc002aaca
c000efe6:	88 c3                	mov    bl,al
c000efe8:	e8 0a 39 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000efed:	83 c4 10             	add    esp,0x10
c000eff0:	83 e6 10             	and    esi,0x10
c000eff3:	75 0d                	jne    c000f002 <Computer::handleNMI()+0x2c>
c000eff5:	f6 c3 40             	test   bl,0x40
c000eff8:	75 1d                	jne    c000f017 <Computer::handleNMI()+0x41>
c000effa:	84 db                	test   bl,bl
c000effc:	78 2d                	js     c000f02b <Computer::handleNMI()+0x55>
c000effe:	58                   	pop    eax
c000efff:	5b                   	pop    ebx
c000f000:	5e                   	pop    esi
c000f001:	c3                   	ret    
c000f002:	83 ec 0c             	sub    esp,0xc
c000f005:	68 db aa 02 c0       	push   0xc002aadb
c000f00a:	e8 1e b3 00 00       	call   c001a32d <Krnl::panic(char const*)>
c000f00f:	83 c4 10             	add    esp,0x10
c000f012:	f6 c3 40             	test   bl,0x40
c000f015:	74 e3                	je     c000effa <Computer::handleNMI()+0x24>
c000f017:	83 ec 0c             	sub    esp,0xc
c000f01a:	68 e8 aa 02 c0       	push   0xc002aae8
c000f01f:	e8 09 b3 00 00       	call   c001a32d <Krnl::panic(char const*)>
c000f024:	83 c4 10             	add    esp,0x10
c000f027:	84 db                	test   bl,bl
c000f029:	79 d3                	jns    c000effe <Computer::handleNMI()+0x28>
c000f02b:	c7 44 24 10 f2 aa 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aaf2
c000f033:	5a                   	pop    edx
c000f034:	5b                   	pop    ebx
c000f035:	5e                   	pop    esi
c000f036:	e9 f2 b2 00 00       	jmp    c001a32d <Krnl::panic(char const*)>
c000f03b:	90                   	nop

c000f03c <Computer::setDiskActivityLight(int, bool)>:
c000f03c:	56                   	push   esi
c000f03d:	53                   	push   ebx
c000f03e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f042:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f047:	77 1b                	ja     c000f064 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f049:	e4 92                	in     al,0x92
c000f04b:	bb 40 00 00 00       	mov    ebx,0x40
c000f050:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f054:	89 da                	mov    edx,ebx
c000f056:	d3 e2                	shl    edx,cl
c000f058:	89 f1                	mov    ecx,esi
c000f05a:	f7 d2                	not    edx
c000f05c:	d3 e3                	shl    ebx,cl
c000f05e:	21 d0                	and    eax,edx
c000f060:	09 d8                	or     eax,ebx
c000f062:	e6 92                	out    0x92,al
c000f064:	5b                   	pop    ebx
c000f065:	5e                   	pop    esi
c000f066:	c3                   	ret    
c000f067:	90                   	nop

c000f068 <GDTEntry::setBase(unsigned int)>:
c000f068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f06c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f070:	89 c1                	mov    ecx,eax
c000f072:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f076:	c1 e9 10             	shr    ecx,0x10
c000f079:	c1 e8 18             	shr    eax,0x18
c000f07c:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f07f:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f082:	c3                   	ret    
c000f083:	90                   	nop

c000f084 <GDTEntry::setLimit(unsigned int)>:
c000f084:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f088:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f08c:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f08f:	66 89 01             	mov    WORD PTR [ecx],ax
c000f092:	83 e2 f0             	and    edx,0xfffffff0
c000f095:	c1 e8 10             	shr    eax,0x10
c000f098:	83 e0 0f             	and    eax,0xf
c000f09b:	09 d0                	or     eax,edx
c000f09d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f0a0:	c3                   	ret    
c000f0a1:	90                   	nop

c000f0a2 <GDT::GDT()>:
c000f0a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0b6:	90                   	nop
c000f0b7:	c3                   	ret    

c000f0b8 <GDT::addEntry(GDTEntry)>:
c000f0b8:	53                   	push   ebx
c000f0b9:	83 ec 0c             	sub    esp,0xc
c000f0bc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f0c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0c2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f0c9:	52                   	push   edx
c000f0ca:	50                   	push   eax
c000f0cb:	68 2c ab 02 c0       	push   0xc002ab2c
c000f0d0:	e8 22 38 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000f0d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f0db:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f0df:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0e3:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f0e7:	8d 50 01             	lea    edx,[eax+0x1]
c000f0ea:	c1 e0 03             	shl    eax,0x3
c000f0ed:	89 13                	mov    DWORD PTR [ebx],edx
c000f0ef:	83 c4 18             	add    esp,0x18
c000f0f2:	5b                   	pop    ebx
c000f0f3:	c3                   	ret    

c000f0f4 <GDT::getNumberOfEntries()>:
c000f0f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0fa:	c3                   	ret    
c000f0fb:	90                   	nop

c000f0fc <GDT::flush()>:
c000f0fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f100:	8b 10                	mov    edx,DWORD PTR [eax]
c000f102:	83 c0 04             	add    eax,0x4
c000f105:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f10c:	a3 32 f0 02 c0       	mov    ds:0xc002f032,eax
c000f111:	66 89 15 30 f0 02 c0 	mov    WORD PTR ds:0xc002f030,dx
c000f118:	e9 33 13 ff ff       	jmp    c0000450 <loadGDT>
c000f11d:	90                   	nop

c000f11e <GDT::setup()>:
c000f11e:	55                   	push   ebp
c000f11f:	57                   	push   edi
c000f120:	56                   	push   esi
c000f121:	53                   	push   ebx
c000f122:	83 ec 3c             	sub    esp,0x3c
c000f125:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f129:	6a 00                	push   0x0
c000f12b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f12f:	53                   	push   ebx
c000f130:	e8 33 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f135:	6a 00                	push   0x0
c000f137:	53                   	push   ebx
c000f138:	e8 47 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f13d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f145:	6a 00                	push   0x0
c000f147:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f14b:	53                   	push   ebx
c000f14c:	e8 17 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f151:	68 ff ff ff 00       	push   0xffffff
c000f156:	53                   	push   ebx
c000f157:	e8 28 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f15c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f160:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f165:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f16a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f16e:	83 c4 20             	add    esp,0x20
c000f171:	6a 00                	push   0x0
c000f173:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f177:	53                   	push   ebx
c000f178:	e8 eb fe ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f17d:	68 ff ff ff 00       	push   0xffffff
c000f182:	53                   	push   ebx
c000f183:	e8 fc fe ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f188:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f18c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f190:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f194:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f198:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f19c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1a1:	0d 00 92 c0 00       	or     eax,0xc09200
c000f1a6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1aa:	89 d8                	mov    eax,ebx
c000f1ac:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f1b0:	80 cc 60             	or     ah,0x60
c000f1b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1b7:	83 c4 0c             	add    esp,0xc
c000f1ba:	89 f8                	mov    eax,edi
c000f1bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c0:	80 cc 60             	or     ah,0x60
c000f1c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c7:	89 c7                	mov    edi,eax
c000f1c9:	55                   	push   ebp
c000f1ca:	e8 e9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1cf:	83 c4 0c             	add    esp,0xc
c000f1d2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1da:	55                   	push   ebp
c000f1db:	e8 d8 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1e0:	83 c4 0c             	add    esp,0xc
c000f1e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1eb:	55                   	push   ebp
c000f1ec:	e8 c7 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1f1:	83 c4 0c             	add    esp,0xc
c000f1f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1fc:	53                   	push   ebx
c000f1fd:	51                   	push   ecx
c000f1fe:	55                   	push   ebp
c000f1ff:	e8 b4 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f204:	83 c4 0c             	add    esp,0xc
c000f207:	57                   	push   edi
c000f208:	56                   	push   esi
c000f209:	55                   	push   ebp
c000f20a:	e8 a9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f20f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f212:	e8 e5 fe ff ff       	call   c000f0fc <GDT::flush()>
c000f217:	83 c4 4c             	add    esp,0x4c
c000f21a:	5b                   	pop    ebx
c000f21b:	5e                   	pop    esi
c000f21c:	5f                   	pop    edi
c000f21d:	5d                   	pop    ebp
c000f21e:	c3                   	ret    

c000f21f <idleFunction(void*)>:
c000f21f:	53                   	push   ebx
c000f220:	83 ec 08             	sub    esp,0x8
c000f223:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c000f228:	48                   	dec    eax
c000f229:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c000f22e:	75 01                	jne    c000f231 <idleFunction(void*)+0x12>
c000f230:	fb                   	sti    
c000f231:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c000f236:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f23c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f243:	74 3c                	je     c000f281 <idleFunction(void*)+0x62>
c000f245:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f24c:	74 33                	je     c000f281 <idleFunction(void*)+0x62>
c000f24e:	31 db                	xor    ebx,ebx
c000f250:	52                   	push   edx
c000f251:	52                   	push   edx
c000f252:	68 e1 00 00 00       	push   0xe1
c000f257:	50                   	push   eax
c000f258:	e8 d5 fb ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c000f25d:	53                   	push   ebx
c000f25e:	83 e0 02             	and    eax,0x2
c000f261:	50                   	push   eax
c000f262:	68 e1 00 00 00       	push   0xe1
c000f267:	ff 35 28 f0 02 c0    	push   DWORD PTR ds:0xc002f028
c000f26d:	e8 ec fb ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f272:	83 c4 20             	add    esp,0x20
c000f275:	e8 05 10 ff ff       	call   c000027f <doTPAUSE>
c000f27a:	e8 b1 9c 01 00       	call   c0028f30 <idleCommon()>
c000f27f:	eb f4                	jmp    c000f275 <idleFunction(void*)+0x56>
c000f281:	fb                   	sti    
c000f282:	f4                   	hlt    
c000f283:	e8 a8 9c 01 00       	call   c0028f30 <idleCommon()>
c000f288:	eb f7                	jmp    c000f281 <idleFunction(void*)+0x62>

c000f28a <IDTEntry::IDTEntry(bool)>:
c000f28a:	83 ec 04             	sub    esp,0x4
c000f28d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f291:	88 04 24             	mov    BYTE PTR [esp],al
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f29e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f2a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2aa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ad:	83 e2 f0             	and    edx,0xfffffff0
c000f2b0:	83 ca 0e             	or     edx,0xe
c000f2b3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2bd:	83 e2 ef             	and    edx,0xffffffef
c000f2c0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2c3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2c7:	74 04                	je     c000f2cd <IDTEntry::IDTEntry(bool)+0x43>
c000f2c9:	b2 03                	mov    dl,0x3
c000f2cb:	eb 02                	jmp    c000f2cf <IDTEntry::IDTEntry(bool)+0x45>
c000f2cd:	b2 00                	mov    dl,0x0
c000f2cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d3:	83 e2 03             	and    edx,0x3
c000f2d6:	88 d1                	mov    cl,dl
c000f2d8:	c1 e1 05             	shl    ecx,0x5
c000f2db:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2de:	83 e2 9f             	and    edx,0xffffff9f
c000f2e1:	09 ca                	or     edx,ecx
c000f2e3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ea:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ed:	83 ca 80             	or     edx,0xffffff80
c000f2f0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2f3:	90                   	nop
c000f2f4:	83 c4 04             	add    esp,0x4
c000f2f7:	c3                   	ret    

c000f2f8 <IDTEntry::setOffset(unsigned int)>:
c000f2f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f300:	66 89 02             	mov    WORD PTR [edx],ax
c000f303:	c1 e8 10             	shr    eax,0x10
c000f306:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f30a:	c3                   	ret    
c000f30b:	90                   	nop

c000f30c <IDT::IDT()>:
c000f30c:	90                   	nop
c000f30d:	c3                   	ret    

c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f30e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f312:	83 c0 30             	add    eax,0x30
c000f315:	c3                   	ret    

c000f316 <IDT::addEntry(IDTEntry, int)>:
c000f316:	53                   	push   ebx
c000f317:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f31b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f31f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f323:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f327:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f32a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f32e:	5b                   	pop    ebx
c000f32f:	c3                   	ret    

c000f330 <IDT::addEntry(int, void (*)(), bool)>:
c000f330:	53                   	push   ebx
c000f331:	83 ec 10             	sub    esp,0x10
c000f334:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f339:	50                   	push   eax
c000f33a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f33e:	53                   	push   ebx
c000f33f:	e8 46 ff ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f344:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f348:	53                   	push   ebx
c000f349:	e8 aa ff ff ff       	call   c000f2f8 <IDTEntry::setOffset(unsigned int)>
c000f34e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f352:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f356:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f35a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f35e:	e8 b3 ff ff ff       	call   c000f316 <IDT::addEntry(IDTEntry, int)>
c000f363:	83 c4 30             	add    esp,0x30
c000f366:	5b                   	pop    ebx
c000f367:	c3                   	ret    

c000f368 <IDT::flush()>:
c000f368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f36c:	66 c7 05 38 f0 02 c0 ff 07 	mov    WORD PTR ds:0xc002f038,0x7ff
c000f375:	a3 3a f0 02 c0       	mov    ds:0xc002f03a,eax
c000f37a:	0f 01 1d 38 f0 02 c0 	lidtd  ds:0xc002f038
c000f381:	c3                   	ret    

c000f382 <IDT::setup()>:
c000f382:	57                   	push   edi
c000f383:	56                   	push   esi
c000f384:	53                   	push   ebx
c000f385:	83 ec 10             	sub    esp,0x10
c000f388:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f38c:	6a 00                	push   0x0
c000f38e:	68 70 04 00 c0       	push   0xc0000470
c000f393:	6a 00                	push   0x0
c000f395:	53                   	push   ebx
c000f396:	e8 95 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f39b:	6a 00                	push   0x0
c000f39d:	68 80 04 00 c0       	push   0xc0000480
c000f3a2:	6a 01                	push   0x1
c000f3a4:	53                   	push   ebx
c000f3a5:	e8 86 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3aa:	83 c4 20             	add    esp,0x20
c000f3ad:	6a 00                	push   0x0
c000f3af:	68 8a 04 00 c0       	push   0xc000048a
c000f3b4:	6a 02                	push   0x2
c000f3b6:	53                   	push   ebx
c000f3b7:	e8 74 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3bc:	6a 00                	push   0x0
c000f3be:	68 94 04 00 c0       	push   0xc0000494
c000f3c3:	6a 03                	push   0x3
c000f3c5:	53                   	push   ebx
c000f3c6:	e8 65 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3cb:	83 c4 20             	add    esp,0x20
c000f3ce:	6a 00                	push   0x0
c000f3d0:	68 9e 04 00 c0       	push   0xc000049e
c000f3d5:	6a 04                	push   0x4
c000f3d7:	53                   	push   ebx
c000f3d8:	e8 53 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3dd:	6a 00                	push   0x0
c000f3df:	68 a8 04 00 c0       	push   0xc00004a8
c000f3e4:	6a 05                	push   0x5
c000f3e6:	53                   	push   ebx
c000f3e7:	e8 44 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3ec:	83 c4 20             	add    esp,0x20
c000f3ef:	6a 00                	push   0x0
c000f3f1:	68 b2 04 00 c0       	push   0xc00004b2
c000f3f6:	6a 06                	push   0x6
c000f3f8:	53                   	push   ebx
c000f3f9:	e8 32 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3fe:	6a 00                	push   0x0
c000f400:	68 bc 04 00 c0       	push   0xc00004bc
c000f405:	6a 07                	push   0x7
c000f407:	53                   	push   ebx
c000f408:	e8 23 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f40d:	83 c4 20             	add    esp,0x20
c000f410:	6a 00                	push   0x0
c000f412:	68 c6 04 00 c0       	push   0xc00004c6
c000f417:	6a 08                	push   0x8
c000f419:	53                   	push   ebx
c000f41a:	e8 11 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f41f:	6a 00                	push   0x0
c000f421:	68 ce 04 00 c0       	push   0xc00004ce
c000f426:	6a 09                	push   0x9
c000f428:	53                   	push   ebx
c000f429:	e8 02 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f42e:	83 c4 20             	add    esp,0x20
c000f431:	6a 00                	push   0x0
c000f433:	68 d8 04 00 c0       	push   0xc00004d8
c000f438:	6a 0a                	push   0xa
c000f43a:	53                   	push   ebx
c000f43b:	e8 f0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f440:	6a 00                	push   0x0
c000f442:	68 e0 04 00 c0       	push   0xc00004e0
c000f447:	6a 0b                	push   0xb
c000f449:	53                   	push   ebx
c000f44a:	e8 e1 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f44f:	83 c4 20             	add    esp,0x20
c000f452:	6a 00                	push   0x0
c000f454:	68 e8 04 00 c0       	push   0xc00004e8
c000f459:	6a 0c                	push   0xc
c000f45b:	53                   	push   ebx
c000f45c:	e8 cf fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f461:	6a 00                	push   0x0
c000f463:	68 f0 04 00 c0       	push   0xc00004f0
c000f468:	6a 0d                	push   0xd
c000f46a:	53                   	push   ebx
c000f46b:	e8 c0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f470:	83 c4 20             	add    esp,0x20
c000f473:	6a 00                	push   0x0
c000f475:	68 f8 04 00 c0       	push   0xc00004f8
c000f47a:	6a 0e                	push   0xe
c000f47c:	53                   	push   ebx
c000f47d:	e8 ae fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f482:	6a 00                	push   0x0
c000f484:	68 00 05 00 c0       	push   0xc0000500
c000f489:	6a 0f                	push   0xf
c000f48b:	53                   	push   ebx
c000f48c:	e8 9f fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f491:	83 c4 20             	add    esp,0x20
c000f494:	6a 00                	push   0x0
c000f496:	68 0a 05 00 c0       	push   0xc000050a
c000f49b:	6a 10                	push   0x10
c000f49d:	53                   	push   ebx
c000f49e:	e8 8d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4a3:	6a 00                	push   0x0
c000f4a5:	68 14 05 00 c0       	push   0xc0000514
c000f4aa:	6a 11                	push   0x11
c000f4ac:	53                   	push   ebx
c000f4ad:	e8 7e fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4b2:	83 c4 20             	add    esp,0x20
c000f4b5:	6a 00                	push   0x0
c000f4b7:	68 1e 05 00 c0       	push   0xc000051e
c000f4bc:	6a 12                	push   0x12
c000f4be:	53                   	push   ebx
c000f4bf:	e8 6c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4c4:	6a 01                	push   0x1
c000f4c6:	68 b8 05 00 c0       	push   0xc00005b8
c000f4cb:	6a 60                	push   0x60
c000f4cd:	53                   	push   ebx
c000f4ce:	e8 5d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4d3:	83 c4 20             	add    esp,0x20
c000f4d6:	6a 00                	push   0x0
c000f4d8:	68 bf 05 00 c0       	push   0xc00005bf
c000f4dd:	6a 20                	push   0x20
c000f4df:	53                   	push   ebx
c000f4e0:	e8 4b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4e5:	6a 00                	push   0x0
c000f4e7:	68 aa 05 00 c0       	push   0xc00005aa
c000f4ec:	6a 21                	push   0x21
c000f4ee:	53                   	push   ebx
c000f4ef:	e8 3c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4f4:	83 c4 20             	add    esp,0x20
c000f4f7:	6a 00                	push   0x0
c000f4f9:	68 b1 05 00 c0       	push   0xc00005b1
c000f4fe:	6a 22                	push   0x22
c000f500:	53                   	push   ebx
c000f501:	e8 2a fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f506:	6a 00                	push   0x0
c000f508:	68 28 05 00 c0       	push   0xc0000528
c000f50d:	6a 23                	push   0x23
c000f50f:	53                   	push   ebx
c000f510:	e8 1b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f515:	83 c4 20             	add    esp,0x20
c000f518:	6a 00                	push   0x0
c000f51a:	68 32 05 00 c0       	push   0xc0000532
c000f51f:	6a 24                	push   0x24
c000f521:	53                   	push   ebx
c000f522:	e8 09 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f527:	6a 00                	push   0x0
c000f529:	68 3c 05 00 c0       	push   0xc000053c
c000f52e:	6a 25                	push   0x25
c000f530:	53                   	push   ebx
c000f531:	e8 fa fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f536:	83 c4 20             	add    esp,0x20
c000f539:	6a 00                	push   0x0
c000f53b:	68 46 05 00 c0       	push   0xc0000546
c000f540:	6a 26                	push   0x26
c000f542:	53                   	push   ebx
c000f543:	e8 e8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f548:	6a 00                	push   0x0
c000f54a:	68 50 05 00 c0       	push   0xc0000550
c000f54f:	6a 27                	push   0x27
c000f551:	53                   	push   ebx
c000f552:	e8 d9 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f557:	83 c4 20             	add    esp,0x20
c000f55a:	6a 00                	push   0x0
c000f55c:	68 5a 05 00 c0       	push   0xc000055a
c000f561:	6a 28                	push   0x28
c000f563:	53                   	push   ebx
c000f564:	e8 c7 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f569:	6a 00                	push   0x0
c000f56b:	68 64 05 00 c0       	push   0xc0000564
c000f570:	6a 29                	push   0x29
c000f572:	53                   	push   ebx
c000f573:	e8 b8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f578:	83 c4 20             	add    esp,0x20
c000f57b:	6a 00                	push   0x0
c000f57d:	68 6e 05 00 c0       	push   0xc000056e
c000f582:	6a 2a                	push   0x2a
c000f584:	53                   	push   ebx
c000f585:	e8 a6 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f58a:	6a 00                	push   0x0
c000f58c:	68 78 05 00 c0       	push   0xc0000578
c000f591:	6a 2b                	push   0x2b
c000f593:	53                   	push   ebx
c000f594:	e8 97 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f599:	83 c4 20             	add    esp,0x20
c000f59c:	6a 00                	push   0x0
c000f59e:	68 82 05 00 c0       	push   0xc0000582
c000f5a3:	6a 2c                	push   0x2c
c000f5a5:	53                   	push   ebx
c000f5a6:	e8 85 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ab:	6a 00                	push   0x0
c000f5ad:	68 8c 05 00 c0       	push   0xc000058c
c000f5b2:	6a 2d                	push   0x2d
c000f5b4:	53                   	push   ebx
c000f5b5:	e8 76 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ba:	83 c4 20             	add    esp,0x20
c000f5bd:	6a 00                	push   0x0
c000f5bf:	68 96 05 00 c0       	push   0xc0000596
c000f5c4:	6a 2e                	push   0x2e
c000f5c6:	53                   	push   ebx
c000f5c7:	e8 64 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5cc:	6a 00                	push   0x0
c000f5ce:	68 a0 05 00 c0       	push   0xc00005a0
c000f5d3:	6a 2f                	push   0x2f
c000f5d5:	53                   	push   ebx
c000f5d6:	e8 55 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5db:	83 c4 20             	add    esp,0x20
c000f5de:	6a 00                	push   0x0
c000f5e0:	68 f6 05 00 c0       	push   0xc00005f6
c000f5e5:	6a 30                	push   0x30
c000f5e7:	53                   	push   ebx
c000f5e8:	e8 43 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ed:	6a 00                	push   0x0
c000f5ef:	68 00 06 00 c0       	push   0xc0000600
c000f5f4:	6a 31                	push   0x31
c000f5f6:	53                   	push   ebx
c000f5f7:	e8 34 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5fc:	83 c4 20             	add    esp,0x20
c000f5ff:	6a 00                	push   0x0
c000f601:	68 0a 06 00 c0       	push   0xc000060a
c000f606:	6a 32                	push   0x32
c000f608:	53                   	push   ebx
c000f609:	e8 22 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f60e:	6a 00                	push   0x0
c000f610:	68 14 06 00 c0       	push   0xc0000614
c000f615:	6a 33                	push   0x33
c000f617:	53                   	push   ebx
c000f618:	e8 13 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f61d:	83 c4 20             	add    esp,0x20
c000f620:	6a 00                	push   0x0
c000f622:	68 1e 06 00 c0       	push   0xc000061e
c000f627:	6a 34                	push   0x34
c000f629:	53                   	push   ebx
c000f62a:	e8 01 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f62f:	6a 00                	push   0x0
c000f631:	68 28 06 00 c0       	push   0xc0000628
c000f636:	6a 35                	push   0x35
c000f638:	53                   	push   ebx
c000f639:	e8 f2 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f63e:	83 c4 20             	add    esp,0x20
c000f641:	6a 00                	push   0x0
c000f643:	68 32 06 00 c0       	push   0xc0000632
c000f648:	6a 36                	push   0x36
c000f64a:	53                   	push   ebx
c000f64b:	e8 e0 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f650:	6a 00                	push   0x0
c000f652:	68 3c 06 00 c0       	push   0xc000063c
c000f657:	6a 37                	push   0x37
c000f659:	53                   	push   ebx
c000f65a:	e8 d1 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f65f:	83 c4 1c             	add    esp,0x1c
c000f662:	6a 03                	push   0x3
c000f664:	6a 02                	push   0x2
c000f666:	ff 35 90 f1 02 c0    	push   DWORD PTR ds:0xc002f190
c000f66c:	e8 b9 27 00 00       	call   c0011e2a <VAS::allocatePages(int, int)>
c000f671:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f678:	89 c6                	mov    esi,eax
c000f67a:	e8 0d 02 00 00       	call   c000f88c <malloc>
c000f67f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f685:	89 04 24             	mov    DWORD PTR [esp],eax
c000f688:	89 c7                	mov    edi,eax
c000f68a:	e8 93 17 00 00       	call   c0010e22 <TSS::TSS()>
c000f68f:	83 c4 0c             	add    esp,0xc
c000f692:	68 c6 04 00 c0       	push   0xc00004c6
c000f697:	56                   	push   esi
c000f698:	57                   	push   edi
c000f699:	e8 c4 17 00 00       	call   c0010e62 <TSS::setup(unsigned long, unsigned long)>
c000f69e:	89 c6                	mov    esi,eax
c000f6a0:	58                   	pop    eax
c000f6a1:	5a                   	pop    edx
c000f6a2:	6a 00                	push   0x0
c000f6a4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f6a8:	50                   	push   eax
c000f6a9:	e8 dc fb ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f6ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6b2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f6b7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f6be:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6c8:	80 ce 05             	or     dh,0x5
c000f6cb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f6ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6d6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f6d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6dc:	e8 87 fc ff ff       	call   c000f368 <IDT::flush()>
c000f6e1:	83 c4 20             	add    esp,0x20
c000f6e4:	5b                   	pop    ebx
c000f6e5:	5e                   	pop    esi
c000f6e6:	5f                   	pop    edi
c000f6e7:	c3                   	ret    

c000f6e8 <sbrk>:
c000f6e8:	55                   	push   ebp
c000f6e9:	57                   	push   edi
c000f6ea:	56                   	push   esi
c000f6eb:	53                   	push   ebx
c000f6ec:	83 ec 1c             	sub    esp,0x1c
c000f6ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6f3:	85 c0                	test   eax,eax
c000f6f5:	74 3e                	je     c000f735 <sbrk+0x4d>
c000f6f7:	78 43                	js     c000f73c <sbrk+0x54>
c000f6f9:	8b 15 28 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f028
c000f6ff:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f705:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f70b:	83 e2 01             	and    edx,0x1
c000f70e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f712:	8b 0d e0 dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002dde0
c000f718:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f71c:	05 ff 0f 00 00       	add    eax,0xfff
c000f721:	89 c2                	mov    edx,eax
c000f723:	78 2f                	js     c000f754 <sbrk+0x6c>
c000f725:	c1 fa 0c             	sar    edx,0xc
c000f728:	89 d7                	mov    edi,edx
c000f72a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f72e:	be 00 00 00 00       	mov    esi,0x0
c000f733:	eb 36                	jmp    c000f76b <sbrk+0x83>
c000f735:	a1 e0 dd 02 c0       	mov    eax,ds:0xc002dde0
c000f73a:	eb 73                	jmp    c000f7af <sbrk+0xc7>
c000f73c:	83 ec 08             	sub    esp,0x8
c000f73f:	50                   	push   eax
c000f740:	68 48 ab 02 c0       	push   0xc002ab48
c000f745:	e8 ad 31 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000f74a:	83 c4 10             	add    esp,0x10
c000f74d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f752:	eb 5b                	jmp    c000f7af <sbrk+0xc7>
c000f754:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f75a:	eb c9                	jmp    c000f725 <sbrk+0x3d>
c000f75c:	81 05 e0 dd 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002dde0,0x1000
c000f766:	46                   	inc    esi
c000f767:	39 f7                	cmp    edi,esi
c000f769:	74 33                	je     c000f79e <sbrk+0xb6>
c000f76b:	8b 1d 90 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f190
c000f771:	8b 2d e0 dd 02 c0    	mov    ebp,DWORD PTR ds:0xc002dde0
c000f777:	e8 3c 04 00 00       	call   c000fbb8 <Phys::allocatePage()>
c000f77c:	68 01 0c 00 00       	push   0xc01
c000f781:	55                   	push   ebp
c000f782:	50                   	push   eax
c000f783:	53                   	push   ebx
c000f784:	e8 9f 25 00 00       	call   c0011d28 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f789:	83 c4 10             	add    esp,0x10
c000f78c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f791:	74 c9                	je     c000f75c <sbrk+0x74>
c000f793:	8b 1d e0 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dde0
c000f799:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f79c:	eb be                	jmp    c000f75c <sbrk+0x74>
c000f79e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7a3:	75 12                	jne    c000f7b7 <sbrk+0xcf>
c000f7a5:	0f 20 d8             	mov    eax,cr3
c000f7a8:	0f 22 d8             	mov    cr3,eax
c000f7ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7af:	83 c4 1c             	add    esp,0x1c
c000f7b2:	5b                   	pop    ebx
c000f7b3:	5e                   	pop    esi
c000f7b4:	5f                   	pop    edi
c000f7b5:	5d                   	pop    ebp
c000f7b6:	c3                   	ret    
c000f7b7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f7bb:	89 cb                	mov    ebx,ecx
c000f7bd:	c1 eb 0a             	shr    ebx,0xa
c000f7c0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f7c6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f7cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7d0:	c1 e0 0c             	shl    eax,0xc
c000f7d3:	01 c8                	add    eax,ecx
c000f7d5:	c1 e8 0a             	shr    eax,0xa
c000f7d8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f7dd:	2d 00 00 40 00       	sub    eax,0x400000
c000f7e2:	39 c3                	cmp    ebx,eax
c000f7e4:	77 c5                	ja     c000f7ab <sbrk+0xc3>
c000f7e6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7e9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7ef:	39 d8                	cmp    eax,ebx
c000f7f1:	73 f3                	jae    c000f7e6 <sbrk+0xfe>
c000f7f3:	eb b6                	jmp    c000f7ab <sbrk+0xc3>

c000f7f5 <mmap>:
c000f7f5:	83 ec 18             	sub    esp,0x18
c000f7f8:	68 78 ab 02 c0       	push   0xc002ab78
c000f7fd:	e8 2b ab 00 00       	call   c001a32d <Krnl::panic(char const*)>
c000f802:	b8 00 00 00 00       	mov    eax,0x0
c000f807:	83 c4 1c             	add    esp,0x1c
c000f80a:	c3                   	ret    

c000f80b <munmap>:
c000f80b:	83 ec 18             	sub    esp,0x18
c000f80e:	68 7d ab 02 c0       	push   0xc002ab7d
c000f813:	e8 15 ab 00 00       	call   c001a32d <Krnl::panic(char const*)>
c000f818:	b8 00 00 00 00       	mov    eax,0x0
c000f81d:	83 c4 1c             	add    esp,0x1c
c000f820:	c3                   	ret    

c000f821 <liballoc_lock()>:
c000f821:	fa                   	cli    
c000f822:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c000f828:	b8 00 00 00 00       	mov    eax,0x0
c000f82d:	c3                   	ret    

c000f82e <liballoc_unlock()>:
c000f82e:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c000f833:	48                   	dec    eax
c000f834:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c000f839:	75 01                	jne    c000f83c <liballoc_unlock()+0xe>
c000f83b:	fb                   	sti    
c000f83c:	b8 00 00 00 00       	mov    eax,0x0
c000f841:	c3                   	ret    

c000f842 <liballoc_alloc(int)>:
c000f842:	83 ec 10             	sub    esp,0x10
c000f845:	68 01 08 00 00       	push   0x801
c000f84a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f84e:	ff 35 90 f1 02 c0    	push   DWORD PTR ds:0xc002f190
c000f854:	e8 d1 25 00 00       	call   c0011e2a <VAS::allocatePages(int, int)>
c000f859:	83 c4 1c             	add    esp,0x1c
c000f85c:	c3                   	ret    

c000f85d <liballoc_free(void*, int)>:
c000f85d:	83 ec 14             	sub    esp,0x14
c000f860:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f864:	ff 35 90 f1 02 c0    	push   DWORD PTR ds:0xc002f190
c000f86a:	e8 65 22 00 00       	call   c0011ad4 <VAS::freeAllocatedPages(unsigned long)>
c000f86f:	b8 00 00 00 00       	mov    eax,0x0
c000f874:	83 c4 1c             	add    esp,0x1c
c000f877:	c3                   	ret    

c000f878 <realloc>:
c000f878:	83 ec 14             	sub    esp,0x14
c000f87b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f87f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f883:	e8 a4 1d ff ff       	call   c000162c <dlrealloc>
c000f888:	83 c4 1c             	add    esp,0x1c
c000f88b:	c3                   	ret    

c000f88c <malloc>:
c000f88c:	83 ec 18             	sub    esp,0x18
c000f88f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f893:	e8 57 18 ff ff       	call   c00010ef <dlmalloc>
c000f898:	83 c4 1c             	add    esp,0x1c
c000f89b:	c3                   	ret    

c000f89c <free>:
c000f89c:	83 ec 18             	sub    esp,0x18
c000f89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8a3:	e8 ec 14 ff ff       	call   c0000d94 <dlfree>
c000f8a8:	83 c4 1c             	add    esp,0x1c
c000f8ab:	c3                   	ret    

c000f8ac <rfree>:
c000f8ac:	83 ec 18             	sub    esp,0x18
c000f8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8b3:	e8 dc 14 ff ff       	call   c0000d94 <dlfree>
c000f8b8:	83 c4 1c             	add    esp,0x1c
c000f8bb:	c3                   	ret    

c000f8bc <calloc>:
c000f8bc:	56                   	push   esi
c000f8bd:	53                   	push   ebx
c000f8be:	83 ec 10             	sub    esp,0x10
c000f8c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f8c5:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f8ca:	53                   	push   ebx
c000f8cb:	e8 bc ff ff ff       	call   c000f88c <malloc>
c000f8d0:	89 c6                	mov    esi,eax
c000f8d2:	83 c4 0c             	add    esp,0xc
c000f8d5:	53                   	push   ebx
c000f8d6:	6a 00                	push   0x0
c000f8d8:	50                   	push   eax
c000f8d9:	e8 72 0e ff ff       	call   c0000750 <memset>
c000f8de:	89 f0                	mov    eax,esi
c000f8e0:	83 c4 14             	add    esp,0x14
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	c3                   	ret    

c000f8e6 <kernel_main>:
c000f8e6:	57                   	push   edi
c000f8e7:	bf f9 03 00 00       	mov    edi,0x3f9
c000f8ec:	56                   	push   esi
c000f8ed:	89 fa                	mov    edx,edi
c000f8ef:	53                   	push   ebx
c000f8f0:	31 f6                	xor    esi,esi
c000f8f2:	83 ec 2c             	sub    esp,0x2c
c000f8f5:	89 f0                	mov    eax,esi
c000f8f7:	ee                   	out    dx,al
c000f8f8:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f8fd:	b0 80                	mov    al,0x80
c000f8ff:	89 da                	mov    edx,ebx
c000f901:	ee                   	out    dx,al
c000f902:	b1 03                	mov    cl,0x3
c000f904:	ba f8 03 00 00       	mov    edx,0x3f8
c000f909:	88 c8                	mov    al,cl
c000f90b:	ee                   	out    dx,al
c000f90c:	89 f0                	mov    eax,esi
c000f90e:	89 fa                	mov    edx,edi
c000f910:	ee                   	out    dx,al
c000f911:	88 c8                	mov    al,cl
c000f913:	89 da                	mov    edx,ebx
c000f915:	ee                   	out    dx,al
c000f916:	b0 c7                	mov    al,0xc7
c000f918:	ba fa 03 00 00       	mov    edx,0x3fa
c000f91d:	ee                   	out    dx,al
c000f91e:	b0 0b                	mov    al,0xb
c000f920:	ba fc 03 00 00       	mov    edx,0x3fc
c000f925:	ee                   	out    dx,al
c000f926:	68 84 ab 02 c0       	push   0xc002ab84
c000f92b:	e8 c7 2f 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000f930:	e8 05 09 00 00       	call   c001023a <installVgaTextImplementation()>
c000f935:	0f b6 05 00 de 02 c0 	movzx  eax,BYTE PTR ds:0xc002de00
c000f93c:	83 c4 10             	add    esp,0x10
c000f93f:	84 c0                	test   al,al
c000f941:	74 6c                	je     c000f9af <kernel_main+0xc9>
c000f943:	31 db                	xor    ebx,ebx
c000f945:	bf 09 00 00 00       	mov    edi,0x9
c000f94a:	be 05 00 00 00       	mov    esi,0x5
c000f94f:	31 c9                	xor    ecx,ecx
c000f951:	eb 2a                	jmp    c000f97d <kernel_main+0x97>
c000f953:	3c 0d                	cmp    al,0xd
c000f955:	74 1a                	je     c000f971 <kernel_main+0x8b>
c000f957:	3c 0a                	cmp    al,0xa
c000f959:	74 40                	je     c000f99b <kernel_main+0xb5>
c000f95b:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f95e:	80 cc 0e             	or     ah,0xe
c000f961:	c1 e2 04             	shl    edx,0x4
c000f964:	01 ca                	add    edx,ecx
c000f966:	41                   	inc    ecx
c000f967:	01 fa                	add    edx,edi
c000f969:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f971:	43                   	inc    ebx
c000f972:	0f b6 83 00 de 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd2200]
c000f979:	84 c0                	test   al,al
c000f97b:	74 32                	je     c000f9af <kernel_main+0xc9>
c000f97d:	80 b9 36 de 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd21ca],0xdb
c000f984:	75 cd                	jne    c000f953 <kernel_main+0x6d>
c000f986:	0f b6 91 35 de 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd21cb]
c000f98d:	83 e2 fe             	and    edx,0xfffffffe
c000f990:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f996:	75 bb                	jne    c000f953 <kernel_main+0x6d>
c000f998:	47                   	inc    edi
c000f999:	eb b8                	jmp    c000f953 <kernel_main+0x6d>
c000f99b:	43                   	inc    ebx
c000f99c:	46                   	inc    esi
c000f99d:	31 c9                	xor    ecx,ecx
c000f99f:	0f b6 83 00 de 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd2200]
c000f9a6:	bf 09 00 00 00       	mov    edi,0x9
c000f9ab:	84 c0                	test   al,al
c000f9ad:	75 ce                	jne    c000f97d <kernel_main+0x97>
c000f9af:	83 ec 0c             	sub    esp,0xc
c000f9b2:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f9b7:	a3 40 f0 02 c0       	mov    ds:0xc002f040,eax
c000f9bc:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f9c1:	05 ff 0f 00 00       	add    eax,0xfff
c000f9c6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f9cb:	50                   	push   eax
c000f9cc:	e8 30 03 00 00       	call   c000fd01 <Phys::physicalMemorySetup(unsigned int)>
c000f9d1:	e8 da 1c 00 00       	call   c00116b0 <Virt::virtualMemorySetup()>
c000f9d6:	58                   	pop    eax
c000f9d7:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f9db:	53                   	push   ebx
c000f9dc:	e8 1b 1f 00 00       	call   c00118fc <VAS::VAS()>
c000f9e1:	89 1d 90 f1 02 c0    	mov    DWORD PTR ds:0xc002f190,ebx
c000f9e7:	e8 34 06 ff ff       	call   c0000020 <callGlobalConstructors>
c000f9ec:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f9f3:	e8 94 fe ff ff       	call   c000f88c <malloc>
c000f9f8:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9fb:	89 c6                	mov    esi,eax
c000f9fd:	e8 82 ed ff ff       	call   c000e784 <Computer::Computer()>
c000fa02:	6a 00                	push   0x0
c000fa04:	89 35 28 f0 02 c0    	mov    DWORD PTR ds:0xc002f028,esi
c000fa0a:	6a 00                	push   0x0
c000fa0c:	6a 00                	push   0x0
c000fa0e:	56                   	push   esi
c000fa0f:	e8 c0 f4 ff ff       	call   c000eed4 <Computer::open(int, int, void*)>
c000fa14:	83 c4 14             	add    esp,0x14
c000fa17:	53                   	push   ebx
c000fa18:	e8 8f 21 00 00       	call   c0011bac <VAS::~VAS()>
c000fa1d:	83 c4 30             	add    esp,0x30
c000fa20:	5b                   	pop    ebx
c000fa21:	5e                   	pop    esi
c000fa22:	5f                   	pop    edi
c000fa23:	c3                   	ret    

c000fa24 <Phys::allocateDMA(unsigned long)>:
c000fa24:	55                   	push   ebp
c000fa25:	31 d2                	xor    edx,edx
c000fa27:	57                   	push   edi
c000fa28:	31 ed                	xor    ebp,ebp
c000fa2a:	56                   	push   esi
c000fa2b:	31 c9                	xor    ecx,ecx
c000fa2d:	53                   	push   ebx
c000fa2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fa32:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fa38:	31 c0                	xor    eax,eax
c000fa3a:	c1 ee 0c             	shr    esi,0xc
c000fa3d:	eb 17                	jmp    c000fa56 <Phys::allocateDMA(unsigned long)+0x32>
c000fa3f:	85 c9                	test   ecx,ecx
c000fa41:	75 04                	jne    c000fa47 <Phys::allocateDMA(unsigned long)+0x23>
c000fa43:	89 d5                	mov    ebp,edx
c000fa45:	89 d0                	mov    eax,edx
c000fa47:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fa4a:	39 de                	cmp    esi,ebx
c000fa4c:	74 20                	je     c000fa6e <Phys::allocateDMA(unsigned long)+0x4a>
c000fa4e:	42                   	inc    edx
c000fa4f:	89 d9                	mov    ecx,ebx
c000fa51:	83 fa 2f             	cmp    edx,0x2f
c000fa54:	7f 11                	jg     c000fa67 <Phys::allocateDMA(unsigned long)+0x43>
c000fa56:	80 ba 80 f0 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd0f80],0x0
c000fa5d:	74 e0                	je     c000fa3f <Phys::allocateDMA(unsigned long)+0x1b>
c000fa5f:	31 c9                	xor    ecx,ecx
c000fa61:	42                   	inc    edx
c000fa62:	83 fa 2f             	cmp    edx,0x2f
c000fa65:	7e ef                	jle    c000fa56 <Phys::allocateDMA(unsigned long)+0x32>
c000fa67:	5b                   	pop    ebx
c000fa68:	31 c0                	xor    eax,eax
c000fa6a:	5e                   	pop    esi
c000fa6b:	5f                   	pop    edi
c000fa6c:	5d                   	pop    ebp
c000fa6d:	c3                   	ret    
c000fa6e:	8d 14 30             	lea    edx,[eax+esi*1]
c000fa71:	89 d7                	mov    edi,edx
c000fa73:	4f                   	dec    edi
c000fa74:	79 03                	jns    c000fa79 <Phys::allocateDMA(unsigned long)+0x55>
c000fa76:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fa79:	c1 ff 04             	sar    edi,0x4
c000fa7c:	89 c2                	mov    edx,eax
c000fa7e:	c1 fa 04             	sar    edx,0x4
c000fa81:	39 fa                	cmp    edx,edi
c000fa83:	75 2f                	jne    c000fab4 <Phys::allocateDMA(unsigned long)+0x90>
c000fa85:	85 db                	test   ebx,ebx
c000fa87:	74 1a                	je     c000faa3 <Phys::allocateDMA(unsigned long)+0x7f>
c000fa89:	be 80 f0 02 c0       	mov    esi,0xc002f080
c000fa8e:	8d 90 80 f0 02 c0    	lea    edx,[eax-0x3ffd0f80]
c000fa94:	f7 d6                	not    esi
c000fa96:	29 c6                	sub    esi,eax
c000fa98:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fa9b:	42                   	inc    edx
c000fa9c:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fa9f:	39 d9                	cmp    ecx,ebx
c000faa1:	7f f5                	jg     c000fa98 <Phys::allocateDMA(unsigned long)+0x74>
c000faa3:	85 ff                	test   edi,edi
c000faa5:	74 13                	je     c000faba <Phys::allocateDMA(unsigned long)+0x96>
c000faa7:	5b                   	pop    ebx
c000faa8:	05 50 20 0c 00       	add    eax,0xc2050
c000faad:	5e                   	pop    esi
c000faae:	c1 e0 0c             	shl    eax,0xc
c000fab1:	5f                   	pop    edi
c000fab2:	5d                   	pop    ebp
c000fab3:	c3                   	ret    
c000fab4:	89 ea                	mov    edx,ebp
c000fab6:	31 c9                	xor    ecx,ecx
c000fab8:	eb a7                	jmp    c000fa61 <Phys::allocateDMA(unsigned long)+0x3d>
c000faba:	5b                   	pop    ebx
c000fabb:	c1 e0 0c             	shl    eax,0xc
c000fabe:	5e                   	pop    esi
c000fabf:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fac4:	5f                   	pop    edi
c000fac5:	5d                   	pop    ebp
c000fac6:	c3                   	ret    

c000fac7 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fac7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000facb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000facf:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fad5:	c1 e9 0c             	shr    ecx,0xc
c000fad8:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fadd:	76 25                	jbe    c000fb04 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fadf:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fae4:	c1 e8 0c             	shr    eax,0xc
c000fae7:	8d 50 10             	lea    edx,[eax+0x10]
c000faea:	85 c9                	test   ecx,ecx
c000faec:	74 15                	je     c000fb03 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000faee:	8d 82 80 f0 02 c0    	lea    eax,[edx-0x3ffd0f80]
c000faf4:	8d 94 11 80 f0 02 c0 	lea    edx,[ecx+edx*1-0x3ffd0f80]
c000fafb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fafe:	40                   	inc    eax
c000faff:	39 d0                	cmp    eax,edx
c000fb01:	75 f8                	jne    c000fafb <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fb03:	c3                   	ret    
c000fb04:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fb0a:	c1 ea 0c             	shr    edx,0xc
c000fb0d:	eb db                	jmp    c000faea <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fb0f <Phys::setPageState(unsigned long, bool)>:
c000fb0f:	56                   	push   esi
c000fb10:	ba 01 00 00 00       	mov    edx,0x1
c000fb15:	53                   	push   ebx
c000fb16:	8b 35 44 df 02 c0    	mov    esi,DWORD PTR ds:0xc002df44
c000fb1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fb24:	89 c8                	mov    eax,ecx
c000fb26:	83 e1 07             	and    ecx,0x7
c000fb29:	c1 e8 03             	shr    eax,0x3
c000fb2c:	d3 e3                	shl    ebx,cl
c000fb2e:	01 c6                	add    esi,eax
c000fb30:	d3 e2                	shl    edx,cl
c000fb32:	f7 d2                	not    edx
c000fb34:	20 16                	and    BYTE PTR [esi],dl
c000fb36:	03 05 44 df 02 c0    	add    eax,DWORD PTR ds:0xc002df44
c000fb3c:	08 18                	or     BYTE PTR [eax],bl
c000fb3e:	5b                   	pop    ebx
c000fb3f:	5e                   	pop    esi
c000fb40:	c3                   	ret    

c000fb41 <Phys::getPageState(unsigned long)>:
c000fb41:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fb45:	8b 15 44 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df44
c000fb4b:	89 c8                	mov    eax,ecx
c000fb4d:	83 e1 07             	and    ecx,0x7
c000fb50:	c1 e8 03             	shr    eax,0x3
c000fb53:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fb57:	d3 f8                	sar    eax,cl
c000fb59:	83 e0 01             	and    eax,0x1
c000fb5c:	c3                   	ret    

c000fb5d <Phys::freePage(unsigned long)>:
c000fb5d:	53                   	push   ebx
c000fb5e:	83 ec 08             	sub    esp,0x8
c000fb61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb65:	3d ff ff 07 00       	cmp    eax,0x7ffff
c000fb6a:	76 3a                	jbe    c000fba6 <Phys::freePage(unsigned long)+0x49>
c000fb6c:	c1 e8 0c             	shr    eax,0xc
c000fb6f:	50                   	push   eax
c000fb70:	89 c3                	mov    ebx,eax
c000fb72:	e8 ca ff ff ff       	call   c000fb41 <Phys::getPageState(unsigned long)>
c000fb77:	5a                   	pop    edx
c000fb78:	84 c0                	test   al,al
c000fb7a:	74 19                	je     c000fb95 <Phys::freePage(unsigned long)+0x38>
c000fb7c:	83 ec 08             	sub    esp,0x8
c000fb7f:	ff 0d 70 f0 02 c0    	dec    DWORD PTR ds:0xc002f070
c000fb85:	6a 00                	push   0x0
c000fb87:	53                   	push   ebx
c000fb88:	e8 82 ff ff ff       	call   c000fb0f <Phys::setPageState(unsigned long, bool)>
c000fb8d:	83 c4 10             	add    esp,0x10
c000fb90:	83 c4 08             	add    esp,0x8
c000fb93:	5b                   	pop    ebx
c000fb94:	c3                   	ret    
c000fb95:	c7 44 24 10 9b ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ab9b
c000fb9d:	83 c4 08             	add    esp,0x8
c000fba0:	5b                   	pop    ebx
c000fba1:	e9 87 a7 00 00       	jmp    c001a32d <Krnl::panic(char const*)>
c000fba6:	68 00 10 00 00       	push   0x1000
c000fbab:	50                   	push   eax
c000fbac:	e8 16 ff ff ff       	call   c000fac7 <Phys::freeDMA(unsigned long, unsigned long)>
c000fbb1:	59                   	pop    ecx
c000fbb2:	5b                   	pop    ebx
c000fbb3:	83 c4 08             	add    esp,0x8
c000fbb6:	5b                   	pop    ebx
c000fbb7:	c3                   	ret    

c000fbb8 <Phys::allocatePage()>:
c000fbb8:	56                   	push   esi
c000fbb9:	53                   	push   ebx
c000fbba:	51                   	push   ecx
c000fbbb:	8b 35 64 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f064
c000fbc1:	89 f3                	mov    ebx,esi
c000fbc3:	eb 0a                	jmp    c000fbcf <Phys::allocatePage()+0x17>
c000fbc5:	89 1d 64 f0 02 c0    	mov    DWORD PTR ds:0xc002f064,ebx
c000fbcb:	39 de                	cmp    esi,ebx
c000fbcd:	74 24                	je     c000fbf3 <Phys::allocatePage()+0x3b>
c000fbcf:	53                   	push   ebx
c000fbd0:	e8 6c ff ff ff       	call   c000fb41 <Phys::getPageState(unsigned long)>
c000fbd5:	5a                   	pop    edx
c000fbd6:	84 c0                	test   al,al
c000fbd8:	74 77                	je     c000fc51 <Phys::allocatePage()+0x99>
c000fbda:	43                   	inc    ebx
c000fbdb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fbe1:	75 e2                	jne    c000fbc5 <Phys::allocatePage()+0xd>
c000fbe3:	31 db                	xor    ebx,ebx
c000fbe5:	c7 05 64 f0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f064,0x0
c000fbef:	39 de                	cmp    esi,ebx
c000fbf1:	75 dc                	jne    c000fbcf <Phys::allocatePage()+0x17>
c000fbf3:	83 ec 0c             	sub    esp,0xc
c000fbf6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fbfb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fbfe:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000fc04:	e8 1b 2a 00 00       	call   c0012624 <VAS::scanForEviction()>
c000fc09:	83 c4 10             	add    esp,0x10
c000fc0c:	85 c0                	test   eax,eax
c000fc0e:	75 59                	jne    c000fc69 <Phys::allocatePage()+0xb1>
c000fc10:	83 ec 0c             	sub    esp,0xc
c000fc13:	68 b1 ab 02 c0       	push   0xc002abb1
c000fc18:	e8 da 2c 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000fc1d:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fc24:	e8 fb fd ff ff       	call   c000fa24 <Phys::allocateDMA(unsigned long)>
c000fc29:	83 c4 10             	add    esp,0x10
c000fc2c:	85 c0                	test   eax,eax
c000fc2e:	75 39                	jne    c000fc69 <Phys::allocatePage()+0xb1>
c000fc30:	83 ec 0c             	sub    esp,0xc
c000fc33:	68 c2 ab 02 c0       	push   0xc002abc2
c000fc38:	e8 f0 a6 00 00       	call   c001a32d <Krnl::panic(char const*)>
c000fc3d:	83 c4 10             	add    esp,0x10
c000fc40:	8b 1d 64 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f064
c000fc46:	53                   	push   ebx
c000fc47:	e8 f5 fe ff ff       	call   c000fb41 <Phys::getPageState(unsigned long)>
c000fc4c:	5a                   	pop    edx
c000fc4d:	84 c0                	test   al,al
c000fc4f:	75 89                	jne    c000fbda <Phys::allocatePage()+0x22>
c000fc51:	6a 01                	push   0x1
c000fc53:	53                   	push   ebx
c000fc54:	e8 b6 fe ff ff       	call   c000fb0f <Phys::setPageState(unsigned long, bool)>
c000fc59:	a1 64 f0 02 c0       	mov    eax,ds:0xc002f064
c000fc5e:	59                   	pop    ecx
c000fc5f:	ff 05 70 f0 02 c0    	inc    DWORD PTR ds:0xc002f070
c000fc65:	c1 e0 0c             	shl    eax,0xc
c000fc68:	5b                   	pop    ebx
c000fc69:	5a                   	pop    edx
c000fc6a:	5b                   	pop    ebx
c000fc6b:	5e                   	pop    esi
c000fc6c:	c3                   	ret    

c000fc6d <Phys::allocateContiguousPages(int)>:
c000fc6d:	57                   	push   edi
c000fc6e:	56                   	push   esi
c000fc6f:	53                   	push   ebx
c000fc70:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc74:	fa                   	cli    
c000fc75:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c000fc7b:	31 db                	xor    ebx,ebx
c000fc7d:	85 db                	test   ebx,ebx
c000fc7f:	75 11                	jne    c000fc92 <Phys::allocateContiguousPages(int)+0x25>
c000fc81:	e8 32 ff ff ff       	call   c000fbb8 <Phys::allocatePage()>
c000fc86:	83 fe 01             	cmp    esi,0x1
c000fc89:	89 c7                	mov    edi,eax
c000fc8b:	74 21                	je     c000fcae <Phys::allocateContiguousPages(int)+0x41>
c000fc8d:	bb 01 00 00 00       	mov    ebx,0x1
c000fc92:	e8 21 ff ff ff       	call   c000fbb8 <Phys::allocatePage()>
c000fc97:	89 da                	mov    edx,ebx
c000fc99:	c1 e2 0c             	shl    edx,0xc
c000fc9c:	01 fa                	add    edx,edi
c000fc9e:	39 c2                	cmp    edx,eax
c000fca0:	74 20                	je     c000fcc2 <Phys::allocateContiguousPages(int)+0x55>
c000fca2:	bb 01 00 00 00       	mov    ebx,0x1
c000fca7:	89 c7                	mov    edi,eax
c000fca9:	83 fe 01             	cmp    esi,0x1
c000fcac:	75 e4                	jne    c000fc92 <Phys::allocateContiguousPages(int)+0x25>
c000fcae:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c000fcb3:	48                   	dec    eax
c000fcb4:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c000fcb9:	75 01                	jne    c000fcbc <Phys::allocateContiguousPages(int)+0x4f>
c000fcbb:	fb                   	sti    
c000fcbc:	89 f8                	mov    eax,edi
c000fcbe:	5b                   	pop    ebx
c000fcbf:	5e                   	pop    esi
c000fcc0:	5f                   	pop    edi
c000fcc1:	c3                   	ret    
c000fcc2:	43                   	inc    ebx
c000fcc3:	39 f3                	cmp    ebx,esi
c000fcc5:	75 b6                	jne    c000fc7d <Phys::allocateContiguousPages(int)+0x10>
c000fcc7:	eb e5                	jmp    c000fcae <Phys::allocateContiguousPages(int)+0x41>

c000fcc9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fcc9:	56                   	push   esi
c000fcca:	53                   	push   ebx
c000fccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fccf:	39 1d 68 f0 02 c0    	cmp    DWORD PTR ds:0xc002f068,ebx
c000fcd5:	73 06                	jae    c000fcdd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fcd7:	89 1d 68 f0 02 c0    	mov    DWORD PTR ds:0xc002f068,ebx
c000fcdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fce1:	c1 eb 0c             	shr    ebx,0xc
c000fce4:	c1 e8 0c             	shr    eax,0xc
c000fce7:	39 d8                	cmp    eax,ebx
c000fce9:	73 13                	jae    c000fcfe <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fceb:	6a 00                	push   0x0
c000fced:	8d 70 01             	lea    esi,[eax+0x1]
c000fcf0:	50                   	push   eax
c000fcf1:	e8 19 fe ff ff       	call   c000fb0f <Phys::setPageState(unsigned long, bool)>
c000fcf6:	5a                   	pop    edx
c000fcf7:	89 f0                	mov    eax,esi
c000fcf9:	59                   	pop    ecx
c000fcfa:	39 f3                	cmp    ebx,esi
c000fcfc:	75 ed                	jne    c000fceb <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fcfe:	5b                   	pop    ebx
c000fcff:	5e                   	pop    esi
c000fd00:	c3                   	ret    

c000fd01 <Phys::physicalMemorySetup(unsigned int)>:
c000fd01:	55                   	push   ebp
c000fd02:	57                   	push   edi
c000fd03:	56                   	push   esi
c000fd04:	53                   	push   ebx
c000fd05:	31 db                	xor    ebx,ebx
c000fd07:	83 ec 40             	sub    esp,0x40
c000fd0a:	6a 30                	push   0x30
c000fd0c:	6a 00                	push   0x0
c000fd0e:	68 80 f0 02 c0       	push   0xc002f080
c000fd13:	e8 38 0a ff ff       	call   c0000750 <memset>
c000fd18:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fd1c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fd21:	05 00 10 00 00       	add    eax,0x1000
c000fd26:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fd2a:	83 c4 10             	add    esp,0x10
c000fd2d:	83 ec 08             	sub    esp,0x8
c000fd30:	6a 01                	push   0x1
c000fd32:	53                   	push   ebx
c000fd33:	43                   	inc    ebx
c000fd34:	e8 d6 fd ff ff       	call   c000fb0f <Phys::setPageState(unsigned long, bool)>
c000fd39:	83 c4 10             	add    esp,0x10
c000fd3c:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fd42:	75 e9                	jne    c000fd2d <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fd44:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fd4b:	66 85 c0             	test   ax,ax
c000fd4e:	0f 84 8e 01 00 00    	je     c000fee2 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fd54:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fd58:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fd60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd64:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fd69:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fd6d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fd75:	eb 15                	jmp    c000fd8c <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fd77:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fd7b:	83 c3 18             	add    ebx,0x18
c000fd7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd82:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fd86:	0f 84 66 01 00 00    	je     c000fef2 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fd8c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fd8f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fd92:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fd95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd99:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd9d:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fd9f:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fda2:	01 f0                	add    eax,esi
c000fda4:	55                   	push   ebp
c000fda5:	11 fa                	adc    edx,edi
c000fda7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fdab:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fdaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fdb3:	56                   	push   esi
c000fdb4:	68 fc ab 02 c0       	push   0xc002abfc
c000fdb9:	e8 39 2b 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000fdbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fdc2:	83 c4 10             	add    esp,0x10
c000fdc5:	09 f8                	or     eax,edi
c000fdc7:	0f 85 25 01 00 00    	jne    c000fef2 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fdcd:	4d                   	dec    ebp
c000fdce:	75 a7                	jne    c000fd77 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fdd0:	ba 00 00 08 00       	mov    edx,0x80000
c000fdd5:	89 c1                	mov    ecx,eax
c000fdd7:	39 f2                	cmp    edx,esi
c000fdd9:	19 f9                	sbb    ecx,edi
c000fddb:	0f 82 a7 00 00 00    	jb     c000fe88 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fde1:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fde5:	89 c1                	mov    ecx,eax
c000fde7:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fdeb:	0f 83 97 00 00 00    	jae    c000fe88 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fdf1:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fdf6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fdfa:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fdfe:	39 fa                	cmp    edx,edi
c000fe00:	19 e8                	sbb    eax,ebp
c000fe02:	0f 82 14 01 00 00    	jb     c000ff1c <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fe08:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fe0c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fe10:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fe16:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fe1b:	83 d5 ff             	adc    ebp,0xffffffff
c000fe1e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fe22:	31 c0                	xor    eax,eax
c000fe24:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fe28:	39 fa                	cmp    edx,edi
c000fe2a:	89 c1                	mov    ecx,eax
c000fe2c:	19 e9                	sbb    ecx,ebp
c000fe2e:	0f 83 43 ff ff ff    	jae    c000fd77 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe34:	be 00 00 08 00       	mov    esi,0x80000
c000fe39:	50                   	push   eax
c000fe3a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fe3e:	57                   	push   edi
c000fe3f:	56                   	push   esi
c000fe40:	68 20 ac 02 c0       	push   0xc002ac20
c000fe45:	e8 ad 2a 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000fe4a:	5a                   	pop    edx
c000fe4b:	59                   	pop    ecx
c000fe4c:	57                   	push   edi
c000fe4d:	56                   	push   esi
c000fe4e:	e8 76 fe ff ff       	call   c000fcc9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fe53:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fe57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fe5b:	83 c4 0c             	add    esp,0xc
c000fe5e:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fe62:	03 05 74 f0 02 c0    	add    eax,DWORD PTR ds:0xc002f074
c000fe68:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fe6f:	a3 74 f0 02 c0       	mov    ds:0xc002f074,eax
c000fe74:	52                   	push   edx
c000fe75:	50                   	push   eax
c000fe76:	68 de ab 02 c0       	push   0xc002abde
c000fe7b:	e8 77 2a 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c000fe80:	83 c4 10             	add    esp,0x10
c000fe83:	e9 ef fe ff ff       	jmp    c000fd77 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe88:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fe8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe94:	39 ea                	cmp    edx,ebp
c000fe96:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fe9a:	0f 82 d7 fe ff ff    	jb     c000fd77 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fea0:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fea5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fea9:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fead:	0f 83 c4 fe ff ff    	jae    c000fd77 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000feb3:	39 ee                	cmp    esi,ebp
c000feb5:	89 f8                	mov    eax,edi
c000feb7:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000febb:	0f 83 78 ff ff ff    	jae    c000fe39 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fec1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fec5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fec9:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fecd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fed1:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fed5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fed9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fedd:	e9 57 ff ff ff       	jmp    c000fe39 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fee2:	83 ec 0c             	sub    esp,0xc
c000fee5:	68 d0 ab 02 c0       	push   0xc002abd0
c000feea:	e8 3e a4 00 00       	call   c001a32d <Krnl::panic(char const*)>
c000feef:	83 c4 10             	add    esp,0x10
c000fef2:	bb 40 01 00 00       	mov    ebx,0x140
c000fef7:	83 ec 08             	sub    esp,0x8
c000fefa:	6a 00                	push   0x0
c000fefc:	53                   	push   ebx
c000fefd:	43                   	inc    ebx
c000fefe:	e8 0c fc ff ff       	call   c000fb0f <Phys::setPageState(unsigned long, bool)>
c000ff03:	ff 05 74 f0 02 c0    	inc    DWORD PTR ds:0xc002f074
c000ff09:	83 c4 10             	add    esp,0x10
c000ff0c:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000ff12:	75 e3                	jne    c000fef7 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000ff14:	83 c4 3c             	add    esp,0x3c
c000ff17:	5b                   	pop    ebx
c000ff18:	5e                   	pop    esi
c000ff19:	5f                   	pop    edi
c000ff1a:	5d                   	pop    ebp
c000ff1b:	c3                   	ret    
c000ff1c:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000ff24:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ff2c:	e9 d7 fe ff ff       	jmp    c000fe08 <Phys::physicalMemorySetup(unsigned int)+0x107>
c000ff31:	90                   	nop

c000ff32 <Pipe::isAtty()>:
c000ff32:	31 c0                	xor    eax,eax
c000ff34:	c3                   	ret    
c000ff35:	90                   	nop

c000ff36 <Pipe::~Pipe()>:
c000ff36:	83 ec 0c             	sub    esp,0xc
c000ff39:	ba 8c ac 02 c0       	mov    edx,0xc002ac8c
c000ff3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff42:	89 10                	mov    DWORD PTR [eax],edx
c000ff44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff48:	83 ec 0c             	sub    esp,0xc
c000ff4b:	50                   	push   eax
c000ff4c:	e8 3f 13 00 00       	call   c0011290 <UnixFile::~UnixFile()>
c000ff51:	83 c4 10             	add    esp,0x10
c000ff54:	90                   	nop
c000ff55:	83 c4 0c             	add    esp,0xc
c000ff58:	c3                   	ret    
c000ff59:	90                   	nop

c000ff5a <Pipe::~Pipe()>:
c000ff5a:	83 ec 0c             	sub    esp,0xc
c000ff5d:	83 ec 0c             	sub    esp,0xc
c000ff60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff64:	e8 cd ff ff ff       	call   c000ff36 <Pipe::~Pipe()>
c000ff69:	83 c4 10             	add    esp,0x10
c000ff6c:	83 ec 08             	sub    esp,0x8
c000ff6f:	6a 20                	push   0x20
c000ff71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff75:	e8 9d 28 00 00       	call   c0012817 <operator delete(void*, unsigned long)>
c000ff7a:	83 c4 10             	add    esp,0x10
c000ff7d:	83 c4 0c             	add    esp,0xc
c000ff80:	c3                   	ret    
c000ff81:	90                   	nop

c000ff82 <Pipe::read(unsigned long long, void*, int*)>:
c000ff82:	55                   	push   ebp
c000ff83:	57                   	push   edi
c000ff84:	56                   	push   esi
c000ff85:	53                   	push   ebx
c000ff86:	83 ec 1c             	sub    esp,0x1c
c000ff89:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ff8d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ff91:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ff95:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000ff98:	89 c8                	mov    eax,ecx
c000ff9a:	99                   	cdq    
c000ff9b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000ff9f:	74 24                	je     c000ffc5 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000ffa1:	39 f9                	cmp    ecx,edi
c000ffa3:	89 d1                	mov    ecx,edx
c000ffa5:	19 f1                	sbb    ecx,esi
c000ffa7:	73 1c                	jae    c000ffc5 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000ffa9:	fa                   	cli    
c000ffaa:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c000ffb0:	e8 2b e1 00 00       	call   c001e0e0 <schedule()>
c000ffb5:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c000ffba:	48                   	dec    eax
c000ffbb:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c000ffc0:	75 d3                	jne    c000ff95 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000ffc2:	fb                   	sti    
c000ffc3:	eb d0                	jmp    c000ff95 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000ffc5:	39 f8                	cmp    eax,edi
c000ffc7:	89 d1                	mov    ecx,edx
c000ffc9:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ffcc:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ffd0:	19 f1                	sbb    ecx,esi
c000ffd2:	73 07                	jae    c000ffdb <Pipe::read(unsigned long long, void*, int*)+0x59>
c000ffd4:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffd7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ffdb:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000ffde:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000ffe1:	29 f7                	sub    edi,esi
c000ffe3:	89 f8                	mov    eax,edi
c000ffe5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ffe9:	99                   	cdq    
c000ffea:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000ffed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fff1:	19 d0                	sbb    eax,edx
c000fff3:	73 07                	jae    c000fffc <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fff8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fffc:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000ffff:	89 ea                	mov    edx,ebp
c0010001:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010005:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001000a:	74 0d                	je     c0010019 <Pipe::read(unsigned long long, void*, int*)+0x97>
c001000c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001000f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010013:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010017:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010019:	85 d2                	test   edx,edx
c001001b:	74 11                	je     c001002e <Pipe::read(unsigned long long, void*, int*)+0xac>
c001001d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010021:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010024:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010028:	89 d1                	mov    ecx,edx
c001002a:	89 c7                	mov    edi,eax
c001002c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001002e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010031:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010034:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010037:	99                   	cdq    
c0010038:	89 f7                	mov    edi,esi
c001003a:	03 04 24             	add    eax,DWORD PTR [esp]
c001003d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0010041:	c1 ff 1f             	sar    edi,0x1f
c0010044:	57                   	push   edi
c0010045:	56                   	push   esi
c0010046:	52                   	push   edx
c0010047:	50                   	push   eax
c0010048:	e8 d7 72 01 00       	call   c0027324 <__umoddi3>
c001004d:	83 c4 10             	add    esp,0x10
c0010050:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010053:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010058:	75 10                	jne    c001006a <Pipe::read(unsigned long long, void*, int*)+0xe8>
c001005a:	83 ec 0c             	sub    esp,0xc
c001005d:	68 49 ac 02 c0       	push   0xc002ac49
c0010062:	e8 c6 a2 00 00       	call   c001a32d <Krnl::panic(char const*)>
c0010067:	83 c4 10             	add    esp,0x10
c001006a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001006e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010071:	89 10                	mov    DWORD PTR [eax],edx
c0010073:	83 c4 1c             	add    esp,0x1c
c0010076:	31 c0                	xor    eax,eax
c0010078:	5b                   	pop    ebx
c0010079:	5e                   	pop    esi
c001007a:	5f                   	pop    edi
c001007b:	5d                   	pop    ebp
c001007c:	c3                   	ret    
c001007d:	90                   	nop

c001007e <Pipe::write(unsigned long long, void*, int*)>:
c001007e:	55                   	push   ebp
c001007f:	57                   	push   edi
c0010080:	56                   	push   esi
c0010081:	53                   	push   ebx
c0010082:	83 ec 1c             	sub    esp,0x1c
c0010085:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010089:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001008d:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0010090:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010094:	89 04 24             	mov    DWORD PTR [esp],eax
c0010097:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001009b:	89 d8                	mov    eax,ebx
c001009d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00100a0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00100a4:	89 d6                	mov    esi,edx
c00100a6:	89 d7                	mov    edi,edx
c00100a8:	c1 ff 1f             	sar    edi,0x1f
c00100ab:	03 34 24             	add    esi,DWORD PTR [esp]
c00100ae:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00100b2:	c1 f8 1f             	sar    eax,0x1f
c00100b5:	39 f3                	cmp    ebx,esi
c00100b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100bf:	19 f8                	sbb    eax,edi
c00100c1:	b8 01 00 00 00       	mov    eax,0x1
c00100c6:	72 6e                	jb     c0010136 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00100c8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00100cb:	01 d0                	add    eax,edx
c00100cd:	99                   	cdq    
c00100ce:	f7 fb                	idiv   ebx
c00100d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100d4:	29 d3                	sub    ebx,edx
c00100d6:	89 d7                	mov    edi,edx
c00100d8:	89 de                	mov    esi,ebx
c00100da:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00100dd:	c1 fb 1f             	sar    ebx,0x1f
c00100e0:	39 f2                	cmp    edx,esi
c00100e2:	19 d8                	sbb    eax,ebx
c00100e4:	b8 00 00 00 00       	mov    eax,0x0
c00100e9:	72 04                	jb     c00100ef <Pipe::write(unsigned long long, void*, int*)+0x71>
c00100eb:	89 d0                	mov    eax,edx
c00100ed:	29 f0                	sub    eax,esi
c00100ef:	89 d3                	mov    ebx,edx
c00100f1:	29 c3                	sub    ebx,eax
c00100f3:	74 0b                	je     c0010100 <Pipe::write(unsigned long long, void*, int*)+0x82>
c00100f5:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00100f8:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00100fc:	89 d9                	mov    ecx,ebx
c00100fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010100:	85 c0                	test   eax,eax
c0010102:	74 0d                	je     c0010111 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0010104:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010108:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001010b:	89 de                	mov    esi,ebx
c001010d:	89 c1                	mov    ecx,eax
c001010f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010111:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010114:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010119:	75 10                	jne    c001012b <Pipe::write(unsigned long long, void*, int*)+0xad>
c001011b:	83 ec 0c             	sub    esp,0xc
c001011e:	68 65 ac 02 c0       	push   0xc002ac65
c0010123:	e8 05 a2 00 00       	call   c001a32d <Krnl::panic(char const*)>
c0010128:	83 c4 10             	add    esp,0x10
c001012b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001012f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0010132:	89 08                	mov    DWORD PTR [eax],ecx
c0010134:	31 c0                	xor    eax,eax
c0010136:	83 c4 1c             	add    esp,0x1c
c0010139:	5b                   	pop    ebx
c001013a:	5e                   	pop    esi
c001013b:	5f                   	pop    edi
c001013c:	5d                   	pop    ebp
c001013d:	c3                   	ret    

c001013e <Pipe::Pipe(int)>:
c001013e:	83 ec 0c             	sub    esp,0xc
c0010141:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010145:	83 ec 08             	sub    esp,0x8
c0010148:	6a 00                	push   0x0
c001014a:	50                   	push   eax
c001014b:	e8 5e 0f 00 00       	call   c00110ae <UnixFile::UnixFile(int)>
c0010150:	83 c4 10             	add    esp,0x10
c0010153:	ba 8c ac 02 c0       	mov    edx,0xc002ac8c
c0010158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001015c:	89 10                	mov    DWORD PTR [eax],edx
c001015e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010162:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010166:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001016d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010178:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001017f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010183:	83 ec 0c             	sub    esp,0xc
c0010186:	50                   	push   eax
c0010187:	e8 00 f7 ff ff       	call   c000f88c <malloc>
c001018c:	83 c4 10             	add    esp,0x10
c001018f:	89 c2                	mov    edx,eax
c0010191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010195:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001019c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00101a0:	90                   	nop
c00101a1:	83 c4 0c             	add    esp,0xc
c00101a4:	c3                   	ret    
c00101a5:	90                   	nop

c00101a6 <VgaText::isAtty()>:
c00101a6:	b0 01                	mov    al,0x1
c00101a8:	c3                   	ret    
c00101a9:	90                   	nop

c00101aa <VgaText::~VgaText()>:
c00101aa:	83 ec 0c             	sub    esp,0xc
c00101ad:	ba 48 ad 02 c0       	mov    edx,0xc002ad48
c00101b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101b6:	89 10                	mov    DWORD PTR [eax],edx
c00101b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101bc:	83 ec 0c             	sub    esp,0xc
c00101bf:	50                   	push   eax
c00101c0:	e8 cb 10 00 00       	call   c0011290 <UnixFile::~UnixFile()>
c00101c5:	83 c4 10             	add    esp,0x10
c00101c8:	90                   	nop
c00101c9:	83 c4 0c             	add    esp,0xc
c00101cc:	c3                   	ret    
c00101cd:	90                   	nop

c00101ce <VgaText::~VgaText()>:
c00101ce:	83 ec 0c             	sub    esp,0xc
c00101d1:	83 ec 0c             	sub    esp,0xc
c00101d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101d8:	e8 cd ff ff ff       	call   c00101aa <VgaText::~VgaText()>
c00101dd:	83 c4 10             	add    esp,0x10
c00101e0:	83 ec 08             	sub    esp,0x8
c00101e3:	68 c4 02 00 00       	push   0x2c4
c00101e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101ec:	e8 26 26 00 00       	call   c0012817 <operator delete(void*, unsigned long)>
c00101f1:	83 c4 10             	add    esp,0x10
c00101f4:	83 c4 0c             	add    esp,0xc
c00101f7:	c3                   	ret    

c00101f8 <VgaText::read(unsigned long long, void*, int*)>:
c00101f8:	83 ec 10             	sub    esp,0x10
c00101fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010203:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010207:	e8 a0 5b 00 00       	call   c0015dac <readKeyboard(VgaText*, char*, unsigned long)>
c001020c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010210:	89 02                	mov    DWORD PTR [edx],eax
c0010212:	31 c0                	xor    eax,eax
c0010214:	83 c4 1c             	add    esp,0x1c
c0010217:	c3                   	ret    

c0010218 <setTerminalScrollLock(bool)>:
c0010218:	c3                   	ret    

c0010219 <addToTerminalCycle(VgaText*)>:
c0010219:	8b 15 e0 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f0e0
c001021f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010223:	85 d2                	test   edx,edx
c0010225:	75 09                	jne    c0010230 <addToTerminalCycle(VgaText*)+0x17>
c0010227:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c001022a:	a3 e0 f0 02 c0       	mov    ds:0xc002f0e0,eax
c001022f:	c3                   	ret    
c0010230:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c0010233:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010236:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010239:	c3                   	ret    

c001023a <installVgaTextImplementation()>:
c001023a:	83 ec 10             	sub    esp,0x10
c001023d:	6a 20                	push   0x20
c001023f:	6a 00                	push   0x0
c0010241:	68 c0 f0 02 c0       	push   0xc002f0c0
c0010246:	e8 05 05 ff ff       	call   c0000750 <memset>
c001024b:	83 c4 1c             	add    esp,0x1c
c001024e:	c3                   	ret    

c001024f <scrollTerminalScrollLock(int)>:
c001024f:	c3                   	ret    

c0010250 <VgaText::updateTitle()>:
c0010250:	53                   	push   ebx
c0010251:	31 c0                	xor    eax,eax
c0010253:	83 ec 58             	sub    esp,0x58
c0010256:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001025a:	89 e1                	mov    ecx,esp
c001025c:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010260:	40                   	inc    eax
c0010261:	83 f8 50             	cmp    eax,0x50
c0010264:	75 f6                	jne    c001025c <VgaText::updateTitle()+0xc>
c0010266:	31 c0                	xor    eax,eax
c0010268:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001026f:	84 db                	test   bl,bl
c0010271:	74 06                	je     c0010279 <VgaText::updateTitle()+0x29>
c0010273:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010276:	40                   	inc    eax
c0010277:	eb ef                	jmp    c0010268 <VgaText::updateTitle()+0x18>
c0010279:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c001027c:	85 c0                	test   eax,eax
c001027e:	74 09                	je     c0010289 <VgaText::updateTitle()+0x39>
c0010280:	53                   	push   ebx
c0010281:	53                   	push   ebx
c0010282:	51                   	push   ecx
c0010283:	52                   	push   edx
c0010284:	ff d0                	call   eax
c0010286:	83 c4 10             	add    esp,0x10
c0010289:	83 c4 58             	add    esp,0x58
c001028c:	5b                   	pop    ebx
c001028d:	c3                   	ret    

c001028e <VgaText::load()>:
c001028e:	53                   	push   ebx
c001028f:	31 c0                	xor    eax,eax
c0010291:	83 ec 58             	sub    esp,0x58
c0010294:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010298:	89 e2                	mov    edx,esp
c001029a:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001029e:	40                   	inc    eax
c001029f:	83 f8 50             	cmp    eax,0x50
c00102a2:	75 f6                	jne    c001029a <VgaText::load()+0xc>
c00102a4:	31 c0                	xor    eax,eax
c00102a6:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00102ad:	84 c9                	test   cl,cl
c00102af:	74 06                	je     c00102b7 <VgaText::load()+0x29>
c00102b1:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00102b4:	40                   	inc    eax
c00102b5:	eb ef                	jmp    c00102a6 <VgaText::load()+0x18>
c00102b7:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00102ba:	85 c0                	test   eax,eax
c00102bc:	74 09                	je     c00102c7 <VgaText::load()+0x39>
c00102be:	51                   	push   ecx
c00102bf:	51                   	push   ecx
c00102c0:	52                   	push   edx
c00102c1:	53                   	push   ebx
c00102c2:	ff d0                	call   eax
c00102c4:	83 c4 10             	add    esp,0x10
c00102c7:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00102ca:	85 c0                	test   eax,eax
c00102cc:	74 09                	je     c00102d7 <VgaText::load()+0x49>
c00102ce:	83 ec 0c             	sub    esp,0xc
c00102d1:	53                   	push   ebx
c00102d2:	ff d0                	call   eax
c00102d4:	83 c4 10             	add    esp,0x10
c00102d7:	83 c4 58             	add    esp,0x58
c00102da:	5b                   	pop    ebx
c00102db:	c3                   	ret    

c00102dc <VgaText::updateCursor()>:
c00102dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102e0:	39 05 e4 f0 02 c0    	cmp    DWORD PTR ds:0xc002f0e4,eax
c00102e6:	75 09                	jne    c00102f1 <VgaText::updateCursor()+0x15>
c00102e8:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00102eb:	85 c0                	test   eax,eax
c00102ed:	74 02                	je     c00102f1 <VgaText::updateCursor()+0x15>
c00102ef:	ff e0                	jmp    eax
c00102f1:	c3                   	ret    

c00102f2 <VgaText::showCursor(bool)>:
c00102f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102fa:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c00102fd:	c3                   	ret    

c00102fe <VgaText::disableBlink(bool)>:
c00102fe:	56                   	push   esi
c00102ff:	53                   	push   ebx
c0010300:	51                   	push   ecx
c0010301:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010305:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010309:	39 1d e4 f0 02 c0    	cmp    DWORD PTR ds:0xc002f0e4,ebx
c001030f:	75 15                	jne    c0010326 <VgaText::disableBlink(bool)+0x28>
c0010311:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c0010314:	85 c0                	test   eax,eax
c0010316:	74 0e                	je     c0010326 <VgaText::disableBlink(bool)+0x28>
c0010318:	89 f1                	mov    ecx,esi
c001031a:	52                   	push   edx
c001031b:	52                   	push   edx
c001031c:	0f b6 d1             	movzx  edx,cl
c001031f:	52                   	push   edx
c0010320:	53                   	push   ebx
c0010321:	ff d0                	call   eax
c0010323:	83 c4 10             	add    esp,0x10
c0010326:	89 f0                	mov    eax,esi
c0010328:	83 f0 01             	xor    eax,0x1
c001032b:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c001032e:	58                   	pop    eax
c001032f:	5b                   	pop    ebx
c0010330:	5e                   	pop    esi
c0010331:	c3                   	ret    

c0010332 <VgaText::doANSI_SGR(int)>:
c0010332:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010336:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001033a:	85 d2                	test   edx,edx
c001033c:	75 0b                	jne    c0010349 <VgaText::doANSI_SGR(int)+0x17>
c001033e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010341:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010344:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010347:	eb 59                	jmp    c00103a2 <VgaText::doANSI_SGR(int)+0x70>
c0010349:	83 fa 07             	cmp    edx,0x7
c001034c:	75 0b                	jne    c0010359 <VgaText::doANSI_SGR(int)+0x27>
c001034e:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010351:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010354:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010357:	eb 49                	jmp    c00103a2 <VgaText::doANSI_SGR(int)+0x70>
c0010359:	83 fa 1b             	cmp    edx,0x1b
c001035c:	74 e0                	je     c001033e <VgaText::doANSI_SGR(int)+0xc>
c001035e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010361:	83 f9 07             	cmp    ecx,0x7
c0010364:	77 09                	ja     c001036f <VgaText::doANSI_SGR(int)+0x3d>
c0010366:	8b 14 8d 80 df 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2080]
c001036d:	eb 20                	jmp    c001038f <VgaText::doANSI_SGR(int)+0x5d>
c001036f:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010372:	83 f9 07             	cmp    ecx,0x7
c0010375:	77 09                	ja     c0010380 <VgaText::doANSI_SGR(int)+0x4e>
c0010377:	8b 14 8d 80 df 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2080]
c001037e:	eb 22                	jmp    c00103a2 <VgaText::doANSI_SGR(int)+0x70>
c0010380:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010383:	83 f9 07             	cmp    ecx,0x7
c0010386:	77 0b                	ja     c0010393 <VgaText::doANSI_SGR(int)+0x61>
c0010388:	8b 14 95 38 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd21c8]
c001038f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010392:	c3                   	ret    
c0010393:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010396:	83 f9 07             	cmp    ecx,0x7
c0010399:	77 0a                	ja     c00103a5 <VgaText::doANSI_SGR(int)+0x73>
c001039b:	8b 14 95 10 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd21f0]
c00103a2:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00103a5:	c3                   	ret    

c00103a6 <VgaText::setDefaultBgColour(VgaColour)>:
c00103a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103ae:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00103b1:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00103b4:	c3                   	ret    
c00103b5:	90                   	nop

c00103b6 <VgaText::setDefaultFgColour(VgaColour)>:
c00103b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103be:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00103c1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00103c4:	c3                   	ret    
c00103c5:	90                   	nop

c00103c6 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00103c6:	53                   	push   ebx
c00103c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00103cb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00103cf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00103d3:	51                   	push   ecx
c00103d4:	e8 cd ff ff ff       	call   c00103a6 <VgaText::setDefaultBgColour(VgaColour)>
c00103d9:	58                   	pop    eax
c00103da:	5a                   	pop    edx
c00103db:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00103df:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00103e3:	5b                   	pop    ebx
c00103e4:	eb d0                	jmp    c00103b6 <VgaText::setDefaultFgColour(VgaColour)>

c00103e6 <VgaText::setTitleTextColour(VgaColour)>:
c00103e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103ee:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00103f1:	e9 5a fe ff ff       	jmp    c0010250 <VgaText::updateTitle()>

c00103f6 <VgaText::setTitleColour(VgaColour)>:
c00103f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010401:	e9 4a fe ff ff       	jmp    c0010250 <VgaText::updateTitle()>

c0010406 <VgaText::setTitle(char*)>:
c0010406:	53                   	push   ebx
c0010407:	83 ec 10             	sub    esp,0x10
c001040a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001040e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010412:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010418:	50                   	push   eax
c0010419:	e8 ee 03 ff ff       	call   c000080c <strcpy>
c001041e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010422:	83 c4 18             	add    esp,0x18
c0010425:	5b                   	pop    ebx
c0010426:	e9 25 fe ff ff       	jmp    c0010250 <VgaText::updateTitle()>
c001042b:	90                   	nop

c001042c <VgaText::combineColours(unsigned char, unsigned char)>:
c001042c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010430:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010435:	83 e0 0f             	and    eax,0xf
c0010438:	c1 e2 04             	shl    edx,0x4
c001043b:	09 d0                	or     eax,edx
c001043d:	c3                   	ret    

c001043e <VgaText::scrollScreen()>:
c001043e:	55                   	push   ebp
c001043f:	b9 01 00 00 00       	mov    ecx,0x1
c0010444:	57                   	push   edi
c0010445:	56                   	push   esi
c0010446:	53                   	push   ebx
c0010447:	83 ec 0c             	sub    esp,0xc
c001044a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001044e:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010454:	31 ff                	xor    edi,edi
c0010456:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010459:	83 f9 17             	cmp    ecx,0x17
c001045c:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001045f:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010466:	75 27                	jne    c001048f <VgaText::scrollScreen()+0x51>
c0010468:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c001046b:	01 f5                	add    ebp,esi
c001046d:	f7 c7 01 00 00 00    	test   edi,0x1
c0010473:	74 16                	je     c001048b <VgaText::scrollScreen()+0x4d>
c0010475:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010479:	50                   	push   eax
c001047a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001047e:	50                   	push   eax
c001047f:	e8 a8 ff ff ff       	call   c001042c <VgaText::combineColours(unsigned char, unsigned char)>
c0010484:	5a                   	pop    edx
c0010485:	5a                   	pop    edx
c0010486:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010489:	eb 04                	jmp    c001048f <VgaText::scrollScreen()+0x51>
c001048b:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001048f:	47                   	inc    edi
c0010490:	46                   	inc    esi
c0010491:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010497:	75 bd                	jne    c0010456 <VgaText::scrollScreen()+0x18>
c0010499:	41                   	inc    ecx
c001049a:	83 f9 18             	cmp    ecx,0x18
c001049d:	75 af                	jne    c001044e <VgaText::scrollScreen()+0x10>
c001049f:	39 1d e4 f0 02 c0    	cmp    DWORD PTR ds:0xc002f0e4,ebx
c00104a5:	75 1b                	jne    c00104c2 <VgaText::scrollScreen()+0x84>
c00104a7:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00104ab:	74 05                	je     c00104b2 <VgaText::scrollScreen()+0x74>
c00104ad:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00104b0:	eb 10                	jmp    c00104c2 <VgaText::scrollScreen()+0x84>
c00104b2:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00104b5:	85 c0                	test   eax,eax
c00104b7:	74 09                	je     c00104c2 <VgaText::scrollScreen()+0x84>
c00104b9:	83 ec 0c             	sub    esp,0xc
c00104bc:	53                   	push   ebx
c00104bd:	ff d0                	call   eax
c00104bf:	83 c4 10             	add    esp,0x10
c00104c2:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00104c6:	83 c4 0c             	add    esp,0xc
c00104c9:	5b                   	pop    ebx
c00104ca:	5e                   	pop    esi
c00104cb:	5f                   	pop    edi
c00104cc:	5d                   	pop    ebp
c00104cd:	e9 0a fe ff ff       	jmp    c00102dc <VgaText::updateCursor()>

c00104d2 <VgaText::combineCharAndColour(char, unsigned char)>:
c00104d2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00104d7:	c1 e0 08             	shl    eax,0x8
c00104da:	89 c2                	mov    edx,eax
c00104dc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00104e1:	09 d0                	or     eax,edx
c00104e3:	c3                   	ret    

c00104e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00104e4:	56                   	push   esi
c00104e5:	53                   	push   ebx
c00104e6:	51                   	push   ecx
c00104e7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00104eb:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00104f0:	50                   	push   eax
c00104f1:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00104f6:	50                   	push   eax
c00104f7:	e8 30 ff ff ff       	call   c001042c <VgaText::combineColours(unsigned char, unsigned char)>
c00104fc:	5b                   	pop    ebx
c00104fd:	0f b6 c0             	movzx  eax,al
c0010500:	5e                   	pop    esi
c0010501:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010506:	50                   	push   eax
c0010507:	53                   	push   ebx
c0010508:	e8 c5 ff ff ff       	call   c00104d2 <VgaText::combineCharAndColour(char, unsigned char)>
c001050d:	5a                   	pop    edx
c001050e:	5e                   	pop    esi
c001050f:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c0010512:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010518:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001051c:	0f b7 d2             	movzx  edx,dx
c001051f:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c0010523:	39 0d e4 f0 02 c0    	cmp    DWORD PTR ds:0xc002f0e4,ecx
c0010529:	75 10                	jne    c001053b <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001052b:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001052e:	85 c0                	test   eax,eax
c0010530:	74 09                	je     c001053b <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010532:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010536:	5a                   	pop    edx
c0010537:	5b                   	pop    ebx
c0010538:	5e                   	pop    esi
c0010539:	ff e0                	jmp    eax
c001053b:	58                   	pop    eax
c001053c:	5b                   	pop    ebx
c001053d:	5e                   	pop    esi
c001053e:	c3                   	ret    
c001053f:	90                   	nop

c0010540 <VgaText::getCursorX()>:
c0010540:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010544:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010547:	c3                   	ret    

c0010548 <VgaText::getCursorY()>:
c0010548:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001054c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001054f:	c3                   	ret    

c0010550 <VgaText::setCursor(int, int)>:
c0010550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010554:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010558:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001055b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001055f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010562:	e9 75 fd ff ff       	jmp    c00102dc <VgaText::updateCursor()>
c0010567:	90                   	nop

c0010568 <VgaText::setCursorX(int)>:
c0010568:	83 ec 10             	sub    esp,0x10
c001056b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001056f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010576:	50                   	push   eax
c0010577:	e8 d4 ff ff ff       	call   c0010550 <VgaText::setCursor(int, int)>
c001057c:	83 c4 1c             	add    esp,0x1c
c001057f:	c3                   	ret    

c0010580 <VgaText::setCursorY(int)>:
c0010580:	83 ec 10             	sub    esp,0x10
c0010583:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010587:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001058b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001058e:	50                   	push   eax
c001058f:	e8 bc ff ff ff       	call   c0010550 <VgaText::setCursor(int, int)>
c0010594:	83 c4 1c             	add    esp,0x1c
c0010597:	c3                   	ret    

c0010598 <VgaText::incrementCursor(bool)>:
c0010598:	56                   	push   esi
c0010599:	53                   	push   ebx
c001059a:	51                   	push   ecx
c001059b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001059f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00105a3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00105a6:	40                   	inc    eax
c00105a7:	83 f8 50             	cmp    eax,0x50
c00105aa:	74 05                	je     c00105b1 <VgaText::incrementCursor(bool)+0x19>
c00105ac:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00105af:	eb 24                	jmp    c00105d5 <VgaText::incrementCursor(bool)+0x3d>
c00105b1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00105b4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105bb:	8d 50 01             	lea    edx,[eax+0x1]
c00105be:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00105c1:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00105c4:	75 0f                	jne    c00105d5 <VgaText::incrementCursor(bool)+0x3d>
c00105c6:	83 ec 0c             	sub    esp,0xc
c00105c9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00105cc:	53                   	push   ebx
c00105cd:	e8 6c fe ff ff       	call   c001043e <VgaText::scrollScreen()>
c00105d2:	83 c4 10             	add    esp,0x10
c00105d5:	89 f0                	mov    eax,esi
c00105d7:	84 c0                	test   al,al
c00105d9:	74 0c                	je     c00105e7 <VgaText::incrementCursor(bool)+0x4f>
c00105db:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00105df:	5a                   	pop    edx
c00105e0:	5b                   	pop    ebx
c00105e1:	5e                   	pop    esi
c00105e2:	e9 f5 fc ff ff       	jmp    c00102dc <VgaText::updateCursor()>
c00105e7:	58                   	pop    eax
c00105e8:	5b                   	pop    ebx
c00105e9:	5e                   	pop    esi
c00105ea:	c3                   	ret    
c00105eb:	90                   	nop

c00105ec <VgaText::decrementCursor(bool)>:
c00105ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00105f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00105f4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00105f7:	85 c0                	test   eax,eax
c00105f9:	74 04                	je     c00105ff <VgaText::decrementCursor(bool)+0x13>
c00105fb:	48                   	dec    eax
c00105fc:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00105ff:	84 c9                	test   cl,cl
c0010601:	74 09                	je     c001060c <VgaText::decrementCursor(bool)+0x20>
c0010603:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010607:	e9 d0 fc ff ff       	jmp    c00102dc <VgaText::updateCursor()>
c001060c:	c3                   	ret    
c001060d:	90                   	nop

c001060e <VgaText::putchar(char, VgaColour, VgaColour)>:
c001060e:	53                   	push   ebx
c001060f:	83 ec 08             	sub    esp,0x8
c0010612:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010616:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001061a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001061e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010622:	3c 07                	cmp    al,0x7
c0010624:	75 2a                	jne    c0010650 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010626:	a1 98 f1 02 c0       	mov    eax,ds:0xc002f198
c001062b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010633:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c001063b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010643:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010647:	83 c4 08             	add    esp,0x8
c001064a:	5b                   	pop    ebx
c001064b:	e9 b4 30 00 00       	jmp    c0013704 <Buzzer::beep(int, int, bool)>
c0010650:	3c 0d                	cmp    al,0xd
c0010652:	75 09                	jne    c001065d <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010654:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001065b:	eb 2c                	jmp    c0010689 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c001065d:	3c 0a                	cmp    al,0xa
c001065f:	75 31                	jne    c0010692 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010661:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010664:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001066b:	8d 50 01             	lea    edx,[eax+0x1]
c001066e:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010671:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010674:	75 0f                	jne    c0010685 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010676:	83 ec 0c             	sub    esp,0xc
c0010679:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001067c:	53                   	push   ebx
c001067d:	e8 bc fd ff ff       	call   c001043e <VgaText::scrollScreen()>
c0010682:	83 c4 10             	add    esp,0x10
c0010685:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010689:	83 c4 08             	add    esp,0x8
c001068c:	5b                   	pop    ebx
c001068d:	e9 4a fc ff ff       	jmp    c00102dc <VgaText::updateCursor()>
c0010692:	3c 08                	cmp    al,0x8
c0010694:	75 25                	jne    c00106bb <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010696:	50                   	push   eax
c0010697:	50                   	push   eax
c0010698:	6a 01                	push   0x1
c001069a:	53                   	push   ebx
c001069b:	e8 4c ff ff ff       	call   c00105ec <VgaText::decrementCursor(bool)>
c00106a0:	5a                   	pop    edx
c00106a1:	59                   	pop    ecx
c00106a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00106a5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00106a8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00106ab:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00106ae:	6a 20                	push   0x20
c00106b0:	53                   	push   ebx
c00106b1:	e8 2e fe ff ff       	call   c00104e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00106b6:	83 c4 28             	add    esp,0x28
c00106b9:	5b                   	pop    ebx
c00106ba:	c3                   	ret    
c00106bb:	83 ec 08             	sub    esp,0x8
c00106be:	0f be c0             	movsx  eax,al
c00106c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00106c4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00106c7:	51                   	push   ecx
c00106c8:	52                   	push   edx
c00106c9:	50                   	push   eax
c00106ca:	53                   	push   ebx
c00106cb:	e8 14 fe ff ff       	call   c00104e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00106d0:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00106d4:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00106dc:	83 c4 28             	add    esp,0x28
c00106df:	5b                   	pop    ebx
c00106e0:	e9 b3 fe ff ff       	jmp    c0010598 <VgaText::incrementCursor(bool)>
c00106e5:	90                   	nop

c00106e6 <VgaText::isShowingCursor()>:
c00106e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ea:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00106ed:	c3                   	ret    

c00106ee <VgaText::isBlinkDisabled()>:
c00106ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f2:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c00106f5:	83 f0 01             	xor    eax,0x1
c00106f8:	c3                   	ret    
c00106f9:	90                   	nop

c00106fa <VgaText::setCursorHeight(int)>:
c00106fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010702:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010705:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c0010709:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001070d:	e9 e0 fb ff ff       	jmp    c00102f2 <VgaText::showCursor(bool)>

c0010712 <VgaText::getCursorHeight()>:
c0010712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010716:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0010719:	c3                   	ret    

c001071a <setActiveTerminal(VgaText*)>:
c001071a:	53                   	push   ebx
c001071b:	83 ec 08             	sub    esp,0x8
c001071e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010722:	85 db                	test   ebx,ebx
c0010724:	75 11                	jne    c0010737 <setActiveTerminal(VgaText*)+0x1d>
c0010726:	c7 44 24 10 a0 ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aca0
c001072e:	83 c4 08             	add    esp,0x8
c0010731:	5b                   	pop    ebx
c0010732:	e9 f6 9b 00 00       	jmp    c001a32d <Krnl::panic(char const*)>
c0010737:	50                   	push   eax
c0010738:	50                   	push   eax
c0010739:	53                   	push   ebx
c001073a:	68 ae ac 02 c0       	push   0xc002acae
c001073f:	e8 b3 21 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0010744:	a1 e4 f0 02 c0       	mov    eax,ds:0xc002f0e4
c0010749:	83 c4 10             	add    esp,0x10
c001074c:	85 c0                	test   eax,eax
c001074e:	74 0c                	je     c001075c <setActiveTerminal(VgaText*)+0x42>
c0010750:	83 ec 0c             	sub    esp,0xc
c0010753:	50                   	push   eax
c0010754:	e8 83 fb ff ff       	call   c00102dc <VgaText::updateCursor()>
c0010759:	83 c4 10             	add    esp,0x10
c001075c:	89 1d e4 f0 02 c0    	mov    DWORD PTR ds:0xc002f0e4,ebx
c0010762:	51                   	push   ecx
c0010763:	51                   	push   ecx
c0010764:	53                   	push   ebx
c0010765:	68 c6 ac 02 c0       	push   0xc002acc6
c001076a:	e8 88 21 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001076f:	83 c4 0c             	add    esp,0xc
c0010772:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010775:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010778:	53                   	push   ebx
c0010779:	e8 d2 fd ff ff       	call   c0010550 <VgaText::setCursor(int, int)>
c001077e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010781:	e8 68 ff ff ff       	call   c00106ee <VgaText::isBlinkDisabled()>
c0010786:	5a                   	pop    edx
c0010787:	0f b6 c0             	movzx  eax,al
c001078a:	59                   	pop    ecx
c001078b:	50                   	push   eax
c001078c:	53                   	push   ebx
c001078d:	e8 6c fb ff ff       	call   c00102fe <VgaText::disableBlink(bool)>
c0010792:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010795:	e8 78 ff ff ff       	call   c0010712 <VgaText::getCursorHeight()>
c001079a:	5a                   	pop    edx
c001079b:	59                   	pop    ecx
c001079c:	50                   	push   eax
c001079d:	53                   	push   ebx
c001079e:	e8 57 ff ff ff       	call   c00106fa <VgaText::setCursorHeight(int)>
c00107a3:	83 c4 10             	add    esp,0x10
c00107a6:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00107aa:	75 07                	jne    c00107b3 <setActiveTerminal(VgaText*)+0x99>
c00107ac:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c00107b3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107b7:	83 c4 08             	add    esp,0x8
c00107ba:	5b                   	pop    ebx
c00107bb:	e9 ce fa ff ff       	jmp    c001028e <VgaText::load()>

c00107c0 <doTerminalCycle()>:
c00107c0:	83 ec 18             	sub    esp,0x18
c00107c3:	a1 e0 f0 02 c0       	mov    eax,ds:0xc002f0e0
c00107c8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00107cb:	50                   	push   eax
c00107cc:	a3 e0 f0 02 c0       	mov    ds:0xc002f0e0,eax
c00107d1:	e8 44 ff ff ff       	call   c001071a <setActiveTerminal(VgaText*)>
c00107d6:	83 c4 1c             	add    esp,0x1c
c00107d9:	c3                   	ret    

c00107da <VgaText::doUpdate()>:
c00107da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107de:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c00107e1:	85 c0                	test   eax,eax
c00107e3:	74 02                	je     c00107e7 <VgaText::doUpdate()+0xd>
c00107e5:	ff e0                	jmp    eax
c00107e7:	c3                   	ret    

c00107e8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00107e8:	55                   	push   ebp
c00107e9:	31 ed                	xor    ebp,ebp
c00107eb:	57                   	push   edi
c00107ec:	56                   	push   esi
c00107ed:	53                   	push   ebx
c00107ee:	83 ec 1c             	sub    esp,0x1c
c00107f1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00107f5:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00107fa:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010801:	50                   	push   eax
c0010802:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010807:	50                   	push   eax
c0010808:	e8 1f fc ff ff       	call   c001042c <VgaText::combineColours(unsigned char, unsigned char)>
c001080d:	59                   	pop    ecx
c001080e:	0f b6 c0             	movzx  eax,al
c0010811:	5e                   	pop    esi
c0010812:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010817:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001081b:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001081e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010822:	0f b7 f6             	movzx  esi,si
c0010825:	01 f6                	add    esi,esi
c0010827:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001082a:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001082d:	84 c0                	test   al,al
c001082f:	0f 84 fd 00 00 00    	je     c0010932 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010835:	3c 0d                	cmp    al,0xd
c0010837:	75 0c                	jne    c0010845 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010839:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010840:	e9 e7 00 00 00       	jmp    c001092c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010845:	3c 0a                	cmp    al,0xa
c0010847:	75 47                	jne    c0010890 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010849:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001084c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010853:	8d 48 01             	lea    ecx,[eax+0x1]
c0010856:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010859:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c001085c:	75 0f                	jne    c001086d <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c001085e:	83 ec 0c             	sub    esp,0xc
c0010861:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010864:	53                   	push   ebx
c0010865:	e8 d4 fb ff ff       	call   c001043e <VgaText::scrollScreen()>
c001086a:	83 c4 10             	add    esp,0x10
c001086d:	83 ec 0c             	sub    esp,0xc
c0010870:	31 ed                	xor    ebp,ebp
c0010872:	53                   	push   ebx
c0010873:	e8 64 fa ff ff       	call   c00102dc <VgaText::updateCursor()>
c0010878:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001087d:	83 c4 10             	add    esp,0x10
c0010880:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010883:	0f b7 f6             	movzx  esi,si
c0010886:	01 f6                	add    esi,esi
c0010888:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001088b:	e9 9c 00 00 00       	jmp    c001092c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010890:	3c 08                	cmp    al,0x8
c0010892:	75 35                	jne    c00108c9 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010894:	56                   	push   esi
c0010895:	56                   	push   esi
c0010896:	6a 01                	push   0x1
c0010898:	53                   	push   ebx
c0010899:	e8 4e fd ff ff       	call   c00105ec <VgaText::decrementCursor(bool)>
c001089e:	58                   	pop    eax
c001089f:	5a                   	pop    edx
c00108a0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00108a3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00108a6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00108a9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00108ac:	6a 20                	push   0x20
c00108ae:	53                   	push   ebx
c00108af:	e8 30 fc ff ff       	call   c00104e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00108b4:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00108b9:	83 c4 20             	add    esp,0x20
c00108bc:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00108bf:	0f b7 f6             	movzx  esi,si
c00108c2:	01 f6                	add    esi,esi
c00108c4:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00108c7:	eb 63                	jmp    c001092c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00108c9:	51                   	push   ecx
c00108ca:	51                   	push   ecx
c00108cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00108cf:	50                   	push   eax
c00108d0:	e8 fd fb ff ff       	call   c00104d2 <VgaText::combineCharAndColour(char, unsigned char)>
c00108d5:	83 c4 10             	add    esp,0x10
c00108d8:	66 89 06             	mov    WORD PTR [esi],ax
c00108db:	39 1d e4 f0 02 c0    	cmp    DWORD PTR ds:0xc002f0e4,ebx
c00108e1:	75 21                	jne    c0010904 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00108e3:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c00108e6:	85 c0                	test   eax,eax
c00108e8:	74 1a                	je     c0010904 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00108ea:	52                   	push   edx
c00108eb:	52                   	push   edx
c00108ec:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00108ef:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00108f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00108f6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00108fa:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c00108fd:	51                   	push   ecx
c00108fe:	53                   	push   ebx
c00108ff:	ff d0                	call   eax
c0010901:	83 c4 20             	add    esp,0x20
c0010904:	83 c6 02             	add    esi,0x2
c0010907:	50                   	push   eax
c0010908:	50                   	push   eax
c0010909:	6a 00                	push   0x0
c001090b:	53                   	push   ebx
c001090c:	e8 87 fc ff ff       	call   c0010598 <VgaText::incrementCursor(bool)>
c0010911:	83 c4 10             	add    esp,0x10
c0010914:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010918:	75 0d                	jne    c0010927 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c001091a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001091f:	0f b7 f6             	movzx  esi,si
c0010922:	01 f6                	add    esi,esi
c0010924:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010927:	bd 01 00 00 00       	mov    ebp,0x1
c001092c:	47                   	inc    edi
c001092d:	e9 f8 fe ff ff       	jmp    c001082a <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010932:	83 ec 0c             	sub    esp,0xc
c0010935:	53                   	push   ebx
c0010936:	e8 a1 f9 ff ff       	call   c00102dc <VgaText::updateCursor()>
c001093b:	83 c4 10             	add    esp,0x10
c001093e:	89 e8                	mov    eax,ebp
c0010940:	84 c0                	test   al,al
c0010942:	74 0c                	je     c0010950 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010944:	83 ec 0c             	sub    esp,0xc
c0010947:	53                   	push   ebx
c0010948:	e8 8d fe ff ff       	call   c00107da <VgaText::doUpdate()>
c001094d:	83 c4 10             	add    esp,0x10
c0010950:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010957:	83 c4 1c             	add    esp,0x1c
c001095a:	5b                   	pop    ebx
c001095b:	5e                   	pop    esi
c001095c:	5f                   	pop    edi
c001095d:	5d                   	pop    ebp
c001095e:	c3                   	ret    
c001095f:	90                   	nop

c0010960 <VgaText::clearScreen()>:
c0010960:	57                   	push   edi
c0010961:	56                   	push   esi
c0010962:	31 f6                	xor    esi,esi
c0010964:	53                   	push   ebx
c0010965:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010969:	52                   	push   edx
c001096a:	6a 00                	push   0x0
c001096c:	6a 00                	push   0x0
c001096e:	53                   	push   ebx
c001096f:	e8 dc fb ff ff       	call   c0010550 <VgaText::setCursor(int, int)>
c0010974:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001097b:	83 c4 10             	add    esp,0x10
c001097e:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010981:	7e 20                	jle    c00109a3 <VgaText::clearScreen()+0x43>
c0010983:	31 ff                	xor    edi,edi
c0010985:	50                   	push   eax
c0010986:	50                   	push   eax
c0010987:	56                   	push   esi
c0010988:	57                   	push   edi
c0010989:	47                   	inc    edi
c001098a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001098d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010990:	6a 20                	push   0x20
c0010992:	53                   	push   ebx
c0010993:	e8 4c fb ff ff       	call   c00104e4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010998:	83 c4 20             	add    esp,0x20
c001099b:	83 ff 50             	cmp    edi,0x50
c001099e:	75 e5                	jne    c0010985 <VgaText::clearScreen()+0x25>
c00109a0:	46                   	inc    esi
c00109a1:	eb db                	jmp    c001097e <VgaText::clearScreen()+0x1e>
c00109a3:	83 ec 0c             	sub    esp,0xc
c00109a6:	53                   	push   ebx
c00109a7:	e8 2e fe ff ff       	call   c00107da <VgaText::doUpdate()>
c00109ac:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00109b3:	83 c4 10             	add    esp,0x10
c00109b6:	5b                   	pop    ebx
c00109b7:	5e                   	pop    esi
c00109b8:	5f                   	pop    edi
c00109b9:	c3                   	ret    

c00109ba <VgaText::putchar(char)>:
c00109ba:	56                   	push   esi
c00109bb:	53                   	push   ebx
c00109bc:	83 ec 14             	sub    esp,0x14
c00109bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00109c3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00109c7:	3c 5b                	cmp    al,0x5b
c00109c9:	75 18                	jne    c00109e3 <VgaText::putchar(char)+0x29>
c00109cb:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00109cf:	74 1f                	je     c00109f0 <VgaText::putchar(char)+0x36>
c00109d1:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00109d7:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00109de:	e9 bd 00 00 00       	jmp    c0010aa0 <VgaText::putchar(char)+0xe6>
c00109e3:	3c 1b                	cmp    al,0x1b
c00109e5:	75 09                	jne    c00109f0 <VgaText::putchar(char)+0x36>
c00109e7:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00109eb:	e9 b0 00 00 00       	jmp    c0010aa0 <VgaText::putchar(char)+0xe6>
c00109f0:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00109f3:	84 c9                	test   cl,cl
c00109f5:	0f 84 92 00 00 00    	je     c0010a8d <VgaText::putchar(char)+0xd3>
c00109fb:	8d 50 c0             	lea    edx,[eax-0x40]
c00109fe:	80 fa 3e             	cmp    dl,0x3e
c0010a01:	77 76                	ja     c0010a79 <VgaText::putchar(char)+0xbf>
c0010a03:	3c 6d                	cmp    al,0x6d
c0010a05:	75 47                	jne    c0010a4e <VgaText::putchar(char)+0x94>
c0010a07:	31 f6                	xor    esi,esi
c0010a09:	31 d2                	xor    edx,edx
c0010a0b:	31 c0                	xor    eax,eax
c0010a0d:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010a10:	7e 2d                	jle    c0010a3f <VgaText::putchar(char)+0x85>
c0010a12:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010a17:	80 fa 3b             	cmp    dl,0x3b
c0010a1a:	75 17                	jne    c0010a33 <VgaText::putchar(char)+0x79>
c0010a1c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010a20:	50                   	push   eax
c0010a21:	53                   	push   ebx
c0010a22:	e8 0b f9 ff ff       	call   c0010332 <VgaText::doANSI_SGR(int)>
c0010a27:	59                   	pop    ecx
c0010a28:	31 d2                	xor    edx,edx
c0010a2a:	58                   	pop    eax
c0010a2b:	31 c0                	xor    eax,eax
c0010a2d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010a31:	eb 09                	jmp    c0010a3c <VgaText::putchar(char)+0x82>
c0010a33:	6b c0 0a             	imul   eax,eax,0xa
c0010a36:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010a3a:	88 ca                	mov    dl,cl
c0010a3c:	46                   	inc    esi
c0010a3d:	eb ce                	jmp    c0010a0d <VgaText::putchar(char)+0x53>
c0010a3f:	84 d2                	test   dl,dl
c0010a41:	74 2e                	je     c0010a71 <VgaText::putchar(char)+0xb7>
c0010a43:	50                   	push   eax
c0010a44:	53                   	push   ebx
c0010a45:	e8 e8 f8 ff ff       	call   c0010332 <VgaText::doANSI_SGR(int)>
c0010a4a:	58                   	pop    eax
c0010a4b:	5a                   	pop    edx
c0010a4c:	eb 23                	jmp    c0010a71 <VgaText::putchar(char)+0xb7>
c0010a4e:	3c 4a                	cmp    al,0x4a
c0010a50:	75 1f                	jne    c0010a71 <VgaText::putchar(char)+0xb7>
c0010a52:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010a56:	75 19                	jne    c0010a71 <VgaText::putchar(char)+0xb7>
c0010a58:	83 ec 0c             	sub    esp,0xc
c0010a5b:	53                   	push   ebx
c0010a5c:	e8 ff fe ff ff       	call   c0010960 <VgaText::clearScreen()>
c0010a61:	83 c4 0c             	add    esp,0xc
c0010a64:	6a 00                	push   0x0
c0010a66:	6a 00                	push   0x0
c0010a68:	53                   	push   ebx
c0010a69:	e8 e2 fa ff ff       	call   c0010550 <VgaText::setCursor(int, int)>
c0010a6e:	83 c4 10             	add    esp,0x10
c0010a71:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010a77:	eb 27                	jmp    c0010aa0 <VgaText::putchar(char)+0xe6>
c0010a79:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010a7c:	83 fa 0e             	cmp    edx,0xe
c0010a7f:	7f 1f                	jg     c0010aa0 <VgaText::putchar(char)+0xe6>
c0010a81:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010a84:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010a87:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010a8b:	eb 13                	jmp    c0010aa0 <VgaText::putchar(char)+0xe6>
c0010a8d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010a90:	0f be c0             	movsx  eax,al
c0010a93:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010a96:	50                   	push   eax
c0010a97:	53                   	push   ebx
c0010a98:	e8 71 fb ff ff       	call   c001060e <VgaText::putchar(char, VgaColour, VgaColour)>
c0010a9d:	83 c4 10             	add    esp,0x10
c0010aa0:	83 c4 14             	add    esp,0x14
c0010aa3:	5b                   	pop    ebx
c0010aa4:	5e                   	pop    esi
c0010aa5:	c3                   	ret    

c0010aa6 <VgaText::putx(unsigned int)>:
c0010aa6:	57                   	push   edi
c0010aa7:	b9 11 00 00 00       	mov    ecx,0x11
c0010aac:	56                   	push   esi
c0010aad:	be e2 ac 02 c0       	mov    esi,0xc002ace2
c0010ab2:	53                   	push   ebx
c0010ab3:	83 ec 20             	sub    esp,0x20
c0010ab6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010aba:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010abe:	fc                   	cld    
c0010abf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ac1:	be 08 00 00 00       	mov    esi,0x8
c0010ac6:	50                   	push   eax
c0010ac7:	50                   	push   eax
c0010ac8:	89 d8                	mov    eax,ebx
c0010aca:	c1 e3 04             	shl    ebx,0x4
c0010acd:	c1 e8 1c             	shr    eax,0x1c
c0010ad0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010ad5:	50                   	push   eax
c0010ad6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010ada:	e8 db fe ff ff       	call   c00109ba <VgaText::putchar(char)>
c0010adf:	83 c4 10             	add    esp,0x10
c0010ae2:	4e                   	dec    esi
c0010ae3:	75 e1                	jne    c0010ac6 <VgaText::putx(unsigned int)+0x20>
c0010ae5:	83 c4 20             	add    esp,0x20
c0010ae8:	5b                   	pop    ebx
c0010ae9:	5e                   	pop    esi
c0010aea:	5f                   	pop    edi
c0010aeb:	c3                   	ret    

c0010aec <VgaText::puts(char const*)>:
c0010aec:	53                   	push   ebx
c0010aed:	83 ec 08             	sub    esp,0x8
c0010af0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010af4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010af7:	84 c0                	test   al,al
c0010af9:	74 12                	je     c0010b0d <VgaText::puts(char const*)+0x21>
c0010afb:	43                   	inc    ebx
c0010afc:	51                   	push   ecx
c0010afd:	51                   	push   ecx
c0010afe:	50                   	push   eax
c0010aff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b03:	e8 b2 fe ff ff       	call   c00109ba <VgaText::putchar(char)>
c0010b08:	83 c4 10             	add    esp,0x10
c0010b0b:	eb e7                	jmp    c0010af4 <VgaText::puts(char const*)+0x8>
c0010b0d:	83 c4 08             	add    esp,0x8
c0010b10:	5b                   	pop    ebx
c0010b11:	c3                   	ret    

c0010b12 <VgaText::VgaText(char const*)>:
c0010b12:	57                   	push   edi
c0010b13:	56                   	push   esi
c0010b14:	53                   	push   ebx
c0010b15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b19:	83 ec 08             	sub    esp,0x8
c0010b1c:	6a 00                	push   0x0
c0010b1e:	50                   	push   eax
c0010b1f:	e8 8a 05 00 00       	call   c00110ae <UnixFile::UnixFile(int)>
c0010b24:	83 c4 10             	add    esp,0x10
c0010b27:	ba 48 ad 02 c0       	mov    edx,0xc002ad48
c0010b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b30:	89 10                	mov    DWORD PTR [eax],edx
c0010b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b36:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010b3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b41:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b4c:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b54:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b5c:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0010b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b67:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010b6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b72:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010b79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b7d:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0010b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b88:	8d 50 60             	lea    edx,[eax+0x60]
c0010b8b:	bb c0 f0 02 c0       	mov    ebx,0xc002f0c0
c0010b90:	b8 08 00 00 00       	mov    eax,0x8
c0010b95:	fc                   	cld    
c0010b96:	89 d7                	mov    edi,edx
c0010b98:	89 de                	mov    esi,ebx
c0010b9a:	89 c1                	mov    ecx,eax
c0010b9c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ba2:	05 82 00 00 00       	add    eax,0x82
c0010ba7:	83 ec 08             	sub    esp,0x8
c0010baa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bae:	50                   	push   eax
c0010baf:	e8 58 fc fe ff       	call   c000080c <strcpy>
c0010bb4:	83 c4 10             	add    esp,0x10
c0010bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bbb:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010bc2:	83 ec 0c             	sub    esp,0xc
c0010bc5:	6a 01                	push   0x1
c0010bc7:	e8 25 09 00 00       	call   c00114f1 <Virt::allocateKernelVirtualPages(int)>
c0010bcc:	83 c4 10             	add    esp,0x10
c0010bcf:	89 c2                	mov    edx,eax
c0010bd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bd5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010bd8:	8b 1d 90 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f190
c0010bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010be2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010be5:	89 c6                	mov    esi,eax
c0010be7:	e8 cc ef ff ff       	call   c000fbb8 <Phys::allocatePage()>
c0010bec:	6a 05                	push   0x5
c0010bee:	56                   	push   esi
c0010bef:	50                   	push   eax
c0010bf0:	53                   	push   ebx
c0010bf1:	e8 32 11 00 00       	call   c0011d28 <VAS::mapPage(unsigned long, unsigned long, int)>
c0010bf6:	83 c4 10             	add    esp,0x10
c0010bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bfd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010c00:	83 ec 04             	sub    esp,0x4
c0010c03:	68 00 0f 00 00       	push   0xf00
c0010c08:	6a 00                	push   0x0
c0010c0a:	50                   	push   eax
c0010c0b:	e8 40 fb fe ff       	call   c0000750 <memset>
c0010c10:	83 c4 10             	add    esp,0x10
c0010c13:	83 ec 04             	sub    esp,0x4
c0010c16:	6a 00                	push   0x0
c0010c18:	6a 07                	push   0x7
c0010c1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c1e:	e8 a3 f7 ff ff       	call   c00103c6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010c23:	83 c4 10             	add    esp,0x10
c0010c26:	83 ec 08             	sub    esp,0x8
c0010c29:	6a 02                	push   0x2
c0010c2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c2f:	e8 c6 fa ff ff       	call   c00106fa <VgaText::setCursorHeight(int)>
c0010c34:	83 c4 10             	add    esp,0x10
c0010c37:	83 ec 04             	sub    esp,0x4
c0010c3a:	6a 00                	push   0x0
c0010c3c:	6a 00                	push   0x0
c0010c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c42:	e8 09 f9 ff ff       	call   c0010550 <VgaText::setCursor(int, int)>
c0010c47:	83 c4 10             	add    esp,0x10
c0010c4a:	83 ec 08             	sub    esp,0x8
c0010c4d:	6a 01                	push   0x1
c0010c4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c53:	e8 9a f6 ff ff       	call   c00102f2 <VgaText::showCursor(bool)>
c0010c58:	83 c4 10             	add    esp,0x10
c0010c5b:	83 ec 08             	sub    esp,0x8
c0010c5e:	6a 01                	push   0x1
c0010c60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c64:	e8 95 f6 ff ff       	call   c00102fe <VgaText::disableBlink(bool)>
c0010c69:	83 c4 10             	add    esp,0x10
c0010c6c:	83 ec 0c             	sub    esp,0xc
c0010c6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c73:	e8 e8 fc ff ff       	call   c0010960 <VgaText::clearScreen()>
c0010c78:	83 c4 10             	add    esp,0x10
c0010c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c7f:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c87:	05 02 01 00 00       	add    eax,0x102
c0010c8c:	83 ec 04             	sub    esp,0x4
c0010c8f:	68 96 00 00 00       	push   0x96
c0010c94:	6a 00                	push   0x0
c0010c96:	50                   	push   eax
c0010c97:	e8 b4 fa fe ff       	call   c0000750 <memset>
c0010c9c:	83 c4 10             	add    esp,0x10
c0010c9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ca3:	05 98 01 00 00       	add    eax,0x198
c0010ca8:	83 ec 04             	sub    esp,0x4
c0010cab:	68 2c 01 00 00       	push   0x12c
c0010cb0:	6a 00                	push   0x0
c0010cb2:	50                   	push   eax
c0010cb3:	e8 98 fa fe ff       	call   c0000750 <memset>
c0010cb8:	83 c4 10             	add    esp,0x10
c0010cbb:	90                   	nop
c0010cbc:	5b                   	pop    ebx
c0010cbd:	5e                   	pop    esi
c0010cbe:	5f                   	pop    edi
c0010cbf:	c3                   	ret    

c0010cc0 <VgaText::receiveKey(unsigned char)>:
c0010cc0:	55                   	push   ebp
c0010cc1:	57                   	push   edi
c0010cc2:	56                   	push   esi
c0010cc3:	53                   	push   ebx
c0010cc4:	83 ec 1c             	sub    esp,0x1c
c0010cc7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010ccb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010ccf:	84 db                	test   bl,bl
c0010cd1:	0f 84 c9 00 00 00    	je     c0010da0 <VgaText::receiveKey(unsigned char)+0xe0>
c0010cd7:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010cdd:	80 fb 08             	cmp    bl,0x8
c0010ce0:	75 2c                	jne    c0010d0e <VgaText::receiveKey(unsigned char)+0x4e>
c0010ce2:	83 ec 0c             	sub    esp,0xc
c0010ce5:	57                   	push   edi
c0010ce6:	e8 81 fa fe ff       	call   c000076c <strlen>
c0010ceb:	83 c4 10             	add    esp,0x10
c0010cee:	85 c0                	test   eax,eax
c0010cf0:	74 41                	je     c0010d33 <VgaText::receiveKey(unsigned char)+0x73>
c0010cf2:	50                   	push   eax
c0010cf3:	50                   	push   eax
c0010cf4:	6a 08                	push   0x8
c0010cf6:	56                   	push   esi
c0010cf7:	e8 be fc ff ff       	call   c00109ba <VgaText::putchar(char)>
c0010cfc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010cff:	e8 68 fa fe ff       	call   c000076c <strlen>
c0010d04:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010d0c:	eb 22                	jmp    c0010d30 <VgaText::receiveKey(unsigned char)+0x70>
c0010d0e:	0f be c3             	movsx  eax,bl
c0010d11:	52                   	push   edx
c0010d12:	52                   	push   edx
c0010d13:	50                   	push   eax
c0010d14:	56                   	push   esi
c0010d15:	e8 a0 fc ff ff       	call   c00109ba <VgaText::putchar(char)>
c0010d1a:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010d1e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010d23:	59                   	pop    ecx
c0010d24:	5d                   	pop    ebp
c0010d25:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010d29:	50                   	push   eax
c0010d2a:	57                   	push   edi
c0010d2b:	e8 1c fc fe ff       	call   c000094c <strcat>
c0010d30:	83 c4 10             	add    esp,0x10
c0010d33:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010d3a:	75 05                	jne    c0010d41 <VgaText::receiveKey(unsigned char)+0x81>
c0010d3c:	80 fb 0a             	cmp    bl,0xa
c0010d3f:	75 53                	jne    c0010d94 <VgaText::receiveKey(unsigned char)+0xd4>
c0010d41:	83 ec 0c             	sub    esp,0xc
c0010d44:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010d4a:	53                   	push   ebx
c0010d4b:	e8 1c fa fe ff       	call   c000076c <strlen>
c0010d50:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010d53:	89 c5                	mov    ebp,eax
c0010d55:	e8 12 fa fe ff       	call   c000076c <strlen>
c0010d5a:	83 c4 10             	add    esp,0x10
c0010d5d:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010d61:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010d66:	76 10                	jbe    c0010d78 <VgaText::receiveKey(unsigned char)+0xb8>
c0010d68:	83 ec 0c             	sub    esp,0xc
c0010d6b:	68 f3 ac 02 c0       	push   0xc002acf3
c0010d70:	e8 b8 95 00 00       	call   c001a32d <Krnl::panic(char const*)>
c0010d75:	83 c4 10             	add    esp,0x10
c0010d78:	50                   	push   eax
c0010d79:	50                   	push   eax
c0010d7a:	57                   	push   edi
c0010d7b:	53                   	push   ebx
c0010d7c:	e8 cb fb fe ff       	call   c000094c <strcat>
c0010d81:	83 c4 0c             	add    esp,0xc
c0010d84:	68 96 00 00 00       	push   0x96
c0010d89:	6a 00                	push   0x0
c0010d8b:	57                   	push   edi
c0010d8c:	e8 bf f9 fe ff       	call   c0000750 <memset>
c0010d91:	83 c4 10             	add    esp,0x10
c0010d94:	83 ec 0c             	sub    esp,0xc
c0010d97:	56                   	push   esi
c0010d98:	e8 3d fa ff ff       	call   c00107da <VgaText::doUpdate()>
c0010d9d:	83 c4 10             	add    esp,0x10
c0010da0:	83 c4 1c             	add    esp,0x1c
c0010da3:	5b                   	pop    ebx
c0010da4:	5e                   	pop    esi
c0010da5:	5f                   	pop    edi
c0010da6:	5d                   	pop    ebp
c0010da7:	c3                   	ret    

c0010da8 <VgaText::write(unsigned long long, void*, int*)>:
c0010da8:	55                   	push   ebp
c0010da9:	57                   	push   edi
c0010daa:	56                   	push   esi
c0010dab:	53                   	push   ebx
c0010dac:	83 ec 0c             	sub    esp,0xc
c0010daf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010db3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010db7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010dbb:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010dc2:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010dc5:	39 eb                	cmp    ebx,ebp
c0010dc7:	74 13                	je     c0010ddc <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010dc9:	43                   	inc    ebx
c0010dca:	50                   	push   eax
c0010dcb:	50                   	push   eax
c0010dcc:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010dd0:	50                   	push   eax
c0010dd1:	56                   	push   esi
c0010dd2:	e8 e3 fb ff ff       	call   c00109ba <VgaText::putchar(char)>
c0010dd7:	83 c4 10             	add    esp,0x10
c0010dda:	eb e9                	jmp    c0010dc5 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010ddc:	83 ec 0c             	sub    esp,0xc
c0010ddf:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010de6:	56                   	push   esi
c0010de7:	e8 ee f9 ff ff       	call   c00107da <VgaText::doUpdate()>
c0010dec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010df0:	89 38                	mov    DWORD PTR [eax],edi
c0010df2:	83 c4 1c             	add    esp,0x1c
c0010df5:	31 c0                	xor    eax,eax
c0010df7:	5b                   	pop    ebx
c0010df8:	5e                   	pop    esi
c0010df9:	5f                   	pop    edi
c0010dfa:	5d                   	pop    ebp
c0010dfb:	c3                   	ret    

c0010dfc <newTerminal(char*)>:
c0010dfc:	83 ec 28             	sub    esp,0x28
c0010dff:	68 c4 02 00 00       	push   0x2c4
c0010e04:	e8 83 ea ff ff       	call   c000f88c <malloc>
c0010e09:	5a                   	pop    edx
c0010e0a:	59                   	pop    ecx
c0010e0b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010e0f:	50                   	push   eax
c0010e10:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010e14:	e8 f9 fc ff ff       	call   c0010b12 <VgaText::VgaText(char const*)>
c0010e19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e1d:	83 c4 2c             	add    esp,0x2c
c0010e20:	c3                   	ret    
c0010e21:	90                   	nop

c0010e22 <TSS::TSS()>:
c0010e22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010e2d:	90                   	nop
c0010e2e:	c3                   	ret    
c0010e2f:	90                   	nop

c0010e30 <TSS::setESP(unsigned long)>:
c0010e30:	55                   	push   ebp
c0010e31:	89 e5                	mov    ebp,esp
c0010e33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e39:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e3c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e3f:	90                   	nop
c0010e40:	5d                   	pop    ebp
c0010e41:	c3                   	ret    

c0010e42 <TSS::flush()>:
c0010e42:	55                   	push   ebp
c0010e43:	89 e5                	mov    ebp,esp
c0010e45:	83 ec 10             	sub    esp,0x10
c0010e48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e4d:	83 c8 03             	or     eax,0x3
c0010e50:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010e54:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010e58:	66 89 d0             	mov    ax,dx
c0010e5b:	0f 00 d8             	ltr    ax
c0010e5e:	90                   	nop
c0010e5f:	c9                   	leave  
c0010e60:	c3                   	ret    
c0010e61:	90                   	nop

c0010e62 <TSS::setup(unsigned long, unsigned long)>:
c0010e62:	55                   	push   ebp
c0010e63:	89 e5                	mov    ebp,esp
c0010e65:	83 ec 18             	sub    esp,0x18
c0010e68:	83 ec 0c             	sub    esp,0xc
c0010e6b:	6a 68                	push   0x68
c0010e6d:	e8 1a ea ff ff       	call   c000f88c <malloc>
c0010e72:	83 c4 10             	add    esp,0x10
c0010e75:	89 c2                	mov    edx,eax
c0010e77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e7a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e83:	83 ec 04             	sub    esp,0x4
c0010e86:	6a 68                	push   0x68
c0010e88:	6a 00                	push   0x0
c0010e8a:	50                   	push   eax
c0010e8b:	e8 c0 f8 fe ff       	call   c0000750 <memset>
c0010e90:	83 c4 10             	add    esp,0x10
c0010e93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e99:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010e9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ea2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ea5:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010eab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010eb1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010eb4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010eb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ebd:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010ec3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ec6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ec9:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010ecf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ed2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ed5:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010edb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ede:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ee1:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010ee7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010eed:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010ef3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ef6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ef9:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010eff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f05:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010f08:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010f0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f11:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010f14:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010f17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f1d:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010f24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f27:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f2a:	0f 20 da             	mov    edx,cr3
c0010f2d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010f30:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010f33:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010f36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f39:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f3c:	83 ec 08             	sub    esp,0x8
c0010f3f:	50                   	push   eax
c0010f40:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010f43:	50                   	push   eax
c0010f44:	e8 1f e1 ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c0010f49:	83 c4 10             	add    esp,0x10
c0010f4c:	83 ec 08             	sub    esp,0x8
c0010f4f:	6a 68                	push   0x68
c0010f51:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010f54:	50                   	push   eax
c0010f55:	e8 2a e1 ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c0010f5a:	83 c4 10             	add    esp,0x10
c0010f5d:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010f61:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010f64:	83 e0 0f             	and    eax,0xf
c0010f67:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010f6a:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010f6d:	83 c8 40             	or     eax,0x40
c0010f70:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010f73:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0010f78:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010f7e:	05 78 01 00 00       	add    eax,0x178
c0010f83:	83 ec 04             	sub    esp,0x4
c0010f86:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010f89:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010f8c:	50                   	push   eax
c0010f8d:	e8 26 e1 ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c0010f92:	83 c4 10             	add    esp,0x10
c0010f95:	89 c2                	mov    edx,eax
c0010f97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f9a:	89 10                	mov    DWORD PTR [eax],edx
c0010f9c:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0010fa1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010fa7:	05 78 01 00 00       	add    eax,0x178
c0010fac:	83 ec 0c             	sub    esp,0xc
c0010faf:	50                   	push   eax
c0010fb0:	e8 47 e1 ff ff       	call   c000f0fc <GDT::flush()>
c0010fb5:	83 c4 10             	add    esp,0x10
c0010fb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0010fbd:	83 ec 08             	sub    esp,0x8
c0010fc0:	50                   	push   eax
c0010fc1:	68 5c ad 02 c0       	push   0xc002ad5c
c0010fc6:	e8 2c 19 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0010fcb:	83 c4 10             	add    esp,0x10
c0010fce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0010fd3:	c9                   	leave  
c0010fd4:	c3                   	ret    
c0010fd5:	90                   	nop

c0010fd6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010fd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fda:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010fde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fe1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010fe6:	75 08                	jne    c0010ff0 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010fe8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010fee:	eb 38                	jmp    c0011028 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010ff0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010ff5:	75 17                	jne    c001100e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010ff7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ffc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010fff:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011005:	8b 10                	mov    edx,DWORD PTR [eax]
c0011007:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001100b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001100e:	89 c1                	mov    ecx,eax
c0011010:	83 e1 fd             	and    ecx,0xfffffffd
c0011013:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011019:	74 cd                	je     c0010fe8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001101b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011020:	83 e0 ef             	and    eax,0xffffffef
c0011023:	83 f8 08             	cmp    eax,0x8
c0011026:	76 c0                	jbe    c0010fe8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011028:	31 c0                	xor    eax,eax
c001102a:	c3                   	ret    
c001102b:	90                   	nop

c001102c <ReservedFilename::isAtty()>:
c001102c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011030:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011033:	31 c0                	xor    eax,eax
c0011035:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001103b:	74 09                	je     c0011046 <ReservedFilename::isAtty()+0x1a>
c001103d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011043:	0f 94 c0             	sete   al
c0011046:	c3                   	ret    
c0011047:	90                   	nop

c0011048 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001104c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011050:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011053:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011057:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001105c:	75 08                	jne    c0011066 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001105e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011064:	eb 3d                	jmp    c00110a3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011066:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001106b:	75 17                	jne    c0011084 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001106d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011072:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011075:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001107b:	8b 10                	mov    edx,DWORD PTR [eax]
c001107d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011081:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011084:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011089:	75 04                	jne    c001108f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001108b:	89 0a                	mov    DWORD PTR [edx],ecx
c001108d:	eb 14                	jmp    c00110a3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001108f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011094:	74 c8                	je     c001105e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011096:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001109b:	83 e0 ef             	and    eax,0xffffffef
c001109e:	83 f8 08             	cmp    eax,0x8
c00110a1:	76 bb                	jbe    c001105e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00110a3:	31 c0                	xor    eax,eax
c00110a5:	c3                   	ret    

c00110a6 <UnixFile::getFileDescriptor()>:
c00110a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110ad:	c3                   	ret    

c00110ae <UnixFile::UnixFile(int)>:
c00110ae:	53                   	push   ebx
c00110af:	83 ec 28             	sub    esp,0x28
c00110b2:	ba 48 ae 02 c0       	mov    edx,0xc002ae48
c00110b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00110bb:	89 10                	mov    DWORD PTR [eax],edx
c00110bd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00110c5:	0f 8f 8c 01 00 00    	jg     c0011257 <UnixFile::UnixFile(int)+0x1a9>
c00110cb:	a1 c0 df 02 c0       	mov    eax,ds:0xc002dfc0
c00110d0:	8d 50 01             	lea    edx,[eax+0x1]
c00110d3:	89 15 c0 df 02 c0    	mov    DWORD PTR ds:0xc002dfc0,edx
c00110d9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00110dd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00110e0:	83 ec 08             	sub    esp,0x8
c00110e3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00110e7:	68 78 f1 02 c0       	push   0xc002f178
c00110ec:	e8 bb 7e 01 00       	call   c0028fac <LinkedList<UnixFile>::addElement(UnixFile*)>
c00110f1:	83 c4 10             	add    esp,0x10
c00110f4:	a0 74 f1 02 c0       	mov    al,ds:0xc002f174
c00110f9:	83 f0 01             	xor    eax,0x1
c00110fc:	84 c0                	test   al,al
c00110fe:	0f 84 54 01 00 00    	je     c0011258 <UnixFile::UnixFile(int)+0x1aa>
c0011104:	c6 05 74 f1 02 c0 01 	mov    BYTE PTR ds:0xc002f174,0x1
c001110b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011113:	83 ec 0c             	sub    esp,0xc
c0011116:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001111a:	e8 6d e7 ff ff       	call   c000f88c <malloc>
c001111f:	83 c4 10             	add    esp,0x10
c0011122:	89 c3                	mov    ebx,eax
c0011124:	83 ec 08             	sub    esp,0x8
c0011127:	68 03 ff ff 0f       	push   0xfffff03
c001112c:	53                   	push   ebx
c001112d:	e8 2c 01 00 00       	call   c001125e <ReservedFilename::ReservedFilename(int)>
c0011132:	83 c4 10             	add    esp,0x10
c0011135:	89 1d 6c f1 02 c0    	mov    DWORD PTR ds:0xc002f16c,ebx
c001113b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011143:	83 ec 0c             	sub    esp,0xc
c0011146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001114a:	e8 3d e7 ff ff       	call   c000f88c <malloc>
c001114f:	83 c4 10             	add    esp,0x10
c0011152:	89 c3                	mov    ebx,eax
c0011154:	83 ec 08             	sub    esp,0x8
c0011157:	68 01 ff ff 0f       	push   0xfffff01
c001115c:	53                   	push   ebx
c001115d:	e8 fc 00 00 00       	call   c001125e <ReservedFilename::ReservedFilename(int)>
c0011162:	83 c4 10             	add    esp,0x10
c0011165:	89 1d 70 f1 02 c0    	mov    DWORD PTR ds:0xc002f170,ebx
c001116b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011173:	83 ec 0c             	sub    esp,0xc
c0011176:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001117a:	e8 0d e7 ff ff       	call   c000f88c <malloc>
c001117f:	83 c4 10             	add    esp,0x10
c0011182:	89 c3                	mov    ebx,eax
c0011184:	83 ec 08             	sub    esp,0x8
c0011187:	68 00 ff ff 0f       	push   0xfffff00
c001118c:	53                   	push   ebx
c001118d:	e8 cc 00 00 00       	call   c001125e <ReservedFilename::ReservedFilename(int)>
c0011192:	83 c4 10             	add    esp,0x10
c0011195:	89 1d 64 f1 02 c0    	mov    DWORD PTR ds:0xc002f164,ebx
c001119b:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00111a3:	83 ec 0c             	sub    esp,0xc
c00111a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00111aa:	e8 dd e6 ff ff       	call   c000f88c <malloc>
c00111af:	83 c4 10             	add    esp,0x10
c00111b2:	89 c3                	mov    ebx,eax
c00111b4:	83 ec 08             	sub    esp,0x8
c00111b7:	68 02 ff ff 0f       	push   0xfffff02
c00111bc:	53                   	push   ebx
c00111bd:	e8 9c 00 00 00       	call   c001125e <ReservedFilename::ReservedFilename(int)>
c00111c2:	83 c4 10             	add    esp,0x10
c00111c5:	89 1d 68 f1 02 c0    	mov    DWORD PTR ds:0xc002f168,ebx
c00111cb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00111d3:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00111d8:	7f 7e                	jg     c0011258 <UnixFile::UnixFile(int)+0x1aa>
c00111da:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00111e2:	83 ec 0c             	sub    esp,0xc
c00111e5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00111e9:	e8 9e e6 ff ff       	call   c000f88c <malloc>
c00111ee:	83 c4 10             	add    esp,0x10
c00111f1:	89 c3                	mov    ebx,eax
c00111f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111f7:	05 10 ff ff 0f       	add    eax,0xfffff10
c00111fc:	83 ec 08             	sub    esp,0x8
c00111ff:	50                   	push   eax
c0011200:	53                   	push   ebx
c0011201:	e8 58 00 00 00       	call   c001125e <ReservedFilename::ReservedFilename(int)>
c0011206:	83 c4 10             	add    esp,0x10
c0011209:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001120d:	89 1c 85 40 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ec0],ebx
c0011214:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001121c:	83 ec 0c             	sub    esp,0xc
c001121f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011223:	e8 64 e6 ff ff       	call   c000f88c <malloc>
c0011228:	83 c4 10             	add    esp,0x10
c001122b:	89 c3                	mov    ebx,eax
c001122d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011231:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011236:	83 ec 08             	sub    esp,0x8
c0011239:	50                   	push   eax
c001123a:	53                   	push   ebx
c001123b:	e8 1e 00 00 00       	call   c001125e <ReservedFilename::ReservedFilename(int)>
c0011240:	83 c4 10             	add    esp,0x10
c0011243:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011247:	89 1c 85 00 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0f00],ebx
c001124e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011252:	e9 7c ff ff ff       	jmp    c00111d3 <UnixFile::UnixFile(int)+0x125>
c0011257:	90                   	nop
c0011258:	83 c4 28             	add    esp,0x28
c001125b:	5b                   	pop    ebx
c001125c:	c3                   	ret    
c001125d:	90                   	nop

c001125e <ReservedFilename::ReservedFilename(int)>:
c001125e:	83 ec 0c             	sub    esp,0xc
c0011261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011265:	83 ec 08             	sub    esp,0x8
c0011268:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001126c:	50                   	push   eax
c001126d:	e8 3c fe ff ff       	call   c00110ae <UnixFile::UnixFile(int)>
c0011272:	83 c4 10             	add    esp,0x10
c0011275:	ba 64 ae 02 c0       	mov    edx,0xc002ae64
c001127a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001127e:	89 10                	mov    DWORD PTR [eax],edx
c0011280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011284:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011288:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001128b:	90                   	nop
c001128c:	83 c4 0c             	add    esp,0xc
c001128f:	c3                   	ret    

c0011290 <UnixFile::~UnixFile()>:
c0011290:	83 ec 1c             	sub    esp,0x1c
c0011293:	ba 48 ae 02 c0       	mov    edx,0xc002ae48
c0011298:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001129c:	89 10                	mov    DWORD PTR [eax],edx
c001129e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112a5:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00112aa:	7f 73                	jg     c001131f <UnixFile::~UnixFile()+0x8f>
c00112ac:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00112b4:	83 ec 0c             	sub    esp,0xc
c00112b7:	68 78 f1 02 c0       	push   0xc002f178
c00112bc:	e8 bf 7d 01 00       	call   c0029080 <LinkedList<UnixFile>::getFirstElement()>
c00112c1:	83 c4 10             	add    esp,0x10
c00112c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00112c8:	83 ec 0c             	sub    esp,0xc
c00112cb:	68 78 f1 02 c0       	push   0xc002f178
c00112d0:	e8 b3 7d 01 00       	call   c0029088 <LinkedList<UnixFile>::removeFirst()>
c00112d5:	83 c4 10             	add    esp,0x10
c00112d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00112dc:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00112e0:	74 40                	je     c0011322 <UnixFile::~UnixFile()+0x92>
c00112e2:	83 ec 08             	sub    esp,0x8
c00112e5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00112e9:	68 78 f1 02 c0       	push   0xc002f178
c00112ee:	e8 b9 7c 01 00       	call   c0028fac <LinkedList<UnixFile>::addElement(UnixFile*)>
c00112f3:	83 c4 10             	add    esp,0x10
c00112f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112fa:	8d 50 01             	lea    edx,[eax+0x1]
c00112fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011301:	3d 88 13 00 00       	cmp    eax,0x1388
c0011306:	0f 94 c0             	sete   al
c0011309:	84 c0                	test   al,al
c001130b:	74 a7                	je     c00112b4 <UnixFile::~UnixFile()+0x24>
c001130d:	83 ec 0c             	sub    esp,0xc
c0011310:	68 20 ae 02 c0       	push   0xc002ae20
c0011315:	e8 13 90 00 00       	call   c001a32d <Krnl::panic(char const*)>
c001131a:	83 c4 10             	add    esp,0x10
c001131d:	eb 95                	jmp    c00112b4 <UnixFile::~UnixFile()+0x24>
c001131f:	90                   	nop
c0011320:	eb 01                	jmp    c0011323 <UnixFile::~UnixFile()+0x93>
c0011322:	90                   	nop
c0011323:	90                   	nop
c0011324:	83 c4 1c             	add    esp,0x1c
c0011327:	c3                   	ret    

c0011328 <UnixFile::~UnixFile()>:
c0011328:	83 ec 0c             	sub    esp,0xc
c001132b:	83 ec 0c             	sub    esp,0xc
c001132e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011332:	e8 59 ff ff ff       	call   c0011290 <UnixFile::~UnixFile()>
c0011337:	83 c4 10             	add    esp,0x10
c001133a:	83 ec 08             	sub    esp,0x8
c001133d:	6a 0c                	push   0xc
c001133f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011343:	e8 cf 14 00 00       	call   c0012817 <operator delete(void*, unsigned long)>
c0011348:	83 c4 10             	add    esp,0x10
c001134b:	83 c4 0c             	add    esp,0xc
c001134e:	c3                   	ret    
c001134f:	90                   	nop

c0011350 <ReservedFilename::~ReservedFilename()>:
c0011350:	83 ec 0c             	sub    esp,0xc
c0011353:	ba 64 ae 02 c0       	mov    edx,0xc002ae64
c0011358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001135c:	89 10                	mov    DWORD PTR [eax],edx
c001135e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011362:	83 ec 0c             	sub    esp,0xc
c0011365:	50                   	push   eax
c0011366:	e8 25 ff ff ff       	call   c0011290 <UnixFile::~UnixFile()>
c001136b:	83 c4 10             	add    esp,0x10
c001136e:	90                   	nop
c001136f:	83 c4 0c             	add    esp,0xc
c0011372:	c3                   	ret    
c0011373:	90                   	nop

c0011374 <ReservedFilename::~ReservedFilename()>:
c0011374:	83 ec 0c             	sub    esp,0xc
c0011377:	83 ec 0c             	sub    esp,0xc
c001137a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001137e:	e8 cd ff ff ff       	call   c0011350 <ReservedFilename::~ReservedFilename()>
c0011383:	83 c4 10             	add    esp,0x10
c0011386:	83 ec 08             	sub    esp,0x8
c0011389:	6a 0c                	push   0xc
c001138b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001138f:	e8 83 14 00 00       	call   c0012817 <operator delete(void*, unsigned long)>
c0011394:	83 c4 10             	add    esp,0x10
c0011397:	83 c4 0c             	add    esp,0xc
c001139a:	c3                   	ret    

c001139b <getFromFileDescriptor(int)>:
c001139b:	53                   	push   ebx
c001139c:	83 ec 08             	sub    esp,0x8
c001139f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00113a3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00113a9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00113af:	7f 2c                	jg     c00113dd <getFromFileDescriptor(int)+0x42>
c00113b1:	83 ec 0c             	sub    esp,0xc
c00113b4:	68 78 f1 02 c0       	push   0xc002f178
c00113b9:	e8 c2 7c 01 00       	call   c0029080 <LinkedList<UnixFile>::getFirstElement()>
c00113be:	83 c4 10             	add    esp,0x10
c00113c1:	85 c0                	test   eax,eax
c00113c3:	75 04                	jne    c00113c9 <getFromFileDescriptor(int)+0x2e>
c00113c5:	31 c0                	xor    eax,eax
c00113c7:	eb 6e                	jmp    c0011437 <getFromFileDescriptor(int)+0x9c>
c00113c9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00113cc:	74 69                	je     c0011437 <getFromFileDescriptor(int)+0x9c>
c00113ce:	52                   	push   edx
c00113cf:	52                   	push   edx
c00113d0:	50                   	push   eax
c00113d1:	68 78 f1 02 c0       	push   0xc002f178
c00113d6:	e8 4f 7d 01 00       	call   c002912a <LinkedList<UnixFile>::getNext(UnixFile*)>
c00113db:	eb e1                	jmp    c00113be <getFromFileDescriptor(int)+0x23>
c00113dd:	a1 6c f1 02 c0       	mov    eax,ds:0xc002f16c
c00113e2:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00113e8:	74 4d                	je     c0011437 <getFromFileDescriptor(int)+0x9c>
c00113ea:	a1 70 f1 02 c0       	mov    eax,ds:0xc002f170
c00113ef:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00113f5:	74 40                	je     c0011437 <getFromFileDescriptor(int)+0x9c>
c00113f7:	a1 68 f1 02 c0       	mov    eax,ds:0xc002f168
c00113fc:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011402:	74 33                	je     c0011437 <getFromFileDescriptor(int)+0x9c>
c0011404:	a1 64 f1 02 c0       	mov    eax,ds:0xc002f164
c0011409:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001140f:	74 26                	je     c0011437 <getFromFileDescriptor(int)+0x9c>
c0011411:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011417:	83 f8 08             	cmp    eax,0x8
c001141a:	77 09                	ja     c0011425 <getFromFileDescriptor(int)+0x8a>
c001141c:	8b 04 85 40 f1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ec0]
c0011423:	eb 12                	jmp    c0011437 <getFromFileDescriptor(int)+0x9c>
c0011425:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001142b:	83 fb 08             	cmp    ebx,0x8
c001142e:	77 95                	ja     c00113c5 <getFromFileDescriptor(int)+0x2a>
c0011430:	8b 04 9d 00 f1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0f00]
c0011437:	83 c4 08             	add    esp,0x8
c001143a:	5b                   	pop    ebx
c001143b:	c3                   	ret    

c001143c <__static_initialization_and_destruction_0(int, int)>:
c001143c:	83 ec 0c             	sub    esp,0xc
c001143f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011444:	75 34                	jne    c001147a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011446:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001144e:	75 2a                	jne    c001147a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011450:	83 ec 0c             	sub    esp,0xc
c0011453:	68 78 f1 02 c0       	push   0xc002f178
c0011458:	e8 f7 7a 01 00       	call   c0028f54 <LinkedList<UnixFile>::LinkedList()>
c001145d:	83 c4 10             	add    esp,0x10
c0011460:	83 ec 04             	sub    esp,0x4
c0011463:	68 dc dd 02 c0       	push   0xc002dddc
c0011468:	68 78 f1 02 c0       	push   0xc002f178
c001146d:	68 52 8f 02 c0       	push   0xc0028f52
c0011472:	e8 1a 13 00 00       	call   c0012791 <__cxa_atexit>
c0011477:	83 c4 10             	add    esp,0x10
c001147a:	90                   	nop
c001147b:	83 c4 0c             	add    esp,0xc
c001147e:	c3                   	ret    

c001147f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001147f:	83 ec 0c             	sub    esp,0xc
c0011482:	83 ec 08             	sub    esp,0x8
c0011485:	68 ff ff 00 00       	push   0xffff
c001148a:	6a 01                	push   0x1
c001148c:	e8 ab ff ff ff       	call   c001143c <__static_initialization_and_destruction_0(int, int)>
c0011491:	83 c4 10             	add    esp,0x10
c0011494:	83 c4 0c             	add    esp,0xc
c0011497:	c3                   	ret    

c0011498 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011498:	53                   	push   ebx
c0011499:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001149d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00114a1:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00114a7:	89 c8                	mov    eax,ecx
c00114a9:	d1 e8                	shr    eax,1
c00114ab:	03 05 c8 df 02 c0    	add    eax,DWORD PTR ds:0xc002dfc8
c00114b1:	83 e1 01             	and    ecx,0x1
c00114b4:	8a 10                	mov    dl,BYTE PTR [eax]
c00114b6:	75 09                	jne    c00114c1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00114b8:	83 e2 f0             	and    edx,0xfffffff0
c00114bb:	09 da                	or     edx,ebx
c00114bd:	88 10                	mov    BYTE PTR [eax],dl
c00114bf:	5b                   	pop    ebx
c00114c0:	c3                   	ret    
c00114c1:	c1 e3 04             	shl    ebx,0x4
c00114c4:	83 e2 0f             	and    edx,0xf
c00114c7:	09 da                	or     edx,ebx
c00114c9:	88 10                	mov    BYTE PTR [eax],dl
c00114cb:	5b                   	pop    ebx
c00114cc:	c3                   	ret    

c00114cd <Virt::getPageState(unsigned long)>:
c00114cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114d1:	8b 0d c8 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002dfc8
c00114d7:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00114dd:	89 d0                	mov    eax,edx
c00114df:	d1 e8                	shr    eax,1
c00114e1:	83 e2 01             	and    edx,0x1
c00114e4:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00114e7:	75 04                	jne    c00114ed <Virt::getPageState(unsigned long)+0x20>
c00114e9:	83 e0 0f             	and    eax,0xf
c00114ec:	c3                   	ret    
c00114ed:	c0 e8 04             	shr    al,0x4
c00114f0:	c3                   	ret    

c00114f1 <Virt::allocateKernelVirtualPages(int)>:
c00114f1:	55                   	push   ebp
c00114f2:	31 ed                	xor    ebp,ebp
c00114f4:	57                   	push   edi
c00114f5:	56                   	push   esi
c00114f6:	53                   	push   ebx
c00114f7:	31 db                	xor    ebx,ebx
c00114f9:	83 ec 1c             	sub    esp,0x1c
c00114fc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011500:	8b 3d c4 df 02 c0    	mov    edi,DWORD PTR ds:0xc002dfc4
c0011506:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001150b:	57                   	push   edi
c001150c:	e8 bc ff ff ff       	call   c00114cd <Virt::getPageState(unsigned long)>
c0011511:	5a                   	pop    edx
c0011512:	84 c0                	test   al,al
c0011514:	75 3a                	jne    c0011550 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011516:	85 db                	test   ebx,ebx
c0011518:	75 02                	jne    c001151c <Virt::allocateKernelVirtualPages(int)+0x2b>
c001151a:	89 fd                	mov    ebp,edi
c001151c:	43                   	inc    ebx
c001151d:	39 f3                	cmp    ebx,esi
c001151f:	74 5a                	je     c001157b <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011521:	47                   	inc    edi
c0011522:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011528:	76 31                	jbe    c001155b <Virt::allocateKernelVirtualPages(int)+0x6a>
c001152a:	c7 05 c4 df 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002dfc4,0xc8000
c0011534:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011539:	75 28                	jne    c0011563 <Virt::allocateKernelVirtualPages(int)+0x72>
c001153b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011540:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011545:	57                   	push   edi
c0011546:	e8 82 ff ff ff       	call   c00114cd <Virt::getPageState(unsigned long)>
c001154b:	5a                   	pop    edx
c001154c:	84 c0                	test   al,al
c001154e:	74 c6                	je     c0011516 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011550:	31 db                	xor    ebx,ebx
c0011552:	47                   	inc    edi
c0011553:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011559:	77 cf                	ja     c001152a <Virt::allocateKernelVirtualPages(int)+0x39>
c001155b:	89 3d c4 df 02 c0    	mov    DWORD PTR ds:0xc002dfc4,edi
c0011561:	eb a8                	jmp    c001150b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011563:	83 ec 0c             	sub    esp,0xc
c0011566:	68 78 ae 02 c0       	push   0xc002ae78
c001156b:	e8 bd 8d 00 00       	call   c001a32d <Krnl::panic(char const*)>
c0011570:	8b 3d c4 df 02 c0    	mov    edi,DWORD PTR ds:0xc002dfc4
c0011576:	83 c4 10             	add    esp,0x10
c0011579:	eb 90                	jmp    c001150b <Virt::allocateKernelVirtualPages(int)+0x1a>
c001157b:	89 2d c4 df 02 c0    	mov    DWORD PTR ds:0xc002dfc4,ebp
c0011581:	4b                   	dec    ebx
c0011582:	74 5f                	je     c00115e3 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011584:	85 f6                	test   esi,esi
c0011586:	74 3d                	je     c00115c5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011588:	89 e8                	mov    eax,ebp
c001158a:	31 db                	xor    ebx,ebx
c001158c:	8d 7e ff             	lea    edi,[esi-0x1]
c001158f:	eb 14                	jmp    c00115a5 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011591:	6a 01                	push   0x1
c0011593:	43                   	inc    ebx
c0011594:	50                   	push   eax
c0011595:	e8 fe fe ff ff       	call   c0011498 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001159a:	58                   	pop    eax
c001159b:	39 f3                	cmp    ebx,esi
c001159d:	5a                   	pop    edx
c001159e:	74 25                	je     c00115c5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00115a0:	a1 c4 df 02 c0       	mov    eax,ds:0xc002dfc4
c00115a5:	8d 50 01             	lea    edx,[eax+0x1]
c00115a8:	85 db                	test   ebx,ebx
c00115aa:	89 15 c4 df 02 c0    	mov    DWORD PTR ds:0xc002dfc4,edx
c00115b0:	74 20                	je     c00115d2 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00115b2:	39 df                	cmp    edi,ebx
c00115b4:	75 db                	jne    c0011591 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00115b6:	6a 03                	push   0x3
c00115b8:	43                   	inc    ebx
c00115b9:	50                   	push   eax
c00115ba:	e8 d9 fe ff ff       	call   c0011498 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00115bf:	59                   	pop    ecx
c00115c0:	39 f3                	cmp    ebx,esi
c00115c2:	58                   	pop    eax
c00115c3:	75 db                	jne    c00115a0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00115c5:	83 c4 1c             	add    esp,0x1c
c00115c8:	89 e8                	mov    eax,ebp
c00115ca:	5b                   	pop    ebx
c00115cb:	c1 e0 0c             	shl    eax,0xc
c00115ce:	5e                   	pop    esi
c00115cf:	5f                   	pop    edi
c00115d0:	5d                   	pop    ebp
c00115d1:	c3                   	ret    
c00115d2:	6a 02                	push   0x2
c00115d4:	bb 01 00 00 00       	mov    ebx,0x1
c00115d9:	50                   	push   eax
c00115da:	e8 b9 fe ff ff       	call   c0011498 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00115df:	58                   	pop    eax
c00115e0:	5a                   	pop    edx
c00115e1:	eb bd                	jmp    c00115a0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00115e3:	6a 04                	push   0x4
c00115e5:	8d 45 01             	lea    eax,[ebp+0x1]
c00115e8:	55                   	push   ebp
c00115e9:	a3 c4 df 02 c0       	mov    ds:0xc002dfc4,eax
c00115ee:	e8 a5 fe ff ff       	call   c0011498 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00115f3:	59                   	pop    ecx
c00115f4:	89 e8                	mov    eax,ebp
c00115f6:	5b                   	pop    ebx
c00115f7:	c1 e0 0c             	shl    eax,0xc
c00115fa:	83 c4 1c             	add    esp,0x1c
c00115fd:	5b                   	pop    ebx
c00115fe:	5e                   	pop    esi
c00115ff:	5f                   	pop    edi
c0011600:	5d                   	pop    ebp
c0011601:	c3                   	ret    

c0011602 <Virt::freeSwapfilePage(unsigned long)>:
c0011602:	53                   	push   ebx
c0011603:	8b 15 8c f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f18c
c0011609:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001160d:	b8 01 00 00 00       	mov    eax,0x1
c0011612:	89 cb                	mov    ebx,ecx
c0011614:	d3 e0                	shl    eax,cl
c0011616:	c1 eb 05             	shr    ebx,0x5
c0011619:	f7 d0                	not    eax
c001161b:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c001161e:	5b                   	pop    ebx
c001161f:	c3                   	ret    

c0011620 <Virt::swapIDToSector(unsigned long)>:
c0011620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011624:	0f af 05 cc df 02 c0 	imul   eax,DWORD PTR ds:0xc002dfcc
c001162b:	03 05 d4 df 02 c0    	add    eax,DWORD PTR ds:0xc002dfd4
c0011631:	c3                   	ret    

c0011632 <Virt::allocateSwapfilePage()>:
c0011632:	55                   	push   ebp
c0011633:	31 d2                	xor    edx,edx
c0011635:	57                   	push   edi
c0011636:	56                   	push   esi
c0011637:	53                   	push   ebx
c0011638:	83 ec 0c             	sub    esp,0xc
c001163b:	8b 0d cc df 02 c0    	mov    ecx,DWORD PTR ds:0xc002dfcc
c0011641:	a1 d0 df 02 c0       	mov    eax,ds:0xc002dfd0
c0011646:	f7 f1                	div    ecx
c0011648:	39 0d d0 df 02 c0    	cmp    DWORD PTR ds:0xc002dfd0,ecx
c001164e:	72 2d                	jb     c001167d <Virt::allocateSwapfilePage()+0x4b>
c0011650:	8b 35 8c f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f18c
c0011656:	8b 16                	mov    edx,DWORD PTR [esi]
c0011658:	f6 c2 01             	test   dl,0x1
c001165b:	74 3c                	je     c0011699 <Virt::allocateSwapfilePage()+0x67>
c001165d:	31 c9                	xor    ecx,ecx
c001165f:	bf 01 00 00 00       	mov    edi,0x1
c0011664:	eb 12                	jmp    c0011678 <Virt::allocateSwapfilePage()+0x46>
c0011666:	89 fd                	mov    ebp,edi
c0011668:	89 ca                	mov    edx,ecx
c001166a:	d3 e5                	shl    ebp,cl
c001166c:	c1 ea 05             	shr    edx,0x5
c001166f:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011672:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011674:	85 ea                	test   edx,ebp
c0011676:	74 2a                	je     c00116a2 <Virt::allocateSwapfilePage()+0x70>
c0011678:	41                   	inc    ecx
c0011679:	39 c8                	cmp    eax,ecx
c001167b:	77 e9                	ja     c0011666 <Virt::allocateSwapfilePage()+0x34>
c001167d:	83 ec 0c             	sub    esp,0xc
c0011680:	68 ff af 02 c0       	push   0xc002afff
c0011685:	e8 a3 8c 00 00       	call   c001a32d <Krnl::panic(char const*)>
c001168a:	83 c4 10             	add    esp,0x10
c001168d:	31 c9                	xor    ecx,ecx
c001168f:	83 c4 0c             	add    esp,0xc
c0011692:	89 c8                	mov    eax,ecx
c0011694:	5b                   	pop    ebx
c0011695:	5e                   	pop    esi
c0011696:	5f                   	pop    edi
c0011697:	5d                   	pop    ebp
c0011698:	c3                   	ret    
c0011699:	89 f3                	mov    ebx,esi
c001169b:	bd 01 00 00 00       	mov    ebp,0x1
c00116a0:	31 c9                	xor    ecx,ecx
c00116a2:	09 ea                	or     edx,ebp
c00116a4:	89 c8                	mov    eax,ecx
c00116a6:	89 13                	mov    DWORD PTR [ebx],edx
c00116a8:	83 c4 0c             	add    esp,0xc
c00116ab:	5b                   	pop    ebx
c00116ac:	5e                   	pop    esi
c00116ad:	5f                   	pop    edi
c00116ae:	5d                   	pop    ebp
c00116af:	c3                   	ret    

c00116b0 <Virt::virtualMemorySetup()>:
c00116b0:	53                   	push   ebx
c00116b1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00116b6:	83 ec 08             	sub    esp,0x8
c00116b9:	6a 0f                	push   0xf
c00116bb:	53                   	push   ebx
c00116bc:	43                   	inc    ebx
c00116bd:	e8 d6 fd ff ff       	call   c0011498 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116c2:	59                   	pop    ecx
c00116c3:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00116c9:	58                   	pop    eax
c00116ca:	75 ed                	jne    c00116b9 <Virt::virtualMemorySetup()+0x9>
c00116cc:	83 ec 08             	sub    esp,0x8
c00116cf:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00116d4:	68 00 00 00 c8       	push   0xc8000000
c00116d9:	68 16 b0 02 c0       	push   0xc002b016
c00116de:	e8 14 12 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00116e3:	58                   	pop    eax
c00116e4:	5a                   	pop    edx
c00116e5:	68 00 f0 ff ef       	push   0xeffff000
c00116ea:	68 2a b0 02 c0       	push   0xc002b02a
c00116ef:	e8 03 12 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00116f4:	83 c4 10             	add    esp,0x10
c00116f7:	83 ec 08             	sub    esp,0x8
c00116fa:	6a 00                	push   0x0
c00116fc:	53                   	push   ebx
c00116fd:	43                   	inc    ebx
c00116fe:	e8 95 fd ff ff       	call   c0011498 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011703:	83 c4 10             	add    esp,0x10
c0011706:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001170c:	75 e9                	jne    c00116f7 <Virt::virtualMemorySetup()+0x47>
c001170e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011713:	83 ec 08             	sub    esp,0x8
c0011716:	6a 0f                	push   0xf
c0011718:	53                   	push   ebx
c0011719:	43                   	inc    ebx
c001171a:	e8 79 fd ff ff       	call   c0011498 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001171f:	83 c4 10             	add    esp,0x10
c0011722:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011728:	75 e9                	jne    c0011713 <Virt::virtualMemorySetup()+0x63>
c001172a:	83 c4 08             	add    esp,0x8
c001172d:	5b                   	pop    ebx
c001172e:	c3                   	ret    

c001172f <Virt::setupPageSwapping(int)>:
c001172f:	57                   	push   edi
c0011730:	56                   	push   esi
c0011731:	53                   	push   ebx
c0011732:	83 ec 1c             	sub    esp,0x1c
c0011735:	68 3e b0 02 c0       	push   0xc002b03e
c001173a:	e8 b8 11 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001173f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011746:	e8 41 e1 ff ff       	call   c000f88c <malloc>
c001174b:	83 c4 0c             	add    esp,0xc
c001174e:	89 c6                	mov    esi,eax
c0011750:	ff 35 70 25 03 c0    	push   DWORD PTR ds:0xc0032570
c0011756:	68 52 b0 02 c0       	push   0xc002b052
c001175b:	50                   	push   eax
c001175c:	e8 f5 16 00 00       	call   c0012e56 <File::File(char const*, Process*)>
c0011761:	89 34 24             	mov    DWORD PTR [esp],esi
c0011764:	e8 c9 18 00 00       	call   c0013032 <File::unlink()>
c0011769:	59                   	pop    ecx
c001176a:	5b                   	pop    ebx
c001176b:	6a 12                	push   0x12
c001176d:	56                   	push   esi
c001176e:	e8 47 17 00 00       	call   c0012eba <File::open(FileOpenMode)>
c0011773:	83 c4 10             	add    esp,0x10
c0011776:	85 c0                	test   eax,eax
c0011778:	0f 85 5b 01 00 00    	jne    c00118d9 <Virt::setupPageSwapping(int)+0x1aa>
c001177e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011782:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001178a:	c1 e3 08             	shl    ebx,0x8
c001178d:	83 ec 0c             	sub    esp,0xc
c0011790:	68 00 00 01 00       	push   0x10000
c0011795:	e8 f2 e0 ff ff       	call   c000f88c <malloc>
c001179a:	83 c4 0c             	add    esp,0xc
c001179d:	89 c7                	mov    edi,eax
c001179f:	68 00 00 01 00       	push   0x10000
c00117a4:	68 ee 00 00 00       	push   0xee
c00117a9:	50                   	push   eax
c00117aa:	e8 a1 ef fe ff       	call   c0000750 <memset>
c00117af:	83 c4 10             	add    esp,0x10
c00117b2:	85 db                	test   ebx,ebx
c00117b4:	79 03                	jns    c00117b9 <Virt::setupPageSwapping(int)+0x8a>
c00117b6:	83 c3 0f             	add    ebx,0xf
c00117b9:	c1 fb 04             	sar    ebx,0x4
c00117bc:	4b                   	dec    ebx
c00117bd:	83 fb ff             	cmp    ebx,0xffffffff
c00117c0:	74 4f                	je     c0011811 <Virt::setupPageSwapping(int)+0xe2>
c00117c2:	83 ec 0c             	sub    esp,0xc
c00117c5:	8b 06                	mov    eax,DWORD PTR [esi]
c00117c7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00117cb:	52                   	push   edx
c00117cc:	57                   	push   edi
c00117cd:	6a 00                	push   0x0
c00117cf:	68 00 00 01 00       	push   0x10000
c00117d4:	56                   	push   esi
c00117d5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00117d8:	83 c4 20             	add    esp,0x20
c00117db:	85 c0                	test   eax,eax
c00117dd:	0f 85 e0 00 00 00    	jne    c00118c3 <Virt::setupPageSwapping(int)+0x194>
c00117e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117e7:	3d 00 00 01 00       	cmp    eax,0x10000
c00117ec:	74 ce                	je     c00117bc <Virt::setupPageSwapping(int)+0x8d>
c00117ee:	83 ec 08             	sub    esp,0x8
c00117f1:	4b                   	dec    ebx
c00117f2:	50                   	push   eax
c00117f3:	68 a5 b0 02 c0       	push   0xc002b0a5
c00117f8:	e8 fa 10 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00117fd:	c7 04 24 ae b0 02 c0 	mov    DWORD PTR [esp],0xc002b0ae
c0011804:	e8 24 8b 00 00       	call   c001a32d <Krnl::panic(char const*)>
c0011809:	83 c4 10             	add    esp,0x10
c001180c:	83 fb ff             	cmp    ebx,0xffffffff
c001180f:	75 b1                	jne    c00117c2 <Virt::setupPageSwapping(int)+0x93>
c0011811:	83 ec 0c             	sub    esp,0xc
c0011814:	56                   	push   esi
c0011815:	e8 fe 16 00 00       	call   c0012f18 <File::close()>
c001181a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001181d:	e8 8a e0 ff ff       	call   c000f8ac <rfree>
c0011822:	83 c4 10             	add    esp,0x10
c0011825:	85 f6                	test   esi,esi
c0011827:	74 0c                	je     c0011835 <Virt::setupPageSwapping(int)+0x106>
c0011829:	83 ec 0c             	sub    esp,0xc
c001182c:	8b 06                	mov    eax,DWORD PTR [esi]
c001182e:	56                   	push   esi
c001182f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011832:	83 c4 10             	add    esp,0x10
c0011835:	83 ec 08             	sub    esp,0x8
c0011838:	a1 28 f6 02 c0       	mov    eax,ds:0xc002f628
c001183d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011843:	8b 10                	mov    edx,DWORD PTR [eax]
c0011845:	68 52 b0 02 c0       	push   0xc002b052
c001184a:	50                   	push   eax
c001184b:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c001184e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011852:	c6 05 d8 df 02 c0 43 	mov    BYTE PTR ds:0xc002dfd8,0x43
c0011859:	c1 e2 0b             	shl    edx,0xb
c001185c:	a3 d4 df 02 c0       	mov    ds:0xc002dfd4,eax
c0011861:	89 15 d0 df 02 c0    	mov    DWORD PTR ds:0xc002dfd0,edx
c0011867:	c7 05 cc df 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002dfcc,0x8
c0011871:	c1 ea 08             	shr    edx,0x8
c0011874:	89 14 24             	mov    DWORD PTR [esp],edx
c0011877:	e8 10 e0 ff ff       	call   c000f88c <malloc>
c001187c:	83 c4 0c             	add    esp,0xc
c001187f:	89 c1                	mov    ecx,eax
c0011881:	a3 8c f1 02 c0       	mov    ds:0xc002f18c,eax
c0011886:	31 d2                	xor    edx,edx
c0011888:	a1 d0 df 02 c0       	mov    eax,ds:0xc002dfd0
c001188d:	f7 35 cc df 02 c0    	div    DWORD PTR ds:0xc002dfcc
c0011893:	c1 e8 05             	shr    eax,0x5
c0011896:	50                   	push   eax
c0011897:	6a 00                	push   0x0
c0011899:	51                   	push   ecx
c001189a:	e8 b1 ee fe ff       	call   c0000750 <memset>
c001189f:	58                   	pop    eax
c00118a0:	a1 d0 df 02 c0       	mov    eax,ds:0xc002dfd0
c00118a5:	5a                   	pop    edx
c00118a6:	31 d2                	xor    edx,edx
c00118a8:	f7 35 cc df 02 c0    	div    DWORD PTR ds:0xc002dfcc
c00118ae:	c1 e8 05             	shr    eax,0x5
c00118b1:	50                   	push   eax
c00118b2:	68 b4 b0 02 c0       	push   0xc002b0b4
c00118b7:	e8 3b 10 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00118bc:	83 c4 20             	add    esp,0x20
c00118bf:	5b                   	pop    ebx
c00118c0:	5e                   	pop    esi
c00118c1:	5f                   	pop    edi
c00118c2:	c3                   	ret    
c00118c3:	83 ec 08             	sub    esp,0x8
c00118c6:	50                   	push   eax
c00118c7:	68 8d b0 02 c0       	push   0xc002b08d
c00118cc:	e8 26 10 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00118d1:	83 c4 10             	add    esp,0x10
c00118d4:	e9 0a ff ff ff       	jmp    c00117e3 <Virt::setupPageSwapping(int)+0xb4>
c00118d9:	83 ec 08             	sub    esp,0x8
c00118dc:	50                   	push   eax
c00118dd:	68 69 b0 02 c0       	push   0xc002b069
c00118e2:	e8 10 10 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00118e7:	c7 04 24 72 b0 02 c0 	mov    DWORD PTR [esp],0xc002b072
c00118ee:	e8 3a 8a 00 00       	call   c001a32d <Krnl::panic(char const*)>
c00118f3:	83 c4 10             	add    esp,0x10
c00118f6:	e9 83 fe ff ff       	jmp    c001177e <Virt::setupPageSwapping(int)+0x4f>
c00118fb:	90                   	nop

c00118fc <VAS::VAS()>:
c00118fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011900:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011907:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001190b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011912:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011916:	a3 90 f1 02 c0       	mov    ds:0xc002f190,eax
c001191b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001191f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011923:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011927:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001192a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001192e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011935:	90                   	nop
c0011936:	c3                   	ret    
c0011937:	90                   	nop

c0011938 <VAS::VAS(VAS*)>:
c0011938:	83 ec 0c             	sub    esp,0xc
c001193b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001193f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001194a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011951:	83 ec 0c             	sub    esp,0xc
c0011954:	68 98 ae 02 c0       	push   0xc002ae98
c0011959:	e8 cf 89 00 00       	call   c001a32d <Krnl::panic(char const*)>
c001195e:	83 c4 10             	add    esp,0x10
c0011961:	90                   	nop
c0011962:	83 c4 0c             	add    esp,0xc
c0011965:	c3                   	ret    

c0011966 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001196a:	89 c2                	mov    edx,eax
c001196c:	c1 e8 0a             	shr    eax,0xa
c001196f:	c1 ea 16             	shr    edx,0x16
c0011972:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011977:	19 c9                	sbb    ecx,ecx
c0011979:	c1 e2 0c             	shl    edx,0xc
c001197c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011982:	25 fc 0f 00 00       	and    eax,0xffc
c0011987:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c001198e:	01 d0                	add    eax,edx
c0011990:	c3                   	ret    
c0011991:	90                   	nop

c0011992 <VAS::getPageTableEntry(unsigned long)>:
c0011992:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011996:	89 ca                	mov    edx,ecx
c0011998:	c1 e9 0a             	shr    ecx,0xa
c001199b:	c1 ea 16             	shr    edx,0x16
c001199e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00119a4:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00119aa:	c1 e0 0c             	shl    eax,0xc
c00119ad:	8d 04 08             	lea    eax,[eax+ecx*1]
c00119b0:	c3                   	ret    

c00119b1 <Virt::freeKernelVirtualPages(unsigned long)>:
c00119b1:	57                   	push   edi
c00119b2:	56                   	push   esi
c00119b3:	be 01 00 00 00       	mov    esi,0x1
c00119b8:	53                   	push   ebx
c00119b9:	83 ec 10             	sub    esp,0x10
c00119bc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00119c0:	c1 eb 0c             	shr    ebx,0xc
c00119c3:	eb 3f                	jmp    c0011a04 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00119c5:	83 ec 08             	sub    esp,0x8
c00119c8:	57                   	push   edi
c00119c9:	ff 35 90 f1 02 c0    	push   DWORD PTR ds:0xc002f190
c00119cf:	e8 be ff ff ff       	call   c0011992 <VAS::getPageTableEntry(unsigned long)>
c00119d4:	83 c4 10             	add    esp,0x10
c00119d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00119d9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00119dd:	f6 c4 04             	test   ah,0x4
c00119e0:	75 5f                	jne    c0011a41 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c00119e2:	80 fa 04             	cmp    dl,0x4
c00119e5:	74 78                	je     c0011a5f <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c00119e7:	80 fa 02             	cmp    dl,0x2
c00119ea:	0f 84 88 00 00 00    	je     c0011a78 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00119f0:	80 fa 03             	cmp    dl,0x3
c00119f3:	0f 84 ad 00 00 00    	je     c0011aa6 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00119f9:	fe ca                	dec    dl
c00119fb:	0f 84 92 00 00 00    	je     c0011a93 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011a01:	43                   	inc    ebx
c0011a02:	31 f6                	xor    esi,esi
c0011a04:	53                   	push   ebx
c0011a05:	89 df                	mov    edi,ebx
c0011a07:	e8 c1 fa ff ff       	call   c00114cd <Virt::getPageState(unsigned long)>
c0011a0c:	c1 e7 0c             	shl    edi,0xc
c0011a0f:	59                   	pop    ecx
c0011a10:	84 c0                	test   al,al
c0011a12:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011a16:	75 ad                	jne    c00119c5 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011a18:	83 ec 0c             	sub    esp,0xc
c0011a1b:	68 cf b0 02 c0       	push   0xc002b0cf
c0011a20:	e8 08 89 00 00       	call   c001a32d <Krnl::panic(char const*)>
c0011a25:	58                   	pop    eax
c0011a26:	5a                   	pop    edx
c0011a27:	57                   	push   edi
c0011a28:	ff 35 90 f1 02 c0    	push   DWORD PTR ds:0xc002f190
c0011a2e:	e8 5f ff ff ff       	call   c0011992 <VAS::getPageTableEntry(unsigned long)>
c0011a33:	83 c4 10             	add    esp,0x10
c0011a36:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a38:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a3c:	f6 c4 04             	test   ah,0x4
c0011a3f:	74 c0                	je     c0011a01 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a41:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011a45:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a4a:	83 ec 0c             	sub    esp,0xc
c0011a4d:	50                   	push   eax
c0011a4e:	e8 0a e1 ff ff       	call   c000fb5d <Phys::freePage(unsigned long)>
c0011a53:	83 c4 10             	add    esp,0x10
c0011a56:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a5a:	80 fa 04             	cmp    dl,0x4
c0011a5d:	75 88                	jne    c00119e7 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011a5f:	89 f0                	mov    eax,esi
c0011a61:	84 c0                	test   al,al
c0011a63:	75 47                	jne    c0011aac <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011a65:	c7 44 24 20 bc ae 02 c0 	mov    DWORD PTR [esp+0x20],0xc002aebc
c0011a6d:	83 c4 10             	add    esp,0x10
c0011a70:	5b                   	pop    ebx
c0011a71:	5e                   	pop    esi
c0011a72:	5f                   	pop    edi
c0011a73:	e9 b5 88 00 00       	jmp    c001a32d <Krnl::panic(char const*)>
c0011a78:	89 f0                	mov    eax,esi
c0011a7a:	84 c0                	test   al,al
c0011a7c:	75 15                	jne    c0011a93 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011a7e:	83 ec 0c             	sub    esp,0xc
c0011a81:	68 eb b0 02 c0       	push   0xc002b0eb
c0011a86:	e8 a2 88 00 00       	call   c001a32d <Krnl::panic(char const*)>
c0011a8b:	83 c4 10             	add    esp,0x10
c0011a8e:	e9 6e ff ff ff       	jmp    c0011a01 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a93:	83 ec 08             	sub    esp,0x8
c0011a96:	6a 00                	push   0x0
c0011a98:	53                   	push   ebx
c0011a99:	e8 fa f9 ff ff       	call   c0011498 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a9e:	83 c4 10             	add    esp,0x10
c0011aa1:	e9 5b ff ff ff       	jmp    c0011a01 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011aa6:	89 f0                	mov    eax,esi
c0011aa8:	84 c0                	test   al,al
c0011aaa:	75 15                	jne    c0011ac1 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011aac:	83 ec 08             	sub    esp,0x8
c0011aaf:	6a 00                	push   0x0
c0011ab1:	53                   	push   ebx
c0011ab2:	e8 e1 f9 ff ff       	call   c0011498 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ab7:	83 c4 10             	add    esp,0x10
c0011aba:	83 c4 10             	add    esp,0x10
c0011abd:	5b                   	pop    ebx
c0011abe:	5e                   	pop    esi
c0011abf:	5f                   	pop    edi
c0011ac0:	c3                   	ret    
c0011ac1:	c7 44 24 20 07 b1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b107
c0011ac9:	83 c4 10             	add    esp,0x10
c0011acc:	5b                   	pop    ebx
c0011acd:	5e                   	pop    esi
c0011ace:	5f                   	pop    edi
c0011acf:	e9 59 88 00 00       	jmp    c001a32d <Krnl::panic(char const*)>

c0011ad4 <VAS::freeAllocatedPages(unsigned long)>:
c0011ad4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ad8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011adc:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011ae0:	74 09                	je     c0011aeb <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011ae2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011ae6:	e9 c6 fe ff ff       	jmp    c00119b1 <Virt::freeKernelVirtualPages(unsigned long)>
c0011aeb:	c7 44 24 04 e0 ae 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aee0
c0011af3:	e9 ff 0d 00 00       	jmp    c00128f7 <Dbg::kprintf(char const*, ...)>

c0011af8 <VAS::virtualToPhysical(unsigned long)>:
c0011af8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011afc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011b00:	e8 8d fe ff ff       	call   c0011992 <VAS::getPageTableEntry(unsigned long)>
c0011b05:	5a                   	pop    edx
c0011b06:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b08:	59                   	pop    ecx
c0011b09:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011b0e:	c3                   	ret    
c0011b0f:	90                   	nop

c0011b10 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011b10:	55                   	push   ebp
c0011b11:	57                   	push   edi
c0011b12:	56                   	push   esi
c0011b13:	53                   	push   ebx
c0011b14:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011b18:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011b1c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011b20:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011b24:	85 db                	test   ebx,ebx
c0011b26:	7e 22                	jle    c0011b4a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011b28:	c1 e3 0c             	shl    ebx,0xc
c0011b2b:	01 f3                	add    ebx,esi
c0011b2d:	56                   	push   esi
c0011b2e:	81 c6 00 10 00 00    	add    esi,0x1000
c0011b34:	55                   	push   ebp
c0011b35:	e8 58 fe ff ff       	call   c0011992 <VAS::getPageTableEntry(unsigned long)>
c0011b3a:	5a                   	pop    edx
c0011b3b:	59                   	pop    ecx
c0011b3c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011b3e:	21 f9                	and    ecx,edi
c0011b40:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011b44:	39 f3                	cmp    ebx,esi
c0011b46:	89 08                	mov    DWORD PTR [eax],ecx
c0011b48:	75 e3                	jne    c0011b2d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011b4a:	5b                   	pop    ebx
c0011b4b:	5e                   	pop    esi
c0011b4c:	5f                   	pop    edi
c0011b4d:	5d                   	pop    ebp
c0011b4e:	c3                   	ret    
c0011b4f:	90                   	nop

c0011b50 <VAS::setToWriteCombining(unsigned long, int)>:
c0011b50:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0011b55:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b5b:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011b62:	75 01                	jne    c0011b65 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011b64:	c3                   	ret    
c0011b65:	68 80 00 00 00       	push   0x80
c0011b6a:	6a ff                	push   0xffffffff
c0011b6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b78:	e8 93 ff ff ff       	call   c0011b10 <VAS::reflagRange(unsigned long, int, int, int)>
c0011b7d:	83 c4 14             	add    esp,0x14
c0011b80:	c3                   	ret    
c0011b81:	90                   	nop

c0011b82 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011b82:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011b87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b8b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011b8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b92:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011b95:	19 c0                	sbb    eax,eax
c0011b97:	83 ca 03             	or     edx,0x3
c0011b9a:	83 e0 fc             	and    eax,0xfffffffc
c0011b9d:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011ba4:	0f 20 d8             	mov    eax,cr3
c0011ba7:	0f 22 d8             	mov    cr3,eax
c0011baa:	c3                   	ret    
c0011bab:	90                   	nop

c0011bac <VAS::~VAS()>:
c0011bac:	83 ec 2c             	sub    esp,0x2c
c0011baf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011bb7:	fa                   	cli    
c0011bb8:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c0011bbd:	40                   	inc    eax
c0011bbe:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c0011bc3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011bcd:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011bd3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011bd7:	6a 01                	push   0x1
c0011bd9:	50                   	push   eax
c0011bda:	e8 a3 ff ff ff       	call   c0011b82 <VAS::mapOtherVASIn(bool, VAS*)>
c0011bdf:	83 c4 0c             	add    esp,0xc
c0011be2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011bea:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011bf2:	0f 8f d4 00 00 00    	jg     c0011ccc <VAS::~VAS()+0x120>
c0011bf8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011bfc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011bff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011c03:	c1 e2 02             	shl    edx,0x2
c0011c06:	01 d0                	add    eax,edx
c0011c08:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011c0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c12:	83 e0 01             	and    eax,0x1
c0011c15:	0f 84 a8 00 00 00    	je     c0011cc3 <VAS::~VAS()+0x117>
c0011c1b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011c23:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011c2b:	7f 72                	jg     c0011c9f <VAS::~VAS()+0xf3>
c0011c2d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c31:	c1 e0 0a             	shl    eax,0xa
c0011c34:	89 c2                	mov    edx,eax
c0011c36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c3a:	01 d0                	add    eax,edx
c0011c3c:	c1 e0 0c             	shl    eax,0xc
c0011c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c43:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011c48:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c4a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c4d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011c53:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011c57:	6a 01                	push   0x1
c0011c59:	50                   	push   eax
c0011c5a:	e8 07 fd ff ff       	call   c0011966 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011c5f:	83 c4 0c             	add    esp,0xc
c0011c62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011c66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c74:	25 01 04 00 00       	and    eax,0x401
c0011c79:	3d 01 04 00 00       	cmp    eax,0x401
c0011c7e:	75 19                	jne    c0011c99 <VAS::~VAS()+0xed>
c0011c80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c84:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c89:	83 ec 0c             	sub    esp,0xc
c0011c8c:	50                   	push   eax
c0011c8d:	e8 cb de ff ff       	call   c000fb5d <Phys::freePage(unsigned long)>
c0011c92:	83 c4 10             	add    esp,0x10
c0011c95:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011c99:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011c9d:	eb 84                	jmp    c0011c23 <VAS::~VAS()+0x77>
c0011c9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ca3:	25 00 04 00 00       	and    eax,0x400
c0011ca8:	74 19                	je     c0011cc3 <VAS::~VAS()+0x117>
c0011caa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cae:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cb3:	83 ec 0c             	sub    esp,0xc
c0011cb6:	50                   	push   eax
c0011cb7:	e8 a1 de ff ff       	call   c000fb5d <Phys::freePage(unsigned long)>
c0011cbc:	83 c4 10             	add    esp,0x10
c0011cbf:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011cc3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011cc7:	e9 1e ff ff ff       	jmp    c0011bea <VAS::~VAS()+0x3e>
c0011ccc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cd0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011cd3:	83 ec 0c             	sub    esp,0xc
c0011cd6:	50                   	push   eax
c0011cd7:	e8 d5 fc ff ff       	call   c00119b1 <Virt::freeKernelVirtualPages(unsigned long)>
c0011cdc:	83 c4 10             	add    esp,0x10
c0011cdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ce3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011ce6:	83 ec 0c             	sub    esp,0xc
c0011ce9:	50                   	push   eax
c0011cea:	e8 6e de ff ff       	call   c000fb5d <Phys::freePage(unsigned long)>
c0011cef:	83 c4 10             	add    esp,0x10
c0011cf2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011cf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cfa:	c1 e0 02             	shl    eax,0x2
c0011cfd:	83 ec 08             	sub    esp,0x8
c0011d00:	50                   	push   eax
c0011d01:	68 04 af 02 c0       	push   0xc002af04
c0011d06:	e8 ec 0b 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0011d0b:	83 c4 10             	add    esp,0x10
c0011d0e:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c0011d13:	48                   	dec    eax
c0011d14:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c0011d19:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c0011d1e:	85 c0                	test   eax,eax
c0011d20:	75 01                	jne    c0011d23 <VAS::~VAS()+0x177>
c0011d22:	fb                   	sti    
c0011d23:	90                   	nop
c0011d24:	83 c4 2c             	add    esp,0x2c
c0011d27:	c3                   	ret    

c0011d28 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011d28:	55                   	push   ebp
c0011d29:	57                   	push   edi
c0011d2a:	56                   	push   esi
c0011d2b:	53                   	push   ebx
c0011d2c:	83 ec 1c             	sub    esp,0x1c
c0011d2f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011d33:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d37:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011d3d:	77 08                	ja     c0011d47 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011d3f:	0f 20 d8             	mov    eax,cr3
c0011d42:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011d45:	75 47                	jne    c0011d8e <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011d47:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d4b:	09 d8                	or     eax,ebx
c0011d4d:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d52:	75 57                	jne    c0011dab <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011d54:	89 de                	mov    esi,ebx
c0011d56:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011d59:	c1 ee 16             	shr    esi,0x16
c0011d5c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011d63:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011d67:	74 54                	je     c0011dbd <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011d69:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d6d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011d73:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011d77:	c1 e6 0c             	shl    esi,0xc
c0011d7a:	c1 eb 0a             	shr    ebx,0xa
c0011d7d:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011d83:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011d86:	83 c4 1c             	add    esp,0x1c
c0011d89:	5b                   	pop    ebx
c0011d8a:	5e                   	pop    esi
c0011d8b:	5f                   	pop    edi
c0011d8c:	5d                   	pop    ebp
c0011d8d:	c3                   	ret    
c0011d8e:	83 ec 0c             	sub    esp,0xc
c0011d91:	68 24 af 02 c0       	push   0xc002af24
c0011d96:	e8 5c 0b 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0011d9b:	83 c4 10             	add    esp,0x10
c0011d9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011da2:	09 d8                	or     eax,ebx
c0011da4:	a9 ff 0f 00 00       	test   eax,0xfff
c0011da9:	74 a9                	je     c0011d54 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011dab:	83 ec 0c             	sub    esp,0xc
c0011dae:	68 8c af 02 c0       	push   0xc002af8c
c0011db3:	e8 75 85 00 00       	call   c001a32d <Krnl::panic(char const*)>
c0011db8:	83 c4 10             	add    esp,0x10
c0011dbb:	eb 97                	jmp    c0011d54 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011dbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011dc1:	e8 f2 dd ff ff       	call   c000fbb8 <Phys::allocatePage()>
c0011dc6:	83 ec 0c             	sub    esp,0xc
c0011dc9:	89 c5                	mov    ebp,eax
c0011dcb:	8b 0d 90 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f190
c0011dd1:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011dd5:	6a 01                	push   0x1
c0011dd7:	e8 15 f7 ff ff       	call   c00114f1 <Virt::allocateKernelVirtualPages(int)>
c0011ddc:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011de3:	6a 01                	push   0x1
c0011de5:	50                   	push   eax
c0011de6:	55                   	push   ebp
c0011de7:	81 cd 07 04 00 00    	or     ebp,0x407
c0011ded:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011df1:	51                   	push   ecx
c0011df2:	e8 27 02 00 00       	call   c001201e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011df7:	83 c4 1c             	add    esp,0x1c
c0011dfa:	68 00 10 00 00       	push   0x1000
c0011dff:	6a 00                	push   0x0
c0011e01:	50                   	push   eax
c0011e02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e06:	e8 45 e9 fe ff       	call   c0000750 <memset>
c0011e0b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e0f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e12:	e8 9a fb ff ff       	call   c00119b1 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e17:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e1b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e1e:	83 c4 10             	add    esp,0x10
c0011e21:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011e24:	e9 40 ff ff ff       	jmp    c0011d69 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011e29:	90                   	nop

c0011e2a <VAS::allocatePages(int, int)>:
c0011e2a:	55                   	push   ebp
c0011e2b:	57                   	push   edi
c0011e2c:	56                   	push   esi
c0011e2d:	53                   	push   ebx
c0011e2e:	83 ec 1c             	sub    esp,0x1c
c0011e31:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e35:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0011e3a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e40:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011e46:	83 e0 01             	and    eax,0x1
c0011e49:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011e4d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011e51:	0f 85 cc 00 00 00    	jne    c0011f23 <VAS::allocatePages(int, int)+0xf9>
c0011e57:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011e5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e5e:	85 c0                	test   eax,eax
c0011e60:	0f 84 a1 00 00 00    	je     c0011f07 <VAS::allocatePages(int, int)+0xdd>
c0011e66:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011e6a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e6e:	c1 e6 0c             	shl    esi,0xc
c0011e71:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011e75:	85 c0                	test   eax,eax
c0011e77:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011e7a:	7e 33                	jle    c0011eaf <VAS::allocatePages(int, int)+0x85>
c0011e7c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011e80:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011e84:	81 cd 00 04 00 00    	or     ebp,0x400
c0011e8a:	e8 29 dd ff ff       	call   c000fbb8 <Phys::allocatePage()>
c0011e8f:	55                   	push   ebp
c0011e90:	53                   	push   ebx
c0011e91:	50                   	push   eax
c0011e92:	57                   	push   edi
c0011e93:	e8 90 fe ff ff       	call   c0011d28 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011e98:	83 c4 10             	add    esp,0x10
c0011e9b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ea0:	74 03                	je     c0011ea5 <VAS::allocatePages(int, int)+0x7b>
c0011ea2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ea5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011eab:	39 de                	cmp    esi,ebx
c0011ead:	75 db                	jne    c0011e8a <VAS::allocatePages(int, int)+0x60>
c0011eaf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011eb4:	75 12                	jne    c0011ec8 <VAS::allocatePages(int, int)+0x9e>
c0011eb6:	0f 20 d8             	mov    eax,cr3
c0011eb9:	0f 22 d8             	mov    cr3,eax
c0011ebc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ec0:	83 c4 1c             	add    esp,0x1c
c0011ec3:	5b                   	pop    ebx
c0011ec4:	5e                   	pop    esi
c0011ec5:	5f                   	pop    edi
c0011ec6:	5d                   	pop    ebp
c0011ec7:	c3                   	ret    
c0011ec8:	c1 ee 0a             	shr    esi,0xa
c0011ecb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ecf:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011ed5:	c1 eb 0a             	shr    ebx,0xa
c0011ed8:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011ede:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011ee4:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011eea:	39 c3                	cmp    ebx,eax
c0011eec:	77 ce                	ja     c0011ebc <VAS::allocatePages(int, int)+0x92>
c0011eee:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ef1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ef7:	39 d8                	cmp    eax,ebx
c0011ef9:	73 f3                	jae    c0011eee <VAS::allocatePages(int, int)+0xc4>
c0011efb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011eff:	83 c4 1c             	add    esp,0x1c
c0011f02:	5b                   	pop    ebx
c0011f03:	5e                   	pop    esi
c0011f04:	5f                   	pop    edi
c0011f05:	5d                   	pop    ebp
c0011f06:	c3                   	ret    
c0011f07:	83 ec 0c             	sub    esp,0xc
c0011f0a:	68 b0 af 02 c0       	push   0xc002afb0
c0011f0f:	e8 19 84 00 00       	call   c001a32d <Krnl::panic(char const*)>
c0011f14:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011f17:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f1b:	83 c4 10             	add    esp,0x10
c0011f1e:	e9 43 ff ff ff       	jmp    c0011e66 <VAS::allocatePages(int, int)+0x3c>
c0011f23:	83 ec 0c             	sub    esp,0xc
c0011f26:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011f2a:	e8 c2 f5 ff ff       	call   c00114f1 <Virt::allocateKernelVirtualPages(int)>
c0011f2f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f33:	83 c4 10             	add    esp,0x10
c0011f36:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011f3b:	0f 87 9b 00 00 00    	ja     c0011fdc <VAS::allocatePages(int, int)+0x1b2>
c0011f41:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011f45:	85 d2                	test   edx,edx
c0011f47:	7e 3c                	jle    c0011f85 <VAS::allocatePages(int, int)+0x15b>
c0011f49:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011f4d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011f51:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f55:	c1 e5 0c             	shl    ebp,0xc
c0011f58:	81 ce 00 04 00 00    	or     esi,0x400
c0011f5e:	01 dd                	add    ebp,ebx
c0011f60:	e8 53 dc ff ff       	call   c000fbb8 <Phys::allocatePage()>
c0011f65:	56                   	push   esi
c0011f66:	53                   	push   ebx
c0011f67:	50                   	push   eax
c0011f68:	57                   	push   edi
c0011f69:	e8 ba fd ff ff       	call   c0011d28 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f6e:	83 c4 10             	add    esp,0x10
c0011f71:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f76:	74 03                	je     c0011f7b <VAS::allocatePages(int, int)+0x151>
c0011f78:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f7b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f81:	39 dd                	cmp    ebp,ebx
c0011f83:	75 db                	jne    c0011f60 <VAS::allocatePages(int, int)+0x136>
c0011f85:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f8a:	0f 84 26 ff ff ff    	je     c0011eb6 <VAS::allocatePages(int, int)+0x8c>
c0011f90:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f94:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f98:	89 d3                	mov    ebx,edx
c0011f9a:	c1 e0 0c             	shl    eax,0xc
c0011f9d:	c1 eb 0a             	shr    ebx,0xa
c0011fa0:	01 d0                	add    eax,edx
c0011fa2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011fa8:	c1 e8 0a             	shr    eax,0xa
c0011fab:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011fb1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fb6:	2d 00 00 40 00       	sub    eax,0x400000
c0011fbb:	39 c3                	cmp    ebx,eax
c0011fbd:	0f 87 f9 fe ff ff    	ja     c0011ebc <VAS::allocatePages(int, int)+0x92>
c0011fc3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011fc6:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011fcc:	39 d8                	cmp    eax,ebx
c0011fce:	73 f3                	jae    c0011fc3 <VAS::allocatePages(int, int)+0x199>
c0011fd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fd4:	83 c4 1c             	add    esp,0x1c
c0011fd7:	5b                   	pop    ebx
c0011fd8:	5e                   	pop    esi
c0011fd9:	5f                   	pop    edi
c0011fda:	5d                   	pop    ebp
c0011fdb:	c3                   	ret    
c0011fdc:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0011fe1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fe7:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011fee:	0f 84 4d ff ff ff    	je     c0011f41 <VAS::allocatePages(int, int)+0x117>
c0011ff4:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011ffc:	e9 40 ff ff ff       	jmp    c0011f41 <VAS::allocatePages(int, int)+0x117>
c0012001:	90                   	nop

c0012002 <VAS::setCPUSpecific(unsigned long)>:
c0012002:	83 ec 0c             	sub    esp,0xc
c0012005:	6a 05                	push   0x5
c0012007:	68 00 00 40 c2       	push   0xc2400000
c001200c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012014:	e8 0f fd ff ff       	call   c0011d28 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012019:	83 c4 1c             	add    esp,0x1c
c001201c:	c3                   	ret    
c001201d:	90                   	nop

c001201e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001201e:	55                   	push   ebp
c001201f:	57                   	push   edi
c0012020:	56                   	push   esi
c0012021:	53                   	push   ebx
c0012022:	83 ec 1c             	sub    esp,0x1c
c0012025:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001202a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001202e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012034:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012038:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001203e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012042:	83 e0 01             	and    eax,0x1
c0012045:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012049:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001204d:	85 c0                	test   eax,eax
c001204f:	7e 39                	jle    c001208a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012051:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012055:	89 f3                	mov    ebx,esi
c0012057:	c1 e0 0c             	shl    eax,0xc
c001205a:	01 f0                	add    eax,esi
c001205c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012060:	55                   	push   ebp
c0012061:	53                   	push   ebx
c0012062:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012066:	29 f0                	sub    eax,esi
c0012068:	01 d8                	add    eax,ebx
c001206a:	50                   	push   eax
c001206b:	57                   	push   edi
c001206c:	e8 b7 fc ff ff       	call   c0011d28 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012071:	83 c4 10             	add    esp,0x10
c0012074:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012079:	74 03                	je     c001207e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001207b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001207e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012084:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012088:	75 d6                	jne    c0012060 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001208a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001208f:	75 10                	jne    c00120a1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012091:	0f 20 d8             	mov    eax,cr3
c0012094:	0f 22 d8             	mov    cr3,eax
c0012097:	83 c4 1c             	add    esp,0x1c
c001209a:	89 f0                	mov    eax,esi
c001209c:	5b                   	pop    ebx
c001209d:	5e                   	pop    esi
c001209e:	5f                   	pop    edi
c001209f:	5d                   	pop    ebp
c00120a0:	c3                   	ret    
c00120a1:	89 f3                	mov    ebx,esi
c00120a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00120a7:	c1 eb 0a             	shr    ebx,0xa
c00120aa:	c1 e0 0c             	shl    eax,0xc
c00120ad:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00120b3:	01 f0                	add    eax,esi
c00120b5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00120bb:	c1 e8 0a             	shr    eax,0xa
c00120be:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120c3:	2d 00 00 40 00       	sub    eax,0x400000
c00120c8:	39 c3                	cmp    ebx,eax
c00120ca:	77 cb                	ja     c0012097 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00120cc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120cf:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120d5:	39 d8                	cmp    eax,ebx
c00120d7:	73 f3                	jae    c00120cc <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00120d9:	83 c4 1c             	add    esp,0x1c
c00120dc:	89 f0                	mov    eax,esi
c00120de:	5b                   	pop    ebx
c00120df:	5e                   	pop    esi
c00120e0:	5f                   	pop    edi
c00120e1:	5d                   	pop    ebp
c00120e2:	c3                   	ret    
c00120e3:	90                   	nop

c00120e4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00120e4:	55                   	push   ebp
c00120e5:	57                   	push   edi
c00120e6:	56                   	push   esi
c00120e7:	53                   	push   ebx
c00120e8:	83 ec 1c             	sub    esp,0x1c
c00120eb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00120ef:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00120f3:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00120f7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00120fb:	a9 ff 0f 00 00       	test   eax,0xfff
c0012100:	75 4a                	jne    c001214c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012102:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012106:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012109:	c1 eb 16             	shr    ebx,0x16
c001210c:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012113:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012117:	74 4d                	je     c0012166 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012119:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001211d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012121:	c1 e8 0a             	shr    eax,0xa
c0012124:	80 fa 01             	cmp    dl,0x1
c0012127:	19 d2                	sbb    edx,edx
c0012129:	c1 e3 0c             	shl    ebx,0xc
c001212c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012130:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012136:	25 fc 0f 00 00       	and    eax,0xffc
c001213b:	01 d8                	add    eax,ebx
c001213d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012144:	83 c4 1c             	add    esp,0x1c
c0012147:	5b                   	pop    ebx
c0012148:	5e                   	pop    esi
c0012149:	5f                   	pop    edi
c001214a:	5d                   	pop    ebp
c001214b:	c3                   	ret    
c001214c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012150:	83 ec 0c             	sub    esp,0xc
c0012153:	68 dc af 02 c0       	push   0xc002afdc
c0012158:	e8 d0 81 00 00       	call   c001a32d <Krnl::panic(char const*)>
c001215d:	83 c4 10             	add    esp,0x10
c0012160:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012164:	eb 9c                	jmp    c0012102 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012166:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001216a:	e8 49 da ff ff       	call   c000fbb8 <Phys::allocatePage()>
c001216f:	83 ec 0c             	sub    esp,0xc
c0012172:	89 c5                	mov    ebp,eax
c0012174:	8b 0d 90 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f190
c001217a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001217e:	6a 01                	push   0x1
c0012180:	e8 6c f3 ff ff       	call   c00114f1 <Virt::allocateKernelVirtualPages(int)>
c0012185:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001218c:	6a 01                	push   0x1
c001218e:	50                   	push   eax
c001218f:	55                   	push   ebp
c0012190:	81 cd 07 04 00 00    	or     ebp,0x407
c0012196:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001219a:	51                   	push   ecx
c001219b:	e8 7e fe ff ff       	call   c001201e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00121a0:	83 c4 1c             	add    esp,0x1c
c00121a3:	68 00 10 00 00       	push   0x1000
c00121a8:	6a 00                	push   0x0
c00121aa:	50                   	push   eax
c00121ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121af:	e8 9c e5 fe ff       	call   c0000750 <memset>
c00121b4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00121b8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00121bb:	e8 f1 f7 ff ff       	call   c00119b1 <Virt::freeKernelVirtualPages(unsigned long)>
c00121c0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00121c3:	83 c4 10             	add    esp,0x10
c00121c6:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00121c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00121cd:	e9 47 ff ff ff       	jmp    c0012119 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c00121d2 <VAS::VAS(bool)>:
c00121d2:	53                   	push   ebx
c00121d3:	83 ec 28             	sub    esp,0x28
c00121d6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00121da:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00121de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121e2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00121e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121ed:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00121f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121f8:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00121fc:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00121ff:	e8 b4 d9 ff ff       	call   c000fbb8 <Phys::allocatePage()>
c0012204:	89 c2                	mov    edx,eax
c0012206:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001220a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001220d:	8b 1d 90 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f190
c0012213:	83 ec 0c             	sub    esp,0xc
c0012216:	6a 01                	push   0x1
c0012218:	e8 d4 f2 ff ff       	call   c00114f1 <Virt::allocateKernelVirtualPages(int)>
c001221d:	83 c4 10             	add    esp,0x10
c0012220:	89 c2                	mov    edx,eax
c0012222:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012226:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012229:	83 ec 0c             	sub    esp,0xc
c001222c:	6a 03                	push   0x3
c001222e:	6a 01                	push   0x1
c0012230:	52                   	push   edx
c0012231:	50                   	push   eax
c0012232:	53                   	push   ebx
c0012233:	e8 e6 fd ff ff       	call   c001201e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012238:	83 c4 20             	add    esp,0x20
c001223b:	89 c2                	mov    edx,eax
c001223d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012241:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012244:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001224c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012254:	7f 1c                	jg     c0012272 <VAS::VAS(bool)+0xa0>
c0012256:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001225a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001225d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012261:	c1 e2 02             	shl    edx,0x2
c0012264:	01 d0                	add    eax,edx
c0012266:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001226c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012270:	eb da                	jmp    c001224c <VAS::VAS(bool)+0x7a>
c0012272:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c001227a:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012282:	7f 7a                	jg     c00122fe <VAS::VAS(bool)+0x12c>
c0012284:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012288:	2d 00 02 00 00       	sub    eax,0x200
c001228d:	c1 e0 0c             	shl    eax,0xc
c0012290:	83 c8 03             	or     eax,0x3
c0012293:	89 c2                	mov    edx,eax
c0012295:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001229a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122a0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00122a6:	83 e0 10             	and    eax,0x10
c00122a9:	84 c0                	test   al,al
c00122ab:	74 07                	je     c00122b4 <VAS::VAS(bool)+0xe2>
c00122ad:	b8 00 01 00 00       	mov    eax,0x100
c00122b2:	eb 05                	jmp    c00122b9 <VAS::VAS(bool)+0xe7>
c00122b4:	b8 00 00 00 00       	mov    eax,0x0
c00122b9:	09 d0                	or     eax,edx
c00122bb:	89 c1                	mov    ecx,eax
c00122bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122c1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122c8:	c1 e2 02             	shl    edx,0x2
c00122cb:	01 d0                	add    eax,edx
c00122cd:	89 ca                	mov    edx,ecx
c00122cf:	89 10                	mov    DWORD PTR [eax],edx
c00122d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122d5:	2d 40 03 00 00       	sub    eax,0x340
c00122da:	83 f8 7f             	cmp    eax,0x7f
c00122dd:	77 16                	ja     c00122f5 <VAS::VAS(bool)+0x123>
c00122df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122e3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122e6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122ea:	c1 e2 02             	shl    edx,0x2
c00122ed:	01 d0                	add    eax,edx
c00122ef:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00122f5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00122f9:	e9 7c ff ff ff       	jmp    c001227a <VAS::VAS(bool)+0xa8>
c00122fe:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0012303:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012309:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001230f:	83 e0 10             	and    eax,0x10
c0012312:	84 c0                	test   al,al
c0012314:	74 07                	je     c001231d <VAS::VAS(bool)+0x14b>
c0012316:	b8 03 41 00 00       	mov    eax,0x4103
c001231b:	eb 05                	jmp    c0012322 <VAS::VAS(bool)+0x150>
c001231d:	b8 03 40 00 00       	mov    eax,0x4003
c0012322:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012326:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012329:	81 c2 20 0c 00 00    	add    edx,0xc20
c001232f:	89 02                	mov    DWORD PTR [edx],eax
c0012331:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0012336:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001233c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012342:	83 ec 08             	sub    esp,0x8
c0012345:	50                   	push   eax
c0012346:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001234a:	e8 b3 fc ff ff       	call   c0012002 <VAS::setCPUSpecific(unsigned long)>
c001234f:	83 c4 10             	add    esp,0x10
c0012352:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012356:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012359:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001235e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012364:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001236a:	83 e0 10             	and    eax,0x10
c001236d:	84 c0                	test   al,al
c001236f:	74 07                	je     c0012378 <VAS::VAS(bool)+0x1a6>
c0012371:	b8 00 01 00 00       	mov    eax,0x100
c0012376:	eb 05                	jmp    c001237d <VAS::VAS(bool)+0x1ab>
c0012378:	b8 00 00 00 00       	mov    eax,0x0
c001237d:	09 c2                	or     edx,eax
c001237f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012383:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012386:	05 fc 0f 00 00       	add    eax,0xffc
c001238b:	83 ca 03             	or     edx,0x3
c001238e:	89 10                	mov    DWORD PTR [eax],edx
c0012390:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0012395:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001239b:	83 ec 0c             	sub    esp,0xc
c001239e:	50                   	push   eax
c001239f:	e8 8c 1c 00 00       	call   c0014030 <Device::getName()>
c00123a4:	83 c4 10             	add    esp,0x10
c00123a7:	83 ec 08             	sub    esp,0x8
c00123aa:	68 21 b1 02 c0       	push   0xc002b121
c00123af:	50                   	push   eax
c00123b0:	e8 e3 e4 fe ff       	call   c0000898 <strcmp>
c00123b5:	83 c4 10             	add    esp,0x10
c00123b8:	85 c0                	test   eax,eax
c00123ba:	0f 94 c0             	sete   al
c00123bd:	84 c0                	test   al,al
c00123bf:	0f 84 87 00 00 00    	je     c001244c <VAS::VAS(bool)+0x27a>
c00123c5:	fa                   	cli    
c00123c6:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c00123cb:	40                   	inc    eax
c00123cc:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c00123d1:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c00123d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123dc:	05 7c 09 00 00       	add    eax,0x97c
c00123e1:	83 ec 0c             	sub    esp,0xc
c00123e4:	50                   	push   eax
c00123e5:	e8 24 cf ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00123ea:	83 c4 10             	add    esp,0x10
c00123ed:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123f2:	89 c3                	mov    ebx,eax
c00123f4:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c00123f9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123ff:	05 7c 09 00 00       	add    eax,0x97c
c0012404:	83 ec 0c             	sub    esp,0xc
c0012407:	50                   	push   eax
c0012408:	e8 01 cf ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001240d:	83 c4 10             	add    esp,0x10
c0012410:	83 ec 08             	sub    esp,0x8
c0012413:	50                   	push   eax
c0012414:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012418:	e8 75 f5 ff ff       	call   c0011992 <VAS::getPageTableEntry(unsigned long)>
c001241d:	83 c4 10             	add    esp,0x10
c0012420:	8b 00                	mov    eax,DWORD PTR [eax]
c0012422:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012427:	6a 11                	push   0x11
c0012429:	53                   	push   ebx
c001242a:	50                   	push   eax
c001242b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001242f:	e8 f4 f8 ff ff       	call   c0011d28 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012434:	83 c4 10             	add    esp,0x10
c0012437:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001243c:	48                   	dec    eax
c001243d:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c0012442:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c0012447:	85 c0                	test   eax,eax
c0012449:	75 01                	jne    c001244c <VAS::VAS(bool)+0x27a>
c001244b:	fb                   	sti    
c001244c:	90                   	nop
c001244d:	83 c4 28             	add    esp,0x28
c0012450:	5b                   	pop    ebx
c0012451:	c3                   	ret    

c0012452 <VAS::evict(unsigned long)>:
c0012452:	55                   	push   ebp
c0012453:	57                   	push   edi
c0012454:	56                   	push   esi
c0012455:	53                   	push   ebx
c0012456:	83 ec 1c             	sub    esp,0x1c
c0012459:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001245d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012461:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012465:	e8 c8 f1 ff ff       	call   c0011632 <Virt::allocateSwapfilePage()>
c001246a:	89 c7                	mov    edi,eax
c001246c:	a1 cc df 02 c0       	mov    eax,ds:0xc002dfcc
c0012471:	85 c0                	test   eax,eax
c0012473:	7e 3d                	jle    c00124b2 <VAS::evict(unsigned long)+0x60>
c0012475:	89 ee                	mov    esi,ebp
c0012477:	31 db                	xor    ebx,ebx
c0012479:	83 ec 0c             	sub    esp,0xc
c001247c:	57                   	push   edi
c001247d:	e8 9e f1 ff ff       	call   c0011620 <Virt::swapIDToSector(unsigned long)>
c0012482:	89 34 24             	mov    DWORD PTR [esp],esi
c0012485:	01 d8                	add    eax,ebx
c0012487:	6a 01                	push   0x1
c0012489:	31 d2                	xor    edx,edx
c001248b:	43                   	inc    ebx
c001248c:	52                   	push   edx
c001248d:	81 c6 00 02 00 00    	add    esi,0x200
c0012493:	50                   	push   eax
c0012494:	0f be 05 d8 df 02 c0 	movsx  eax,BYTE PTR ds:0xc002dfd8
c001249b:	ff 34 85 1c f5 02 c0 	push   DWORD PTR [eax*4-0x3ffd0ae4]
c00124a2:	e8 39 3e 00 00       	call   c00162e0 <LogicalDisk::write(unsigned long long, int, void*)>
c00124a7:	83 c4 20             	add    esp,0x20
c00124aa:	39 1d cc df 02 c0    	cmp    DWORD PTR ds:0xc002dfcc,ebx
c00124b0:	7f c7                	jg     c0012479 <VAS::evict(unsigned long)+0x27>
c00124b2:	83 ec 08             	sub    esp,0x8
c00124b5:	c1 e7 0b             	shl    edi,0xb
c00124b8:	55                   	push   ebp
c00124b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00124bd:	e8 d0 f4 ff ff       	call   c0011992 <VAS::getPageTableEntry(unsigned long)>
c00124c2:	83 c4 0c             	add    esp,0xc
c00124c5:	8b 10                	mov    edx,DWORD PTR [eax]
c00124c7:	81 e2 fe 07 00 00    	and    edx,0x7fe
c00124cd:	09 d7                	or     edi,edx
c00124cf:	89 38                	mov    DWORD PTR [eax],edi
c00124d1:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c00124d6:	40                   	inc    eax
c00124d7:	a3 88 f1 02 c0       	mov    ds:0xc002f188,eax
c00124dc:	0f 20 da             	mov    edx,cr3
c00124df:	0f 22 da             	mov    cr3,edx
c00124e2:	50                   	push   eax
c00124e3:	55                   	push   ebp
c00124e4:	68 2f b1 02 c0       	push   0xc002b12f
c00124e9:	e8 09 04 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00124ee:	a1 84 f1 02 c0       	mov    eax,ds:0xc002f184
c00124f3:	c7 44 24 40 44 b1 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b144
c00124fb:	8d 50 01             	lea    edx,[eax+0x1]
c00124fe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012502:	89 15 84 f1 02 c0    	mov    DWORD PTR ds:0xc002f184,edx
c0012508:	83 c4 2c             	add    esp,0x2c
c001250b:	5b                   	pop    ebx
c001250c:	5e                   	pop    esi
c001250d:	5f                   	pop    edi
c001250e:	5d                   	pop    ebp
c001250f:	e9 e3 03 00 00       	jmp    c00128f7 <Dbg::kprintf(char const*, ...)>

c0012514 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012514:	55                   	push   ebp
c0012515:	57                   	push   edi
c0012516:	56                   	push   esi
c0012517:	53                   	push   ebx
c0012518:	83 ec 0c             	sub    esp,0xc
c001251b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001251f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012525:	0f 84 dc 00 00 00    	je     c0012607 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c001252b:	56                   	push   esi
c001252c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012530:	e8 5d f4 ff ff       	call   c0011992 <VAS::getPageTableEntry(unsigned long)>
c0012535:	5b                   	pop    ebx
c0012536:	85 c0                	test   eax,eax
c0012538:	5f                   	pop    edi
c0012539:	89 c3                	mov    ebx,eax
c001253b:	0f 84 c6 00 00 00    	je     c0012607 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012541:	8b 38                	mov    edi,DWORD PTR [eax]
c0012543:	31 c0                	xor    eax,eax
c0012545:	89 fa                	mov    edx,edi
c0012547:	81 e2 01 04 00 00    	and    edx,0x401
c001254d:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012553:	0f 85 b0 00 00 00    	jne    c0012609 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012559:	e8 5a d6 ff ff       	call   c000fbb8 <Phys::allocatePage()>
c001255e:	c1 ef 0b             	shr    edi,0xb
c0012561:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012563:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012569:	09 c2                	or     edx,eax
c001256b:	81 ca 01 08 00 00    	or     edx,0x801
c0012571:	89 13                	mov    DWORD PTR [ebx],edx
c0012573:	8b 0d cc df 02 c0    	mov    ecx,DWORD PTR ds:0xc002dfcc
c0012579:	85 c9                	test   ecx,ecx
c001257b:	7e 3d                	jle    c00125ba <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c001257d:	89 f5                	mov    ebp,esi
c001257f:	31 db                	xor    ebx,ebx
c0012581:	83 ec 0c             	sub    esp,0xc
c0012584:	57                   	push   edi
c0012585:	e8 96 f0 ff ff       	call   c0011620 <Virt::swapIDToSector(unsigned long)>
c001258a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001258d:	01 d8                	add    eax,ebx
c001258f:	6a 01                	push   0x1
c0012591:	31 d2                	xor    edx,edx
c0012593:	43                   	inc    ebx
c0012594:	52                   	push   edx
c0012595:	81 c5 00 02 00 00    	add    ebp,0x200
c001259b:	50                   	push   eax
c001259c:	0f be 05 d8 df 02 c0 	movsx  eax,BYTE PTR ds:0xc002dfd8
c00125a3:	ff 34 85 1c f5 02 c0 	push   DWORD PTR [eax*4-0x3ffd0ae4]
c00125aa:	e8 c5 3c 00 00       	call   c0016274 <LogicalDisk::read(unsigned long long, int, void*)>
c00125af:	83 c4 20             	add    esp,0x20
c00125b2:	39 1d cc df 02 c0    	cmp    DWORD PTR ds:0xc002dfcc,ebx
c00125b8:	7f c7                	jg     c0012581 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c00125ba:	a1 88 f1 02 c0       	mov    eax,ds:0xc002f188
c00125bf:	48                   	dec    eax
c00125c0:	52                   	push   edx
c00125c1:	a3 88 f1 02 c0       	mov    ds:0xc002f188,eax
c00125c6:	50                   	push   eax
c00125c7:	56                   	push   esi
c00125c8:	68 55 b1 02 c0       	push   0xc002b155
c00125cd:	e8 25 03 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00125d2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00125d5:	e8 28 f0 ff ff       	call   c0011602 <Virt::freeSwapfilePage(unsigned long)>
c00125da:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c00125df:	83 c4 10             	add    esp,0x10
c00125e2:	48                   	dec    eax
c00125e3:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c00125e8:	85 c0                	test   eax,eax
c00125ea:	75 01                	jne    c00125ed <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c00125ec:	fb                   	sti    
c00125ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00125f1:	25 ff 0f 00 00       	and    eax,0xfff
c00125f6:	3d e0 0f 00 00       	cmp    eax,0xfe0
c00125fb:	77 14                	ja     c0012611 <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c00125fd:	0f 20 d8             	mov    eax,cr3
c0012600:	0f 22 d8             	mov    cr3,eax
c0012603:	b0 01                	mov    al,0x1
c0012605:	eb 02                	jmp    c0012609 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012607:	31 c0                	xor    eax,eax
c0012609:	83 c4 0c             	add    esp,0xc
c001260c:	5b                   	pop    ebx
c001260d:	5e                   	pop    esi
c001260e:	5f                   	pop    edi
c001260f:	5d                   	pop    ebp
c0012610:	c3                   	ret    
c0012611:	83 ec 0c             	sub    esp,0xc
c0012614:	68 6a b1 02 c0       	push   0xc002b16a
c0012619:	e8 d9 02 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001261e:	83 c4 10             	add    esp,0x10
c0012621:	eb da                	jmp    c00125fd <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012623:	90                   	nop

c0012624 <VAS::scanForEviction()>:
c0012624:	57                   	push   edi
c0012625:	56                   	push   esi
c0012626:	53                   	push   ebx
c0012627:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001262b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001262e:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012634:	75 0e                	jne    c0012644 <VAS::scanForEviction()+0x20>
c0012636:	89 da                	mov    edx,ebx
c0012638:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001263b:	c1 ea 16             	shr    edx,0x16
c001263e:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012642:	74 48                	je     c001268c <VAS::scanForEviction()+0x68>
c0012644:	53                   	push   ebx
c0012645:	56                   	push   esi
c0012646:	e8 47 f3 ff ff       	call   c0011992 <VAS::getPageTableEntry(unsigned long)>
c001264b:	5a                   	pop    edx
c001264c:	8b 38                	mov    edi,DWORD PTR [eax]
c001264e:	59                   	pop    ecx
c001264f:	89 fa                	mov    edx,edi
c0012651:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012657:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c001265d:	74 3d                	je     c001269c <VAS::scanForEviction()+0x78>
c001265f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012665:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c001266b:	76 2a                	jbe    c0012697 <VAS::scanForEviction()+0x73>
c001266d:	31 db                	xor    ebx,ebx
c001266f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012676:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001267c:	75 c6                	jne    c0012644 <VAS::scanForEviction()+0x20>
c001267e:	89 da                	mov    edx,ebx
c0012680:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012683:	c1 ea 16             	shr    edx,0x16
c0012686:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001268a:	75 b8                	jne    c0012644 <VAS::scanForEviction()+0x20>
c001268c:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012692:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012695:	eb 97                	jmp    c001262e <VAS::scanForEviction()+0xa>
c0012697:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c001269a:	eb 92                	jmp    c001262e <VAS::scanForEviction()+0xa>
c001269c:	f7 c7 01 00 00 00    	test   edi,0x1
c00126a2:	74 bb                	je     c001265f <VAS::scanForEviction()+0x3b>
c00126a4:	f7 c7 20 00 00 00    	test   edi,0x20
c00126aa:	74 0a                	je     c00126b6 <VAS::scanForEviction()+0x92>
c00126ac:	83 e7 df             	and    edi,0xffffffdf
c00126af:	89 38                	mov    DWORD PTR [eax],edi
c00126b1:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00126b4:	eb a9                	jmp    c001265f <VAS::scanForEviction()+0x3b>
c00126b6:	83 ec 08             	sub    esp,0x8
c00126b9:	53                   	push   ebx
c00126ba:	56                   	push   esi
c00126bb:	e8 92 fd ff ff       	call   c0012452 <VAS::evict(unsigned long)>
c00126c0:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00126c7:	83 c4 10             	add    esp,0x10
c00126ca:	89 f8                	mov    eax,edi
c00126cc:	5b                   	pop    ebx
c00126cd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126d2:	5e                   	pop    esi
c00126d3:	5f                   	pop    edi
c00126d4:	c3                   	ret    

c00126d5 <mapVASFirstTime>:
c00126d5:	55                   	push   ebp
c00126d6:	57                   	push   edi
c00126d7:	56                   	push   esi
c00126d8:	53                   	push   ebx
c00126d9:	83 ec 0c             	sub    esp,0xc
c00126dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126e1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00126e4:	4a                   	dec    edx
c00126e5:	0f 84 8e 00 00 00    	je     c0012779 <mapVASFirstTime+0xa4>
c00126eb:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00126ee:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00126f1:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00126f6:	c1 e5 15             	shl    ebp,0x15
c00126f9:	be 00 90 e7 01       	mov    esi,0x1e79000
c00126fe:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012704:	29 eb                	sub    ebx,ebp
c0012706:	29 ee                	sub    esi,ebp
c0012708:	e8 ab d4 ff ff       	call   c000fbb8 <Phys::allocatePage()>
c001270d:	83 ec 0c             	sub    esp,0xc
c0012710:	68 03 04 00 00       	push   0x403
c0012715:	6a 01                	push   0x1
c0012717:	53                   	push   ebx
c0012718:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001271e:	50                   	push   eax
c001271f:	57                   	push   edi
c0012720:	e8 f9 f8 ff ff       	call   c001201e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012725:	83 c4 20             	add    esp,0x20
c0012728:	39 f3                	cmp    ebx,esi
c001272a:	75 dc                	jne    c0012708 <mapVASFirstTime+0x33>
c001272c:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012731:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012736:	29 ee                	sub    esi,ebp
c0012738:	29 e8                	sub    eax,ebp
c001273a:	89 c5                	mov    ebp,eax
c001273c:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012740:	19 db                	sbb    ebx,ebx
c0012742:	e8 71 d4 ff ff       	call   c000fbb8 <Phys::allocatePage()>
c0012747:	83 e3 04             	and    ebx,0x4
c001274a:	83 ec 0c             	sub    esp,0xc
c001274d:	81 c3 03 04 00 00    	add    ebx,0x403
c0012753:	53                   	push   ebx
c0012754:	6a 01                	push   0x1
c0012756:	56                   	push   esi
c0012757:	81 ee 00 10 00 00    	sub    esi,0x1000
c001275d:	50                   	push   eax
c001275e:	57                   	push   edi
c001275f:	e8 ba f8 ff ff       	call   c001201e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012764:	83 c4 20             	add    esp,0x20
c0012767:	39 f5                	cmp    ebp,esi
c0012769:	75 d1                	jne    c001273c <mapVASFirstTime+0x67>
c001276b:	0f 20 d8             	mov    eax,cr3
c001276e:	0f 22 d8             	mov    cr3,eax
c0012771:	83 c4 0c             	add    esp,0xc
c0012774:	5b                   	pop    ebx
c0012775:	5e                   	pop    esi
c0012776:	5f                   	pop    edi
c0012777:	5d                   	pop    ebp
c0012778:	c3                   	ret    
c0012779:	83 ec 0c             	sub    esp,0xc
c001277c:	68 7a b1 02 c0       	push   0xc002b17a
c0012781:	e8 71 01 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0012786:	83 c4 10             	add    esp,0x10
c0012789:	83 c4 0c             	add    esp,0xc
c001278c:	5b                   	pop    ebx
c001278d:	5e                   	pop    esi
c001278e:	5f                   	pop    edi
c001278f:	5d                   	pop    ebp
c0012790:	c3                   	ret    

c0012791 <__cxa_atexit>:
c0012791:	31 c0                	xor    eax,eax
c0012793:	c3                   	ret    

c0012794 <__cxa_finalize>:
c0012794:	c3                   	ret    

c0012795 <__stack_chk_fail>:
c0012795:	55                   	push   ebp
c0012796:	89 e5                	mov    ebp,esp
c0012798:	83 ec 14             	sub    esp,0x14
c001279b:	68 93 b1 02 c0       	push   0xc002b193
c00127a0:	e8 52 01 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00127a5:	58                   	pop    eax
c00127a6:	5a                   	pop    edx
c00127a7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00127aa:	68 e3 b1 02 c0       	push   0xc002b1e3
c00127af:	e8 43 01 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00127b4:	59                   	pop    ecx
c00127b5:	58                   	pop    eax
c00127b6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127b9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127bc:	68 e3 b1 02 c0       	push   0xc002b1e3
c00127c1:	e8 31 01 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00127c6:	5a                   	pop    edx
c00127c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127ca:	59                   	pop    ecx
c00127cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00127cd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127d0:	68 e3 b1 02 c0       	push   0xc002b1e3
c00127d5:	e8 1d 01 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00127da:	5a                   	pop    edx
c00127db:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127de:	59                   	pop    ecx
c00127df:	8b 00                	mov    eax,DWORD PTR [eax]
c00127e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00127e3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127e6:	68 e3 b1 02 c0       	push   0xc002b1e3
c00127eb:	e8 07 01 00 00       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00127f0:	c7 04 24 eb b1 02 c0 	mov    DWORD PTR [esp],0xc002b1eb
c00127f7:	e8 31 7b 00 00       	call   c001a32d <Krnl::panic(char const*)>
c00127fc:	83 c4 10             	add    esp,0x10
c00127ff:	c9                   	leave  
c0012800:	c3                   	ret    

c0012801 <__cxa_pure_virtual>:
c0012801:	83 ec 18             	sub    esp,0x18
c0012804:	68 03 b2 02 c0       	push   0xc002b203
c0012809:	e8 1f 7b 00 00       	call   c001a32d <Krnl::panic(char const*)>
c001280e:	83 c4 1c             	add    esp,0x1c
c0012811:	c3                   	ret    

c0012812 <operator new[](unsigned long)>:
c0012812:	e9 75 d0 ff ff       	jmp    c000f88c <malloc>

c0012817 <operator delete(void*, unsigned long)>:
c0012817:	e9 90 d0 ff ff       	jmp    c000f8ac <rfree>

c001281c <operator delete[](void*)>:
c001281c:	e9 8b d0 ff ff       	jmp    c000f8ac <rfree>

c0012821 <operator delete[](void*, unsigned long)>:
c0012821:	e9 86 d0 ff ff       	jmp    c000f8ac <rfree>

c0012826 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012826:	57                   	push   edi
c0012827:	b9 3f 00 00 00       	mov    ecx,0x3f
c001282c:	56                   	push   esi
c001282d:	be 18 b2 02 c0       	mov    esi,0xc002b218
c0012832:	53                   	push   ebx
c0012833:	83 ec 40             	sub    esp,0x40
c0012836:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001283a:	8d 7c 24 01          	lea    edi,[esp+0x1]
c001283e:	fc                   	cld    
c001283f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012841:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012845:	83 f9 3e             	cmp    ecx,0x3e
c0012848:	7e 05                	jle    c001284f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c001284a:	b9 3e 00 00 00       	mov    ecx,0x3e
c001284f:	89 df                	mov    edi,ebx
c0012851:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012855:	eb 02                	jmp    c0012859 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012857:	89 c7                	mov    edi,eax
c0012859:	31 d2                	xor    edx,edx
c001285b:	46                   	inc    esi
c001285c:	89 f8                	mov    eax,edi
c001285e:	f7 f1                	div    ecx
c0012860:	39 cf                	cmp    edi,ecx
c0012862:	73 f3                	jae    c0012857 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012864:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012867:	eb 02                	jmp    c001286b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012869:	89 c3                	mov    ebx,eax
c001286b:	31 d2                	xor    edx,edx
c001286d:	4e                   	dec    esi
c001286e:	89 d8                	mov    eax,ebx
c0012870:	f7 f1                	div    ecx
c0012872:	39 cb                	cmp    ebx,ecx
c0012874:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012878:	88 16                	mov    BYTE PTR [esi],dl
c001287a:	73 ed                	jae    c0012869 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c001287c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012880:	83 c4 40             	add    esp,0x40
c0012883:	5b                   	pop    ebx
c0012884:	5e                   	pop    esi
c0012885:	5f                   	pop    edi
c0012886:	c3                   	ret    

c0012887 <Dbg::logc(char)>:
c0012887:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001288b:	ba fd 03 00 00       	mov    edx,0x3fd
c0012890:	ec                   	in     al,dx
c0012891:	a8 20                	test   al,0x20
c0012893:	74 fb                	je     c0012890 <Dbg::logc(char)+0x9>
c0012895:	ba f8 03 00 00       	mov    edx,0x3f8
c001289a:	88 c8                	mov    al,cl
c001289c:	ee                   	out    dx,al
c001289d:	c3                   	ret    

c001289e <Dbg::logs(char*)>:
c001289e:	53                   	push   ebx
c001289f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00128a3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00128a6:	84 c0                	test   al,al
c00128a8:	74 0f                	je     c00128b9 <Dbg::logs(char*)+0x1b>
c00128aa:	50                   	push   eax
c00128ab:	43                   	inc    ebx
c00128ac:	e8 d6 ff ff ff       	call   c0012887 <Dbg::logc(char)>
c00128b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00128b4:	5a                   	pop    edx
c00128b5:	84 c0                	test   al,al
c00128b7:	75 f1                	jne    c00128aa <Dbg::logs(char*)+0xc>
c00128b9:	5b                   	pop    ebx
c00128ba:	c3                   	ret    

c00128bb <Dbg::logWriteInt(unsigned int)>:
c00128bb:	83 ec 10             	sub    esp,0x10
c00128be:	6a 0a                	push   0xa
c00128c0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128c4:	50                   	push   eax
c00128c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128c9:	e8 58 ff ff ff       	call   c0012826 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128ce:	50                   	push   eax
c00128cf:	e8 ca ff ff ff       	call   c001289e <Dbg::logs(char*)>
c00128d4:	83 c4 20             	add    esp,0x20
c00128d7:	c3                   	ret    

c00128d8 <Dbg::logWriteIntBase(unsigned int, int)>:
c00128d8:	83 ec 10             	sub    esp,0x10
c00128db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128df:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128e3:	50                   	push   eax
c00128e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128e8:	e8 39 ff ff ff       	call   c0012826 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128ed:	50                   	push   eax
c00128ee:	e8 ab ff ff ff       	call   c001289e <Dbg::logs(char*)>
c00128f3:	83 c4 20             	add    esp,0x20
c00128f6:	c3                   	ret    

c00128f7 <Dbg::kprintf(char const*, ...)>:
c00128f7:	55                   	push   ebp
c00128f8:	57                   	push   edi
c00128f9:	56                   	push   esi
c00128fa:	53                   	push   ebx
c00128fb:	83 ec 0c             	sub    esp,0xc
c00128fe:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012902:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012906:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001290a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001290d:	84 c0                	test   al,al
c001290f:	74 4a                	je     c001295b <Dbg::kprintf(char const*, ...)+0x64>
c0012911:	31 db                	xor    ebx,ebx
c0012913:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012916:	3c 25                	cmp    al,0x25
c0012918:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c001291b:	0f 85 e4 00 00 00    	jne    c0012a05 <Dbg::kprintf(char const*, ...)+0x10e>
c0012921:	83 c3 02             	add    ebx,0x2
c0012924:	8a 07                	mov    al,BYTE PTR [edi]
c0012926:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012929:	83 e8 25             	sub    eax,0x25
c001292c:	3c 53                	cmp    al,0x53
c001292e:	0f 87 ba 00 00 00    	ja     c00129ee <Dbg::kprintf(char const*, ...)+0xf7>
c0012934:	0f b6 c0             	movzx  eax,al
c0012937:	ff 24 85 58 b2 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4da8]
c001293e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012942:	89 c8                	mov    eax,ecx
c0012944:	83 c1 04             	add    ecx,0x4
c0012947:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001294b:	ff 30                	push   DWORD PTR [eax]
c001294d:	e8 4c ff ff ff       	call   c001289e <Dbg::logs(char*)>
c0012952:	58                   	pop    eax
c0012953:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012957:	84 c0                	test   al,al
c0012959:	75 b8                	jne    c0012913 <Dbg::kprintf(char const*, ...)+0x1c>
c001295b:	83 c4 0c             	add    esp,0xc
c001295e:	5b                   	pop    ebx
c001295f:	5e                   	pop    esi
c0012960:	5f                   	pop    edi
c0012961:	5d                   	pop    ebp
c0012962:	c3                   	ret    
c0012963:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012967:	89 d0                	mov    eax,edx
c0012969:	83 c2 04             	add    edx,0x4
c001296c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012970:	ff 30                	push   DWORD PTR [eax]
c0012972:	e8 44 ff ff ff       	call   c00128bb <Dbg::logWriteInt(unsigned int)>
c0012977:	58                   	pop    eax
c0012978:	eb d9                	jmp    c0012953 <Dbg::kprintf(char const*, ...)+0x5c>
c001297a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001297e:	89 d0                	mov    eax,edx
c0012980:	83 c2 04             	add    edx,0x4
c0012983:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012986:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001298a:	50                   	push   eax
c001298b:	e8 f7 fe ff ff       	call   c0012887 <Dbg::logc(char)>
c0012990:	58                   	pop    eax
c0012991:	eb c0                	jmp    c0012953 <Dbg::kprintf(char const*, ...)+0x5c>
c0012993:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012997:	89 c8                	mov    eax,ecx
c0012999:	83 c1 04             	add    ecx,0x4
c001299c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00129a0:	ff 30                	push   DWORD PTR [eax]
c00129a2:	e8 14 ff ff ff       	call   c00128bb <Dbg::logWriteInt(unsigned int)>
c00129a7:	5f                   	pop    edi
c00129a8:	eb a9                	jmp    c0012953 <Dbg::kprintf(char const*, ...)+0x5c>
c00129aa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00129ae:	89 c8                	mov    eax,ecx
c00129b0:	83 c1 04             	add    ecx,0x4
c00129b3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00129b7:	6a 10                	push   0x10
c00129b9:	ff 30                	push   DWORD PTR [eax]
c00129bb:	e8 18 ff ff ff       	call   c00128d8 <Dbg::logWriteIntBase(unsigned int, int)>
c00129c0:	59                   	pop    ecx
c00129c1:	5f                   	pop    edi
c00129c2:	eb 8f                	jmp    c0012953 <Dbg::kprintf(char const*, ...)+0x5c>
c00129c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00129c8:	89 d0                	mov    eax,edx
c00129ca:	83 c2 08             	add    edx,0x8
c00129cd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00129d1:	6a 10                	push   0x10
c00129d3:	ff 30                	push   DWORD PTR [eax]
c00129d5:	e8 fe fe ff ff       	call   c00128d8 <Dbg::logWriteIntBase(unsigned int, int)>
c00129da:	58                   	pop    eax
c00129db:	5a                   	pop    edx
c00129dc:	e9 72 ff ff ff       	jmp    c0012953 <Dbg::kprintf(char const*, ...)+0x5c>
c00129e1:	6a 25                	push   0x25
c00129e3:	e8 9f fe ff ff       	call   c0012887 <Dbg::logc(char)>
c00129e8:	58                   	pop    eax
c00129e9:	e9 65 ff ff ff       	jmp    c0012953 <Dbg::kprintf(char const*, ...)+0x5c>
c00129ee:	6a 25                	push   0x25
c00129f0:	e8 92 fe ff ff       	call   c0012887 <Dbg::logc(char)>
c00129f5:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00129f8:	50                   	push   eax
c00129f9:	e8 89 fe ff ff       	call   c0012887 <Dbg::logc(char)>
c00129fe:	5a                   	pop    edx
c00129ff:	59                   	pop    ecx
c0012a00:	e9 4e ff ff ff       	jmp    c0012953 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a05:	50                   	push   eax
c0012a06:	89 eb                	mov    ebx,ebp
c0012a08:	e8 7a fe ff ff       	call   c0012887 <Dbg::logc(char)>
c0012a0d:	89 fd                	mov    ebp,edi
c0012a0f:	58                   	pop    eax
c0012a10:	e9 3e ff ff ff       	jmp    c0012953 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a15:	90                   	nop

c0012a16 <File::read(unsigned long long, void*, int*)>:
c0012a16:	53                   	push   ebx
c0012a17:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a1b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a1f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a26:	3c 19                	cmp    al,0x19
c0012a28:	77 35                	ja     c0012a5f <File::read(unsigned long long, void*, int*)+0x49>
c0012a2a:	8b 04 85 20 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd09e0]
c0012a31:	85 c0                	test   eax,eax
c0012a33:	74 2a                	je     c0012a5f <File::read(unsigned long long, void*, int*)+0x49>
c0012a35:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a3b:	85 c0                	test   eax,eax
c0012a3d:	74 20                	je     c0012a5f <File::read(unsigned long long, void*, int*)+0x49>
c0012a3f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a43:	74 21                	je     c0012a66 <File::read(unsigned long long, void*, int*)+0x50>
c0012a45:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a47:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a4b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a55:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a59:	5b                   	pop    ebx
c0012a5a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012a5d:	ff e0                	jmp    eax
c0012a5f:	b8 0b 00 00 00       	mov    eax,0xb
c0012a64:	eb 05                	jmp    c0012a6b <File::read(unsigned long long, void*, int*)+0x55>
c0012a66:	b8 05 00 00 00       	mov    eax,0x5
c0012a6b:	5b                   	pop    ebx
c0012a6c:	c3                   	ret    
c0012a6d:	90                   	nop

c0012a6e <File::write(unsigned long long, void*, int*)>:
c0012a6e:	53                   	push   ebx
c0012a6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a73:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a77:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a7e:	3c 19                	cmp    al,0x19
c0012a80:	77 35                	ja     c0012ab7 <File::write(unsigned long long, void*, int*)+0x49>
c0012a82:	8b 04 85 20 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd09e0]
c0012a89:	85 c0                	test   eax,eax
c0012a8b:	74 2a                	je     c0012ab7 <File::write(unsigned long long, void*, int*)+0x49>
c0012a8d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a93:	85 c0                	test   eax,eax
c0012a95:	74 20                	je     c0012ab7 <File::write(unsigned long long, void*, int*)+0x49>
c0012a97:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a9b:	74 21                	je     c0012abe <File::write(unsigned long long, void*, int*)+0x50>
c0012a9d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a9f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012aa3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012aa9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012aad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012ab1:	5b                   	pop    ebx
c0012ab2:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012ab5:	ff e0                	jmp    eax
c0012ab7:	b8 0b 00 00 00       	mov    eax,0xb
c0012abc:	eb 05                	jmp    c0012ac3 <File::write(unsigned long long, void*, int*)+0x55>
c0012abe:	b8 05 00 00 00       	mov    eax,0x5
c0012ac3:	5b                   	pop    ebx
c0012ac4:	c3                   	ret    
c0012ac5:	90                   	nop

c0012ac6 <Directory::read(unsigned long long, void*, int*)>:
c0012ac6:	53                   	push   ebx
c0012ac7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012acb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012acf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ad6:	3c 19                	cmp    al,0x19
c0012ad8:	77 35                	ja     c0012b0f <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ada:	8b 04 85 20 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd09e0]
c0012ae1:	85 c0                	test   eax,eax
c0012ae3:	74 2a                	je     c0012b0f <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ae5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012aeb:	85 c0                	test   eax,eax
c0012aed:	74 20                	je     c0012b0f <Directory::read(unsigned long long, void*, int*)+0x49>
c0012aef:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012af3:	74 21                	je     c0012b16 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012af5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012af7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012afb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012b01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012b05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b09:	5b                   	pop    ebx
c0012b0a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012b0d:	ff e0                	jmp    eax
c0012b0f:	b8 0b 00 00 00       	mov    eax,0xb
c0012b14:	eb 05                	jmp    c0012b1b <Directory::read(unsigned long long, void*, int*)+0x55>
c0012b16:	b8 05 00 00 00       	mov    eax,0x5
c0012b1b:	5b                   	pop    ebx
c0012b1c:	c3                   	ret    
c0012b1d:	90                   	nop

c0012b1e <Directory::write(unsigned long long, void*, int*)>:
c0012b1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b22:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012b29:	b8 0b 00 00 00       	mov    eax,0xb
c0012b2e:	80 fa 19             	cmp    dl,0x19
c0012b31:	77 18                	ja     c0012b4b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b33:	8b 14 95 20 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd09e0]
c0012b3a:	85 d2                	test   edx,edx
c0012b3c:	74 0d                	je     c0012b4b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b3e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012b45:	19 c0                	sbb    eax,eax
c0012b47:	83 e0 0a             	and    eax,0xa
c0012b4a:	40                   	inc    eax
c0012b4b:	c3                   	ret    

c0012b4c <File::isAtty()>:
c0012b4c:	31 c0                	xor    eax,eax
c0012b4e:	c3                   	ret    
c0012b4f:	90                   	nop

c0012b50 <Directory::isAtty()>:
c0012b50:	31 c0                	xor    eax,eax
c0012b52:	c3                   	ret    
c0012b53:	90                   	nop

c0012b54 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012b54:	b8 0a 00 00 00       	mov    eax,0xa
c0012b59:	c3                   	ret    

c0012b5a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012b5a:	b8 0a 00 00 00       	mov    eax,0xa
c0012b5f:	c3                   	ret    

c0012b60 <Filesystem::getFileFirstSector(char const*)>:
c0012b60:	31 c0                	xor    eax,eax
c0012b62:	31 d2                	xor    edx,edx
c0012b64:	c3                   	ret    
c0012b65:	90                   	nop

c0012b66 <File::~File()>:
c0012b66:	83 ec 0c             	sub    esp,0xc
c0012b69:	ba 18 b4 02 c0       	mov    edx,0xc002b418
c0012b6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b72:	89 10                	mov    DWORD PTR [eax],edx
c0012b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b78:	83 ec 0c             	sub    esp,0xc
c0012b7b:	50                   	push   eax
c0012b7c:	e8 0f e7 ff ff       	call   c0011290 <UnixFile::~UnixFile()>
c0012b81:	83 c4 10             	add    esp,0x10
c0012b84:	90                   	nop
c0012b85:	83 c4 0c             	add    esp,0xc
c0012b88:	c3                   	ret    
c0012b89:	90                   	nop

c0012b8a <File::~File()>:
c0012b8a:	83 ec 0c             	sub    esp,0xc
c0012b8d:	83 ec 0c             	sub    esp,0xc
c0012b90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b94:	e8 cd ff ff ff       	call   c0012b66 <File::~File()>
c0012b99:	83 c4 10             	add    esp,0x10
c0012b9c:	83 ec 08             	sub    esp,0x8
c0012b9f:	68 14 01 00 00       	push   0x114
c0012ba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ba8:	e8 6a fc ff ff       	call   c0012817 <operator delete(void*, unsigned long)>
c0012bad:	83 c4 10             	add    esp,0x10
c0012bb0:	83 c4 0c             	add    esp,0xc
c0012bb3:	c3                   	ret    

c0012bb4 <Directory::~Directory()>:
c0012bb4:	83 ec 0c             	sub    esp,0xc
c0012bb7:	ba 34 b4 02 c0       	mov    edx,0xc002b434
c0012bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bc0:	89 10                	mov    DWORD PTR [eax],edx
c0012bc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bc6:	83 ec 0c             	sub    esp,0xc
c0012bc9:	50                   	push   eax
c0012bca:	e8 c1 e6 ff ff       	call   c0011290 <UnixFile::~UnixFile()>
c0012bcf:	83 c4 10             	add    esp,0x10
c0012bd2:	90                   	nop
c0012bd3:	83 c4 0c             	add    esp,0xc
c0012bd6:	c3                   	ret    
c0012bd7:	90                   	nop

c0012bd8 <Directory::~Directory()>:
c0012bd8:	83 ec 0c             	sub    esp,0xc
c0012bdb:	83 ec 0c             	sub    esp,0xc
c0012bde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012be2:	e8 cd ff ff ff       	call   c0012bb4 <Directory::~Directory()>
c0012be7:	83 c4 10             	add    esp,0x10
c0012bea:	83 ec 08             	sub    esp,0x8
c0012bed:	68 14 01 00 00       	push   0x114
c0012bf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bf6:	e8 1c fc ff ff       	call   c0012817 <operator delete(void*, unsigned long)>
c0012bfb:	83 c4 10             	add    esp,0x10
c0012bfe:	83 c4 0c             	add    esp,0xc
c0012c01:	c3                   	ret    

c0012c02 <Filesystem::Filesystem()>:
c0012c02:	ba b0 b3 02 c0       	mov    edx,0xc002b3b0
c0012c07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c0b:	89 10                	mov    DWORD PTR [eax],edx
c0012c0d:	8b 15 94 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f194
c0012c13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c17:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c1e:	a3 94 f1 02 c0       	mov    ds:0xc002f194,eax
c0012c23:	90                   	nop
c0012c24:	c3                   	ret    
c0012c25:	90                   	nop

c0012c26 <Filesystem::~Filesystem()>:
c0012c26:	ba b0 b3 02 c0       	mov    edx,0xc002b3b0
c0012c2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c2f:	89 10                	mov    DWORD PTR [eax],edx
c0012c31:	90                   	nop
c0012c32:	c3                   	ret    
c0012c33:	90                   	nop

c0012c34 <Filesystem::~Filesystem()>:
c0012c34:	83 ec 0c             	sub    esp,0xc
c0012c37:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012c3b:	e8 e6 ff ff ff       	call   c0012c26 <Filesystem::~Filesystem()>
c0012c40:	83 c4 04             	add    esp,0x4
c0012c43:	83 ec 08             	sub    esp,0x8
c0012c46:	6a 08                	push   0x8
c0012c48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c4c:	e8 c6 fb ff ff       	call   c0012817 <operator delete(void*, unsigned long)>
c0012c51:	83 c4 10             	add    esp,0x10
c0012c54:	83 c4 0c             	add    esp,0xc
c0012c57:	c3                   	ret    

c0012c58 <Fs::getcwd(Process*, char*, int)>:
c0012c58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c5c:	31 c0                	xor    eax,eax
c0012c5e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012c61:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012c65:	7d 15                	jge    c0012c7c <Fs::getcwd(Process*, char*, int)+0x24>
c0012c67:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c6b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012c72:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012c75:	84 c9                	test   cl,cl
c0012c77:	74 06                	je     c0012c7f <Fs::getcwd(Process*, char*, int)+0x27>
c0012c79:	40                   	inc    eax
c0012c7a:	eb e2                	jmp    c0012c5e <Fs::getcwd(Process*, char*, int)+0x6>
c0012c7c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012c7f:	31 c0                	xor    eax,eax
c0012c81:	c3                   	ret    

c0012c82 <Fs::initVFS()>:
c0012c82:	83 ec 18             	sub    esp,0x18
c0012c85:	6a 08                	push   0x8
c0012c87:	e8 00 cc ff ff       	call   c000f88c <malloc>
c0012c8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c8f:	e8 08 e5 00 00       	call   c002119c <FAT::FAT()>
c0012c94:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012c9b:	e8 ec cb ff ff       	call   c000f88c <malloc>
c0012ca0:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ca3:	e8 30 f7 00 00       	call   c00223d8 <ISO9660::ISO9660()>
c0012ca8:	83 c4 1c             	add    esp,0x1c
c0012cab:	c3                   	ret    

c0012cac <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012cac:	55                   	push   ebp
c0012cad:	57                   	push   edi
c0012cae:	56                   	push   esi
c0012caf:	53                   	push   ebx
c0012cb0:	81 ec 10 04 00 00    	sub    esp,0x410
c0012cb6:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012cbd:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012cc4:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012ccb:	68 00 04 00 00       	push   0x400
c0012cd0:	6a 00                	push   0x0
c0012cd2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012cd6:	56                   	push   esi
c0012cd7:	e8 74 da fe ff       	call   c0000750 <memset>
c0012cdc:	83 c4 10             	add    esp,0x10
c0012cdf:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012ce3:	75 0b                	jne    c0012cf0 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012ce5:	50                   	push   eax
c0012ce6:	50                   	push   eax
c0012ce7:	57                   	push   edi
c0012ce8:	56                   	push   esi
c0012ce9:	e8 1e db fe ff       	call   c000080c <strcpy>
c0012cee:	eb 41                	jmp    c0012d31 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012cf0:	8a 07                	mov    al,BYTE PTR [edi]
c0012cf2:	3c 5c                	cmp    al,0x5c
c0012cf4:	74 04                	je     c0012cfa <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012cf6:	3c 2f                	cmp    al,0x2f
c0012cf8:	75 18                	jne    c0012d12 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012cfa:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012cfd:	3c 60                	cmp    al,0x60
c0012cff:	7e 03                	jle    c0012d04 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012d01:	83 e8 20             	sub    eax,0x20
c0012d04:	88 04 24             	mov    BYTE PTR [esp],al
c0012d07:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012d0e:	50                   	push   eax
c0012d0f:	50                   	push   eax
c0012d10:	eb 18                	jmp    c0012d2a <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012d12:	50                   	push   eax
c0012d13:	50                   	push   eax
c0012d14:	55                   	push   ebp
c0012d15:	56                   	push   esi
c0012d16:	e8 f1 da fe ff       	call   c000080c <strcpy>
c0012d1b:	5a                   	pop    edx
c0012d1c:	59                   	pop    ecx
c0012d1d:	68 8d cb 02 c0       	push   0xc002cb8d
c0012d22:	56                   	push   esi
c0012d23:	e8 24 dc fe ff       	call   c000094c <strcat>
c0012d28:	5d                   	pop    ebp
c0012d29:	58                   	pop    eax
c0012d2a:	57                   	push   edi
c0012d2b:	56                   	push   esi
c0012d2c:	e8 1b dc fe ff       	call   c000094c <strcat>
c0012d31:	83 c4 10             	add    esp,0x10
c0012d34:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012d37:	3c 60                	cmp    al,0x60
c0012d39:	7e 03                	jle    c0012d3e <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012d3b:	83 e8 20             	sub    eax,0x20
c0012d3e:	88 04 24             	mov    BYTE PTR [esp],al
c0012d41:	88 03                	mov    BYTE PTR [ebx],al
c0012d43:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012d4a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012d50:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012d54:	bf 03 00 00 00       	mov    edi,0x3
c0012d59:	b8 03 00 00 00       	mov    eax,0x3
c0012d5e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012d61:	84 d2                	test   dl,dl
c0012d63:	0f 84 91 00 00 00    	je     c0012dfa <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012d69:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012d6c:	80 fa 5c             	cmp    dl,0x5c
c0012d6f:	74 05                	je     c0012d76 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012d71:	80 fa 2f             	cmp    dl,0x2f
c0012d74:	75 12                	jne    c0012d88 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d76:	89 c5                	mov    ebp,eax
c0012d78:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012d7d:	74 09                	je     c0012d88 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d7f:	40                   	inc    eax
c0012d80:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012d84:	89 cf                	mov    edi,ecx
c0012d86:	eb d6                	jmp    c0012d5e <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012d88:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012d8d:	75 5b                	jne    c0012dea <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d8f:	80 fa 2e             	cmp    dl,0x2e
c0012d92:	75 56                	jne    c0012dea <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d94:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012d98:	74 19                	je     c0012db3 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012d9a:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d9f:	74 53                	je     c0012df4 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012da1:	89 f9                	mov    ecx,edi
c0012da3:	41                   	inc    ecx
c0012da4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012da7:	80 fa 2f             	cmp    dl,0x2f
c0012daa:	74 f7                	je     c0012da3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012dac:	80 fa 5c             	cmp    dl,0x5c
c0012daf:	74 f2                	je     c0012da3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012db1:	eb d1                	jmp    c0012d84 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012db3:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012db8:	74 3a                	je     c0012df4 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012dba:	83 f8 03             	cmp    eax,0x3
c0012dbd:	74 c5                	je     c0012d84 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dbf:	41                   	inc    ecx
c0012dc0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012dc3:	80 fa 2f             	cmp    dl,0x2f
c0012dc6:	74 f7                	je     c0012dbf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012dc8:	80 fa 5c             	cmp    dl,0x5c
c0012dcb:	74 f2                	je     c0012dbf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012dcd:	48                   	dec    eax
c0012dce:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012dd2:	75 06                	jne    c0012dda <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012dd4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dd8:	eb f3                	jmp    c0012dcd <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012dda:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012dde:	74 07                	je     c0012de7 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012de0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012de4:	48                   	dec    eax
c0012de5:	eb f3                	jmp    c0012dda <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012de7:	40                   	inc    eax
c0012de8:	eb 9a                	jmp    c0012d84 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dea:	80 fa 2f             	cmp    dl,0x2f
c0012ded:	74 95                	je     c0012d84 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012def:	80 fa 5c             	cmp    dl,0x5c
c0012df2:	74 90                	je     c0012d84 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012df4:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012df7:	40                   	inc    eax
c0012df8:	eb 8a                	jmp    c0012d84 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dfa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dfe:	83 ec 0c             	sub    esp,0xc
c0012e01:	53                   	push   ebx
c0012e02:	e8 65 d9 fe ff       	call   c000076c <strlen>
c0012e07:	83 c4 10             	add    esp,0x10
c0012e0a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012e0f:	75 26                	jne    c0012e37 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012e11:	83 ec 0c             	sub    esp,0xc
c0012e14:	53                   	push   ebx
c0012e15:	e8 52 d9 fe ff       	call   c000076c <strlen>
c0012e1a:	83 c4 10             	add    esp,0x10
c0012e1d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012e22:	74 26                	je     c0012e4a <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012e24:	83 ec 0c             	sub    esp,0xc
c0012e27:	53                   	push   ebx
c0012e28:	e8 3f d9 fe ff       	call   c000076c <strlen>
c0012e2d:	83 c4 10             	add    esp,0x10
c0012e30:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012e35:	eb c7                	jmp    c0012dfe <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012e37:	83 ec 0c             	sub    esp,0xc
c0012e3a:	53                   	push   ebx
c0012e3b:	e8 2c d9 fe ff       	call   c000076c <strlen>
c0012e40:	83 c4 10             	add    esp,0x10
c0012e43:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012e48:	74 c7                	je     c0012e11 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012e4a:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012e50:	5b                   	pop    ebx
c0012e51:	5e                   	pop    esi
c0012e52:	5f                   	pop    edi
c0012e53:	5d                   	pop    ebp
c0012e54:	c3                   	ret    
c0012e55:	90                   	nop

c0012e56 <File::File(char const*, Process*)>:
c0012e56:	83 ec 0c             	sub    esp,0xc
c0012e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e5d:	83 ec 08             	sub    esp,0x8
c0012e60:	6a 00                	push   0x0
c0012e62:	50                   	push   eax
c0012e63:	e8 46 e2 ff ff       	call   c00110ae <UnixFile::UnixFile(int)>
c0012e68:	83 c4 10             	add    esp,0x10
c0012e6b:	ba 18 b4 02 c0       	mov    edx,0xc002b418
c0012e70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e74:	89 10                	mov    DWORD PTR [eax],edx
c0012e76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e7a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e84:	83 c0 0d             	add    eax,0xd
c0012e87:	83 ec 04             	sub    esp,0x4
c0012e8a:	52                   	push   edx
c0012e8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e8f:	50                   	push   eax
c0012e90:	e8 17 fe ff ff       	call   c0012cac <Fs::standardiseFiles(char*, char const*, char const*)>
c0012e95:	83 c4 10             	add    esp,0x10
c0012e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e9c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012e9f:	8d 50 bf             	lea    edx,[eax-0x41]
c0012ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ea6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012eac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012eb0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012eb4:	90                   	nop
c0012eb5:	83 c4 0c             	add    esp,0xc
c0012eb8:	c3                   	ret    
c0012eb9:	90                   	nop

c0012eba <File::open(FileOpenMode)>:
c0012eba:	53                   	push   ebx
c0012ebb:	b8 0b 00 00 00       	mov    eax,0xb
c0012ec0:	83 ec 08             	sub    esp,0x8
c0012ec3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ec7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012ece:	80 fa 19             	cmp    dl,0x19
c0012ed1:	77 40                	ja     c0012f13 <File::open(FileOpenMode)+0x59>
c0012ed3:	8b 14 95 20 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd09e0]
c0012eda:	85 d2                	test   edx,edx
c0012edc:	74 35                	je     c0012f13 <File::open(FileOpenMode)+0x59>
c0012ede:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012ee4:	85 d2                	test   edx,edx
c0012ee6:	74 2b                	je     c0012f13 <File::open(FileOpenMode)+0x59>
c0012ee8:	b8 06 00 00 00       	mov    eax,0x6
c0012eed:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012ef1:	75 20                	jne    c0012f13 <File::open(FileOpenMode)+0x59>
c0012ef3:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ef5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012eff:	51                   	push   ecx
c0012f00:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012f03:	51                   	push   ecx
c0012f04:	52                   	push   edx
c0012f05:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012f08:	83 c4 10             	add    esp,0x10
c0012f0b:	85 c0                	test   eax,eax
c0012f0d:	75 04                	jne    c0012f13 <File::open(FileOpenMode)+0x59>
c0012f0f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012f13:	83 c4 08             	add    esp,0x8
c0012f16:	5b                   	pop    ebx
c0012f17:	c3                   	ret    

c0012f18 <File::close()>:
c0012f18:	53                   	push   ebx
c0012f19:	b8 0b 00 00 00       	mov    eax,0xb
c0012f1e:	83 ec 08             	sub    esp,0x8
c0012f21:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012f25:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f2c:	80 fa 19             	cmp    dl,0x19
c0012f2f:	77 41                	ja     c0012f72 <File::close()+0x5a>
c0012f31:	8b 1c 95 20 f6 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd09e0]
c0012f38:	85 db                	test   ebx,ebx
c0012f3a:	74 36                	je     c0012f72 <File::close()+0x5a>
c0012f3c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012f43:	74 2d                	je     c0012f72 <File::close()+0x5a>
c0012f45:	b8 05 00 00 00       	mov    eax,0x5
c0012f4a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012f4e:	74 22                	je     c0012f72 <File::close()+0x5a>
c0012f50:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012f54:	8b 04 95 20 f6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd09e0]
c0012f5b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f61:	53                   	push   ebx
c0012f62:	53                   	push   ebx
c0012f63:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f65:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012f6b:	50                   	push   eax
c0012f6c:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012f6f:	83 c4 10             	add    esp,0x10
c0012f72:	83 c4 08             	add    esp,0x8
c0012f75:	5b                   	pop    ebx
c0012f76:	c3                   	ret    
c0012f77:	90                   	nop

c0012f78 <File::seek(unsigned long long)>:
c0012f78:	56                   	push   esi
c0012f79:	53                   	push   ebx
c0012f7a:	b8 0b 00 00 00       	mov    eax,0xb
c0012f7f:	51                   	push   ecx
c0012f80:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012f84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012f88:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012f8f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f93:	80 fa 19             	cmp    dl,0x19
c0012f96:	77 31                	ja     c0012fc9 <File::seek(unsigned long long)+0x51>
c0012f98:	8b 14 95 20 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd09e0]
c0012f9f:	85 d2                	test   edx,edx
c0012fa1:	74 26                	je     c0012fc9 <File::seek(unsigned long long)+0x51>
c0012fa3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012fa9:	85 d2                	test   edx,edx
c0012fab:	74 1c                	je     c0012fc9 <File::seek(unsigned long long)+0x51>
c0012fad:	b8 05 00 00 00       	mov    eax,0x5
c0012fb2:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012fb6:	74 11                	je     c0012fc9 <File::seek(unsigned long long)+0x51>
c0012fb8:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fba:	53                   	push   ebx
c0012fbb:	51                   	push   ecx
c0012fbc:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012fc2:	52                   	push   edx
c0012fc3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012fc6:	83 c4 10             	add    esp,0x10
c0012fc9:	5a                   	pop    edx
c0012fca:	5b                   	pop    ebx
c0012fcb:	5e                   	pop    esi
c0012fcc:	c3                   	ret    
c0012fcd:	90                   	nop

c0012fce <File::tell(unsigned long long*)>:
c0012fce:	83 ec 0c             	sub    esp,0xc
c0012fd1:	b8 0b 00 00 00       	mov    eax,0xb
c0012fd6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012fda:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012fe1:	80 fa 19             	cmp    dl,0x19
c0012fe4:	77 34                	ja     c001301a <File::tell(unsigned long long*)+0x4c>
c0012fe6:	8b 14 95 20 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd09e0]
c0012fed:	85 d2                	test   edx,edx
c0012fef:	74 29                	je     c001301a <File::tell(unsigned long long*)+0x4c>
c0012ff1:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012ff7:	85 d2                	test   edx,edx
c0012ff9:	74 1f                	je     c001301a <File::tell(unsigned long long*)+0x4c>
c0012ffb:	b8 05 00 00 00       	mov    eax,0x5
c0013000:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013004:	74 14                	je     c001301a <File::tell(unsigned long long*)+0x4c>
c0013006:	50                   	push   eax
c0013007:	8b 02                	mov    eax,DWORD PTR [edx]
c0013009:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001300d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013013:	52                   	push   edx
c0013014:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013017:	83 c4 10             	add    esp,0x10
c001301a:	83 c4 0c             	add    esp,0xc
c001301d:	c3                   	ret    

c001301e <File::rewind()>:
c001301e:	83 ec 10             	sub    esp,0x10
c0013021:	6a 00                	push   0x0
c0013023:	6a 00                	push   0x0
c0013025:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013029:	e8 4a ff ff ff       	call   c0012f78 <File::seek(unsigned long long)>
c001302e:	83 c4 1c             	add    esp,0x1c
c0013031:	c3                   	ret    

c0013032 <File::unlink()>:
c0013032:	83 ec 0c             	sub    esp,0xc
c0013035:	b8 0b 00 00 00       	mov    eax,0xb
c001303a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001303e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013045:	80 f9 19             	cmp    cl,0x19
c0013048:	77 2f                	ja     c0013079 <File::unlink()+0x47>
c001304a:	8b 0c 8d 20 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd09e0]
c0013051:	85 c9                	test   ecx,ecx
c0013053:	74 24                	je     c0013079 <File::unlink()+0x47>
c0013055:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001305b:	85 c9                	test   ecx,ecx
c001305d:	74 1a                	je     c0013079 <File::unlink()+0x47>
c001305f:	b8 06 00 00 00       	mov    eax,0x6
c0013064:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013068:	75 0f                	jne    c0013079 <File::unlink()+0x47>
c001306a:	83 c2 0d             	add    edx,0xd
c001306d:	50                   	push   eax
c001306e:	50                   	push   eax
c001306f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013071:	52                   	push   edx
c0013072:	51                   	push   ecx
c0013073:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013076:	83 c4 10             	add    esp,0x10
c0013079:	83 c4 0c             	add    esp,0xc
c001307c:	c3                   	ret    
c001307d:	90                   	nop

c001307e <File::rename(char const*)>:
c001307e:	83 ec 0c             	sub    esp,0xc
c0013081:	b8 0b 00 00 00       	mov    eax,0xb
c0013086:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001308a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013091:	80 f9 19             	cmp    cl,0x19
c0013094:	77 32                	ja     c00130c8 <File::rename(char const*)+0x4a>
c0013096:	8b 0c 8d 20 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd09e0]
c001309d:	85 c9                	test   ecx,ecx
c001309f:	74 27                	je     c00130c8 <File::rename(char const*)+0x4a>
c00130a1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130a7:	85 c9                	test   ecx,ecx
c00130a9:	74 1d                	je     c00130c8 <File::rename(char const*)+0x4a>
c00130ab:	b8 06 00 00 00       	mov    eax,0x6
c00130b0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130b4:	75 12                	jne    c00130c8 <File::rename(char const*)+0x4a>
c00130b6:	83 c2 0d             	add    edx,0xd
c00130b9:	50                   	push   eax
c00130ba:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00130c0:	52                   	push   edx
c00130c1:	51                   	push   ecx
c00130c2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00130c5:	83 c4 10             	add    esp,0x10
c00130c8:	83 c4 0c             	add    esp,0xc
c00130cb:	c3                   	ret    

c00130cc <File::chfatattr(unsigned char, unsigned char)>:
c00130cc:	57                   	push   edi
c00130cd:	b8 0b 00 00 00       	mov    eax,0xb
c00130d2:	56                   	push   esi
c00130d3:	53                   	push   ebx
c00130d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130d8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00130dc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130e3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00130e7:	80 f9 19             	cmp    cl,0x19
c00130ea:	77 37                	ja     c0013123 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130ec:	8b 0c 8d 20 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd09e0]
c00130f3:	85 c9                	test   ecx,ecx
c00130f5:	74 2c                	je     c0013123 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130f7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130fd:	85 c9                	test   ecx,ecx
c00130ff:	74 22                	je     c0013123 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013101:	b8 06 00 00 00       	mov    eax,0x6
c0013106:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001310a:	75 17                	jne    c0013123 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001310c:	8b 39                	mov    edi,DWORD PTR [ecx]
c001310e:	89 f0                	mov    eax,esi
c0013110:	83 c2 0d             	add    edx,0xd
c0013113:	0f b6 f0             	movzx  esi,al
c0013116:	0f b6 db             	movzx  ebx,bl
c0013119:	56                   	push   esi
c001311a:	53                   	push   ebx
c001311b:	52                   	push   edx
c001311c:	51                   	push   ecx
c001311d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013120:	83 c4 10             	add    esp,0x10
c0013123:	5b                   	pop    ebx
c0013124:	5e                   	pop    esi
c0013125:	5f                   	pop    edi
c0013126:	c3                   	ret    
c0013127:	90                   	nop

c0013128 <File::exists()>:
c0013128:	83 ec 0c             	sub    esp,0xc
c001312b:	31 c0                	xor    eax,eax
c001312d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013131:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013138:	80 f9 19             	cmp    cl,0x19
c001313b:	77 24                	ja     c0013161 <File::exists()+0x39>
c001313d:	8b 0c 8d 20 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd09e0]
c0013144:	85 c9                	test   ecx,ecx
c0013146:	74 19                	je     c0013161 <File::exists()+0x39>
c0013148:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001314e:	85 c9                	test   ecx,ecx
c0013150:	74 0f                	je     c0013161 <File::exists()+0x39>
c0013152:	83 c2 0d             	add    edx,0xd
c0013155:	50                   	push   eax
c0013156:	50                   	push   eax
c0013157:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013159:	52                   	push   edx
c001315a:	51                   	push   ecx
c001315b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001315e:	83 c4 10             	add    esp,0x10
c0013161:	83 c4 0c             	add    esp,0xc
c0013164:	c3                   	ret    
c0013165:	90                   	nop

c0013166 <File::stat(unsigned long long*, bool*)>:
c0013166:	56                   	push   esi
c0013167:	53                   	push   ebx
c0013168:	50                   	push   eax
c0013169:	b8 0b 00 00 00       	mov    eax,0xb
c001316e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013172:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013176:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001317d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013181:	80 f9 19             	cmp    cl,0x19
c0013184:	77 3d                	ja     c00131c3 <File::stat(unsigned long long*, bool*)+0x5d>
c0013186:	8b 0c 8d 20 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd09e0]
c001318d:	85 c9                	test   ecx,ecx
c001318f:	74 32                	je     c00131c3 <File::stat(unsigned long long*, bool*)+0x5d>
c0013191:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013197:	85 c9                	test   ecx,ecx
c0013199:	74 28                	je     c00131c3 <File::stat(unsigned long long*, bool*)+0x5d>
c001319b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001319d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131a1:	74 13                	je     c00131b6 <File::stat(unsigned long long*, bool*)+0x50>
c00131a3:	83 ec 04             	sub    esp,0x4
c00131a6:	56                   	push   esi
c00131a7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00131ad:	51                   	push   ecx
c00131ae:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00131b1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00131b4:	eb 0a                	jmp    c00131c0 <File::stat(unsigned long long*, bool*)+0x5a>
c00131b6:	53                   	push   ebx
c00131b7:	83 c2 0d             	add    edx,0xd
c00131ba:	56                   	push   esi
c00131bb:	52                   	push   edx
c00131bc:	51                   	push   ecx
c00131bd:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00131c0:	83 c4 10             	add    esp,0x10
c00131c3:	5a                   	pop    edx
c00131c4:	5b                   	pop    ebx
c00131c5:	5e                   	pop    esi
c00131c6:	c3                   	ret    

c00131c7 <Fs::setcwd(Process*, char*)>:
c00131c7:	55                   	push   ebp
c00131c8:	57                   	push   edi
c00131c9:	56                   	push   esi
c00131ca:	53                   	push   ebx
c00131cb:	81 ec 20 02 00 00    	sub    esp,0x220
c00131d1:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00131d8:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00131de:	57                   	push   edi
c00131df:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00131e6:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00131ea:	56                   	push   esi
c00131eb:	e8 bc fa ff ff       	call   c0012cac <Fs::standardiseFiles(char*, char const*, char const*)>
c00131f0:	89 34 24             	mov    DWORD PTR [esp],esi
c00131f3:	e8 74 d5 fe ff       	call   c000076c <strlen>
c00131f8:	83 c4 10             	add    esp,0x10
c00131fb:	83 f8 02             	cmp    eax,0x2
c00131fe:	77 17                	ja     c0013217 <Fs::setcwd(Process*, char*)+0x50>
c0013200:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013205:	83 e8 41             	sub    eax,0x41
c0013208:	83 f8 19             	cmp    eax,0x19
c001320b:	76 24                	jbe    c0013231 <Fs::setcwd(Process*, char*)+0x6a>
c001320d:	b8 03 00 00 00       	mov    eax,0x3
c0013212:	e9 e0 00 00 00       	jmp    c00132f7 <Fs::setcwd(Process*, char*)+0x130>
c0013217:	83 ec 0c             	sub    esp,0xc
c001321a:	56                   	push   esi
c001321b:	e8 4c d5 fe ff       	call   c000076c <strlen>
c0013220:	83 c4 10             	add    esp,0x10
c0013223:	83 f8 03             	cmp    eax,0x3
c0013226:	75 34                	jne    c001325c <Fs::setcwd(Process*, char*)+0x95>
c0013228:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001322d:	75 2d                	jne    c001325c <Fs::setcwd(Process*, char*)+0x95>
c001322f:	eb cf                	jmp    c0013200 <Fs::setcwd(Process*, char*)+0x39>
c0013231:	8b 14 85 20 f6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd09e0]
c0013238:	b8 05 00 00 00       	mov    eax,0x5
c001323d:	85 d2                	test   edx,edx
c001323f:	0f 84 b2 00 00 00    	je     c00132f7 <Fs::setcwd(Process*, char*)+0x130>
c0013245:	b8 06 00 00 00       	mov    eax,0x6
c001324a:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013251:	0f 85 92 00 00 00    	jne    c00132e9 <Fs::setcwd(Process*, char*)+0x122>
c0013257:	e9 9b 00 00 00       	jmp    c00132f7 <Fs::setcwd(Process*, char*)+0x130>
c001325c:	83 ec 0c             	sub    esp,0xc
c001325f:	68 14 01 00 00       	push   0x114
c0013264:	e8 23 c6 ff ff       	call   c000f88c <malloc>
c0013269:	83 c4 0c             	add    esp,0xc
c001326c:	89 c3                	mov    ebx,eax
c001326e:	55                   	push   ebp
c001326f:	56                   	push   esi
c0013270:	50                   	push   eax
c0013271:	e8 e0 fb ff ff       	call   c0012e56 <File::File(char const*, Process*)>
c0013276:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001327b:	83 c4 0c             	add    esp,0xc
c001327e:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013282:	50                   	push   eax
c0013283:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013287:	50                   	push   eax
c0013288:	53                   	push   ebx
c0013289:	e8 d8 fe ff ff       	call   c0013166 <File::stat(unsigned long long*, bool*)>
c001328e:	83 c4 10             	add    esp,0x10
c0013291:	83 f8 02             	cmp    eax,0x2
c0013294:	74 04                	je     c001329a <Fs::setcwd(Process*, char*)+0xd3>
c0013296:	85 c0                	test   eax,eax
c0013298:	74 1c                	je     c00132b6 <Fs::setcwd(Process*, char*)+0xef>
c001329a:	b8 01 00 00 00       	mov    eax,0x1
c001329f:	85 db                	test   ebx,ebx
c00132a1:	74 54                	je     c00132f7 <Fs::setcwd(Process*, char*)+0x130>
c00132a3:	83 ec 0c             	sub    esp,0xc
c00132a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132a8:	53                   	push   ebx
c00132a9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132ac:	83 c4 10             	add    esp,0x10
c00132af:	b8 01 00 00 00       	mov    eax,0x1
c00132b4:	eb 41                	jmp    c00132f7 <Fs::setcwd(Process*, char*)+0x130>
c00132b6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00132bb:	75 1c                	jne    c00132d9 <Fs::setcwd(Process*, char*)+0x112>
c00132bd:	b8 02 00 00 00       	mov    eax,0x2
c00132c2:	85 db                	test   ebx,ebx
c00132c4:	74 31                	je     c00132f7 <Fs::setcwd(Process*, char*)+0x130>
c00132c6:	83 ec 0c             	sub    esp,0xc
c00132c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132cb:	53                   	push   ebx
c00132cc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132cf:	83 c4 10             	add    esp,0x10
c00132d2:	b8 02 00 00 00       	mov    eax,0x2
c00132d7:	eb 1e                	jmp    c00132f7 <Fs::setcwd(Process*, char*)+0x130>
c00132d9:	85 db                	test   ebx,ebx
c00132db:	74 0c                	je     c00132e9 <Fs::setcwd(Process*, char*)+0x122>
c00132dd:	83 ec 0c             	sub    esp,0xc
c00132e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132e2:	53                   	push   ebx
c00132e3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132e6:	83 c4 10             	add    esp,0x10
c00132e9:	50                   	push   eax
c00132ea:	50                   	push   eax
c00132eb:	56                   	push   esi
c00132ec:	57                   	push   edi
c00132ed:	e8 1a d5 fe ff       	call   c000080c <strcpy>
c00132f2:	83 c4 10             	add    esp,0x10
c00132f5:	31 c0                	xor    eax,eax
c00132f7:	81 c4 1c 02 00 00    	add    esp,0x21c
c00132fd:	5b                   	pop    ebx
c00132fe:	5e                   	pop    esi
c00132ff:	5f                   	pop    edi
c0013300:	5d                   	pop    ebp
c0013301:	c3                   	ret    

c0013302 <Directory::Directory(char const*, Process*)>:
c0013302:	83 ec 0c             	sub    esp,0xc
c0013305:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013309:	83 ec 08             	sub    esp,0x8
c001330c:	6a 00                	push   0x0
c001330e:	50                   	push   eax
c001330f:	e8 9a dd ff ff       	call   c00110ae <UnixFile::UnixFile(int)>
c0013314:	83 c4 10             	add    esp,0x10
c0013317:	ba 34 b4 02 c0       	mov    edx,0xc002b434
c001331c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013320:	89 10                	mov    DWORD PTR [eax],edx
c0013322:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013326:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001332c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013330:	83 c0 0d             	add    eax,0xd
c0013333:	83 ec 04             	sub    esp,0x4
c0013336:	52                   	push   edx
c0013337:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001333b:	50                   	push   eax
c001333c:	e8 6b f9 ff ff       	call   c0012cac <Fs::standardiseFiles(char*, char const*, char const*)>
c0013341:	83 c4 10             	add    esp,0x10
c0013344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013348:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001334b:	8d 50 bf             	lea    edx,[eax-0x41]
c001334e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013352:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001335c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013360:	90                   	nop
c0013361:	83 c4 0c             	add    esp,0xc
c0013364:	c3                   	ret    
c0013365:	90                   	nop

c0013366 <Directory::open()>:
c0013366:	53                   	push   ebx
c0013367:	b8 0b 00 00 00       	mov    eax,0xb
c001336c:	83 ec 08             	sub    esp,0x8
c001336f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013373:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001337a:	80 fa 19             	cmp    dl,0x19
c001337d:	77 3d                	ja     c00133bc <Directory::open()+0x56>
c001337f:	8b 14 95 20 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd09e0]
c0013386:	85 d2                	test   edx,edx
c0013388:	74 32                	je     c00133bc <Directory::open()+0x56>
c001338a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013390:	85 d2                	test   edx,edx
c0013392:	74 28                	je     c00133bc <Directory::open()+0x56>
c0013394:	b8 06 00 00 00       	mov    eax,0x6
c0013399:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001339d:	75 1d                	jne    c00133bc <Directory::open()+0x56>
c001339f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00133a5:	50                   	push   eax
c00133a6:	8b 02                	mov    eax,DWORD PTR [edx]
c00133a8:	51                   	push   ecx
c00133a9:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00133ac:	51                   	push   ecx
c00133ad:	52                   	push   edx
c00133ae:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00133b1:	83 c4 10             	add    esp,0x10
c00133b4:	85 c0                	test   eax,eax
c00133b6:	75 04                	jne    c00133bc <Directory::open()+0x56>
c00133b8:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00133bc:	83 c4 08             	add    esp,0x8
c00133bf:	5b                   	pop    ebx
c00133c0:	c3                   	ret    
c00133c1:	90                   	nop

c00133c2 <Directory::close()>:
c00133c2:	53                   	push   ebx
c00133c3:	b8 0b 00 00 00       	mov    eax,0xb
c00133c8:	83 ec 08             	sub    esp,0x8
c00133cb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133cf:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133d6:	80 fa 19             	cmp    dl,0x19
c00133d9:	77 41                	ja     c001341c <Directory::close()+0x5a>
c00133db:	8b 1c 95 20 f6 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd09e0]
c00133e2:	85 db                	test   ebx,ebx
c00133e4:	74 36                	je     c001341c <Directory::close()+0x5a>
c00133e6:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00133ed:	74 2d                	je     c001341c <Directory::close()+0x5a>
c00133ef:	b8 05 00 00 00       	mov    eax,0x5
c00133f4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00133f8:	74 22                	je     c001341c <Directory::close()+0x5a>
c00133fa:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00133fe:	8b 04 95 20 f6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd09e0]
c0013405:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001340b:	53                   	push   ebx
c001340c:	53                   	push   ebx
c001340d:	8b 10                	mov    edx,DWORD PTR [eax]
c001340f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013415:	50                   	push   eax
c0013416:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013419:	83 c4 10             	add    esp,0x10
c001341c:	83 c4 08             	add    esp,0x8
c001341f:	5b                   	pop    ebx
c0013420:	c3                   	ret    
c0013421:	90                   	nop

c0013422 <Directory::unlink()>:
c0013422:	83 ec 0c             	sub    esp,0xc
c0013425:	b8 0b 00 00 00       	mov    eax,0xb
c001342a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001342e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013435:	80 f9 19             	cmp    cl,0x19
c0013438:	77 2f                	ja     c0013469 <Directory::unlink()+0x47>
c001343a:	8b 0c 8d 20 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd09e0]
c0013441:	85 c9                	test   ecx,ecx
c0013443:	74 24                	je     c0013469 <Directory::unlink()+0x47>
c0013445:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001344b:	85 c9                	test   ecx,ecx
c001344d:	74 1a                	je     c0013469 <Directory::unlink()+0x47>
c001344f:	b8 06 00 00 00       	mov    eax,0x6
c0013454:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013458:	75 0f                	jne    c0013469 <Directory::unlink()+0x47>
c001345a:	83 c2 0d             	add    edx,0xd
c001345d:	50                   	push   eax
c001345e:	50                   	push   eax
c001345f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013461:	52                   	push   edx
c0013462:	51                   	push   ecx
c0013463:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013466:	83 c4 10             	add    esp,0x10
c0013469:	83 c4 0c             	add    esp,0xc
c001346c:	c3                   	ret    
c001346d:	90                   	nop

c001346e <Directory::rename(char const*)>:
c001346e:	83 ec 0c             	sub    esp,0xc
c0013471:	b8 0b 00 00 00       	mov    eax,0xb
c0013476:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001347a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013481:	80 f9 19             	cmp    cl,0x19
c0013484:	77 32                	ja     c00134b8 <Directory::rename(char const*)+0x4a>
c0013486:	8b 0c 8d 20 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd09e0]
c001348d:	85 c9                	test   ecx,ecx
c001348f:	74 27                	je     c00134b8 <Directory::rename(char const*)+0x4a>
c0013491:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013497:	85 c9                	test   ecx,ecx
c0013499:	74 1d                	je     c00134b8 <Directory::rename(char const*)+0x4a>
c001349b:	b8 06 00 00 00       	mov    eax,0x6
c00134a0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00134a4:	75 12                	jne    c00134b8 <Directory::rename(char const*)+0x4a>
c00134a6:	83 c2 0d             	add    edx,0xd
c00134a9:	50                   	push   eax
c00134aa:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00134b0:	52                   	push   edx
c00134b1:	51                   	push   ecx
c00134b2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00134b5:	83 c4 10             	add    esp,0x10
c00134b8:	83 c4 0c             	add    esp,0xc
c00134bb:	c3                   	ret    

c00134bc <Directory::exists()>:
c00134bc:	83 ec 0c             	sub    esp,0xc
c00134bf:	31 c0                	xor    eax,eax
c00134c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134c5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134cc:	80 f9 19             	cmp    cl,0x19
c00134cf:	77 24                	ja     c00134f5 <Directory::exists()+0x39>
c00134d1:	8b 0c 8d 20 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd09e0]
c00134d8:	85 c9                	test   ecx,ecx
c00134da:	74 19                	je     c00134f5 <Directory::exists()+0x39>
c00134dc:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00134e2:	85 c9                	test   ecx,ecx
c00134e4:	74 0f                	je     c00134f5 <Directory::exists()+0x39>
c00134e6:	83 c2 0d             	add    edx,0xd
c00134e9:	50                   	push   eax
c00134ea:	50                   	push   eax
c00134eb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134ed:	52                   	push   edx
c00134ee:	51                   	push   ecx
c00134ef:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00134f2:	83 c4 10             	add    esp,0x10
c00134f5:	83 c4 0c             	add    esp,0xc
c00134f8:	c3                   	ret    
c00134f9:	90                   	nop

c00134fa <Directory::read(dirent*)>:
c00134fa:	83 ec 1c             	sub    esp,0x1c
c00134fd:	b8 0b 00 00 00       	mov    eax,0xb
c0013502:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013506:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001350d:	80 fa 19             	cmp    dl,0x19
c0013510:	77 30                	ja     c0013542 <Directory::read(dirent*)+0x48>
c0013512:	8b 14 95 20 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd09e0]
c0013519:	85 d2                	test   edx,edx
c001351b:	74 25                	je     c0013542 <Directory::read(dirent*)+0x48>
c001351d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013524:	74 1c                	je     c0013542 <Directory::read(dirent*)+0x48>
c0013526:	83 ec 0c             	sub    esp,0xc
c0013529:	8b 01                	mov    eax,DWORD PTR [ecx]
c001352b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001352f:	52                   	push   edx
c0013530:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013534:	6a 00                	push   0x0
c0013536:	68 10 01 00 00       	push   0x110
c001353b:	51                   	push   ecx
c001353c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001353f:	83 c4 20             	add    esp,0x20
c0013542:	83 c4 1c             	add    esp,0x1c
c0013545:	c3                   	ret    

c0013546 <Directory::create()>:
c0013546:	83 ec 0c             	sub    esp,0xc
c0013549:	b8 0b 00 00 00       	mov    eax,0xb
c001354e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013552:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013559:	80 f9 19             	cmp    cl,0x19
c001355c:	77 2f                	ja     c001358d <Directory::create()+0x47>
c001355e:	8b 0c 8d 20 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd09e0]
c0013565:	85 c9                	test   ecx,ecx
c0013567:	74 24                	je     c001358d <Directory::create()+0x47>
c0013569:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001356f:	85 c9                	test   ecx,ecx
c0013571:	74 1a                	je     c001358d <Directory::create()+0x47>
c0013573:	b8 06 00 00 00       	mov    eax,0x6
c0013578:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001357c:	75 0f                	jne    c001358d <Directory::create()+0x47>
c001357e:	83 c2 0d             	add    edx,0xd
c0013581:	50                   	push   eax
c0013582:	50                   	push   eax
c0013583:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013585:	52                   	push   edx
c0013586:	51                   	push   ecx
c0013587:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001358a:	83 c4 10             	add    esp,0x10
c001358d:	83 c4 0c             	add    esp,0xc
c0013590:	c3                   	ret    
c0013591:	90                   	nop

c0013592 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013592:	b8 0a 00 00 00       	mov    eax,0xa
c0013597:	c3                   	ret    

c0013598 <Bus::Bus(char const*)>:
c0013598:	83 ec 0c             	sub    esp,0xc
c001359b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001359f:	83 ec 08             	sub    esp,0x8
c00135a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135a6:	50                   	push   eax
c00135a7:	e8 88 09 00 00       	call   c0013f34 <Device::Device(char const*)>
c00135ac:	83 c4 10             	add    esp,0x10
c00135af:	ba 50 b4 02 c0       	mov    edx,0xc002b450
c00135b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135b8:	89 10                	mov    DWORD PTR [eax],edx
c00135ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135be:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00135c8:	90                   	nop
c00135c9:	83 c4 0c             	add    esp,0xc
c00135cc:	c3                   	ret    
c00135cd:	90                   	nop

c00135ce <Bus::~Bus()>:
c00135ce:	83 ec 0c             	sub    esp,0xc
c00135d1:	ba 50 b4 02 c0       	mov    edx,0xc002b450
c00135d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135da:	89 10                	mov    DWORD PTR [eax],edx
c00135dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135e0:	83 ec 0c             	sub    esp,0xc
c00135e3:	50                   	push   eax
c00135e4:	e8 15 06 00 00       	call   c0013bfe <Device::~Device()>
c00135e9:	83 c4 10             	add    esp,0x10
c00135ec:	90                   	nop
c00135ed:	83 c4 0c             	add    esp,0xc
c00135f0:	c3                   	ret    
c00135f1:	90                   	nop

c00135f2 <Bus::~Bus()>:
c00135f2:	83 ec 0c             	sub    esp,0xc
c00135f5:	83 ec 0c             	sub    esp,0xc
c00135f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135fc:	e8 cd ff ff ff       	call   c00135ce <Bus::~Bus()>
c0013601:	83 c4 10             	add    esp,0x10
c0013604:	83 ec 08             	sub    esp,0x8
c0013607:	68 58 01 00 00       	push   0x158
c001360c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013610:	e8 02 f2 ff ff       	call   c0012817 <operator delete(void*, unsigned long)>
c0013615:	83 c4 10             	add    esp,0x10
c0013618:	83 c4 0c             	add    esp,0xc
c001361b:	c3                   	ret    

c001361c <Buzzer::Buzzer(char const*)>:
c001361c:	83 ec 0c             	sub    esp,0xc
c001361f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013623:	83 ec 08             	sub    esp,0x8
c0013626:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001362a:	50                   	push   eax
c001362b:	e8 04 09 00 00       	call   c0013f34 <Device::Device(char const*)>
c0013630:	83 c4 10             	add    esp,0x10
c0013633:	ba 7c b4 02 c0       	mov    edx,0xc002b47c
c0013638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001363c:	89 10                	mov    DWORD PTR [eax],edx
c001363e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013642:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001364c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013650:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c001365a:	90                   	nop
c001365b:	83 c4 0c             	add    esp,0xc
c001365e:	c3                   	ret    
c001365f:	90                   	nop

c0013660 <Buzzer::~Buzzer()>:
c0013660:	83 ec 0c             	sub    esp,0xc
c0013663:	ba 7c b4 02 c0       	mov    edx,0xc002b47c
c0013668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001366c:	89 10                	mov    DWORD PTR [eax],edx
c001366e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013672:	83 ec 0c             	sub    esp,0xc
c0013675:	50                   	push   eax
c0013676:	e8 83 05 00 00       	call   c0013bfe <Device::~Device()>
c001367b:	83 c4 10             	add    esp,0x10
c001367e:	90                   	nop
c001367f:	83 c4 0c             	add    esp,0xc
c0013682:	c3                   	ret    
c0013683:	90                   	nop

c0013684 <Buzzer::~Buzzer()>:
c0013684:	83 ec 0c             	sub    esp,0xc
c0013687:	83 ec 0c             	sub    esp,0xc
c001368a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001368e:	e8 cd ff ff ff       	call   c0013660 <Buzzer::~Buzzer()>
c0013693:	83 c4 10             	add    esp,0x10
c0013696:	83 ec 08             	sub    esp,0x8
c0013699:	68 5c 01 00 00       	push   0x15c
c001369e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136a2:	e8 70 f1 ff ff       	call   c0012817 <operator delete(void*, unsigned long)>
c00136a7:	83 c4 10             	add    esp,0x10
c00136aa:	83 c4 0c             	add    esp,0xc
c00136ad:	c3                   	ret    

c00136ae <Buzzer::stop()>:
c00136ae:	83 ec 14             	sub    esp,0x14
c00136b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00136b5:	8b 10                	mov    edx,DWORD PTR [eax]
c00136b7:	6a 00                	push   0x0
c00136b9:	50                   	push   eax
c00136ba:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00136bd:	83 c4 1c             	add    esp,0x1c
c00136c0:	c3                   	ret    

c00136c1 <beepThread(void*)>:
c00136c1:	53                   	push   ebx
c00136c2:	83 ec 08             	sub    esp,0x8
c00136c5:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c00136ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136ce:	48                   	dec    eax
c00136cf:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c00136d4:	75 01                	jne    c00136d7 <beepThread(void*)+0x16>
c00136d6:	fb                   	sti    
c00136d7:	50                   	push   eax
c00136d8:	50                   	push   eax
c00136d9:	b8 40 42 0f 00       	mov    eax,0xf4240
c00136de:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00136e4:	52                   	push   edx
c00136e5:	50                   	push   eax
c00136e6:	e8 f8 ac 00 00       	call   c001e3e3 <nanoSleep(unsigned long long)>
c00136eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136ee:	e8 bb ff ff ff       	call   c00136ae <Buzzer::stop()>
c00136f3:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00136fb:	83 c4 18             	add    esp,0x18
c00136fe:	5b                   	pop    ebx
c00136ff:	e9 db ab 00 00       	jmp    c001e2df <blockTask(TaskState)>

c0013704 <Buzzer::beep(int, int, bool)>:
c0013704:	57                   	push   edi
c0013705:	56                   	push   esi
c0013706:	53                   	push   ebx
c0013707:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001370b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001370f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013713:	52                   	push   edx
c0013714:	52                   	push   edx
c0013715:	8b 06                	mov    eax,DWORD PTR [esi]
c0013717:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001371b:	56                   	push   esi
c001371c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001371f:	83 c4 10             	add    esp,0x10
c0013722:	89 f8                	mov    eax,edi
c0013724:	84 c0                	test   al,al
c0013726:	74 1f                	je     c0013747 <Buzzer::beep(int, int, bool)+0x43>
c0013728:	50                   	push   eax
c0013729:	50                   	push   eax
c001372a:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013730:	99                   	cdq    
c0013731:	52                   	push   edx
c0013732:	50                   	push   eax
c0013733:	e8 ab ac 00 00       	call   c001e3e3 <nanoSleep(unsigned long long)>
c0013738:	83 c4 10             	add    esp,0x10
c001373b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001373f:	5b                   	pop    ebx
c0013740:	5e                   	pop    esi
c0013741:	5f                   	pop    edi
c0013742:	e9 67 ff ff ff       	jmp    c00136ae <Buzzer::stop()>
c0013747:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001374d:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0013752:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001375a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001375e:	c7 44 24 14 c1 36 01 c0 	mov    DWORD PTR [esp+0x14],0xc00136c1
c0013766:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001376a:	5b                   	pop    ebx
c001376b:	5e                   	pop    esi
c001376c:	5f                   	pop    edi
c001376d:	e9 2a a7 00 00       	jmp    c001de9c <Process::createThread(void (*)(void*), void*, int)>

c0013772 <User::loadClockSettings(int)>:
c0013772:	53                   	push   ebx
c0013773:	83 ec 14             	sub    esp,0x14
c0013776:	68 14 01 00 00       	push   0x114
c001377b:	e8 0c c1 ff ff       	call   c000f88c <malloc>
c0013780:	83 c4 0c             	add    esp,0xc
c0013783:	89 c3                	mov    ebx,eax
c0013785:	ff 35 70 25 03 c0    	push   DWORD PTR ds:0xc0032570
c001378b:	68 a4 b4 02 c0       	push   0xc002b4a4
c0013790:	50                   	push   eax
c0013791:	e8 c0 f6 ff ff       	call   c0012e56 <File::File(char const*, Process*)>
c0013796:	58                   	pop    eax
c0013797:	5a                   	pop    edx
c0013798:	6a 01                	push   0x1
c001379a:	53                   	push   ebx
c001379b:	e8 1a f7 ff ff       	call   c0012eba <File::open(FileOpenMode)>
c00137a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137a3:	e8 70 f7 ff ff       	call   c0012f18 <File::close()>
c00137a8:	83 c4 10             	add    esp,0x10
c00137ab:	85 db                	test   ebx,ebx
c00137ad:	74 0f                	je     c00137be <User::loadClockSettings(int)+0x4c>
c00137af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137b1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00137b5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00137b8:	83 c4 08             	add    esp,0x8
c00137bb:	5b                   	pop    ebx
c00137bc:	ff e0                	jmp    eax
c00137be:	83 c4 08             	add    esp,0x8
c00137c1:	5b                   	pop    ebx
c00137c2:	c3                   	ret    
c00137c3:	90                   	nop

c00137c4 <Clock::Clock(char const*)>:
c00137c4:	83 ec 0c             	sub    esp,0xc
c00137c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137cb:	83 ec 08             	sub    esp,0x8
c00137ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137d2:	50                   	push   eax
c00137d3:	e8 5c 07 00 00       	call   c0013f34 <Device::Device(char const*)>
c00137d8:	83 c4 10             	add    esp,0x10
c00137db:	ba cc b4 02 c0       	mov    edx,0xc002b4cc
c00137e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137e4:	89 10                	mov    DWORD PTR [eax],edx
c00137e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ea:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00137f4:	90                   	nop
c00137f5:	83 c4 0c             	add    esp,0xc
c00137f8:	c3                   	ret    
c00137f9:	90                   	nop

c00137fa <Clock::~Clock()>:
c00137fa:	83 ec 0c             	sub    esp,0xc
c00137fd:	ba cc b4 02 c0       	mov    edx,0xc002b4cc
c0013802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013806:	89 10                	mov    DWORD PTR [eax],edx
c0013808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001380c:	83 ec 0c             	sub    esp,0xc
c001380f:	50                   	push   eax
c0013810:	e8 e9 03 00 00       	call   c0013bfe <Device::~Device()>
c0013815:	83 c4 10             	add    esp,0x10
c0013818:	90                   	nop
c0013819:	83 c4 0c             	add    esp,0xc
c001381c:	c3                   	ret    
c001381d:	90                   	nop

c001381e <Clock::~Clock()>:
c001381e:	83 ec 0c             	sub    esp,0xc
c0013821:	83 ec 0c             	sub    esp,0xc
c0013824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013828:	e8 cd ff ff ff       	call   c00137fa <Clock::~Clock()>
c001382d:	83 c4 10             	add    esp,0x10
c0013830:	83 ec 08             	sub    esp,0x8
c0013833:	68 58 01 00 00       	push   0x158
c0013838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001383c:	e8 d6 ef ff ff       	call   c0012817 <operator delete(void*, unsigned long)>
c0013841:	83 c4 10             	add    esp,0x10
c0013844:	83 c4 0c             	add    esp,0xc
c0013847:	c3                   	ret    

c0013848 <Clock::timeInSecondsLocal()>:
c0013848:	53                   	push   ebx
c0013849:	83 ec 14             	sub    esp,0x14
c001384c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013850:	8b 10                	mov    edx,DWORD PTR [eax]
c0013852:	50                   	push   eax
c0013853:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013856:	0f b6 0d 9c f1 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f19c
c001385d:	03 0d a0 f1 02 c0    	add    ecx,DWORD PTR ds:0xc002f1a0
c0013863:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013869:	89 cb                	mov    ebx,ecx
c001386b:	c1 fb 1f             	sar    ebx,0x1f
c001386e:	01 c8                	add    eax,ecx
c0013870:	11 da                	adc    edx,ebx
c0013872:	83 c4 10             	add    esp,0x10
c0013875:	31 c9                	xor    ecx,ecx
c0013877:	80 3d 9d f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f19d,0x0
c001387e:	74 05                	je     c0013885 <Clock::timeInSecondsLocal()+0x3d>
c0013880:	b9 08 07 00 00       	mov    ecx,0x708
c0013885:	31 db                	xor    ebx,ebx
c0013887:	01 c8                	add    eax,ecx
c0013889:	11 da                	adc    edx,ebx
c001388b:	83 c4 08             	add    esp,0x8
c001388e:	5b                   	pop    ebx
c001388f:	c3                   	ret    

c0013890 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013890:	57                   	push   edi
c0013891:	56                   	push   esi
c0013892:	53                   	push   ebx
c0013893:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013897:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001389b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001389d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00138a1:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00138a4:	0f b6 05 9c f1 02 c0 	movzx  eax,BYTE PTR ds:0xc002f19c
c00138ab:	03 05 a0 f1 02 c0    	add    eax,DWORD PTR ds:0xc002f1a0
c00138b1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00138b7:	99                   	cdq    
c00138b8:	29 c6                	sub    esi,eax
c00138ba:	19 d7                	sbb    edi,edx
c00138bc:	89 f0                	mov    eax,esi
c00138be:	89 fa                	mov    edx,edi
c00138c0:	31 f6                	xor    esi,esi
c00138c2:	80 3d 9d f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f19d,0x0
c00138c9:	74 05                	je     c00138d0 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00138cb:	be 08 07 00 00       	mov    esi,0x708
c00138d0:	31 ff                	xor    edi,edi
c00138d2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00138d6:	29 f0                	sub    eax,esi
c00138d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138dc:	19 fa                	sbb    edx,edi
c00138de:	89 d8                	mov    eax,ebx
c00138e0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00138e4:	5b                   	pop    ebx
c00138e5:	5e                   	pop    esi
c00138e6:	5f                   	pop    edi
c00138e7:	ff e0                	jmp    eax

c00138e9 <datetimeToSeconds(datetime_t)>:
c00138e9:	55                   	push   ebp
c00138ea:	57                   	push   edi
c00138eb:	56                   	push   esi
c00138ec:	53                   	push   ebx
c00138ed:	83 ec 14             	sub    esp,0x14
c00138f0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00138f4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00138f8:	89 d3                	mov    ebx,edx
c00138fa:	0f b6 c6             	movzx  eax,dh
c00138fd:	c1 eb 10             	shr    ebx,0x10
c0013900:	48                   	dec    eax
c0013901:	66 81 eb 6c 07       	sub    bx,0x76c
c0013906:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001390a:	0f b6 f5             	movzx  esi,ch
c001390d:	89 cf                	mov    edi,ecx
c001390f:	6b f6 3c             	imul   esi,esi,0x3c
c0013912:	c1 ef 10             	shr    edi,0x10
c0013915:	0f b6 c9             	movzx  ecx,cl
c0013918:	89 f8                	mov    eax,edi
c001391a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013920:	0f b6 f8             	movzx  edi,al
c0013923:	0f b6 d2             	movzx  edx,dl
c0013926:	01 fe                	add    esi,edi
c0013928:	01 f1                	add    ecx,esi
c001392a:	0f b7 f3             	movzx  esi,bx
c001392d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013931:	c1 f9 1f             	sar    ecx,0x1f
c0013934:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013939:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001393d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013942:	8b 0c 8d 00 b5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4b00]
c0013949:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001394d:	76 29                	jbe    c0013978 <datetimeToSeconds(datetime_t)+0x8f>
c001394f:	f6 c3 03             	test   bl,0x3
c0013952:	75 24                	jne    c0013978 <datetimeToSeconds(datetime_t)+0x8f>
c0013954:	31 d2                	xor    edx,edx
c0013956:	bf 64 00 00 00       	mov    edi,0x64
c001395b:	89 d8                	mov    eax,ebx
c001395d:	66 f7 f7             	div    di
c0013960:	66 85 d2             	test   dx,dx
c0013963:	75 12                	jne    c0013977 <datetimeToSeconds(datetime_t)+0x8e>
c0013965:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001396b:	bf 90 01 00 00       	mov    edi,0x190
c0013970:	99                   	cdq    
c0013971:	f7 ff                	idiv   edi
c0013973:	85 d2                	test   edx,edx
c0013975:	75 01                	jne    c0013978 <datetimeToSeconds(datetime_t)+0x8f>
c0013977:	41                   	inc    ecx
c0013978:	66 83 fb 46          	cmp    bx,0x46
c001397c:	76 45                	jbe    c00139c3 <datetimeToSeconds(datetime_t)+0xda>
c001397e:	bb 46 00 00 00       	mov    ebx,0x46
c0013983:	bf 64 00 00 00       	mov    edi,0x64
c0013988:	bd 90 01 00 00       	mov    ebp,0x190
c001398d:	b8 6d 01 00 00       	mov    eax,0x16d
c0013992:	f6 c3 03             	test   bl,0x3
c0013995:	75 23                	jne    c00139ba <datetimeToSeconds(datetime_t)+0xd1>
c0013997:	89 d8                	mov    eax,ebx
c0013999:	99                   	cdq    
c001399a:	f7 ff                	idiv   edi
c001399c:	b8 6e 01 00 00       	mov    eax,0x16e
c00139a1:	85 d2                	test   edx,edx
c00139a3:	75 15                	jne    c00139ba <datetimeToSeconds(datetime_t)+0xd1>
c00139a5:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00139ab:	99                   	cdq    
c00139ac:	f7 fd                	idiv   ebp
c00139ae:	83 fa 01             	cmp    edx,0x1
c00139b1:	19 c0                	sbb    eax,eax
c00139b3:	f7 d0                	not    eax
c00139b5:	05 6e 01 00 00       	add    eax,0x16e
c00139ba:	01 c1                	add    ecx,eax
c00139bc:	43                   	inc    ebx
c00139bd:	39 f3                	cmp    ebx,esi
c00139bf:	7c cc                	jl     c001398d <datetimeToSeconds(datetime_t)+0xa4>
c00139c1:	eb 35                	jmp    c00139f8 <datetimeToSeconds(datetime_t)+0x10f>
c00139c3:	74 33                	je     c00139f8 <datetimeToSeconds(datetime_t)+0x10f>
c00139c5:	b8 45 00 00 00       	mov    eax,0x45
c00139ca:	89 c2                	mov    edx,eax
c00139cc:	83 e2 03             	and    edx,0x3
c00139cf:	39 f0                	cmp    eax,esi
c00139d1:	7e 0f                	jle    c00139e2 <datetimeToSeconds(datetime_t)+0xf9>
c00139d3:	83 fa 01             	cmp    edx,0x1
c00139d6:	19 d2                	sbb    edx,edx
c00139d8:	48                   	dec    eax
c00139d9:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00139e0:	eb e8                	jmp    c00139ca <datetimeToSeconds(datetime_t)+0xe1>
c00139e2:	b8 6d 01 00 00       	mov    eax,0x16d
c00139e7:	85 d2                	test   edx,edx
c00139e9:	75 0b                	jne    c00139f6 <datetimeToSeconds(datetime_t)+0x10d>
c00139eb:	66 83 fb 01          	cmp    bx,0x1
c00139ef:	19 c0                	sbb    eax,eax
c00139f1:	05 6e 01 00 00       	add    eax,0x16e
c00139f6:	29 c1                	sub    ecx,eax
c00139f8:	b8 80 51 01 00       	mov    eax,0x15180
c00139fd:	f7 e9                	imul   ecx
c00139ff:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013a03:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013a07:	83 c4 14             	add    esp,0x14
c0013a0a:	5b                   	pop    ebx
c0013a0b:	5e                   	pop    esi
c0013a0c:	5f                   	pop    edi
c0013a0d:	5d                   	pop    ebp
c0013a0e:	c3                   	ret    
c0013a0f:	90                   	nop

c0013a10 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013a10:	57                   	push   edi
c0013a11:	56                   	push   esi
c0013a12:	53                   	push   ebx
c0013a13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013a17:	8b 06                	mov    eax,DWORD PTR [esi]
c0013a19:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013a1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a24:	e8 c0 fe ff ff       	call   c00138e9 <datetimeToSeconds(datetime_t)>
c0013a29:	59                   	pop    ecx
c0013a2a:	0f b6 0d 9c f1 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f19c
c0013a31:	5b                   	pop    ebx
c0013a32:	03 0d a0 f1 02 c0    	add    ecx,DWORD PTR ds:0xc002f1a0
c0013a38:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a3e:	89 cb                	mov    ebx,ecx
c0013a40:	c1 fb 1f             	sar    ebx,0x1f
c0013a43:	29 c8                	sub    eax,ecx
c0013a45:	19 da                	sbb    edx,ebx
c0013a47:	31 c9                	xor    ecx,ecx
c0013a49:	80 3d 9d f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f19d,0x0
c0013a50:	74 05                	je     c0013a57 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013a52:	b9 08 07 00 00       	mov    ecx,0x708
c0013a57:	31 db                	xor    ebx,ebx
c0013a59:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013a5d:	29 c8                	sub    eax,ecx
c0013a5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a63:	19 da                	sbb    edx,ebx
c0013a65:	89 f8                	mov    eax,edi
c0013a67:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013a6b:	5b                   	pop    ebx
c0013a6c:	5e                   	pop    esi
c0013a6d:	5f                   	pop    edi
c0013a6e:	ff e0                	jmp    eax

c0013a70 <secondsToDatetime(unsigned long long)>:
c0013a70:	55                   	push   ebp
c0013a71:	57                   	push   edi
c0013a72:	56                   	push   esi
c0013a73:	53                   	push   ebx
c0013a74:	83 ec 1c             	sub    esp,0x1c
c0013a77:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a7b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013a7f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013a83:	6a 00                	push   0x0
c0013a85:	68 80 51 01 00       	push   0x15180
c0013a8a:	55                   	push   ebp
c0013a8b:	57                   	push   edi
c0013a8c:	e8 93 37 01 00       	call   c0027224 <__udivdi3>
c0013a91:	83 c4 10             	add    esp,0x10
c0013a94:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013a9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a9e:	6a 00                	push   0x0
c0013aa0:	68 80 51 01 00       	push   0x15180
c0013aa5:	55                   	push   ebp
c0013aa6:	57                   	push   edi
c0013aa7:	bf 10 0e 00 00       	mov    edi,0xe10
c0013aac:	e8 73 38 01 00       	call   c0027324 <__umoddi3>
c0013ab1:	83 c4 10             	add    esp,0x10
c0013ab4:	99                   	cdq    
c0013ab5:	f7 ff                	idiv   edi
c0013ab7:	bf 3c 00 00 00       	mov    edi,0x3c
c0013abc:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013abf:	89 d0                	mov    eax,edx
c0013ac1:	99                   	cdq    
c0013ac2:	f7 ff                	idiv   edi
c0013ac4:	85 db                	test   ebx,ebx
c0013ac6:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013ac9:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013acc:	79 11                	jns    c0013adf <secondsToDatetime(unsigned long long)+0x6f>
c0013ace:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013ad2:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013ad8:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013add:	eb 07                	jmp    c0013ae6 <secondsToDatetime(unsigned long long)+0x76>
c0013adf:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ae4:	89 d8                	mov    eax,ebx
c0013ae6:	bf b4 05 00 00       	mov    edi,0x5b4
c0013aeb:	99                   	cdq    
c0013aec:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013af1:	f7 f9                	idiv   ecx
c0013af3:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013af8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013afc:	31 d2                	xor    edx,edx
c0013afe:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013b06:	01 c3                	add    ebx,eax
c0013b08:	89 d8                	mov    eax,ebx
c0013b0a:	f7 f1                	div    ecx
c0013b0c:	31 d2                	xor    edx,edx
c0013b0e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013b11:	89 d8                	mov    eax,ebx
c0013b13:	f7 f7                	div    edi
c0013b15:	31 d2                	xor    edx,edx
c0013b17:	29 c1                	sub    ecx,eax
c0013b19:	89 d8                	mov    eax,ebx
c0013b1b:	f7 f5                	div    ebp
c0013b1d:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013b22:	29 c1                	sub    ecx,eax
c0013b24:	31 d2                	xor    edx,edx
c0013b26:	89 c8                	mov    eax,ecx
c0013b28:	f7 f5                	div    ebp
c0013b2a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013b2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b33:	31 d2                	xor    edx,edx
c0013b35:	89 c8                	mov    eax,ecx
c0013b37:	f7 f5                	div    ebp
c0013b39:	31 d2                	xor    edx,edx
c0013b3b:	01 c3                	add    ebx,eax
c0013b3d:	89 c8                	mov    eax,ecx
c0013b3f:	f7 f7                	div    edi
c0013b41:	bf 99 00 00 00       	mov    edi,0x99
c0013b46:	29 c3                	sub    ebx,eax
c0013b48:	31 d2                	xor    edx,edx
c0013b4a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013b52:	29 c3                	sub    ebx,eax
c0013b54:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013b57:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013b5a:	bb 05 00 00 00       	mov    ebx,0x5
c0013b5f:	83 c1 02             	add    ecx,0x2
c0013b62:	89 c8                	mov    eax,ecx
c0013b64:	f7 f7                	div    edi
c0013b66:	31 d2                	xor    edx,edx
c0013b68:	89 c7                	mov    edi,eax
c0013b6a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013b70:	83 c0 02             	add    eax,0x2
c0013b73:	f7 f3                	div    ebx
c0013b75:	89 eb                	mov    ebx,ebp
c0013b77:	29 c3                	sub    ebx,eax
c0013b79:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013b7f:	88 1e                	mov    BYTE PTR [esi],bl
c0013b81:	19 c0                	sbb    eax,eax
c0013b83:	31 d2                	xor    edx,edx
c0013b85:	83 e0 0c             	and    eax,0xc
c0013b88:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013b8c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013b94:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013b98:	83 f9 01             	cmp    ecx,0x1
c0013b9b:	0f 96 c2             	setbe  dl
c0013b9e:	41                   	inc    ecx
c0013b9f:	01 d0                	add    eax,edx
c0013ba1:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013ba4:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013ba8:	83 c4 1c             	add    esp,0x1c
c0013bab:	89 f0                	mov    eax,esi
c0013bad:	5b                   	pop    ebx
c0013bae:	5e                   	pop    esi
c0013baf:	5f                   	pop    edi
c0013bb0:	5d                   	pop    ebp
c0013bb1:	c2 04 00             	ret    0x4

c0013bb4 <Clock::timeInDatetimeLocal()>:
c0013bb4:	53                   	push   ebx
c0013bb5:	83 ec 14             	sub    esp,0x14
c0013bb8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bbc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013bc0:	e8 83 fc ff ff       	call   c0013848 <Clock::timeInSecondsLocal()>
c0013bc5:	83 c4 0c             	add    esp,0xc
c0013bc8:	52                   	push   edx
c0013bc9:	50                   	push   eax
c0013bca:	53                   	push   ebx
c0013bcb:	e8 a0 fe ff ff       	call   c0013a70 <secondsToDatetime(unsigned long long)>
c0013bd0:	89 d8                	mov    eax,ebx
c0013bd2:	83 c4 14             	add    esp,0x14
c0013bd5:	5b                   	pop    ebx
c0013bd6:	c2 04 00             	ret    0x4
c0013bd9:	90                   	nop

c0013bda <Device::hibernate()>:
c0013bda:	c3                   	ret    
c0013bdb:	90                   	nop

c0013bdc <Device::wake()>:
c0013bdc:	c3                   	ret    
c0013bdd:	90                   	nop

c0013bde <Device::detect()>:
c0013bde:	c3                   	ret    
c0013bdf:	90                   	nop

c0013be0 <Device::disableLegacy()>:
c0013be0:	c3                   	ret    
c0013be1:	90                   	nop

c0013be2 <Device::powerSaving(PowerSavingLevel)>:
c0013be2:	c3                   	ret    
c0013be3:	90                   	nop

c0013be4 <DriverlessDevice::close(int, int, void*)>:
c0013be4:	31 c0                	xor    eax,eax
c0013be6:	c3                   	ret    
c0013be7:	90                   	nop

c0013be8 <DriverlessDevice::detect()>:
c0013be8:	c3                   	ret    
c0013be9:	90                   	nop

c0013bea <DriverlessDevice::open(int, int, void*)>:
c0013bea:	83 ec 18             	sub    esp,0x18
c0013bed:	68 30 b5 02 c0       	push   0xc002b530
c0013bf2:	e8 36 67 00 00       	call   c001a32d <Krnl::panic(char const*)>
c0013bf7:	83 c8 ff             	or     eax,0xffffffff
c0013bfa:	83 c4 1c             	add    esp,0x1c
c0013bfd:	c3                   	ret    

c0013bfe <Device::~Device()>:
c0013bfe:	ba 90 b5 02 c0       	mov    edx,0xc002b590
c0013c03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c07:	89 10                	mov    DWORD PTR [eax],edx
c0013c09:	90                   	nop
c0013c0a:	c3                   	ret    
c0013c0b:	90                   	nop

c0013c0c <Device::~Device()>:
c0013c0c:	83 ec 0c             	sub    esp,0xc
c0013c0f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013c13:	e8 e6 ff ff ff       	call   c0013bfe <Device::~Device()>
c0013c18:	83 c4 04             	add    esp,0x4
c0013c1b:	83 ec 08             	sub    esp,0x8
c0013c1e:	68 58 01 00 00       	push   0x158
c0013c23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c27:	e8 eb eb ff ff       	call   c0012817 <operator delete(void*, unsigned long)>
c0013c2c:	83 c4 10             	add    esp,0x10
c0013c2f:	83 c4 0c             	add    esp,0xc
c0013c32:	c3                   	ret    
c0013c33:	90                   	nop

c0013c34 <Device::findAndLoadDriver()>:
c0013c34:	c7 44 24 04 4e b5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b54e
c0013c3c:	e9 b6 ec ff ff       	jmp    c00128f7 <Dbg::kprintf(char const*, ...)>
c0013c41:	90                   	nop

c0013c42 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013c42:	57                   	push   edi
c0013c43:	b9 09 00 00 00       	mov    ecx,0x9
c0013c48:	56                   	push   esi
c0013c49:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013c4d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013c51:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013c5b:	81 c7 18 01 00 00    	add    edi,0x118
c0013c61:	fc                   	cld    
c0013c62:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013c64:	5e                   	pop    esi
c0013c65:	5f                   	pop    edi
c0013c66:	c3                   	ret    
c0013c67:	90                   	nop

c0013c68 <Device::preOpenACPI(void*, char*, char*)>:
c0013c68:	57                   	push   edi
c0013c69:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013c6e:	56                   	push   esi
c0013c6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c77:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013c81:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013c87:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013c8d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013c91:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c93:	b9 0e 00 00 00       	mov    ecx,0xe
c0013c98:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013c9e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013ca2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ca4:	5e                   	pop    esi
c0013ca5:	5f                   	pop    edi
c0013ca6:	c3                   	ret    
c0013ca7:	90                   	nop

c0013ca8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013ca8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cac:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013cb1:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013cb8:	75 0b                	jne    c0013cc5 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013cba:	8b 00                	mov    eax,DWORD PTR [eax]
c0013cbc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cc0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013cc3:	eb 1e                	jmp    c0013ce3 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013cc5:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0013cca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013cd0:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013cd6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013cd8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cdc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ce0:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013ce3:	ff e0                	jmp    eax
c0013ce5:	90                   	nop

c0013ce6 <Device::getParent()>:
c0013ce6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cea:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013cf0:	c3                   	ret    
c0013cf1:	90                   	nop

c0013cf2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013cf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cf6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013cfb:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013d02:	75 0b                	jne    c0013d0f <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013d04:	8b 00                	mov    eax,DWORD PTR [eax]
c0013d06:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013d0a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013d0d:	eb 1e                	jmp    c0013d2d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013d0f:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0013d14:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013d1a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013d20:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013d22:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013d26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d2a:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013d2d:	ff e0                	jmp    eax
c0013d2f:	90                   	nop

c0013d30 <Device::addChild(Device*)>:
c0013d30:	53                   	push   ebx
c0013d31:	83 ec 08             	sub    esp,0x8
c0013d34:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d38:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d3c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013d42:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013d48:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013d4a:	85 d2                	test   edx,edx
c0013d4c:	74 04                	je     c0013d52 <Device::addChild(Device*)+0x22>
c0013d4e:	89 d3                	mov    ebx,edx
c0013d50:	eb f6                	jmp    c0013d48 <Device::addChild(Device*)+0x18>
c0013d52:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013d55:	83 ec 0c             	sub    esp,0xc
c0013d58:	6a 08                	push   0x8
c0013d5a:	e8 2d bb ff ff       	call   c000f88c <malloc>
c0013d5f:	89 03                	mov    DWORD PTR [ebx],eax
c0013d61:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d67:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d6e:	83 c4 18             	add    esp,0x18
c0013d71:	5b                   	pop    ebx
c0013d72:	c3                   	ret    
c0013d73:	90                   	nop

c0013d74 <Device::removeAllChildren()>:
c0013d74:	56                   	push   esi
c0013d75:	53                   	push   ebx
c0013d76:	52                   	push   edx
c0013d77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d7b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013d81:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d84:	74 17                	je     c0013d9d <Device::removeAllChildren()+0x29>
c0013d86:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013d89:	85 c0                	test   eax,eax
c0013d8b:	74 0c                	je     c0013d99 <Device::removeAllChildren()+0x25>
c0013d8d:	83 ec 0c             	sub    esp,0xc
c0013d90:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d92:	50                   	push   eax
c0013d93:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013d96:	83 c4 10             	add    esp,0x10
c0013d99:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d9b:	eb e4                	jmp    c0013d81 <Device::removeAllChildren()+0xd>
c0013d9d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013da3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013da9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013daf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013db6:	58                   	pop    eax
c0013db7:	5b                   	pop    ebx
c0013db8:	5e                   	pop    esi
c0013db9:	c3                   	ret    

c0013dba <Device::hibernateAll()>:
c0013dba:	53                   	push   ebx
c0013dbb:	83 ec 14             	sub    esp,0x14
c0013dbe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dc2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dc4:	53                   	push   ebx
c0013dc5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013dc8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013dce:	83 c4 10             	add    esp,0x10
c0013dd1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dd4:	74 0f                	je     c0013de5 <Device::hibernateAll()+0x2b>
c0013dd6:	83 ec 0c             	sub    esp,0xc
c0013dd9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ddc:	e8 d9 ff ff ff       	call   c0013dba <Device::hibernateAll()>
c0013de1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013de3:	eb e9                	jmp    c0013dce <Device::hibernateAll()+0x14>
c0013de5:	83 c4 08             	add    esp,0x8
c0013de8:	5b                   	pop    ebx
c0013de9:	c3                   	ret    

c0013dea <Device::wakeAll()>:
c0013dea:	53                   	push   ebx
c0013deb:	83 ec 14             	sub    esp,0x14
c0013dee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013df2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013df4:	53                   	push   ebx
c0013df5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013df8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013dfe:	83 c4 10             	add    esp,0x10
c0013e01:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e04:	74 0f                	je     c0013e15 <Device::wakeAll()+0x2b>
c0013e06:	83 ec 0c             	sub    esp,0xc
c0013e09:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e0c:	e8 d9 ff ff ff       	call   c0013dea <Device::wakeAll()>
c0013e11:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e13:	eb e9                	jmp    c0013dfe <Device::wakeAll()+0x14>
c0013e15:	83 c4 08             	add    esp,0x8
c0013e18:	5b                   	pop    ebx
c0013e19:	c3                   	ret    

c0013e1a <Device::detectAll()>:
c0013e1a:	53                   	push   ebx
c0013e1b:	83 ec 14             	sub    esp,0x14
c0013e1e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e24:	53                   	push   ebx
c0013e25:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013e28:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e2e:	83 c4 10             	add    esp,0x10
c0013e31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e34:	74 0f                	je     c0013e45 <Device::detectAll()+0x2b>
c0013e36:	83 ec 0c             	sub    esp,0xc
c0013e39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e3c:	e8 d9 ff ff ff       	call   c0013e1a <Device::detectAll()>
c0013e41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e43:	eb e9                	jmp    c0013e2e <Device::detectAll()+0x14>
c0013e45:	83 c4 08             	add    esp,0x8
c0013e48:	5b                   	pop    ebx
c0013e49:	c3                   	ret    

c0013e4a <Device::disableLegacyAll()>:
c0013e4a:	53                   	push   ebx
c0013e4b:	83 ec 14             	sub    esp,0x14
c0013e4e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e54:	53                   	push   ebx
c0013e55:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013e58:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e5e:	83 c4 10             	add    esp,0x10
c0013e61:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e64:	74 0f                	je     c0013e75 <Device::disableLegacyAll()+0x2b>
c0013e66:	83 ec 0c             	sub    esp,0xc
c0013e69:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e6c:	e8 d9 ff ff ff       	call   c0013e4a <Device::disableLegacyAll()>
c0013e71:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e73:	eb e9                	jmp    c0013e5e <Device::disableLegacyAll()+0x14>
c0013e75:	83 c4 08             	add    esp,0x8
c0013e78:	5b                   	pop    ebx
c0013e79:	c3                   	ret    

c0013e7a <Device::loadDriversForAll()>:
c0013e7a:	53                   	push   ebx
c0013e7b:	83 ec 08             	sub    esp,0x8
c0013e7e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e82:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013e89:	75 0c                	jne    c0013e97 <Device::loadDriversForAll()+0x1d>
c0013e8b:	83 ec 0c             	sub    esp,0xc
c0013e8e:	53                   	push   ebx
c0013e8f:	e8 a0 fd ff ff       	call   c0013c34 <Device::findAndLoadDriver()>
c0013e94:	83 c4 10             	add    esp,0x10
c0013e97:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e9d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ea0:	74 12                	je     c0013eb4 <Device::loadDriversForAll()+0x3a>
c0013ea2:	83 ec 0c             	sub    esp,0xc
c0013ea5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ea8:	e8 cd ff ff ff       	call   c0013e7a <Device::loadDriversForAll()>
c0013ead:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013eaf:	83 c4 10             	add    esp,0x10
c0013eb2:	eb e9                	jmp    c0013e9d <Device::loadDriversForAll()+0x23>
c0013eb4:	83 c4 08             	add    esp,0x8
c0013eb7:	5b                   	pop    ebx
c0013eb8:	c3                   	ret    
c0013eb9:	90                   	nop

c0013eba <Device::closeAll()>:
c0013eba:	53                   	push   ebx
c0013ebb:	83 ec 08             	sub    esp,0x8
c0013ebe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ec2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ec4:	6a 00                	push   0x0
c0013ec6:	6a 00                	push   0x0
c0013ec8:	6a 00                	push   0x0
c0013eca:	53                   	push   ebx
c0013ecb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ece:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ed4:	83 c4 10             	add    esp,0x10
c0013ed7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013eda:	74 0f                	je     c0013eeb <Device::closeAll()+0x31>
c0013edc:	83 ec 0c             	sub    esp,0xc
c0013edf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ee2:	e8 d3 ff ff ff       	call   c0013eba <Device::closeAll()>
c0013ee7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ee9:	eb e9                	jmp    c0013ed4 <Device::closeAll()+0x1a>
c0013eeb:	83 c4 08             	add    esp,0x8
c0013eee:	5b                   	pop    ebx
c0013eef:	c3                   	ret    

c0013ef0 <Device::powerSavingAll(PowerSavingLevel)>:
c0013ef0:	56                   	push   esi
c0013ef1:	53                   	push   ebx
c0013ef2:	83 ec 0c             	sub    esp,0xc
c0013ef5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ef9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013efd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013eff:	56                   	push   esi
c0013f00:	53                   	push   ebx
c0013f01:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013f04:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f0a:	83 c4 10             	add    esp,0x10
c0013f0d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f10:	74 0f                	je     c0013f21 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013f12:	52                   	push   edx
c0013f13:	52                   	push   edx
c0013f14:	56                   	push   esi
c0013f15:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f18:	e8 d3 ff ff ff       	call   c0013ef0 <Device::powerSavingAll(PowerSavingLevel)>
c0013f1d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f1f:	eb e9                	jmp    c0013f0a <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013f21:	58                   	pop    eax
c0013f22:	5b                   	pop    ebx
c0013f23:	5e                   	pop    esi
c0013f24:	c3                   	ret    
c0013f25:	90                   	nop

c0013f26 <Device::setName(char const*)>:
c0013f26:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013f2e:	e9 d9 c8 fe ff       	jmp    c000080c <strcpy>
c0013f33:	90                   	nop

c0013f34 <Device::Device(char const*)>:
c0013f34:	83 ec 1c             	sub    esp,0x1c
c0013f37:	ba 90 b5 02 c0       	mov    edx,0xc002b590
c0013f3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f40:	89 10                	mov    DWORD PTR [eax],edx
c0013f42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f46:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013f50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f54:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013f5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f62:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f70:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013f7a:	83 ec 08             	sub    esp,0x8
c0013f7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f85:	e8 9c ff ff ff       	call   c0013f26 <Device::setName(char const*)>
c0013f8a:	83 c4 10             	add    esp,0x10
c0013f8d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013f95:	83 ec 0c             	sub    esp,0xc
c0013f98:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f9c:	e8 eb b8 ff ff       	call   c000f88c <malloc>
c0013fa1:	83 c4 10             	add    esp,0x10
c0013fa4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013faa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fb1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013fb5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013fbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fbf:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013fc5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013fcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fcf:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013fd5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fe0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013fe7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013feb:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013ff2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ff6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014000:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014004:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001400e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014012:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001401c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014020:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001402a:	90                   	nop
c001402b:	83 c4 1c             	add    esp,0x1c
c001402e:	c3                   	ret    
c001402f:	90                   	nop

c0014030 <Device::getName()>:
c0014030:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014034:	05 d0 00 00 00       	add    eax,0xd0
c0014039:	c3                   	ret    

c001403a <DriverlessDevice::DriverlessDevice(char const*)>:
c001403a:	83 ec 0c             	sub    esp,0xc
c001403d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014041:	83 ec 08             	sub    esp,0x8
c0014044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014048:	50                   	push   eax
c0014049:	e8 e6 fe ff ff       	call   c0013f34 <Device::Device(char const*)>
c001404e:	83 c4 10             	add    esp,0x10
c0014051:	ba bc b5 02 c0       	mov    edx,0xc002b5bc
c0014056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001405a:	89 10                	mov    DWORD PTR [eax],edx
c001405c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014060:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001406a:	90                   	nop
c001406b:	83 c4 0c             	add    esp,0xc
c001406e:	c3                   	ret    
c001406f:	90                   	nop

c0014070 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014070:	57                   	push   edi
c0014071:	56                   	push   esi
c0014072:	53                   	push   ebx
c0014073:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014077:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001407b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001407f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014085:	75 0c                	jne    c0014093 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014087:	52                   	push   edx
c0014088:	52                   	push   edx
c0014089:	53                   	push   ebx
c001408a:	56                   	push   esi
c001408b:	e8 e6 50 01 00       	call   c0029176 <LinkedList<Device>::addElement(Device*)>
c0014090:	83 c4 10             	add    esp,0x10
c0014093:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014099:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001409c:	74 12                	je     c00140b0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001409e:	50                   	push   eax
c001409f:	57                   	push   edi
c00140a0:	56                   	push   esi
c00140a1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00140a4:	e8 c7 ff ff ff       	call   c0014070 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00140a9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00140ab:	83 c4 10             	add    esp,0x10
c00140ae:	eb e9                	jmp    c0014099 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00140b0:	5b                   	pop    ebx
c00140b1:	5e                   	pop    esi
c00140b2:	5f                   	pop    edi
c00140b3:	c3                   	ret    

c00140b4 <getDevicesOfType(DeviceType)>:
c00140b4:	53                   	push   ebx
c00140b5:	83 ec 14             	sub    esp,0x14
c00140b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00140bc:	53                   	push   ebx
c00140bd:	e8 90 51 01 00       	call   c0029252 <LinkedList<Device>::LinkedList()>
c00140c2:	83 c4 0c             	add    esp,0xc
c00140c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00140c9:	53                   	push   ebx
c00140ca:	ff 35 28 f0 02 c0    	push   DWORD PTR ds:0xc002f028
c00140d0:	e8 9b ff ff ff       	call   c0014070 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00140d5:	89 d8                	mov    eax,ebx
c00140d7:	83 c4 18             	add    esp,0x18
c00140da:	5b                   	pop    ebx
c00140db:	c2 04 00             	ret    0x4

c00140de <HardDiskController::HardDiskController(char const*)>:
c00140de:	83 ec 0c             	sub    esp,0xc
c00140e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e5:	83 ec 08             	sub    esp,0x8
c00140e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140ec:	50                   	push   eax
c00140ed:	e8 42 fe ff ff       	call   c0013f34 <Device::Device(char const*)>
c00140f2:	83 c4 10             	add    esp,0x10
c00140f5:	ba e8 b5 02 c0       	mov    edx,0xc002b5e8
c00140fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140fe:	89 10                	mov    DWORD PTR [eax],edx
c0014100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014104:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001410e:	90                   	nop
c001410f:	83 c4 0c             	add    esp,0xc
c0014112:	c3                   	ret    
c0014113:	90                   	nop

c0014114 <HardDiskController::~HardDiskController()>:
c0014114:	83 ec 0c             	sub    esp,0xc
c0014117:	ba e8 b5 02 c0       	mov    edx,0xc002b5e8
c001411c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014120:	89 10                	mov    DWORD PTR [eax],edx
c0014122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014126:	83 ec 0c             	sub    esp,0xc
c0014129:	50                   	push   eax
c001412a:	e8 cf fa ff ff       	call   c0013bfe <Device::~Device()>
c001412f:	83 c4 10             	add    esp,0x10
c0014132:	90                   	nop
c0014133:	83 c4 0c             	add    esp,0xc
c0014136:	c3                   	ret    
c0014137:	90                   	nop

c0014138 <HardDiskController::~HardDiskController()>:
c0014138:	83 ec 0c             	sub    esp,0xc
c001413b:	83 ec 0c             	sub    esp,0xc
c001413e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014142:	e8 cd ff ff ff       	call   c0014114 <HardDiskController::~HardDiskController()>
c0014147:	83 c4 10             	add    esp,0x10
c001414a:	83 ec 08             	sub    esp,0x8
c001414d:	68 58 01 00 00       	push   0x158
c0014152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014156:	e8 bc e6 ff ff       	call   c0012817 <operator delete(void*, unsigned long)>
c001415b:	83 c4 10             	add    esp,0x10
c001415e:	83 c4 0c             	add    esp,0xc
c0014161:	c3                   	ret    

c0014162 <PhysicalDisk::eject()>:
c0014162:	83 ec 18             	sub    esp,0x18
c0014165:	68 0c b6 02 c0       	push   0xc002b60c
c001416a:	e8 88 e7 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001416f:	83 c8 ff             	or     eax,0xffffffff
c0014172:	83 c4 1c             	add    esp,0x1c
c0014175:	c3                   	ret    

c0014176 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014176:	83 ec 0c             	sub    esp,0xc
c0014179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001417d:	83 ec 08             	sub    esp,0x8
c0014180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014184:	50                   	push   eax
c0014185:	e8 aa fd ff ff       	call   c0013f34 <Device::Device(char const*)>
c001418a:	83 c4 10             	add    esp,0x10
c001418d:	ba 3c b6 02 c0       	mov    edx,0xc002b63c
c0014192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014196:	89 10                	mov    DWORD PTR [eax],edx
c0014198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001419c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00141a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141a7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00141ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141b2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00141bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00141c4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00141ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141ce:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00141d8:	90                   	nop
c00141d9:	83 c4 0c             	add    esp,0xc
c00141dc:	c3                   	ret    
c00141dd:	90                   	nop

c00141de <PhysicalDisk::startCache()>:
c00141de:	56                   	push   esi
c00141df:	53                   	push   ebx
c00141e0:	83 ec 10             	sub    esp,0x10
c00141e3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141e7:	6a 44                	push   0x44
c00141e9:	e8 9e b6 ff ff       	call   c000f88c <malloc>
c00141ee:	89 c6                	mov    esi,eax
c00141f0:	58                   	pop    eax
c00141f1:	5a                   	pop    edx
c00141f2:	53                   	push   ebx
c00141f3:	56                   	push   esi
c00141f4:	e8 a9 28 00 00       	call   c0016aa2 <VCache::VCache(PhysicalDisk*)>
c00141f9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00141ff:	83 c4 14             	add    esp,0x14
c0014202:	5b                   	pop    ebx
c0014203:	5e                   	pop    esi
c0014204:	c3                   	ret    
c0014205:	90                   	nop

c0014206 <PhysicalDisk::~PhysicalDisk()>:
c0014206:	83 ec 0c             	sub    esp,0xc
c0014209:	ba 3c b6 02 c0       	mov    edx,0xc002b63c
c001420e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014212:	89 10                	mov    DWORD PTR [eax],edx
c0014214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014218:	83 ec 0c             	sub    esp,0xc
c001421b:	50                   	push   eax
c001421c:	e8 dd f9 ff ff       	call   c0013bfe <Device::~Device()>
c0014221:	83 c4 10             	add    esp,0x10
c0014224:	90                   	nop
c0014225:	83 c4 0c             	add    esp,0xc
c0014228:	c3                   	ret    
c0014229:	90                   	nop

c001422a <PhysicalDisk::~PhysicalDisk()>:
c001422a:	83 ec 0c             	sub    esp,0xc
c001422d:	83 ec 0c             	sub    esp,0xc
c0014230:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014234:	e8 cd ff ff ff       	call   c0014206 <PhysicalDisk::~PhysicalDisk()>
c0014239:	83 c4 10             	add    esp,0x10
c001423c:	83 ec 08             	sub    esp,0x8
c001423f:	68 6c 01 00 00       	push   0x16c
c0014244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014248:	e8 ca e5 ff ff       	call   c0012817 <operator delete(void*, unsigned long)>
c001424d:	83 c4 10             	add    esp,0x10
c0014250:	83 c4 0c             	add    esp,0xc
c0014253:	c3                   	ret    

c0014254 <FPU::FPU(char const*)>:
c0014254:	83 ec 0c             	sub    esp,0xc
c0014257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001425b:	83 ec 08             	sub    esp,0x8
c001425e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014262:	50                   	push   eax
c0014263:	e8 cc fc ff ff       	call   c0013f34 <Device::Device(char const*)>
c0014268:	83 c4 10             	add    esp,0x10
c001426b:	ba 80 b6 02 c0       	mov    edx,0xc002b680
c0014270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014274:	89 10                	mov    DWORD PTR [eax],edx
c0014276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001427a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014284:	90                   	nop
c0014285:	83 c4 0c             	add    esp,0xc
c0014288:	c3                   	ret    
c0014289:	90                   	nop

c001428a <FPU::~FPU()>:
c001428a:	83 ec 0c             	sub    esp,0xc
c001428d:	ba 80 b6 02 c0       	mov    edx,0xc002b680
c0014292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014296:	89 10                	mov    DWORD PTR [eax],edx
c0014298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001429c:	83 ec 0c             	sub    esp,0xc
c001429f:	50                   	push   eax
c00142a0:	e8 59 f9 ff ff       	call   c0013bfe <Device::~Device()>
c00142a5:	83 c4 10             	add    esp,0x10
c00142a8:	90                   	nop
c00142a9:	83 c4 0c             	add    esp,0xc
c00142ac:	c3                   	ret    
c00142ad:	90                   	nop

c00142ae <FPU::~FPU()>:
c00142ae:	83 ec 0c             	sub    esp,0xc
c00142b1:	83 ec 0c             	sub    esp,0xc
c00142b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142b8:	e8 cd ff ff ff       	call   c001428a <FPU::~FPU()>
c00142bd:	83 c4 10             	add    esp,0x10
c00142c0:	83 ec 08             	sub    esp,0x8
c00142c3:	68 58 01 00 00       	push   0x158
c00142c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142cc:	e8 46 e5 ff ff       	call   c0012817 <operator delete(void*, unsigned long)>
c00142d1:	83 c4 10             	add    esp,0x10
c00142d4:	83 c4 0c             	add    esp,0xc
c00142d7:	c3                   	ret    

c00142d8 <setupFPU()>:
c00142d8:	53                   	push   ebx
c00142d9:	83 ec 08             	sub    esp,0x8
c00142dc:	8b 15 28 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f028
c00142e2:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00142e9:	74 19                	je     c0014304 <setupFPU()+0x2c>
c00142eb:	83 ec 0c             	sub    esp,0xc
c00142ee:	68 58 01 00 00       	push   0x158
c00142f3:	e8 94 b5 ff ff       	call   c000f88c <malloc>
c00142f8:	89 c3                	mov    ebx,eax
c00142fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00142fd:	e8 a2 1a 01 00       	call   c0025da4 <AVX::AVX()>
c0014302:	eb 5b                	jmp    c001435f <setupFPU()+0x87>
c0014304:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001430a:	84 c0                	test   al,al
c001430c:	79 19                	jns    c0014327 <setupFPU()+0x4f>
c001430e:	83 ec 0c             	sub    esp,0xc
c0014311:	68 58 01 00 00       	push   0x158
c0014316:	e8 71 b5 ff ff       	call   c000f88c <malloc>
c001431b:	89 c3                	mov    ebx,eax
c001431d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014320:	e8 a5 1b 01 00       	call   c0025eca <SSE::SSE()>
c0014325:	eb 38                	jmp    c001435f <setupFPU()+0x87>
c0014327:	a8 20                	test   al,0x20
c0014329:	74 19                	je     c0014344 <setupFPU()+0x6c>
c001432b:	83 ec 0c             	sub    esp,0xc
c001432e:	68 58 01 00 00       	push   0x158
c0014333:	e8 54 b5 ff ff       	call   c000f88c <malloc>
c0014338:	89 c3                	mov    ebx,eax
c001433a:	89 04 24             	mov    DWORD PTR [esp],eax
c001433d:	e8 f2 1a 01 00       	call   c0025e34 <MMX::MMX()>
c0014342:	eb 1b                	jmp    c001435f <setupFPU()+0x87>
c0014344:	a8 10                	test   al,0x10
c0014346:	74 1c                	je     c0014364 <setupFPU()+0x8c>
c0014348:	83 ec 0c             	sub    esp,0xc
c001434b:	68 58 01 00 00       	push   0x158
c0014350:	e8 37 b5 ff ff       	call   c000f88c <malloc>
c0014355:	89 c3                	mov    ebx,eax
c0014357:	89 04 24             	mov    DWORD PTR [esp],eax
c001435a:	e8 f9 1b 01 00       	call   c0025f58 <x87::x87()>
c001435f:	83 c4 10             	add    esp,0x10
c0014362:	eb 24                	jmp    c0014388 <setupFPU()+0xb0>
c0014364:	83 e0 ef             	and    eax,0xffffffef
c0014367:	83 ec 0c             	sub    esp,0xc
c001436a:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014370:	68 6c b6 02 c0       	push   0xc002b66c
c0014375:	e8 7d e5 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001437a:	0f 20 c0             	mov    eax,cr0
c001437d:	83 c8 04             	or     eax,0x4
c0014380:	0f 22 c0             	mov    cr0,eax
c0014383:	31 db                	xor    ebx,ebx
c0014385:	83 c4 10             	add    esp,0x10
c0014388:	89 d8                	mov    eax,ebx
c001438a:	83 c4 08             	add    esp,0x8
c001438d:	5b                   	pop    ebx
c001438e:	c3                   	ret    
c001438f:	90                   	nop

c0014390 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014390:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014394:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014398:	c1 e0 04             	shl    eax,0x4
c001439b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001439f:	8d 50 10             	lea    edx,[eax+0x10]
c00143a2:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00143a8:	74 08                	je     c00143b2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00143aa:	83 c0 04             	add    eax,0x4
c00143ad:	39 d0                	cmp    eax,edx
c00143af:	75 f1                	jne    c00143a2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00143b1:	c3                   	ret    
c00143b2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00143bc:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00143c6:	eb e2                	jmp    c00143aa <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00143c8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00143c8:	57                   	push   edi
c00143c9:	31 c0                	xor    eax,eax
c00143cb:	56                   	push   esi
c00143cc:	53                   	push   ebx
c00143cd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00143d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00143d5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00143d9:	89 da                	mov    edx,ebx
c00143db:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00143df:	c1 e2 04             	shl    edx,0x4
c00143e2:	01 ca                	add    edx,ecx
c00143e4:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00143ec:	74 16                	je     c0014404 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00143ee:	40                   	inc    eax
c00143ef:	83 f8 04             	cmp    eax,0x4
c00143f2:	75 f0                	jne    c00143e4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00143f4:	c7 44 24 10 b0 b6 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b6b0
c00143fc:	5b                   	pop    ebx
c00143fd:	5e                   	pop    esi
c00143fe:	5f                   	pop    edi
c00143ff:	e9 29 5f 00 00       	jmp    c001a32d <Krnl::panic(char const*)>
c0014404:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014407:	8d 04 81             	lea    eax,[ecx+eax*4]
c001440a:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014410:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014416:	5b                   	pop    ebx
c0014417:	5e                   	pop    esi
c0014418:	5f                   	pop    edi
c0014419:	c3                   	ret    

c001441a <doubleFault(regs*, void*)>:
c001441a:	55                   	push   ebp
c001441b:	89 e5                	mov    ebp,esp
c001441d:	83 ec 08             	sub    esp,0x8
c0014420:	83 ec 0c             	sub    esp,0xc
c0014423:	68 eb b6 02 c0       	push   0xc002b6eb
c0014428:	e8 00 5f 00 00       	call   c001a32d <Krnl::panic(char const*)>
c001442d:	83 c4 10             	add    esp,0x10
c0014430:	90                   	nop
c0014431:	c9                   	leave  
c0014432:	c3                   	ret    
c0014433:	90                   	nop

c0014434 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014434:	56                   	push   esi
c0014435:	53                   	push   ebx
c0014436:	50                   	push   eax
c0014437:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001443b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001443f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014444:	75 35                	jne    c001447b <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014446:	8d 43 20             	lea    eax,[ebx+0x20]
c0014449:	31 d2                	xor    edx,edx
c001444b:	89 c1                	mov    ecx,eax
c001444d:	c1 e1 04             	shl    ecx,0x4
c0014450:	01 f1                	add    ecx,esi
c0014452:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c001445a:	74 3e                	je     c001449a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001445c:	42                   	inc    edx
c001445d:	83 fa 04             	cmp    edx,0x4
c0014460:	75 f0                	jne    c0014452 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014462:	83 ec 0c             	sub    esp,0xc
c0014465:	68 30 b7 02 c0       	push   0xc002b730
c001446a:	e8 be 5e 00 00       	call   c001a32d <Krnl::panic(char const*)>
c001446f:	83 c4 10             	add    esp,0x10
c0014472:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014477:	5a                   	pop    edx
c0014478:	5b                   	pop    ebx
c0014479:	5e                   	pop    esi
c001447a:	c3                   	ret    
c001447b:	83 ec 0c             	sub    esp,0xc
c001447e:	56                   	push   esi
c001447f:	e8 ac fb ff ff       	call   c0014030 <Device::getName()>
c0014484:	83 c4 10             	add    esp,0x10
c0014487:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001448a:	75 ba                	jne    c0014446 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001448c:	83 fb 0f             	cmp    ebx,0xf
c001448f:	7f 29                	jg     c00144ba <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014491:	0f b6 9b 80 e2 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1d80]
c0014498:	eb ac                	jmp    c0014446 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001449a:	8d 04 82             	lea    eax,[edx+eax*4]
c001449d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00144a1:	8d 04 86             	lea    eax,[esi+eax*4]
c00144a4:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00144aa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00144ae:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00144b4:	89 d8                	mov    eax,ebx
c00144b6:	5a                   	pop    edx
c00144b7:	5b                   	pop    ebx
c00144b8:	5e                   	pop    esi
c00144b9:	c3                   	ret    
c00144ba:	83 ec 0c             	sub    esp,0xc
c00144bd:	68 f8 b6 02 c0       	push   0xc002b6f8
c00144c2:	e8 66 5e 00 00       	call   c001a32d <Krnl::panic(char const*)>
c00144c7:	83 c4 10             	add    esp,0x10
c00144ca:	e9 77 ff ff ff       	jmp    c0014446 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00144cf:	90                   	nop

c00144d0 <InterruptController::clearAllHandlers(int, bool)>:
c00144d0:	56                   	push   esi
c00144d1:	53                   	push   ebx
c00144d2:	52                   	push   edx
c00144d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144d7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00144db:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00144e0:	75 61                	jne    c0014543 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00144e2:	8d 46 20             	lea    eax,[esi+0x20]
c00144e5:	c1 e6 04             	shl    esi,0x4
c00144e8:	c1 e0 04             	shl    eax,0x4
c00144eb:	01 de                	add    esi,ebx
c00144ed:	01 d8                	add    eax,ebx
c00144ef:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00144f9:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014503:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001450d:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014517:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014521:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c001452b:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014535:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c001453f:	58                   	pop    eax
c0014540:	5b                   	pop    ebx
c0014541:	5e                   	pop    esi
c0014542:	c3                   	ret    
c0014543:	83 ec 0c             	sub    esp,0xc
c0014546:	53                   	push   ebx
c0014547:	e8 e4 fa ff ff       	call   c0014030 <Device::getName()>
c001454c:	83 c4 10             	add    esp,0x10
c001454f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014552:	75 8e                	jne    c00144e2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014554:	83 fe 0f             	cmp    esi,0xf
c0014557:	7f 09                	jg     c0014562 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014559:	0f b6 b6 80 e2 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1d80]
c0014560:	eb 80                	jmp    c00144e2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014562:	83 ec 0c             	sub    esp,0xc
c0014565:	68 6c b7 02 c0       	push   0xc002b76c
c001456a:	e8 be 5d 00 00       	call   c001a32d <Krnl::panic(char const*)>
c001456f:	83 c4 10             	add    esp,0x10
c0014572:	e9 6b ff ff ff       	jmp    c00144e2 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014577:	90                   	nop

c0014578 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014578:	56                   	push   esi
c0014579:	53                   	push   ebx
c001457a:	52                   	push   edx
c001457b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001457f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014583:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014588:	75 3a                	jne    c00145c4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c001458a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001458e:	8d 50 20             	lea    edx,[eax+0x20]
c0014591:	c1 e2 04             	shl    edx,0x4
c0014594:	8d 04 16             	lea    eax,[esi+edx*1]
c0014597:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c001459b:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00145a1:	74 0b                	je     c00145ae <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00145a3:	83 c0 04             	add    eax,0x4
c00145a6:	39 d0                	cmp    eax,edx
c00145a8:	75 f1                	jne    c001459b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00145aa:	58                   	pop    eax
c00145ab:	5b                   	pop    ebx
c00145ac:	5e                   	pop    esi
c00145ad:	c3                   	ret    
c00145ae:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00145b8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00145c2:	eb df                	jmp    c00145a3 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00145c4:	83 ec 0c             	sub    esp,0xc
c00145c7:	56                   	push   esi
c00145c8:	e8 63 fa ff ff       	call   c0014030 <Device::getName()>
c00145cd:	83 c4 10             	add    esp,0x10
c00145d0:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00145d3:	75 b5                	jne    c001458a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00145d5:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00145da:	7f 11                	jg     c00145ed <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00145dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145e0:	0f b6 80 80 e2 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1d80]
c00145e7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00145eb:	eb 9d                	jmp    c001458a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00145ed:	83 ec 0c             	sub    esp,0xc
c00145f0:	68 6c b7 02 c0       	push   0xc002b76c
c00145f5:	e8 33 5d 00 00       	call   c001a32d <Krnl::panic(char const*)>
c00145fa:	83 c4 10             	add    esp,0x10
c00145fd:	eb 8b                	jmp    c001458a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00145ff <nmiHandler(regs*, void*)>:
c00145ff:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0014604:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014608:	e9 c9 a9 ff ff       	jmp    c000efd6 <Computer::handleNMI()>

c001460d <int_handler>:
c001460d:	55                   	push   ebp
c001460e:	57                   	push   edi
c001460f:	56                   	push   esi
c0014610:	53                   	push   ebx
c0014611:	83 ec 0c             	sub    esp,0xc
c0014614:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014618:	80 3d 64 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b64,0x0
c001461f:	74 0b                	je     c001462c <int_handler+0x1f>
c0014621:	fa                   	cli    
c0014622:	f4                   	hlt    
c0014623:	80 3d 64 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b64,0x0
c001462a:	75 f5                	jne    c0014621 <int_handler+0x14>
c001462c:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0014631:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014634:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001463a:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014640:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014643:	83 f8 17             	cmp    eax,0x17
c0014646:	77 13                	ja     c001465b <int_handler+0x4e>
c0014648:	83 ec 08             	sub    esp,0x8
c001464b:	8b 17                	mov    edx,DWORD PTR [edi]
c001464d:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014650:	0f b6 c0             	movzx  eax,al
c0014653:	50                   	push   eax
c0014654:	57                   	push   edi
c0014655:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014658:	83 c4 10             	add    esp,0x10
c001465b:	83 c3 15             	add    ebx,0x15
c001465e:	c1 e3 04             	shl    ebx,0x4
c0014661:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014665:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c001466c:	31 db                	xor    ebx,ebx
c001466e:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014672:	85 c0                	test   eax,eax
c0014674:	74 13                	je     c0014689 <int_handler+0x7c>
c0014676:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014679:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c001467d:	74 1c                	je     c001469b <int_handler+0x8e>
c001467f:	83 ec 08             	sub    esp,0x8
c0014682:	52                   	push   edx
c0014683:	56                   	push   esi
c0014684:	ff d0                	call   eax
c0014686:	83 c4 10             	add    esp,0x10
c0014689:	43                   	inc    ebx
c001468a:	83 fb 04             	cmp    ebx,0x4
c001468d:	75 df                	jne    c001466e <int_handler+0x61>
c001468f:	83 c4 0c             	add    esp,0xc
c0014692:	31 c0                	xor    eax,eax
c0014694:	5b                   	pop    ebx
c0014695:	31 d2                	xor    edx,edx
c0014697:	5e                   	pop    esi
c0014698:	5f                   	pop    edi
c0014699:	5d                   	pop    ebp
c001469a:	c3                   	ret    
c001469b:	83 ec 08             	sub    esp,0x8
c001469e:	52                   	push   edx
c001469f:	56                   	push   esi
c00146a0:	ff d0                	call   eax
c00146a2:	83 c4 10             	add    esp,0x10
c00146a5:	83 c4 0c             	add    esp,0xc
c00146a8:	5b                   	pop    ebx
c00146a9:	5e                   	pop    esi
c00146aa:	5f                   	pop    edi
c00146ab:	5d                   	pop    ebp
c00146ac:	c3                   	ret    
c00146ad:	90                   	nop

c00146ae <InterruptController::InterruptController(char const*)>:
c00146ae:	83 ec 1c             	sub    esp,0x1c
c00146b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146b5:	83 ec 08             	sub    esp,0x8
c00146b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00146bc:	50                   	push   eax
c00146bd:	e8 72 f8 ff ff       	call   c0013f34 <Device::Device(char const*)>
c00146c2:	83 c4 10             	add    esp,0x10
c00146c5:	ba 2c ba 02 c0       	mov    edx,0xc002ba2c
c00146ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146ce:	89 10                	mov    DWORD PTR [eax],edx
c00146d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146d4:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00146de:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146e6:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00146ee:	7f 5e                	jg     c001474e <InterruptController::InterruptController(char const*)+0xa0>
c00146f0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00146f8:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00146fd:	7f 49                	jg     c0014748 <InterruptController::InterruptController(char const*)+0x9a>
c00146ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014703:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014707:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001470e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014712:	01 ca                	add    edx,ecx
c0014714:	83 c2 54             	add    edx,0x54
c0014717:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001471f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014723:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014727:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001472e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014732:	01 ca                	add    edx,ecx
c0014734:	81 c2 54 04 00 00    	add    edx,0x454
c001473a:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014742:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014746:	eb b0                	jmp    c00146f8 <InterruptController::InterruptController(char const*)+0x4a>
c0014748:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001474c:	eb 98                	jmp    c00146e6 <InterruptController::InterruptController(char const*)+0x38>
c001474e:	90                   	nop
c001474f:	83 c4 1c             	add    esp,0x1c
c0014752:	c3                   	ret    
c0014753:	90                   	nop

c0014754 <InterruptController::~InterruptController()>:
c0014754:	83 ec 0c             	sub    esp,0xc
c0014757:	ba 2c ba 02 c0       	mov    edx,0xc002ba2c
c001475c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014760:	89 10                	mov    DWORD PTR [eax],edx
c0014762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014766:	83 ec 0c             	sub    esp,0xc
c0014769:	50                   	push   eax
c001476a:	e8 8f f4 ff ff       	call   c0013bfe <Device::~Device()>
c001476f:	83 c4 10             	add    esp,0x10
c0014772:	90                   	nop
c0014773:	83 c4 0c             	add    esp,0xc
c0014776:	c3                   	ret    
c0014777:	90                   	nop

c0014778 <InterruptController::~InterruptController()>:
c0014778:	83 ec 0c             	sub    esp,0xc
c001477b:	83 ec 0c             	sub    esp,0xc
c001477e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014782:	e8 cd ff ff ff       	call   c0014754 <InterruptController::~InterruptController()>
c0014787:	83 c4 10             	add    esp,0x10
c001478a:	83 ec 08             	sub    esp,0x8
c001478d:	68 58 21 00 00       	push   0x2158
c0014792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014796:	e8 7c e0 ff ff       	call   c0012817 <operator delete(void*, unsigned long)>
c001479b:	83 c4 10             	add    esp,0x10
c001479e:	83 c4 0c             	add    esp,0xc
c00147a1:	c3                   	ret    

c00147a2 <displayDebugInfo(regs*)>:
c00147a2:	55                   	push   ebp
c00147a3:	57                   	push   edi
c00147a4:	56                   	push   esi
c00147a5:	53                   	push   ebx
c00147a6:	83 ec 24             	sub    esp,0x24
c00147a9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00147ad:	0f 20 c2             	mov    edx,cr0
c00147b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00147b4:	0f 20 d7             	mov    edi,cr2
c00147b7:	0f 20 de             	mov    esi,cr3
c00147ba:	0f 20 e5             	mov    ebp,cr4
c00147bd:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00147c0:	68 a6 b7 02 c0       	push   0xc002b7a6
c00147c5:	e8 2d e1 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00147ca:	59                   	pop    ecx
c00147cb:	58                   	pop    eax
c00147cc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00147cf:	68 b1 b7 02 c0       	push   0xc002b7b1
c00147d4:	e8 1e e1 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00147d9:	58                   	pop    eax
c00147da:	5a                   	pop    edx
c00147db:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00147de:	68 bc b7 02 c0       	push   0xc002b7bc
c00147e3:	e8 0f e1 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00147e8:	59                   	pop    ecx
c00147e9:	58                   	pop    eax
c00147ea:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00147ed:	68 c7 b7 02 c0       	push   0xc002b7c7
c00147f2:	e8 00 e1 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00147f7:	58                   	pop    eax
c00147f8:	5a                   	pop    edx
c00147f9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00147fc:	68 d2 b7 02 c0       	push   0xc002b7d2
c0014801:	e8 f1 e0 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0014806:	59                   	pop    ecx
c0014807:	58                   	pop    eax
c0014808:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c001480b:	68 dd b7 02 c0       	push   0xc002b7dd
c0014810:	e8 e2 e0 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0014815:	58                   	pop    eax
c0014816:	5a                   	pop    edx
c0014817:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001481a:	68 e8 b7 02 c0       	push   0xc002b7e8
c001481f:	e8 d3 e0 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0014824:	59                   	pop    ecx
c0014825:	58                   	pop    eax
c0014826:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014829:	68 f3 b7 02 c0       	push   0xc002b7f3
c001482e:	e8 c4 e0 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0014833:	58                   	pop    eax
c0014834:	5a                   	pop    edx
c0014835:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014838:	68 fe b7 02 c0       	push   0xc002b7fe
c001483d:	e8 b5 e0 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0014842:	59                   	pop    ecx
c0014843:	58                   	pop    eax
c0014844:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014847:	68 0d b8 02 c0       	push   0xc002b80d
c001484c:	e8 a6 e0 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0014851:	58                   	pop    eax
c0014852:	5a                   	pop    edx
c0014853:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014856:	68 18 b8 02 c0       	push   0xc002b818
c001485b:	e8 97 e0 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0014860:	59                   	pop    ecx
c0014861:	58                   	pop    eax
c0014862:	57                   	push   edi
c0014863:	68 23 b8 02 c0       	push   0xc002b823
c0014868:	e8 8a e0 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001486d:	58                   	pop    eax
c001486e:	5a                   	pop    edx
c001486f:	56                   	push   esi
c0014870:	68 2e b8 02 c0       	push   0xc002b82e
c0014875:	e8 7d e0 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001487a:	59                   	pop    ecx
c001487b:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014880:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014886:	e8 8f be ff ff       	call   c001071a <setActiveTerminal(VgaText*)>
c001488b:	58                   	pop    eax
c001488c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001488f:	5a                   	pop    edx
c0014890:	c1 e0 05             	shl    eax,0x5
c0014893:	05 e0 df 02 c0       	add    eax,0xc002dfe0
c0014898:	50                   	push   eax
c0014899:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001489e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148a4:	e8 43 c2 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c00148a9:	59                   	pop    ecx
c00148aa:	58                   	pop    eax
c00148ab:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c00148b0:	68 39 b8 02 c0       	push   0xc002b839
c00148b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148bb:	e8 2c c2 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c00148c0:	58                   	pop    eax
c00148c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148c6:	5a                   	pop    edx
c00148c7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00148ca:	83 c0 0c             	add    eax,0xc
c00148cd:	50                   	push   eax
c00148ce:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c00148d3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148d9:	e8 0e c2 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c00148de:	59                   	pop    ecx
c00148df:	58                   	pop    eax
c00148e0:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c00148e5:	68 42 b8 02 c0       	push   0xc002b842
c00148ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f0:	e8 f7 c1 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c00148f5:	58                   	pop    eax
c00148f6:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c00148fb:	5a                   	pop    edx
c00148fc:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00148ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014905:	e8 9c c1 ff ff       	call   c0010aa6 <VgaText::putx(unsigned int)>
c001490a:	59                   	pop    ecx
c001490b:	58                   	pop    eax
c001490c:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014911:	68 4a b8 02 c0       	push   0xc002b84a
c0014916:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001491c:	e8 cb c1 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c0014921:	58                   	pop    eax
c0014922:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014927:	5a                   	pop    edx
c0014928:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001492b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014931:	e8 70 c1 ff ff       	call   c0010aa6 <VgaText::putx(unsigned int)>
c0014936:	59                   	pop    ecx
c0014937:	58                   	pop    eax
c0014938:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001493d:	68 52 b8 02 c0       	push   0xc002b852
c0014942:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014948:	e8 9f c1 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c001494d:	58                   	pop    eax
c001494e:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014953:	5a                   	pop    edx
c0014954:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014957:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001495d:	e8 44 c1 ff ff       	call   c0010aa6 <VgaText::putx(unsigned int)>
c0014962:	59                   	pop    ecx
c0014963:	58                   	pop    eax
c0014964:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014969:	68 5a b8 02 c0       	push   0xc002b85a
c001496e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014974:	e8 73 c1 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c0014979:	58                   	pop    eax
c001497a:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001497f:	5a                   	pop    edx
c0014980:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014983:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014989:	e8 18 c1 ff ff       	call   c0010aa6 <VgaText::putx(unsigned int)>
c001498e:	59                   	pop    ecx
c001498f:	58                   	pop    eax
c0014990:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014995:	68 62 b8 02 c0       	push   0xc002b862
c001499a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a0:	e8 47 c1 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c00149a5:	58                   	pop    eax
c00149a6:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c00149ab:	5a                   	pop    edx
c00149ac:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00149af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149b5:	e8 ec c0 ff ff       	call   c0010aa6 <VgaText::putx(unsigned int)>
c00149ba:	59                   	pop    ecx
c00149bb:	58                   	pop    eax
c00149bc:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c00149c1:	68 6a b8 02 c0       	push   0xc002b86a
c00149c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149cc:	e8 1b c1 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c00149d1:	58                   	pop    eax
c00149d2:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c00149d7:	5a                   	pop    edx
c00149d8:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00149db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149e1:	e8 c0 c0 ff ff       	call   c0010aa6 <VgaText::putx(unsigned int)>
c00149e6:	59                   	pop    ecx
c00149e7:	58                   	pop    eax
c00149e8:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c00149ed:	68 72 b8 02 c0       	push   0xc002b872
c00149f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149f8:	e8 ef c0 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c00149fd:	58                   	pop    eax
c00149fe:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014a03:	5a                   	pop    edx
c0014a04:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014a08:	52                   	push   edx
c0014a09:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a0f:	e8 92 c0 ff ff       	call   c0010aa6 <VgaText::putx(unsigned int)>
c0014a14:	59                   	pop    ecx
c0014a15:	58                   	pop    eax
c0014a16:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014a1b:	68 7b b8 02 c0       	push   0xc002b87b
c0014a20:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a26:	e8 c1 c0 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c0014a2b:	58                   	pop    eax
c0014a2c:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014a31:	5a                   	pop    edx
c0014a32:	57                   	push   edi
c0014a33:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a39:	e8 68 c0 ff ff       	call   c0010aa6 <VgaText::putx(unsigned int)>
c0014a3e:	59                   	pop    ecx
c0014a3f:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014a44:	5f                   	pop    edi
c0014a45:	68 83 b8 02 c0       	push   0xc002b883
c0014a4a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a50:	e8 97 c0 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c0014a55:	58                   	pop    eax
c0014a56:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014a5b:	5a                   	pop    edx
c0014a5c:	56                   	push   esi
c0014a5d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a63:	e8 3e c0 ff ff       	call   c0010aa6 <VgaText::putx(unsigned int)>
c0014a68:	59                   	pop    ecx
c0014a69:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014a6e:	5e                   	pop    esi
c0014a6f:	68 8b b8 02 c0       	push   0xc002b88b
c0014a74:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a7a:	e8 6d c0 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c0014a7f:	5f                   	pop    edi
c0014a80:	58                   	pop    eax
c0014a81:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014a86:	55                   	push   ebp
c0014a87:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a8d:	e8 14 c0 ff ff       	call   c0010aa6 <VgaText::putx(unsigned int)>
c0014a92:	58                   	pop    eax
c0014a93:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014a98:	5a                   	pop    edx
c0014a99:	68 93 b8 02 c0       	push   0xc002b893
c0014a9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aa4:	e8 43 c0 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c0014aa9:	0f 21 c0             	mov    eax,db0
c0014aac:	59                   	pop    ecx
c0014aad:	5e                   	pop    esi
c0014aae:	50                   	push   eax
c0014aaf:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014ab4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aba:	e8 e7 bf ff ff       	call   c0010aa6 <VgaText::putx(unsigned int)>
c0014abf:	5f                   	pop    edi
c0014ac0:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014ac5:	5d                   	pop    ebp
c0014ac6:	68 9c b8 02 c0       	push   0xc002b89c
c0014acb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ad1:	e8 16 c0 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c0014ad6:	0f 21 c8             	mov    eax,db1
c0014ad9:	5a                   	pop    edx
c0014ada:	59                   	pop    ecx
c0014adb:	50                   	push   eax
c0014adc:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014ae1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ae7:	e8 ba bf ff ff       	call   c0010aa6 <VgaText::putx(unsigned int)>
c0014aec:	5e                   	pop    esi
c0014aed:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014af2:	5f                   	pop    edi
c0014af3:	68 a4 b8 02 c0       	push   0xc002b8a4
c0014af8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014afe:	e8 e9 bf ff ff       	call   c0010aec <VgaText::puts(char const*)>
c0014b03:	0f 21 d0             	mov    eax,db2
c0014b06:	5d                   	pop    ebp
c0014b07:	5a                   	pop    edx
c0014b08:	50                   	push   eax
c0014b09:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014b0e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b14:	e8 8d bf ff ff       	call   c0010aa6 <VgaText::putx(unsigned int)>
c0014b19:	59                   	pop    ecx
c0014b1a:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014b1f:	5e                   	pop    esi
c0014b20:	68 ac b8 02 c0       	push   0xc002b8ac
c0014b25:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b2b:	e8 bc bf ff ff       	call   c0010aec <VgaText::puts(char const*)>
c0014b30:	0f 21 d8             	mov    eax,db3
c0014b33:	5f                   	pop    edi
c0014b34:	5d                   	pop    ebp
c0014b35:	50                   	push   eax
c0014b36:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014b3b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b41:	e8 60 bf ff ff       	call   c0010aa6 <VgaText::putx(unsigned int)>
c0014b46:	58                   	pop    eax
c0014b47:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014b4c:	5a                   	pop    edx
c0014b4d:	68 b4 b8 02 c0       	push   0xc002b8b4
c0014b52:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b58:	e8 8f bf ff ff       	call   c0010aec <VgaText::puts(char const*)>
c0014b5d:	0f 21 f0             	mov    eax,db6
c0014b60:	59                   	pop    ecx
c0014b61:	5e                   	pop    esi
c0014b62:	50                   	push   eax
c0014b63:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014b68:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b6e:	e8 33 bf ff ff       	call   c0010aa6 <VgaText::putx(unsigned int)>
c0014b73:	5f                   	pop    edi
c0014b74:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014b79:	5d                   	pop    ebp
c0014b7a:	68 bc b8 02 c0       	push   0xc002b8bc
c0014b7f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b85:	e8 62 bf ff ff       	call   c0010aec <VgaText::puts(char const*)>
c0014b8a:	0f 21 f8             	mov    eax,db7
c0014b8d:	5a                   	pop    edx
c0014b8e:	59                   	pop    ecx
c0014b8f:	50                   	push   eax
c0014b90:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014b95:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b9b:	e8 06 bf ff ff       	call   c0010aa6 <VgaText::putx(unsigned int)>
c0014ba0:	5e                   	pop    esi
c0014ba1:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ba4:	e8 07 8b 00 00       	call   c001d6b0 <Thr::getDriverNameFromAddress(unsigned long)>
c0014ba9:	83 c4 10             	add    esp,0x10
c0014bac:	85 c0                	test   eax,eax
c0014bae:	74 7d                	je     c0014c2d <displayDebugInfo(regs*)+0x48b>
c0014bb0:	89 c6                	mov    esi,eax
c0014bb2:	50                   	push   eax
c0014bb3:	50                   	push   eax
c0014bb4:	56                   	push   esi
c0014bb5:	68 c4 b8 02 c0       	push   0xc002b8c4
c0014bba:	e8 38 dd ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0014bbf:	5a                   	pop    edx
c0014bc0:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014bc5:	59                   	pop    ecx
c0014bc6:	68 d2 b8 02 c0       	push   0xc002b8d2
c0014bcb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bd1:	e8 16 bf ff ff       	call   c0010aec <VgaText::puts(char const*)>
c0014bd6:	5f                   	pop    edi
c0014bd7:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014bdc:	5d                   	pop    ebp
c0014bdd:	56                   	push   esi
c0014bde:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014be4:	e8 03 bf ff ff       	call   c0010aec <VgaText::puts(char const*)>
c0014be9:	58                   	pop    eax
c0014bea:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014bef:	5a                   	pop    edx
c0014bf0:	68 de b8 02 c0       	push   0xc002b8de
c0014bf5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bfb:	e8 ec be ff ff       	call   c0010aec <VgaText::puts(char const*)>
c0014c00:	59                   	pop    ecx
c0014c01:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0014c06:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014c0c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014c0f:	e8 d3 8a 00 00       	call   c001d6e7 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014c14:	5b                   	pop    ebx
c0014c15:	5d                   	pop    ebp
c0014c16:	50                   	push   eax
c0014c17:	57                   	push   edi
c0014c18:	e8 89 be ff ff       	call   c0010aa6 <VgaText::putx(unsigned int)>
c0014c1d:	58                   	pop    eax
c0014c1e:	5a                   	pop    edx
c0014c1f:	56                   	push   esi
c0014c20:	68 ea b8 02 c0       	push   0xc002b8ea
c0014c25:	e8 cd dc ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0014c2a:	83 c4 10             	add    esp,0x10
c0014c2d:	fa                   	cli    
c0014c2e:	f4                   	hlt    
c0014c2f:	eb fe                	jmp    c0014c2f <displayDebugInfo(regs*)+0x48d>

c0014c31 <x87EmulHandler(regs*, void*)>:
c0014c31:	83 ec 0c             	sub    esp,0xc
c0014c34:	0f 20 c2             	mov    edx,cr0
c0014c37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c3c:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014c40:	75 4b                	jne    c0014c8d <x87EmulHandler(regs*, void*)+0x5c>
c0014c42:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0014c47:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014c4d:	85 c0                	test   eax,eax
c0014c4f:	74 05                	je     c0014c56 <x87EmulHandler(regs*, void*)+0x25>
c0014c51:	83 e2 08             	and    edx,0x8
c0014c54:	75 17                	jne    c0014c6d <x87EmulHandler(regs*, void*)+0x3c>
c0014c56:	83 ec 0c             	sub    esp,0xc
c0014c59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c5d:	e8 45 af 00 00       	call   c001fba7 <Vm::x87Handler(regs*)>
c0014c62:	83 c4 10             	add    esp,0x10
c0014c65:	84 c0                	test   al,al
c0014c67:	74 24                	je     c0014c8d <x87EmulHandler(regs*, void*)+0x5c>
c0014c69:	83 c4 0c             	add    esp,0xc
c0014c6c:	c3                   	ret    
c0014c6d:	83 ec 0c             	sub    esp,0xc
c0014c70:	68 10 b9 02 c0       	push   0xc002b910
c0014c75:	e8 7d dc ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0014c7a:	0f 06                	clts   
c0014c7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c81:	83 c4 10             	add    esp,0x10
c0014c84:	a3 a8 f1 02 c0       	mov    ds:0xc002f1a8,eax
c0014c89:	83 c4 0c             	add    esp,0xc
c0014c8c:	c3                   	ret    
c0014c8d:	83 ec 0c             	sub    esp,0xc
c0014c90:	68 fa b8 02 c0       	push   0xc002b8fa
c0014c95:	e8 5d dc ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0014c9a:	5a                   	pop    edx
c0014c9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c9f:	e8 fe fa ff ff       	call   c00147a2 <displayDebugInfo(regs*)>

c0014ca4 <gpFault(regs*, void*)>:
c0014ca4:	53                   	push   ebx
c0014ca5:	83 ec 14             	sub    esp,0x14
c0014ca8:	c7 05 a4 f1 02 c0 80 f0 01 c0 	mov    DWORD PTR ds:0xc002f1a4,0xc001f080
c0014cb2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014cb6:	53                   	push   ebx
c0014cb7:	e8 c4 a3 00 00       	call   c001f080 <Vm::faultHandler(regs*)>
c0014cbc:	83 c4 10             	add    esp,0x10
c0014cbf:	84 c0                	test   al,al
c0014cc1:	74 05                	je     c0014cc8 <gpFault(regs*, void*)+0x24>
c0014cc3:	83 c4 08             	add    esp,0x8
c0014cc6:	5b                   	pop    ebx
c0014cc7:	c3                   	ret    
c0014cc8:	83 ec 0c             	sub    esp,0xc
c0014ccb:	68 1d b9 02 c0       	push   0xc002b91d
c0014cd0:	e8 22 dc ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0014cd5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014cd8:	e8 c5 fa ff ff       	call   c00147a2 <displayDebugInfo(regs*)>

c0014cdd <pgFault(regs*, void*)>:
c0014cdd:	83 ec 18             	sub    esp,0x18
c0014ce0:	68 38 b9 02 c0       	push   0xc002b938
c0014ce5:	e8 0d dc ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0014cea:	58                   	pop    eax
c0014ceb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cef:	e8 ae fa ff ff       	call   c00147a2 <displayDebugInfo(regs*)>

c0014cf4 <otherISRHandler(regs*, void*)>:
c0014cf4:	53                   	push   ebx
c0014cf5:	83 ec 0c             	sub    esp,0xc
c0014cf8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014cfc:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014cff:	50                   	push   eax
c0014d00:	50                   	push   eax
c0014d01:	68 45 b9 02 c0       	push   0xc002b945
c0014d06:	e8 ec db ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0014d0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d0e:	e8 8f fa ff ff       	call   c00147a2 <displayDebugInfo(regs*)>

c0014d13 <opcodeFault(regs*, void*)>:
c0014d13:	55                   	push   ebp
c0014d14:	89 e5                	mov    ebp,esp
c0014d16:	56                   	push   esi
c0014d17:	53                   	push   ebx
c0014d18:	83 ec 40             	sub    esp,0x40
c0014d1b:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0014d20:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014d26:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014d2c:	84 c0                	test   al,al
c0014d2e:	74 24                	je     c0014d54 <opcodeFault(regs*, void*)+0x41>
c0014d30:	83 ec 0c             	sub    esp,0xc
c0014d33:	68 64 b9 02 c0       	push   0xc002b964
c0014d38:	e8 ba db ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0014d3d:	83 c4 10             	add    esp,0x10
c0014d40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d43:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d46:	8d 50 19             	lea    edx,[eax+0x19]
c0014d49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d4c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d4f:	e9 d5 05 00 00       	jmp    c0015329 <opcodeFault(regs*, void*)+0x616>
c0014d54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d57:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d5a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014d5d:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014d61:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014d65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d68:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d6b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014d6e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d71:	8a 00                	mov    al,BYTE PTR [eax]
c0014d73:	3c f0                	cmp    al,0xf0
c0014d75:	75 17                	jne    c0014d8e <opcodeFault(regs*, void*)+0x7b>
c0014d77:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d7d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d80:	8d 50 01             	lea    edx,[eax+0x1]
c0014d83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d86:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d89:	e9 da 00 00 00       	jmp    c0014e68 <opcodeFault(regs*, void*)+0x155>
c0014d8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d91:	8a 00                	mov    al,BYTE PTR [eax]
c0014d93:	3c f2                	cmp    al,0xf2
c0014d95:	74 09                	je     c0014da0 <opcodeFault(regs*, void*)+0x8d>
c0014d97:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d9a:	8a 00                	mov    al,BYTE PTR [eax]
c0014d9c:	3c f3                	cmp    al,0xf3
c0014d9e:	75 1b                	jne    c0014dbb <opcodeFault(regs*, void*)+0xa8>
c0014da0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014da4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014da7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014daa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dad:	8d 50 01             	lea    edx,[eax+0x1]
c0014db0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014db6:	e9 ad 00 00 00       	jmp    c0014e68 <opcodeFault(regs*, void*)+0x155>
c0014dbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dbe:	8a 00                	mov    al,BYTE PTR [eax]
c0014dc0:	3c 66                	cmp    al,0x66
c0014dc2:	75 1f                	jne    c0014de3 <opcodeFault(regs*, void*)+0xd0>
c0014dc4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014dc8:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014dcc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014dcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dd5:	8d 50 01             	lea    edx,[eax+0x1]
c0014dd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ddb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dde:	e9 85 00 00 00       	jmp    c0014e68 <opcodeFault(regs*, void*)+0x155>
c0014de3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014de6:	8a 00                	mov    al,BYTE PTR [eax]
c0014de8:	3c 67                	cmp    al,0x67
c0014dea:	75 18                	jne    c0014e04 <opcodeFault(regs*, void*)+0xf1>
c0014dec:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014df0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014df3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014df6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014df9:	8d 50 01             	lea    edx,[eax+0x1]
c0014dfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dff:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e02:	eb 64                	jmp    c0014e68 <opcodeFault(regs*, void*)+0x155>
c0014e04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e07:	8a 00                	mov    al,BYTE PTR [eax]
c0014e09:	3c 2e                	cmp    al,0x2e
c0014e0b:	74 09                	je     c0014e16 <opcodeFault(regs*, void*)+0x103>
c0014e0d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e10:	8a 00                	mov    al,BYTE PTR [eax]
c0014e12:	3c 3e                	cmp    al,0x3e
c0014e14:	75 18                	jne    c0014e2e <opcodeFault(regs*, void*)+0x11b>
c0014e16:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014e1a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e20:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e23:	8d 50 01             	lea    edx,[eax+0x1]
c0014e26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e29:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e2c:	eb 3a                	jmp    c0014e68 <opcodeFault(regs*, void*)+0x155>
c0014e2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e31:	8a 00                	mov    al,BYTE PTR [eax]
c0014e33:	3c 36                	cmp    al,0x36
c0014e35:	74 1b                	je     c0014e52 <opcodeFault(regs*, void*)+0x13f>
c0014e37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e3a:	8a 00                	mov    al,BYTE PTR [eax]
c0014e3c:	3c 26                	cmp    al,0x26
c0014e3e:	74 12                	je     c0014e52 <opcodeFault(regs*, void*)+0x13f>
c0014e40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e43:	8a 00                	mov    al,BYTE PTR [eax]
c0014e45:	3c 64                	cmp    al,0x64
c0014e47:	74 09                	je     c0014e52 <opcodeFault(regs*, void*)+0x13f>
c0014e49:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e4c:	8a 00                	mov    al,BYTE PTR [eax]
c0014e4e:	3c 65                	cmp    al,0x65
c0014e50:	75 16                	jne    c0014e68 <opcodeFault(regs*, void*)+0x155>
c0014e52:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014e56:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e5f:	8d 50 01             	lea    edx,[eax+0x1]
c0014e62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e65:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e6b:	8a 00                	mov    al,BYTE PTR [eax]
c0014e6d:	3c 0f                	cmp    al,0xf
c0014e6f:	0f 85 ad 00 00 00    	jne    c0014f22 <opcodeFault(regs*, void*)+0x20f>
c0014e75:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e78:	40                   	inc    eax
c0014e79:	8a 00                	mov    al,BYTE PTR [eax]
c0014e7b:	3c c2                	cmp    al,0xc2
c0014e7d:	74 0e                	je     c0014e8d <opcodeFault(regs*, void*)+0x17a>
c0014e7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e82:	40                   	inc    eax
c0014e83:	8a 00                	mov    al,BYTE PTR [eax]
c0014e85:	3c c3                	cmp    al,0xc3
c0014e87:	0f 85 95 00 00 00    	jne    c0014f22 <opcodeFault(regs*, void*)+0x20f>
c0014e8d:	83 ec 0c             	sub    esp,0xc
c0014e90:	68 87 b9 02 c0       	push   0xc002b987
c0014e95:	e8 5d da ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0014e9a:	83 c4 10             	add    esp,0x10
c0014e9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ea3:	8d 50 01             	lea    edx,[eax+0x1]
c0014ea6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014eac:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014eaf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eb2:	8a 00                	mov    al,BYTE PTR [eax]
c0014eb4:	8d 50 fe             	lea    edx,[eax-0x2]
c0014eb7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eba:	88 10                	mov    BYTE PTR [eax],dl
c0014ebc:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014ebf:	50                   	push   eax
c0014ec0:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014ec3:	50                   	push   eax
c0014ec4:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014ec7:	50                   	push   eax
c0014ec8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ecb:	e8 2a 4b 00 00       	call   c00199fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014ed0:	83 c4 10             	add    esp,0x10
c0014ed3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ed9:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014edc:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014edf:	01 d0                	add    eax,edx
c0014ee1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014ee4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014eea:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014eed:	48                   	dec    eax
c0014eee:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014ef1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014ef7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014efd:	83 ec 04             	sub    esp,0x4
c0014f00:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014f03:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014f06:	50                   	push   eax
c0014f07:	e8 a8 b2 fe ff       	call   c00001b4 <voodooXADD>
c0014f0c:	83 c4 10             	add    esp,0x10
c0014f0f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014f12:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014f15:	01 c2                	add    edx,eax
c0014f17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f1a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f1d:	e9 07 04 00 00       	jmp    c0015329 <opcodeFault(regs*, void*)+0x616>
c0014f22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f25:	8a 00                	mov    al,BYTE PTR [eax]
c0014f27:	3c 0f                	cmp    al,0xf
c0014f29:	0f 85 8b 01 00 00    	jne    c00150ba <opcodeFault(regs*, void*)+0x3a7>
c0014f2f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f32:	40                   	inc    eax
c0014f33:	8a 00                	mov    al,BYTE PTR [eax]
c0014f35:	3c c7                	cmp    al,0xc7
c0014f37:	0f 86 7d 01 00 00    	jbe    c00150ba <opcodeFault(regs*, void*)+0x3a7>
c0014f3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f40:	40                   	inc    eax
c0014f41:	8a 00                	mov    al,BYTE PTR [eax]
c0014f43:	3c cf                	cmp    al,0xcf
c0014f45:	0f 87 6f 01 00 00    	ja     c00150ba <opcodeFault(regs*, void*)+0x3a7>
c0014f4b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f4e:	40                   	inc    eax
c0014f4f:	8a 00                	mov    al,BYTE PTR [eax]
c0014f51:	83 c0 38             	add    eax,0x38
c0014f54:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014f57:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014f5b:	75 0b                	jne    c0014f68 <opcodeFault(regs*, void*)+0x255>
c0014f5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f60:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014f63:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f66:	eb 75                	jmp    c0014fdd <opcodeFault(regs*, void*)+0x2ca>
c0014f68:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014f6c:	75 0b                	jne    c0014f79 <opcodeFault(regs*, void*)+0x266>
c0014f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f71:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014f74:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f77:	eb 64                	jmp    c0014fdd <opcodeFault(regs*, void*)+0x2ca>
c0014f79:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014f7d:	75 0b                	jne    c0014f8a <opcodeFault(regs*, void*)+0x277>
c0014f7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f82:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014f85:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f88:	eb 53                	jmp    c0014fdd <opcodeFault(regs*, void*)+0x2ca>
c0014f8a:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014f8e:	75 0b                	jne    c0014f9b <opcodeFault(regs*, void*)+0x288>
c0014f90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f93:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f96:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f99:	eb 42                	jmp    c0014fdd <opcodeFault(regs*, void*)+0x2ca>
c0014f9b:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014f9f:	75 0b                	jne    c0014fac <opcodeFault(regs*, void*)+0x299>
c0014fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa4:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014fa7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014faa:	eb 31                	jmp    c0014fdd <opcodeFault(regs*, void*)+0x2ca>
c0014fac:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014fb0:	75 0b                	jne    c0014fbd <opcodeFault(regs*, void*)+0x2aa>
c0014fb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fb5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014fb8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014fbb:	eb 20                	jmp    c0014fdd <opcodeFault(regs*, void*)+0x2ca>
c0014fbd:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014fc1:	75 0b                	jne    c0014fce <opcodeFault(regs*, void*)+0x2bb>
c0014fc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014fc9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014fcc:	eb 0f                	jmp    c0014fdd <opcodeFault(regs*, void*)+0x2ca>
c0014fce:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014fd2:	75 09                	jne    c0014fdd <opcodeFault(regs*, void*)+0x2ca>
c0014fd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014fda:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014fdd:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014fe1:	74 10                	je     c0014ff3 <opcodeFault(regs*, void*)+0x2e0>
c0014fe3:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014fea:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014ff1:	eb 2d                	jmp    c0015020 <opcodeFault(regs*, void*)+0x30d>
c0014ff3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ff6:	c1 e0 18             	shl    eax,0x18
c0014ff9:	89 c2                	mov    edx,eax
c0014ffb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ffe:	c1 e0 08             	shl    eax,0x8
c0015001:	25 00 00 ff 00       	and    eax,0xff0000
c0015006:	09 c2                	or     edx,eax
c0015008:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001500b:	c1 e8 08             	shr    eax,0x8
c001500e:	25 00 ff 00 00       	and    eax,0xff00
c0015013:	09 c2                	or     edx,eax
c0015015:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015018:	c1 e8 18             	shr    eax,0x18
c001501b:	09 d0                	or     eax,edx
c001501d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015020:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015024:	75 0b                	jne    c0015031 <opcodeFault(regs*, void*)+0x31e>
c0015026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015029:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001502c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001502f:	eb 75                	jmp    c00150a6 <opcodeFault(regs*, void*)+0x393>
c0015031:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015035:	75 0b                	jne    c0015042 <opcodeFault(regs*, void*)+0x32f>
c0015037:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001503a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001503d:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015040:	eb 64                	jmp    c00150a6 <opcodeFault(regs*, void*)+0x393>
c0015042:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015046:	75 0b                	jne    c0015053 <opcodeFault(regs*, void*)+0x340>
c0015048:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001504b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001504e:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015051:	eb 53                	jmp    c00150a6 <opcodeFault(regs*, void*)+0x393>
c0015053:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015057:	75 0b                	jne    c0015064 <opcodeFault(regs*, void*)+0x351>
c0015059:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001505c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001505f:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015062:	eb 42                	jmp    c00150a6 <opcodeFault(regs*, void*)+0x393>
c0015064:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015068:	75 0b                	jne    c0015075 <opcodeFault(regs*, void*)+0x362>
c001506a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001506d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015070:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015073:	eb 31                	jmp    c00150a6 <opcodeFault(regs*, void*)+0x393>
c0015075:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015079:	75 0b                	jne    c0015086 <opcodeFault(regs*, void*)+0x373>
c001507b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001507e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015081:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015084:	eb 20                	jmp    c00150a6 <opcodeFault(regs*, void*)+0x393>
c0015086:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001508a:	75 0b                	jne    c0015097 <opcodeFault(regs*, void*)+0x384>
c001508c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001508f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015092:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015095:	eb 0f                	jmp    c00150a6 <opcodeFault(regs*, void*)+0x393>
c0015097:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001509b:	75 09                	jne    c00150a6 <opcodeFault(regs*, void*)+0x393>
c001509d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00150a3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00150a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150ac:	8d 50 02             	lea    edx,[eax+0x2]
c00150af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150b5:	e9 6f 02 00 00       	jmp    c0015329 <opcodeFault(regs*, void*)+0x616>
c00150ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150bd:	8a 00                	mov    al,BYTE PTR [eax]
c00150bf:	3c 0f                	cmp    al,0xf
c00150c1:	0f 85 8d 01 00 00    	jne    c0015254 <opcodeFault(regs*, void*)+0x541>
c00150c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150ca:	40                   	inc    eax
c00150cb:	8a 00                	mov    al,BYTE PTR [eax]
c00150cd:	3c c7                	cmp    al,0xc7
c00150cf:	0f 85 7f 01 00 00    	jne    c0015254 <opcodeFault(regs*, void*)+0x541>
c00150d5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00150d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150db:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150de:	8d 50 01             	lea    edx,[eax+0x1]
c00150e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150e7:	8d 45 ba             	lea    eax,[ebp-0x46]
c00150ea:	50                   	push   eax
c00150eb:	8d 45 bb             	lea    eax,[ebp-0x45]
c00150ee:	50                   	push   eax
c00150ef:	8d 45 bc             	lea    eax,[ebp-0x44]
c00150f2:	50                   	push   eax
c00150f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00150f6:	e8 ff 48 00 00       	call   c00199fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00150fb:	83 c4 10             	add    esp,0x10
c00150fe:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015101:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015104:	83 f0 01             	xor    eax,0x1
c0015107:	84 c0                	test   al,al
c0015109:	0f 84 45 01 00 00    	je     c0015254 <opcodeFault(regs*, void*)+0x541>
c001510f:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015112:	3c 01                	cmp    al,0x1
c0015114:	0f 85 3a 01 00 00    	jne    c0015254 <opcodeFault(regs*, void*)+0x541>
c001511a:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001511d:	83 f0 01             	xor    eax,0x1
c0015120:	84 c0                	test   al,al
c0015122:	0f 84 2c 01 00 00    	je     c0015254 <opcodeFault(regs*, void*)+0x541>
c0015128:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001512b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001512e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015131:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015138:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001513b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001513e:	89 c2                	mov    edx,eax
c0015140:	b8 00 00 00 00       	mov    eax,0x0
c0015145:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015148:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001514b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001514e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015151:	ba 00 00 00 00       	mov    edx,0x0
c0015156:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015159:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001515c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001515f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015162:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015165:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001516c:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001516f:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015172:	89 c2                	mov    edx,eax
c0015174:	b8 00 00 00 00       	mov    eax,0x0
c0015179:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001517c:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001517f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015182:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015185:	ba 00 00 00 00       	mov    edx,0x0
c001518a:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001518d:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015190:	fa                   	cli    
c0015191:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c0015196:	40                   	inc    eax
c0015197:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001519c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001519f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00151a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a4:	89 c1                	mov    ecx,eax
c00151a6:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00151a9:	89 cb                	mov    ebx,ecx
c00151ab:	89 d0                	mov    eax,edx
c00151ad:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00151b0:	89 c6                	mov    esi,eax
c00151b2:	89 f0                	mov    eax,esi
c00151b4:	09 d8                	or     eax,ebx
c00151b6:	85 c0                	test   eax,eax
c00151b8:	75 21                	jne    c00151db <opcodeFault(regs*, void*)+0x4c8>
c00151ba:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00151bd:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00151c0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00151c3:	89 01                	mov    DWORD PTR [ecx],eax
c00151c5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00151c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151cb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151ce:	83 c8 40             	or     eax,0x40
c00151d1:	89 c2                	mov    edx,eax
c00151d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d6:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00151d9:	eb 3e                	jmp    c0015219 <opcodeFault(regs*, void*)+0x506>
c00151db:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00151de:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00151e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00151e3:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00151e6:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00151e9:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00151ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ef:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00151f2:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00151f5:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00151f8:	89 d0                	mov    eax,edx
c00151fa:	31 d2                	xor    edx,edx
c00151fc:	89 c3                	mov    ebx,eax
c00151fe:	89 d6                	mov    esi,edx
c0015200:	89 da                	mov    edx,ebx
c0015202:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015205:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015208:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001520b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001520e:	83 e0 bf             	and    eax,0xffffffbf
c0015211:	89 c2                	mov    edx,eax
c0015213:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015216:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015219:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001521e:	48                   	dec    eax
c001521f:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c0015224:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c0015229:	85 c0                	test   eax,eax
c001522b:	75 01                	jne    c001522e <opcodeFault(regs*, void*)+0x51b>
c001522d:	fb                   	sti    
c001522e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015231:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015234:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015237:	01 c2                	add    edx,eax
c0015239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001523c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001523f:	83 ec 0c             	sub    esp,0xc
c0015242:	68 96 b9 02 c0       	push   0xc002b996
c0015247:	e8 ab d6 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001524c:	83 c4 10             	add    esp,0x10
c001524f:	e9 d5 00 00 00       	jmp    c0015329 <opcodeFault(regs*, void*)+0x616>
c0015254:	83 ec 0c             	sub    esp,0xc
c0015257:	68 a9 b9 02 c0       	push   0xc002b9a9
c001525c:	e8 96 d6 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0015261:	83 c4 10             	add    esp,0x10
c0015264:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015267:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001526a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001526d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015270:	c1 e0 04             	shl    eax,0x4
c0015273:	01 d0                	add    eax,edx
c0015275:	83 c0 03             	add    eax,0x3
c0015278:	8a 00                	mov    al,BYTE PTR [eax]
c001527a:	0f b6 d8             	movzx  ebx,al
c001527d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015280:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015283:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015286:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015289:	c1 e0 04             	shl    eax,0x4
c001528c:	01 d0                	add    eax,edx
c001528e:	83 c0 02             	add    eax,0x2
c0015291:	8a 00                	mov    al,BYTE PTR [eax]
c0015293:	0f b6 c8             	movzx  ecx,al
c0015296:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015299:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001529c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001529f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152a2:	c1 e0 04             	shl    eax,0x4
c00152a5:	01 d0                	add    eax,edx
c00152a7:	40                   	inc    eax
c00152a8:	8a 00                	mov    al,BYTE PTR [eax]
c00152aa:	0f b6 d0             	movzx  edx,al
c00152ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b0:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00152b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152b9:	c1 e0 04             	shl    eax,0x4
c00152bc:	01 f0                	add    eax,esi
c00152be:	8a 00                	mov    al,BYTE PTR [eax]
c00152c0:	0f b6 c0             	movzx  eax,al
c00152c3:	83 ec 0c             	sub    esp,0xc
c00152c6:	53                   	push   ebx
c00152c7:	51                   	push   ecx
c00152c8:	52                   	push   edx
c00152c9:	50                   	push   eax
c00152ca:	68 bc b9 02 c0       	push   0xc002b9bc
c00152cf:	e8 23 d6 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00152d4:	83 c4 20             	add    esp,0x20
c00152d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152da:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152dd:	83 c0 03             	add    eax,0x3
c00152e0:	8a 00                	mov    al,BYTE PTR [eax]
c00152e2:	0f b6 d8             	movzx  ebx,al
c00152e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152e8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152eb:	83 c0 02             	add    eax,0x2
c00152ee:	8a 00                	mov    al,BYTE PTR [eax]
c00152f0:	0f b6 c8             	movzx  ecx,al
c00152f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152f9:	40                   	inc    eax
c00152fa:	8a 00                	mov    al,BYTE PTR [eax]
c00152fc:	0f b6 d0             	movzx  edx,al
c00152ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015302:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015305:	8a 00                	mov    al,BYTE PTR [eax]
c0015307:	0f b6 c0             	movzx  eax,al
c001530a:	83 ec 0c             	sub    esp,0xc
c001530d:	53                   	push   ebx
c001530e:	51                   	push   ecx
c001530f:	52                   	push   edx
c0015310:	50                   	push   eax
c0015311:	68 e4 b9 02 c0       	push   0xc002b9e4
c0015316:	e8 dc d5 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001531b:	83 c4 20             	add    esp,0x20
c001531e:	83 ec 0c             	sub    esp,0xc
c0015321:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015324:	e8 79 f4 ff ff       	call   c00147a2 <displayDebugInfo(regs*)>
c0015329:	8d 65 f8             	lea    esp,[ebp-0x8]
c001532c:	5b                   	pop    ebx
c001532d:	5e                   	pop    esi
c001532e:	5d                   	pop    ebp
c001532f:	c3                   	ret    

c0015330 <displayProgramFault(char const*)>:
c0015330:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015335:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015338:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001533e:	85 c0                	test   eax,eax
c0015340:	74 15                	je     c0015357 <displayProgramFault(char const*)+0x27>
c0015342:	83 ec 0c             	sub    esp,0xc
c0015345:	6a 04                	push   0x4
c0015347:	6a 0f                	push   0xf
c0015349:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001534d:	50                   	push   eax
c001534e:	e8 95 b4 ff ff       	call   c00107e8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015353:	83 c4 1c             	add    esp,0x1c
c0015356:	c3                   	ret    
c0015357:	c3                   	ret    

c0015358 <setupInterruptController()>:
c0015358:	55                   	push   ebp
c0015359:	89 e5                	mov    ebp,esp
c001535b:	53                   	push   ebx
c001535c:	83 ec 24             	sub    esp,0x24
c001535f:	b8 00 00 00 00       	mov    eax,0x0
c0015364:	85 c0                	test   eax,eax
c0015366:	0f 95 c0             	setne  al
c0015369:	84 c0                	test   al,al
c001536b:	74 5b                	je     c00153c8 <setupInterruptController()+0x70>
c001536d:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015374:	83 ec 0c             	sub    esp,0xc
c0015377:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001537a:	e8 0d a5 ff ff       	call   c000f88c <malloc>
c001537f:	83 c4 10             	add    esp,0x10
c0015382:	89 c3                	mov    ebx,eax
c0015384:	83 ec 0c             	sub    esp,0xc
c0015387:	53                   	push   ebx
c0015388:	e8 09 0e 01 00       	call   c0026196 <APIC::APIC()>
c001538d:	83 c4 10             	add    esp,0x10
c0015390:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015393:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015396:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015399:	8b 00                	mov    eax,DWORD PTR [eax]
c001539b:	83 c0 08             	add    eax,0x8
c001539e:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a0:	6a 00                	push   0x0
c00153a2:	6a 00                	push   0x0
c00153a4:	6a 00                	push   0x0
c00153a6:	52                   	push   edx
c00153a7:	ff d0                	call   eax
c00153a9:	83 c4 10             	add    esp,0x10
c00153ac:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c00153b1:	83 ec 08             	sub    esp,0x8
c00153b4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00153b7:	50                   	push   eax
c00153b8:	e8 73 e9 ff ff       	call   c0013d30 <Device::addChild(Device*)>
c00153bd:	83 c4 10             	add    esp,0x10
c00153c0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00153c3:	e9 89 03 00 00       	jmp    c0015751 <setupInterruptController()+0x3f9>
c00153c8:	a0 a0 19 03 c0       	mov    al,ds:0xc00319a0
c00153cd:	84 c0                	test   al,al
c00153cf:	75 24                	jne    c00153f5 <setupInterruptController()+0x9d>
c00153d1:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c00153d6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00153dc:	83 e2 fe             	and    edx,0xfffffffe
c00153df:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00153e5:	83 ec 0c             	sub    esp,0xc
c00153e8:	68 09 ba 02 c0       	push   0xc002ba09
c00153ed:	e8 05 d5 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00153f2:	83 c4 10             	add    esp,0x10
c00153f5:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c00153fa:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015400:	83 e0 01             	and    eax,0x1
c0015403:	84 c0                	test   al,al
c0015405:	0f 95 c0             	setne  al
c0015408:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001540b:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015412:	83 ec 0c             	sub    esp,0xc
c0015415:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015418:	e8 6f a4 ff ff       	call   c000f88c <malloc>
c001541d:	83 c4 10             	add    esp,0x10
c0015420:	89 c3                	mov    ebx,eax
c0015422:	83 ec 0c             	sub    esp,0xc
c0015425:	53                   	push   ebx
c0015426:	e8 c3 12 01 00       	call   c00266ee <PIC::PIC()>
c001542b:	83 c4 10             	add    esp,0x10
c001542e:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015431:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015434:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015437:	8b 00                	mov    eax,DWORD PTR [eax]
c0015439:	83 c0 08             	add    eax,0x8
c001543c:	8b 00                	mov    eax,DWORD PTR [eax]
c001543e:	6a 00                	push   0x0
c0015440:	6a 00                	push   0x0
c0015442:	6a 00                	push   0x0
c0015444:	52                   	push   edx
c0015445:	ff d0                	call   eax
c0015447:	83 c4 10             	add    esp,0x10
c001544a:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001544e:	74 73                	je     c00154c3 <setupInterruptController()+0x16b>
c0015450:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015453:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015456:	8b 00                	mov    eax,DWORD PTR [eax]
c0015458:	83 c0 0c             	add    eax,0xc
c001545b:	8b 00                	mov    eax,DWORD PTR [eax]
c001545d:	6a 00                	push   0x0
c001545f:	6a 00                	push   0x0
c0015461:	6a 00                	push   0x0
c0015463:	52                   	push   edx
c0015464:	ff d0                	call   eax
c0015466:	83 c4 10             	add    esp,0x10
c0015469:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001546d:	74 15                	je     c0015484 <setupInterruptController()+0x12c>
c001546f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015472:	8b 00                	mov    eax,DWORD PTR [eax]
c0015474:	83 c0 04             	add    eax,0x4
c0015477:	8b 00                	mov    eax,DWORD PTR [eax]
c0015479:	83 ec 0c             	sub    esp,0xc
c001547c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001547f:	ff d0                	call   eax
c0015481:	83 c4 10             	add    esp,0x10
c0015484:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001548b:	83 ec 0c             	sub    esp,0xc
c001548e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015491:	e8 f6 a3 ff ff       	call   c000f88c <malloc>
c0015496:	83 c4 10             	add    esp,0x10
c0015499:	89 c3                	mov    ebx,eax
c001549b:	83 ec 0c             	sub    esp,0xc
c001549e:	53                   	push   ebx
c001549f:	e8 f2 0c 01 00       	call   c0026196 <APIC::APIC()>
c00154a4:	83 c4 10             	add    esp,0x10
c00154a7:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00154aa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00154ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b2:	83 c0 08             	add    eax,0x8
c00154b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b7:	6a 00                	push   0x0
c00154b9:	6a 00                	push   0x0
c00154bb:	6a 00                	push   0x0
c00154bd:	52                   	push   edx
c00154be:	ff d0                	call   eax
c00154c0:	83 c4 10             	add    esp,0x10
c00154c3:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c00154c8:	83 ec 08             	sub    esp,0x8
c00154cb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154ce:	50                   	push   eax
c00154cf:	e8 5c e8 ff ff       	call   c0013d30 <Device::addChild(Device*)>
c00154d4:	83 c4 10             	add    esp,0x10
c00154d7:	c7 05 a8 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1a8,0x0
c00154e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e6:	83 c0 24             	add    eax,0x24
c00154e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00154eb:	6a 00                	push   0x0
c00154ed:	68 f4 4c 01 c0       	push   0xc0014cf4
c00154f2:	6a 00                	push   0x0
c00154f4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154f7:	ff d0                	call   eax
c00154f9:	83 c4 10             	add    esp,0x10
c00154fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015501:	83 c0 24             	add    eax,0x24
c0015504:	8b 00                	mov    eax,DWORD PTR [eax]
c0015506:	6a 00                	push   0x0
c0015508:	68 f4 4c 01 c0       	push   0xc0014cf4
c001550d:	6a 01                	push   0x1
c001550f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015512:	ff d0                	call   eax
c0015514:	83 c4 10             	add    esp,0x10
c0015517:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001551a:	8b 00                	mov    eax,DWORD PTR [eax]
c001551c:	83 c0 24             	add    eax,0x24
c001551f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015521:	6a 00                	push   0x0
c0015523:	68 ff 45 01 c0       	push   0xc00145ff
c0015528:	6a 02                	push   0x2
c001552a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001552d:	ff d0                	call   eax
c001552f:	83 c4 10             	add    esp,0x10
c0015532:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015535:	8b 00                	mov    eax,DWORD PTR [eax]
c0015537:	83 c0 24             	add    eax,0x24
c001553a:	8b 00                	mov    eax,DWORD PTR [eax]
c001553c:	6a 00                	push   0x0
c001553e:	68 f4 4c 01 c0       	push   0xc0014cf4
c0015543:	6a 03                	push   0x3
c0015545:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015548:	ff d0                	call   eax
c001554a:	83 c4 10             	add    esp,0x10
c001554d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015550:	8b 00                	mov    eax,DWORD PTR [eax]
c0015552:	83 c0 24             	add    eax,0x24
c0015555:	8b 00                	mov    eax,DWORD PTR [eax]
c0015557:	6a 00                	push   0x0
c0015559:	68 f4 4c 01 c0       	push   0xc0014cf4
c001555e:	6a 04                	push   0x4
c0015560:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015563:	ff d0                	call   eax
c0015565:	83 c4 10             	add    esp,0x10
c0015568:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001556b:	8b 00                	mov    eax,DWORD PTR [eax]
c001556d:	83 c0 24             	add    eax,0x24
c0015570:	8b 00                	mov    eax,DWORD PTR [eax]
c0015572:	6a 00                	push   0x0
c0015574:	68 f4 4c 01 c0       	push   0xc0014cf4
c0015579:	6a 05                	push   0x5
c001557b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001557e:	ff d0                	call   eax
c0015580:	83 c4 10             	add    esp,0x10
c0015583:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015586:	8b 00                	mov    eax,DWORD PTR [eax]
c0015588:	83 c0 24             	add    eax,0x24
c001558b:	8b 00                	mov    eax,DWORD PTR [eax]
c001558d:	6a 00                	push   0x0
c001558f:	68 13 4d 01 c0       	push   0xc0014d13
c0015594:	6a 06                	push   0x6
c0015596:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015599:	ff d0                	call   eax
c001559b:	83 c4 10             	add    esp,0x10
c001559e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00155a3:	83 c0 24             	add    eax,0x24
c00155a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00155a8:	6a 00                	push   0x0
c00155aa:	68 31 4c 01 c0       	push   0xc0014c31
c00155af:	6a 07                	push   0x7
c00155b1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155b4:	ff d0                	call   eax
c00155b6:	83 c4 10             	add    esp,0x10
c00155b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00155be:	83 c0 24             	add    eax,0x24
c00155c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c3:	6a 00                	push   0x0
c00155c5:	68 1a 44 01 c0       	push   0xc001441a
c00155ca:	6a 08                	push   0x8
c00155cc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155cf:	ff d0                	call   eax
c00155d1:	83 c4 10             	add    esp,0x10
c00155d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d9:	83 c0 24             	add    eax,0x24
c00155dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00155de:	6a 00                	push   0x0
c00155e0:	68 f4 4c 01 c0       	push   0xc0014cf4
c00155e5:	6a 09                	push   0x9
c00155e7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155ea:	ff d0                	call   eax
c00155ec:	83 c4 10             	add    esp,0x10
c00155ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00155f4:	83 c0 24             	add    eax,0x24
c00155f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00155f9:	6a 00                	push   0x0
c00155fb:	68 f4 4c 01 c0       	push   0xc0014cf4
c0015600:	6a 0a                	push   0xa
c0015602:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015605:	ff d0                	call   eax
c0015607:	83 c4 10             	add    esp,0x10
c001560a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001560d:	8b 00                	mov    eax,DWORD PTR [eax]
c001560f:	83 c0 24             	add    eax,0x24
c0015612:	8b 00                	mov    eax,DWORD PTR [eax]
c0015614:	6a 00                	push   0x0
c0015616:	68 f4 4c 01 c0       	push   0xc0014cf4
c001561b:	6a 0b                	push   0xb
c001561d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015620:	ff d0                	call   eax
c0015622:	83 c4 10             	add    esp,0x10
c0015625:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015628:	8b 00                	mov    eax,DWORD PTR [eax]
c001562a:	83 c0 24             	add    eax,0x24
c001562d:	8b 00                	mov    eax,DWORD PTR [eax]
c001562f:	6a 00                	push   0x0
c0015631:	68 f4 4c 01 c0       	push   0xc0014cf4
c0015636:	6a 0c                	push   0xc
c0015638:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001563b:	ff d0                	call   eax
c001563d:	83 c4 10             	add    esp,0x10
c0015640:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015643:	8b 00                	mov    eax,DWORD PTR [eax]
c0015645:	83 c0 24             	add    eax,0x24
c0015648:	8b 00                	mov    eax,DWORD PTR [eax]
c001564a:	6a 00                	push   0x0
c001564c:	68 a4 4c 01 c0       	push   0xc0014ca4
c0015651:	6a 0d                	push   0xd
c0015653:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015656:	ff d0                	call   eax
c0015658:	83 c4 10             	add    esp,0x10
c001565b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001565e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015660:	83 c0 24             	add    eax,0x24
c0015663:	8b 00                	mov    eax,DWORD PTR [eax]
c0015665:	6a 00                	push   0x0
c0015667:	68 dd 4c 01 c0       	push   0xc0014cdd
c001566c:	6a 0e                	push   0xe
c001566e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015671:	ff d0                	call   eax
c0015673:	83 c4 10             	add    esp,0x10
c0015676:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015679:	8b 00                	mov    eax,DWORD PTR [eax]
c001567b:	83 c0 24             	add    eax,0x24
c001567e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015680:	6a 00                	push   0x0
c0015682:	68 f4 4c 01 c0       	push   0xc0014cf4
c0015687:	6a 0f                	push   0xf
c0015689:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001568c:	ff d0                	call   eax
c001568e:	83 c4 10             	add    esp,0x10
c0015691:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015694:	8b 00                	mov    eax,DWORD PTR [eax]
c0015696:	83 c0 24             	add    eax,0x24
c0015699:	8b 00                	mov    eax,DWORD PTR [eax]
c001569b:	6a 00                	push   0x0
c001569d:	68 f4 4c 01 c0       	push   0xc0014cf4
c00156a2:	6a 10                	push   0x10
c00156a4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156a7:	ff d0                	call   eax
c00156a9:	83 c4 10             	add    esp,0x10
c00156ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156af:	8b 00                	mov    eax,DWORD PTR [eax]
c00156b1:	83 c0 24             	add    eax,0x24
c00156b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00156b6:	6a 00                	push   0x0
c00156b8:	68 f4 4c 01 c0       	push   0xc0014cf4
c00156bd:	6a 11                	push   0x11
c00156bf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156c2:	ff d0                	call   eax
c00156c4:	83 c4 10             	add    esp,0x10
c00156c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00156cc:	83 c0 24             	add    eax,0x24
c00156cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00156d1:	6a 00                	push   0x0
c00156d3:	68 f4 4c 01 c0       	push   0xc0014cf4
c00156d8:	6a 12                	push   0x12
c00156da:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156dd:	ff d0                	call   eax
c00156df:	83 c4 10             	add    esp,0x10
c00156e2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00156e7:	83 c0 24             	add    eax,0x24
c00156ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ec:	6a 00                	push   0x0
c00156ee:	68 f4 4c 01 c0       	push   0xc0014cf4
c00156f3:	6a 13                	push   0x13
c00156f5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156f8:	ff d0                	call   eax
c00156fa:	83 c4 10             	add    esp,0x10
c00156fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015700:	8b 00                	mov    eax,DWORD PTR [eax]
c0015702:	83 c0 24             	add    eax,0x24
c0015705:	8b 00                	mov    eax,DWORD PTR [eax]
c0015707:	6a 00                	push   0x0
c0015709:	68 f4 4c 01 c0       	push   0xc0014cf4
c001570e:	6a 14                	push   0x14
c0015710:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015713:	ff d0                	call   eax
c0015715:	83 c4 10             	add    esp,0x10
c0015718:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001571b:	8b 00                	mov    eax,DWORD PTR [eax]
c001571d:	83 c0 24             	add    eax,0x24
c0015720:	8b 00                	mov    eax,DWORD PTR [eax]
c0015722:	6a 00                	push   0x0
c0015724:	68 f4 4c 01 c0       	push   0xc0014cf4
c0015729:	6a 1e                	push   0x1e
c001572b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001572e:	ff d0                	call   eax
c0015730:	83 c4 10             	add    esp,0x10
c0015733:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015736:	8b 00                	mov    eax,DWORD PTR [eax]
c0015738:	83 c0 24             	add    eax,0x24
c001573b:	8b 00                	mov    eax,DWORD PTR [eax]
c001573d:	6a 00                	push   0x0
c001573f:	68 26 c7 01 c0       	push   0xc001c726
c0015744:	6a 60                	push   0x60
c0015746:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015749:	ff d0                	call   eax
c001574b:	83 c4 10             	add    esp,0x10
c001574e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015751:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015754:	c9                   	leave  
c0015755:	c3                   	ret    

c0015756 <InterruptController::convertLegacyIRQNumber(int)>:
c0015756:	55                   	push   ebp
c0015757:	89 e5                	mov    ebp,esp
c0015759:	83 ec 08             	sub    esp,0x8
c001575c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575f:	83 ec 0c             	sub    esp,0xc
c0015762:	50                   	push   eax
c0015763:	e8 c8 e8 ff ff       	call   c0014030 <Device::getName()>
c0015768:	83 c4 10             	add    esp,0x10
c001576b:	8a 00                	mov    al,BYTE PTR [eax]
c001576d:	3c 41                	cmp    al,0x41
c001576f:	0f 94 c0             	sete   al
c0015772:	84 c0                	test   al,al
c0015774:	74 28                	je     c001579e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015776:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001577a:	7f 12                	jg     c001578e <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001577c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001577f:	05 80 e2 02 c0       	add    eax,0xc002e280
c0015784:	8a 00                	mov    al,BYTE PTR [eax]
c0015786:	0f b6 c0             	movzx  eax,al
c0015789:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001578c:	eb 10                	jmp    c001579e <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001578e:	83 ec 0c             	sub    esp,0xc
c0015791:	68 f8 b6 02 c0       	push   0xc002b6f8
c0015796:	e8 92 4b 00 00       	call   c001a32d <Krnl::panic(char const*)>
c001579b:	83 c4 10             	add    esp,0x10
c001579e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00157a1:	c9                   	leave  
c00157a2:	c3                   	ret    
c00157a3:	90                   	nop

c00157a4 <startGUI(void*)>:
c00157a4:	55                   	push   ebp
c00157a5:	89 e5                	mov    ebp,esp
c00157a7:	53                   	push   ebx
c00157a8:	83 ec 04             	sub    esp,0x4
c00157ab:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c00157b0:	48                   	dec    eax
c00157b1:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c00157b6:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c00157bb:	85 c0                	test   eax,eax
c00157bd:	75 01                	jne    c00157c0 <startGUI(void*)+0x1c>
c00157bf:	fb                   	sti    
c00157c0:	8b 1d 28 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f028
c00157c6:	83 ec 08             	sub    esp,0x8
c00157c9:	6a 01                	push   0x1
c00157cb:	68 6c ba 02 c0       	push   0xc002ba6c
c00157d0:	e8 2c 7f 00 00       	call   c001d701 <Thr::loadDLL(char const*, bool)>
c00157d5:	83 c4 10             	add    esp,0x10
c00157d8:	83 ec 08             	sub    esp,0x8
c00157db:	53                   	push   ebx
c00157dc:	50                   	push   eax
c00157dd:	e8 4a 81 00 00       	call   c001d92c <Thr::executeDLL(unsigned long, void*)>
c00157e2:	83 c4 10             	add    esp,0x10
c00157e5:	8b 1d 28 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f028
c00157eb:	83 ec 08             	sub    esp,0x8
c00157ee:	6a 01                	push   0x1
c00157f0:	68 86 ba 02 c0       	push   0xc002ba86
c00157f5:	e8 07 7f 00 00       	call   c001d701 <Thr::loadDLL(char const*, bool)>
c00157fa:	83 c4 10             	add    esp,0x10
c00157fd:	83 ec 08             	sub    esp,0x8
c0015800:	53                   	push   ebx
c0015801:	50                   	push   eax
c0015802:	e8 25 81 00 00       	call   c001d92c <Thr::executeDLL(unsigned long, void*)>
c0015807:	83 c4 10             	add    esp,0x10
c001580a:	90                   	nop
c001580b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001580e:	c9                   	leave  
c001580f:	c3                   	ret    

c0015810 <startGUIVESA(void*)>:
c0015810:	55                   	push   ebp
c0015811:	89 e5                	mov    ebp,esp
c0015813:	53                   	push   ebx
c0015814:	83 ec 04             	sub    esp,0x4
c0015817:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001581c:	48                   	dec    eax
c001581d:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c0015822:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c0015827:	85 c0                	test   eax,eax
c0015829:	75 01                	jne    c001582c <startGUIVESA(void*)+0x1c>
c001582b:	fb                   	sti    
c001582c:	8b 1d 28 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f028
c0015832:	83 ec 08             	sub    esp,0x8
c0015835:	6a 01                	push   0x1
c0015837:	68 a0 ba 02 c0       	push   0xc002baa0
c001583c:	e8 c0 7e 00 00       	call   c001d701 <Thr::loadDLL(char const*, bool)>
c0015841:	83 c4 10             	add    esp,0x10
c0015844:	83 ec 08             	sub    esp,0x8
c0015847:	53                   	push   ebx
c0015848:	50                   	push   eax
c0015849:	e8 de 80 00 00       	call   c001d92c <Thr::executeDLL(unsigned long, void*)>
c001584e:	83 c4 10             	add    esp,0x10
c0015851:	8b 1d 28 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f028
c0015857:	83 ec 08             	sub    esp,0x8
c001585a:	6a 01                	push   0x1
c001585c:	68 86 ba 02 c0       	push   0xc002ba86
c0015861:	e8 9b 7e 00 00       	call   c001d701 <Thr::loadDLL(char const*, bool)>
c0015866:	83 c4 10             	add    esp,0x10
c0015869:	83 ec 08             	sub    esp,0x8
c001586c:	53                   	push   ebx
c001586d:	50                   	push   eax
c001586e:	e8 b9 80 00 00       	call   c001d92c <Thr::executeDLL(unsigned long, void*)>
c0015873:	83 c4 10             	add    esp,0x10
c0015876:	90                   	nop
c0015877:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001587a:	c9                   	leave  
c001587b:	c3                   	ret    

c001587c <sendKeyToTerminal(unsigned char)>:
c001587c:	55                   	push   ebp
c001587d:	89 e5                	mov    ebp,esp
c001587f:	83 ec 28             	sub    esp,0x28
c0015882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015885:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015888:	a1 e4 f0 02 c0       	mov    eax,ds:0xc002f0e4
c001588d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015891:	83 ec 08             	sub    esp,0x8
c0015894:	52                   	push   edx
c0015895:	50                   	push   eax
c0015896:	e8 25 b4 ff ff       	call   c0010cc0 <VgaText::receiveKey(unsigned char)>
c001589b:	83 c4 10             	add    esp,0x10
c001589e:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00158a2:	0f 85 8f 00 00 00    	jne    c0015937 <sendKeyToTerminal(unsigned char)+0xbb>
c00158a8:	fa                   	cli    
c00158a9:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c00158ae:	40                   	inc    eax
c00158af:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c00158b4:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c00158b9:	40                   	inc    eax
c00158ba:	a3 44 25 03 c0       	mov    ds:0xc0032544,eax
c00158bf:	a1 c0 f1 02 c0       	mov    eax,ds:0xc002f1c0
c00158c4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00158c7:	c7 05 c0 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1c0,0x0
c00158d1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00158d5:	74 1f                	je     c00158f6 <sendKeyToTerminal(unsigned char)+0x7a>
c00158d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158da:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00158dd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00158e0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00158e3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00158e6:	83 ec 0c             	sub    esp,0xc
c00158e9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00158ec:	e8 b3 8c 00 00       	call   c001e5a4 <unblockTask(ThreadControlBlock*)>
c00158f1:	83 c4 10             	add    esp,0x10
c00158f4:	eb db                	jmp    c00158d1 <sendKeyToTerminal(unsigned char)+0x55>
c00158f6:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c00158fb:	48                   	dec    eax
c00158fc:	a3 44 25 03 c0       	mov    ds:0xc0032544,eax
c0015901:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c0015906:	85 c0                	test   eax,eax
c0015908:	75 18                	jne    c0015922 <sendKeyToTerminal(unsigned char)+0xa6>
c001590a:	a1 40 25 03 c0       	mov    eax,ds:0xc0032540
c001590f:	85 c0                	test   eax,eax
c0015911:	74 0f                	je     c0015922 <sendKeyToTerminal(unsigned char)+0xa6>
c0015913:	c7 05 40 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032540,0x0
c001591d:	e8 be 87 00 00       	call   c001e0e0 <schedule()>
c0015922:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c0015927:	48                   	dec    eax
c0015928:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001592d:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c0015932:	85 c0                	test   eax,eax
c0015934:	75 01                	jne    c0015937 <sendKeyToTerminal(unsigned char)+0xbb>
c0015936:	fb                   	sti    
c0015937:	90                   	nop
c0015938:	c9                   	leave  
c0015939:	c3                   	ret    

c001593a <sendKeyboardToken(KeyboardToken)>:
c001593a:	55                   	push   ebp
c001593b:	89 e5                	mov    ebp,esp
c001593d:	83 ec 18             	sub    esp,0x18
c0015940:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015943:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015946:	0f b7 c0             	movzx  eax,ax
c0015949:	83 f2 01             	xor    edx,0x1
c001594c:	88 90 e0 f1 02 c0    	mov    BYTE PTR [eax-0x3ffd0e20],dl
c0015952:	a1 c8 f1 02 c0       	mov    eax,ds:0xc002f1c8
c0015957:	85 c0                	test   eax,eax
c0015959:	74 24                	je     c001597f <sendKeyboardToken(KeyboardToken)+0x45>
c001595b:	8b 0d c8 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f1c8
c0015961:	83 ec 04             	sub    esp,0x4
c0015964:	68 e0 f1 02 c0       	push   0xc002f1e0
c0015969:	83 ec 08             	sub    esp,0x8
c001596c:	89 e2                	mov    edx,esp
c001596e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015971:	89 02                	mov    DWORD PTR [edx],eax
c0015973:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015976:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001597a:	ff d1                	call   ecx
c001597c:	83 c4 10             	add    esp,0x10
c001597f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015982:	66 3d 03 02          	cmp    ax,0x203
c0015986:	75 07                	jne    c001598f <sendKeyboardToken(KeyboardToken)+0x55>
c0015988:	a0 e0 f2 02 c0       	mov    al,ds:0xc002f2e0
c001598d:	84 c0                	test   al,al
c001598f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015993:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015996:	a0 e8 f5 02 c0       	mov    al,ds:0xc002f5e8
c001599b:	38 c2                	cmp    dl,al
c001599d:	74 1c                	je     c00159bb <sendKeyboardToken(KeyboardToken)+0x81>
c001599f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00159a2:	a2 e8 f5 02 c0       	mov    ds:0xc002f5e8,al
c00159a7:	a0 e8 f5 02 c0       	mov    al,ds:0xc002f5e8
c00159ac:	0f b6 c0             	movzx  eax,al
c00159af:	83 ec 0c             	sub    esp,0xc
c00159b2:	50                   	push   eax
c00159b3:	e8 60 a8 ff ff       	call   c0010218 <setTerminalScrollLock(bool)>
c00159b8:	83 c4 10             	add    esp,0x10
c00159bb:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00159be:	84 c0                	test   al,al
c00159c0:	0f 84 ae 00 00 00    	je     c0015a74 <sendKeyboardToken(KeyboardToken)+0x13a>
c00159c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159c9:	66 3d 10 03          	cmp    ax,0x310
c00159cd:	75 06                	jne    c00159d5 <sendKeyboardToken(KeyboardToken)+0x9b>
c00159cf:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00159d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159d8:	66 3d 11 03          	cmp    ax,0x311
c00159dc:	75 06                	jne    c00159e4 <sendKeyboardToken(KeyboardToken)+0xaa>
c00159de:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00159e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e7:	66 3d 12 03          	cmp    ax,0x312
c00159eb:	75 06                	jne    c00159f3 <sendKeyboardToken(KeyboardToken)+0xb9>
c00159ed:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00159f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159f6:	66 3d 13 03          	cmp    ax,0x313
c00159fa:	75 06                	jne    c0015a02 <sendKeyboardToken(KeyboardToken)+0xc8>
c00159fc:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015a02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a05:	66 3d 14 03          	cmp    ax,0x314
c0015a09:	75 06                	jne    c0015a11 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015a0b:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015a11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a14:	66 3d 15 03          	cmp    ax,0x315
c0015a18:	75 06                	jne    c0015a20 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015a1a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015a20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a23:	66 3d 16 03          	cmp    ax,0x316
c0015a27:	75 06                	jne    c0015a2f <sendKeyboardToken(KeyboardToken)+0xf5>
c0015a29:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015a2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a32:	66 3d 17 03          	cmp    ax,0x317
c0015a36:	75 06                	jne    c0015a3e <sendKeyboardToken(KeyboardToken)+0x104>
c0015a38:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015a3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a41:	66 3d 18 03          	cmp    ax,0x318
c0015a45:	75 06                	jne    c0015a4d <sendKeyboardToken(KeyboardToken)+0x113>
c0015a47:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015a4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a50:	66 3d 19 03          	cmp    ax,0x319
c0015a54:	75 06                	jne    c0015a5c <sendKeyboardToken(KeyboardToken)+0x122>
c0015a56:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015a5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a5f:	66 3d 1a 03          	cmp    ax,0x31a
c0015a63:	0f 85 c9 00 00 00    	jne    c0015b32 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015a69:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015a6f:	e9 be 00 00 00       	jmp    c0015b32 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015a74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a77:	66 3d 10 03          	cmp    ax,0x310
c0015a7b:	75 0a                	jne    c0015a87 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015a7d:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015a83:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a8a:	66 3d 11 03          	cmp    ax,0x311
c0015a8e:	75 0a                	jne    c0015a9a <sendKeyboardToken(KeyboardToken)+0x160>
c0015a90:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015a96:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a9d:	66 3d 12 03          	cmp    ax,0x312
c0015aa1:	75 0a                	jne    c0015aad <sendKeyboardToken(KeyboardToken)+0x173>
c0015aa3:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015aa9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015aad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab0:	66 3d 13 03          	cmp    ax,0x313
c0015ab4:	75 0a                	jne    c0015ac0 <sendKeyboardToken(KeyboardToken)+0x186>
c0015ab6:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015abc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ac0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac3:	66 3d 14 03          	cmp    ax,0x314
c0015ac7:	75 0a                	jne    c0015ad3 <sendKeyboardToken(KeyboardToken)+0x199>
c0015ac9:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015acf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ad3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ad6:	66 3d 15 03          	cmp    ax,0x315
c0015ada:	75 0a                	jne    c0015ae6 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015adc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015ae2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ae9:	66 3d 16 03          	cmp    ax,0x316
c0015aed:	75 0a                	jne    c0015af9 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015aef:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015af5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015af9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015afc:	66 3d 17 03          	cmp    ax,0x317
c0015b00:	75 0a                	jne    c0015b0c <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015b02:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015b08:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b0f:	66 3d 18 03          	cmp    ax,0x318
c0015b13:	75 0a                	jne    c0015b1f <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015b15:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015b1b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b22:	66 3d 19 03          	cmp    ax,0x319
c0015b26:	75 0a                	jne    c0015b32 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015b28:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015b2e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b35:	66 3d 00 02          	cmp    ax,0x200
c0015b39:	75 2c                	jne    c0015b67 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015b3b:	a0 e0 f5 02 c0       	mov    al,ds:0xc002f5e0
c0015b40:	83 f0 01             	xor    eax,0x1
c0015b43:	84 c0                	test   al,al
c0015b45:	74 20                	je     c0015b67 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015b47:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0015b4c:	6a 01                	push   0x1
c0015b4e:	6a 00                	push   0x0
c0015b50:	68 a4 57 01 c0       	push   0xc00157a4
c0015b55:	50                   	push   eax
c0015b56:	e8 41 83 00 00       	call   c001de9c <Process::createThread(void (*)(void*), void*, int)>
c0015b5b:	83 c4 10             	add    esp,0x10
c0015b5e:	c6 05 e0 f5 02 c0 01 	mov    BYTE PTR ds:0xc002f5e0,0x1
c0015b65:	eb 33                	jmp    c0015b9a <sendKeyboardToken(KeyboardToken)+0x260>
c0015b67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b6a:	66 3d 01 02          	cmp    ax,0x201
c0015b6e:	75 2a                	jne    c0015b9a <sendKeyboardToken(KeyboardToken)+0x260>
c0015b70:	a0 e0 f5 02 c0       	mov    al,ds:0xc002f5e0
c0015b75:	83 f0 01             	xor    eax,0x1
c0015b78:	84 c0                	test   al,al
c0015b7a:	74 1e                	je     c0015b9a <sendKeyboardToken(KeyboardToken)+0x260>
c0015b7c:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0015b81:	6a 01                	push   0x1
c0015b83:	6a 00                	push   0x0
c0015b85:	68 10 58 01 c0       	push   0xc0015810
c0015b8a:	50                   	push   eax
c0015b8b:	e8 0c 83 00 00       	call   c001de9c <Process::createThread(void (*)(void*), void*, int)>
c0015b90:	83 c4 10             	add    esp,0x10
c0015b93:	c6 05 e0 f5 02 c0 01 	mov    BYTE PTR ds:0xc002f5e0,0x1
c0015b9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b9d:	66 3d 1d 03          	cmp    ax,0x31d
c0015ba1:	75 06                	jne    c0015ba9 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015ba3:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015ba9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bac:	66 3d 1c 03          	cmp    ax,0x31c
c0015bb0:	75 06                	jne    c0015bb8 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015bb2:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015bb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bbb:	66 3d 1b 03          	cmp    ax,0x31b
c0015bbf:	75 06                	jne    c0015bc7 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015bc1:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015bc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bca:	66 3d 1e 03          	cmp    ax,0x31e
c0015bce:	75 06                	jne    c0015bd6 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015bd0:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015bd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bd9:	66 3d 1f 03          	cmp    ax,0x31f
c0015bdd:	75 06                	jne    c0015be5 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015bdf:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015be5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015be8:	66 3d 1a 03          	cmp    ax,0x31a
c0015bec:	75 06                	jne    c0015bf4 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015bee:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015bf4:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015bf8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015bfb:	83 f0 01             	xor    eax,0x1
c0015bfe:	84 c0                	test   al,al
c0015c00:	74 77                	je     c0015c79 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015c02:	a0 e1 f2 02 c0       	mov    al,ds:0xc002f2e1
c0015c07:	84 c0                	test   al,al
c0015c09:	74 41                	je     c0015c4c <sendKeyboardToken(KeyboardToken)+0x312>
c0015c0b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015c0f:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015c13:	74 2b                	je     c0015c40 <sendKeyboardToken(KeyboardToken)+0x306>
c0015c15:	8b 15 e4 f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f5e4
c0015c1b:	89 d0                	mov    eax,edx
c0015c1d:	c1 e0 02             	shl    eax,0x2
c0015c20:	01 d0                	add    eax,edx
c0015c22:	01 c0                	add    eax,eax
c0015c24:	a3 e4 f5 02 c0       	mov    ds:0xc002f5e4,eax
c0015c29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c2c:	0f b7 c0             	movzx  eax,ax
c0015c2f:	8d 50 d0             	lea    edx,[eax-0x30]
c0015c32:	a1 e4 f5 02 c0       	mov    eax,ds:0xc002f5e4
c0015c37:	01 d0                	add    eax,edx
c0015c39:	a3 e4 f5 02 c0       	mov    ds:0xc002f5e4,eax
c0015c3e:	eb 6d                	jmp    c0015cad <sendKeyboardToken(KeyboardToken)+0x373>
c0015c40:	c7 05 e4 f5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f5e4,0x0
c0015c4a:	eb 61                	jmp    c0015cad <sendKeyboardToken(KeyboardToken)+0x373>
c0015c4c:	a1 e4 f5 02 c0       	mov    eax,ds:0xc002f5e4
c0015c51:	85 c0                	test   eax,eax
c0015c53:	74 18                	je     c0015c6d <sendKeyboardToken(KeyboardToken)+0x333>
c0015c55:	a1 e4 f5 02 c0       	mov    eax,ds:0xc002f5e4
c0015c5a:	0f b6 c0             	movzx  eax,al
c0015c5d:	83 ec 0c             	sub    esp,0xc
c0015c60:	50                   	push   eax
c0015c61:	e8 16 fc ff ff       	call   c001587c <sendKeyToTerminal(unsigned char)>
c0015c66:	83 c4 10             	add    esp,0x10
c0015c69:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015c6d:	c7 05 e4 f5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f5e4,0x0
c0015c77:	eb 34                	jmp    c0015cad <sendKeyboardToken(KeyboardToken)+0x373>
c0015c79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c7c:	66 3d 01 01          	cmp    ax,0x101
c0015c80:	75 2b                	jne    c0015cad <sendKeyboardToken(KeyboardToken)+0x373>
c0015c82:	a1 e4 f5 02 c0       	mov    eax,ds:0xc002f5e4
c0015c87:	85 c0                	test   eax,eax
c0015c89:	74 18                	je     c0015ca3 <sendKeyboardToken(KeyboardToken)+0x369>
c0015c8b:	a1 e4 f5 02 c0       	mov    eax,ds:0xc002f5e4
c0015c90:	0f b6 c0             	movzx  eax,al
c0015c93:	83 ec 0c             	sub    esp,0xc
c0015c96:	50                   	push   eax
c0015c97:	e8 e0 fb ff ff       	call   c001587c <sendKeyToTerminal(unsigned char)>
c0015c9c:	83 c4 10             	add    esp,0x10
c0015c9f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015ca3:	c7 05 e4 f5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f5e4,0x0
c0015cad:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015cb0:	83 f0 01             	xor    eax,0x1
c0015cb3:	84 c0                	test   al,al
c0015cb5:	74 4c                	je     c0015d03 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015cb7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015cba:	83 f0 01             	xor    eax,0x1
c0015cbd:	84 c0                	test   al,al
c0015cbf:	74 42                	je     c0015d03 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015cc1:	a0 e0 f2 02 c0       	mov    al,ds:0xc002f2e0
c0015cc6:	83 f0 01             	xor    eax,0x1
c0015cc9:	84 c0                	test   al,al
c0015ccb:	74 36                	je     c0015d03 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015ccd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cd0:	66 83 f8 1f          	cmp    ax,0x1f
c0015cd4:	76 09                	jbe    c0015cdf <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015cd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cd9:	66 83 f8 7e          	cmp    ax,0x7e
c0015cdd:	76 12                	jbe    c0015cf1 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015cdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ce2:	66 83 f8 0a          	cmp    ax,0xa
c0015ce6:	74 09                	je     c0015cf1 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015ce8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ceb:	66 83 f8 08          	cmp    ax,0x8
c0015cef:	75 12                	jne    c0015d03 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015cf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cf4:	0f b6 c0             	movzx  eax,al
c0015cf7:	83 ec 0c             	sub    esp,0xc
c0015cfa:	50                   	push   eax
c0015cfb:	e8 7c fb ff ff       	call   c001587c <sendKeyToTerminal(unsigned char)>
c0015d00:	83 c4 10             	add    esp,0x10
c0015d03:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015d06:	83 f0 01             	xor    eax,0x1
c0015d09:	84 c0                	test   al,al
c0015d0b:	74 4f                	je     c0015d5c <sendKeyboardToken(KeyboardToken)+0x422>
c0015d0d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d10:	83 f0 01             	xor    eax,0x1
c0015d13:	84 c0                	test   al,al
c0015d15:	74 45                	je     c0015d5c <sendKeyboardToken(KeyboardToken)+0x422>
c0015d17:	a0 e0 f2 02 c0       	mov    al,ds:0xc002f2e0
c0015d1c:	84 c0                	test   al,al
c0015d1e:	74 3c                	je     c0015d5c <sendKeyboardToken(KeyboardToken)+0x422>
c0015d20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d23:	66 83 f8 3f          	cmp    ax,0x3f
c0015d27:	76 33                	jbe    c0015d5c <sendKeyboardToken(KeyboardToken)+0x422>
c0015d29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d2c:	66 83 f8 7f          	cmp    ax,0x7f
c0015d30:	77 2a                	ja     c0015d5c <sendKeyboardToken(KeyboardToken)+0x422>
c0015d32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d35:	88 c2                	mov    dl,al
c0015d37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d3a:	66 83 f8 5f          	cmp    ax,0x5f
c0015d3e:	76 04                	jbe    c0015d44 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015d40:	b0 20                	mov    al,0x20
c0015d42:	eb 02                	jmp    c0015d46 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015d44:	b0 00                	mov    al,0x0
c0015d46:	29 c2                	sub    edx,eax
c0015d48:	88 d0                	mov    al,dl
c0015d4a:	83 e8 40             	sub    eax,0x40
c0015d4d:	0f b6 c0             	movzx  eax,al
c0015d50:	83 ec 0c             	sub    esp,0xc
c0015d53:	50                   	push   eax
c0015d54:	e8 23 fb ff ff       	call   c001587c <sendKeyToTerminal(unsigned char)>
c0015d59:	83 c4 10             	add    esp,0x10
c0015d5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d5f:	66 3d 00 03          	cmp    ax,0x300
c0015d63:	75 0f                	jne    c0015d74 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015d65:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d68:	83 f0 01             	xor    eax,0x1
c0015d6b:	84 c0                	test   al,al
c0015d6d:	74 05                	je     c0015d74 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015d6f:	e8 4c aa ff ff       	call   c00107c0 <doTerminalCycle()>
c0015d74:	90                   	nop
c0015d75:	c9                   	leave  
c0015d76:	c3                   	ret    

c0015d77 <clearInternalKeybuffer(VgaText*)>:
c0015d77:	55                   	push   ebp
c0015d78:	89 e5                	mov    ebp,esp
c0015d7a:	83 ec 08             	sub    esp,0x8
c0015d7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d80:	05 98 01 00 00       	add    eax,0x198
c0015d85:	83 ec 0c             	sub    esp,0xc
c0015d88:	50                   	push   eax
c0015d89:	e8 de a9 fe ff       	call   c000076c <strlen>
c0015d8e:	83 c4 10             	add    esp,0x10
c0015d91:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015d94:	81 c2 98 01 00 00    	add    edx,0x198
c0015d9a:	83 ec 04             	sub    esp,0x4
c0015d9d:	50                   	push   eax
c0015d9e:	6a 00                	push   0x0
c0015da0:	52                   	push   edx
c0015da1:	e8 aa a9 fe ff       	call   c0000750 <memset>
c0015da6:	83 c4 10             	add    esp,0x10
c0015da9:	90                   	nop
c0015daa:	c9                   	leave  
c0015dab:	c3                   	ret    

c0015dac <readKeyboard(VgaText*, char*, unsigned long)>:
c0015dac:	55                   	push   ebp
c0015dad:	89 e5                	mov    ebp,esp
c0015daf:	83 ec 18             	sub    esp,0x18
c0015db2:	a1 c8 f1 02 c0       	mov    eax,ds:0xc002f1c8
c0015db7:	85 c0                	test   eax,eax
c0015db9:	74 2a                	je     c0015de5 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015dbb:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015dc1:	8b 0d c8 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f1c8
c0015dc7:	83 ec 04             	sub    esp,0x4
c0015dca:	68 e0 f1 02 c0       	push   0xc002f1e0
c0015dcf:	83 ec 08             	sub    esp,0x8
c0015dd2:	89 e2                	mov    edx,esp
c0015dd4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015dd7:	89 02                	mov    DWORD PTR [edx],eax
c0015dd9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015ddc:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015de0:	ff d1                	call   ecx
c0015de2:	83 c4 10             	add    esp,0x10
c0015de5:	83 ec 0c             	sub    esp,0xc
c0015de8:	68 bb ba 02 c0       	push   0xc002babb
c0015ded:	e8 05 cb ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0015df2:	83 c4 10             	add    esp,0x10
c0015df5:	fb                   	sti    
c0015df6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015dfd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015e01:	0f 84 a1 00 00 00    	je     c0015ea8 <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c0015e07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e0a:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015e10:	84 c0                	test   al,al
c0015e12:	75 28                	jne    c0015e3c <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c0015e14:	fa                   	cli    
c0015e15:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c0015e1a:	40                   	inc    eax
c0015e1b:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c0015e20:	e8 bb 82 00 00       	call   c001e0e0 <schedule()>
c0015e25:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c0015e2a:	48                   	dec    eax
c0015e2b:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c0015e30:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c0015e35:	85 c0                	test   eax,eax
c0015e37:	75 ce                	jne    c0015e07 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0015e39:	fb                   	sti    
c0015e3a:	eb cb                	jmp    c0015e07 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0015e3c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e3f:	8d 50 01             	lea    edx,[eax+0x1]
c0015e42:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015e45:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e48:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015e4e:	88 10                	mov    BYTE PTR [eax],dl
c0015e50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e53:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015e59:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015e5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e5f:	05 98 01 00 00       	add    eax,0x198
c0015e64:	83 ec 0c             	sub    esp,0xc
c0015e67:	50                   	push   eax
c0015e68:	e8 ff a8 fe ff       	call   c000076c <strlen>
c0015e6d:	83 c4 10             	add    esp,0x10
c0015e70:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e73:	81 c2 98 01 00 00    	add    edx,0x198
c0015e79:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015e7c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e7f:	81 c2 98 01 00 00    	add    edx,0x198
c0015e85:	83 ec 04             	sub    esp,0x4
c0015e88:	50                   	push   eax
c0015e89:	51                   	push   ecx
c0015e8a:	52                   	push   edx
c0015e8b:	e8 f8 a7 fe ff       	call   c0000688 <memmove>
c0015e90:	83 c4 10             	add    esp,0x10
c0015e93:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015e96:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015e99:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015e9d:	0f 85 5a ff ff ff    	jne    c0015dfd <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c0015ea3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ea6:	eb 03                	jmp    c0015eab <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c0015ea8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015eab:	c9                   	leave  
c0015eac:	c3                   	ret    
c0015ead:	90                   	nop

c0015eae <Keyboard::Keyboard(char const*)>:
c0015eae:	83 ec 0c             	sub    esp,0xc
c0015eb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015eb5:	83 ec 08             	sub    esp,0x8
c0015eb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ebc:	50                   	push   eax
c0015ebd:	e8 72 e0 ff ff       	call   c0013f34 <Device::Device(char const*)>
c0015ec2:	83 c4 10             	add    esp,0x10
c0015ec5:	ba dc ba 02 c0       	mov    edx,0xc002badc
c0015eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ece:	89 10                	mov    DWORD PTR [eax],edx
c0015ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ed4:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015ede:	c6 05 c4 f1 02 c0 01 	mov    BYTE PTR ds:0xc002f1c4,0x1
c0015ee5:	90                   	nop
c0015ee6:	83 c4 0c             	add    esp,0xc
c0015ee9:	c3                   	ret    

c0015eea <Keyboard::~Keyboard()>:
c0015eea:	83 ec 0c             	sub    esp,0xc
c0015eed:	ba dc ba 02 c0       	mov    edx,0xc002badc
c0015ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ef6:	89 10                	mov    DWORD PTR [eax],edx
c0015ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015efc:	83 ec 0c             	sub    esp,0xc
c0015eff:	50                   	push   eax
c0015f00:	e8 f9 dc ff ff       	call   c0013bfe <Device::~Device()>
c0015f05:	83 c4 10             	add    esp,0x10
c0015f08:	90                   	nop
c0015f09:	83 c4 0c             	add    esp,0xc
c0015f0c:	c3                   	ret    
c0015f0d:	90                   	nop

c0015f0e <Keyboard::~Keyboard()>:
c0015f0e:	83 ec 0c             	sub    esp,0xc
c0015f11:	83 ec 0c             	sub    esp,0xc
c0015f14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f18:	e8 cd ff ff ff       	call   c0015eea <Keyboard::~Keyboard()>
c0015f1d:	83 c4 10             	add    esp,0x10
c0015f20:	83 ec 08             	sub    esp,0x8
c0015f23:	68 5c 01 00 00       	push   0x15c
c0015f28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f2c:	e8 e6 c8 ff ff       	call   c0012817 <operator delete(void*, unsigned long)>
c0015f31:	83 c4 10             	add    esp,0x10
c0015f34:	83 c4 0c             	add    esp,0xc
c0015f37:	c3                   	ret    

c0015f38 <LogicalDisk::close(int, int, void*)>:
c0015f38:	83 c8 ff             	or     eax,0xffffffff
c0015f3b:	c3                   	ret    

c0015f3c <LogicalDisk::~LogicalDisk()>:
c0015f3c:	83 ec 0c             	sub    esp,0xc
c0015f3f:	ba 8c bb 02 c0       	mov    edx,0xc002bb8c
c0015f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f48:	89 10                	mov    DWORD PTR [eax],edx
c0015f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f4e:	83 ec 0c             	sub    esp,0xc
c0015f51:	50                   	push   eax
c0015f52:	e8 a7 dc ff ff       	call   c0013bfe <Device::~Device()>
c0015f57:	83 c4 10             	add    esp,0x10
c0015f5a:	90                   	nop
c0015f5b:	83 c4 0c             	add    esp,0xc
c0015f5e:	c3                   	ret    
c0015f5f:	90                   	nop

c0015f60 <LogicalDisk::~LogicalDisk()>:
c0015f60:	83 ec 0c             	sub    esp,0xc
c0015f63:	83 ec 0c             	sub    esp,0xc
c0015f66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f6a:	e8 cd ff ff ff       	call   c0015f3c <LogicalDisk::~LogicalDisk()>
c0015f6f:	83 c4 10             	add    esp,0x10
c0015f72:	83 ec 08             	sub    esp,0x8
c0015f75:	68 74 01 00 00       	push   0x174
c0015f7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f7e:	e8 94 c8 ff ff       	call   c0012817 <operator delete(void*, unsigned long)>
c0015f83:	83 c4 10             	add    esp,0x10
c0015f86:	83 c4 0c             	add    esp,0xc
c0015f89:	c3                   	ret    

c0015f8a <LogicalDisk::open(int, int, void*)>:
c0015f8a:	83 ec 18             	sub    esp,0x18
c0015f8d:	68 08 bb 02 c0       	push   0xc002bb08
c0015f92:	e8 96 43 00 00       	call   c001a32d <Krnl::panic(char const*)>
c0015f97:	83 c8 ff             	or     eax,0xffffffff
c0015f9a:	83 c4 1c             	add    esp,0x1c
c0015f9d:	c3                   	ret    

c0015f9e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015f9e:	53                   	push   ebx
c0015f9f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015fa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fa7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015fab:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015fb1:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015fb7:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015fbd:	77 10                	ja     c0015fcf <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015fbf:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015fc5:	89 d3                	mov    ebx,edx
c0015fc7:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015fcd:	72 05                	jb     c0015fd4 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015fcf:	83 c8 ff             	or     eax,0xffffffff
c0015fd2:	89 c2                	mov    edx,eax
c0015fd4:	5b                   	pop    ebx
c0015fd5:	c3                   	ret    

c0015fd6 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015fd6:	56                   	push   esi
c0015fd7:	83 c8 ff             	or     eax,0xffffffff
c0015fda:	53                   	push   ebx
c0015fdb:	89 c2                	mov    edx,eax
c0015fdd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015fe1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015fe5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015fe9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015fef:	77 27                	ja     c0016018 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015ff1:	89 d8                	mov    eax,ebx
c0015ff3:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015ff9:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015fff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016004:	89 c2                	mov    edx,eax
c0016006:	73 10                	jae    c0016018 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016008:	89 c8                	mov    eax,ecx
c001600a:	89 da                	mov    edx,ebx
c001600c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016012:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016018:	5b                   	pop    ebx
c0016019:	5e                   	pop    esi
c001601a:	c3                   	ret    
c001601b:	90                   	nop

c001601c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001601c:	83 ec 1c             	sub    esp,0x1c
c001601f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016023:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016027:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001602b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001602f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016033:	89 04 24             	mov    DWORD PTR [esp],eax
c0016036:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001603a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001603e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016042:	83 ec 08             	sub    esp,0x8
c0016045:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016049:	50                   	push   eax
c001604a:	e8 e5 de ff ff       	call   c0013f34 <Device::Device(char const*)>
c001604f:	83 c4 10             	add    esp,0x10
c0016052:	ba 8c bb 02 c0       	mov    edx,0xc002bb8c
c0016057:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001605b:	89 10                	mov    DWORD PTR [eax],edx
c001605d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016061:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016068:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001606c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016073:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016077:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016081:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016085:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016089:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001608d:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016093:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016099:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001609d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00160a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00160a4:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00160aa:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00160b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00160b8:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00160be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160c2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00160cc:	90                   	nop
c00160cd:	83 c4 1c             	add    esp,0x1c
c00160d0:	c3                   	ret    
c00160d1:	90                   	nop

c00160d2 <LogicalDisk::assignDriveLetter()>:
c00160d2:	55                   	push   ebp
c00160d3:	57                   	push   edi
c00160d4:	56                   	push   esi
c00160d5:	53                   	push   ebx
c00160d6:	83 ec 14             	sub    esp,0x14
c00160d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00160dd:	8b 3d 00 f6 02 c0    	mov    edi,DWORD PTR ds:0xc002f600
c00160e3:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00160e9:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00160ed:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00160f3:	8b 3d 04 f6 02 c0    	mov    edi,DWORD PTR ds:0xc002f604
c00160f9:	3c 01                	cmp    al,0x1
c00160fb:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00160ff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016103:	19 c0                	sbb    eax,eax
c0016105:	83 e0 02             	and    eax,0x2
c0016108:	83 c0 41             	add    eax,0x41
c001610b:	0f be e8             	movsx  ebp,al
c001610e:	3c 43                	cmp    al,0x43
c0016110:	75 10                	jne    c0016122 <LogicalDisk::assignDriveLetter()+0x50>
c0016112:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016119:	75 5d                	jne    c0016178 <LogicalDisk::assignDriveLetter()+0xa6>
c001611b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016120:	75 56                	jne    c0016178 <LogicalDisk::assignDriveLetter()+0xa6>
c0016122:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016125:	ba 01 00 00 00       	mov    edx,0x1
c001612a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001612e:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016132:	d3 e2                	shl    edx,cl
c0016134:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016138:	89 d7                	mov    edi,edx
c001613a:	89 d6                	mov    esi,edx
c001613c:	c1 ff 1f             	sar    edi,0x1f
c001613f:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016143:	21 f9                	and    ecx,edi
c0016145:	09 d1                	or     ecx,edx
c0016147:	75 2f                	jne    c0016178 <LogicalDisk::assignDriveLetter()+0xa6>
c0016149:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001614d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016151:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016157:	09 f2                	or     edx,esi
c0016159:	89 15 00 f6 02 c0    	mov    DWORD PTR ds:0xc002f600,edx
c001615f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016163:	09 fa                	or     edx,edi
c0016165:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016169:	89 15 04 f6 02 c0    	mov    DWORD PTR ds:0xc002f604,edx
c001616f:	89 1c bd 20 f6 02 c0 	mov    DWORD PTR [edi*4-0x3ffd09e0],ebx
c0016176:	eb 08                	jmp    c0016180 <LogicalDisk::assignDriveLetter()+0xae>
c0016178:	45                   	inc    ebp
c0016179:	40                   	inc    eax
c001617a:	3c 5b                	cmp    al,0x5b
c001617c:	75 90                	jne    c001610e <LogicalDisk::assignDriveLetter()+0x3c>
c001617e:	31 c0                	xor    eax,eax
c0016180:	83 c4 14             	add    esp,0x14
c0016183:	5b                   	pop    ebx
c0016184:	5e                   	pop    esi
c0016185:	5f                   	pop    edi
c0016186:	5d                   	pop    ebp
c0016187:	c3                   	ret    

c0016188 <LogicalDisk::mount()>:
c0016188:	56                   	push   esi
c0016189:	53                   	push   ebx
c001618a:	50                   	push   eax
c001618b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001618f:	8b 1d 94 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f194
c0016195:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001619f:	85 db                	test   ebx,ebx
c00161a1:	74 50                	je     c00161f3 <LogicalDisk::mount()+0x6b>
c00161a3:	50                   	push   eax
c00161a4:	50                   	push   eax
c00161a5:	ff 35 48 25 03 c0    	push   DWORD PTR ds:0xc0032548
c00161ab:	68 2c bb 02 c0       	push   0xc002bb2c
c00161b0:	e8 42 c7 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00161b5:	83 c4 0c             	add    esp,0xc
c00161b8:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00161bf:	8b 13                	mov    edx,DWORD PTR [ebx]
c00161c1:	83 e8 41             	sub    eax,0x41
c00161c4:	50                   	push   eax
c00161c5:	56                   	push   esi
c00161c6:	53                   	push   ebx
c00161c7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00161ca:	83 c4 10             	add    esp,0x10
c00161cd:	84 c0                	test   al,al
c00161cf:	74 08                	je     c00161d9 <LogicalDisk::mount()+0x51>
c00161d1:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00161d7:	eb 1c                	jmp    c00161f5 <LogicalDisk::mount()+0x6d>
c00161d9:	51                   	push   ecx
c00161da:	51                   	push   ecx
c00161db:	ff 35 48 25 03 c0    	push   DWORD PTR ds:0xc0032548
c00161e1:	68 47 bb 02 c0       	push   0xc002bb47
c00161e6:	e8 0c c7 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00161eb:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00161ee:	83 c4 10             	add    esp,0x10
c00161f1:	eb ac                	jmp    c001619f <LogicalDisk::mount()+0x17>
c00161f3:	31 c0                	xor    eax,eax
c00161f5:	5a                   	pop    edx
c00161f6:	5b                   	pop    ebx
c00161f7:	5e                   	pop    esi
c00161f8:	c3                   	ret    
c00161f9:	90                   	nop

c00161fa <LogicalDisk::unmount()>:
c00161fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00161fe:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016208:	c3                   	ret    
c0016209:	90                   	nop

c001620a <LogicalDisk::eject()>:
c001620a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001620e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016214:	8b 10                	mov    edx,DWORD PTR [eax]
c0016216:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001621a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001621d:	90                   	nop

c001621e <LogicalDisk::unassignDriveLetter()>:
c001621e:	57                   	push   edi
c001621f:	56                   	push   esi
c0016220:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016224:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001622b:	84 c9                	test   cl,cl
c001622d:	75 0f                	jne    c001623e <LogicalDisk::unassignDriveLetter()+0x20>
c001622f:	c7 44 24 0c 62 bb 02 c0 	mov    DWORD PTR [esp+0xc],0xc002bb62
c0016237:	5e                   	pop    esi
c0016238:	5f                   	pop    edi
c0016239:	e9 ef 40 00 00       	jmp    c001a32d <Krnl::panic(char const*)>
c001623e:	83 e9 41             	sub    ecx,0x41
c0016241:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016248:	b8 01 00 00 00       	mov    eax,0x1
c001624d:	c7 04 8d 20 f6 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd09e0],0x0
c0016258:	d3 e0                	shl    eax,cl
c001625a:	89 c7                	mov    edi,eax
c001625c:	f7 d0                	not    eax
c001625e:	c1 ff 1f             	sar    edi,0x1f
c0016261:	21 05 00 f6 02 c0    	and    DWORD PTR ds:0xc002f600,eax
c0016267:	89 fe                	mov    esi,edi
c0016269:	f7 d6                	not    esi
c001626b:	21 35 04 f6 02 c0    	and    DWORD PTR ds:0xc002f604,esi
c0016271:	5e                   	pop    esi
c0016272:	5f                   	pop    edi
c0016273:	c3                   	ret    

c0016274 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016274:	57                   	push   edi
c0016275:	56                   	push   esi
c0016276:	53                   	push   ebx
c0016277:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001627b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001627f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016283:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016287:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001628d:	77 41                	ja     c00162d0 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001628f:	99                   	cdq    
c0016290:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016296:	01 c8                	add    eax,ecx
c0016298:	11 da                	adc    edx,ebx
c001629a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00162a0:	19 d7                	sbb    edi,edx
c00162a2:	72 33                	jb     c00162d7 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00162a4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00162aa:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00162b0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00162b4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00162b8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00162be:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00162c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00162c8:	5b                   	pop    ebx
c00162c9:	5e                   	pop    esi
c00162ca:	5f                   	pop    edi
c00162cb:	e9 ec 0a 00 00       	jmp    c0016dbc <VCache::read(unsigned long long, int, void*)>
c00162d0:	b8 05 00 00 00       	mov    eax,0x5
c00162d5:	eb 05                	jmp    c00162dc <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00162d7:	b8 07 00 00 00       	mov    eax,0x7
c00162dc:	5b                   	pop    ebx
c00162dd:	5e                   	pop    esi
c00162de:	5f                   	pop    edi
c00162df:	c3                   	ret    

c00162e0 <LogicalDisk::write(unsigned long long, int, void*)>:
c00162e0:	57                   	push   edi
c00162e1:	56                   	push   esi
c00162e2:	53                   	push   ebx
c00162e3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00162e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162eb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00162ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162f3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00162f9:	77 41                	ja     c001633c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00162fb:	99                   	cdq    
c00162fc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016302:	01 c8                	add    eax,ecx
c0016304:	11 da                	adc    edx,ebx
c0016306:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001630c:	19 d7                	sbb    edi,edx
c001630e:	72 33                	jb     c0016343 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016310:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016316:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001631c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016320:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016324:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001632a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016330:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016334:	5b                   	pop    ebx
c0016335:	5e                   	pop    esi
c0016336:	5f                   	pop    edi
c0016337:	e9 96 09 00 00       	jmp    c0016cd2 <VCache::write(unsigned long long, int, void*)>
c001633c:	b8 05 00 00 00       	mov    eax,0x5
c0016341:	eb 05                	jmp    c0016348 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016343:	b8 07 00 00 00       	mov    eax,0x7
c0016348:	5b                   	pop    ebx
c0016349:	5e                   	pop    esi
c001634a:	5f                   	pop    edi
c001634b:	c3                   	ret    

c001634c <Mouse::Mouse(char const*)>:
c001634c:	83 ec 0c             	sub    esp,0xc
c001634f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016353:	83 ec 08             	sub    esp,0x8
c0016356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001635a:	50                   	push   eax
c001635b:	e8 d4 db ff ff       	call   c0013f34 <Device::Device(char const*)>
c0016360:	83 c4 10             	add    esp,0x10
c0016363:	ba b8 bb 02 c0       	mov    edx,0xc002bbb8
c0016368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001636c:	89 10                	mov    DWORD PTR [eax],edx
c001636e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016372:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001637c:	90                   	nop
c001637d:	83 c4 0c             	add    esp,0xc
c0016380:	c3                   	ret    
c0016381:	90                   	nop

c0016382 <Mouse::~Mouse()>:
c0016382:	83 ec 0c             	sub    esp,0xc
c0016385:	ba b8 bb 02 c0       	mov    edx,0xc002bbb8
c001638a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001638e:	89 10                	mov    DWORD PTR [eax],edx
c0016390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016394:	83 ec 0c             	sub    esp,0xc
c0016397:	50                   	push   eax
c0016398:	e8 61 d8 ff ff       	call   c0013bfe <Device::~Device()>
c001639d:	83 c4 10             	add    esp,0x10
c00163a0:	90                   	nop
c00163a1:	83 c4 0c             	add    esp,0xc
c00163a4:	c3                   	ret    
c00163a5:	90                   	nop

c00163a6 <Mouse::~Mouse()>:
c00163a6:	83 ec 0c             	sub    esp,0xc
c00163a9:	83 ec 0c             	sub    esp,0xc
c00163ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163b0:	e8 cd ff ff ff       	call   c0016382 <Mouse::~Mouse()>
c00163b5:	83 c4 10             	add    esp,0x10
c00163b8:	83 ec 08             	sub    esp,0x8
c00163bb:	68 58 01 00 00       	push   0x158
c00163c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163c4:	e8 4e c4 ff ff       	call   c0012817 <operator delete(void*, unsigned long)>
c00163c9:	83 c4 10             	add    esp,0x10
c00163cc:	83 c4 0c             	add    esp,0xc
c00163cf:	c3                   	ret    

c00163d0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00163d0:	55                   	push   ebp
c00163d1:	57                   	push   edi
c00163d2:	56                   	push   esi
c00163d3:	53                   	push   ebx
c00163d4:	81 ec 20 01 00 00    	sub    esp,0x120
c00163da:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c00163e1:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00163e8:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00163ef:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00163f6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00163fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00163fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016402:	56                   	push   esi
c0016403:	68 dc bb 02 c0       	push   0xc002bbdc
c0016408:	e8 ea c4 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001640d:	58                   	pop    eax
c001640e:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016415:	e8 16 dc ff ff       	call   c0014030 <Device::getName()>
c001641a:	5a                   	pop    edx
c001641b:	59                   	pop    ecx
c001641c:	50                   	push   eax
c001641d:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0016421:	53                   	push   ebx
c0016422:	e8 e5 a3 fe ff       	call   c000080c <strcpy>
c0016427:	5d                   	pop    ebp
c0016428:	58                   	pop    eax
c0016429:	68 0d bc 02 c0       	push   0xc002bc0d
c001642e:	53                   	push   ebx
c001642f:	e8 18 a5 fe ff       	call   c000094c <strcat>
c0016434:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001643b:	e8 4c 94 ff ff       	call   c000f88c <malloc>
c0016440:	83 c4 0c             	add    esp,0xc
c0016443:	89 c5                	mov    ebp,eax
c0016445:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016449:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001644d:	57                   	push   edi
c001644e:	56                   	push   esi
c001644f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016456:	53                   	push   ebx
c0016457:	50                   	push   eax
c0016458:	e8 bf fb ff ff       	call   c001601c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001645d:	83 c4 14             	add    esp,0x14
c0016460:	55                   	push   ebp
c0016461:	e8 6c fc ff ff       	call   c00160d2 <LogicalDisk::assignDriveLetter()>
c0016466:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016469:	0f be d8             	movsx  ebx,al
c001646c:	e8 17 fd ff ff       	call   c0016188 <LogicalDisk::mount()>
c0016471:	58                   	pop    eax
c0016472:	5a                   	pop    edx
c0016473:	55                   	push   ebp
c0016474:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001647b:	e8 b0 d8 ff ff       	call   c0013d30 <Device::addChild(Device*)>
c0016480:	59                   	pop    ecx
c0016481:	5e                   	pop    esi
c0016482:	53                   	push   ebx
c0016483:	68 18 bc 02 c0       	push   0xc002bc18
c0016488:	e8 6a c4 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001648d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016493:	5b                   	pop    ebx
c0016494:	5e                   	pop    esi
c0016495:	5f                   	pop    edi
c0016496:	5d                   	pop    ebp
c0016497:	c3                   	ret    

c0016498 <createPartitionsForDisk(PhysicalDisk*)>:
c0016498:	55                   	push   ebp
c0016499:	57                   	push   edi
c001649a:	56                   	push   esi
c001649b:	53                   	push   ebx
c001649c:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00164a2:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00164a9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00164af:	3d 00 02 00 00       	cmp    eax,0x200
c00164b4:	74 27                	je     c00164dd <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00164b6:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00164bc:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00164c2:	83 ec 10             	sub    esp,0x10
c00164c5:	0f a4 f7 0a          	shld   edi,esi,0xa
c00164c9:	99                   	cdq    
c00164ca:	c1 e6 0a             	shl    esi,0xa
c00164cd:	52                   	push   edx
c00164ce:	89 fd                	mov    ebp,edi
c00164d0:	50                   	push   eax
c00164d1:	55                   	push   ebp
c00164d2:	56                   	push   esi
c00164d3:	e8 4c 0d 01 00       	call   c0027224 <__udivdi3>
c00164d8:	e9 b1 00 00 00       	jmp    c001658e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00164dd:	83 ec 0c             	sub    esp,0xc
c00164e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00164e2:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00164e6:	56                   	push   esi
c00164e7:	6a 01                	push   0x1
c00164e9:	6a 00                	push   0x0
c00164eb:	6a 00                	push   0x0
c00164ed:	53                   	push   ebx
c00164ee:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00164f1:	83 c4 20             	add    esp,0x20
c00164f4:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00164fc:	75 0a                	jne    c0016508 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00164fe:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016506:	74 2c                	je     c0016534 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016508:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001650e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016514:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001651a:	83 ec 10             	sub    esp,0x10
c001651d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016521:	89 f7                	mov    edi,esi
c0016523:	c1 e0 0a             	shl    eax,0xa
c0016526:	c1 ff 1f             	sar    edi,0x1f
c0016529:	57                   	push   edi
c001652a:	56                   	push   esi
c001652b:	52                   	push   edx
c001652c:	50                   	push   eax
c001652d:	e8 f2 0c 01 00       	call   c0027224 <__udivdi3>
c0016532:	eb 5a                	jmp    c001658e <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016534:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001653b:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016542:	83 e1 7f             	and    ecx,0x7f
c0016545:	83 e0 7f             	and    eax,0x7f
c0016548:	01 c1                	add    ecx,eax
c001654a:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016551:	83 e0 7f             	and    eax,0x7f
c0016554:	01 c1                	add    ecx,eax
c0016556:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001655d:	83 e0 7f             	and    eax,0x7f
c0016560:	00 c1                	add    cl,al
c0016562:	74 41                	je     c00165a5 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016564:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001656a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016570:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016576:	83 ec 10             	sub    esp,0x10
c0016579:	0f a4 c2 0a          	shld   edx,eax,0xa
c001657d:	89 f7                	mov    edi,esi
c001657f:	c1 e0 0a             	shl    eax,0xa
c0016582:	c1 ff 1f             	sar    edi,0x1f
c0016585:	57                   	push   edi
c0016586:	56                   	push   esi
c0016587:	52                   	push   edx
c0016588:	50                   	push   eax
c0016589:	e8 96 0c 01 00       	call   c0027224 <__udivdi3>
c001658e:	83 c4 14             	add    esp,0x14
c0016591:	52                   	push   edx
c0016592:	50                   	push   eax
c0016593:	6a 00                	push   0x0
c0016595:	6a 00                	push   0x0
c0016597:	53                   	push   ebx
c0016598:	e8 33 fe ff ff       	call   c00163d0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001659d:	83 c4 20             	add    esp,0x20
c00165a0:	e9 79 01 00 00       	jmp    c001671e <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00165a5:	89 f0                	mov    eax,esi
c00165a7:	31 f6                	xor    esi,esi
c00165a9:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00165b0:	75 02                	jne    c00165b4 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00165b2:	89 f1                	mov    ecx,esi
c00165b4:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00165bb:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00165c2:	c1 e2 08             	shl    edx,0x8
c00165c5:	c1 e7 10             	shl    edi,0x10
c00165c8:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00165d0:	09 fa                	or     edx,edi
c00165d2:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00165da:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00165e1:	83 c0 10             	add    eax,0x10
c00165e4:	09 fa                	or     edx,edi
c00165e6:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00165ed:	c1 e7 18             	shl    edi,0x18
c00165f0:	09 fa                	or     edx,edi
c00165f2:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00165f9:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00165fd:	c1 e7 10             	shl    edi,0x10
c0016600:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016607:	c1 e2 08             	shl    edx,0x8
c001660a:	09 fa                	or     edx,edi
c001660c:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016613:	09 fa                	or     edx,edi
c0016615:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001661c:	c1 e7 18             	shl    edi,0x18
c001661f:	09 fa                	or     edx,edi
c0016621:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016625:	46                   	inc    esi
c0016626:	83 fe 04             	cmp    esi,0x4
c0016629:	0f 85 7a ff ff ff    	jne    c00165a9 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001662f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016633:	83 f0 01             	xor    eax,0x1
c0016636:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001663a:	75 57                	jne    c0016693 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001663c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016640:	83 f0 01             	xor    eax,0x1
c0016643:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016647:	75 4a                	jne    c0016693 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016649:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001664d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016655:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001665d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016663:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016669:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001666f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016673:	89 f7                	mov    edi,esi
c0016675:	c1 e0 0a             	shl    eax,0xa
c0016678:	c1 ff 1f             	sar    edi,0x1f
c001667b:	57                   	push   edi
c001667c:	56                   	push   esi
c001667d:	52                   	push   edx
c001667e:	50                   	push   eax
c001667f:	e8 a0 0b 01 00       	call   c0027224 <__udivdi3>
c0016684:	83 c4 10             	add    esp,0x10
c0016687:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001668b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001668f:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016693:	84 c9                	test   cl,cl
c0016695:	74 53                	je     c00166ea <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016697:	0f b6 c9             	movzx  ecx,cl
c001669a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001669e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00166a2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00166a6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00166aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00166ae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00166b2:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00166b6:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00166ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00166be:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00166c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00166c6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166ca:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00166ce:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00166d2:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00166d6:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00166da:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00166de:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00166e2:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00166e6:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00166ea:	31 ed                	xor    ebp,ebp
c00166ec:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00166f0:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00166f4:	89 f8                	mov    eax,edi
c00166f6:	09 f0                	or     eax,esi
c00166f8:	74 1e                	je     c0016718 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00166fa:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00166fe:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016702:	89 d1                	mov    ecx,edx
c0016704:	09 c1                	or     ecx,eax
c0016706:	74 10                	je     c0016718 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016708:	83 ec 0c             	sub    esp,0xc
c001670b:	57                   	push   edi
c001670c:	56                   	push   esi
c001670d:	52                   	push   edx
c001670e:	50                   	push   eax
c001670f:	53                   	push   ebx
c0016710:	e8 bb fc ff ff       	call   c00163d0 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016715:	83 c4 20             	add    esp,0x20
c0016718:	45                   	inc    ebp
c0016719:	83 fd 04             	cmp    ebp,0x4
c001671c:	75 ce                	jne    c00166ec <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001671e:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016724:	5b                   	pop    ebx
c0016725:	5e                   	pop    esi
c0016726:	5f                   	pop    edi
c0016727:	5d                   	pop    ebp
c0016728:	c3                   	ret    
c0016729:	90                   	nop

c001672a <Serial::Serial(char const*)>:
c001672a:	83 ec 0c             	sub    esp,0xc
c001672d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016731:	83 ec 08             	sub    esp,0x8
c0016734:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016738:	50                   	push   eax
c0016739:	e8 f6 d7 ff ff       	call   c0013f34 <Device::Device(char const*)>
c001673e:	83 c4 10             	add    esp,0x10
c0016741:	ba 44 bc 02 c0       	mov    edx,0xc002bc44
c0016746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001674a:	89 10                	mov    DWORD PTR [eax],edx
c001674c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016750:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001675a:	90                   	nop
c001675b:	83 c4 0c             	add    esp,0xc
c001675e:	c3                   	ret    
c001675f:	90                   	nop

c0016760 <Serial::~Serial()>:
c0016760:	83 ec 0c             	sub    esp,0xc
c0016763:	ba 44 bc 02 c0       	mov    edx,0xc002bc44
c0016768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001676c:	89 10                	mov    DWORD PTR [eax],edx
c001676e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016772:	83 ec 0c             	sub    esp,0xc
c0016775:	50                   	push   eax
c0016776:	e8 83 d4 ff ff       	call   c0013bfe <Device::~Device()>
c001677b:	83 c4 10             	add    esp,0x10
c001677e:	90                   	nop
c001677f:	83 c4 0c             	add    esp,0xc
c0016782:	c3                   	ret    
c0016783:	90                   	nop

c0016784 <Serial::~Serial()>:
c0016784:	83 ec 0c             	sub    esp,0xc
c0016787:	83 ec 0c             	sub    esp,0xc
c001678a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001678e:	e8 cd ff ff ff       	call   c0016760 <Serial::~Serial()>
c0016793:	83 c4 10             	add    esp,0x10
c0016796:	83 ec 08             	sub    esp,0x8
c0016799:	68 58 01 00 00       	push   0x158
c001679e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167a2:	e8 70 c0 ff ff       	call   c0012817 <operator delete(void*, unsigned long)>
c00167a7:	83 c4 10             	add    esp,0x10
c00167aa:	83 c4 0c             	add    esp,0xc
c00167ad:	c3                   	ret    

c00167ae <Timer::Timer(char const*)>:
c00167ae:	83 ec 0c             	sub    esp,0xc
c00167b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167b5:	83 ec 08             	sub    esp,0x8
c00167b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167bc:	50                   	push   eax
c00167bd:	e8 72 d7 ff ff       	call   c0013f34 <Device::Device(char const*)>
c00167c2:	83 c4 10             	add    esp,0x10
c00167c5:	ba 88 bc 02 c0       	mov    edx,0xc002bc88
c00167ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ce:	89 10                	mov    DWORD PTR [eax],edx
c00167d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167d4:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00167de:	90                   	nop
c00167df:	83 c4 0c             	add    esp,0xc
c00167e2:	c3                   	ret    
c00167e3:	90                   	nop

c00167e4 <Timer::~Timer()>:
c00167e4:	83 ec 0c             	sub    esp,0xc
c00167e7:	ba 88 bc 02 c0       	mov    edx,0xc002bc88
c00167ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167f0:	89 10                	mov    DWORD PTR [eax],edx
c00167f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167f6:	83 ec 0c             	sub    esp,0xc
c00167f9:	50                   	push   eax
c00167fa:	e8 ff d3 ff ff       	call   c0013bfe <Device::~Device()>
c00167ff:	83 c4 10             	add    esp,0x10
c0016802:	90                   	nop
c0016803:	83 c4 0c             	add    esp,0xc
c0016806:	c3                   	ret    
c0016807:	90                   	nop

c0016808 <Timer::~Timer()>:
c0016808:	83 ec 0c             	sub    esp,0xc
c001680b:	83 ec 0c             	sub    esp,0xc
c001680e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016812:	e8 cd ff ff ff       	call   c00167e4 <Timer::~Timer()>
c0016817:	83 c4 10             	add    esp,0x10
c001681a:	83 ec 08             	sub    esp,0x8
c001681d:	68 5c 01 00 00       	push   0x15c
c0016822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016826:	e8 ec bf ff ff       	call   c0012817 <operator delete(void*, unsigned long)>
c001682b:	83 c4 10             	add    esp,0x10
c001682e:	83 c4 0c             	add    esp,0xc
c0016831:	c3                   	ret    

c0016832 <Timer::read()>:
c0016832:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016836:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001683c:	c3                   	ret    

c001683d <timerHandler(unsigned long long)>:
c001683d:	55                   	push   ebp
c001683e:	57                   	push   edi
c001683f:	56                   	push   esi
c0016840:	53                   	push   ebx
c0016841:	83 ec 0c             	sub    esp,0xc
c0016844:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016848:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001684c:	01 35 90 f6 02 c0    	add    DWORD PTR ds:0xc002f690,esi
c0016852:	11 3d 94 f6 02 c0    	adc    DWORD PTR ds:0xc002f694,edi
c0016858:	80 3d 2d f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f02d,0x0
c001685f:	0f 84 42 01 00 00    	je     c00169a7 <timerHandler(unsigned long long)+0x16a>
c0016865:	fa                   	cli    
c0016866:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001686c:	83 ec 0c             	sub    esp,0xc
c001686f:	ff 05 44 25 03 c0    	inc    DWORD PTR ds:0xc0032544
c0016875:	68 58 25 03 c0       	push   0xc0032558
c001687a:	e8 2b 2a 01 00       	call   c00292aa <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001687f:	83 c4 10             	add    esp,0x10
c0016882:	84 c0                	test   al,al
c0016884:	0f 85 a2 00 00 00    	jne    c001692c <timerHandler(unsigned long long)+0xef>
c001688a:	83 ec 0c             	sub    esp,0xc
c001688d:	68 58 25 03 c0       	push   0xc0032558
c0016892:	e8 2f 2a 01 00       	call   c00292c6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016897:	83 c4 10             	add    esp,0x10
c001689a:	89 c3                	mov    ebx,eax
c001689c:	83 ec 0c             	sub    esp,0xc
c001689f:	68 58 25 03 c0       	push   0xc0032558
c00168a4:	e8 1d 2a 01 00       	call   c00292c6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168a9:	c7 04 24 58 25 03 c0 	mov    DWORD PTR [esp],0xc0032558
c00168b0:	89 c5                	mov    ebp,eax
c00168b2:	e8 17 2a 01 00       	call   c00292ce <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00168b7:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00168ba:	83 c4 10             	add    esp,0x10
c00168bd:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00168c0:	39 15 90 f6 02 c0    	cmp    DWORD PTR ds:0xc002f690,edx
c00168c6:	a1 94 f6 02 c0       	mov    eax,ds:0xc002f694
c00168cb:	19 c8                	sbb    eax,ecx
c00168cd:	72 21                	jb     c00168f0 <timerHandler(unsigned long long)+0xb3>
c00168cf:	83 ec 0c             	sub    esp,0xc
c00168d2:	55                   	push   ebp
c00168d3:	e8 cc 7c 00 00       	call   c001e5a4 <unblockTask(ThreadControlBlock*)>
c00168d8:	83 c4 10             	add    esp,0x10
c00168db:	39 eb                	cmp    ebx,ebp
c00168dd:	75 21                	jne    c0016900 <timerHandler(unsigned long long)+0xc3>
c00168df:	83 ec 0c             	sub    esp,0xc
c00168e2:	68 58 25 03 c0       	push   0xc0032558
c00168e7:	e8 da 29 01 00       	call   c00292c6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168ec:	89 c3                	mov    ebx,eax
c00168ee:	eb 0d                	jmp    c00168fd <timerHandler(unsigned long long)+0xc0>
c00168f0:	50                   	push   eax
c00168f1:	50                   	push   eax
c00168f2:	55                   	push   ebp
c00168f3:	68 58 25 03 c0       	push   0xc0032558
c00168f8:	e8 7f 2a 01 00       	call   c002937c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00168fd:	83 c4 10             	add    esp,0x10
c0016900:	83 ec 0c             	sub    esp,0xc
c0016903:	68 58 25 03 c0       	push   0xc0032558
c0016908:	e8 9d 29 01 00       	call   c00292aa <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001690d:	83 c4 10             	add    esp,0x10
c0016910:	84 c0                	test   al,al
c0016912:	75 18                	jne    c001692c <timerHandler(unsigned long long)+0xef>
c0016914:	83 ec 0c             	sub    esp,0xc
c0016917:	68 58 25 03 c0       	push   0xc0032558
c001691c:	e8 a5 29 01 00       	call   c00292c6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016921:	83 c4 10             	add    esp,0x10
c0016924:	39 d8                	cmp    eax,ebx
c0016926:	0f 85 70 ff ff ff    	jne    c001689c <timerHandler(unsigned long long)+0x5f>
c001692c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016931:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016935:	74 3d                	je     c0016974 <timerHandler(unsigned long long)+0x137>
c0016937:	80 3d 2c f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f02c,0x0
c001693e:	74 34                	je     c0016974 <timerHandler(unsigned long long)+0x137>
c0016940:	fa                   	cli    
c0016941:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c0016947:	31 d2                	xor    edx,edx
c0016949:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001694e:	89 f9                	mov    ecx,edi
c0016950:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016953:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016958:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001695b:	39 c6                	cmp    esi,eax
c001695d:	19 d1                	sbb    ecx,edx
c001695f:	72 05                	jb     c0016966 <timerHandler(unsigned long long)+0x129>
c0016961:	e8 7a 77 00 00       	call   c001e0e0 <schedule()>
c0016966:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001696b:	48                   	dec    eax
c001696c:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c0016971:	75 01                	jne    c0016974 <timerHandler(unsigned long long)+0x137>
c0016973:	fb                   	sti    
c0016974:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c0016979:	48                   	dec    eax
c001697a:	a3 44 25 03 c0       	mov    ds:0xc0032544,eax
c001697f:	75 18                	jne    c0016999 <timerHandler(unsigned long long)+0x15c>
c0016981:	83 3d 40 25 03 c0 00 	cmp    DWORD PTR ds:0xc0032540,0x0
c0016988:	74 0f                	je     c0016999 <timerHandler(unsigned long long)+0x15c>
c001698a:	c7 05 40 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032540,0x0
c0016994:	e8 47 77 00 00       	call   c001e0e0 <schedule()>
c0016999:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001699e:	48                   	dec    eax
c001699f:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c00169a4:	75 01                	jne    c00169a7 <timerHandler(unsigned long long)+0x16a>
c00169a6:	fb                   	sti    
c00169a7:	83 c4 0c             	add    esp,0xc
c00169aa:	5b                   	pop    ebx
c00169ab:	5e                   	pop    esi
c00169ac:	5f                   	pop    edi
c00169ad:	5d                   	pop    ebp
c00169ae:	c3                   	ret    

c00169af <setupTimer(int)>:
c00169af:	57                   	push   edi
c00169b0:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c00169b5:	56                   	push   esi
c00169b6:	53                   	push   ebx
c00169b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00169bb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00169c1:	83 ec 0c             	sub    esp,0xc
c00169c4:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00169ca:	e8 61 d6 ff ff       	call   c0014030 <Device::getName()>
c00169cf:	83 c4 10             	add    esp,0x10
c00169d2:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00169d5:	0f 85 8d 00 00 00    	jne    c0016a68 <setupTimer(int)+0xb9>
c00169db:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c00169e0:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00169e7:	74 7f                	je     c0016a68 <setupTimer(int)+0xb9>
c00169e9:	83 ec 0c             	sub    esp,0xc
c00169ec:	68 5c 01 00 00       	push   0x15c
c00169f1:	e8 96 8e ff ff       	call   c000f88c <malloc>
c00169f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00169f9:	89 c3                	mov    ebx,eax
c00169fb:	e8 f8 03 01 00       	call   c0026df8 <PIT::PIT()>
c0016a00:	59                   	pop    ecx
c0016a01:	5f                   	pop    edi
c0016a02:	53                   	push   ebx
c0016a03:	ff 35 28 f0 02 c0    	push   DWORD PTR ds:0xc002f028
c0016a09:	e8 22 d3 ff ff       	call   c0013d30 <Device::addChild(Device*)>
c0016a0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a10:	6a 00                	push   0x0
c0016a12:	6a 00                	push   0x0
c0016a14:	56                   	push   esi
c0016a15:	53                   	push   ebx
c0016a16:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a19:	83 c4 14             	add    esp,0x14
c0016a1c:	68 60 01 00 00       	push   0x160
c0016a21:	e8 66 8e ff ff       	call   c000f88c <malloc>
c0016a26:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a29:	89 c7                	mov    edi,eax
c0016a2b:	e8 78 02 01 00       	call   c0026ca8 <APICTimer::APICTimer()>
c0016a30:	6a 00                	push   0x0
c0016a32:	6a 00                	push   0x0
c0016a34:	56                   	push   esi
c0016a35:	57                   	push   edi
c0016a36:	e8 6f 01 01 00       	call   c0026baa <APICTimer::open(int, int, void*)>
c0016a3b:	83 c4 20             	add    esp,0x20
c0016a3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a40:	6a 00                	push   0x0
c0016a42:	6a 00                	push   0x0
c0016a44:	6a 00                	push   0x0
c0016a46:	53                   	push   ebx
c0016a47:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016a4a:	58                   	pop    eax
c0016a4b:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0016a50:	5a                   	pop    edx
c0016a51:	57                   	push   edi
c0016a52:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016a58:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016a5e:	e8 cd d2 ff ff       	call   c0013d30 <Device::addChild(Device*)>
c0016a63:	83 c4 10             	add    esp,0x10
c0016a66:	eb 33                	jmp    c0016a9b <setupTimer(int)+0xec>
c0016a68:	83 ec 0c             	sub    esp,0xc
c0016a6b:	68 5c 01 00 00       	push   0x15c
c0016a70:	e8 17 8e ff ff       	call   c000f88c <malloc>
c0016a75:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a78:	89 c3                	mov    ebx,eax
c0016a7a:	e8 79 03 01 00       	call   c0026df8 <PIT::PIT()>
c0016a7f:	58                   	pop    eax
c0016a80:	5a                   	pop    edx
c0016a81:	53                   	push   ebx
c0016a82:	ff 35 28 f0 02 c0    	push   DWORD PTR ds:0xc002f028
c0016a88:	e8 a3 d2 ff ff       	call   c0013d30 <Device::addChild(Device*)>
c0016a8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a8f:	6a 00                	push   0x0
c0016a91:	6a 00                	push   0x0
c0016a93:	56                   	push   esi
c0016a94:	53                   	push   ebx
c0016a95:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a98:	83 c4 20             	add    esp,0x20
c0016a9b:	89 d8                	mov    eax,ebx
c0016a9d:	5b                   	pop    ebx
c0016a9e:	5e                   	pop    esi
c0016a9f:	5f                   	pop    edi
c0016aa0:	c3                   	ret    
c0016aa1:	90                   	nop

c0016aa2 <VCache::VCache(PhysicalDisk*)>:
c0016aa2:	53                   	push   ebx
c0016aa3:	83 ec 18             	sub    esp,0x18
c0016aa6:	ba b8 bc 02 c0       	mov    edx,0xc002bcb8
c0016aab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aaf:	89 10                	mov    DWORD PTR [eax],edx
c0016ab1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ab5:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016abc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ac0:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016ac7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016acb:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016ad2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016ad9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016add:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016ae4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016aeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aef:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016af6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016afa:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016afe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b02:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016b09:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b14:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b1c:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b24:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016b28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b2c:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016b33:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016b3b:	83 ec 0c             	sub    esp,0xc
c0016b3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b42:	e8 45 8d ff ff       	call   c000f88c <malloc>
c0016b47:	83 c4 10             	add    esp,0x10
c0016b4a:	89 c3                	mov    ebx,eax
c0016b4c:	83 ec 0c             	sub    esp,0xc
c0016b4f:	53                   	push   ebx
c0016b50:	e8 35 73 00 00       	call   c001de8a <Mutex::Mutex()>
c0016b55:	83 c4 10             	add    esp,0x10
c0016b58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b5c:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016b5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b63:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016b67:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016b6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b6e:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016b75:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b79:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016b7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b83:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016b86:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b8a:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016b90:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016b96:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016b9a:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016b9d:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016ba0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ba4:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016ba8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016bac:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016bb2:	05 00 01 00 00       	add    eax,0x100
c0016bb7:	c1 e0 04             	shl    eax,0x4
c0016bba:	83 ec 0c             	sub    esp,0xc
c0016bbd:	50                   	push   eax
c0016bbe:	e8 c9 8c ff ff       	call   c000f88c <malloc>
c0016bc3:	83 c4 10             	add    esp,0x10
c0016bc6:	89 c2                	mov    edx,eax
c0016bc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bcc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016bcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bd3:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016bda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bde:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016be2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016be6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016bec:	c1 e0 07             	shl    eax,0x7
c0016bef:	83 ec 0c             	sub    esp,0xc
c0016bf2:	50                   	push   eax
c0016bf3:	e8 94 8c ff ff       	call   c000f88c <malloc>
c0016bf8:	83 c4 10             	add    esp,0x10
c0016bfb:	89 c2                	mov    edx,eax
c0016bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c01:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016c04:	90                   	nop
c0016c05:	83 c4 18             	add    esp,0x18
c0016c08:	5b                   	pop    ebx
c0016c09:	c3                   	ret    

c0016c0a <VCache::invalidateReadBuffer()>:
c0016c0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c0e:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016c14:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016c18:	c3                   	ret    
c0016c19:	90                   	nop

c0016c1a <VCache::writeWriteBuffer()>:
c0016c1a:	53                   	push   ebx
c0016c1b:	83 ec 14             	sub    esp,0x14
c0016c1e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016c22:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c25:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c27:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016c2a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016c2d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016c30:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016c33:	50                   	push   eax
c0016c34:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016c37:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016c3e:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016c45:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016c49:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016c50:	83 c4 28             	add    esp,0x28
c0016c53:	5b                   	pop    ebx
c0016c54:	c3                   	ret    
c0016c55:	90                   	nop

c0016c56 <VCache::~VCache()>:
c0016c56:	83 ec 0c             	sub    esp,0xc
c0016c59:	ba b8 bc 02 c0       	mov    edx,0xc002bcb8
c0016c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c62:	89 10                	mov    DWORD PTR [eax],edx
c0016c64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c68:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016c6b:	84 c0                	test   al,al
c0016c6d:	74 0f                	je     c0016c7e <VCache::~VCache()+0x28>
c0016c6f:	83 ec 0c             	sub    esp,0xc
c0016c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c76:	e8 9f ff ff ff       	call   c0016c1a <VCache::writeWriteBuffer()>
c0016c7b:	83 c4 10             	add    esp,0x10
c0016c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c82:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016c85:	83 ec 0c             	sub    esp,0xc
c0016c88:	50                   	push   eax
c0016c89:	e8 0e 8c ff ff       	call   c000f89c <free>
c0016c8e:	83 c4 10             	add    esp,0x10
c0016c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c95:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016c98:	83 ec 0c             	sub    esp,0xc
c0016c9b:	50                   	push   eax
c0016c9c:	e8 fb 8b ff ff       	call   c000f89c <free>
c0016ca1:	83 c4 10             	add    esp,0x10
c0016ca4:	90                   	nop
c0016ca5:	83 c4 0c             	add    esp,0xc
c0016ca8:	c3                   	ret    
c0016ca9:	90                   	nop

c0016caa <VCache::~VCache()>:
c0016caa:	83 ec 0c             	sub    esp,0xc
c0016cad:	83 ec 0c             	sub    esp,0xc
c0016cb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cb4:	e8 9d ff ff ff       	call   c0016c56 <VCache::~VCache()>
c0016cb9:	83 c4 10             	add    esp,0x10
c0016cbc:	83 ec 08             	sub    esp,0x8
c0016cbf:	6a 44                	push   0x44
c0016cc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cc5:	e8 4d bb ff ff       	call   c0012817 <operator delete(void*, unsigned long)>
c0016cca:	83 c4 10             	add    esp,0x10
c0016ccd:	83 c4 0c             	add    esp,0xc
c0016cd0:	c3                   	ret    
c0016cd1:	90                   	nop

c0016cd2 <VCache::write(unsigned long long, int, void*)>:
c0016cd2:	55                   	push   ebp
c0016cd3:	57                   	push   edi
c0016cd4:	56                   	push   esi
c0016cd5:	53                   	push   ebx
c0016cd6:	83 ec 18             	sub    esp,0x18
c0016cd9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016cdd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016ce1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016ce5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016ce8:	e8 2b 77 00 00       	call   c001e418 <Semaphore::acquire()>
c0016ced:	83 c4 10             	add    esp,0x10
c0016cf0:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016cf4:	74 0c                	je     c0016d02 <VCache::write(unsigned long long, int, void*)+0x30>
c0016cf6:	83 ec 0c             	sub    esp,0xc
c0016cf9:	53                   	push   ebx
c0016cfa:	e8 0b ff ff ff       	call   c0016c0a <VCache::invalidateReadBuffer()>
c0016cff:	83 c4 10             	add    esp,0x10
c0016d02:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016d06:	74 5c                	je     c0016d64 <VCache::write(unsigned long long, int, void*)+0x92>
c0016d08:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016d0b:	89 e8                	mov    eax,ebp
c0016d0d:	99                   	cdq    
c0016d0e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016d11:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016d14:	89 c1                	mov    ecx,eax
c0016d16:	89 d0                	mov    eax,edx
c0016d18:	31 f1                	xor    ecx,esi
c0016d1a:	31 f8                	xor    eax,edi
c0016d1c:	09 c1                	or     ecx,eax
c0016d1e:	75 38                	jne    c0016d58 <VCache::write(unsigned long long, int, void*)+0x86>
c0016d20:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016d25:	75 31                	jne    c0016d58 <VCache::write(unsigned long long, int, void*)+0x86>
c0016d27:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d2a:	89 ef                	mov    edi,ebp
c0016d2c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016d32:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d36:	0f af f9             	imul   edi,ecx
c0016d39:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016d3c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d3e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016d41:	40                   	inc    eax
c0016d42:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016d45:	83 c0 80             	add    eax,0xffffff80
c0016d48:	75 5c                	jne    c0016da6 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016d4a:	83 ec 0c             	sub    esp,0xc
c0016d4d:	53                   	push   ebx
c0016d4e:	e8 c7 fe ff ff       	call   c0016c1a <VCache::writeWriteBuffer()>
c0016d53:	83 c4 10             	add    esp,0x10
c0016d56:	eb 4e                	jmp    c0016da6 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016d58:	83 ec 0c             	sub    esp,0xc
c0016d5b:	53                   	push   ebx
c0016d5c:	e8 b9 fe ff ff       	call   c0016c1a <VCache::writeWriteBuffer()>
c0016d61:	83 c4 10             	add    esp,0x10
c0016d64:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d67:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016d6c:	7f 22                	jg     c0016d90 <VCache::write(unsigned long long, int, void*)+0xbe>
c0016d6e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016d71:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016d74:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016d78:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016d7c:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016d7f:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016d82:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016d88:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d8c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d8e:	eb 16                	jmp    c0016da6 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016d90:	83 ec 0c             	sub    esp,0xc
c0016d93:	8b 10                	mov    edx,DWORD PTR [eax]
c0016d95:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016d99:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016d9d:	57                   	push   edi
c0016d9e:	56                   	push   esi
c0016d9f:	50                   	push   eax
c0016da0:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016da3:	83 c4 20             	add    esp,0x20
c0016da6:	83 ec 0c             	sub    esp,0xc
c0016da9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016dac:	e8 a1 7d 00 00       	call   c001eb52 <Semaphore::release()>
c0016db1:	83 c4 1c             	add    esp,0x1c
c0016db4:	31 c0                	xor    eax,eax
c0016db6:	5b                   	pop    ebx
c0016db7:	5e                   	pop    esi
c0016db8:	5f                   	pop    edi
c0016db9:	5d                   	pop    ebp
c0016dba:	c3                   	ret    
c0016dbb:	90                   	nop

c0016dbc <VCache::read(unsigned long long, int, void*)>:
c0016dbc:	55                   	push   ebp
c0016dbd:	57                   	push   edi
c0016dbe:	56                   	push   esi
c0016dbf:	53                   	push   ebx
c0016dc0:	83 ec 28             	sub    esp,0x28
c0016dc3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016dc7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016dcb:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016dcf:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016dd3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016dd6:	e8 3d 76 00 00       	call   c001e418 <Semaphore::acquire()>
c0016ddb:	83 c4 10             	add    esp,0x10
c0016dde:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016de2:	74 0c                	je     c0016df0 <VCache::read(unsigned long long, int, void*)+0x34>
c0016de4:	83 ec 0c             	sub    esp,0xc
c0016de7:	53                   	push   ebx
c0016de8:	e8 2d fe ff ff       	call   c0016c1a <VCache::writeWriteBuffer()>
c0016ded:	83 c4 10             	add    esp,0x10
c0016df0:	83 fd 01             	cmp    ebp,0x1
c0016df3:	0f 85 80 00 00 00    	jne    c0016e79 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016df9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016dfc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016e00:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016e07:	75 70                	jne    c0016e79 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016e09:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016e0c:	89 e9                	mov    ecx,ebp
c0016e0e:	f7 d9                	neg    ecx
c0016e10:	89 c8                	mov    eax,ecx
c0016e12:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016e16:	c1 f8 1f             	sar    eax,0x1f
c0016e19:	21 f1                	and    ecx,esi
c0016e1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e1f:	89 c8                	mov    eax,ecx
c0016e21:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016e25:	21 f9                	and    ecx,edi
c0016e27:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016e2b:	89 ca                	mov    edx,ecx
c0016e2d:	74 0a                	je     c0016e39 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016e2f:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016e32:	75 05                	jne    c0016e39 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016e34:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016e37:	74 23                	je     c0016e5c <VCache::read(unsigned long long, int, void*)+0xa0>
c0016e39:	83 ec 0c             	sub    esp,0xc
c0016e3c:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016e40:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016e44:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016e47:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016e4a:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016e4c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016e4f:	55                   	push   ebp
c0016e50:	52                   	push   edx
c0016e51:	50                   	push   eax
c0016e52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016e56:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016e59:	83 c4 20             	add    esp,0x20
c0016e5c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e5f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016e63:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016e69:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016e6c:	48                   	dec    eax
c0016e6d:	21 c6                	and    esi,eax
c0016e6f:	0f af f1             	imul   esi,ecx
c0016e72:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016e75:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e77:	eb 1d                	jmp    c0016e96 <VCache::read(unsigned long long, int, void*)+0xda>
c0016e79:	83 ec 0c             	sub    esp,0xc
c0016e7c:	53                   	push   ebx
c0016e7d:	e8 88 fd ff ff       	call   c0016c0a <VCache::invalidateReadBuffer()>
c0016e82:	5a                   	pop    edx
c0016e83:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e86:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e88:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016e8c:	55                   	push   ebp
c0016e8d:	57                   	push   edi
c0016e8e:	56                   	push   esi
c0016e8f:	50                   	push   eax
c0016e90:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016e93:	83 c4 20             	add    esp,0x20
c0016e96:	83 ec 0c             	sub    esp,0xc
c0016e99:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016e9c:	e8 b1 7c 00 00       	call   c001eb52 <Semaphore::release()>
c0016ea1:	83 c4 2c             	add    esp,0x2c
c0016ea4:	31 c0                	xor    eax,eax
c0016ea6:	5b                   	pop    ebx
c0016ea7:	5e                   	pop    esi
c0016ea8:	5f                   	pop    edi
c0016ea9:	5d                   	pop    ebp
c0016eaa:	c3                   	ret    
c0016eab:	90                   	nop

c0016eac <Video::putrect(int, int, int, int, unsigned int)>:
c0016eac:	55                   	push   ebp
c0016ead:	57                   	push   edi
c0016eae:	56                   	push   esi
c0016eaf:	53                   	push   ebx
c0016eb0:	83 ec 1c             	sub    esp,0x1c
c0016eb3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016eb7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ebb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016ebf:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016ec3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016ec7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ecb:	01 df                	add    edi,ebx
c0016ecd:	39 fb                	cmp    ebx,edi
c0016ecf:	7d 1f                	jge    c0016ef0 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016ed1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016ed5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016ed9:	7d 12                	jge    c0016eed <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016edb:	8b 16                	mov    edx,DWORD PTR [esi]
c0016edd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016ee1:	53                   	push   ebx
c0016ee2:	55                   	push   ebp
c0016ee3:	45                   	inc    ebp
c0016ee4:	56                   	push   esi
c0016ee5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016ee8:	83 c4 10             	add    esp,0x10
c0016eeb:	eb e8                	jmp    c0016ed5 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016eed:	43                   	inc    ebx
c0016eee:	eb dd                	jmp    c0016ecd <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016ef0:	83 c4 1c             	add    esp,0x1c
c0016ef3:	5b                   	pop    ebx
c0016ef4:	5e                   	pop    esi
c0016ef5:	5f                   	pop    edi
c0016ef6:	5d                   	pop    ebp
c0016ef7:	c3                   	ret    

c0016ef8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016ef8:	55                   	push   ebp
c0016ef9:	57                   	push   edi
c0016efa:	31 ff                	xor    edi,edi
c0016efc:	56                   	push   esi
c0016efd:	53                   	push   ebx
c0016efe:	83 ec 1c             	sub    esp,0x1c
c0016f01:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016f05:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016f09:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016f10:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016f15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f19:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016f1d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f21:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016f24:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016f28:	01 f9                	add    ecx,edi
c0016f2a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016f2e:	7d 2f                	jge    c0016f5f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016f30:	31 f6                	xor    esi,esi
c0016f32:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016f36:	01 f2                	add    edx,esi
c0016f38:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016f3c:	7d 1a                	jge    c0016f58 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016f3e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016f41:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016f44:	46                   	inc    esi
c0016f45:	51                   	push   ecx
c0016f46:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016f4a:	52                   	push   edx
c0016f4b:	55                   	push   ebp
c0016f4c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f4f:	83 c4 10             	add    esp,0x10
c0016f52:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f56:	eb da                	jmp    c0016f32 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016f58:	47                   	inc    edi
c0016f59:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016f5d:	eb c5                	jmp    c0016f24 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016f5f:	83 c4 1c             	add    esp,0x1c
c0016f62:	5b                   	pop    ebx
c0016f63:	5e                   	pop    esi
c0016f64:	5f                   	pop    edi
c0016f65:	5d                   	pop    ebp
c0016f66:	c3                   	ret    
c0016f67:	90                   	nop

c0016f68 <Video::blit(unsigned int*, int, int, int, int)>:
c0016f68:	55                   	push   ebp
c0016f69:	57                   	push   edi
c0016f6a:	56                   	push   esi
c0016f6b:	53                   	push   ebx
c0016f6c:	83 ec 1c             	sub    esp,0x1c
c0016f6f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016f73:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016f77:	85 c0                	test   eax,eax
c0016f79:	79 02                	jns    c0016f7d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016f7b:	31 c0                	xor    eax,eax
c0016f7d:	c1 e0 02             	shl    eax,0x2
c0016f80:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016f84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f88:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f8c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016f90:	39 d8                	cmp    eax,ebx
c0016f92:	7e 49                	jle    c0016fdd <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016f94:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016f9a:	7c 41                	jl     c0016fdd <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016f9c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016fa0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016fa4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016fa8:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016fac:	39 f9                	cmp    ecx,edi
c0016fae:	7e 22                	jle    c0016fd2 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016fb0:	83 c5 04             	add    ebp,0x4
c0016fb3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016fb9:	7c 14                	jl     c0016fcf <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016fbb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016fbd:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016fc0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016fc4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016fc8:	56                   	push   esi
c0016fc9:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016fcc:	83 c4 10             	add    esp,0x10
c0016fcf:	47                   	inc    edi
c0016fd0:	eb d2                	jmp    c0016fa4 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fd6:	43                   	inc    ebx
c0016fd7:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016fdb:	eb ab                	jmp    c0016f88 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016fdd:	83 c4 1c             	add    esp,0x1c
c0016fe0:	5b                   	pop    ebx
c0016fe1:	5e                   	pop    esi
c0016fe2:	5f                   	pop    edi
c0016fe3:	5d                   	pop    ebp
c0016fe4:	c3                   	ret    
c0016fe5:	90                   	nop

c0016fe6 <Video::clearScreen(unsigned int)>:
c0016fe6:	57                   	push   edi
c0016fe7:	56                   	push   esi
c0016fe8:	53                   	push   ebx
c0016fe9:	31 db                	xor    ebx,ebx
c0016feb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016fef:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016ff5:	7e 1f                	jle    c0017016 <Video::clearScreen(unsigned int)+0x30>
c0016ff7:	31 ff                	xor    edi,edi
c0016ff9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016fff:	7e 12                	jle    c0017013 <Video::clearScreen(unsigned int)+0x2d>
c0017001:	8b 06                	mov    eax,DWORD PTR [esi]
c0017003:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017007:	53                   	push   ebx
c0017008:	57                   	push   edi
c0017009:	47                   	inc    edi
c001700a:	56                   	push   esi
c001700b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001700e:	83 c4 10             	add    esp,0x10
c0017011:	eb e6                	jmp    c0016ff9 <Video::clearScreen(unsigned int)+0x13>
c0017013:	43                   	inc    ebx
c0017014:	eb d9                	jmp    c0016fef <Video::clearScreen(unsigned int)+0x9>
c0017016:	5b                   	pop    ebx
c0017017:	5e                   	pop    esi
c0017018:	5f                   	pop    edi
c0017019:	c3                   	ret    

c001701a <Video::putpixel(int, int, unsigned int)>:
c001701a:	c7 44 24 04 c0 bc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bcc0
c0017022:	e9 06 33 00 00       	jmp    c001a32d <Krnl::panic(char const*)>
c0017027:	90                   	nop

c0017028 <Video::Video(char const*)>:
c0017028:	83 ec 0c             	sub    esp,0xc
c001702b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001702f:	83 ec 08             	sub    esp,0x8
c0017032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017036:	50                   	push   eax
c0017037:	e8 f8 ce ff ff       	call   c0013f34 <Device::Device(char const*)>
c001703c:	83 c4 10             	add    esp,0x10
c001703f:	ba 44 bd 02 c0       	mov    edx,0xc002bd44
c0017044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017048:	89 10                	mov    DWORD PTR [eax],edx
c001704a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001704e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017058:	90                   	nop
c0017059:	83 c4 0c             	add    esp,0xc
c001705c:	c3                   	ret    
c001705d:	90                   	nop

c001705e <Video::~Video()>:
c001705e:	83 ec 0c             	sub    esp,0xc
c0017061:	ba 44 bd 02 c0       	mov    edx,0xc002bd44
c0017066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001706a:	89 10                	mov    DWORD PTR [eax],edx
c001706c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017070:	83 ec 0c             	sub    esp,0xc
c0017073:	50                   	push   eax
c0017074:	e8 85 cb ff ff       	call   c0013bfe <Device::~Device()>
c0017079:	83 c4 10             	add    esp,0x10
c001707c:	90                   	nop
c001707d:	83 c4 0c             	add    esp,0xc
c0017080:	c3                   	ret    
c0017081:	90                   	nop

c0017082 <Video::~Video()>:
c0017082:	83 ec 0c             	sub    esp,0xc
c0017085:	83 ec 0c             	sub    esp,0xc
c0017088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001708c:	e8 cd ff ff ff       	call   c001705e <Video::~Video()>
c0017091:	83 c4 10             	add    esp,0x10
c0017094:	83 ec 08             	sub    esp,0x8
c0017097:	68 64 01 00 00       	push   0x164
c001709c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170a0:	e8 72 b7 ff ff       	call   c0012817 <operator delete(void*, unsigned long)>
c00170a5:	83 c4 10             	add    esp,0x10
c00170a8:	83 c4 0c             	add    esp,0xc
c00170ab:	c3                   	ret    

c00170ac <Video::isMonochrome()>:
c00170ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170b0:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00170b6:	c3                   	ret    
c00170b7:	90                   	nop

c00170b8 <Video::getWidth()>:
c00170b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170bc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00170c2:	c3                   	ret    
c00170c3:	90                   	nop

c00170c4 <Video::getHeight()>:
c00170c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170c8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170ce:	c3                   	ret    
c00170cf:	90                   	nop

c00170d0 <Video::drawCursor(int, int, unsigned char*, int)>:
c00170d0:	55                   	push   ebp
c00170d1:	57                   	push   edi
c00170d2:	56                   	push   esi
c00170d3:	53                   	push   ebx
c00170d4:	83 ec 2c             	sub    esp,0x2c
c00170d7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00170db:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00170df:	83 f8 01             	cmp    eax,0x1
c00170e2:	19 c9                	sbb    ecx,ecx
c00170e4:	31 db                	xor    ebx,ebx
c00170e6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00170ea:	89 cd                	mov    ebp,ecx
c00170ec:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00170f4:	f7 d5                	not    ebp
c00170f6:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00170fc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017100:	01 d8                	add    eax,ebx
c0017102:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017106:	56                   	push   esi
c0017107:	e8 b8 ff ff ff       	call   c00170c4 <Video::getHeight()>
c001710c:	59                   	pop    ecx
c001710d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017111:	7e 70                	jle    c0017183 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017113:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017117:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001711b:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001711e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017122:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017126:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001712d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017131:	89 f8                	mov    eax,edi
c0017133:	83 c0 20             	add    eax,0x20
c0017136:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001713a:	56                   	push   esi
c001713b:	e8 78 ff ff ff       	call   c00170b8 <Video::getWidth()>
c0017140:	5a                   	pop    edx
c0017141:	39 c7                	cmp    edi,eax
c0017143:	7d 34                	jge    c0017179 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017145:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001714a:	74 05                	je     c0017151 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001714c:	8b 06                	mov    eax,DWORD PTR [esi]
c001714e:	55                   	push   ebp
c001714f:	eb 0d                	jmp    c001715e <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017151:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017156:	74 12                	je     c001716a <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017158:	8b 06                	mov    eax,DWORD PTR [esi]
c001715a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001715e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017162:	57                   	push   edi
c0017163:	56                   	push   esi
c0017164:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017167:	83 c4 10             	add    esp,0x10
c001716a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001716e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017172:	47                   	inc    edi
c0017173:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017177:	75 c1                	jne    c001713a <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017179:	43                   	inc    ebx
c001717a:	83 fb 20             	cmp    ebx,0x20
c001717d:	0f 85 79 ff ff ff    	jne    c00170fc <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017183:	83 c4 2c             	add    esp,0x2c
c0017186:	5b                   	pop    ebx
c0017187:	5e                   	pop    esi
c0017188:	5f                   	pop    edi
c0017189:	5d                   	pop    ebp
c001718a:	c3                   	ret    
c001718b:	90                   	nop

c001718c <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001718c:	55                   	push   ebp
c001718d:	57                   	push   edi
c001718e:	56                   	push   esi
c001718f:	53                   	push   ebx
c0017190:	83 ec 28             	sub    esp,0x28
c0017193:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017197:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001719b:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c001719f:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00171a3:	c1 e7 08             	shl    edi,0x8
c00171a6:	01 c7                	add    edi,eax
c00171a8:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00171ac:	c1 e0 08             	shl    eax,0x8
c00171af:	01 d0                	add    eax,edx
c00171b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171b9:	0f af c7             	imul   eax,edi
c00171bc:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00171c3:	50                   	push   eax
c00171c4:	e8 c3 86 ff ff       	call   c000f88c <malloc>
c00171c9:	83 c4 10             	add    esp,0x10
c00171cc:	89 c5                	mov    ebp,eax
c00171ce:	85 c0                	test   eax,eax
c00171d0:	75 15                	jne    c00171e7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00171d2:	83 ec 0c             	sub    esp,0xc
c00171d5:	68 e1 bc 02 c0       	push   0xc002bce1
c00171da:	e8 18 b7 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00171df:	83 c4 10             	add    esp,0x10
c00171e2:	e9 1c 01 00 00       	jmp    c0017303 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00171e7:	be 12 00 00 00       	mov    esi,0x12
c00171ec:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00171f0:	74 11                	je     c0017203 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00171f2:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00171f6:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00171fa:	c1 fe 03             	sar    esi,0x3
c00171fd:	0f af f0             	imul   esi,eax
c0017200:	83 c6 12             	add    esi,0x12
c0017203:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017207:	74 04                	je     c001720d <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017209:	85 ff                	test   edi,edi
c001720b:	75 12                	jne    c001721f <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c001720d:	83 ec 0c             	sub    esp,0xc
c0017210:	68 f8 bc 02 c0       	push   0xc002bcf8
c0017215:	e8 dd b6 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001721a:	e9 ce 00 00 00       	jmp    c00172ed <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c001721f:	52                   	push   edx
c0017220:	52                   	push   edx
c0017221:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017225:	50                   	push   eax
c0017226:	68 0d bd 02 c0       	push   0xc002bd0d
c001722b:	e8 c7 b6 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0017230:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017234:	83 c4 10             	add    esp,0x10
c0017237:	80 fa 02             	cmp    dl,0x2
c001723a:	0f 85 98 00 00 00    	jne    c00172d8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017240:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017245:	75 10                	jne    c0017257 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017247:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001724b:	75 0a                	jne    c0017257 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001724d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017250:	83 e8 18             	sub    eax,0x18
c0017253:	a8 f7                	test   al,0xf7
c0017255:	74 0a                	je     c0017261 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017257:	83 ec 0c             	sub    esp,0xc
c001725a:	68 1a bd 02 c0       	push   0xc002bd1a
c001725f:	eb 7f                	jmp    c00172e0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017261:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017269:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017271:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017275:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001727d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017281:	75 0c                	jne    c001728f <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017283:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017288:	c1 e0 18             	shl    eax,0x18
c001728b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001728f:	41                   	inc    ecx
c0017290:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017295:	c1 e2 10             	shl    edx,0x10
c0017298:	89 d0                	mov    eax,edx
c001729a:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c001729f:	c1 e2 08             	shl    edx,0x8
c00172a2:	09 c2                	or     edx,eax
c00172a4:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00172a8:	09 c2                	or     edx,eax
c00172aa:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00172ae:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00172b2:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00172b6:	c1 f8 03             	sar    eax,0x3
c00172b9:	01 c6                	add    esi,eax
c00172bb:	89 c8                	mov    eax,ecx
c00172bd:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00172c1:	39 c7                	cmp    edi,eax
c00172c3:	7f b0                	jg     c0017275 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00172c5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00172c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00172cd:	39 14 24             	cmp    DWORD PTR [esp],edx
c00172d0:	7e 22                	jle    c00172f4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00172d2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00172d6:	eb 99                	jmp    c0017271 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00172d8:	50                   	push   eax
c00172d9:	50                   	push   eax
c00172da:	52                   	push   edx
c00172db:	68 28 bd 02 c0       	push   0xc002bd28
c00172e0:	e8 12 b6 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00172e5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00172e8:	e8 af 85 ff ff       	call   c000f89c <free>
c00172ed:	83 c4 10             	add    esp,0x10
c00172f0:	31 ed                	xor    ebp,ebp
c00172f2:	eb 0f                	jmp    c0017303 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00172f4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00172f8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00172fb:	89 38                	mov    DWORD PTR [eax],edi
c00172fd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017301:	89 08                	mov    DWORD PTR [eax],ecx
c0017303:	83 c4 1c             	add    esp,0x1c
c0017306:	89 e8                	mov    eax,ebp
c0017308:	5b                   	pop    ebx
c0017309:	5e                   	pop    esi
c001730a:	5f                   	pop    edi
c001730b:	5d                   	pop    ebp
c001730c:	c3                   	ret    
c001730d:	90                   	nop

c001730e <Video::putTGA(int, int, unsigned char*, int)>:
c001730e:	55                   	push   ebp
c001730f:	57                   	push   edi
c0017310:	56                   	push   esi
c0017311:	53                   	push   ebx
c0017312:	83 ec 28             	sub    esp,0x28
c0017315:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017319:	8d 44 24 18          	lea    eax,[esp+0x18]
c001731d:	50                   	push   eax
c001731e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017322:	50                   	push   eax
c0017323:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017327:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001732b:	56                   	push   esi
c001732c:	e8 5b fe ff ff       	call   c001718c <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017331:	83 c4 20             	add    esp,0x20
c0017334:	85 c0                	test   eax,eax
c0017336:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001733a:	74 35                	je     c0017371 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001733c:	89 c7                	mov    edi,eax
c001733e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017342:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017346:	39 d8                	cmp    eax,ebx
c0017348:	7e 27                	jle    c0017371 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001734a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001734e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017352:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017356:	39 e8                	cmp    eax,ebp
c0017358:	7e 14                	jle    c001736e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001735a:	8b 06                	mov    eax,DWORD PTR [esi]
c001735c:	83 c7 04             	add    edi,0x4
c001735f:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017362:	53                   	push   ebx
c0017363:	55                   	push   ebp
c0017364:	45                   	inc    ebp
c0017365:	56                   	push   esi
c0017366:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017369:	83 c4 10             	add    esp,0x10
c001736c:	eb e0                	jmp    c001734e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001736e:	43                   	inc    ebx
c001736f:	eb cd                	jmp    c001733e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017371:	83 c4 1c             	add    esp,0x1c
c0017374:	5b                   	pop    ebx
c0017375:	5e                   	pop    esi
c0017376:	5f                   	pop    edi
c0017377:	5d                   	pop    ebp
c0017378:	c3                   	ret    
c0017379:	90                   	nop

c001737a <ACPI::close(int, int, void*)>:
c001737a:	83 ec 1c             	sub    esp,0x1c
c001737d:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017385:	74 0a                	je     c0017391 <ACPI::close(int, int, void*)+0x17>
c0017387:	b8 00 00 00 00       	mov    eax,0x0
c001738c:	e9 9a 00 00 00       	jmp    c001742b <ACPI::close(int, int, void*)+0xb1>
c0017391:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017396:	75 37                	jne    c00173cf <ACPI::close(int, int, void*)+0x55>
c0017398:	83 ec 0c             	sub    esp,0xc
c001739b:	68 84 bd 02 c0       	push   0xc002bd84
c00173a0:	e8 52 b5 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00173a5:	83 c4 10             	add    esp,0x10
c00173a8:	a1 c8 16 03 c0       	mov    eax,ds:0xc00316c8
c00173ad:	85 c0                	test   eax,eax
c00173af:	74 07                	je     c00173b8 <ACPI::close(int, int, void*)+0x3e>
c00173b1:	a1 c8 16 03 c0       	mov    eax,ds:0xc00316c8
c00173b6:	ff d0                	call   eax
c00173b8:	83 ec 0c             	sub    esp,0xc
c00173bb:	68 9c be 02 c0       	push   0xc002be9c
c00173c0:	e8 68 2f 00 00       	call   c001a32d <Krnl::panic(char const*)>
c00173c5:	83 c4 10             	add    esp,0x10
c00173c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00173cd:	eb 5c                	jmp    c001742b <ACPI::close(int, int, void*)+0xb1>
c00173cf:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00173d4:	75 50                	jne    c0017426 <ACPI::close(int, int, void*)+0xac>
c00173d6:	a1 c4 16 03 c0       	mov    eax,ds:0xc00316c4
c00173db:	85 c0                	test   eax,eax
c00173dd:	74 07                	je     c00173e6 <ACPI::close(int, int, void*)+0x6c>
c00173df:	a1 c4 16 03 c0       	mov    eax,ds:0xc00316c4
c00173e4:	ff d0                	call   eax
c00173e6:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00173eb:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00173f0:	83 e0 02             	and    eax,0x2
c00173f3:	74 1c                	je     c0017411 <ACPI::close(int, int, void*)+0x97>
c00173f5:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00173fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017400:	89 c2                	mov    edx,eax
c0017402:	ec                   	in     al,dx
c0017403:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017407:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001740b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001740f:	eb da                	jmp    c00173eb <ACPI::close(int, int, void*)+0x71>
c0017411:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017418:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001741d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017421:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017425:	ee                   	out    dx,al
c0017426:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001742b:	83 c4 1c             	add    esp,0x1c
c001742e:	c3                   	ret    

c001742f <findRSDP()>:
c001742f:	83 ec 1c             	sub    esp,0x1c
c0017432:	83 ec 0c             	sub    esp,0xc
c0017435:	68 91 bd 02 c0       	push   0xc002bd91
c001743a:	e8 b8 b4 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001743f:	83 c4 10             	add    esp,0x10
c0017442:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0017447:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001744d:	83 e0 04             	and    eax,0x4
c0017450:	84 c0                	test   al,al
c0017452:	75 07                	jne    c001745b <findRSDP()+0x2c>
c0017454:	b8 00 00 00 00       	mov    eax,0x0
c0017459:	eb 6a                	jmp    c00174c5 <findRSDP()+0x96>
c001745b:	a1 74 f0 02 c0       	mov    eax,ds:0xc002f074
c0017460:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017465:	7f 1b                	jg     c0017482 <findRSDP()+0x53>
c0017467:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001746c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017472:	83 e2 fb             	and    edx,0xfffffffb
c0017475:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001747b:	b8 00 00 00 00       	mov    eax,0x0
c0017480:	eb 43                	jmp    c00174c5 <findRSDP()+0x96>
c0017482:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001748a:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017492:	77 2c                	ja     c00174c0 <findRSDP()+0x91>
c0017494:	83 ec 04             	sub    esp,0x4
c0017497:	6a 08                	push   0x8
c0017499:	68 9f bd 02 c0       	push   0xc002bd9f
c001749e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00174a2:	e8 a5 91 fe ff       	call   c000064c <memcmp>
c00174a7:	83 c4 10             	add    esp,0x10
c00174aa:	85 c0                	test   eax,eax
c00174ac:	0f 94 c0             	sete   al
c00174af:	84 c0                	test   al,al
c00174b1:	74 06                	je     c00174b9 <findRSDP()+0x8a>
c00174b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174b7:	eb 0c                	jmp    c00174c5 <findRSDP()+0x96>
c00174b9:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00174be:	eb ca                	jmp    c001748a <findRSDP()+0x5b>
c00174c0:	b8 00 00 00 00       	mov    eax,0x0
c00174c5:	83 c4 1c             	add    esp,0x1c
c00174c8:	c3                   	ret    

c00174c9 <loadACPITables(unsigned char*)>:
c00174c9:	57                   	push   edi
c00174ca:	56                   	push   esi
c00174cb:	53                   	push   ebx
c00174cc:	83 ec 60             	sub    esp,0x60
c00174cf:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c00174d4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00174da:	83 e0 04             	and    eax,0x4
c00174dd:	84 c0                	test   al,al
c00174df:	0f 84 33 02 00 00    	je     c0017718 <loadACPITables(unsigned char*)+0x24f>
c00174e5:	a0 e0 18 03 c0       	mov    al,ds:0xc00318e0
c00174ea:	84 c0                	test   al,al
c00174ec:	74 75                	je     c0017563 <loadACPITables(unsigned char*)+0x9a>
c00174ee:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00174f2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00174f6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00174fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00174fd:	83 e8 24             	sub    eax,0x24
c0017500:	c1 e8 03             	shr    eax,0x3
c0017503:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017507:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001750f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017513:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017517:	0f 8d b2 00 00 00    	jge    c00175cf <loadACPITables(unsigned char*)+0x106>
c001751d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017521:	83 c0 24             	add    eax,0x24
c0017524:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017528:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001752c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017530:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017534:	c1 e0 03             	shl    eax,0x3
c0017537:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001753b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001753f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017542:	8b 00                	mov    eax,DWORD PTR [eax]
c0017544:	89 c1                	mov    ecx,eax
c0017546:	a1 cc 16 03 c0       	mov    eax,ds:0xc00316cc
c001754b:	8d 50 01             	lea    edx,[eax+0x1]
c001754e:	89 15 cc 16 03 c0    	mov    DWORD PTR ds:0xc00316cc,edx
c0017554:	89 ca                	mov    edx,ecx
c0017556:	89 14 c5 e4 16 03 c0 	mov    DWORD PTR [eax*8-0x3ffce91c],edx
c001755d:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017561:	eb ac                	jmp    c001750f <loadACPITables(unsigned char*)+0x46>
c0017563:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017567:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001756b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001756f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017572:	83 e8 24             	sub    eax,0x24
c0017575:	c1 e8 02             	shr    eax,0x2
c0017578:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001757c:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017584:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017588:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001758c:	7d 41                	jge    c00175cf <loadACPITables(unsigned char*)+0x106>
c001758e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017592:	83 c0 24             	add    eax,0x24
c0017595:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017599:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001759d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00175a1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00175a5:	c1 e0 02             	shl    eax,0x2
c00175a8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00175ac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00175b0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00175b2:	a1 cc 16 03 c0       	mov    eax,ds:0xc00316cc
c00175b7:	8d 50 01             	lea    edx,[eax+0x1]
c00175ba:	89 15 cc 16 03 c0    	mov    DWORD PTR ds:0xc00316cc,edx
c00175c0:	89 ca                	mov    edx,ecx
c00175c2:	89 14 c5 e4 16 03 c0 	mov    DWORD PTR [eax*8-0x3ffce91c],edx
c00175c9:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00175cd:	eb b5                	jmp    c0017584 <loadACPITables(unsigned char*)+0xbb>
c00175cf:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00175d7:	a1 cc 16 03 c0       	mov    eax,ds:0xc00316cc
c00175dc:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00175e0:	0f 8d 33 01 00 00    	jge    c0017719 <loadACPITables(unsigned char*)+0x250>
c00175e6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00175ea:	8b 04 c5 e4 16 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce91c]
c00175f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175f9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00175fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017601:	25 ff 0f 00 00       	and    eax,0xfff
c0017606:	89 c6                	mov    esi,eax
c0017608:	8b 1d 90 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f190
c001760e:	83 ec 0c             	sub    esp,0xc
c0017611:	6a 01                	push   0x1
c0017613:	e8 d9 9e ff ff       	call   c00114f1 <Virt::allocateKernelVirtualPages(int)>
c0017618:	83 c4 10             	add    esp,0x10
c001761b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001761f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017625:	83 ec 0c             	sub    esp,0xc
c0017628:	6a 01                	push   0x1
c001762a:	6a 01                	push   0x1
c001762c:	50                   	push   eax
c001762d:	52                   	push   edx
c001762e:	53                   	push   ebx
c001762f:	e8 ea a9 ff ff       	call   c001201e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017634:	83 c4 20             	add    esp,0x20
c0017637:	09 f0                	or     eax,esi
c0017639:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001763d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017641:	c1 e0 03             	shl    eax,0x3
c0017644:	05 e0 16 03 c0       	add    eax,0xc00316e0
c0017649:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001764d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017651:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017655:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001765d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017661:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017665:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017669:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001766d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017671:	89 c6                	mov    esi,eax
c0017673:	89 d7                	mov    edi,edx
c0017675:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017677:	89 c8                	mov    eax,ecx
c0017679:	89 fa                	mov    edx,edi
c001767b:	89 f3                	mov    ebx,esi
c001767d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017681:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017685:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017689:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001768d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017690:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017694:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017698:	05 00 10 00 00       	add    eax,0x1000
c001769d:	c1 e8 0c             	shr    eax,0xc
c00176a0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00176a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00176a8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00176ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00176b0:	25 ff 0f 00 00       	and    eax,0xfff
c00176b5:	89 c6                	mov    esi,eax
c00176b7:	8b 1d 90 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f190
c00176bd:	83 ec 0c             	sub    esp,0xc
c00176c0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00176c4:	e8 28 9e ff ff       	call   c00114f1 <Virt::allocateKernelVirtualPages(int)>
c00176c9:	83 c4 10             	add    esp,0x10
c00176cc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00176d0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00176d6:	83 ec 0c             	sub    esp,0xc
c00176d9:	6a 01                	push   0x1
c00176db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00176df:	50                   	push   eax
c00176e0:	52                   	push   edx
c00176e1:	53                   	push   ebx
c00176e2:	e8 37 a9 ff ff       	call   c001201e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00176e7:	83 c4 20             	add    esp,0x20
c00176ea:	09 f0                	or     eax,esi
c00176ec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00176f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176f4:	83 ec 0c             	sub    esp,0xc
c00176f7:	50                   	push   eax
c00176f8:	e8 b4 a2 ff ff       	call   c00119b1 <Virt::freeKernelVirtualPages(unsigned long)>
c00176fd:	83 c4 10             	add    esp,0x10
c0017700:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017704:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017708:	89 14 c5 e4 16 03 c0 	mov    DWORD PTR [eax*8-0x3ffce91c],edx
c001770f:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017713:	e9 bf fe ff ff       	jmp    c00175d7 <loadACPITables(unsigned char*)+0x10e>
c0017718:	90                   	nop
c0017719:	83 c4 60             	add    esp,0x60
c001771c:	5b                   	pop    ebx
c001771d:	5e                   	pop    esi
c001771e:	5f                   	pop    edi
c001771f:	c3                   	ret    

c0017720 <findRSDT(unsigned char*)>:
c0017720:	57                   	push   edi
c0017721:	56                   	push   esi
c0017722:	53                   	push   ebx
c0017723:	83 ec 50             	sub    esp,0x50
c0017726:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001772b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017731:	83 e0 04             	and    eax,0x4
c0017734:	84 c0                	test   al,al
c0017736:	75 0a                	jne    c0017742 <findRSDT(unsigned char*)+0x22>
c0017738:	b8 00 00 00 00       	mov    eax,0x0
c001773d:	e9 21 01 00 00       	jmp    c0017863 <findRSDT(unsigned char*)+0x143>
c0017742:	89 e0                	mov    eax,esp
c0017744:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017748:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001774c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017750:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017758:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001775c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017760:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017764:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017768:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001776c:	89 c6                	mov    esi,eax
c001776e:	89 d7                	mov    edi,edx
c0017770:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017772:	89 c8                	mov    eax,ecx
c0017774:	89 fa                	mov    edx,edi
c0017776:	89 f3                	mov    ebx,esi
c0017778:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001777c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017780:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017784:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017788:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001778c:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017794:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017798:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001779c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00177a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177a4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00177a8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00177ac:	25 ff 0f 00 00       	and    eax,0xfff
c00177b1:	89 c6                	mov    esi,eax
c00177b3:	8b 1d 90 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f190
c00177b9:	83 ec 0c             	sub    esp,0xc
c00177bc:	6a 02                	push   0x2
c00177be:	e8 2e 9d ff ff       	call   c00114f1 <Virt::allocateKernelVirtualPages(int)>
c00177c3:	83 c4 10             	add    esp,0x10
c00177c6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00177ca:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00177d0:	83 ec 0c             	sub    esp,0xc
c00177d3:	6a 01                	push   0x1
c00177d5:	6a 02                	push   0x2
c00177d7:	50                   	push   eax
c00177d8:	52                   	push   edx
c00177d9:	53                   	push   ebx
c00177da:	e8 3f a8 ff ff       	call   c001201e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00177df:	83 c4 20             	add    esp,0x20
c00177e2:	09 f0                	or     eax,esi
c00177e4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00177e8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177ec:	25 ff 0f 00 00       	and    eax,0xfff
c00177f1:	89 c6                	mov    esi,eax
c00177f3:	8b 1d 90 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f190
c00177f9:	83 ec 0c             	sub    esp,0xc
c00177fc:	6a 02                	push   0x2
c00177fe:	e8 ee 9c ff ff       	call   c00114f1 <Virt::allocateKernelVirtualPages(int)>
c0017803:	83 c4 10             	add    esp,0x10
c0017806:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001780a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017810:	83 ec 0c             	sub    esp,0xc
c0017813:	6a 01                	push   0x1
c0017815:	6a 02                	push   0x2
c0017817:	50                   	push   eax
c0017818:	52                   	push   edx
c0017819:	53                   	push   ebx
c001781a:	e8 ff a7 ff ff       	call   c001201e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001781f:	83 c4 20             	add    esp,0x20
c0017822:	09 f0                	or     eax,esi
c0017824:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017828:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c001782d:	75 11                	jne    c0017840 <findRSDT(unsigned char*)+0x120>
c001782f:	c6 05 e0 18 03 c0 00 	mov    BYTE PTR ds:0xc00318e0,0x0
c0017836:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001783a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001783e:	eb 1f                	jmp    c001785f <findRSDT(unsigned char*)+0x13f>
c0017840:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017845:	75 11                	jne    c0017858 <findRSDT(unsigned char*)+0x138>
c0017847:	c6 05 e0 18 03 c0 01 	mov    BYTE PTR ds:0xc00318e0,0x1
c001784e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017852:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017856:	eb 07                	jmp    c001785f <findRSDT(unsigned char*)+0x13f>
c0017858:	b8 00 00 00 00       	mov    eax,0x0
c001785d:	eb 04                	jmp    c0017863 <findRSDT(unsigned char*)+0x143>
c001785f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017863:	83 c4 50             	add    esp,0x50
c0017866:	5b                   	pop    ebx
c0017867:	5e                   	pop    esi
c0017868:	5f                   	pop    edi
c0017869:	c3                   	ret    

c001786a <findDataTable(unsigned char*, char*)>:
c001786a:	83 ec 1c             	sub    esp,0x1c
c001786d:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0017872:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017878:	83 e0 04             	and    eax,0x4
c001787b:	84 c0                	test   al,al
c001787d:	75 07                	jne    c0017886 <findDataTable(unsigned char*, char*)+0x1c>
c001787f:	b8 00 00 00 00       	mov    eax,0x0
c0017884:	eb 7c                	jmp    c0017902 <findDataTable(unsigned char*, char*)+0x98>
c0017886:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001788e:	a1 cc 16 03 c0       	mov    eax,ds:0xc00316cc
c0017893:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017897:	7d 3a                	jge    c00178d3 <findDataTable(unsigned char*, char*)+0x69>
c0017899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001789d:	c1 e0 03             	shl    eax,0x3
c00178a0:	05 e0 16 03 c0       	add    eax,0xc00316e0
c00178a5:	83 ec 04             	sub    esp,0x4
c00178a8:	6a 04                	push   0x4
c00178aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178ae:	50                   	push   eax
c00178af:	e8 98 8d fe ff       	call   c000064c <memcmp>
c00178b4:	83 c4 10             	add    esp,0x10
c00178b7:	85 c0                	test   eax,eax
c00178b9:	0f 94 c0             	sete   al
c00178bc:	84 c0                	test   al,al
c00178be:	74 0d                	je     c00178cd <findDataTable(unsigned char*, char*)+0x63>
c00178c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178c4:	8b 04 c5 e4 16 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce91c]
c00178cb:	eb 35                	jmp    c0017902 <findDataTable(unsigned char*, char*)+0x98>
c00178cd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00178d1:	eb bb                	jmp    c001788e <findDataTable(unsigned char*, char*)+0x24>
c00178d3:	a0 e0 18 03 c0       	mov    al,ds:0xc00318e0
c00178d8:	84 c0                	test   al,al
c00178da:	74 07                	je     c00178e3 <findDataTable(unsigned char*, char*)+0x79>
c00178dc:	b8 58 00 00 00       	mov    eax,0x58
c00178e1:	eb 05                	jmp    c00178e8 <findDataTable(unsigned char*, char*)+0x7e>
c00178e3:	b8 52 00 00 00       	mov    eax,0x52
c00178e8:	83 ec 04             	sub    esp,0x4
c00178eb:	50                   	push   eax
c00178ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178f0:	68 c0 be 02 c0       	push   0xc002bec0
c00178f5:	e8 fd af ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00178fa:	83 c4 10             	add    esp,0x10
c00178fd:	b8 00 00 00 00       	mov    eax,0x0
c0017902:	83 c4 1c             	add    esp,0x1c
c0017905:	c3                   	ret    

c0017906 <scanMADT()>:
c0017906:	53                   	push   ebx
c0017907:	83 ec 38             	sub    esp,0x38
c001790a:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001790f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017915:	83 e0 04             	and    eax,0x4
c0017918:	84 c0                	test   al,al
c001791a:	0f 84 63 04 00 00    	je     c0017d83 <scanMADT()+0x47d>
c0017920:	e8 0a fb ff ff       	call   c001742f <findRSDP()>
c0017925:	a3 ec 18 03 c0       	mov    ds:0xc00318ec,eax
c001792a:	a1 ec 18 03 c0       	mov    eax,ds:0xc00318ec
c001792f:	85 c0                	test   eax,eax
c0017931:	75 19                	jne    c001794c <scanMADT()+0x46>
c0017933:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0017938:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001793e:	83 e2 fb             	and    edx,0xfffffffb
c0017941:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017947:	e9 3b 04 00 00       	jmp    c0017d87 <scanMADT()+0x481>
c001794c:	a1 ec 18 03 c0       	mov    eax,ds:0xc00318ec
c0017951:	83 ec 0c             	sub    esp,0xc
c0017954:	50                   	push   eax
c0017955:	e8 c6 fd ff ff       	call   c0017720 <findRSDT(unsigned char*)>
c001795a:	83 c4 10             	add    esp,0x10
c001795d:	a3 e8 18 03 c0       	mov    ds:0xc00318e8,eax
c0017962:	a1 e8 18 03 c0       	mov    eax,ds:0xc00318e8
c0017967:	85 c0                	test   eax,eax
c0017969:	75 19                	jne    c0017984 <scanMADT()+0x7e>
c001796b:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0017970:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017976:	83 e2 fb             	and    edx,0xfffffffb
c0017979:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001797f:	e9 03 04 00 00       	jmp    c0017d87 <scanMADT()+0x481>
c0017984:	a1 e8 18 03 c0       	mov    eax,ds:0xc00318e8
c0017989:	83 ec 0c             	sub    esp,0xc
c001798c:	50                   	push   eax
c001798d:	e8 37 fb ff ff       	call   c00174c9 <loadACPITables(unsigned char*)>
c0017992:	83 c4 10             	add    esp,0x10
c0017995:	a1 e8 18 03 c0       	mov    eax,ds:0xc00318e8
c001799a:	83 ec 08             	sub    esp,0x8
c001799d:	68 a8 bd 02 c0       	push   0xc002bda8
c00179a2:	50                   	push   eax
c00179a3:	e8 c2 fe ff ff       	call   c001786a <findDataTable(unsigned char*, char*)>
c00179a8:	83 c4 10             	add    esp,0x10
c00179ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00179af:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00179b4:	75 19                	jne    c00179cf <scanMADT()+0xc9>
c00179b6:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c00179bb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179c1:	83 e2 fe             	and    edx,0xfffffffe
c00179c4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179ca:	e9 b8 03 00 00       	jmp    c0017d87 <scanMADT()+0x481>
c00179cf:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00179d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179de:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00179e2:	0f 87 9f 03 00 00    	ja     c0017d87 <scanMADT()+0x481>
c00179e8:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00179f0:	0f 87 91 03 00 00    	ja     c0017d87 <scanMADT()+0x481>
c00179f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179fa:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00179fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a02:	8d 50 01             	lea    edx,[eax+0x1]
c0017a05:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a09:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a0d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a11:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017a15:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a19:	8d 50 01             	lea    edx,[eax+0x1]
c0017a1c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a20:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a24:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a28:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017a2c:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017a31:	0f 86 4f 03 00 00    	jbe    c0017d86 <scanMADT()+0x480>
c0017a37:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017a3c:	75 57                	jne    c0017a95 <scanMADT()+0x18f>
c0017a3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a42:	8d 50 01             	lea    edx,[eax+0x1]
c0017a45:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a49:	8a 15 e0 1a 03 c0    	mov    dl,BYTE PTR ds:0xc0031ae0
c0017a4f:	0f b6 d2             	movzx  edx,dl
c0017a52:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a56:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a5a:	88 82 20 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce4e0],al
c0017a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a64:	8d 50 01             	lea    edx,[eax+0x1]
c0017a67:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a6b:	8a 15 e0 1a 03 c0    	mov    dl,BYTE PTR ds:0xc0031ae0
c0017a71:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017a74:	88 0d e0 1a 03 c0    	mov    BYTE PTR ds:0xc0031ae0,cl
c0017a7a:	0f b6 d2             	movzx  edx,dl
c0017a7d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a81:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a85:	88 82 00 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce500],al
c0017a8b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017a90:	e9 da 02 00 00       	jmp    c0017d6f <scanMADT()+0x469>
c0017a95:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017a9a:	0f 85 14 01 00 00    	jne    c0017bb4 <scanMADT()+0x2ae>
c0017aa0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017aa4:	8d 50 01             	lea    edx,[eax+0x1]
c0017aa7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017aab:	8a 15 a0 19 03 c0    	mov    dl,BYTE PTR ds:0xc00319a0
c0017ab1:	0f b6 d2             	movzx  edx,dl
c0017ab4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ab8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017abc:	88 82 c0 19 03 c0    	mov    BYTE PTR [edx-0x3ffce640],al
c0017ac2:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017ac6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017aca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ace:	01 d0                	add    eax,edx
c0017ad0:	83 c0 2c             	add    eax,0x2c
c0017ad3:	8a 00                	mov    al,BYTE PTR [eax]
c0017ad5:	0f b6 d0             	movzx  edx,al
c0017ad8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017adc:	8d 48 01             	lea    ecx,[eax+0x1]
c0017adf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ae3:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ae7:	0f b6 c0             	movzx  eax,al
c0017aea:	c1 e0 08             	shl    eax,0x8
c0017aed:	89 d1                	mov    ecx,edx
c0017aef:	09 c1                	or     ecx,eax
c0017af1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017af5:	8d 50 02             	lea    edx,[eax+0x2]
c0017af8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017afc:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b00:	0f b6 c0             	movzx  eax,al
c0017b03:	c1 e0 10             	shl    eax,0x10
c0017b06:	09 c1                	or     ecx,eax
c0017b08:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b0c:	8d 50 03             	lea    edx,[eax+0x3]
c0017b0f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b13:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b17:	0f b6 c0             	movzx  eax,al
c0017b1a:	c1 e0 18             	shl    eax,0x18
c0017b1d:	09 c1                	or     ecx,eax
c0017b1f:	89 ca                	mov    edx,ecx
c0017b21:	a0 a0 19 03 c0       	mov    al,ds:0xc00319a0
c0017b26:	0f b6 c0             	movzx  eax,al
c0017b29:	89 14 85 e0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce620],edx
c0017b30:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b35:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b39:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b3d:	01 d0                	add    eax,edx
c0017b3f:	83 c0 2c             	add    eax,0x2c
c0017b42:	8a 00                	mov    al,BYTE PTR [eax]
c0017b44:	0f b6 d0             	movzx  edx,al
c0017b47:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b4b:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b4e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b52:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017b56:	0f b6 c0             	movzx  eax,al
c0017b59:	c1 e0 08             	shl    eax,0x8
c0017b5c:	89 d1                	mov    ecx,edx
c0017b5e:	09 c1                	or     ecx,eax
c0017b60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b64:	8d 50 02             	lea    edx,[eax+0x2]
c0017b67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b6b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b6f:	0f b6 c0             	movzx  eax,al
c0017b72:	c1 e0 10             	shl    eax,0x10
c0017b75:	09 c1                	or     ecx,eax
c0017b77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b7b:	8d 50 03             	lea    edx,[eax+0x3]
c0017b7e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b82:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b86:	0f b6 c0             	movzx  eax,al
c0017b89:	c1 e0 18             	shl    eax,0x18
c0017b8c:	09 c1                	or     ecx,eax
c0017b8e:	89 ca                	mov    edx,ecx
c0017b90:	a0 a0 19 03 c0       	mov    al,ds:0xc00319a0
c0017b95:	0f b6 c0             	movzx  eax,al
c0017b98:	89 14 85 60 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5a0],edx
c0017b9f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017ba4:	a0 a0 19 03 c0       	mov    al,ds:0xc00319a0
c0017ba9:	40                   	inc    eax
c0017baa:	a2 a0 19 03 c0       	mov    ds:0xc00319a0,al
c0017baf:	e9 bb 01 00 00       	jmp    c0017d6f <scanMADT()+0x469>
c0017bb4:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017bb9:	0f 85 e9 00 00 00    	jne    c0017ca8 <scanMADT()+0x3a2>
c0017bbf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bc3:	8d 50 01             	lea    edx,[eax+0x1]
c0017bc6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017bca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bce:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017bd2:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017bd6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bda:	8d 50 01             	lea    edx,[eax+0x1]
c0017bdd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017be1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017be5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017be9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017bed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bf1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bf5:	01 d0                	add    eax,edx
c0017bf7:	83 c0 2c             	add    eax,0x2c
c0017bfa:	8a 00                	mov    al,BYTE PTR [eax]
c0017bfc:	0f b6 d0             	movzx  edx,al
c0017bff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c03:	8d 48 01             	lea    ecx,[eax+0x1]
c0017c06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c0a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017c0e:	0f b6 c0             	movzx  eax,al
c0017c11:	c1 e0 08             	shl    eax,0x8
c0017c14:	89 d1                	mov    ecx,edx
c0017c16:	09 c1                	or     ecx,eax
c0017c18:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c1c:	8d 50 02             	lea    edx,[eax+0x2]
c0017c1f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c23:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c27:	0f b6 c0             	movzx  eax,al
c0017c2a:	c1 e0 10             	shl    eax,0x10
c0017c2d:	09 c1                	or     ecx,eax
c0017c2f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c33:	8d 50 03             	lea    edx,[eax+0x3]
c0017c36:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c3a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c3e:	0f b6 c0             	movzx  eax,al
c0017c41:	c1 e0 18             	shl    eax,0x18
c0017c44:	09 c8                	or     eax,ecx
c0017c46:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017c4a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017c4f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c57:	01 d0                	add    eax,edx
c0017c59:	83 c0 2c             	add    eax,0x2c
c0017c5c:	8a 00                	mov    al,BYTE PTR [eax]
c0017c5e:	0f b6 c0             	movzx  eax,al
c0017c61:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017c65:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017c68:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c6c:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017c70:	0f b6 d2             	movzx  edx,dl
c0017c73:	c1 e2 08             	shl    edx,0x8
c0017c76:	09 d0                	or     eax,edx
c0017c78:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017c7d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017c82:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017c87:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c8b:	88 90 80 e2 02 c0    	mov    BYTE PTR [eax-0x3ffd1d80],dl
c0017c91:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017c96:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017c9b:	66 89 84 12 80 19 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce680],ax
c0017ca3:	e9 c7 00 00 00       	jmp    c0017d6f <scanMADT()+0x469>
c0017ca8:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017cad:	0f 85 b0 00 00 00    	jne    c0017d63 <scanMADT()+0x45d>
c0017cb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cb7:	8d 50 01             	lea    edx,[eax+0x1]
c0017cba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017cbe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cc2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017cc6:	0f b6 c0             	movzx  eax,al
c0017cc9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017ccd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cd1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cd5:	01 d0                	add    eax,edx
c0017cd7:	83 c0 2c             	add    eax,0x2c
c0017cda:	8a 00                	mov    al,BYTE PTR [eax]
c0017cdc:	0f b6 d0             	movzx  edx,al
c0017cdf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ce3:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ce6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cea:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017cee:	0f b6 c0             	movzx  eax,al
c0017cf1:	c1 e0 08             	shl    eax,0x8
c0017cf4:	09 d0                	or     eax,edx
c0017cf6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017cfa:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017cff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d03:	8d 50 01             	lea    edx,[eax+0x1]
c0017d06:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d0a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d0e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d12:	0f b6 c0             	movzx  eax,al
c0017d15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d1d:	c1 e0 08             	shl    eax,0x8
c0017d20:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017d24:	89 c1                	mov    ecx,eax
c0017d26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d2a:	c1 e0 18             	shl    eax,0x18
c0017d2d:	89 c3                	mov    ebx,eax
c0017d2f:	a1 f0 18 03 c0       	mov    eax,ds:0xc00318f0
c0017d34:	8d 50 01             	lea    edx,[eax+0x1]
c0017d37:	89 15 f0 18 03 c0    	mov    DWORD PTR ds:0xc00318f0,edx
c0017d3d:	09 d9                	or     ecx,ebx
c0017d3f:	89 ca                	mov    edx,ecx
c0017d41:	89 14 85 00 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce700],edx
c0017d48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017d4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017d50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d54:	68 f0 be 02 c0       	push   0xc002bef0
c0017d59:	e8 99 ab ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0017d5e:	83 c4 10             	add    esp,0x10
c0017d61:	eb 0c                	jmp    c0017d6f <scanMADT()+0x469>
c0017d63:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017d68:	75 05                	jne    c0017d6f <scanMADT()+0x469>
c0017d6a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017d6f:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017d74:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d78:	01 d0                	add    eax,edx
c0017d7a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017d7e:	e9 54 fc ff ff       	jmp    c00179d7 <scanMADT()+0xd1>
c0017d83:	90                   	nop
c0017d84:	eb 01                	jmp    c0017d87 <scanMADT()+0x481>
c0017d86:	90                   	nop
c0017d87:	83 c4 38             	add    esp,0x38
c0017d8a:	5b                   	pop    ebx
c0017d8b:	c3                   	ret    

c0017d8c <ACPI::ACPI()>:
c0017d8c:	83 ec 0c             	sub    esp,0xc
c0017d8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d93:	83 ec 08             	sub    esp,0x8
c0017d96:	68 ad bd 02 c0       	push   0xc002bdad
c0017d9b:	50                   	push   eax
c0017d9c:	e8 93 c1 ff ff       	call   c0013f34 <Device::Device(char const*)>
c0017da1:	83 c4 10             	add    esp,0x10
c0017da4:	ba 8c bf 02 c0       	mov    edx,0xc002bf8c
c0017da9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017dad:	89 10                	mov    DWORD PTR [eax],edx
c0017daf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017db3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017dbe:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017dcc:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017dd6:	e8 2b fb ff ff       	call   c0017906 <scanMADT()>
c0017ddb:	90                   	nop
c0017ddc:	83 c4 0c             	add    esp,0xc
c0017ddf:	c3                   	ret    

c0017de0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017de0:	83 ec 2c             	sub    esp,0x2c
c0017de3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017de7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017deb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017def:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017df3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017df8:	88 d0                	mov    al,dl
c0017dfa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017dfe:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017e03:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017e0b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e0f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017e15:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017e19:	0f 8d 97 00 00 00    	jge    c0017eb6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017e1f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e23:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e27:	83 c2 2a             	add    edx,0x2a
c0017e2a:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017e2e:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017e33:	75 78                	jne    c0017ead <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017e35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e39:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e3d:	83 c2 2a             	add    edx,0x2a
c0017e40:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017e44:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017e48:	75 63                	jne    c0017ead <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017e4a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017e4f:	74 3a                	je     c0017e8b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017e51:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e55:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e59:	83 c2 2a             	add    edx,0x2a
c0017e5c:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017e60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e67:	39 c2                	cmp    edx,eax
c0017e69:	74 10                	je     c0017e7b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017e6b:	83 ec 0c             	sub    esp,0xc
c0017e6e:	68 2c bf 02 c0       	push   0xc002bf2c
c0017e73:	e8 b5 24 00 00       	call   c001a32d <Krnl::panic(char const*)>
c0017e78:	83 c4 10             	add    esp,0x10
c0017e7b:	83 ec 0c             	sub    esp,0xc
c0017e7e:	68 b2 bd 02 c0       	push   0xc002bdb2
c0017e83:	e8 a5 24 00 00       	call   c001a32d <Krnl::panic(char const*)>
c0017e88:	83 c4 10             	add    esp,0x10
c0017e8b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017e8f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e93:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e97:	83 c2 2a             	add    edx,0x2a
c0017e9a:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017e9e:	8b 02                	mov    eax,DWORD PTR [edx]
c0017ea0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017ea3:	89 01                	mov    DWORD PTR [ecx],eax
c0017ea5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017ea8:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017ead:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017eb1:	e9 55 ff ff ff       	jmp    c0017e0b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017eb6:	90                   	nop
c0017eb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ebb:	83 c4 2c             	add    esp,0x2c
c0017ebe:	c2 04 00             	ret    0x4
c0017ec1:	90                   	nop

c0017ec2 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017ec2:	83 ec 1c             	sub    esp,0x1c
c0017ec5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ec9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017ecd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ed1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017ed6:	88 c8                	mov    al,cl
c0017ed8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017edc:	88 d0                	mov    al,dl
c0017ede:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017ee2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ee6:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017eec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ef0:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017ef3:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017ef7:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017efb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eff:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f05:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017f09:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017f0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f10:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017f15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f19:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f1f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017f23:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f2a:	83 c2 2a             	add    edx,0x2a
c0017f2d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017f31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f35:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f3f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017f42:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017f46:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017f4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f4e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f54:	8d 50 01             	lea    edx,[eax+0x1]
c0017f57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f5b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f65:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f6b:	3d 00 02 00 00       	cmp    eax,0x200
c0017f70:	75 10                	jne    c0017f82 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017f72:	83 ec 0c             	sub    esp,0xc
c0017f75:	68 c1 bd 02 c0       	push   0xc002bdc1
c0017f7a:	e8 ae 23 00 00       	call   c001a32d <Krnl::panic(char const*)>
c0017f7f:	83 c4 10             	add    esp,0x10
c0017f82:	90                   	nop
c0017f83:	83 c4 1c             	add    esp,0x1c
c0017f86:	c3                   	ret    
c0017f87:	90                   	nop

c0017f88 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017f88:	b8 00 00 00 00       	mov    eax,0x0
c0017f8d:	c3                   	ret    

c0017f8e <ACPI::detectPCI()>:
c0017f8e:	53                   	push   ebx
c0017f8f:	83 ec 28             	sub    esp,0x28
c0017f92:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017f97:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017f9c:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0017fa1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017fa7:	83 e0 04             	and    eax,0x4
c0017faa:	84 c0                	test   al,al
c0017fac:	74 2b                	je     c0017fd9 <ACPI::detectPCI()+0x4b>
c0017fae:	a1 e8 18 03 c0       	mov    eax,ds:0xc00318e8
c0017fb3:	83 ec 08             	sub    esp,0x8
c0017fb6:	68 de bd 02 c0       	push   0xc002bdde
c0017fbb:	50                   	push   eax
c0017fbc:	e8 a9 f8 ff ff       	call   c001786a <findDataTable(unsigned char*, char*)>
c0017fc1:	83 c4 10             	add    esp,0x10
c0017fc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017fc8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017fcd:	74 0a                	je     c0017fd9 <ACPI::detectPCI()+0x4b>
c0017fcf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017fd4:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017fd9:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017fe1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fe5:	8a 00                	mov    al,BYTE PTR [eax]
c0017fe7:	3c 01                	cmp    al,0x1
c0017fe9:	75 0c                	jne    c0017ff7 <ACPI::detectPCI()+0x69>
c0017feb:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017ff0:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017ff5:	eb 26                	jmp    c001801d <ACPI::detectPCI()+0x8f>
c0017ff7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017ffb:	8a 00                	mov    al,BYTE PTR [eax]
c0017ffd:	3c 02                	cmp    al,0x2
c0017fff:	75 1c                	jne    c001801d <ACPI::detectPCI()+0x8f>
c0018001:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018006:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c001800b:	74 10                	je     c001801d <ACPI::detectPCI()+0x8f>
c001800d:	83 ec 0c             	sub    esp,0xc
c0018010:	68 5c bf 02 c0       	push   0xc002bf5c
c0018015:	e8 13 23 00 00       	call   c001a32d <Krnl::panic(char const*)>
c001801a:	83 c4 10             	add    esp,0x10
c001801d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018021:	83 f0 01             	xor    eax,0x1
c0018024:	84 c0                	test   al,al
c0018026:	74 3f                	je     c0018067 <ACPI::detectPCI()+0xd9>
c0018028:	e8 23 81 fe ff       	call   c0000150 <manualPCIProbe>
c001802d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018031:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018036:	75 0c                	jne    c0018044 <ACPI::detectPCI()+0xb6>
c0018038:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001803d:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0018042:	eb 23                	jmp    c0018067 <ACPI::detectPCI()+0xd9>
c0018044:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0018049:	75 1c                	jne    c0018067 <ACPI::detectPCI()+0xd9>
c001804b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018050:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0018055:	74 10                	je     c0018067 <ACPI::detectPCI()+0xd9>
c0018057:	83 ec 0c             	sub    esp,0xc
c001805a:	68 5c bf 02 c0       	push   0xc002bf5c
c001805f:	e8 c9 22 00 00       	call   c001a32d <Krnl::panic(char const*)>
c0018064:	83 c4 10             	add    esp,0x10
c0018067:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001806c:	74 0d                	je     c001807b <ACPI::detectPCI()+0xed>
c001806e:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c0018072:	83 f0 01             	xor    eax,0x1
c0018075:	0f b6 c0             	movzx  eax,al
c0018078:	40                   	inc    eax
c0018079:	eb 05                	jmp    c0018080 <ACPI::detectPCI()+0xf2>
c001807b:	b8 00 00 00 00       	mov    eax,0x0
c0018080:	83 ec 08             	sub    esp,0x8
c0018083:	50                   	push   eax
c0018084:	68 e3 bd 02 c0       	push   0xc002bde3
c0018089:	e8 69 a8 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001808e:	83 c4 10             	add    esp,0x10
c0018091:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018096:	74 69                	je     c0018101 <ACPI::detectPCI()+0x173>
c0018098:	c7 44 24 08 5c 01 00 00 	mov    DWORD PTR [esp+0x8],0x15c
c00180a0:	83 ec 0c             	sub    esp,0xc
c00180a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00180a7:	e8 e0 77 ff ff       	call   c000f88c <malloc>
c00180ac:	83 c4 10             	add    esp,0x10
c00180af:	89 c3                	mov    ebx,eax
c00180b1:	83 ec 0c             	sub    esp,0xc
c00180b4:	53                   	push   ebx
c00180b5:	e8 0e ac 00 00       	call   c0022cc8 <PCI::PCI()>
c00180ba:	83 c4 10             	add    esp,0x10
c00180bd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00180c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180c5:	83 ec 08             	sub    esp,0x8
c00180c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00180cc:	50                   	push   eax
c00180cd:	e8 5e bc ff ff       	call   c0013d30 <Device::addChild(Device*)>
c00180d2:	83 c4 10             	add    esp,0x10
c00180d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00180db:	83 c0 08             	add    eax,0x8
c00180de:	8b 00                	mov    eax,DWORD PTR [eax]
c00180e0:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00180e5:	74 07                	je     c00180ee <ACPI::detectPCI()+0x160>
c00180e7:	ba 01 00 00 00       	mov    edx,0x1
c00180ec:	eb 05                	jmp    c00180f3 <ACPI::detectPCI()+0x165>
c00180ee:	ba 02 00 00 00       	mov    edx,0x2
c00180f3:	6a 00                	push   0x0
c00180f5:	6a 00                	push   0x0
c00180f7:	52                   	push   edx
c00180f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00180fc:	ff d0                	call   eax
c00180fe:	83 c4 10             	add    esp,0x10
c0018101:	90                   	nop
c0018102:	83 c4 28             	add    esp,0x28
c0018105:	5b                   	pop    ebx
c0018106:	c3                   	ret    
c0018107:	90                   	nop

c0018108 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018108:	83 ec 1c             	sub    esp,0x1c
c001810b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001810f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018112:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018116:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001811b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018120:	83 ec 08             	sub    esp,0x8
c0018123:	52                   	push   edx
c0018124:	50                   	push   eax
c0018125:	e8 78 6d ff ff       	call   c000eea2 <Computer::readCMOS(unsigned char)>
c001812a:	83 c4 10             	add    esp,0x10
c001812d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018131:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0018136:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001813b:	83 ec 04             	sub    esp,0x4
c001813e:	6a 01                	push   0x1
c0018140:	52                   	push   edx
c0018141:	50                   	push   eax
c0018142:	e8 71 6e ff ff       	call   c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018147:	83 c4 10             	add    esp,0x10
c001814a:	90                   	nop
c001814b:	83 c4 1c             	add    esp,0x1c
c001814e:	c3                   	ret    
c001814f:	90                   	nop

c0018150 <ACPI::sleep()>:
c0018150:	83 ec 0c             	sub    esp,0xc
c0018153:	a1 c0 16 03 c0       	mov    eax,ds:0xc00316c0
c0018158:	85 c0                	test   eax,eax
c001815a:	74 07                	je     c0018163 <ACPI::sleep()+0x13>
c001815c:	a1 c0 16 03 c0       	mov    eax,ds:0xc00316c0
c0018161:	ff d0                	call   eax
c0018163:	90                   	nop
c0018164:	83 c4 0c             	add    esp,0xc
c0018167:	c3                   	ret    

c0018168 <ACPI::open(int, int, void*)>:
c0018168:	57                   	push   edi
c0018169:	56                   	push   esi
c001816a:	53                   	push   ebx
c001816b:	81 ec 60 01 00 00    	sub    esp,0x160
c0018171:	83 ec 0c             	sub    esp,0xc
c0018174:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c001817b:	e8 0e fe ff ff       	call   c0017f8e <ACPI::detectPCI()>
c0018180:	83 c4 10             	add    esp,0x10
c0018183:	83 ec 0c             	sub    esp,0xc
c0018186:	68 ec bd 02 c0       	push   0xc002bdec
c001818b:	e8 fa 4a 00 00       	call   c001cc8a <Thr::loadKernelSymbolTable(char const*)>
c0018190:	83 c4 10             	add    esp,0x10
c0018193:	83 ec 04             	sub    esp,0x4
c0018196:	6a 0c                	push   0xc
c0018198:	68 0a be 02 c0       	push   0xc002be0a
c001819d:	68 1b be 02 c0       	push   0xc002be1b
c00181a2:	e8 3c 2f 00 00       	call   c001b0e3 <Reg::readIntWithDefault(char*, char*, int)>
c00181a7:	83 c4 10             	add    esp,0x10
c00181aa:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c00181b1:	83 ec 0c             	sub    esp,0xc
c00181b4:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c00181bb:	e8 6f 95 ff ff       	call   c001172f <Virt::setupPageSwapping(int)>
c00181c0:	83 c4 10             	add    esp,0x10
c00181c3:	8b 1d 28 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f028
c00181c9:	83 ec 08             	sub    esp,0x8
c00181cc:	6a 01                	push   0x1
c00181ce:	68 22 be 02 c0       	push   0xc002be22
c00181d3:	e8 29 55 00 00       	call   c001d701 <Thr::loadDLL(char const*, bool)>
c00181d8:	83 c4 10             	add    esp,0x10
c00181db:	83 ec 08             	sub    esp,0x8
c00181de:	53                   	push   ebx
c00181df:	50                   	push   eax
c00181e0:	e8 47 57 00 00       	call   c001d92c <Thr::executeDLL(unsigned long, void*)>
c00181e5:	83 c4 10             	add    esp,0x10
c00181e8:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c00181ef:	83 ec 08             	sub    esp,0x8
c00181f2:	6a 12                	push   0x12
c00181f4:	50                   	push   eax
c00181f5:	e8 ba be ff ff       	call   c00140b4 <getDevicesOfType(DeviceType)>
c00181fa:	83 c4 0c             	add    esp,0xc
c00181fd:	83 ec 0c             	sub    esp,0xc
c0018200:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018207:	50                   	push   eax
c0018208:	e8 93 12 01 00       	call   c00294a0 <LinkedList<Device>::isEmpty()>
c001820d:	83 c4 10             	add    esp,0x10
c0018210:	83 f0 01             	xor    eax,0x1
c0018213:	84 c0                	test   al,al
c0018215:	0f 84 43 01 00 00    	je     c001835e <ACPI::open(int, int, void*)+0x1f6>
c001821b:	83 ec 0c             	sub    esp,0xc
c001821e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018225:	50                   	push   eax
c0018226:	e8 91 12 01 00       	call   c00294bc <LinkedList<Device>::getFirstElement()>
c001822b:	83 c4 10             	add    esp,0x10
c001822e:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0018235:	83 ec 0c             	sub    esp,0xc
c0018238:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001823f:	50                   	push   eax
c0018240:	e8 7f 12 01 00       	call   c00294c4 <LinkedList<Device>::removeFirst()>
c0018245:	83 c4 10             	add    esp,0x10
c0018248:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c001824f:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0018256:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c001825d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018261:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018267:	ba 09 00 00 00       	mov    edx,0x9
c001826c:	fc                   	cld    
c001826d:	89 c7                	mov    edi,eax
c001826f:	89 de                	mov    esi,ebx
c0018271:	89 d1                	mov    ecx,edx
c0018273:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018275:	83 ec 08             	sub    esp,0x8
c0018278:	8d 44 24 38          	lea    eax,[esp+0x38]
c001827c:	50                   	push   eax
c001827d:	83 ec 24             	sub    esp,0x24
c0018280:	89 e0                	mov    eax,esp
c0018282:	89 c3                	mov    ebx,eax
c0018284:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018288:	ba 09 00 00 00       	mov    edx,0x9
c001828d:	89 df                	mov    edi,ebx
c001828f:	89 c6                	mov    esi,eax
c0018291:	89 d1                	mov    ecx,edx
c0018293:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018295:	e8 2e af 00 00       	call   c00231c8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001829a:	83 c4 30             	add    esp,0x30
c001829d:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c00182a4:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00182ac:	0f 84 4b ff ff ff    	je     c00181fd <ACPI::open(int, int, void*)+0x95>
c00182b2:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c00182bd:	83 ec 0c             	sub    esp,0xc
c00182c0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00182c7:	e8 c0 75 ff ff       	call   c000f88c <malloc>
c00182cc:	83 c4 10             	add    esp,0x10
c00182cf:	89 c3                	mov    ebx,eax
c00182d1:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c00182d6:	83 ec 04             	sub    esp,0x4
c00182d9:	50                   	push   eax
c00182da:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00182e1:	53                   	push   ebx
c00182e2:	e8 6f ab ff ff       	call   c0012e56 <File::File(char const*, Process*)>
c00182e7:	83 c4 10             	add    esp,0x10
c00182ea:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00182f1:	83 ec 0c             	sub    esp,0xc
c00182f4:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00182fb:	e8 28 ae ff ff       	call   c0013128 <File::exists()>
c0018300:	83 c4 10             	add    esp,0x10
c0018303:	84 c0                	test   al,al
c0018305:	74 27                	je     c001832e <ACPI::open(int, int, void*)+0x1c6>
c0018307:	83 ec 08             	sub    esp,0x8
c001830a:	6a 01                	push   0x1
c001830c:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018313:	e8 e9 53 00 00       	call   c001d701 <Thr::loadDLL(char const*, bool)>
c0018318:	83 c4 10             	add    esp,0x10
c001831b:	83 ec 08             	sub    esp,0x8
c001831e:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018325:	50                   	push   eax
c0018326:	e8 01 56 00 00       	call   c001d92c <Thr::executeDLL(unsigned long, void*)>
c001832b:	83 c4 10             	add    esp,0x10
c001832e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0018336:	0f 84 c1 fe ff ff    	je     c00181fd <ACPI::open(int, int, void*)+0x95>
c001833c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0018343:	8b 00                	mov    eax,DWORD PTR [eax]
c0018345:	83 c0 08             	add    eax,0x8
c0018348:	8b 00                	mov    eax,DWORD PTR [eax]
c001834a:	83 ec 0c             	sub    esp,0xc
c001834d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018354:	ff d0                	call   eax
c0018356:	83 c4 10             	add    esp,0x10
c0018359:	e9 9f fe ff ff       	jmp    c00181fd <ACPI::open(int, int, void*)+0x95>
c001835e:	83 ec 0c             	sub    esp,0xc
c0018361:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018368:	50                   	push   eax
c0018369:	e8 30 11 01 00       	call   c002949e <LinkedList<Device>::~LinkedList()>
c001836e:	83 c4 10             	add    esp,0x10
c0018371:	8b 1d 28 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f028
c0018377:	83 ec 08             	sub    esp,0x8
c001837a:	6a 01                	push   0x1
c001837c:	68 3d be 02 c0       	push   0xc002be3d
c0018381:	e8 7b 53 00 00       	call   c001d701 <Thr::loadDLL(char const*, bool)>
c0018386:	83 c4 10             	add    esp,0x10
c0018389:	83 ec 08             	sub    esp,0x8
c001838c:	53                   	push   ebx
c001838d:	50                   	push   eax
c001838e:	e8 99 55 00 00       	call   c001d92c <Thr::executeDLL(unsigned long, void*)>
c0018393:	83 c4 10             	add    esp,0x10
c0018396:	8b 1d 28 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f028
c001839c:	83 ec 08             	sub    esp,0x8
c001839f:	6a 01                	push   0x1
c00183a1:	68 5a be 02 c0       	push   0xc002be5a
c00183a6:	e8 56 53 00 00       	call   c001d701 <Thr::loadDLL(char const*, bool)>
c00183ab:	83 c4 10             	add    esp,0x10
c00183ae:	83 ec 08             	sub    esp,0x8
c00183b1:	53                   	push   ebx
c00183b2:	50                   	push   eax
c00183b3:	e8 74 55 00 00       	call   c001d92c <Thr::executeDLL(unsigned long, void*)>
c00183b8:	83 c4 10             	add    esp,0x10
c00183bb:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c00183c0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00183c6:	83 e0 04             	and    eax,0x4
c00183c9:	84 c0                	test   al,al
c00183cb:	0f 84 fd 00 00 00    	je     c00184ce <ACPI::open(int, int, void*)+0x366>
c00183d1:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00183dc:	83 ec 0c             	sub    esp,0xc
c00183df:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00183e6:	e8 a1 74 ff ff       	call   c000f88c <malloc>
c00183eb:	83 c4 10             	add    esp,0x10
c00183ee:	89 c3                	mov    ebx,eax
c00183f0:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c00183f5:	83 ec 04             	sub    esp,0x4
c00183f8:	50                   	push   eax
c00183f9:	68 77 be 02 c0       	push   0xc002be77
c00183fe:	53                   	push   ebx
c00183ff:	e8 52 aa ff ff       	call   c0012e56 <File::File(char const*, Process*)>
c0018404:	83 c4 10             	add    esp,0x10
c0018407:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c001840e:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018416:	74 1a                	je     c0018432 <ACPI::open(int, int, void*)+0x2ca>
c0018418:	83 ec 0c             	sub    esp,0xc
c001841b:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018422:	e8 01 ad ff ff       	call   c0013128 <File::exists()>
c0018427:	83 c4 10             	add    esp,0x10
c001842a:	84 c0                	test   al,al
c001842c:	74 04                	je     c0018432 <ACPI::open(int, int, void*)+0x2ca>
c001842e:	b0 01                	mov    al,0x1
c0018430:	eb 02                	jmp    c0018434 <ACPI::open(int, int, void*)+0x2cc>
c0018432:	b0 00                	mov    al,0x0
c0018434:	84 c0                	test   al,al
c0018436:	74 25                	je     c001845d <ACPI::open(int, int, void*)+0x2f5>
c0018438:	83 ec 08             	sub    esp,0x8
c001843b:	6a 01                	push   0x1
c001843d:	68 77 be 02 c0       	push   0xc002be77
c0018442:	e8 ba 52 00 00       	call   c001d701 <Thr::loadDLL(char const*, bool)>
c0018447:	83 c4 10             	add    esp,0x10
c001844a:	83 ec 08             	sub    esp,0x8
c001844d:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c0018454:	50                   	push   eax
c0018455:	e8 d2 54 00 00       	call   c001d92c <Thr::executeDLL(unsigned long, void*)>
c001845a:	83 c4 10             	add    esp,0x10
c001845d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018465:	74 27                	je     c001848e <ACPI::open(int, int, void*)+0x326>
c0018467:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001846f:	74 1d                	je     c001848e <ACPI::open(int, int, void*)+0x326>
c0018471:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018478:	8b 00                	mov    eax,DWORD PTR [eax]
c001847a:	83 c0 08             	add    eax,0x8
c001847d:	8b 00                	mov    eax,DWORD PTR [eax]
c001847f:	83 ec 0c             	sub    esp,0xc
c0018482:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018489:	ff d0                	call   eax
c001848b:	83 c4 10             	add    esp,0x10
c001848e:	a1 e8 18 03 c0       	mov    eax,ds:0xc00318e8
c0018493:	83 ec 08             	sub    esp,0x8
c0018496:	68 94 be 02 c0       	push   0xc002be94
c001849b:	50                   	push   eax
c001849c:	e8 c9 f3 ff ff       	call   c001786a <findDataTable(unsigned char*, char*)>
c00184a1:	83 c4 10             	add    esp,0x10
c00184a4:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c00184ab:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c00184b3:	74 19                	je     c00184ce <ACPI::open(int, int, void*)+0x366>
c00184b5:	83 ec 08             	sub    esp,0x8
c00184b8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00184bf:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00184c6:	e8 3d fc ff ff       	call   c0018108 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00184cb:	83 c4 10             	add    esp,0x10
c00184ce:	b8 00 00 00 00       	mov    eax,0x0
c00184d3:	81 c4 60 01 00 00    	add    esp,0x160
c00184d9:	5b                   	pop    ebx
c00184da:	5e                   	pop    esi
c00184db:	5f                   	pop    edi
c00184dc:	c3                   	ret    
c00184dd:	90                   	nop

c00184de <CPU::close(int, int, void*)>:
c00184de:	31 c0                	xor    eax,eax
c00184e0:	c3                   	ret    
c00184e1:	90                   	nop

c00184e2 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00184e2:	55                   	push   ebp
c00184e3:	57                   	push   edi
c00184e4:	56                   	push   esi
c00184e5:	53                   	push   ebx
c00184e6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00184ea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00184ee:	89 ce                	mov    esi,ecx
c00184f0:	89 d5                	mov    ebp,edx
c00184f2:	80 f9 04             	cmp    cl,0x4
c00184f5:	75 28                	jne    c001851f <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00184f7:	8d 42 f9             	lea    eax,[edx-0x7]
c00184fa:	3c 03                	cmp    al,0x3
c00184fc:	0f 86 63 01 00 00    	jbe    c0018665 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018502:	80 fa 03             	cmp    dl,0x3
c0018505:	0f 84 5a 01 00 00    	je     c0018665 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001850b:	8d 7a f2             	lea    edi,[edx-0xe]
c001850e:	b8 50 e4 02 c0       	mov    eax,0xc002e450
c0018513:	89 fb                	mov    ebx,edi
c0018515:	80 fb 01             	cmp    bl,0x1
c0018518:	77 4e                	ja     c0018568 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001851a:	e9 52 01 00 00       	jmp    c0018671 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001851f:	80 f9 05             	cmp    cl,0x5
c0018522:	75 4d                	jne    c0018571 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018524:	b8 60 e4 02 c0       	mov    eax,0xc002e460
c0018529:	80 fa 03             	cmp    dl,0x3
c001852c:	0f 86 3f 01 00 00    	jbe    c0018671 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018532:	8d 7a fa             	lea    edi,[edx-0x6]
c0018535:	b8 70 e4 02 c0       	mov    eax,0xc002e470
c001853a:	89 fb                	mov    ebx,edi
c001853c:	80 fb 01             	cmp    bl,0x1
c001853f:	0f 86 2c 01 00 00    	jbe    c0018671 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018545:	b8 80 e4 02 c0       	mov    eax,0xc002e480
c001854a:	80 fa 08             	cmp    dl,0x8
c001854d:	0f 84 1e 01 00 00    	je     c0018671 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018553:	89 d7                	mov    edi,edx
c0018555:	b8 90 e4 02 c0       	mov    eax,0xc002e490
c001855a:	83 e7 fb             	and    edi,0xfffffffb
c001855d:	89 fb                	mov    ebx,edi
c001855f:	80 fb 09             	cmp    bl,0x9
c0018562:	0f 84 09 01 00 00    	je     c0018671 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018568:	31 c0                	xor    eax,eax
c001856a:	89 eb                	mov    ebx,ebp
c001856c:	0f b6 fb             	movzx  edi,bl
c001856f:	eb 30                	jmp    c00185a1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018571:	31 c0                	xor    eax,eax
c0018573:	80 f9 06             	cmp    cl,0x6
c0018576:	75 f2                	jne    c001856a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018578:	80 fa 0a             	cmp    dl,0xa
c001857b:	77 ed                	ja     c001856a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001857d:	bf de 05 00 00       	mov    edi,0x5de
c0018582:	0f a3 d7             	bt     edi,edx
c0018585:	73 e3                	jae    c001856a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018587:	b8 a0 e4 02 c0       	mov    eax,0xc002e4a0
c001858c:	e9 e0 00 00 00       	jmp    c0018671 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018591:	39 c7                	cmp    edi,eax
c0018593:	0f 84 d3 00 00 00    	je     c001866c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018599:	40                   	inc    eax
c001859a:	3d d0 00 00 00       	cmp    eax,0xd0
c001859f:	74 09                	je     c00185aa <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00185a1:	89 f3                	mov    ebx,esi
c00185a3:	80 fb 0f             	cmp    bl,0xf
c00185a6:	75 f1                	jne    c0018599 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00185a8:	eb e7                	jmp    c0018591 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00185aa:	80 f9 10             	cmp    cl,0x10
c00185ad:	75 14                	jne    c00185c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00185af:	8d 42 fc             	lea    eax,[edx-0x4]
c00185b2:	83 e0 fb             	and    eax,0xfffffffb
c00185b5:	3c 02                	cmp    al,0x2
c00185b7:	76 34                	jbe    c00185ed <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00185b9:	b8 a2 c2 02 c0       	mov    eax,0xc002c2a2
c00185be:	80 fa 02             	cmp    dl,0x2
c00185c1:	eb 24                	jmp    c00185e7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00185c3:	80 f9 11             	cmp    cl,0x11
c00185c6:	75 13                	jne    c00185db <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00185c8:	b8 a2 c2 02 c0       	mov    eax,0xc002c2a2
c00185cd:	80 fa 03             	cmp    dl,0x3
c00185d0:	0f 85 9b 00 00 00    	jne    c0018671 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185d6:	e9 91 00 00 00       	jmp    c001866c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00185db:	80 f9 12             	cmp    cl,0x12
c00185de:	75 14                	jne    c00185f4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00185e0:	b8 a2 c2 02 c0       	mov    eax,0xc002c2a2
c00185e5:	fe ca                	dec    dl
c00185e7:	0f 85 84 00 00 00    	jne    c0018671 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185ed:	b8 c0 e4 02 c0       	mov    eax,0xc002e4c0
c00185f2:	eb 7d                	jmp    c0018671 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185f4:	80 f9 14             	cmp    cl,0x14
c00185f7:	75 12                	jne    c001860b <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00185f9:	4a                   	dec    edx
c00185fa:	b8 a2 c2 02 c0       	mov    eax,0xc002c2a2
c00185ff:	80 fa 01             	cmp    dl,0x1
c0018602:	77 6d                	ja     c0018671 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018604:	b8 d0 e4 02 c0       	mov    eax,0xc002e4d0
c0018609:	eb 66                	jmp    c0018671 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001860b:	80 f9 15             	cmp    cl,0x15
c001860e:	75 31                	jne    c0018641 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018610:	b8 e0 e4 02 c0       	mov    eax,0xc002e4e0
c0018615:	80 fa 01             	cmp    dl,0x1
c0018618:	74 57                	je     c0018671 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001861a:	b8 a2 c2 02 c0       	mov    eax,0xc002c2a2
c001861f:	80 fa 13             	cmp    dl,0x13
c0018622:	76 0c                	jbe    c0018630 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018624:	80 fa 30             	cmp    dl,0x30
c0018627:	75 48                	jne    c0018671 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018629:	b8 00 e5 02 c0       	mov    eax,0xc002e500
c001862e:	eb 41                	jmp    c0018671 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018630:	b9 04 00 09 00       	mov    ecx,0x90004
c0018635:	0f a3 d1             	bt     ecx,edx
c0018638:	73 37                	jae    c0018671 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001863a:	b8 f0 e4 02 c0       	mov    eax,0xc002e4f0
c001863f:	eb 30                	jmp    c0018671 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018641:	b8 a2 c2 02 c0       	mov    eax,0xc002c2a2
c0018646:	80 f9 16             	cmp    cl,0x16
c0018649:	75 26                	jne    c0018671 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001864b:	b8 10 e5 02 c0       	mov    eax,0xc002e510
c0018650:	84 d2                	test   dl,dl
c0018652:	74 1d                	je     c0018671 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018654:	b8 a2 c2 02 c0       	mov    eax,0xc002c2a2
c0018659:	80 fa 30             	cmp    dl,0x30
c001865c:	75 13                	jne    c0018671 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001865e:	b8 20 e5 02 c0       	mov    eax,0xc002e520
c0018663:	eb 0c                	jmp    c0018671 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018665:	b8 40 e4 02 c0       	mov    eax,0xc002e440
c001866a:	eb 05                	jmp    c0018671 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001866c:	b8 b0 e4 02 c0       	mov    eax,0xc002e4b0
c0018671:	5b                   	pop    ebx
c0018672:	5e                   	pop    esi
c0018673:	5f                   	pop    edi
c0018674:	5d                   	pop    ebp
c0018675:	c3                   	ret    

c0018676 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018676:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001867a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001867e:	80 f9 04             	cmp    cl,0x4
c0018681:	75 6b                	jne    c00186ee <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018683:	b8 a0 e2 02 c0       	mov    eax,0xc002e2a0
c0018688:	80 fa 01             	cmp    dl,0x1
c001868b:	0f 86 92 02 00 00    	jbe    c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018691:	b8 b0 e2 02 c0       	mov    eax,0xc002e2b0
c0018696:	80 fa 02             	cmp    dl,0x2
c0018699:	0f 84 84 02 00 00    	je     c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001869f:	b8 c0 e2 02 c0       	mov    eax,0xc002e2c0
c00186a4:	80 fa 03             	cmp    dl,0x3
c00186a7:	0f 84 76 02 00 00    	je     c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186ad:	b8 d0 e2 02 c0       	mov    eax,0xc002e2d0
c00186b2:	80 fa 04             	cmp    dl,0x4
c00186b5:	0f 84 68 02 00 00    	je     c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186bb:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c00186c0:	80 fa 05             	cmp    dl,0x5
c00186c3:	0f 84 5a 02 00 00    	je     c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186c9:	b8 c0 e2 02 c0       	mov    eax,0xc002e2c0
c00186ce:	80 fa 07             	cmp    dl,0x7
c00186d1:	0f 84 4c 02 00 00    	je     c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186d7:	83 ea 08             	sub    edx,0x8
c00186da:	b8 a2 c2 02 c0       	mov    eax,0xc002c2a2
c00186df:	80 fa 01             	cmp    dl,0x1
c00186e2:	0f 87 3b 02 00 00    	ja     c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186e8:	b8 f0 e2 02 c0       	mov    eax,0xc002e2f0
c00186ed:	c3                   	ret    
c00186ee:	80 f9 05             	cmp    cl,0x5
c00186f1:	75 45                	jne    c0018738 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00186f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00186f6:	b8 00 e3 02 c0       	mov    eax,0xc002e300
c00186fb:	80 f9 02             	cmp    cl,0x2
c00186fe:	0f 86 1f 02 00 00    	jbe    c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018704:	80 fa 04             	cmp    dl,0x4
c0018707:	0f 84 f3 01 00 00    	je     c0018900 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001870d:	80 fa 07             	cmp    dl,0x7
c0018710:	0f 84 0d 02 00 00    	je     c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018716:	b8 10 e3 02 c0       	mov    eax,0xc002e310
c001871b:	80 fa 08             	cmp    dl,0x8
c001871e:	0f 84 ff 01 00 00    	je     c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018724:	b8 a2 c2 02 c0       	mov    eax,0xc002c2a2
c0018729:	80 fa 09             	cmp    dl,0x9
c001872c:	0f 85 f1 01 00 00    	jne    c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018732:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c0018737:	c3                   	ret    
c0018738:	80 f9 06             	cmp    cl,0x6
c001873b:	0f 85 85 01 00 00    	jne    c00188c6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018741:	b8 30 e3 02 c0       	mov    eax,0xc002e330
c0018746:	80 fa 01             	cmp    dl,0x1
c0018749:	0f 84 d4 01 00 00    	je     c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001874f:	8d 42 fb             	lea    eax,[edx-0x5]
c0018752:	3c 01                	cmp    al,0x1
c0018754:	0f 86 ac 01 00 00    	jbe    c0018906 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001875a:	80 fa 03             	cmp    dl,0x3
c001875d:	0f 84 a3 01 00 00    	je     c0018906 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018763:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018766:	b8 50 e3 02 c0       	mov    eax,0xc002e350
c001876b:	80 f9 01             	cmp    cl,0x1
c001876e:	0f 86 af 01 00 00    	jbe    c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018774:	80 fa 09             	cmp    dl,0x9
c0018777:	0f 84 8f 01 00 00    	je     c001890c <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001877d:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018780:	80 f9 01             	cmp    cl,0x1
c0018783:	0f 86 9a 01 00 00    	jbe    c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018789:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c001878e:	80 fa 0d             	cmp    dl,0xd
c0018791:	0f 84 8c 01 00 00    	je     c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018797:	b8 70 e3 02 c0       	mov    eax,0xc002e370
c001879c:	80 fa 0e             	cmp    dl,0xe
c001879f:	0f 84 7e 01 00 00    	je     c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187a5:	b8 80 e3 02 c0       	mov    eax,0xc002e380
c00187aa:	80 fa 0f             	cmp    dl,0xf
c00187ad:	0f 84 70 01 00 00    	je     c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187b3:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c00187b8:	80 fa 15             	cmp    dl,0x15
c00187bb:	0f 84 62 01 00 00    	je     c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187c1:	8d 4a ea             	lea    ecx,[edx-0x16]
c00187c4:	b8 80 e3 02 c0       	mov    eax,0xc002e380
c00187c9:	80 f9 01             	cmp    cl,0x1
c00187cc:	0f 86 51 01 00 00    	jbe    c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187d2:	80 fa 1a             	cmp    dl,0x1a
c00187d5:	0f 84 37 01 00 00    	je     c0018912 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00187db:	80 fa 1c             	cmp    dl,0x1c
c00187de:	0f 84 34 01 00 00    	je     c0018918 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00187e4:	80 fa 1d             	cmp    dl,0x1d
c00187e7:	0f 84 36 01 00 00    	je     c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187ed:	b8 b0 e3 02 c0       	mov    eax,0xc002e3b0
c00187f2:	80 fa 25             	cmp    dl,0x25
c00187f5:	0f 84 28 01 00 00    	je     c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187fb:	8d 4a da             	lea    ecx,[edx-0x26]
c00187fe:	b8 a0 e3 02 c0       	mov    eax,0xc002e3a0
c0018803:	80 f9 01             	cmp    cl,0x1
c0018806:	0f 86 17 01 00 00    	jbe    c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001880c:	b8 c0 e3 02 c0       	mov    eax,0xc002e3c0
c0018811:	80 fa 2a             	cmp    dl,0x2a
c0018814:	0f 84 09 01 00 00    	je     c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001881a:	b8 b0 e3 02 c0       	mov    eax,0xc002e3b0
c001881f:	80 fa 2c             	cmp    dl,0x2c
c0018822:	0f 84 fb 00 00 00    	je     c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018828:	b8 c0 e3 02 c0       	mov    eax,0xc002e3c0
c001882d:	80 fa 2d             	cmp    dl,0x2d
c0018830:	0f 84 ed 00 00 00    	je     c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018836:	b8 90 e3 02 c0       	mov    eax,0xc002e390
c001883b:	80 fa 2e             	cmp    dl,0x2e
c001883e:	0f 84 df 00 00 00    	je     c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018844:	b8 b0 e3 02 c0       	mov    eax,0xc002e3b0
c0018849:	80 fa 2f             	cmp    dl,0x2f
c001884c:	0f 84 d1 00 00 00    	je     c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018852:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018855:	b8 a0 e3 02 c0       	mov    eax,0xc002e3a0
c001885a:	80 f9 01             	cmp    cl,0x1
c001885d:	0f 86 c0 00 00 00    	jbe    c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018863:	b8 d0 e3 02 c0       	mov    eax,0xc002e3d0
c0018868:	80 fa 37             	cmp    dl,0x37
c001886b:	0f 84 b2 00 00 00    	je     c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018871:	b8 e0 e3 02 c0       	mov    eax,0xc002e3e0
c0018876:	80 fa 3a             	cmp    dl,0x3a
c0018879:	0f 84 a4 00 00 00    	je     c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001887f:	b8 f0 e3 02 c0       	mov    eax,0xc002e3f0
c0018884:	80 fa 3c             	cmp    dl,0x3c
c0018887:	0f 84 96 00 00 00    	je     c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001888d:	b8 00 e4 02 c0       	mov    eax,0xc002e400
c0018892:	80 fa 3d             	cmp    dl,0x3d
c0018895:	0f 84 88 00 00 00    	je     c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001889b:	b8 e0 e3 02 c0       	mov    eax,0xc002e3e0
c00188a0:	80 fa 3e             	cmp    dl,0x3e
c00188a3:	74 7e                	je     c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188a5:	8d 42 bb             	lea    eax,[edx-0x45]
c00188a8:	3c 01                	cmp    al,0x1
c00188aa:	76 72                	jbe    c001891e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00188ac:	80 fa 3f             	cmp    dl,0x3f
c00188af:	74 6d                	je     c001891e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00188b1:	80 fa 4a             	cmp    dl,0x4a
c00188b4:	74 0a                	je     c00188c0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00188b6:	b8 a2 c2 02 c0       	mov    eax,0xc002c2a2
c00188bb:	80 fa 4d             	cmp    dl,0x4d
c00188be:	75 63                	jne    c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188c0:	b8 d0 e3 02 c0       	mov    eax,0xc002e3d0
c00188c5:	c3                   	ret    
c00188c6:	b8 a2 c2 02 c0       	mov    eax,0xc002c2a2
c00188cb:	80 f9 0b             	cmp    cl,0xb
c00188ce:	75 0a                	jne    c00188da <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00188d0:	fe ca                	dec    dl
c00188d2:	75 4f                	jne    c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188d4:	b8 10 e4 02 c0       	mov    eax,0xc002e410
c00188d9:	c3                   	ret    
c00188da:	80 f9 0f             	cmp    cl,0xf
c00188dd:	75 44                	jne    c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188df:	b8 20 e4 02 c0       	mov    eax,0xc002e420
c00188e4:	80 fa 02             	cmp    dl,0x2
c00188e7:	76 3a                	jbe    c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188e9:	8d 42 fd             	lea    eax,[edx-0x3]
c00188ec:	3c 01                	cmp    al,0x1
c00188ee:	76 0a                	jbe    c00188fa <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00188f0:	b8 a2 c2 02 c0       	mov    eax,0xc002c2a2
c00188f5:	80 fa 06             	cmp    dl,0x6
c00188f8:	75 29                	jne    c0018923 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188fa:	b8 30 e4 02 c0       	mov    eax,0xc002e430
c00188ff:	c3                   	ret    
c0018900:	b8 10 e3 02 c0       	mov    eax,0xc002e310
c0018905:	c3                   	ret    
c0018906:	b8 40 e3 02 c0       	mov    eax,0xc002e340
c001890b:	c3                   	ret    
c001890c:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c0018911:	c3                   	ret    
c0018912:	b8 90 e3 02 c0       	mov    eax,0xc002e390
c0018917:	c3                   	ret    
c0018918:	b8 a0 e3 02 c0       	mov    eax,0xc002e3a0
c001891d:	c3                   	ret    
c001891e:	b8 f0 e3 02 c0       	mov    eax,0xc002e3f0
c0018923:	c3                   	ret    

c0018924 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018924:	60                   	pusha  
c0018925:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018929:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001892d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018931:	9c                   	pushf  
c0018932:	fa                   	cli    
c0018933:	0f 09                	wbinvd 
c0018935:	0f 30                	wrmsr  
c0018937:	9d                   	popf   
c0018938:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001893c:	89 02                	mov    DWORD PTR [edx],eax
c001893e:	61                   	popa   
c001893f:	c3                   	ret    

c0018940 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018940:	60                   	pusha  
c0018941:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018945:	9c                   	pushf  
c0018946:	fa                   	cli    
c0018947:	0f 09                	wbinvd 
c0018949:	31 c0                	xor    eax,eax
c001894b:	31 d2                	xor    edx,edx
c001894d:	0f 32                	rdmsr  
c001894f:	9d                   	popf   
c0018950:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018954:	89 02                	mov    DWORD PTR [edx],eax
c0018956:	61                   	popa   
c0018957:	c3                   	ret    

c0018958 <CPU::AMD_K6_writeback(int, int, int)>:
c0018958:	56                   	push   esi
c0018959:	53                   	push   ebx
c001895a:	83 ec 10             	sub    esp,0x10
c001895d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018961:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018966:	75 5d                	jne    c00189c5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018968:	83 f8 08             	cmp    eax,0x8
c001896b:	75 09                	jne    c0018976 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001896d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018972:	7e 13                	jle    c0018987 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018974:	eb 30                	jmp    c00189a6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018976:	83 f8 06             	cmp    eax,0x6
c0018979:	7c 4a                	jl     c00189c5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001897b:	83 f8 07             	cmp    eax,0x7
c001897e:	7e 07                	jle    c0018987 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018980:	83 f8 09             	cmp    eax,0x9
c0018983:	74 21                	je     c00189a6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018985:	eb 3e                	jmp    c00189c5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018987:	89 e6                	mov    esi,esp
c0018989:	8b 1d 68 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f068
c001898f:	56                   	push   esi
c0018990:	c1 eb 15             	shr    ebx,0x15
c0018993:	68 82 00 00 c0       	push   0xc0000082
c0018998:	83 e3 7e             	and    ebx,0x7e
c001899b:	e8 a0 ff ff ff       	call   c0018940 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00189a0:	56                   	push   esi
c00189a1:	6a 00                	push   0x0
c00189a3:	53                   	push   ebx
c00189a4:	eb 12                	jmp    c00189b8 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00189a6:	89 e3                	mov    ebx,esp
c00189a8:	53                   	push   ebx
c00189a9:	68 82 00 00 c0       	push   0xc0000082
c00189ae:	e8 8d ff ff ff       	call   c0018940 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00189b3:	53                   	push   ebx
c00189b4:	6a 00                	push   0x0
c00189b6:	6a 00                	push   0x0
c00189b8:	68 82 00 00 c0       	push   0xc0000082
c00189bd:	e8 62 ff ff ff       	call   c0018924 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00189c2:	83 c4 18             	add    esp,0x18
c00189c5:	83 c4 10             	add    esp,0x10
c00189c8:	5b                   	pop    ebx
c00189c9:	5e                   	pop    esi
c00189ca:	c3                   	ret    
c00189cb:	90                   	nop

c00189cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00189cc:	55                   	push   ebp
c00189cd:	57                   	push   edi
c00189ce:	56                   	push   esi
c00189cf:	53                   	push   ebx
c00189d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00189d4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00189d8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00189dc:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00189e0:	39 05 40 e5 02 c0    	cmp    DWORD PTR ds:0xc002e540,eax
c00189e6:	75 23                	jne    c0018a0b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00189e8:	a1 4c 1b 03 c0       	mov    eax,ds:0xc0031b4c
c00189ed:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00189f1:	89 06                	mov    DWORD PTR [esi],eax
c00189f3:	a1 48 1b 03 c0       	mov    eax,ds:0xc0031b48
c00189f8:	89 07                	mov    DWORD PTR [edi],eax
c00189fa:	a1 44 1b 03 c0       	mov    eax,ds:0xc0031b44
c00189ff:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018a02:	a1 40 1b 03 c0       	mov    eax,ds:0xc0031b40
c0018a07:	89 02                	mov    DWORD PTR [edx],eax
c0018a09:	eb 3f                	jmp    c0018a4a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018a0b:	31 c9                	xor    ecx,ecx
c0018a0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a11:	0f a2                	cpuid  
c0018a13:	89 06                	mov    DWORD PTR [esi],eax
c0018a15:	89 1f                	mov    DWORD PTR [edi],ebx
c0018a17:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018a1b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018a1e:	89 10                	mov    DWORD PTR [eax],edx
c0018a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a24:	a3 40 e5 02 c0       	mov    ds:0xc002e540,eax
c0018a29:	8b 06                	mov    eax,DWORD PTR [esi]
c0018a2b:	a3 4c 1b 03 c0       	mov    ds:0xc0031b4c,eax
c0018a30:	8b 07                	mov    eax,DWORD PTR [edi]
c0018a32:	a3 48 1b 03 c0       	mov    ds:0xc0031b48,eax
c0018a37:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018a3a:	a3 44 1b 03 c0       	mov    ds:0xc0031b44,eax
c0018a3f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018a43:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a45:	a3 40 1b 03 c0       	mov    ds:0xc0031b40,eax
c0018a4a:	5b                   	pop    ebx
c0018a4b:	5e                   	pop    esi
c0018a4c:	5f                   	pop    edi
c0018a4d:	5d                   	pop    ebp
c0018a4e:	c3                   	ret    
c0018a4f:	90                   	nop

c0018a50 <CPU::cpuidCheckEDX(unsigned int)>:
c0018a50:	83 ec 10             	sub    esp,0x10
c0018a53:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a57:	50                   	push   eax
c0018a58:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a5c:	50                   	push   eax
c0018a5d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a61:	50                   	push   eax
c0018a62:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a66:	50                   	push   eax
c0018a67:	6a 01                	push   0x1
c0018a69:	e8 5e ff ff ff       	call   c00189cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a6e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a72:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018a76:	0f 95 c0             	setne  al
c0018a79:	83 c4 24             	add    esp,0x24
c0018a7c:	c3                   	ret    
c0018a7d:	90                   	nop

c0018a7e <CPU::cpuidCheckECX(unsigned int)>:
c0018a7e:	83 ec 10             	sub    esp,0x10
c0018a81:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a85:	50                   	push   eax
c0018a86:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a8a:	50                   	push   eax
c0018a8b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a8f:	50                   	push   eax
c0018a90:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a94:	50                   	push   eax
c0018a95:	6a 01                	push   0x1
c0018a97:	e8 30 ff ff ff       	call   c00189cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a9c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018aa0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018aa4:	0f 95 c0             	setne  al
c0018aa7:	83 c4 24             	add    esp,0x24
c0018aaa:	c3                   	ret    
c0018aab:	90                   	nop

c0018aac <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018aac:	83 ec 10             	sub    esp,0x10
c0018aaf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ab3:	50                   	push   eax
c0018ab4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ab8:	50                   	push   eax
c0018ab9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018abd:	50                   	push   eax
c0018abe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ac2:	50                   	push   eax
c0018ac3:	6a 07                	push   0x7
c0018ac5:	e8 02 ff ff ff       	call   c00189cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018aca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ace:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018ad2:	0f 95 c0             	setne  al
c0018ad5:	83 c4 24             	add    esp,0x24
c0018ad8:	c3                   	ret    
c0018ad9:	90                   	nop

c0018ada <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018ada:	83 ec 10             	sub    esp,0x10
c0018add:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ae1:	50                   	push   eax
c0018ae2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ae6:	50                   	push   eax
c0018ae7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018aeb:	50                   	push   eax
c0018aec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018af0:	50                   	push   eax
c0018af1:	6a 07                	push   0x7
c0018af3:	e8 d4 fe ff ff       	call   c00189cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018af8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018afc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018b00:	0f 95 c0             	setne  al
c0018b03:	83 c4 24             	add    esp,0x24
c0018b06:	c3                   	ret    
c0018b07:	90                   	nop

c0018b08 <CPU::CPU()>:
c0018b08:	83 ec 0c             	sub    esp,0xc
c0018b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b0f:	83 ec 08             	sub    esp,0x8
c0018b12:	68 a2 c2 02 c0       	push   0xc002c2a2
c0018b17:	50                   	push   eax
c0018b18:	e8 17 b4 ff ff       	call   c0013f34 <Device::Device(char const*)>
c0018b1d:	83 c4 10             	add    esp,0x10
c0018b20:	ba 7c c3 02 c0       	mov    edx,0xc002c37c
c0018b25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b29:	89 10                	mov    DWORD PTR [eax],edx
c0018b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b2f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018b39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b3d:	05 78 01 00 00       	add    eax,0x178
c0018b42:	83 ec 0c             	sub    esp,0xc
c0018b45:	50                   	push   eax
c0018b46:	e8 57 65 ff ff       	call   c000f0a2 <GDT::GDT()>
c0018b4b:	83 c4 10             	add    esp,0x10
c0018b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b52:	05 7c 09 00 00       	add    eax,0x97c
c0018b57:	83 ec 0c             	sub    esp,0xc
c0018b5a:	50                   	push   eax
c0018b5b:	e8 ac 67 ff ff       	call   c000f30c <IDT::IDT()>
c0018b60:	83 c4 10             	add    esp,0x10
c0018b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b67:	05 7c 11 00 00       	add    eax,0x117c
c0018b6c:	83 ec 0c             	sub    esp,0xc
c0018b6f:	50                   	push   eax
c0018b70:	e8 ad 82 ff ff       	call   c0010e22 <TSS::TSS()>
c0018b75:	83 c4 10             	add    esp,0x10
c0018b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b7c:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018b83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b87:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018b91:	90                   	nop
c0018b92:	83 c4 0c             	add    esp,0xc
c0018b95:	c3                   	ret    

c0018b96 <CPU::displayFeatures()>:
c0018b96:	53                   	push   ebx
c0018b97:	83 ec 10             	sub    esp,0x10
c0018b9a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018b9e:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018ba4:	68 b0 bf 02 c0       	push   0xc002bfb0
c0018ba9:	e8 49 9d ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0018bae:	59                   	pop    ecx
c0018baf:	58                   	pop    eax
c0018bb0:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018bb6:	50                   	push   eax
c0018bb7:	68 c1 bf 02 c0       	push   0xc002bfc1
c0018bbc:	e8 36 9d ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0018bc1:	58                   	pop    eax
c0018bc2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018bc8:	5a                   	pop    edx
c0018bc9:	c1 e8 0e             	shr    eax,0xe
c0018bcc:	0f b6 c0             	movzx  eax,al
c0018bcf:	50                   	push   eax
c0018bd0:	68 d2 bf 02 c0       	push   0xc002bfd2
c0018bd5:	e8 1d 9d ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0018bda:	59                   	pop    ecx
c0018bdb:	58                   	pop    eax
c0018bdc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018be2:	66 c1 e8 06          	shr    ax,0x6
c0018be6:	0f b6 c0             	movzx  eax,al
c0018be9:	50                   	push   eax
c0018bea:	68 e3 bf 02 c0       	push   0xc002bfe3
c0018bef:	e8 03 9d ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0018bf4:	c7 04 24 90 c4 02 c0 	mov    DWORD PTR [esp],0xc002c490
c0018bfb:	e8 f7 9c ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0018c00:	83 c4 10             	add    esp,0x10
c0018c03:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018c08:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018c0f:	74 05                	je     c0018c16 <CPU::displayFeatures()+0x80>
c0018c11:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018c16:	52                   	push   edx
c0018c17:	52                   	push   edx
c0018c18:	50                   	push   eax
c0018c19:	68 f4 bf 02 c0       	push   0xc002bff4
c0018c1e:	e8 d4 9c ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0018c23:	83 c4 10             	add    esp,0x10
c0018c26:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018c2b:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018c32:	78 05                	js     c0018c39 <CPU::displayFeatures()+0xa3>
c0018c34:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018c39:	51                   	push   ecx
c0018c3a:	51                   	push   ecx
c0018c3b:	50                   	push   eax
c0018c3c:	68 0b c0 02 c0       	push   0xc002c00b
c0018c41:	e8 b1 9c ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0018c46:	83 c4 10             	add    esp,0x10
c0018c49:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018c4e:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018c55:	75 05                	jne    c0018c5c <CPU::displayFeatures()+0xc6>
c0018c57:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018c5c:	52                   	push   edx
c0018c5d:	52                   	push   edx
c0018c5e:	50                   	push   eax
c0018c5f:	68 22 c0 02 c0       	push   0xc002c022
c0018c64:	e8 8e 9c ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0018c69:	83 c4 10             	add    esp,0x10
c0018c6c:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018c71:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018c78:	75 05                	jne    c0018c7f <CPU::displayFeatures()+0xe9>
c0018c7a:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018c7f:	51                   	push   ecx
c0018c80:	51                   	push   ecx
c0018c81:	50                   	push   eax
c0018c82:	68 39 c0 02 c0       	push   0xc002c039
c0018c87:	e8 6b 9c ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0018c8c:	83 c4 10             	add    esp,0x10
c0018c8f:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018c94:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018c9b:	75 05                	jne    c0018ca2 <CPU::displayFeatures()+0x10c>
c0018c9d:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018ca2:	52                   	push   edx
c0018ca3:	52                   	push   edx
c0018ca4:	50                   	push   eax
c0018ca5:	68 50 c0 02 c0       	push   0xc002c050
c0018caa:	e8 48 9c ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0018caf:	83 c4 10             	add    esp,0x10
c0018cb2:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018cb7:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018cbe:	75 05                	jne    c0018cc5 <CPU::displayFeatures()+0x12f>
c0018cc0:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018cc5:	51                   	push   ecx
c0018cc6:	51                   	push   ecx
c0018cc7:	50                   	push   eax
c0018cc8:	68 67 c0 02 c0       	push   0xc002c067
c0018ccd:	e8 25 9c ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0018cd2:	83 c4 10             	add    esp,0x10
c0018cd5:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018cda:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018ce1:	75 05                	jne    c0018ce8 <CPU::displayFeatures()+0x152>
c0018ce3:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018ce8:	52                   	push   edx
c0018ce9:	52                   	push   edx
c0018cea:	50                   	push   eax
c0018ceb:	68 7e c0 02 c0       	push   0xc002c07e
c0018cf0:	e8 02 9c ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0018cf5:	83 c4 10             	add    esp,0x10
c0018cf8:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018cfd:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018d04:	75 05                	jne    c0018d0b <CPU::displayFeatures()+0x175>
c0018d06:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018d0b:	51                   	push   ecx
c0018d0c:	51                   	push   ecx
c0018d0d:	50                   	push   eax
c0018d0e:	68 95 c0 02 c0       	push   0xc002c095
c0018d13:	e8 df 9b ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0018d18:	83 c4 10             	add    esp,0x10
c0018d1b:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018d20:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018d27:	75 05                	jne    c0018d2e <CPU::displayFeatures()+0x198>
c0018d29:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018d2e:	52                   	push   edx
c0018d2f:	52                   	push   edx
c0018d30:	50                   	push   eax
c0018d31:	68 ac c0 02 c0       	push   0xc002c0ac
c0018d36:	e8 bc 9b ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0018d3b:	83 c4 10             	add    esp,0x10
c0018d3e:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018d43:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018d4a:	75 05                	jne    c0018d51 <CPU::displayFeatures()+0x1bb>
c0018d4c:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018d51:	51                   	push   ecx
c0018d52:	51                   	push   ecx
c0018d53:	50                   	push   eax
c0018d54:	68 c3 c0 02 c0       	push   0xc002c0c3
c0018d59:	e8 99 9b ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0018d5e:	83 c4 10             	add    esp,0x10
c0018d61:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018d66:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018d6d:	75 05                	jne    c0018d74 <CPU::displayFeatures()+0x1de>
c0018d6f:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018d74:	52                   	push   edx
c0018d75:	52                   	push   edx
c0018d76:	50                   	push   eax
c0018d77:	68 da c0 02 c0       	push   0xc002c0da
c0018d7c:	e8 76 9b ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0018d81:	83 c4 10             	add    esp,0x10
c0018d84:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018d89:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018d90:	75 05                	jne    c0018d97 <CPU::displayFeatures()+0x201>
c0018d92:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018d97:	51                   	push   ecx
c0018d98:	51                   	push   ecx
c0018d99:	50                   	push   eax
c0018d9a:	68 f1 c0 02 c0       	push   0xc002c0f1
c0018d9f:	e8 53 9b ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0018da4:	83 c4 10             	add    esp,0x10
c0018da7:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018dac:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018db3:	75 05                	jne    c0018dba <CPU::displayFeatures()+0x224>
c0018db5:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018dba:	52                   	push   edx
c0018dbb:	52                   	push   edx
c0018dbc:	50                   	push   eax
c0018dbd:	68 08 c1 02 c0       	push   0xc002c108
c0018dc2:	e8 30 9b ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0018dc7:	83 c4 10             	add    esp,0x10
c0018dca:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018dcf:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018dd6:	78 05                	js     c0018ddd <CPU::displayFeatures()+0x247>
c0018dd8:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018ddd:	51                   	push   ecx
c0018dde:	51                   	push   ecx
c0018ddf:	50                   	push   eax
c0018de0:	68 1f c1 02 c0       	push   0xc002c11f
c0018de5:	e8 0d 9b ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0018dea:	83 c4 10             	add    esp,0x10
c0018ded:	b8 72 a9 02 c0       	mov    eax,0xc002a972
c0018df2:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018df9:	75 05                	jne    c0018e00 <CPU::displayFeatures()+0x26a>
c0018dfb:	b8 76 a9 02 c0       	mov    eax,0xc002a976
c0018e00:	52                   	push   edx
c0018e01:	52                   	push   edx
c0018e02:	50                   	push   eax
c0018e03:	68 36 c1 02 c0       	push   0xc002c136
c0018e08:	e8 ea 9a ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0018e0d:	83 c4 18             	add    esp,0x18
c0018e10:	5b                   	pop    ebx
c0018e11:	c3                   	ret    

c0018e12 <CPU::detectFeatures()>:
c0018e12:	55                   	push   ebp
c0018e13:	57                   	push   edi
c0018e14:	56                   	push   esi
c0018e15:	53                   	push   ebx
c0018e16:	83 ec 50             	sub    esp,0x50
c0018e19:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018e1d:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018e27:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018e2e:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018e34:	6a 0d                	push   0xd
c0018e36:	6a 00                	push   0x0
c0018e38:	55                   	push   ebp
c0018e39:	e8 12 79 fe ff       	call   c0000750 <memset>
c0018e3e:	83 c4 10             	add    esp,0x10
c0018e41:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0018e46:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018e4d:	0f 84 22 09 00 00    	je     c0019775 <CPU::detectFeatures()+0x963>
c0018e53:	83 ec 0c             	sub    esp,0xc
c0018e56:	89 ef                	mov    edi,ebp
c0018e58:	6a 10                	push   0x10
c0018e5a:	e8 f1 fb ff ff       	call   c0018a50 <CPU::cpuidCheckEDX(unsigned int)>
c0018e5f:	83 e0 01             	and    eax,0x1
c0018e62:	8d 14 00             	lea    edx,[eax+eax*1]
c0018e65:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e6b:	83 e0 fd             	and    eax,0xfffffffd
c0018e6e:	09 d0                	or     eax,edx
c0018e70:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e76:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018e7d:	e8 ce fb ff ff       	call   c0018a50 <CPU::cpuidCheckEDX(unsigned int)>
c0018e82:	83 e0 01             	and    eax,0x1
c0018e85:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018e8c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e92:	83 e0 fb             	and    eax,0xfffffffb
c0018e95:	09 d0                	or     eax,edx
c0018e97:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e9d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018ea4:	e8 a7 fb ff ff       	call   c0018a50 <CPU::cpuidCheckEDX(unsigned int)>
c0018ea9:	83 e0 01             	and    eax,0x1
c0018eac:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018eb3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018eb9:	83 e0 f7             	and    eax,0xfffffff7
c0018ebc:	09 d0                	or     eax,edx
c0018ebe:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ec4:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018ecb:	e8 80 fb ff ff       	call   c0018a50 <CPU::cpuidCheckEDX(unsigned int)>
c0018ed0:	83 e0 01             	and    eax,0x1
c0018ed3:	c1 e0 04             	shl    eax,0x4
c0018ed6:	88 c2                	mov    dl,al
c0018ed8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ede:	83 e0 ef             	and    eax,0xffffffef
c0018ee1:	09 d0                	or     eax,edx
c0018ee3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ee9:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018ef0:	e8 5b fb ff ff       	call   c0018a50 <CPU::cpuidCheckEDX(unsigned int)>
c0018ef5:	83 e0 01             	and    eax,0x1
c0018ef8:	c1 e0 05             	shl    eax,0x5
c0018efb:	88 c2                	mov    dl,al
c0018efd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f03:	83 e0 df             	and    eax,0xffffffdf
c0018f06:	09 d0                	or     eax,edx
c0018f08:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f0e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018f15:	e8 36 fb ff ff       	call   c0018a50 <CPU::cpuidCheckEDX(unsigned int)>
c0018f1a:	83 e0 01             	and    eax,0x1
c0018f1d:	8d 14 00             	lea    edx,[eax+eax*1]
c0018f20:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018f26:	83 e0 fd             	and    eax,0xfffffffd
c0018f29:	09 d0                	or     eax,edx
c0018f2b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018f31:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018f38:	e8 13 fb ff ff       	call   c0018a50 <CPU::cpuidCheckEDX(unsigned int)>
c0018f3d:	83 e0 01             	and    eax,0x1
c0018f40:	c1 e0 06             	shl    eax,0x6
c0018f43:	88 c2                	mov    dl,al
c0018f45:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018f4b:	83 e0 bf             	and    eax,0xffffffbf
c0018f4e:	09 d0                	or     eax,edx
c0018f50:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018f56:	58                   	pop    eax
c0018f57:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f5b:	50                   	push   eax
c0018f5c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f60:	50                   	push   eax
c0018f61:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018f65:	56                   	push   esi
c0018f66:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f6a:	50                   	push   eax
c0018f6b:	6a 00                	push   0x0
c0018f6d:	e8 5a fa ff ff       	call   c00189cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f72:	b8 04 00 00 00       	mov    eax,0x4
c0018f77:	89 c1                	mov    ecx,eax
c0018f79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018f7b:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018f81:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018f85:	89 c1                	mov    ecx,eax
c0018f87:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018f89:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018f8f:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018f93:	89 c1                	mov    ecx,eax
c0018f95:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018f97:	83 c4 18             	add    esp,0x18
c0018f9a:	68 4d c1 02 c0       	push   0xc002c14d
c0018f9f:	55                   	push   ebp
c0018fa0:	e8 f3 78 fe ff       	call   c0000898 <strcmp>
c0018fa5:	83 c4 10             	add    esp,0x10
c0018fa8:	85 c0                	test   eax,eax
c0018faa:	75 0f                	jne    c0018fbb <CPU::detectFeatures()+0x1a9>
c0018fac:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018fb6:	e9 22 02 00 00       	jmp    c00191dd <CPU::detectFeatures()+0x3cb>
c0018fbb:	50                   	push   eax
c0018fbc:	50                   	push   eax
c0018fbd:	68 5a c1 02 c0       	push   0xc002c15a
c0018fc2:	55                   	push   ebp
c0018fc3:	e8 d0 78 fe ff       	call   c0000898 <strcmp>
c0018fc8:	83 c4 10             	add    esp,0x10
c0018fcb:	85 c0                	test   eax,eax
c0018fcd:	74 dd                	je     c0018fac <CPU::detectFeatures()+0x19a>
c0018fcf:	50                   	push   eax
c0018fd0:	50                   	push   eax
c0018fd1:	68 67 c1 02 c0       	push   0xc002c167
c0018fd6:	55                   	push   ebp
c0018fd7:	e8 bc 78 fe ff       	call   c0000898 <strcmp>
c0018fdc:	83 c4 10             	add    esp,0x10
c0018fdf:	85 c0                	test   eax,eax
c0018fe1:	74 2a                	je     c001900d <CPU::detectFeatures()+0x1fb>
c0018fe3:	50                   	push   eax
c0018fe4:	50                   	push   eax
c0018fe5:	68 74 c1 02 c0       	push   0xc002c174
c0018fea:	55                   	push   ebp
c0018feb:	e8 a8 78 fe ff       	call   c0000898 <strcmp>
c0018ff0:	83 c4 10             	add    esp,0x10
c0018ff3:	85 c0                	test   eax,eax
c0018ff5:	74 16                	je     c001900d <CPU::detectFeatures()+0x1fb>
c0018ff7:	50                   	push   eax
c0018ff8:	50                   	push   eax
c0018ff9:	68 81 c1 02 c0       	push   0xc002c181
c0018ffe:	55                   	push   ebp
c0018fff:	e8 94 78 fe ff       	call   c0000898 <strcmp>
c0019004:	83 c4 10             	add    esp,0x10
c0019007:	85 c0                	test   eax,eax
c0019009:	74 48                	je     c0019053 <CPU::detectFeatures()+0x241>
c001900b:	eb 0f                	jmp    c001901c <CPU::detectFeatures()+0x20a>
c001900d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0019017:	e9 c1 01 00 00       	jmp    c00191dd <CPU::detectFeatures()+0x3cb>
c001901c:	50                   	push   eax
c001901d:	50                   	push   eax
c001901e:	68 8e c1 02 c0       	push   0xc002c18e
c0019023:	55                   	push   ebp
c0019024:	e8 6f 78 fe ff       	call   c0000898 <strcmp>
c0019029:	83 c4 10             	add    esp,0x10
c001902c:	85 c0                	test   eax,eax
c001902e:	74 23                	je     c0019053 <CPU::detectFeatures()+0x241>
c0019030:	57                   	push   edi
c0019031:	57                   	push   edi
c0019032:	68 9b c1 02 c0       	push   0xc002c19b
c0019037:	55                   	push   ebp
c0019038:	e8 5b 78 fe ff       	call   c0000898 <strcmp>
c001903d:	83 c4 10             	add    esp,0x10
c0019040:	85 c0                	test   eax,eax
c0019042:	75 1e                	jne    c0019062 <CPU::detectFeatures()+0x250>
c0019044:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001904e:	e9 8a 01 00 00       	jmp    c00191dd <CPU::detectFeatures()+0x3cb>
c0019053:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001905d:	e9 7b 01 00 00       	jmp    c00191dd <CPU::detectFeatures()+0x3cb>
c0019062:	56                   	push   esi
c0019063:	56                   	push   esi
c0019064:	68 a8 c1 02 c0       	push   0xc002c1a8
c0019069:	55                   	push   ebp
c001906a:	e8 29 78 fe ff       	call   c0000898 <strcmp>
c001906f:	83 c4 10             	add    esp,0x10
c0019072:	85 c0                	test   eax,eax
c0019074:	75 0f                	jne    c0019085 <CPU::detectFeatures()+0x273>
c0019076:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019080:	e9 58 01 00 00       	jmp    c00191dd <CPU::detectFeatures()+0x3cb>
c0019085:	51                   	push   ecx
c0019086:	51                   	push   ecx
c0019087:	68 67 c1 02 c0       	push   0xc002c167
c001908c:	55                   	push   ebp
c001908d:	e8 06 78 fe ff       	call   c0000898 <strcmp>
c0019092:	83 c4 10             	add    esp,0x10
c0019095:	85 c0                	test   eax,eax
c0019097:	75 0f                	jne    c00190a8 <CPU::detectFeatures()+0x296>
c0019099:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00190a3:	e9 35 01 00 00       	jmp    c00191dd <CPU::detectFeatures()+0x3cb>
c00190a8:	52                   	push   edx
c00190a9:	52                   	push   edx
c00190aa:	68 b5 c1 02 c0       	push   0xc002c1b5
c00190af:	55                   	push   ebp
c00190b0:	e8 e3 77 fe ff       	call   c0000898 <strcmp>
c00190b5:	83 c4 10             	add    esp,0x10
c00190b8:	85 c0                	test   eax,eax
c00190ba:	75 0f                	jne    c00190cb <CPU::detectFeatures()+0x2b9>
c00190bc:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00190c6:	e9 12 01 00 00       	jmp    c00191dd <CPU::detectFeatures()+0x3cb>
c00190cb:	50                   	push   eax
c00190cc:	50                   	push   eax
c00190cd:	68 c2 c1 02 c0       	push   0xc002c1c2
c00190d2:	55                   	push   ebp
c00190d3:	e8 c0 77 fe ff       	call   c0000898 <strcmp>
c00190d8:	83 c4 10             	add    esp,0x10
c00190db:	85 c0                	test   eax,eax
c00190dd:	75 0f                	jne    c00190ee <CPU::detectFeatures()+0x2dc>
c00190df:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00190e9:	e9 ef 00 00 00       	jmp    c00191dd <CPU::detectFeatures()+0x3cb>
c00190ee:	50                   	push   eax
c00190ef:	50                   	push   eax
c00190f0:	68 cf c1 02 c0       	push   0xc002c1cf
c00190f5:	55                   	push   ebp
c00190f6:	e8 9d 77 fe ff       	call   c0000898 <strcmp>
c00190fb:	83 c4 10             	add    esp,0x10
c00190fe:	85 c0                	test   eax,eax
c0019100:	75 0f                	jne    c0019111 <CPU::detectFeatures()+0x2ff>
c0019102:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001910c:	e9 cc 00 00 00       	jmp    c00191dd <CPU::detectFeatures()+0x3cb>
c0019111:	50                   	push   eax
c0019112:	50                   	push   eax
c0019113:	68 dc c1 02 c0       	push   0xc002c1dc
c0019118:	55                   	push   ebp
c0019119:	e8 7a 77 fe ff       	call   c0000898 <strcmp>
c001911e:	83 c4 10             	add    esp,0x10
c0019121:	85 c0                	test   eax,eax
c0019123:	75 0f                	jne    c0019134 <CPU::detectFeatures()+0x322>
c0019125:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001912f:	e9 a9 00 00 00       	jmp    c00191dd <CPU::detectFeatures()+0x3cb>
c0019134:	50                   	push   eax
c0019135:	50                   	push   eax
c0019136:	68 e9 c1 02 c0       	push   0xc002c1e9
c001913b:	55                   	push   ebp
c001913c:	e8 57 77 fe ff       	call   c0000898 <strcmp>
c0019141:	83 c4 10             	add    esp,0x10
c0019144:	85 c0                	test   eax,eax
c0019146:	75 0f                	jne    c0019157 <CPU::detectFeatures()+0x345>
c0019148:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0019152:	e9 86 00 00 00       	jmp    c00191dd <CPU::detectFeatures()+0x3cb>
c0019157:	50                   	push   eax
c0019158:	50                   	push   eax
c0019159:	68 f6 c1 02 c0       	push   0xc002c1f6
c001915e:	55                   	push   ebp
c001915f:	e8 34 77 fe ff       	call   c0000898 <strcmp>
c0019164:	83 c4 10             	add    esp,0x10
c0019167:	85 c0                	test   eax,eax
c0019169:	75 0c                	jne    c0019177 <CPU::detectFeatures()+0x365>
c001916b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019175:	eb 66                	jmp    c00191dd <CPU::detectFeatures()+0x3cb>
c0019177:	50                   	push   eax
c0019178:	50                   	push   eax
c0019179:	68 03 c2 02 c0       	push   0xc002c203
c001917e:	55                   	push   ebp
c001917f:	e8 14 77 fe ff       	call   c0000898 <strcmp>
c0019184:	83 c4 10             	add    esp,0x10
c0019187:	85 c0                	test   eax,eax
c0019189:	75 0c                	jne    c0019197 <CPU::detectFeatures()+0x385>
c001918b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019195:	eb 46                	jmp    c00191dd <CPU::detectFeatures()+0x3cb>
c0019197:	57                   	push   edi
c0019198:	57                   	push   edi
c0019199:	68 10 c2 02 c0       	push   0xc002c210
c001919e:	55                   	push   ebp
c001919f:	e8 f4 76 fe ff       	call   c0000898 <strcmp>
c00191a4:	83 c4 10             	add    esp,0x10
c00191a7:	85 c0                	test   eax,eax
c00191a9:	74 e0                	je     c001918b <CPU::detectFeatures()+0x379>
c00191ab:	56                   	push   esi
c00191ac:	56                   	push   esi
c00191ad:	68 1d c2 02 c0       	push   0xc002c21d
c00191b2:	55                   	push   ebp
c00191b3:	e8 e0 76 fe ff       	call   c0000898 <strcmp>
c00191b8:	83 c4 10             	add    esp,0x10
c00191bb:	85 c0                	test   eax,eax
c00191bd:	74 cc                	je     c001918b <CPU::detectFeatures()+0x379>
c00191bf:	51                   	push   ecx
c00191c0:	51                   	push   ecx
c00191c1:	68 2a c2 02 c0       	push   0xc002c22a
c00191c6:	55                   	push   ebp
c00191c7:	e8 cc 76 fe ff       	call   c0000898 <strcmp>
c00191cc:	83 c4 10             	add    esp,0x10
c00191cf:	85 c0                	test   eax,eax
c00191d1:	74 b8                	je     c001918b <CPU::detectFeatures()+0x379>
c00191d3:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00191dd:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00191e2:	0f 86 be 00 00 00    	jbe    c00192a6 <CPU::detectFeatures()+0x494>
c00191e8:	83 ec 0c             	sub    esp,0xc
c00191eb:	68 80 00 00 00       	push   0x80
c00191f0:	e8 b7 f8 ff ff       	call   c0018aac <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00191f5:	83 e0 01             	and    eax,0x1
c00191f8:	c1 e0 06             	shl    eax,0x6
c00191fb:	88 c2                	mov    dl,al
c00191fd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019203:	83 e0 bf             	and    eax,0xffffffbf
c0019206:	09 d0                	or     eax,edx
c0019208:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001920e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019215:	e8 92 f8 ff ff       	call   c0018aac <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001921a:	83 e0 01             	and    eax,0x1
c001921d:	c1 e0 04             	shl    eax,0x4
c0019220:	88 c2                	mov    dl,al
c0019222:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019228:	83 e0 ef             	and    eax,0xffffffef
c001922b:	09 d0                	or     eax,edx
c001922d:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019233:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001923a:	e8 6d f8 ff ff       	call   c0018aac <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001923f:	c1 e0 07             	shl    eax,0x7
c0019242:	88 c2                	mov    dl,al
c0019244:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001924a:	83 e0 7f             	and    eax,0x7f
c001924d:	09 d0                	or     eax,edx
c001924f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019255:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001925c:	e8 79 f8 ff ff       	call   c0018ada <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019261:	83 e0 01             	and    eax,0x1
c0019264:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001926b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019271:	83 e0 f7             	and    eax,0xfffffff7
c0019274:	09 d0                	or     eax,edx
c0019276:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001927c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019283:	e8 52 f8 ff ff       	call   c0018ada <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019288:	83 c4 10             	add    esp,0x10
c001928b:	83 e0 01             	and    eax,0x1
c001928e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019295:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001929b:	83 e0 fb             	and    eax,0xfffffffb
c001929e:	09 d0                	or     eax,edx
c00192a0:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00192a6:	83 ec 0c             	sub    esp,0xc
c00192a9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192ad:	50                   	push   eax
c00192ae:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192b2:	50                   	push   eax
c00192b3:	8d 74 24 28          	lea    esi,[esp+0x28]
c00192b7:	56                   	push   esi
c00192b8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192bc:	50                   	push   eax
c00192bd:	6a 01                	push   0x1
c00192bf:	e8 08 f7 ff ff       	call   c00189cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192c4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00192c8:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00192ce:	88 ca                	mov    dl,cl
c00192d0:	83 e0 f0             	and    eax,0xfffffff0
c00192d3:	83 e2 0f             	and    edx,0xf
c00192d6:	09 d0                	or     eax,edx
c00192d8:	88 ca                	mov    dl,cl
c00192da:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00192e0:	c0 ea 04             	shr    dl,0x4
c00192e3:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00192e7:	0f b6 c2             	movzx  eax,dl
c00192ea:	83 c4 20             	add    esp,0x20
c00192ed:	c1 e0 06             	shl    eax,0x6
c00192f0:	89 c7                	mov    edi,eax
c00192f2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00192f8:	66 25 3f c0          	and    ax,0xc03f
c00192fc:	09 f8                	or     eax,edi
c00192fe:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019305:	89 c8                	mov    eax,ecx
c0019307:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c001930e:	c1 e8 08             	shr    eax,0x8
c0019311:	83 e5 3f             	and    ebp,0x3f
c0019314:	83 e0 0f             	and    eax,0xf
c0019317:	89 c7                	mov    edi,eax
c0019319:	c1 e7 06             	shl    edi,0x6
c001931c:	09 ef                	or     edi,ebp
c001931e:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0019325:	89 fa                	mov    edx,edi
c0019327:	83 e5 c0             	and    ebp,0xffffffc0
c001932a:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019330:	88 c2                	mov    dl,al
c0019332:	c0 ea 02             	shr    dl,0x2
c0019335:	89 d7                	mov    edi,edx
c0019337:	09 ef                	or     edi,ebp
c0019339:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001933f:	89 fa                	mov    edx,edi
c0019341:	83 e5 cf             	and    ebp,0xffffffcf
c0019344:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001934a:	89 cf                	mov    edi,ecx
c001934c:	c1 ef 0c             	shr    edi,0xc
c001934f:	83 e7 03             	and    edi,0x3
c0019352:	c1 e7 04             	shl    edi,0x4
c0019355:	09 ef                	or     edi,ebp
c0019357:	3c 06                	cmp    al,0x6
c0019359:	89 fa                	mov    edx,edi
c001935b:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019361:	74 04                	je     c0019367 <CPU::detectFeatures()+0x555>
c0019363:	3c 0f                	cmp    al,0xf
c0019365:	75 5c                	jne    c00193c3 <CPU::detectFeatures()+0x5b1>
c0019367:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001936b:	89 cf                	mov    edi,ecx
c001936d:	c1 ef 10             	shr    edi,0x10
c0019370:	c1 e7 04             	shl    edi,0x4
c0019373:	09 fa                	or     edx,edi
c0019375:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c001937b:	0f b6 d2             	movzx  edx,dl
c001937e:	66 81 e7 3f c0       	and    di,0xc03f
c0019383:	c1 e2 06             	shl    edx,0x6
c0019386:	09 fa                	or     edx,edi
c0019388:	3c 0f                	cmp    al,0xf
c001938a:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019391:	75 30                	jne    c00193c3 <CPU::detectFeatures()+0x5b1>
c0019393:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019399:	c1 e9 14             	shr    ecx,0x14
c001939c:	83 e0 3f             	and    eax,0x3f
c001939f:	83 c1 0f             	add    ecx,0xf
c00193a2:	88 ca                	mov    dl,cl
c00193a4:	c0 e9 02             	shr    cl,0x2
c00193a7:	c1 e2 06             	shl    edx,0x6
c00193aa:	09 d0                	or     eax,edx
c00193ac:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00193b2:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00193b8:	83 e0 c0             	and    eax,0xffffffc0
c00193bb:	09 c1                	or     ecx,eax
c00193bd:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00193c3:	83 ec 0c             	sub    esp,0xc
c00193c6:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00193cd:	8d 44 24 28          	lea    eax,[esp+0x28]
c00193d1:	50                   	push   eax
c00193d2:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00193d6:	55                   	push   ebp
c00193d7:	56                   	push   esi
c00193d8:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00193dc:	57                   	push   edi
c00193dd:	68 00 00 00 80       	push   0x80000000
c00193e2:	e8 e5 f5 ff ff       	call   c00189cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00193e7:	83 c4 20             	add    esp,0x20
c00193ea:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00193f2:	76 22                	jbe    c0019416 <CPU::detectFeatures()+0x604>
c00193f4:	83 ec 0c             	sub    esp,0xc
c00193f7:	8d 44 24 28          	lea    eax,[esp+0x28]
c00193fb:	50                   	push   eax
c00193fc:	55                   	push   ebp
c00193fd:	56                   	push   esi
c00193fe:	57                   	push   edi
c00193ff:	68 01 00 00 80       	push   0x80000001
c0019404:	e8 c3 f5 ff ff       	call   c00189cc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019409:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019413:	83 c4 20             	add    esp,0x20
c0019416:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001941c:	83 f8 01             	cmp    eax,0x1
c001941f:	75 6f                	jne    c0019490 <CPU::detectFeatures()+0x67e>
c0019421:	51                   	push   ecx
c0019422:	51                   	push   ecx
c0019423:	68 36 c2 02 c0       	push   0xc002c236
c0019428:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001942c:	56                   	push   esi
c001942d:	e8 da 73 fe ff       	call   c000080c <strcpy>
c0019432:	5f                   	pop    edi
c0019433:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019439:	5d                   	pop    ebp
c001943a:	66 c1 e8 06          	shr    ax,0x6
c001943e:	0f b6 c0             	movzx  eax,al
c0019441:	50                   	push   eax
c0019442:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019448:	c1 e8 0e             	shr    eax,0xe
c001944b:	0f b6 c0             	movzx  eax,al
c001944e:	50                   	push   eax
c001944f:	e8 22 f2 ff ff       	call   c0018676 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019454:	5a                   	pop    edx
c0019455:	59                   	pop    ecx
c0019456:	50                   	push   eax
c0019457:	56                   	push   esi
c0019458:	e8 ef 74 fe ff       	call   c000094c <strcat>
c001945d:	5f                   	pop    edi
c001945e:	5d                   	pop    ebp
c001945f:	56                   	push   esi
c0019460:	53                   	push   ebx
c0019461:	e8 c0 aa ff ff       	call   c0013f26 <Device::setName(char const*)>
c0019466:	58                   	pop    eax
c0019467:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001946d:	5a                   	pop    edx
c001946e:	68 3d c2 02 c0       	push   0xc002c23d
c0019473:	50                   	push   eax
c0019474:	e8 1f 74 fe ff       	call   c0000898 <strcmp>
c0019479:	83 c4 10             	add    esp,0x10
c001947c:	85 c0                	test   eax,eax
c001947e:	0f 85 71 03 00 00    	jne    c00197f5 <CPU::detectFeatures()+0x9e3>
c0019484:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001948b:	e9 65 03 00 00       	jmp    c00197f5 <CPU::detectFeatures()+0x9e3>
c0019490:	83 f8 02             	cmp    eax,0x2
c0019493:	0f 85 b5 00 00 00    	jne    c001954e <CPU::detectFeatures()+0x73c>
c0019499:	57                   	push   edi
c001949a:	57                   	push   edi
c001949b:	68 4f c2 02 c0       	push   0xc002c24f
c00194a0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00194a4:	56                   	push   esi
c00194a5:	e8 62 73 fe ff       	call   c000080c <strcpy>
c00194aa:	5d                   	pop    ebp
c00194ab:	58                   	pop    eax
c00194ac:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194b2:	66 c1 e8 06          	shr    ax,0x6
c00194b6:	0f b6 c0             	movzx  eax,al
c00194b9:	50                   	push   eax
c00194ba:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194c0:	c1 e8 0e             	shr    eax,0xe
c00194c3:	0f b6 c0             	movzx  eax,al
c00194c6:	50                   	push   eax
c00194c7:	e8 16 f0 ff ff       	call   c00184e2 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00194cc:	5a                   	pop    edx
c00194cd:	59                   	pop    ecx
c00194ce:	50                   	push   eax
c00194cf:	56                   	push   esi
c00194d0:	e8 77 74 fe ff       	call   c000094c <strcat>
c00194d5:	5f                   	pop    edi
c00194d6:	5d                   	pop    ebp
c00194d7:	56                   	push   esi
c00194d8:	53                   	push   ebx
c00194d9:	e8 48 aa ff ff       	call   c0013f26 <Device::setName(char const*)>
c00194de:	58                   	pop    eax
c00194df:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00194e5:	5a                   	pop    edx
c00194e6:	68 54 c2 02 c0       	push   0xc002c254
c00194eb:	50                   	push   eax
c00194ec:	e8 a7 73 fe ff       	call   c0000898 <strcmp>
c00194f1:	83 c4 10             	add    esp,0x10
c00194f4:	85 c0                	test   eax,eax
c00194f6:	75 20                	jne    c0019518 <CPU::detectFeatures()+0x706>
c00194f8:	8b 15 28 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f028
c00194fe:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019504:	a8 01                	test   al,0x1
c0019506:	74 10                	je     c0019518 <CPU::detectFeatures()+0x706>
c0019508:	83 e0 fe             	and    eax,0xfffffffe
c001950b:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019511:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019518:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001951e:	c1 e8 0e             	shr    eax,0xe
c0019521:	3c 05                	cmp    al,0x5
c0019523:	0f 85 cc 02 00 00    	jne    c00197f5 <CPU::detectFeatures()+0x9e3>
c0019529:	56                   	push   esi
c001952a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019530:	83 e0 0f             	and    eax,0xf
c0019533:	50                   	push   eax
c0019534:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001953a:	66 c1 e8 06          	shr    ax,0x6
c001953e:	0f b6 c0             	movzx  eax,al
c0019541:	50                   	push   eax
c0019542:	6a 05                	push   0x5
c0019544:	e8 0f f4 ff ff       	call   c0018958 <CPU::AMD_K6_writeback(int, int, int)>
c0019549:	e9 1f 02 00 00       	jmp    c001976d <CPU::detectFeatures()+0x95b>
c001954e:	8d 50 fd             	lea    edx,[eax-0x3]
c0019551:	83 fa 01             	cmp    edx,0x1
c0019554:	76 09                	jbe    c001955f <CPU::detectFeatures()+0x74d>
c0019556:	83 f8 06             	cmp    eax,0x6
c0019559:	0f 85 91 01 00 00    	jne    c00196f0 <CPU::detectFeatures()+0x8de>
c001955f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019565:	c1 ea 0e             	shr    edx,0xe
c0019568:	80 fa 05             	cmp    dl,0x5
c001956b:	75 7b                	jne    c00195e8 <CPU::detectFeatures()+0x7d6>
c001956d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019573:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019578:	66 81 fa 00 01       	cmp    dx,0x100
c001957d:	75 0c                	jne    c001958b <CPU::detectFeatures()+0x779>
c001957f:	51                   	push   ecx
c0019580:	51                   	push   ecx
c0019581:	68 5b c2 02 c0       	push   0xc002c25b
c0019586:	e9 dc 01 00 00       	jmp    c0019767 <CPU::detectFeatures()+0x955>
c001958b:	66 81 fa 00 02       	cmp    dx,0x200
c0019590:	75 0c                	jne    c001959e <CPU::detectFeatures()+0x78c>
c0019592:	52                   	push   edx
c0019593:	52                   	push   edx
c0019594:	68 6e c2 02 c0       	push   0xc002c26e
c0019599:	e9 c9 01 00 00       	jmp    c0019767 <CPU::detectFeatures()+0x955>
c001959e:	66 81 fa 40 02       	cmp    dx,0x240
c00195a3:	75 0c                	jne    c00195b1 <CPU::detectFeatures()+0x79f>
c00195a5:	50                   	push   eax
c00195a6:	50                   	push   eax
c00195a7:	68 80 c2 02 c0       	push   0xc002c280
c00195ac:	e9 b6 01 00 00       	jmp    c0019767 <CPU::detectFeatures()+0x955>
c00195b1:	83 f8 06             	cmp    eax,0x6
c00195b4:	75 0c                	jne    c00195c2 <CPU::detectFeatures()+0x7b0>
c00195b6:	50                   	push   eax
c00195b7:	50                   	push   eax
c00195b8:	68 92 c2 02 c0       	push   0xc002c292
c00195bd:	e9 a5 01 00 00       	jmp    c0019767 <CPU::detectFeatures()+0x955>
c00195c2:	83 f8 04             	cmp    eax,0x4
c00195c5:	75 0c                	jne    c00195d3 <CPU::detectFeatures()+0x7c1>
c00195c7:	50                   	push   eax
c00195c8:	50                   	push   eax
c00195c9:	68 9e c2 02 c0       	push   0xc002c29e
c00195ce:	e9 94 01 00 00       	jmp    c0019767 <CPU::detectFeatures()+0x955>
c00195d3:	83 f8 03             	cmp    eax,0x3
c00195d6:	0f 85 19 02 00 00    	jne    c00197f5 <CPU::detectFeatures()+0x9e3>
c00195dc:	50                   	push   eax
c00195dd:	50                   	push   eax
c00195de:	68 a6 c2 02 c0       	push   0xc002c2a6
c00195e3:	e9 7f 01 00 00       	jmp    c0019767 <CPU::detectFeatures()+0x955>
c00195e8:	80 fa 06             	cmp    dl,0x6
c00195eb:	0f 85 db 00 00 00    	jne    c00196cc <CPU::detectFeatures()+0x8ba>
c00195f1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00195f7:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00195fc:	66 81 fa 80 01       	cmp    dx,0x180
c0019601:	75 0c                	jne    c001960f <CPU::detectFeatures()+0x7fd>
c0019603:	50                   	push   eax
c0019604:	50                   	push   eax
c0019605:	68 b1 c2 02 c0       	push   0xc002c2b1
c001960a:	e9 58 01 00 00       	jmp    c0019767 <CPU::detectFeatures()+0x955>
c001960f:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019615:	66 f7 c1 80 ff       	test   cx,0xff80
c001961a:	75 0c                	jne    c0019628 <CPU::detectFeatures()+0x816>
c001961c:	50                   	push   eax
c001961d:	50                   	push   eax
c001961e:	68 c1 c2 02 c0       	push   0xc002c2c1
c0019623:	e9 3f 01 00 00       	jmp    c0019767 <CPU::detectFeatures()+0x955>
c0019628:	66 81 fa 40 02       	cmp    dx,0x240
c001962d:	75 0c                	jne    c001963b <CPU::detectFeatures()+0x829>
c001962f:	55                   	push   ebp
c0019630:	55                   	push   ebp
c0019631:	68 c8 c2 02 c0       	push   0xc002c2c8
c0019636:	e9 2c 01 00 00       	jmp    c0019767 <CPU::detectFeatures()+0x955>
c001963b:	66 81 fa 80 02       	cmp    dx,0x280
c0019640:	75 0c                	jne    c001964e <CPU::detectFeatures()+0x83c>
c0019642:	57                   	push   edi
c0019643:	57                   	push   edi
c0019644:	68 d1 c2 02 c0       	push   0xc002c2d1
c0019649:	e9 19 01 00 00       	jmp    c0019767 <CPU::detectFeatures()+0x955>
c001964e:	66 81 fa 40 03       	cmp    dx,0x340
c0019653:	74 ed                	je     c0019642 <CPU::detectFeatures()+0x830>
c0019655:	66 81 fa c0 03       	cmp    dx,0x3c0
c001965a:	75 0c                	jne    c0019668 <CPU::detectFeatures()+0x856>
c001965c:	56                   	push   esi
c001965d:	56                   	push   esi
c001965e:	68 d8 c2 02 c0       	push   0xc002c2d8
c0019663:	e9 ff 00 00 00       	jmp    c0019767 <CPU::detectFeatures()+0x955>
c0019668:	83 f8 06             	cmp    eax,0x6
c001966b:	0f 84 45 ff ff ff    	je     c00195b6 <CPU::detectFeatures()+0x7a4>
c0019671:	83 f8 04             	cmp    eax,0x4
c0019674:	0f 84 4d ff ff ff    	je     c00195c7 <CPU::detectFeatures()+0x7b5>
c001967a:	83 f8 03             	cmp    eax,0x3
c001967d:	0f 85 72 01 00 00    	jne    c00197f5 <CPU::detectFeatures()+0x9e3>
c0019683:	51                   	push   ecx
c0019684:	51                   	push   ecx
c0019685:	68 e1 c2 02 c0       	push   0xc002c2e1
c001968a:	53                   	push   ebx
c001968b:	e8 96 a8 ff ff       	call   c0013f26 <Device::setName(char const*)>
c0019690:	b1 c1                	mov    cl,0xc1
c0019692:	88 c8                	mov    al,cl
c0019694:	e6 22                	out    0x22,al
c0019696:	e4 23                	in     al,0x23
c0019698:	88 c2                	mov    dl,al
c001969a:	88 c8                	mov    al,cl
c001969c:	e6 22                	out    0x22,al
c001969e:	88 d0                	mov    al,dl
c00196a0:	83 c8 10             	or     eax,0x10
c00196a3:	e6 23                	out    0x23,al
c00196a5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00196ac:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00196af:	89 d0                	mov    eax,edx
c00196b1:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00196b7:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00196bb:	40                   	inc    eax
c00196bc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00196c2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00196c7:	e9 a1 00 00 00       	jmp    c001976d <CPU::detectFeatures()+0x95b>
c00196cc:	83 f8 06             	cmp    eax,0x6
c00196cf:	0f 84 e1 fe ff ff    	je     c00195b6 <CPU::detectFeatures()+0x7a4>
c00196d5:	83 f8 04             	cmp    eax,0x4
c00196d8:	0f 84 e9 fe ff ff    	je     c00195c7 <CPU::detectFeatures()+0x7b5>
c00196de:	83 f8 03             	cmp    eax,0x3
c00196e1:	0f 85 0e 01 00 00    	jne    c00197f5 <CPU::detectFeatures()+0x9e3>
c00196e7:	52                   	push   edx
c00196e8:	52                   	push   edx
c00196e9:	68 ec c2 02 c0       	push   0xc002c2ec
c00196ee:	eb 77                	jmp    c0019767 <CPU::detectFeatures()+0x955>
c00196f0:	83 f8 07             	cmp    eax,0x7
c00196f3:	75 09                	jne    c00196fe <CPU::detectFeatures()+0x8ec>
c00196f5:	50                   	push   eax
c00196f6:	50                   	push   eax
c00196f7:	68 f6 c2 02 c0       	push   0xc002c2f6
c00196fc:	eb 69                	jmp    c0019767 <CPU::detectFeatures()+0x955>
c00196fe:	83 f8 0a             	cmp    eax,0xa
c0019701:	75 09                	jne    c001970c <CPU::detectFeatures()+0x8fa>
c0019703:	50                   	push   eax
c0019704:	50                   	push   eax
c0019705:	68 01 c3 02 c0       	push   0xc002c301
c001970a:	eb 5b                	jmp    c0019767 <CPU::detectFeatures()+0x955>
c001970c:	83 f8 0b             	cmp    eax,0xb
c001970f:	75 09                	jne    c001971a <CPU::detectFeatures()+0x908>
c0019711:	50                   	push   eax
c0019712:	50                   	push   eax
c0019713:	68 09 c3 02 c0       	push   0xc002c309
c0019718:	eb 4d                	jmp    c0019767 <CPU::detectFeatures()+0x955>
c001971a:	83 f8 08             	cmp    eax,0x8
c001971d:	75 09                	jne    c0019728 <CPU::detectFeatures()+0x916>
c001971f:	50                   	push   eax
c0019720:	50                   	push   eax
c0019721:	68 12 c3 02 c0       	push   0xc002c312
c0019726:	eb 3f                	jmp    c0019767 <CPU::detectFeatures()+0x955>
c0019728:	83 f8 09             	cmp    eax,0x9
c001972b:	75 09                	jne    c0019736 <CPU::detectFeatures()+0x924>
c001972d:	50                   	push   eax
c001972e:	50                   	push   eax
c001972f:	68 1a c3 02 c0       	push   0xc002c31a
c0019734:	eb 31                	jmp    c0019767 <CPU::detectFeatures()+0x955>
c0019736:	83 f8 05             	cmp    eax,0x5
c0019739:	75 09                	jne    c0019744 <CPU::detectFeatures()+0x932>
c001973b:	50                   	push   eax
c001973c:	50                   	push   eax
c001973d:	68 22 c3 02 c0       	push   0xc002c322
c0019742:	eb 23                	jmp    c0019767 <CPU::detectFeatures()+0x955>
c0019744:	83 f8 0c             	cmp    eax,0xc
c0019747:	75 09                	jne    c0019752 <CPU::detectFeatures()+0x940>
c0019749:	55                   	push   ebp
c001974a:	55                   	push   ebp
c001974b:	68 30 c3 02 c0       	push   0xc002c330
c0019750:	eb 15                	jmp    c0019767 <CPU::detectFeatures()+0x955>
c0019752:	83 f8 0d             	cmp    eax,0xd
c0019755:	75 09                	jne    c0019760 <CPU::detectFeatures()+0x94e>
c0019757:	57                   	push   edi
c0019758:	57                   	push   edi
c0019759:	68 3b c3 02 c0       	push   0xc002c33b
c001975e:	eb 07                	jmp    c0019767 <CPU::detectFeatures()+0x955>
c0019760:	56                   	push   esi
c0019761:	56                   	push   esi
c0019762:	68 4f c3 02 c0       	push   0xc002c34f
c0019767:	53                   	push   ebx
c0019768:	e8 b9 a7 ff ff       	call   c0013f26 <Device::setName(char const*)>
c001976d:	83 c4 10             	add    esp,0x10
c0019770:	e9 80 00 00 00       	jmp    c00197f5 <CPU::detectFeatures()+0x9e3>
c0019775:	51                   	push   ecx
c0019776:	51                   	push   ecx
c0019777:	68 9b c1 02 c0       	push   0xc002c19b
c001977c:	55                   	push   ebp
c001977d:	e8 8a 70 fe ff       	call   c000080c <strcpy>
c0019782:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001978c:	e8 1d 6b fe ff       	call   c00002ae <is486>
c0019791:	83 c4 10             	add    esp,0x10
c0019794:	85 c0                	test   eax,eax
c0019796:	74 2b                	je     c00197c3 <CPU::detectFeatures()+0x9b1>
c0019798:	52                   	push   edx
c0019799:	52                   	push   edx
c001979a:	68 5b c3 02 c0       	push   0xc002c35b
c001979f:	53                   	push   ebx
c00197a0:	e8 81 a7 ff ff       	call   c0013f26 <Device::setName(char const*)>
c00197a5:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00197ac:	0f 20 c0             	mov    eax,cr0
c00197af:	83 e0 14             	and    eax,0x14
c00197b2:	83 c4 10             	add    esp,0x10
c00197b5:	83 f8 04             	cmp    eax,0x4
c00197b8:	75 1f                	jne    c00197d9 <CPU::detectFeatures()+0x9c7>
c00197ba:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00197c1:	eb 32                	jmp    c00197f5 <CPU::detectFeatures()+0x9e3>
c00197c3:	50                   	push   eax
c00197c4:	50                   	push   eax
c00197c5:	68 66 c3 02 c0       	push   0xc002c366
c00197ca:	53                   	push   ebx
c00197cb:	e8 56 a7 ff ff       	call   c0013f26 <Device::setName(char const*)>
c00197d0:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00197d7:	eb d3                	jmp    c00197ac <CPU::detectFeatures()+0x99a>
c00197d9:	e8 ab 6a fe ff       	call   c0000289 <hasLegacyFPU>
c00197de:	83 e0 01             	and    eax,0x1
c00197e1:	8d 14 00             	lea    edx,[eax+eax*1]
c00197e4:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00197ea:	83 e0 fd             	and    eax,0xfffffffd
c00197ed:	09 d0                	or     eax,edx
c00197ef:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00197f5:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00197fc:	83 c4 4c             	add    esp,0x4c
c00197ff:	5b                   	pop    ebx
c0019800:	5e                   	pop    esi
c0019801:	5f                   	pop    edi
c0019802:	5d                   	pop    ebp
c0019803:	c3                   	ret    

c0019804 <CPU::setupSMEP()>:
c0019804:	0f 20 e0             	mov    eax,cr4
c0019807:	0d 00 00 10 00       	or     eax,0x100000
c001980c:	0f 22 e0             	mov    cr4,eax
c001980f:	c3                   	ret    

c0019810 <CPU::setupUMIP()>:
c0019810:	0f 20 e0             	mov    eax,cr4
c0019813:	80 cc 08             	or     ah,0x8
c0019816:	0f 22 e0             	mov    cr4,eax
c0019819:	c3                   	ret    

c001981a <CPU::setupTSC()>:
c001981a:	0f 20 e0             	mov    eax,cr4
c001981d:	83 c8 04             	or     eax,0x4
c0019820:	0f 22 e0             	mov    cr4,eax
c0019823:	c3                   	ret    

c0019824 <CPU::setupLargePages()>:
c0019824:	0f 20 e0             	mov    eax,cr4
c0019827:	83 c8 10             	or     eax,0x10
c001982a:	0f 22 e0             	mov    cr4,eax
c001982d:	c3                   	ret    

c001982e <CPU::setupPAT()>:
c001982e:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0019833:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001983a:	74 2c                	je     c0019868 <CPU::setupPAT()+0x3a>
c001983c:	53                   	push   ebx
c001983d:	83 ec 10             	sub    esp,0x10
c0019840:	68 77 02 00 00       	push   0x277
c0019845:	50                   	push   eax
c0019846:	e8 e7 55 ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c001984b:	83 e2 f8             	and    edx,0xfffffff8
c001984e:	83 ca 01             	or     edx,0x1
c0019851:	52                   	push   edx
c0019852:	50                   	push   eax
c0019853:	68 77 02 00 00       	push   0x277
c0019858:	ff 35 28 f0 02 c0    	push   DWORD PTR ds:0xc002f028
c001985e:	e8 fb 55 ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c0019863:	83 c4 28             	add    esp,0x28
c0019866:	5b                   	pop    ebx
c0019867:	c3                   	ret    
c0019868:	c3                   	ret    
c0019869:	90                   	nop

c001986a <CPU::setupMTRR()>:
c001986a:	c3                   	ret    
c001986b:	90                   	nop

c001986c <CPU::setupGlobalPages()>:
c001986c:	0f 20 e0             	mov    eax,cr4
c001986f:	0c 80                	or     al,0x80
c0019871:	0f 22 e0             	mov    cr4,eax
c0019874:	c3                   	ret    
c0019875:	90                   	nop

c0019876 <CPU::allowUsermodeDataAccess()>:
c0019876:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001987a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019881:	74 03                	je     c0019886 <CPU::allowUsermodeDataAccess()+0x10>
c0019883:	0f 01 cb             	stac   
c0019886:	c3                   	ret    
c0019887:	90                   	nop

c0019888 <CPU::prohibitUsermodeDataAccess()>:
c0019888:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001988c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019893:	74 03                	je     c0019898 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019895:	0f 01 ca             	clac   
c0019898:	c3                   	ret    
c0019899:	90                   	nop

c001989a <CPU::setupSMAP()>:
c001989a:	0f 20 e0             	mov    eax,cr4
c001989d:	0d 00 00 20 00       	or     eax,0x200000
c00198a2:	0f 22 e0             	mov    cr4,eax
c00198a5:	eb e1                	jmp    c0019888 <CPU::prohibitUsermodeDataAccess()>
c00198a7:	90                   	nop

c00198a8 <CPU::setupFeatures()>:
c00198a8:	83 ec 0c             	sub    esp,0xc
c00198ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00198af:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00198b6:	74 07                	je     c00198bf <CPU::setupFeatures()+0x17>
c00198b8:	52                   	push   edx
c00198b9:	e8 46 ff ff ff       	call   c0019804 <CPU::setupSMEP()>
c00198be:	58                   	pop    eax
c00198bf:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00198c6:	74 07                	je     c00198cf <CPU::setupFeatures()+0x27>
c00198c8:	52                   	push   edx
c00198c9:	e8 cc ff ff ff       	call   c001989a <CPU::setupSMAP()>
c00198ce:	58                   	pop    eax
c00198cf:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00198d6:	74 07                	je     c00198df <CPU::setupFeatures()+0x37>
c00198d8:	52                   	push   edx
c00198d9:	e8 32 ff ff ff       	call   c0019810 <CPU::setupUMIP()>
c00198de:	58                   	pop    eax
c00198df:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00198e6:	74 07                	je     c00198ef <CPU::setupFeatures()+0x47>
c00198e8:	52                   	push   edx
c00198e9:	e8 2c ff ff ff       	call   c001981a <CPU::setupTSC()>
c00198ee:	58                   	pop    eax
c00198ef:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00198f6:	74 07                	je     c00198ff <CPU::setupFeatures()+0x57>
c00198f8:	52                   	push   edx
c00198f9:	e8 26 ff ff ff       	call   c0019824 <CPU::setupLargePages()>
c00198fe:	59                   	pop    ecx
c00198ff:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019906:	74 07                	je     c001990f <CPU::setupFeatures()+0x67>
c0019908:	52                   	push   edx
c0019909:	e8 5e ff ff ff       	call   c001986c <CPU::setupGlobalPages()>
c001990e:	58                   	pop    eax
c001990f:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019916:	74 0c                	je     c0019924 <CPU::setupFeatures()+0x7c>
c0019918:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001991c:	83 c4 0c             	add    esp,0xc
c001991f:	e9 0a ff ff ff       	jmp    c001982e <CPU::setupPAT()>
c0019924:	83 c4 0c             	add    esp,0xc
c0019927:	c3                   	ret    

c0019928 <CPU::open(int, int, void*)>:
c0019928:	57                   	push   edi
c0019929:	56                   	push   esi
c001992a:	53                   	push   ebx
c001992b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001992f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019933:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019939:	83 ec 0c             	sub    esp,0xc
c001993c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019942:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019948:	50                   	push   eax
c0019949:	e8 d0 57 ff ff       	call   c000f11e <GDT::setup()>
c001994e:	83 c4 0c             	add    esp,0xc
c0019951:	6a 00                	push   0x0
c0019953:	68 ef be ad de       	push   0xdeadbeef
c0019958:	57                   	push   edi
c0019959:	e8 04 75 ff ff       	call   c0010e62 <TSS::setup(unsigned long, unsigned long)>
c001995e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019961:	e8 dc 74 ff ff       	call   c0010e42 <TSS::flush()>
c0019966:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001996c:	89 04 24             	mov    DWORD PTR [esp],eax
c001996f:	e8 0e 5a ff ff       	call   c000f382 <IDT::setup()>
c0019974:	b8 00 04 00 00       	mov    eax,0x400
c0019979:	0f 23 f8             	mov    db7,eax
c001997c:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019986:	e8 2d 62 ff ff       	call   c000fbb8 <Phys::allocatePage()>
c001998b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019991:	89 30                	mov    DWORD PTR [eax],esi
c0019993:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019999:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001999c:	58                   	pop    eax
c001999d:	5a                   	pop    edx
c001999e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00199a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00199a8:	e8 55 86 ff ff       	call   c0012002 <VAS::setCPUSpecific(unsigned long)>
c00199ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199b0:	e8 5d f4 ff ff       	call   c0018e12 <CPU::detectFeatures()>
c00199b5:	e8 9e b9 ff ff       	call   c0015358 <setupInterruptController()>
c00199ba:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00199c0:	a1 40 f0 02 c0       	mov    eax,ds:0xc002f040
c00199c5:	83 e0 10             	and    eax,0x10
c00199c8:	83 f8 01             	cmp    eax,0x1
c00199cb:	19 c0                	sbb    eax,eax
c00199cd:	83 e0 46             	and    eax,0x46
c00199d0:	83 c0 1e             	add    eax,0x1e
c00199d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00199d6:	e8 d4 cf ff ff       	call   c00169af <setupTimer(int)>
c00199db:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00199e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199e4:	e8 bf fe ff ff       	call   c00198a8 <CPU::setupFeatures()>
c00199e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199ec:	e8 a5 f1 ff ff       	call   c0018b96 <CPU::displayFeatures()>
c00199f1:	83 c4 10             	add    esp,0x10
c00199f4:	31 c0                	xor    eax,eax
c00199f6:	5b                   	pop    ebx
c00199f7:	5e                   	pop    esi
c00199f8:	5f                   	pop    edi
c00199f9:	c3                   	ret    

c00199fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00199fa:	57                   	push   edi
c00199fb:	56                   	push   esi
c00199fc:	53                   	push   ebx
c00199fd:	51                   	push   ecx
c00199fe:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019a02:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019a05:	0f 02 c0             	lar    eax,ax
c0019a08:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019a0b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019a0f:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019a12:	88 ca                	mov    dl,cl
c0019a14:	c0 ea 06             	shr    dl,0x6
c0019a17:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019a1b:	89 ca                	mov    edx,ecx
c0019a1d:	66 c1 ea 03          	shr    dx,0x3
c0019a21:	83 e2 07             	and    edx,0x7
c0019a24:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019a29:	88 17                	mov    BYTE PTR [edi],dl
c0019a2b:	0f 84 a6 01 00 00    	je     c0019bd7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019a31:	83 e1 07             	and    ecx,0x7
c0019a34:	80 f9 04             	cmp    cl,0x4
c0019a37:	0f 84 98 00 00 00    	je     c0019ad5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019a3d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019a42:	0f 95 c0             	setne  al
c0019a45:	80 f9 05             	cmp    cl,0x5
c0019a48:	0f 95 c2             	setne  dl
c0019a4b:	08 c2                	or     dl,al
c0019a4d:	74 79                	je     c0019ac8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019a4f:	84 c9                	test   cl,cl
c0019a51:	75 05                	jne    c0019a58 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019a53:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019a56:	eb 3c                	jmp    c0019a94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a58:	80 f9 01             	cmp    cl,0x1
c0019a5b:	75 05                	jne    c0019a62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019a5d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019a60:	eb 32                	jmp    c0019a94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a62:	80 f9 02             	cmp    cl,0x2
c0019a65:	75 05                	jne    c0019a6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019a67:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019a6a:	eb 28                	jmp    c0019a94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a6c:	31 c0                	xor    eax,eax
c0019a6e:	80 f9 03             	cmp    cl,0x3
c0019a71:	75 05                	jne    c0019a78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019a73:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019a76:	eb 1c                	jmp    c0019a94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a78:	80 f9 05             	cmp    cl,0x5
c0019a7b:	75 05                	jne    c0019a82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019a7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019a80:	eb 12                	jmp    c0019a94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a82:	80 f9 06             	cmp    cl,0x6
c0019a85:	75 05                	jne    c0019a8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019a87:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019a8a:	eb 08                	jmp    c0019a94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a8c:	80 f9 07             	cmp    cl,0x7
c0019a8f:	75 03                	jne    c0019a94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a91:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019a94:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019a99:	75 10                	jne    c0019aab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019a9b:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019a9f:	b9 03 00 00 00       	mov    ecx,0x3
c0019aa4:	01 d0                	add    eax,edx
c0019aa6:	e9 37 01 00 00       	jmp    c0019be2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019aab:	b9 02 00 00 00       	mov    ecx,0x2
c0019ab0:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019ab5:	0f 85 27 01 00 00    	jne    c0019be2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019abb:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019abe:	b9 06 00 00 00       	mov    ecx,0x6
c0019ac3:	e9 1a 01 00 00       	jmp    c0019be2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019ac8:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019acb:	b9 06 00 00 00       	mov    ecx,0x6
c0019ad0:	e9 0f 01 00 00       	jmp    c0019be4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ad5:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019ad8:	88 ca                	mov    dl,cl
c0019ada:	c0 ea 06             	shr    dl,0x6
c0019add:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019ae1:	89 ca                	mov    edx,ecx
c0019ae3:	66 c1 ea 03          	shr    dx,0x3
c0019ae7:	83 e2 07             	and    edx,0x7
c0019aea:	80 e1 07             	and    cl,0x7
c0019aed:	75 05                	jne    c0019af4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019aef:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019af2:	eb 4c                	jmp    c0019b40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019af4:	80 f9 01             	cmp    cl,0x1
c0019af7:	75 05                	jne    c0019afe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019af9:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019afc:	eb 42                	jmp    c0019b40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019afe:	80 f9 02             	cmp    cl,0x2
c0019b01:	75 05                	jne    c0019b08 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019b03:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019b06:	eb 38                	jmp    c0019b40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b08:	80 f9 03             	cmp    cl,0x3
c0019b0b:	75 05                	jne    c0019b12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019b0d:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019b10:	eb 2e                	jmp    c0019b40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b12:	80 f9 04             	cmp    cl,0x4
c0019b15:	75 12                	jne    c0019b29 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019b17:	f6 c4 60             	test   ah,0x60
c0019b1a:	75 08                	jne    c0019b24 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019b1c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019b1f:	8d 78 14             	lea    edi,[eax+0x14]
c0019b22:	eb 1c                	jmp    c0019b40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b24:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019b27:	eb 17                	jmp    c0019b40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b29:	80 f9 05             	cmp    cl,0x5
c0019b2c:	75 05                	jne    c0019b33 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019b2e:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019b31:	eb 0d                	jmp    c0019b40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b33:	80 f9 06             	cmp    cl,0x6
c0019b36:	75 05                	jne    c0019b3d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019b38:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019b3b:	eb 03                	jmp    c0019b40 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b3d:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019b40:	84 d2                	test   dl,dl
c0019b42:	75 05                	jne    c0019b49 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019b44:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019b47:	eb 3c                	jmp    c0019b85 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b49:	80 fa 01             	cmp    dl,0x1
c0019b4c:	75 05                	jne    c0019b53 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019b4e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019b51:	eb 32                	jmp    c0019b85 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b53:	80 fa 02             	cmp    dl,0x2
c0019b56:	75 05                	jne    c0019b5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019b58:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019b5b:	eb 28                	jmp    c0019b85 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b5d:	80 fa 03             	cmp    dl,0x3
c0019b60:	75 05                	jne    c0019b67 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019b62:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019b65:	eb 1e                	jmp    c0019b85 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b67:	31 c0                	xor    eax,eax
c0019b69:	80 fa 04             	cmp    dl,0x4
c0019b6c:	74 17                	je     c0019b85 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b6e:	80 fa 05             	cmp    dl,0x5
c0019b71:	75 05                	jne    c0019b78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019b73:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019b76:	eb 0d                	jmp    c0019b85 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b78:	80 fa 06             	cmp    dl,0x6
c0019b7b:	75 05                	jne    c0019b82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019b7d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019b80:	eb 03                	jmp    c0019b85 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b82:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019b85:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019b8a:	0f 94 c2             	sete   dl
c0019b8d:	80 f9 05             	cmp    cl,0x5
c0019b90:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019b94:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019b99:	d3 e0                	shl    eax,cl
c0019b9b:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019b9f:	74 0a                	je     c0019bab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019ba1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ba4:	b9 07 00 00 00       	mov    ecx,0x7
c0019ba9:	eb 37                	jmp    c0019be2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019bab:	01 f8                	add    eax,edi
c0019bad:	b9 03 00 00 00       	mov    ecx,0x3
c0019bb2:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019bb7:	74 2b                	je     c0019be4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019bb9:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019bbe:	75 0d                	jne    c0019bcd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019bc0:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019bc4:	01 c8                	add    eax,ecx
c0019bc6:	b9 04 00 00 00       	mov    ecx,0x4
c0019bcb:	eb 17                	jmp    c0019be4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019bcd:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019bd0:	b9 07 00 00 00       	mov    ecx,0x7
c0019bd5:	eb 0d                	jmp    c0019be4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019bd7:	b9 02 00 00 00       	mov    ecx,0x2
c0019bdc:	b2 01                	mov    dl,0x1
c0019bde:	31 c0                	xor    eax,eax
c0019be0:	eb 02                	jmp    c0019be4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019be2:	31 d2                	xor    edx,edx
c0019be4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019be8:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019bee:	88 11                	mov    BYTE PTR [ecx],dl
c0019bf0:	5a                   	pop    edx
c0019bf1:	5b                   	pop    ebx
c0019bf2:	5e                   	pop    esi
c0019bf3:	5f                   	pop    edi
c0019bf4:	c3                   	ret    

c0019bf5 <Krnl::smpEntry()>:
c0019bf5:	eb fe                	jmp    c0019bf5 <Krnl::smpEntry()>

c0019bf7 <Krnl::startCPU(int)>:
c0019bf7:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0019bfc:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019c03:	0f 84 36 01 00 00    	je     c0019d3f <Krnl::startCPU(int)+0x148>
c0019c09:	53                   	push   ebx
c0019c0a:	83 ec 10             	sub    esp,0x10
c0019c0d:	fa                   	cli    
c0019c0e:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c0019c14:	6a 1b                	push   0x1b
c0019c16:	ff 35 28 f0 02 c0    	push   DWORD PTR ds:0xc002f028
c0019c1c:	e8 11 52 ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c0019c21:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019c26:	89 c3                	mov    ebx,eax
c0019c28:	58                   	pop    eax
c0019c29:	5a                   	pop    edx
c0019c2a:	53                   	push   ebx
c0019c2b:	68 a0 c3 02 c0       	push   0xc002c3a0
c0019c30:	e8 c2 8c ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0019c35:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019c3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c43:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019c4d:	c1 e0 18             	shl    eax,0x18
c0019c50:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019c56:	83 c4 10             	add    esp,0x10
c0019c59:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019c5f:	09 c2                	or     edx,eax
c0019c61:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019c67:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019c6d:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019c73:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019c79:	80 cd c5             	or     ch,0xc5
c0019c7c:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019c82:	f3 90                	pause  
c0019c84:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019c86:	0f ba e1 0c          	bt     ecx,0xc
c0019c8a:	72 f6                	jb     c0019c82 <Krnl::startCPU(int)+0x8b>
c0019c8c:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019c92:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019c98:	09 c1                	or     ecx,eax
c0019c9a:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019ca0:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019ca6:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019cac:	80 cd 85             	or     ch,0x85
c0019caf:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019cb5:	f3 90                	pause  
c0019cb7:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019cb9:	0f ba e1 0c          	bt     ecx,0xc
c0019cbd:	72 f6                	jb     c0019cb5 <Krnl::startCPU(int)+0xbe>
c0019cbf:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019cc9:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019ccf:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019cd5:	09 c1                	or     ecx,eax
c0019cd7:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019cdd:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019ce3:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019ce9:	81 c9 02 06 00 00    	or     ecx,0x602
c0019cef:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019cf5:	f3 90                	pause  
c0019cf7:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019cf9:	0f ba e1 0c          	bt     ecx,0xc
c0019cfd:	72 f6                	jb     c0019cf5 <Krnl::startCPU(int)+0xfe>
c0019cff:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d09:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019d0f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019d15:	09 c8                	or     eax,ecx
c0019d17:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019d1d:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019d23:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019d28:	0d 02 06 00 00       	or     eax,0x602
c0019d2d:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019d33:	f3 90                	pause  
c0019d35:	8b 02                	mov    eax,DWORD PTR [edx]
c0019d37:	0f ba e0 0c          	bt     eax,0xc
c0019d3b:	72 f6                	jb     c0019d33 <Krnl::startCPU(int)+0x13c>
c0019d3d:	eb fe                	jmp    c0019d3d <Krnl::startCPU(int)+0x146>
c0019d3f:	c3                   	ret    

c0019d40 <Krnl::startCPUs()>:
c0019d40:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0019d45:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019d4b:	88 c2                	mov    dl,al
c0019d4d:	83 e2 0a             	and    edx,0xa
c0019d50:	80 fa 0a             	cmp    dl,0xa
c0019d53:	75 09                	jne    c0019d5e <Krnl::startCPUs()+0x1e>
c0019d55:	a8 01                	test   al,0x1
c0019d57:	74 05                	je     c0019d5e <Krnl::startCPUs()+0x1e>
c0019d59:	e9 3d 64 fe ff       	jmp    c000019b <prepareTramp>
c0019d5e:	c3                   	ret    
c0019d5f:	90                   	nop

c0019d60 <EnvVarContainer::getEnv(char const*)>:
c0019d60:	57                   	push   edi
c0019d61:	56                   	push   esi
c0019d62:	53                   	push   ebx
c0019d63:	31 db                	xor    ebx,ebx
c0019d65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019d69:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019d6b:	7e 2b                	jle    c0019d98 <EnvVarContainer::getEnv(char const*)+0x38>
c0019d6d:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019d74:	50                   	push   eax
c0019d75:	50                   	push   eax
c0019d76:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019d79:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019d7c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019d80:	e8 13 6b fe ff       	call   c0000898 <strcmp>
c0019d85:	83 c4 10             	add    esp,0x10
c0019d88:	85 c0                	test   eax,eax
c0019d8a:	75 09                	jne    c0019d95 <EnvVarContainer::getEnv(char const*)+0x35>
c0019d8c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019d8f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019d93:	eb 05                	jmp    c0019d9a <EnvVarContainer::getEnv(char const*)+0x3a>
c0019d95:	43                   	inc    ebx
c0019d96:	eb d1                	jmp    c0019d69 <EnvVarContainer::getEnv(char const*)+0x9>
c0019d98:	31 c0                	xor    eax,eax
c0019d9a:	5b                   	pop    ebx
c0019d9b:	5e                   	pop    esi
c0019d9c:	5f                   	pop    edi
c0019d9d:	c3                   	ret    

c0019d9e <EnvVarContainer::setEnv(char const*, char const*)>:
c0019d9e:	55                   	push   ebp
c0019d9f:	57                   	push   edi
c0019da0:	56                   	push   esi
c0019da1:	53                   	push   ebx
c0019da2:	83 ec 28             	sub    esp,0x28
c0019da5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019da9:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019dad:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019db1:	56                   	push   esi
c0019db2:	e8 b5 69 fe ff       	call   c000076c <strlen>
c0019db7:	40                   	inc    eax
c0019db8:	89 04 24             	mov    DWORD PTR [esp],eax
c0019dbb:	e8 cc 5a ff ff       	call   c000f88c <malloc>
c0019dc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019dc3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019dc7:	e8 a0 69 fe ff       	call   c000076c <strlen>
c0019dcc:	40                   	inc    eax
c0019dcd:	89 04 24             	mov    DWORD PTR [esp],eax
c0019dd0:	e8 b7 5a ff ff       	call   c000f88c <malloc>
c0019dd5:	89 34 24             	mov    DWORD PTR [esp],esi
c0019dd8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019ddc:	e8 8b 69 fe ff       	call   c000076c <strlen>
c0019de1:	83 c4 0c             	add    esp,0xc
c0019de4:	40                   	inc    eax
c0019de5:	50                   	push   eax
c0019de6:	6a 00                	push   0x0
c0019de8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019dec:	e8 5f 69 fe ff       	call   c0000750 <memset>
c0019df1:	89 34 24             	mov    DWORD PTR [esp],esi
c0019df4:	e8 73 69 fe ff       	call   c000076c <strlen>
c0019df9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019dfd:	8d 48 01             	lea    ecx,[eax+0x1]
c0019e00:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019e02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e05:	89 de                	mov    esi,ebx
c0019e07:	e8 60 69 fe ff       	call   c000076c <strlen>
c0019e0c:	83 c4 0c             	add    esp,0xc
c0019e0f:	40                   	inc    eax
c0019e10:	50                   	push   eax
c0019e11:	6a 00                	push   0x0
c0019e13:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e17:	e8 34 69 fe ff       	call   c0000750 <memset>
c0019e1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e1f:	e8 48 69 fe ff       	call   c000076c <strlen>
c0019e24:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019e28:	8d 48 01             	lea    ecx,[eax+0x1]
c0019e2b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019e2d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019e30:	40                   	inc    eax
c0019e31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019e34:	c1 e0 03             	shl    eax,0x3
c0019e37:	5a                   	pop    edx
c0019e38:	59                   	pop    ecx
c0019e39:	50                   	push   eax
c0019e3a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019e3d:	e8 36 5a ff ff       	call   c000f878 <realloc>
c0019e42:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019e46:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019e49:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019e4c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019e50:	b9 08 00 00 00       	mov    ecx,0x8
c0019e55:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019e57:	83 c4 2c             	add    esp,0x2c
c0019e5a:	5b                   	pop    ebx
c0019e5b:	5e                   	pop    esi
c0019e5c:	5f                   	pop    edi
c0019e5d:	5d                   	pop    ebp
c0019e5e:	c3                   	ret    
c0019e5f:	90                   	nop

c0019e60 <EnvVarContainer::deleteEnv(char const*)>:
c0019e60:	c3                   	ret    
c0019e61:	90                   	nop

c0019e62 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019e62:	55                   	push   ebp
c0019e63:	57                   	push   edi
c0019e64:	56                   	push   esi
c0019e65:	53                   	push   ebx
c0019e66:	81 ec 38 01 00 00    	sub    esp,0x138
c0019e6c:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c0019e73:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019e7a:	68 14 01 00 00       	push   0x114
c0019e7f:	e8 08 5a ff ff       	call   c000f88c <malloc>
c0019e84:	83 c4 0c             	add    esp,0xc
c0019e87:	89 c5                	mov    ebp,eax
c0019e89:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0019e8c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019e93:	50                   	push   eax
c0019e94:	e8 bd 8f ff ff       	call   c0012e56 <File::File(char const*, Process*)>
c0019e99:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019e9c:	e8 87 92 ff ff       	call   c0013128 <File::exists()>
c0019ea1:	83 c4 10             	add    esp,0x10
c0019ea4:	84 c0                	test   al,al
c0019ea6:	75 32                	jne    c0019eda <EnvVarContainer::loadFrom(char const*, char const*)+0x78>
c0019ea8:	51                   	push   ecx
c0019ea9:	51                   	push   ecx
c0019eaa:	6a 12                	push   0x12
c0019eac:	55                   	push   ebp
c0019ead:	e8 08 90 ff ff       	call   c0012eba <File::open(FileOpenMode)>
c0019eb2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019eb5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019eb8:	89 34 24             	mov    DWORD PTR [esp],esi
c0019ebb:	e8 ac 68 fe ff       	call   c000076c <strlen>
c0019ec0:	5a                   	pop    edx
c0019ec1:	31 d2                	xor    edx,edx
c0019ec3:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019ec7:	51                   	push   ecx
c0019ec8:	56                   	push   esi
c0019ec9:	52                   	push   edx
c0019eca:	50                   	push   eax
c0019ecb:	55                   	push   ebp
c0019ecc:	ff d7                	call   edi
c0019ece:	83 c4 14             	add    esp,0x14
c0019ed1:	55                   	push   ebp
c0019ed2:	e8 41 90 ff ff       	call   c0012f18 <File::close()>
c0019ed7:	83 c4 10             	add    esp,0x10
c0019eda:	31 f6                	xor    esi,esi
c0019edc:	50                   	push   eax
c0019edd:	68 00 01 00 00       	push   0x100
c0019ee2:	6a 00                	push   0x0
c0019ee4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019ee8:	50                   	push   eax
c0019ee9:	e8 62 68 fe ff       	call   c0000750 <memset>
c0019eee:	58                   	pop    eax
c0019eef:	5a                   	pop    edx
c0019ef0:	6a 01                	push   0x1
c0019ef2:	55                   	push   ebp
c0019ef3:	e8 c2 8f ff ff       	call   c0012eba <File::open(FileOpenMode)>
c0019ef8:	83 c4 10             	add    esp,0x10
c0019efb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019f03:	83 ec 0c             	sub    esp,0xc
c0019f06:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019f09:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019f0d:	51                   	push   ecx
c0019f0e:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019f12:	52                   	push   edx
c0019f13:	6a 00                	push   0x0
c0019f15:	6a 01                	push   0x1
c0019f17:	55                   	push   ebp
c0019f18:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019f1b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019f1f:	83 c4 20             	add    esp,0x20
c0019f22:	3c 0d                	cmp    al,0xd
c0019f24:	0f 84 16 01 00 00    	je     c001a040 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c0019f2a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019f2f:	0f 84 fc 00 00 00    	je     c001a031 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019f35:	3c 0a                	cmp    al,0xa
c0019f37:	74 13                	je     c0019f4c <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c0019f39:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019f3e:	74 0c                	je     c0019f4c <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c0019f40:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019f46:	0f 8e e5 00 00 00    	jle    c001a031 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019f4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f50:	83 ec 0c             	sub    esp,0xc
c0019f53:	8d 78 01             	lea    edi,[eax+0x1]
c0019f56:	57                   	push   edi
c0019f57:	e8 30 59 ff ff       	call   c000f88c <malloc>
c0019f5c:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019f60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019f64:	8d 56 04             	lea    edx,[esi+0x4]
c0019f67:	89 14 24             	mov    DWORD PTR [esp],edx
c0019f6a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019f6e:	e8 19 59 ff ff       	call   c000f88c <malloc>
c0019f73:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019f77:	83 c4 0c             	add    esp,0xc
c0019f7a:	57                   	push   edi
c0019f7b:	6a 00                	push   0x0
c0019f7d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019f81:	e8 ca 67 fe ff       	call   c0000750 <memset>
c0019f86:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019f8a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019f8e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019f92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f94:	83 c4 0c             	add    esp,0xc
c0019f97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019f9b:	52                   	push   edx
c0019f9c:	6a 00                	push   0x0
c0019f9e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019fa2:	e8 a9 67 fe ff       	call   c0000750 <memset>
c0019fa7:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019fab:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019faf:	89 34 24             	mov    DWORD PTR [esp],esi
c0019fb2:	e8 b5 67 fe ff       	call   c000076c <strlen>
c0019fb7:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019fbb:	89 c1                	mov    ecx,eax
c0019fbd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019fbf:	5e                   	pop    esi
c0019fc0:	5f                   	pop    edi
c0019fc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019fc5:	68 b1 c3 02 c0       	push   0xc002c3b1
c0019fca:	e8 28 89 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0019fcf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fd1:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0019fd4:	40                   	inc    eax
c0019fd5:	83 c4 10             	add    esp,0x10
c0019fd8:	89 03                	mov    DWORD PTR [ebx],eax
c0019fda:	85 d2                	test   edx,edx
c0019fdc:	75 0c                	jne    c0019fea <EnvVarContainer::loadFrom(char const*, char const*)+0x188>
c0019fde:	83 ec 0c             	sub    esp,0xc
c0019fe1:	6a 08                	push   0x8
c0019fe3:	e8 a4 58 ff ff       	call   c000f88c <malloc>
c0019fe8:	eb 0c                	jmp    c0019ff6 <EnvVarContainer::loadFrom(char const*, char const*)+0x194>
c0019fea:	c1 e0 03             	shl    eax,0x3
c0019fed:	51                   	push   ecx
c0019fee:	51                   	push   ecx
c0019fef:	50                   	push   eax
c0019ff0:	52                   	push   edx
c0019ff1:	e8 82 58 ff ff       	call   c000f878 <realloc>
c0019ff6:	83 c4 10             	add    esp,0x10
c0019ff9:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019ffc:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019ffe:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001a001:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a005:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a009:	b9 08 00 00 00       	mov    ecx,0x8
c001a00e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a010:	31 f6                	xor    esi,esi
c001a012:	52                   	push   edx
c001a013:	68 00 01 00 00       	push   0x100
c001a018:	6a 00                	push   0x0
c001a01a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a01e:	50                   	push   eax
c001a01f:	e8 2c 67 fe ff       	call   c0000750 <memset>
c001a024:	83 c4 10             	add    esp,0x10
c001a027:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a02f:	eb 0f                	jmp    c001a040 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a031:	3c 3d                	cmp    al,0x3d
c001a033:	74 07                	je     c001a03c <EnvVarContainer::loadFrom(char const*, char const*)+0x1da>
c001a035:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a039:	46                   	inc    esi
c001a03a:	eb 04                	jmp    c001a040 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a03c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a040:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a045:	0f 85 b8 fe ff ff    	jne    c0019f03 <EnvVarContainer::loadFrom(char const*, char const*)+0xa1>
c001a04b:	50                   	push   eax
c001a04c:	50                   	push   eax
c001a04d:	ff 33                	push   DWORD PTR [ebx]
c001a04f:	68 bf c3 02 c0       	push   0xc002c3bf
c001a054:	e8 9e 88 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001a059:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a05f:	5b                   	pop    ebx
c001a060:	5e                   	pop    esi
c001a061:	5f                   	pop    edi
c001a062:	5d                   	pop    ebp
c001a063:	c3                   	ret    

c001a064 <EnvVarContainer::__loadSystem()>:
c001a064:	83 ec 10             	sub    esp,0x10
c001a067:	68 60 e5 02 c0       	push   0xc002e560
c001a06c:	68 ea c3 02 c0       	push   0xc002c3ea
c001a071:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a075:	e8 e8 fd ff ff       	call   c0019e62 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a07a:	83 c4 1c             	add    esp,0x1c
c001a07d:	c3                   	ret    

c001a07e <EnvVarContainer::__loadUser()>:
c001a07e:	c3                   	ret    
c001a07f:	90                   	nop

c001a080 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a080:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a084:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a08a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a08e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a092:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a095:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a099:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a0a0:	90                   	nop
c001a0a1:	c3                   	ret    

c001a0a2 <EnvVarContainer::~EnvVarContainer()>:
c001a0a2:	83 ec 0c             	sub    esp,0xc
c001a0a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a0ac:	85 c0                	test   eax,eax
c001a0ae:	74 1d                	je     c001a0cd <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a0b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001a0b6:	85 c0                	test   eax,eax
c001a0b8:	74 13                	je     c001a0cd <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a0ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a0c1:	83 ec 0c             	sub    esp,0xc
c001a0c4:	50                   	push   eax
c001a0c5:	e8 d2 57 ff ff       	call   c000f89c <free>
c001a0ca:	83 c4 10             	add    esp,0x10
c001a0cd:	90                   	nop
c001a0ce:	83 c4 0c             	add    esp,0xc
c001a0d1:	c3                   	ret    

c001a0d2 <Krnl::getEnv(Process*, char const*)>:
c001a0d2:	53                   	push   ebx
c001a0d3:	83 ec 08             	sub    esp,0x8
c001a0d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0da:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a0de:	39 05 70 25 03 c0    	cmp    DWORD PTR ds:0xc0032570,eax
c001a0e4:	74 04                	je     c001a0ea <Krnl::getEnv(Process*, char const*)+0x18>
c001a0e6:	85 c0                	test   eax,eax
c001a0e8:	75 0b                	jne    c001a0f5 <Krnl::getEnv(Process*, char const*)+0x23>
c001a0ea:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a0ef:	85 c0                	test   eax,eax
c001a0f1:	75 19                	jne    c001a10c <Krnl::getEnv(Process*, char const*)+0x3a>
c001a0f3:	eb 27                	jmp    c001a11c <Krnl::getEnv(Process*, char const*)+0x4a>
c001a0f5:	52                   	push   edx
c001a0f6:	52                   	push   edx
c001a0f7:	53                   	push   ebx
c001a0f8:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a0fe:	e8 5d fc ff ff       	call   c0019d60 <EnvVarContainer::getEnv(char const*)>
c001a103:	83 c4 10             	add    esp,0x10
c001a106:	85 c0                	test   eax,eax
c001a108:	75 28                	jne    c001a132 <Krnl::getEnv(Process*, char const*)+0x60>
c001a10a:	eb de                	jmp    c001a0ea <Krnl::getEnv(Process*, char const*)+0x18>
c001a10c:	52                   	push   edx
c001a10d:	52                   	push   edx
c001a10e:	53                   	push   ebx
c001a10f:	50                   	push   eax
c001a110:	e8 4b fc ff ff       	call   c0019d60 <EnvVarContainer::getEnv(char const*)>
c001a115:	83 c4 10             	add    esp,0x10
c001a118:	85 c0                	test   eax,eax
c001a11a:	75 16                	jne    c001a132 <Krnl::getEnv(Process*, char const*)+0x60>
c001a11c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a120:	a1 58 1b 03 c0       	mov    eax,ds:0xc0031b58
c001a125:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a129:	83 c4 08             	add    esp,0x8
c001a12c:	5b                   	pop    ebx
c001a12d:	e9 2e fc ff ff       	jmp    c0019d60 <EnvVarContainer::getEnv(char const*)>
c001a132:	83 c4 08             	add    esp,0x8
c001a135:	5b                   	pop    ebx
c001a136:	c3                   	ret    

c001a137 <Krnl::setEnvSystem(char const*, char const*)>:
c001a137:	83 ec 10             	sub    esp,0x10
c001a13a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a13e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a142:	ff 35 58 1b 03 c0    	push   DWORD PTR ds:0xc0031b58
c001a148:	e8 51 fc ff ff       	call   c0019d9e <EnvVarContainer::setEnv(char const*, char const*)>
c001a14d:	83 c4 1c             	add    esp,0x1c
c001a150:	c3                   	ret    

c001a151 <Krnl::setEnvUser(char const*, char const*)>:
c001a151:	a1 54 1b 03 c0       	mov    eax,ds:0xc0031b54
c001a156:	85 c0                	test   eax,eax
c001a158:	74 15                	je     c001a16f <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a15a:	83 ec 10             	sub    esp,0x10
c001a15d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a161:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a165:	50                   	push   eax
c001a166:	e8 33 fc ff ff       	call   c0019d9e <EnvVarContainer::setEnv(char const*, char const*)>
c001a16b:	83 c4 1c             	add    esp,0x1c
c001a16e:	c3                   	ret    
c001a16f:	c3                   	ret    

c001a170 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a174:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a17a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a17e:	e9 1b fc ff ff       	jmp    c0019d9e <EnvVarContainer::setEnv(char const*, char const*)>

c001a183 <Krnl::deleteEnvSystem(char const*)>:
c001a183:	c3                   	ret    

c001a184 <Krnl::deleteEnvUser(char const*)>:
c001a184:	c3                   	ret    

c001a185 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a185:	c3                   	ret    

c001a186 <Krnl::newProcessEnv(Process*)>:
c001a186:	83 ec 28             	sub    esp,0x28
c001a189:	6a 0c                	push   0xc
c001a18b:	e8 fc 56 ff ff       	call   c000f88c <malloc>
c001a190:	5a                   	pop    edx
c001a191:	59                   	pop    ecx
c001a192:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a196:	50                   	push   eax
c001a197:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a19b:	e8 e0 fe ff ff       	call   c001a080 <EnvVarContainer::EnvVarContainer(Process*)>
c001a1a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a1a4:	83 c4 2c             	add    esp,0x2c
c001a1a7:	c3                   	ret    

c001a1a8 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a1a8:	57                   	push   edi
c001a1a9:	56                   	push   esi
c001a1aa:	53                   	push   ebx
c001a1ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1af:	83 ec 0c             	sub    esp,0xc
c001a1b2:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a1b8:	6a 0c                	push   0xc
c001a1ba:	e8 cd 56 ff ff       	call   c000f88c <malloc>
c001a1bf:	89 c3                	mov    ebx,eax
c001a1c1:	58                   	pop    eax
c001a1c2:	5a                   	pop    edx
c001a1c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a1c7:	53                   	push   ebx
c001a1c8:	e8 b3 fe ff ff       	call   c001a080 <EnvVarContainer::EnvVarContainer(Process*)>
c001a1cd:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1cf:	89 03                	mov    DWORD PTR [ebx],eax
c001a1d1:	c1 e0 03             	shl    eax,0x3
c001a1d4:	89 04 24             	mov    DWORD PTR [esp],eax
c001a1d7:	e8 b0 56 ff ff       	call   c000f88c <malloc>
c001a1dc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a1df:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a1e1:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a1e4:	c1 e1 03             	shl    ecx,0x3
c001a1e7:	89 c7                	mov    edi,eax
c001a1e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a1eb:	83 c4 10             	add    esp,0x10
c001a1ee:	89 d8                	mov    eax,ebx
c001a1f0:	5b                   	pop    ebx
c001a1f1:	5e                   	pop    esi
c001a1f2:	5f                   	pop    edi
c001a1f3:	c3                   	ret    

c001a1f4 <Krnl::loadSystemEnv()>:
c001a1f4:	53                   	push   ebx
c001a1f5:	83 ec 14             	sub    esp,0x14
c001a1f8:	6a 0c                	push   0xc
c001a1fa:	e8 8d 56 ff ff       	call   c000f88c <malloc>
c001a1ff:	89 c3                	mov    ebx,eax
c001a201:	58                   	pop    eax
c001a202:	5a                   	pop    edx
c001a203:	ff 35 70 25 03 c0    	push   DWORD PTR ds:0xc0032570
c001a209:	53                   	push   ebx
c001a20a:	e8 71 fe ff ff       	call   c001a080 <EnvVarContainer::EnvVarContainer(Process*)>
c001a20f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a212:	89 1d 58 1b 03 c0    	mov    DWORD PTR ds:0xc0031b58,ebx
c001a218:	e8 47 fe ff ff       	call   c001a064 <EnvVarContainer::__loadSystem()>
c001a21d:	83 c4 18             	add    esp,0x18
c001a220:	5b                   	pop    ebx
c001a221:	c3                   	ret    

c001a222 <Krnl::loadUserEnv()>:
c001a222:	53                   	push   ebx
c001a223:	83 ec 14             	sub    esp,0x14
c001a226:	6a 0c                	push   0xc
c001a228:	e8 5f 56 ff ff       	call   c000f88c <malloc>
c001a22d:	89 c3                	mov    ebx,eax
c001a22f:	58                   	pop    eax
c001a230:	5a                   	pop    edx
c001a231:	ff 35 70 25 03 c0    	push   DWORD PTR ds:0xc0032570
c001a237:	53                   	push   ebx
c001a238:	e8 43 fe ff ff       	call   c001a080 <EnvVarContainer::EnvVarContainer(Process*)>
c001a23d:	89 1d 54 1b 03 c0    	mov    DWORD PTR ds:0xc0031b54,ebx
c001a243:	83 c4 18             	add    esp,0x18
c001a246:	5b                   	pop    ebx
c001a247:	c3                   	ret    

c001a248 <Krnl::flushEnv()>:
c001a248:	c3                   	ret    

c001a249 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a249:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a24d:	8b 15 54 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b54
c001a253:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a259:	a1 58 1b 03 c0       	mov    eax,ds:0xc0031b58
c001a25e:	8b 00                	mov    eax,DWORD PTR [eax]
c001a260:	03 01                	add    eax,DWORD PTR [ecx]
c001a262:	85 d2                	test   edx,edx
c001a264:	74 02                	je     c001a268 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a266:	03 02                	add    eax,DWORD PTR [edx]
c001a268:	c3                   	ret    

c001a269 <Krnl::getProcessEnvPair(Process*, int)>:
c001a269:	57                   	push   edi
c001a26a:	8b 0d 54 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031b54
c001a270:	56                   	push   esi
c001a271:	85 c9                	test   ecx,ecx
c001a273:	53                   	push   ebx
c001a274:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a278:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a27c:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a282:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a286:	8b 02                	mov    eax,DWORD PTR [edx]
c001a288:	75 47                	jne    c001a2d1 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a28a:	39 c3                	cmp    ebx,eax
c001a28c:	7c 47                	jl     c001a2d5 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a28e:	8b 15 58 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b58
c001a294:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a296:	01 c1                	add    ecx,eax
c001a298:	39 d9                	cmp    ecx,ebx
c001a29a:	7e 6c                	jle    c001a308 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a29c:	51                   	push   ecx
c001a29d:	89 d9                	mov    ecx,ebx
c001a29f:	29 c1                	sub    ecx,eax
c001a2a1:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a2a4:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a2a8:	53                   	push   ebx
c001a2a9:	68 0c c4 02 c0       	push   0xc002c40c
c001a2ae:	e8 44 86 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001a2b3:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a2b9:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a2bb:	a1 58 1b 03 c0       	mov    eax,ds:0xc0031b58
c001a2c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a2c3:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a2c7:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a2ca:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a2cd:	89 06                	mov    DWORD PTR [esi],eax
c001a2cf:	eb 51                	jmp    c001a322 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a2d1:	39 c3                	cmp    ebx,eax
c001a2d3:	7d 05                	jge    c001a2da <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a2d5:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a2d8:	eb 20                	jmp    c001a2fa <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a2da:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a2dc:	8d 14 07             	lea    edx,[edi+eax*1]
c001a2df:	39 da                	cmp    edx,ebx
c001a2e1:	7e 04                	jle    c001a2e7 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a2e3:	29 c3                	sub    ebx,eax
c001a2e5:	eb 10                	jmp    c001a2f7 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a2e7:	8b 0d 58 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031b58
c001a2ed:	03 11                	add    edx,DWORD PTR [ecx]
c001a2ef:	39 da                	cmp    edx,ebx
c001a2f1:	7e 15                	jle    c001a308 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a2f3:	29 c3                	sub    ebx,eax
c001a2f5:	29 fb                	sub    ebx,edi
c001a2f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a2fa:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a2fe:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a301:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a304:	89 06                	mov    DWORD PTR [esi],eax
c001a306:	eb 1d                	jmp    c001a325 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a308:	83 ec 0c             	sub    esp,0xc
c001a30b:	68 20 c4 02 c0       	push   0xc002c420
c001a310:	e8 18 00 00 00       	call   c001a32d <Krnl::panic(char const*)>
c001a315:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a31b:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a322:	83 c4 10             	add    esp,0x10
c001a325:	89 f0                	mov    eax,esi
c001a327:	5b                   	pop    ebx
c001a328:	5e                   	pop    esi
c001a329:	5f                   	pop    edi
c001a32a:	c2 04 00             	ret    0x4

c001a32d <Krnl::panic(char const*)>:
c001a32d:	55                   	push   ebp
c001a32e:	89 e5                	mov    ebp,esp
c001a330:	53                   	push   ebx
c001a331:	83 ec 0c             	sub    esp,0xc
c001a334:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a337:	fa                   	cli    
c001a338:	c6 05 64 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b64,0x1
c001a33f:	53                   	push   ebx
c001a340:	c6 05 60 df 02 c0 00 	mov    BYTE PTR ds:0xc002df60,0x0
c001a347:	68 3a c4 02 c0       	push   0xc002c43a
c001a34c:	e8 a6 85 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001a351:	58                   	pop    eax
c001a352:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a357:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a35d:	e8 b8 63 ff ff       	call   c001071a <setActiveTerminal(VgaText*)>
c001a362:	83 c4 0c             	add    esp,0xc
c001a365:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a36a:	6a 01                	push   0x1
c001a36c:	6a 0f                	push   0xf
c001a36e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a374:	e8 4d 60 ff ff       	call   c00103c6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a379:	58                   	pop    eax
c001a37a:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a37f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a385:	e8 d6 65 ff ff       	call   c0010960 <VgaText::clearScreen()>
c001a38a:	58                   	pop    eax
c001a38b:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a390:	5a                   	pop    edx
c001a391:	68 53 c4 02 c0       	push   0xc002c453
c001a396:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a39c:	e8 4b 67 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c001a3a1:	59                   	pop    ecx
c001a3a2:	58                   	pop    eax
c001a3a3:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a3a8:	68 f8 c4 02 c0       	push   0xc002c4f8
c001a3ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3b3:	e8 34 67 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c001a3b8:	58                   	pop    eax
c001a3b9:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a3be:	5a                   	pop    edx
c001a3bf:	68 6f c4 02 c0       	push   0xc002c46f
c001a3c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3ca:	e8 1d 67 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c001a3cf:	59                   	pop    ecx
c001a3d0:	58                   	pop    eax
c001a3d1:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a3d6:	53                   	push   ebx
c001a3d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3dd:	e8 0a 67 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c001a3e2:	58                   	pop    eax
c001a3e3:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a3e8:	5a                   	pop    edx
c001a3e9:	68 8f c4 02 c0       	push   0xc002c48f
c001a3ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3f4:	e8 f3 66 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c001a3f9:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c001a3fe:	83 c4 10             	add    esp,0x10
c001a401:	85 c0                	test   eax,eax
c001a403:	74 02                	je     c001a407 <Krnl::panic(char const*)+0xda>
c001a405:	ff d0                	call   eax
c001a407:	83 ec 0c             	sub    esp,0xc
c001a40a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a40d:	e8 9e 32 00 00       	call   c001d6b0 <Thr::getDriverNameFromAddress(unsigned long)>
c001a412:	83 c4 10             	add    esp,0x10
c001a415:	89 c3                	mov    ebx,eax
c001a417:	85 c0                	test   eax,eax
c001a419:	0f 84 50 02 00 00    	je     c001a66f <Krnl::panic(char const*)+0x342>
c001a41f:	83 ec 08             	sub    esp,0x8
c001a422:	8b 15 70 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032570
c001a428:	68 34 c5 02 c0       	push   0xc002c534
c001a42d:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a433:	e8 b4 66 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c001a438:	58                   	pop    eax
c001a439:	5a                   	pop    edx
c001a43a:	8b 15 70 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032570
c001a440:	68 6f c4 02 c0       	push   0xc002c46f
c001a445:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a44b:	e8 9c 66 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c001a450:	59                   	pop    ecx
c001a451:	58                   	pop    eax
c001a452:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a457:	53                   	push   ebx
c001a458:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a45e:	e8 89 66 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c001a463:	83 c4 10             	add    esp,0x10
c001a466:	83 ec 08             	sub    esp,0x8
c001a469:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a46e:	68 8e c4 02 c0       	push   0xc002c48e
c001a473:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a479:	e8 6e 66 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c001a47e:	58                   	pop    eax
c001a47f:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a484:	5a                   	pop    edx
c001a485:	68 8c c5 02 c0       	push   0xc002c58c
c001a48a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a490:	e8 57 66 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c001a495:	59                   	pop    ecx
c001a496:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a49b:	5b                   	pop    ebx
c001a49c:	68 cc c5 02 c0       	push   0xc002c5cc
c001a4a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4a7:	e8 40 66 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c001a4ac:	58                   	pop    eax
c001a4ad:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a4b2:	5a                   	pop    edx
c001a4b3:	68 7a c4 02 c0       	push   0xc002c47a
c001a4b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4be:	e8 29 66 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c001a4c3:	59                   	pop    ecx
c001a4c4:	5b                   	pop    ebx
c001a4c5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a4c8:	68 92 c4 02 c0       	push   0xc002c492
c001a4cd:	e8 25 84 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001a4d2:	58                   	pop    eax
c001a4d3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a4d6:	5a                   	pop    edx
c001a4d7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a4da:	68 9b c4 02 c0       	push   0xc002c49b
c001a4df:	e8 13 84 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001a4e4:	59                   	pop    ecx
c001a4e5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a4e8:	5b                   	pop    ebx
c001a4e9:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4eb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a4ee:	68 a4 c4 02 c0       	push   0xc002c4a4
c001a4f3:	e8 ff 83 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001a4f8:	58                   	pop    eax
c001a4f9:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a4fe:	5a                   	pop    edx
c001a4ff:	68 10 c6 02 c0       	push   0xc002c610
c001a504:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a50a:	e8 dd 65 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c001a50f:	59                   	pop    ecx
c001a510:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a515:	5b                   	pop    ebx
c001a516:	68 ad c4 02 c0       	push   0xc002c4ad
c001a51b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a521:	e8 c6 65 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c001a526:	0f 20 c0             	mov    eax,cr0
c001a529:	5a                   	pop    edx
c001a52a:	59                   	pop    ecx
c001a52b:	50                   	push   eax
c001a52c:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a531:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a537:	e8 6a 65 ff ff       	call   c0010aa6 <VgaText::putx(unsigned int)>
c001a53c:	5b                   	pop    ebx
c001a53d:	58                   	pop    eax
c001a53e:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a543:	68 b7 c4 02 c0       	push   0xc002c4b7
c001a548:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a54e:	e8 99 65 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c001a553:	0f 20 d0             	mov    eax,cr2
c001a556:	5a                   	pop    edx
c001a557:	59                   	pop    ecx
c001a558:	50                   	push   eax
c001a559:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a55e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a564:	e8 3d 65 ff ff       	call   c0010aa6 <VgaText::putx(unsigned int)>
c001a569:	5b                   	pop    ebx
c001a56a:	58                   	pop    eax
c001a56b:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a570:	68 c1 c4 02 c0       	push   0xc002c4c1
c001a575:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a57b:	e8 6c 65 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c001a580:	0f 20 d8             	mov    eax,cr3
c001a583:	5a                   	pop    edx
c001a584:	59                   	pop    ecx
c001a585:	50                   	push   eax
c001a586:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a58b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a591:	e8 10 65 ff ff       	call   c0010aa6 <VgaText::putx(unsigned int)>
c001a596:	5b                   	pop    ebx
c001a597:	58                   	pop    eax
c001a598:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a59d:	68 d4 c4 02 c0       	push   0xc002c4d4
c001a5a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5a8:	e8 3f 65 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c001a5ad:	0f 20 e0             	mov    eax,cr4
c001a5b0:	5a                   	pop    edx
c001a5b1:	59                   	pop    ecx
c001a5b2:	50                   	push   eax
c001a5b3:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a5b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5be:	e8 e3 64 ff ff       	call   c0010aa6 <VgaText::putx(unsigned int)>
c001a5c3:	5b                   	pop    ebx
c001a5c4:	58                   	pop    eax
c001a5c5:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a5ca:	68 de c4 02 c0       	push   0xc002c4de
c001a5cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5d5:	e8 12 65 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c001a5da:	5a                   	pop    edx
c001a5db:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a5e0:	59                   	pop    ecx
c001a5e1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a5e7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a5ea:	50                   	push   eax
c001a5eb:	e8 b6 64 ff ff       	call   c0010aa6 <VgaText::putx(unsigned int)>
c001a5f0:	5b                   	pop    ebx
c001a5f1:	58                   	pop    eax
c001a5f2:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a5f7:	68 ab d3 02 c0       	push   0xc002d3ab
c001a5fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a602:	e8 e5 64 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c001a607:	5a                   	pop    edx
c001a608:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a60d:	59                   	pop    ecx
c001a60e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a614:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a617:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a61a:	50                   	push   eax
c001a61b:	e8 86 64 ff ff       	call   c0010aa6 <VgaText::putx(unsigned int)>
c001a620:	5b                   	pop    ebx
c001a621:	58                   	pop    eax
c001a622:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a627:	68 ab d3 02 c0       	push   0xc002d3ab
c001a62c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a632:	e8 b5 64 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c001a637:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a63c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a63f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a645:	8b 12                	mov    edx,DWORD PTR [edx]
c001a647:	59                   	pop    ecx
c001a648:	5b                   	pop    ebx
c001a649:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a64c:	50                   	push   eax
c001a64d:	e8 54 64 ff ff       	call   c0010aa6 <VgaText::putx(unsigned int)>
c001a652:	83 c4 10             	add    esp,0x10
c001a655:	b2 fe                	mov    dl,0xfe
c001a657:	e4 60                	in     al,0x60
c001a659:	3c 1c                	cmp    al,0x1c
c001a65b:	74 04                	je     c001a661 <Krnl::panic(char const*)+0x334>
c001a65d:	3c 5a                	cmp    al,0x5a
c001a65f:	75 f6                	jne    c001a657 <Krnl::panic(char const*)+0x32a>
c001a661:	e4 64                	in     al,0x64
c001a663:	a8 02                	test   al,0x2
c001a665:	75 fa                	jne    c001a661 <Krnl::panic(char const*)+0x334>
c001a667:	88 d0                	mov    al,dl
c001a669:	e6 64                	out    0x64,al
c001a66b:	fa                   	cli    
c001a66c:	f4                   	hlt    
c001a66d:	eb e8                	jmp    c001a657 <Krnl::panic(char const*)+0x32a>
c001a66f:	50                   	push   eax
c001a670:	50                   	push   eax
c001a671:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a676:	68 60 c5 02 c0       	push   0xc002c560
c001a67b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a681:	e8 66 64 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c001a686:	58                   	pop    eax
c001a687:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a68c:	5a                   	pop    edx
c001a68d:	68 6f c4 02 c0       	push   0xc002c46f
c001a692:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a698:	e8 4f 64 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c001a69d:	59                   	pop    ecx
c001a69e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a6a3:	5b                   	pop    ebx
c001a6a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a6a7:	83 c0 0c             	add    eax,0xc
c001a6aa:	50                   	push   eax
c001a6ab:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001a6b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6b6:	e8 31 64 ff ff       	call   c0010aec <VgaText::puts(char const*)>
c001a6bb:	83 c4 10             	add    esp,0x10
c001a6be:	e9 a3 fd ff ff       	jmp    c001a466 <Krnl::panic(char const*)+0x139>

c001a6c3 <Net::switchEndian16(unsigned short)>:
c001a6c3:	83 ec 04             	sub    esp,0x4
c001a6c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6ca:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a6ce:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a6d2:	c1 f8 08             	sar    eax,0x8
c001a6d5:	89 c2                	mov    edx,eax
c001a6d7:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a6db:	c1 e0 08             	shl    eax,0x8
c001a6de:	09 d0                	or     eax,edx
c001a6e0:	83 c4 04             	add    esp,0x4
c001a6e3:	c3                   	ret    

c001a6e4 <Net::switchEndian32(unsigned int)>:
c001a6e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6e8:	c1 e8 18             	shr    eax,0x18
c001a6eb:	89 c2                	mov    edx,eax
c001a6ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6f1:	c1 e0 08             	shl    eax,0x8
c001a6f4:	25 00 00 ff 00       	and    eax,0xff0000
c001a6f9:	09 c2                	or     edx,eax
c001a6fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6ff:	c1 e8 08             	shr    eax,0x8
c001a702:	25 00 ff 00 00       	and    eax,0xff00
c001a707:	09 c2                	or     edx,eax
c001a709:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a70d:	c1 e0 18             	shl    eax,0x18
c001a710:	09 d0                	or     eax,edx
c001a712:	c3                   	ret    

c001a713 <Net::crc32Calc(unsigned char*, int)>:
c001a713:	83 ec 10             	sub    esp,0x10
c001a716:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a71b:	75 07                	jne    c001a724 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a71d:	b8 00 00 00 00       	mov    eax,0x0
c001a722:	eb 7c                	jmp    c001a7a0 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a724:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a729:	7f 07                	jg     c001a732 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a72b:	b8 00 00 00 00       	mov    eax,0x0
c001a730:	eb 6e                	jmp    c001a7a0 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a732:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a73a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a742:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a746:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a74a:	7d 4e                	jge    c001a79a <Net::crc32Calc(unsigned char*, int)+0x87>
c001a74c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a750:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a754:	01 d0                	add    eax,edx
c001a756:	8a 00                	mov    al,BYTE PTR [eax]
c001a758:	0f b6 c0             	movzx  eax,al
c001a75b:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a75f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a767:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a76c:	7f 26                	jg     c001a794 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a772:	83 e0 01             	and    eax,0x1
c001a775:	74 0d                	je     c001a784 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a777:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a77b:	d1 e8                	shr    eax,1
c001a77d:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a782:	eb 06                	jmp    c001a78a <Net::crc32Calc(unsigned char*, int)+0x77>
c001a784:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a788:	d1 e8                	shr    eax,1
c001a78a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a78e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a792:	eb d3                	jmp    c001a767 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a794:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a798:	eb a8                	jmp    c001a742 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a79a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a79e:	f7 d0                	not    eax
c001a7a0:	83 c4 10             	add    esp,0x10
c001a7a3:	c3                   	ret    

c001a7a4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a7a4:	57                   	push   edi
c001a7a5:	56                   	push   esi
c001a7a6:	53                   	push   ebx
c001a7a7:	83 ec 60             	sub    esp,0x60
c001a7aa:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7b1:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a7b5:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a7bd:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a7c2:	7f 1a                	jg     c001a7de <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a7c4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7cb:	8d 50 01             	lea    edx,[eax+0x1]
c001a7ce:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a7d5:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a7d8:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a7dc:	eb df                	jmp    c001a7bd <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a7de:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7e5:	8d 50 01             	lea    edx,[eax+0x1]
c001a7e8:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a7ef:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a7f2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a7fd:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a801:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a805:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a80d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a811:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a815:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a819:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a81d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a821:	89 c6                	mov    esi,eax
c001a823:	89 d7                	mov    edi,edx
c001a825:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a827:	89 c8                	mov    eax,ecx
c001a829:	89 fa                	mov    edx,edi
c001a82b:	89 f3                	mov    ebx,esi
c001a82d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a831:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a835:	89 04 24             	mov    DWORD PTR [esp],eax
c001a838:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a840:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a847:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a84b:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a84f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a853:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a85b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a85f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a863:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a867:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a86b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a86f:	89 c6                	mov    esi,eax
c001a871:	89 d7                	mov    edi,edx
c001a873:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a875:	89 c8                	mov    eax,ecx
c001a877:	89 fa                	mov    edx,edi
c001a879:	89 f3                	mov    ebx,esi
c001a87b:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a87f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a883:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a887:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a88f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a896:	0f b7 c0             	movzx  eax,ax
c001a899:	c1 f8 08             	sar    eax,0x8
c001a89c:	89 c1                	mov    ecx,eax
c001a89e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a8a5:	8d 50 01             	lea    edx,[eax+0x1]
c001a8a8:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a8af:	88 ca                	mov    dl,cl
c001a8b1:	88 10                	mov    BYTE PTR [eax],dl
c001a8b3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a8ba:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a8c1:	8d 48 01             	lea    ecx,[eax+0x1]
c001a8c4:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a8cb:	88 10                	mov    BYTE PTR [eax],dl
c001a8cd:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a8d1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a8d5:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a8dc:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a8e0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a8e4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a8e8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a8ec:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a8f0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a8f4:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a8f8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a8fc:	89 c6                	mov    esi,eax
c001a8fe:	89 d7                	mov    edi,edx
c001a900:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a902:	89 c8                	mov    eax,ecx
c001a904:	89 fa                	mov    edx,edi
c001a906:	89 f3                	mov    ebx,esi
c001a908:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a90c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a910:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a914:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a918:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a91f:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a926:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a92a:	50                   	push   eax
c001a92b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a92f:	e8 df fd ff ff       	call   c001a713 <Net::crc32Calc(unsigned char*, int)>
c001a934:	83 c4 08             	add    esp,0x8
c001a937:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a93b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a93f:	c1 e8 18             	shr    eax,0x18
c001a942:	89 c1                	mov    ecx,eax
c001a944:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a94b:	8d 50 01             	lea    edx,[eax+0x1]
c001a94e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a955:	88 ca                	mov    dl,cl
c001a957:	88 10                	mov    BYTE PTR [eax],dl
c001a959:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a95d:	c1 e8 10             	shr    eax,0x10
c001a960:	89 c1                	mov    ecx,eax
c001a962:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a969:	8d 50 01             	lea    edx,[eax+0x1]
c001a96c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a973:	88 ca                	mov    dl,cl
c001a975:	88 10                	mov    BYTE PTR [eax],dl
c001a977:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a97b:	c1 e8 08             	shr    eax,0x8
c001a97e:	89 c1                	mov    ecx,eax
c001a980:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a987:	8d 50 01             	lea    edx,[eax+0x1]
c001a98a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a991:	88 ca                	mov    dl,cl
c001a993:	88 10                	mov    BYTE PTR [eax],dl
c001a995:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a99c:	8d 50 01             	lea    edx,[eax+0x1]
c001a99f:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a9a6:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a9aa:	88 10                	mov    BYTE PTR [eax],dl
c001a9ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a9b0:	83 c4 60             	add    esp,0x60
c001a9b3:	5b                   	pop    ebx
c001a9b4:	5e                   	pop    esi
c001a9b5:	5f                   	pop    edi
c001a9b6:	c3                   	ret    

c001a9b7 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a9b7:	57                   	push   edi
c001a9b8:	56                   	push   esi
c001a9b9:	53                   	push   ebx
c001a9ba:	83 ec 70             	sub    esp,0x70
c001a9bd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a9c4:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a9c8:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a9d0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a9d7:	83 c0 0e             	add    eax,0xe
c001a9da:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a9de:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a9e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a9e9:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a9f1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a9f5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a9f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a9fd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aa01:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001aa05:	89 c6                	mov    esi,eax
c001aa07:	89 d7                	mov    edi,edx
c001aa09:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa0b:	89 c8                	mov    eax,ecx
c001aa0d:	89 fa                	mov    edx,edi
c001aa0f:	89 f3                	mov    ebx,esi
c001aa11:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001aa15:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001aa19:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa1d:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001aa25:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aa2c:	83 c0 08             	add    eax,0x8
c001aa2f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001aa33:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa3a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001aa3e:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001aa46:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001aa4a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001aa4e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aa52:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001aa56:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001aa5a:	89 c6                	mov    esi,eax
c001aa5c:	89 d7                	mov    edi,edx
c001aa5e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa60:	89 c8                	mov    eax,ecx
c001aa62:	89 fa                	mov    edx,edi
c001aa64:	89 f3                	mov    ebx,esi
c001aa66:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001aa6a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001aa6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001aa72:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001aa7a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa81:	8d 50 01             	lea    edx,[eax+0x1]
c001aa84:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aa8b:	8a 00                	mov    al,BYTE PTR [eax]
c001aa8d:	0f b6 c0             	movzx  eax,al
c001aa90:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001aa95:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa9c:	8d 50 01             	lea    edx,[eax+0x1]
c001aa9f:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aaa6:	8a 00                	mov    al,BYTE PTR [eax]
c001aaa8:	0f b6 c0             	movzx  eax,al
c001aaab:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001aab0:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001aab5:	c1 e0 08             	shl    eax,0x8
c001aab8:	89 c2                	mov    edx,eax
c001aaba:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001aabe:	09 d0                	or     eax,edx
c001aac0:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001aac7:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001aacb:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001aad3:	75 46                	jne    c001ab1b <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001aad5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aadc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aadf:	66 3d dc 05          	cmp    ax,0x5dc
c001aae3:	77 16                	ja     c001aafb <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001aae5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aaec:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aaef:	0f b7 c0             	movzx  eax,ax
c001aaf2:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001aaf9:	eb 20                	jmp    c001ab1b <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001aafb:	83 ec 0c             	sub    esp,0xc
c001aafe:	68 38 c6 02 c0       	push   0xc002c638
c001ab03:	e8 ef 7d ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001ab08:	83 c4 10             	add    esp,0x10
c001ab0b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab12:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ab16:	e9 17 01 00 00       	jmp    c001ac32 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001ab1b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ab22:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001ab29:	8b 12                	mov    edx,DWORD PTR [edx]
c001ab2b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ab2f:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001ab36:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ab3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ab3e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab4a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ab4e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ab52:	89 c6                	mov    esi,eax
c001ab54:	89 d7                	mov    edi,edx
c001ab56:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab58:	89 c8                	mov    eax,ecx
c001ab5a:	89 fa                	mov    edx,edi
c001ab5c:	89 f3                	mov    ebx,esi
c001ab5e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ab62:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ab66:	89 04 24             	mov    DWORD PTR [esp],eax
c001ab69:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ab70:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001ab77:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab7e:	8d 50 01             	lea    edx,[eax+0x1]
c001ab81:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab88:	8a 00                	mov    al,BYTE PTR [eax]
c001ab8a:	0f b6 c0             	movzx  eax,al
c001ab8d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001ab91:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab98:	8d 50 01             	lea    edx,[eax+0x1]
c001ab9b:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aba2:	8a 00                	mov    al,BYTE PTR [eax]
c001aba4:	0f b6 c0             	movzx  eax,al
c001aba7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001abab:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001abb2:	8d 50 01             	lea    edx,[eax+0x1]
c001abb5:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001abbc:	8a 00                	mov    al,BYTE PTR [eax]
c001abbe:	0f b6 c0             	movzx  eax,al
c001abc1:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001abc5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001abcc:	8d 50 01             	lea    edx,[eax+0x1]
c001abcf:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001abd6:	8a 00                	mov    al,BYTE PTR [eax]
c001abd8:	0f b6 c0             	movzx  eax,al
c001abdb:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001abdf:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001abe3:	c1 e0 18             	shl    eax,0x18
c001abe6:	89 c2                	mov    edx,eax
c001abe8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001abec:	c1 e0 10             	shl    eax,0x10
c001abef:	09 c2                	or     edx,eax
c001abf1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001abf5:	c1 e0 08             	shl    eax,0x8
c001abf8:	09 d0                	or     eax,edx
c001abfa:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001abfe:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001ac02:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac09:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001ac0d:	83 e8 04             	sub    eax,0x4
c001ac10:	83 ec 08             	sub    esp,0x8
c001ac13:	50                   	push   eax
c001ac14:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001ac18:	e8 f6 fa ff ff       	call   c001a713 <Net::crc32Calc(unsigned char*, int)>
c001ac1d:	83 c4 10             	add    esp,0x10
c001ac20:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001ac24:	0f 94 c2             	sete   dl
c001ac27:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ac2e:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ac31:	90                   	nop
c001ac32:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ac39:	83 c4 70             	add    esp,0x70
c001ac3c:	5b                   	pop    ebx
c001ac3d:	5e                   	pop    esi
c001ac3e:	5f                   	pop    edi
c001ac3f:	c2 04 00             	ret    0x4

c001ac42 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ac42:	55                   	push   ebp
c001ac43:	57                   	push   edi
c001ac44:	56                   	push   esi
c001ac45:	53                   	push   ebx
c001ac46:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ac4c:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ac53:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ac55:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ac58:	80 fb 40             	cmp    bl,0x40
c001ac5b:	75 1b                	jne    c001ac78 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ac5d:	8a 16                	mov    dl,BYTE PTR [esi]
c001ac5f:	84 d2                	test   dl,dl
c001ac61:	0f 84 f1 00 00 00    	je     c001ad58 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac67:	8d 46 01             	lea    eax,[esi+0x1]
c001ac6a:	80 fa 3a             	cmp    dl,0x3a
c001ac6d:	74 04                	je     c001ac73 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ac6f:	89 c6                	mov    esi,eax
c001ac71:	eb ea                	jmp    c001ac5d <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ac73:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ac76:	89 c6                	mov    esi,eax
c001ac78:	50                   	push   eax
c001ac79:	6a 40                	push   0x40
c001ac7b:	6a 00                	push   0x0
c001ac7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ac81:	50                   	push   eax
c001ac82:	e8 c9 5a fe ff       	call   c0000750 <memset>
c001ac87:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ac8e:	31 c0                	xor    eax,eax
c001ac90:	83 c4 10             	add    esp,0x10
c001ac93:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ac95:	84 c9                	test   cl,cl
c001ac97:	0f 84 bb 00 00 00    	je     c001ad58 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac9d:	3d c7 00 00 00       	cmp    eax,0xc7
c001aca2:	0f 8f b0 00 00 00    	jg     c001ad58 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aca8:	80 f9 0a             	cmp    cl,0xa
c001acab:	0f 85 98 00 00 00    	jne    c001ad49 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001acb1:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001acb6:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001acba:	a8 df                	test   al,0xdf
c001acbc:	0f 94 c1             	sete   cl
c001acbf:	3c 23                	cmp    al,0x23
c001acc1:	0f 94 c2             	sete   dl
c001acc4:	08 d1                	or     cl,dl
c001acc6:	75 4a                	jne    c001ad12 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acc8:	8d 50 f7             	lea    edx,[eax-0x9]
c001accb:	80 fa 01             	cmp    dl,0x1
c001acce:	76 42                	jbe    c001ad12 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acd0:	3c 5b                	cmp    al,0x5b
c001acd2:	75 42                	jne    c001ad16 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001acd4:	80 fb 40             	cmp    bl,0x40
c001acd7:	75 39                	jne    c001ad12 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acd9:	83 ec 0c             	sub    esp,0xc
c001acdc:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ace0:	52                   	push   edx
c001ace1:	e8 86 5a fe ff       	call   c000076c <strlen>
c001ace6:	83 c4 10             	add    esp,0x10
c001ace9:	83 f8 3f             	cmp    eax,0x3f
c001acec:	77 6a                	ja     c001ad58 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001acee:	50                   	push   eax
c001acef:	50                   	push   eax
c001acf0:	8d 54 24 61          	lea    edx,[esp+0x61]
c001acf4:	52                   	push   edx
c001acf5:	8d 54 24 24          	lea    edx,[esp+0x24]
c001acf9:	52                   	push   edx
c001acfa:	e8 0d 5b fe ff       	call   c000080c <strcpy>
c001acff:	58                   	pop    eax
c001ad00:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ad04:	52                   	push   edx
c001ad05:	e8 62 5a fe ff       	call   c000076c <strlen>
c001ad0a:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ad0f:	83 c4 10             	add    esp,0x10
c001ad12:	31 d2                	xor    edx,edx
c001ad14:	eb 3a                	jmp    c001ad50 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ad16:	80 fb 40             	cmp    bl,0x40
c001ad19:	74 06                	je     c001ad21 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ad1b:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ad1f:	eb 20                	jmp    c001ad41 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001ad21:	50                   	push   eax
c001ad22:	50                   	push   eax
c001ad23:	55                   	push   ebp
c001ad24:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad28:	50                   	push   eax
c001ad29:	e8 6a 5b fe ff       	call   c0000898 <strcmp>
c001ad2e:	83 c4 10             	add    esp,0x10
c001ad31:	85 c0                	test   eax,eax
c001ad33:	75 dd                	jne    c001ad12 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad35:	eb e4                	jmp    c001ad1b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ad37:	8d 50 01             	lea    edx,[eax+0x1]
c001ad3a:	80 f9 3d             	cmp    cl,0x3d
c001ad3d:	74 1d                	je     c001ad5c <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ad3f:	89 d0                	mov    eax,edx
c001ad41:	8a 08                	mov    cl,BYTE PTR [eax]
c001ad43:	84 c9                	test   cl,cl
c001ad45:	75 f0                	jne    c001ad37 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ad47:	eb 0f                	jmp    c001ad58 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad49:	8d 50 01             	lea    edx,[eax+0x1]
c001ad4c:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ad50:	47                   	inc    edi
c001ad51:	89 d0                	mov    eax,edx
c001ad53:	e9 3b ff ff ff       	jmp    c001ac93 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ad58:	31 c0                	xor    eax,eax
c001ad5a:	eb 33                	jmp    c001ad8f <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ad5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ad60:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ad63:	50                   	push   eax
c001ad64:	50                   	push   eax
c001ad65:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ad69:	50                   	push   eax
c001ad6a:	56                   	push   esi
c001ad6b:	e8 28 5b fe ff       	call   c0000898 <strcmp>
c001ad70:	83 c4 10             	add    esp,0x10
c001ad73:	85 c0                	test   eax,eax
c001ad75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad79:	75 97                	jne    c001ad12 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad7b:	51                   	push   ecx
c001ad7c:	51                   	push   ecx
c001ad7d:	52                   	push   edx
c001ad7e:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ad85:	e8 82 5a fe ff       	call   c000080c <strcpy>
c001ad8a:	83 c4 10             	add    esp,0x10
c001ad8d:	b0 01                	mov    al,0x1
c001ad8f:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ad95:	5b                   	pop    ebx
c001ad96:	5e                   	pop    esi
c001ad97:	5f                   	pop    edi
c001ad98:	5d                   	pop    ebp
c001ad99:	c3                   	ret    

c001ad9a <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ad9a:	57                   	push   edi
c001ad9b:	56                   	push   esi
c001ad9c:	53                   	push   ebx
c001ad9d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ada3:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001adaa:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001adb1:	53                   	push   ebx
c001adb2:	e8 b5 59 fe ff       	call   c000076c <strlen>
c001adb7:	89 34 24             	mov    DWORD PTR [esp],esi
c001adba:	89 c7                	mov    edi,eax
c001adbc:	e8 ab 59 fe ff       	call   c000076c <strlen>
c001adc1:	83 c4 10             	add    esp,0x10
c001adc4:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001adc8:	3d ff 00 00 00       	cmp    eax,0xff
c001adcd:	0f 87 d3 00 00 00    	ja     c001aea6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001add3:	57                   	push   edi
c001add4:	57                   	push   edi
c001add5:	56                   	push   esi
c001add6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001adda:	56                   	push   esi
c001addb:	e8 2c 5a fe ff       	call   c000080c <strcpy>
c001ade0:	58                   	pop    eax
c001ade1:	5a                   	pop    edx
c001ade2:	68 8d cb 02 c0       	push   0xc002cb8d
c001ade7:	56                   	push   esi
c001ade8:	e8 5f 5b fe ff       	call   c000094c <strcat>
c001aded:	59                   	pop    ecx
c001adee:	5f                   	pop    edi
c001adef:	53                   	push   ebx
c001adf0:	56                   	push   esi
c001adf1:	e8 56 5b fe ff       	call   c000094c <strcat>
c001adf6:	58                   	pop    eax
c001adf7:	5a                   	pop    edx
c001adf8:	68 84 c6 02 c0       	push   0xc002c684
c001adfd:	56                   	push   esi
c001adfe:	e8 49 5b fe ff       	call   c000094c <strcat>
c001ae03:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ae0a:	e8 7d 4a ff ff       	call   c000f88c <malloc>
c001ae0f:	83 c4 0c             	add    esp,0xc
c001ae12:	89 c3                	mov    ebx,eax
c001ae14:	ff 35 70 25 03 c0    	push   DWORD PTR ds:0xc0032570
c001ae1a:	56                   	push   esi
c001ae1b:	50                   	push   eax
c001ae1c:	e8 35 80 ff ff       	call   c0012e56 <File::File(char const*, Process*)>
c001ae21:	83 c4 10             	add    esp,0x10
c001ae24:	85 db                	test   ebx,ebx
c001ae26:	74 7e                	je     c001aea6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae28:	51                   	push   ecx
c001ae29:	51                   	push   ecx
c001ae2a:	6a 01                	push   0x1
c001ae2c:	53                   	push   ebx
c001ae2d:	e8 88 80 ff ff       	call   c0012eba <File::open(FileOpenMode)>
c001ae32:	83 c4 10             	add    esp,0x10
c001ae35:	85 c0                	test   eax,eax
c001ae37:	74 08                	je     c001ae41 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001ae39:	83 ec 0c             	sub    esp,0xc
c001ae3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae3e:	53                   	push   ebx
c001ae3f:	eb 5f                	jmp    c001aea0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001ae41:	52                   	push   edx
c001ae42:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ae46:	50                   	push   eax
c001ae47:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ae4b:	50                   	push   eax
c001ae4c:	53                   	push   ebx
c001ae4d:	e8 14 83 ff ff       	call   c0013166 <File::stat(unsigned long long*, bool*)>
c001ae52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae56:	83 c4 10             	add    esp,0x10
c001ae59:	89 c1                	mov    ecx,eax
c001ae5b:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001ae5f:	74 31                	je     c001ae92 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ae61:	83 ec 0c             	sub    esp,0xc
c001ae64:	50                   	push   eax
c001ae65:	e8 22 4a ff ff       	call   c000f88c <malloc>
c001ae6a:	89 c6                	mov    esi,eax
c001ae6c:	58                   	pop    eax
c001ae6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae6f:	8d 54 24 20          	lea    edx,[esp+0x20]
c001ae73:	52                   	push   edx
c001ae74:	56                   	push   esi
c001ae75:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae79:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae7d:	53                   	push   ebx
c001ae7e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae81:	83 c4 20             	add    esp,0x20
c001ae84:	85 c0                	test   eax,eax
c001ae86:	75 0a                	jne    c001ae92 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ae88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae8c:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ae90:	74 18                	je     c001aeaa <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001ae92:	83 ec 0c             	sub    esp,0xc
c001ae95:	53                   	push   ebx
c001ae96:	e8 7d 80 ff ff       	call   c0012f18 <File::close()>
c001ae9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aea0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aea3:	83 c4 10             	add    esp,0x10
c001aea6:	31 c0                	xor    eax,eax
c001aea8:	eb 3b                	jmp    c001aee5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001aeaa:	83 ec 0c             	sub    esp,0xc
c001aead:	53                   	push   ebx
c001aeae:	e8 65 80 ff ff       	call   c0012f18 <File::close()>
c001aeb3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aeb5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aeb8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aebb:	83 c4 0c             	add    esp,0xc
c001aebe:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aec5:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aecc:	56                   	push   esi
c001aecd:	e8 70 fd ff ff       	call   c001ac42 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001aed2:	89 34 24             	mov    DWORD PTR [esp],esi
c001aed5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001aed9:	e8 be 49 ff ff       	call   c000f89c <free>
c001aede:	83 c4 10             	add    esp,0x10
c001aee1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001aee5:	81 c4 20 01 00 00    	add    esp,0x120
c001aeeb:	5b                   	pop    ebx
c001aeec:	5e                   	pop    esi
c001aeed:	5f                   	pop    edi
c001aeee:	c3                   	ret    

c001aeef <Reg::getLine(char*, char*, char*)>:
c001aeef:	57                   	push   edi
c001aef0:	56                   	push   esi
c001aef1:	53                   	push   ebx
c001aef2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aef6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aefa:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aefe:	57                   	push   edi
c001aeff:	56                   	push   esi
c001af00:	53                   	push   ebx
c001af01:	68 89 c6 02 c0       	push   0xc002c689
c001af06:	e8 8f fe ff ff       	call   c001ad9a <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001af0b:	83 c4 10             	add    esp,0x10
c001af0e:	84 c0                	test   al,al
c001af10:	75 10                	jne    c001af22 <Reg::getLine(char*, char*, char*)+0x33>
c001af12:	57                   	push   edi
c001af13:	56                   	push   esi
c001af14:	53                   	push   ebx
c001af15:	68 ae c6 02 c0       	push   0xc002c6ae
c001af1a:	e8 7b fe ff ff       	call   c001ad9a <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001af1f:	83 c4 10             	add    esp,0x10
c001af22:	5b                   	pop    ebx
c001af23:	5e                   	pop    esi
c001af24:	5f                   	pop    edi
c001af25:	c3                   	ret    

c001af26 <Reg::readInt(char*, char*, int*)>:
c001af26:	55                   	push   ebp
c001af27:	57                   	push   edi
c001af28:	56                   	push   esi
c001af29:	53                   	push   ebx
c001af2a:	81 ec f0 00 00 00    	sub    esp,0xf0
c001af30:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001af34:	57                   	push   edi
c001af35:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001af3c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001af43:	e8 a7 ff ff ff       	call   c001aeef <Reg::getLine(char*, char*, char*)>
c001af48:	83 c4 10             	add    esp,0x10
c001af4b:	84 c0                	test   al,al
c001af4d:	0f 84 b3 00 00 00    	je     c001b006 <Reg::readInt(char*, char*, int*)+0xe0>
c001af53:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001af57:	80 fa 2b             	cmp    dl,0x2b
c001af5a:	74 0c                	je     c001af68 <Reg::readInt(char*, char*, int*)+0x42>
c001af5c:	80 fa 2d             	cmp    dl,0x2d
c001af5f:	75 0e                	jne    c001af6f <Reg::readInt(char*, char*, int*)+0x49>
c001af61:	ba 01 00 00 00       	mov    edx,0x1
c001af66:	eb 0b                	jmp    c001af73 <Reg::readInt(char*, char*, int*)+0x4d>
c001af68:	ba 01 00 00 00       	mov    edx,0x1
c001af6d:	eb 02                	jmp    c001af71 <Reg::readInt(char*, char*, int*)+0x4b>
c001af6f:	31 d2                	xor    edx,edx
c001af71:	31 c0                	xor    eax,eax
c001af73:	be 0a 00 00 00       	mov    esi,0xa
c001af78:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001af7d:	75 20                	jne    c001af9f <Reg::readInt(char*, char*, int*)+0x79>
c001af7f:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001af83:	80 f9 78             	cmp    cl,0x78
c001af86:	75 0a                	jne    c001af92 <Reg::readInt(char*, char*, int*)+0x6c>
c001af88:	83 c2 02             	add    edx,0x2
c001af8b:	be 10 00 00 00       	mov    esi,0x10
c001af90:	eb 0d                	jmp    c001af9f <Reg::readInt(char*, char*, int*)+0x79>
c001af92:	80 f9 62             	cmp    cl,0x62
c001af95:	75 08                	jne    c001af9f <Reg::readInt(char*, char*, int*)+0x79>
c001af97:	83 c2 02             	add    edx,0x2
c001af9a:	be 02 00 00 00       	mov    esi,0x2
c001af9f:	01 d7                	add    edi,edx
c001afa1:	31 d2                	xor    edx,edx
c001afa3:	8a 1f                	mov    bl,BYTE PTR [edi]
c001afa5:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001afa9:	80 fb 0d             	cmp    bl,0xd
c001afac:	0f 94 c3             	sete   bl
c001afaf:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001afb4:	0f 94 c1             	sete   cl
c001afb7:	08 cb                	or     bl,cl
c001afb9:	75 3a                	jne    c001aff5 <Reg::readInt(char*, char*, int*)+0xcf>
c001afbb:	0f af d6             	imul   edx,esi
c001afbe:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001afc3:	83 fe 10             	cmp    esi,0x10
c001afc6:	75 26                	jne    c001afee <Reg::readInt(char*, char*, int*)+0xc8>
c001afc8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001afcc:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001afcf:	89 e9                	mov    ecx,ebp
c001afd1:	80 f9 05             	cmp    cl,0x5
c001afd4:	77 06                	ja     c001afdc <Reg::readInt(char*, char*, int*)+0xb6>
c001afd6:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001afda:	eb 16                	jmp    c001aff2 <Reg::readInt(char*, char*, int*)+0xcc>
c001afdc:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001afe0:	83 e9 61             	sub    ecx,0x61
c001afe3:	80 f9 05             	cmp    cl,0x5
c001afe6:	77 06                	ja     c001afee <Reg::readInt(char*, char*, int*)+0xc8>
c001afe8:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001afec:	eb 04                	jmp    c001aff2 <Reg::readInt(char*, char*, int*)+0xcc>
c001afee:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001aff2:	47                   	inc    edi
c001aff3:	eb ae                	jmp    c001afa3 <Reg::readInt(char*, char*, int*)+0x7d>
c001aff5:	84 c0                	test   al,al
c001aff7:	74 02                	je     c001affb <Reg::readInt(char*, char*, int*)+0xd5>
c001aff9:	f7 da                	neg    edx
c001affb:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b002:	89 10                	mov    DWORD PTR [eax],edx
c001b004:	88 d8                	mov    al,bl
c001b006:	81 c4 ec 00 00 00    	add    esp,0xec
c001b00c:	5b                   	pop    ebx
c001b00d:	5e                   	pop    esi
c001b00e:	5f                   	pop    edi
c001b00f:	5d                   	pop    ebp
c001b010:	c3                   	ret    

c001b011 <Reg::readString(char*, char*, char*, int)>:
c001b011:	57                   	push   edi
c001b012:	56                   	push   esi
c001b013:	53                   	push   ebx
c001b014:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b01a:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b021:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b025:	57                   	push   edi
c001b026:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b02d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b034:	e8 b6 fe ff ff       	call   c001aeef <Reg::getLine(char*, char*, char*)>
c001b039:	83 c4 10             	add    esp,0x10
c001b03c:	89 c6                	mov    esi,eax
c001b03e:	84 c0                	test   al,al
c001b040:	74 44                	je     c001b086 <Reg::readString(char*, char*, char*, int)+0x75>
c001b042:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b049:	31 c0                	xor    eax,eax
c001b04b:	4a                   	dec    edx
c001b04c:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b04f:	84 c9                	test   cl,cl
c001b051:	74 0f                	je     c001b062 <Reg::readString(char*, char*, char*, int)+0x51>
c001b053:	39 c2                	cmp    edx,eax
c001b055:	7e 0b                	jle    c001b062 <Reg::readString(char*, char*, char*, int)+0x51>
c001b057:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b05a:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b05f:	40                   	inc    eax
c001b060:	eb ea                	jmp    c001b04c <Reg::readString(char*, char*, char*, int)+0x3b>
c001b062:	83 ec 0c             	sub    esp,0xc
c001b065:	53                   	push   ebx
c001b066:	e8 01 57 fe ff       	call   c000076c <strlen>
c001b06b:	83 c4 10             	add    esp,0x10
c001b06e:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b073:	75 11                	jne    c001b086 <Reg::readString(char*, char*, char*, int)+0x75>
c001b075:	83 ec 0c             	sub    esp,0xc
c001b078:	53                   	push   ebx
c001b079:	e8 ee 56 fe ff       	call   c000076c <strlen>
c001b07e:	83 c4 10             	add    esp,0x10
c001b081:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b086:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b08c:	89 f0                	mov    eax,esi
c001b08e:	5b                   	pop    ebx
c001b08f:	5e                   	pop    esi
c001b090:	5f                   	pop    edi
c001b091:	c3                   	ret    

c001b092 <Reg::readBool(char*, char*, bool*)>:
c001b092:	83 ec 20             	sub    esp,0x20
c001b095:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b099:	50                   	push   eax
c001b09a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0a2:	e8 7f fe ff ff       	call   c001af26 <Reg::readInt(char*, char*, int*)>
c001b0a7:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b0ac:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b0b0:	0f 95 02             	setne  BYTE PTR [edx]
c001b0b3:	83 c4 2c             	add    esp,0x2c
c001b0b6:	c3                   	ret    

c001b0b7 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b0b7:	53                   	push   ebx
c001b0b8:	83 ec 1c             	sub    esp,0x1c
c001b0bb:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b0bf:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b0c3:	50                   	push   eax
c001b0c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0cc:	e8 c1 ff ff ff       	call   c001b092 <Reg::readBool(char*, char*, bool*)>
c001b0d1:	83 c4 10             	add    esp,0x10
c001b0d4:	84 c0                	test   al,al
c001b0d6:	74 04                	je     c001b0dc <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b0d8:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b0dc:	88 d8                	mov    al,bl
c001b0de:	83 c4 18             	add    esp,0x18
c001b0e1:	5b                   	pop    ebx
c001b0e2:	c3                   	ret    

c001b0e3 <Reg::readIntWithDefault(char*, char*, int)>:
c001b0e3:	53                   	push   ebx
c001b0e4:	83 ec 1c             	sub    esp,0x1c
c001b0e7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b0eb:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b0ef:	50                   	push   eax
c001b0f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0f8:	e8 29 fe ff ff       	call   c001af26 <Reg::readInt(char*, char*, int*)>
c001b0fd:	83 c4 10             	add    esp,0x10
c001b100:	84 c0                	test   al,al
c001b102:	74 04                	je     c001b108 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b104:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b108:	89 d8                	mov    eax,ebx
c001b10a:	83 c4 18             	add    esp,0x18
c001b10d:	5b                   	pop    ebx
c001b10e:	c3                   	ret    

c001b10f <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b10f:	57                   	push   edi
c001b110:	56                   	push   esi
c001b111:	56                   	push   esi
c001b112:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b116:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b11a:	56                   	push   esi
c001b11b:	57                   	push   edi
c001b11c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b124:	e8 e8 fe ff ff       	call   c001b011 <Reg::readString(char*, char*, char*, int)>
c001b129:	83 c4 10             	add    esp,0x10
c001b12c:	84 c0                	test   al,al
c001b12e:	75 1a                	jne    c001b14a <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b130:	51                   	push   ecx
c001b131:	56                   	push   esi
c001b132:	6a 00                	push   0x0
c001b134:	57                   	push   edi
c001b135:	e8 16 56 fe ff       	call   c0000750 <memset>
c001b13a:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b13d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b141:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b143:	83 c4 10             	add    esp,0x10
c001b146:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b14a:	89 f8                	mov    eax,edi
c001b14c:	5a                   	pop    edx
c001b14d:	5e                   	pop    esi
c001b14e:	5f                   	pop    edi
c001b14f:	c3                   	ret    

c001b150 <Sys::eject(regs*)>:
c001b150:	83 ec 0c             	sub    esp,0xc
c001b153:	83 ca ff             	or     edx,0xffffffff
c001b156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b15a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b15d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b162:	83 e9 41             	sub    ecx,0x41
c001b165:	83 f9 19             	cmp    ecx,0x19
c001b168:	77 18                	ja     c001b182 <Sys::eject(regs*)+0x32>
c001b16a:	8b 0c 8d 20 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd09e0]
c001b171:	85 c9                	test   ecx,ecx
c001b173:	74 0d                	je     c001b182 <Sys::eject(regs*)+0x32>
c001b175:	83 ec 0c             	sub    esp,0xc
c001b178:	51                   	push   ecx
c001b179:	e8 8c b0 ff ff       	call   c001620a <LogicalDisk::eject()>
c001b17e:	83 c4 10             	add    esp,0x10
c001b181:	99                   	cdq    
c001b182:	83 c4 0c             	add    esp,0xc
c001b185:	c3                   	ret    

c001b186 <Sys::exit(regs*)>:
c001b186:	83 ec 18             	sub    esp,0x18
c001b189:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b18d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b190:	e8 7e 38 00 00       	call   c001ea13 <terminateTask(int)>
c001b195:	83 c8 ff             	or     eax,0xffffffff
c001b198:	83 c4 1c             	add    esp,0x1c
c001b19b:	89 c2                	mov    edx,eax
c001b19d:	c3                   	ret    

c001b19e <Sys::getCwd(regs*)>:
c001b19e:	83 ec 10             	sub    esp,0x10
c001b1a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b1a5:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b1a8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b1ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1b0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b1b3:	e8 a0 7a ff ff       	call   c0012c58 <Fs::getcwd(Process*, char*, int)>
c001b1b8:	83 c4 1c             	add    esp,0x1c
c001b1bb:	99                   	cdq    
c001b1bc:	c3                   	ret    

c001b1bd <Sys::getPID(regs*)>:
c001b1bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1c5:	8b 00                	mov    eax,DWORD PTR [eax]
c001b1c7:	99                   	cdq    
c001b1c8:	c3                   	ret    

c001b1c9 <Sys::getRAMData(regs*)>:
c001b1c9:	8b 0d 74 f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f074
c001b1cf:	6b 05 70 f0 02 c0 64 	imul   eax,DWORD PTR ds:0xc002f070,0x64
c001b1d6:	99                   	cdq    
c001b1d7:	f7 f9                	idiv   ecx
c001b1d9:	c1 e0 18             	shl    eax,0x18
c001b1dc:	09 c8                	or     eax,ecx
c001b1de:	99                   	cdq    
c001b1df:	c3                   	ret    

c001b1e0 <Sys::getVGAPtr(regs*)>:
c001b1e0:	55                   	push   ebp
c001b1e1:	57                   	push   edi
c001b1e2:	56                   	push   esi
c001b1e3:	53                   	push   ebx
c001b1e4:	83 ec 18             	sub    esp,0x18
c001b1e7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b1eb:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b1ee:	e8 02 33 00 00       	call   c001e4f5 <Thr::processFromPID(int)>
c001b1f3:	83 c4 10             	add    esp,0x10
c001b1f6:	89 c1                	mov    ecx,eax
c001b1f8:	b8 01 00 00 00       	mov    eax,0x1
c001b1fd:	85 c9                	test   ecx,ecx
c001b1ff:	74 59                	je     c001b25a <Sys::getVGAPtr(regs*)+0x7a>
c001b201:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b207:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b20b:	74 0c                	je     c001b219 <Sys::getVGAPtr(regs*)+0x39>
c001b20d:	83 ec 0c             	sub    esp,0xc
c001b210:	53                   	push   ebx
c001b211:	e8 04 55 ff ff       	call   c001071a <setActiveTerminal(VgaText*)>
c001b216:	83 c4 10             	add    esp,0x10
c001b219:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b21c:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b21f:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b224:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b226:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b229:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b22c:	81 c3 82 00 00 00    	add    ebx,0x82
c001b232:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b238:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b23b:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b23e:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b244:	50                   	push   eax
c001b245:	50                   	push   eax
c001b246:	53                   	push   ebx
c001b247:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b24a:	05 a8 0f 00 00       	add    eax,0xfa8
c001b24f:	50                   	push   eax
c001b250:	e8 b7 55 fe ff       	call   c000080c <strcpy>
c001b255:	83 c4 10             	add    esp,0x10
c001b258:	31 c0                	xor    eax,eax
c001b25a:	83 c4 0c             	add    esp,0xc
c001b25d:	31 d2                	xor    edx,edx
c001b25f:	5b                   	pop    ebx
c001b260:	5e                   	pop    esi
c001b261:	5f                   	pop    edi
c001b262:	5d                   	pop    ebp
c001b263:	c3                   	ret    

c001b264 <Sys::loadDLL(regs*)>:
c001b264:	56                   	push   esi
c001b265:	53                   	push   ebx
c001b266:	31 d2                	xor    edx,edx
c001b268:	51                   	push   ecx
c001b269:	b8 01 00 00 00       	mov    eax,0x1
c001b26e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b272:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b276:	0f 84 8c 00 00 00    	je     c001b308 <Sys::loadDLL(regs*)+0xa4>
c001b27c:	83 ec 0c             	sub    esp,0xc
c001b27f:	68 14 01 00 00       	push   0x114
c001b284:	e8 03 46 ff ff       	call   c000f88c <malloc>
c001b289:	83 c4 0c             	add    esp,0xc
c001b28c:	89 c3                	mov    ebx,eax
c001b28e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b293:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b296:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b299:	53                   	push   ebx
c001b29a:	e8 b7 7b ff ff       	call   c0012e56 <File::File(char const*, Process*)>
c001b29f:	83 c4 10             	add    esp,0x10
c001b2a2:	31 d2                	xor    edx,edx
c001b2a4:	b8 02 00 00 00       	mov    eax,0x2
c001b2a9:	85 db                	test   ebx,ebx
c001b2ab:	74 5b                	je     c001b308 <Sys::loadDLL(regs*)+0xa4>
c001b2ad:	83 ec 0c             	sub    esp,0xc
c001b2b0:	53                   	push   ebx
c001b2b1:	e8 72 7e ff ff       	call   c0013128 <File::exists()>
c001b2b6:	83 c4 10             	add    esp,0x10
c001b2b9:	84 c0                	test   al,al
c001b2bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2bd:	75 11                	jne    c001b2d0 <Sys::loadDLL(regs*)+0x6c>
c001b2bf:	83 ec 0c             	sub    esp,0xc
c001b2c2:	53                   	push   ebx
c001b2c3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2c6:	83 c4 10             	add    esp,0x10
c001b2c9:	b8 03 00 00 00       	mov    eax,0x3
c001b2ce:	eb 36                	jmp    c001b306 <Sys::loadDLL(regs*)+0xa2>
c001b2d0:	83 ec 0c             	sub    esp,0xc
c001b2d3:	53                   	push   ebx
c001b2d4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2d7:	58                   	pop    eax
c001b2d8:	5a                   	pop    edx
c001b2d9:	6a 00                	push   0x0
c001b2db:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b2de:	e8 1e 24 00 00       	call   c001d701 <Thr::loadDLL(char const*, bool)>
c001b2e3:	83 c4 10             	add    esp,0x10
c001b2e6:	89 c1                	mov    ecx,eax
c001b2e8:	31 d2                	xor    edx,edx
c001b2ea:	b8 04 00 00 00       	mov    eax,0x4
c001b2ef:	85 c9                	test   ecx,ecx
c001b2f1:	74 15                	je     c001b308 <Sys::loadDLL(regs*)+0xa4>
c001b2f3:	53                   	push   ebx
c001b2f4:	53                   	push   ebx
c001b2f5:	ff 35 28 f0 02 c0    	push   DWORD PTR ds:0xc002f028
c001b2fb:	51                   	push   ecx
c001b2fc:	e8 2b 26 00 00       	call   c001d92c <Thr::executeDLL(unsigned long, void*)>
c001b301:	83 c4 10             	add    esp,0x10
c001b304:	31 c0                	xor    eax,eax
c001b306:	31 d2                	xor    edx,edx
c001b308:	59                   	pop    ecx
c001b309:	5b                   	pop    ebx
c001b30a:	5e                   	pop    esi
c001b30b:	c3                   	ret    

c001b30c <Sys::read(regs*)>:
c001b30c:	57                   	push   edi
c001b30d:	56                   	push   esi
c001b30e:	53                   	push   ebx
c001b30f:	83 ec 10             	sub    esp,0x10
c001b312:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b316:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b319:	83 f8 02             	cmp    eax,0x2
c001b31c:	77 10                	ja     c001b32e <Sys::read(regs*)+0x22>
c001b31e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b323:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b326:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b32c:	eb 0e                	jmp    c001b33c <Sys::read(regs*)+0x30>
c001b32e:	83 ec 0c             	sub    esp,0xc
c001b331:	50                   	push   eax
c001b332:	e8 64 60 ff ff       	call   c001139b <getFromFileDescriptor(int)>
c001b337:	83 c4 10             	add    esp,0x10
c001b33a:	89 c1                	mov    ecx,eax
c001b33c:	83 c8 ff             	or     eax,0xffffffff
c001b33f:	85 c9                	test   ecx,ecx
c001b341:	89 c2                	mov    edx,eax
c001b343:	74 28                	je     c001b36d <Sys::read(regs*)+0x61>
c001b345:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b34d:	31 ff                	xor    edi,edi
c001b34f:	83 ec 0c             	sub    esp,0xc
c001b352:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b354:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b358:	52                   	push   edx
c001b359:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b35c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b35f:	57                   	push   edi
c001b360:	56                   	push   esi
c001b361:	51                   	push   ecx
c001b362:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b365:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b369:	83 c4 20             	add    esp,0x20
c001b36c:	99                   	cdq    
c001b36d:	83 c4 10             	add    esp,0x10
c001b370:	5b                   	pop    ebx
c001b371:	5e                   	pop    esi
c001b372:	5f                   	pop    edi
c001b373:	c3                   	ret    

c001b374 <Sys::sbrk(regs*)>:
c001b374:	56                   	push   esi
c001b375:	53                   	push   ebx
c001b376:	50                   	push   eax
c001b377:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b37c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b380:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b383:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b386:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b38c:	85 db                	test   ebx,ebx
c001b38e:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b391:	74 02                	je     c001b395 <Sys::sbrk(regs*)+0x21>
c001b393:	79 06                	jns    c001b39b <Sys::sbrk(regs*)+0x27>
c001b395:	89 f0                	mov    eax,esi
c001b397:	31 d2                	xor    edx,edx
c001b399:	eb 2a                	jmp    c001b3c5 <Sys::sbrk(regs*)+0x51>
c001b39b:	83 c8 ff             	or     eax,0xffffffff
c001b39e:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b3a4:	89 c2                	mov    edx,eax
c001b3a6:	77 1d                	ja     c001b3c5 <Sys::sbrk(regs*)+0x51>
c001b3a8:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b3ae:	50                   	push   eax
c001b3af:	c1 ea 0c             	shr    edx,0xc
c001b3b2:	68 07 0c 00 00       	push   0xc07
c001b3b7:	52                   	push   edx
c001b3b8:	51                   	push   ecx
c001b3b9:	e8 6c 6a ff ff       	call   c0011e2a <VAS::allocatePages(int, int)>
c001b3be:	89 f0                	mov    eax,esi
c001b3c0:	31 d2                	xor    edx,edx
c001b3c2:	83 c4 10             	add    esp,0x10
c001b3c5:	59                   	pop    ecx
c001b3c6:	5b                   	pop    ebx
c001b3c7:	5e                   	pop    esi
c001b3c8:	c3                   	ret    

c001b3c9 <Sys::setCwd(regs*)>:
c001b3c9:	83 ec 14             	sub    esp,0x14
c001b3cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b3d0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b3d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3d8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3db:	e8 e7 7d ff ff       	call   c00131c7 <Fs::setcwd(Process*, char*)>
c001b3e0:	83 c4 1c             	add    esp,0x1c
c001b3e3:	99                   	cdq    
c001b3e4:	c3                   	ret    

c001b3e5 <Sys::setTime(regs*)>:
c001b3e5:	55                   	push   ebp
c001b3e6:	31 d2                	xor    edx,edx
c001b3e8:	57                   	push   edi
c001b3e9:	bf 18 00 00 00       	mov    edi,0x18
c001b3ee:	56                   	push   esi
c001b3ef:	53                   	push   ebx
c001b3f0:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b3f5:	83 ec 30             	sub    esp,0x30
c001b3f8:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b3fc:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b3ff:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b402:	f7 f3                	div    ebx
c001b404:	89 d6                	mov    esi,edx
c001b406:	31 d2                	xor    edx,edx
c001b408:	f7 f3                	div    ebx
c001b40a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b40d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b411:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b416:	31 d2                	xor    edx,edx
c001b418:	f7 f3                	div    ebx
c001b41a:	31 d2                	xor    edx,edx
c001b41c:	bb 0c 00 00 00       	mov    ebx,0xc
c001b421:	f7 f7                	div    edi
c001b423:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b426:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b42a:	0f b7 cd             	movzx  ecx,bp
c001b42d:	56                   	push   esi
c001b42e:	89 c7                	mov    edi,eax
c001b430:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b434:	c1 e6 10             	shl    esi,0x10
c001b437:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b43b:	83 e7 1f             	and    edi,0x1f
c001b43e:	51                   	push   ecx
c001b43f:	47                   	inc    edi
c001b440:	c1 e8 05             	shr    eax,0x5
c001b443:	31 d2                	xor    edx,edx
c001b445:	f7 f3                	div    ebx
c001b447:	31 db                	xor    ebx,ebx
c001b449:	52                   	push   edx
c001b44a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b44e:	57                   	push   edi
c001b44f:	68 c9 c6 02 c0       	push   0xc002c6c9
c001b454:	e8 9e 74 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001b459:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b45d:	89 f8                	mov    eax,edi
c001b45f:	31 c9                	xor    ecx,ecx
c001b461:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b465:	88 c1                	mov    cl,al
c001b467:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b46d:	88 d5                	mov    ch,dl
c001b46f:	c1 e0 10             	shl    eax,0x10
c001b472:	0f b7 d1             	movzx  edx,cx
c001b475:	09 c2                	or     edx,eax
c001b477:	89 d8                	mov    eax,ebx
c001b479:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b47e:	09 f0                	or     eax,esi
c001b480:	89 c3                	mov    ebx,eax
c001b482:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b486:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b48a:	83 c4 18             	add    esp,0x18
c001b48d:	53                   	push   ebx
c001b48e:	52                   	push   edx
c001b48f:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b493:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b497:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b49b:	e8 49 84 ff ff       	call   c00138e9 <datetimeToSeconds(datetime_t)>
c001b4a0:	83 c4 0c             	add    esp,0xc
c001b4a3:	52                   	push   edx
c001b4a4:	50                   	push   eax
c001b4a5:	56                   	push   esi
c001b4a6:	e8 c5 85 ff ff       	call   c0013a70 <secondsToDatetime(unsigned long long)>
c001b4ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b4af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b4b3:	51                   	push   ecx
c001b4b4:	89 d6                	mov    esi,edx
c001b4b6:	51                   	push   ecx
c001b4b7:	c1 ee 10             	shr    esi,0x10
c001b4ba:	89 f3                	mov    ebx,esi
c001b4bc:	0f b6 f3             	movzx  esi,bl
c001b4bf:	56                   	push   esi
c001b4c0:	0f b6 f6             	movzx  esi,dh
c001b4c3:	0f b6 d2             	movzx  edx,dl
c001b4c6:	56                   	push   esi
c001b4c7:	52                   	push   edx
c001b4c8:	89 c2                	mov    edx,eax
c001b4ca:	c1 ea 10             	shr    edx,0x10
c001b4cd:	52                   	push   edx
c001b4ce:	0f b6 d4             	movzx  edx,ah
c001b4d1:	0f b6 c0             	movzx  eax,al
c001b4d4:	52                   	push   edx
c001b4d5:	50                   	push   eax
c001b4d6:	68 e5 c6 02 c0       	push   0xc002c6e5
c001b4db:	e8 17 74 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001b4e0:	83 c4 2c             	add    esp,0x2c
c001b4e3:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001b4e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b4ec:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b4f0:	53                   	push   ebx
c001b4f1:	51                   	push   ecx
c001b4f2:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b4f8:	e8 13 85 ff ff       	call   c0013a10 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b4fd:	83 f0 01             	xor    eax,0x1
c001b500:	31 d2                	xor    edx,edx
c001b502:	0f b6 c0             	movzx  eax,al
c001b505:	83 c4 3c             	add    esp,0x3c
c001b508:	5b                   	pop    ebx
c001b509:	5e                   	pop    esi
c001b50a:	5f                   	pop    edi
c001b50b:	5d                   	pop    ebp
c001b50c:	c3                   	ret    

c001b50d <Sys::timezone(regs*)>:
c001b50d:	53                   	push   ebx
c001b50e:	83 ec 08             	sub    esp,0x8
c001b511:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b515:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b519:	75 17                	jne    c001b532 <Sys::timezone(regs*)+0x25>
c001b51b:	83 ec 0c             	sub    esp,0xc
c001b51e:	68 01 c7 02 c0       	push   0xc002c701
c001b523:	e8 cf 73 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001b528:	83 c8 ff             	or     eax,0xffffffff
c001b52b:	83 c4 10             	add    esp,0x10
c001b52e:	89 c2                	mov    edx,eax
c001b530:	eb 20                	jmp    c001b552 <Sys::timezone(regs*)+0x45>
c001b532:	83 ec 0c             	sub    esp,0xc
c001b535:	68 39 c7 02 c0       	push   0xc002c739
c001b53a:	e8 b8 73 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001b53f:	58                   	pop    eax
c001b540:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b543:	e8 2a 82 ff ff       	call   c0013772 <User::loadClockSettings(int)>
c001b548:	83 c4 10             	add    esp,0x10
c001b54b:	b8 01 00 00 00       	mov    eax,0x1
c001b550:	31 d2                	xor    edx,edx
c001b552:	83 c4 08             	add    esp,0x8
c001b555:	5b                   	pop    ebx
c001b556:	c3                   	ret    

c001b557 <Sys::write(regs*)>:
c001b557:	57                   	push   edi
c001b558:	56                   	push   esi
c001b559:	53                   	push   ebx
c001b55a:	83 ec 10             	sub    esp,0x10
c001b55d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b561:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b564:	83 f8 02             	cmp    eax,0x2
c001b567:	77 10                	ja     c001b579 <Sys::write(regs*)+0x22>
c001b569:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b56e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b571:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b577:	eb 0e                	jmp    c001b587 <Sys::write(regs*)+0x30>
c001b579:	83 ec 0c             	sub    esp,0xc
c001b57c:	50                   	push   eax
c001b57d:	e8 19 5e ff ff       	call   c001139b <getFromFileDescriptor(int)>
c001b582:	83 c4 10             	add    esp,0x10
c001b585:	89 c1                	mov    ecx,eax
c001b587:	83 c8 ff             	or     eax,0xffffffff
c001b58a:	85 c9                	test   ecx,ecx
c001b58c:	89 c2                	mov    edx,eax
c001b58e:	74 28                	je     c001b5b8 <Sys::write(regs*)+0x61>
c001b590:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b598:	31 ff                	xor    edi,edi
c001b59a:	83 ec 0c             	sub    esp,0xc
c001b59d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b59f:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b5a3:	52                   	push   edx
c001b5a4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b5a7:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b5aa:	57                   	push   edi
c001b5ab:	56                   	push   esi
c001b5ac:	51                   	push   ecx
c001b5ad:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b5b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b5b4:	83 c4 20             	add    esp,0x20
c001b5b7:	99                   	cdq    
c001b5b8:	83 c4 10             	add    esp,0x10
c001b5bb:	5b                   	pop    ebx
c001b5bc:	5e                   	pop    esi
c001b5bd:	5f                   	pop    edi
c001b5be:	c3                   	ret    

c001b5bf <Sys::wsbe(regs*)>:
c001b5bf:	57                   	push   edi
c001b5c0:	b9 0b 00 00 00       	mov    ecx,0xb
c001b5c5:	56                   	push   esi
c001b5c6:	be 78 c7 02 c0       	mov    esi,0xc002c778
c001b5cb:	53                   	push   ebx
c001b5cc:	83 ec 30             	sub    esp,0x30
c001b5cf:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b5d3:	fc                   	cld    
c001b5d4:	83 ec 0c             	sub    esp,0xc
c001b5d7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b5d9:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b5dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5e2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5e5:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b5eb:	8b 06                	mov    eax,DWORD PTR [esi]
c001b5ed:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b5f0:	57                   	push   edi
c001b5f1:	e8 76 51 fe ff       	call   c000076c <strlen>
c001b5f6:	5a                   	pop    edx
c001b5f7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b5fb:	52                   	push   edx
c001b5fc:	31 d2                	xor    edx,edx
c001b5fe:	57                   	push   edi
c001b5ff:	52                   	push   edx
c001b600:	50                   	push   eax
c001b601:	56                   	push   esi
c001b602:	ff d3                	call   ebx
c001b604:	83 c4 14             	add    esp,0x14
c001b607:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b60b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b60e:	e8 00 34 00 00       	call   c001ea13 <terminateTask(int)>
c001b613:	83 c4 40             	add    esp,0x40
c001b616:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b61b:	5b                   	pop    ebx
c001b61c:	31 d2                	xor    edx,edx
c001b61e:	5e                   	pop    esi
c001b61f:	5f                   	pop    edi
c001b620:	c3                   	ret    

c001b621 <Sys::yield(regs*)>:
c001b621:	57                   	push   edi
c001b622:	56                   	push   esi
c001b623:	53                   	push   ebx
c001b624:	fa                   	cli    
c001b625:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001b62b:	e8 b0 2a 00 00       	call   c001e0e0 <schedule()>
c001b630:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001b635:	48                   	dec    eax
c001b636:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001b63b:	75 01                	jne    c001b63e <Sys::yield(regs*)+0x1d>
c001b63d:	fb                   	sti    
c001b63e:	8b 35 90 f6 02 c0    	mov    esi,DWORD PTR ds:0xc002f690
c001b644:	8b 3d 94 f6 02 c0    	mov    edi,DWORD PTR ds:0xc002f694
c001b64a:	89 f0                	mov    eax,esi
c001b64c:	89 fb                	mov    ebx,edi
c001b64e:	89 f1                	mov    ecx,esi
c001b650:	c1 e0 07             	shl    eax,0x7
c001b653:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b657:	25 80 30 0f 00       	and    eax,0xf3080
c001b65c:	c1 eb 17             	shr    ebx,0x17
c001b65f:	31 c8                	xor    eax,ecx
c001b661:	89 da                	mov    edx,ebx
c001b663:	5b                   	pop    ebx
c001b664:	5e                   	pop    esi
c001b665:	5f                   	pop    edi
c001b666:	c3                   	ret    

c001b667 <sysCallSeekDir(regs*)>:
c001b667:	31 c0                	xor    eax,eax
c001b669:	31 d2                	xor    edx,edx
c001b66b:	c3                   	ret    

c001b66c <sysCallTellDir(regs*)>:
c001b66c:	31 c0                	xor    eax,eax
c001b66e:	31 d2                	xor    edx,edx
c001b670:	c3                   	ret    

c001b671 <sysCallVerify(regs*)>:
c001b671:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b675:	31 d2                	xor    edx,edx
c001b677:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b67a:	c3                   	ret    

c001b67b <sysFormatDisk(regs*)>:
c001b67b:	56                   	push   esi
c001b67c:	53                   	push   ebx
c001b67d:	53                   	push   ebx
c001b67e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b682:	8b 1d 94 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f194
c001b688:	eb 25                	jmp    c001b6af <sysFormatDisk(regs*)+0x34>
c001b68a:	83 ec 0c             	sub    esp,0xc
c001b68d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b690:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b692:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b695:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b698:	50                   	push   eax
c001b699:	ff 34 85 20 f6 02 c0 	push   DWORD PTR [eax*4-0x3ffd09e0]
c001b6a0:	53                   	push   ebx
c001b6a1:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b6a4:	83 c4 20             	add    esp,0x20
c001b6a7:	83 f8 08             	cmp    eax,0x8
c001b6aa:	75 12                	jne    c001b6be <sysFormatDisk(regs*)+0x43>
c001b6ac:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b6af:	85 db                	test   ebx,ebx
c001b6b1:	75 d7                	jne    c001b68a <sysFormatDisk(regs*)+0xf>
c001b6b3:	59                   	pop    ecx
c001b6b4:	b8 03 00 00 00       	mov    eax,0x3
c001b6b9:	31 d2                	xor    edx,edx
c001b6bb:	5b                   	pop    ebx
c001b6bc:	5e                   	pop    esi
c001b6bd:	c3                   	ret    
c001b6be:	85 c0                	test   eax,eax
c001b6c0:	74 1b                	je     c001b6dd <sysFormatDisk(regs*)+0x62>
c001b6c2:	83 f8 09             	cmp    eax,0x9
c001b6c5:	74 0b                	je     c001b6d2 <sysFormatDisk(regs*)+0x57>
c001b6c7:	59                   	pop    ecx
c001b6c8:	b8 02 00 00 00       	mov    eax,0x2
c001b6cd:	31 d2                	xor    edx,edx
c001b6cf:	5b                   	pop    ebx
c001b6d0:	5e                   	pop    esi
c001b6d1:	c3                   	ret    
c001b6d2:	59                   	pop    ecx
c001b6d3:	b8 01 00 00 00       	mov    eax,0x1
c001b6d8:	31 d2                	xor    edx,edx
c001b6da:	5b                   	pop    ebx
c001b6db:	5e                   	pop    esi
c001b6dc:	c3                   	ret    
c001b6dd:	59                   	pop    ecx
c001b6de:	31 c0                	xor    eax,eax
c001b6e0:	31 d2                	xor    edx,edx
c001b6e2:	5b                   	pop    ebx
c001b6e3:	5e                   	pop    esi
c001b6e4:	c3                   	ret    

c001b6e5 <sysSetDiskVolumeLabel(regs*)>:
c001b6e5:	56                   	push   esi
c001b6e6:	53                   	push   ebx
c001b6e7:	53                   	push   ebx
c001b6e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b6ec:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b6ef:	83 f8 19             	cmp    eax,0x19
c001b6f2:	77 29                	ja     c001b71d <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6f4:	8b 0c 85 20 f6 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd09e0]
c001b6fb:	85 c9                	test   ecx,ecx
c001b6fd:	74 1e                	je     c001b71d <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6ff:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b702:	85 d2                	test   edx,edx
c001b704:	74 17                	je     c001b71d <sysSetDiskVolumeLabel(regs*)+0x38>
c001b706:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b70c:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b70e:	52                   	push   edx
c001b70f:	50                   	push   eax
c001b710:	51                   	push   ecx
c001b711:	53                   	push   ebx
c001b712:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b715:	83 c4 10             	add    esp,0x10
c001b718:	99                   	cdq    
c001b719:	59                   	pop    ecx
c001b71a:	5b                   	pop    ebx
c001b71b:	5e                   	pop    esi
c001b71c:	c3                   	ret    
c001b71d:	59                   	pop    ecx
c001b71e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b723:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b728:	5b                   	pop    ebx
c001b729:	5e                   	pop    esi
c001b72a:	c3                   	ret    

c001b72b <sysGetDiskVolumeLabel(regs*)>:
c001b72b:	57                   	push   edi
c001b72c:	56                   	push   esi
c001b72d:	53                   	push   ebx
c001b72e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b732:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b735:	83 fa 19             	cmp    edx,0x19
c001b738:	77 34                	ja     c001b76e <sysGetDiskVolumeLabel(regs*)+0x43>
c001b73a:	8b 0c 95 20 f6 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd09e0]
c001b741:	85 c9                	test   ecx,ecx
c001b743:	74 29                	je     c001b76e <sysGetDiskVolumeLabel(regs*)+0x43>
c001b745:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b748:	85 db                	test   ebx,ebx
c001b74a:	74 22                	je     c001b76e <sysGetDiskVolumeLabel(regs*)+0x43>
c001b74c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b74f:	85 c0                	test   eax,eax
c001b751:	74 1b                	je     c001b76e <sysGetDiskVolumeLabel(regs*)+0x43>
c001b753:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b759:	83 ec 0c             	sub    esp,0xc
c001b75c:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b75e:	50                   	push   eax
c001b75f:	53                   	push   ebx
c001b760:	52                   	push   edx
c001b761:	51                   	push   ecx
c001b762:	56                   	push   esi
c001b763:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b766:	83 c4 20             	add    esp,0x20
c001b769:	99                   	cdq    
c001b76a:	5b                   	pop    ebx
c001b76b:	5e                   	pop    esi
c001b76c:	5f                   	pop    edi
c001b76d:	c3                   	ret    
c001b76e:	5b                   	pop    ebx
c001b76f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b774:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b779:	5e                   	pop    esi
c001b77a:	5f                   	pop    edi
c001b77b:	c3                   	ret    

c001b77c <sysShutdown(regs*)>:
c001b77c:	83 ec 0c             	sub    esp,0xc
c001b77f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b783:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b786:	85 c0                	test   eax,eax
c001b788:	74 18                	je     c001b7a2 <sysShutdown(regs*)+0x26>
c001b78a:	83 f8 01             	cmp    eax,0x1
c001b78d:	74 38                	je     c001b7c7 <sysShutdown(regs*)+0x4b>
c001b78f:	83 f8 02             	cmp    eax,0x2
c001b792:	74 24                	je     c001b7b8 <sysShutdown(regs*)+0x3c>
c001b794:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b799:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b79e:	83 c4 0c             	add    esp,0xc
c001b7a1:	c3                   	ret    
c001b7a2:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001b7a7:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7a9:	6a 00                	push   0x0
c001b7ab:	6a 00                	push   0x0
c001b7ad:	6a 00                	push   0x0
c001b7af:	50                   	push   eax
c001b7b0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b7b3:	83 c4 10             	add    esp,0x10
c001b7b6:	eb dc                	jmp    c001b794 <sysShutdown(regs*)+0x18>
c001b7b8:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001b7bd:	8b 10                	mov    edx,DWORD PTR [eax]
c001b7bf:	6a 00                	push   0x0
c001b7c1:	6a 00                	push   0x0
c001b7c3:	6a 01                	push   0x1
c001b7c5:	eb e8                	jmp    c001b7af <sysShutdown(regs*)+0x33>
c001b7c7:	a1 c0 16 03 c0       	mov    eax,ds:0xc00316c0
c001b7cc:	85 c0                	test   eax,eax
c001b7ce:	74 02                	je     c001b7d2 <sysShutdown(regs*)+0x56>
c001b7d0:	ff d0                	call   eax
c001b7d2:	31 c0                	xor    eax,eax
c001b7d4:	31 d2                	xor    edx,edx
c001b7d6:	83 c4 0c             	add    esp,0xc
c001b7d9:	c3                   	ret    

c001b7da <sysCallRealpath(regs*)>:
c001b7da:	83 ec 0c             	sub    esp,0xc
c001b7dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7e1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b7e4:	85 d2                	test   edx,edx
c001b7e6:	74 07                	je     c001b7ef <sysCallRealpath(regs*)+0x15>
c001b7e8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b7eb:	85 c0                	test   eax,eax
c001b7ed:	75 0b                	jne    c001b7fa <sysCallRealpath(regs*)+0x20>
c001b7ef:	b8 01 00 00 00       	mov    eax,0x1
c001b7f4:	31 d2                	xor    edx,edx
c001b7f6:	83 c4 0c             	add    esp,0xc
c001b7f9:	c3                   	ret    
c001b7fa:	51                   	push   ecx
c001b7fb:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b801:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b804:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b80a:	51                   	push   ecx
c001b80b:	52                   	push   edx
c001b80c:	50                   	push   eax
c001b80d:	e8 9a 74 ff ff       	call   c0012cac <Fs::standardiseFiles(char*, char const*, char const*)>
c001b812:	83 c4 10             	add    esp,0x10
c001b815:	31 c0                	xor    eax,eax
c001b817:	31 d2                	xor    edx,edx
c001b819:	83 c4 0c             	add    esp,0xc
c001b81c:	c3                   	ret    

c001b81d <sysCallGetArgc(regs*)>:
c001b81d:	83 ec 14             	sub    esp,0x14
c001b820:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b825:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b828:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b82e:	68 a4 c7 02 c0       	push   0xc002c7a4
c001b833:	e8 bf 70 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001b838:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b83d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b840:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b846:	83 c4 1c             	add    esp,0x1c
c001b849:	99                   	cdq    
c001b84a:	c3                   	ret    

c001b84b <sysCallReadDir(regs*)>:
c001b84b:	53                   	push   ebx
c001b84c:	83 ec 18             	sub    esp,0x18
c001b84f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b853:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b856:	83 f8 02             	cmp    eax,0x2
c001b859:	76 53                	jbe    c001b8ae <sysCallReadDir(regs*)+0x63>
c001b85b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b85e:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b864:	77 4f                	ja     c001b8b5 <sysCallReadDir(regs*)+0x6a>
c001b866:	83 ec 0c             	sub    esp,0xc
c001b869:	50                   	push   eax
c001b86a:	e8 2c 5b ff ff       	call   c001139b <getFromFileDescriptor(int)>
c001b86f:	83 c4 10             	add    esp,0x10
c001b872:	85 c0                	test   eax,eax
c001b874:	74 50                	je     c001b8c6 <sysCallReadDir(regs*)+0x7b>
c001b876:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b87e:	83 ec 0c             	sub    esp,0xc
c001b881:	8b 10                	mov    edx,DWORD PTR [eax]
c001b883:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b887:	51                   	push   ecx
c001b888:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b88b:	6a 00                	push   0x0
c001b88d:	68 10 01 00 00       	push   0x110
c001b892:	50                   	push   eax
c001b893:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b896:	83 c4 20             	add    esp,0x20
c001b899:	85 c0                	test   eax,eax
c001b89b:	74 38                	je     c001b8d5 <sysCallReadDir(regs*)+0x8a>
c001b89d:	83 f8 07             	cmp    eax,0x7
c001b8a0:	74 0c                	je     c001b8ae <sysCallReadDir(regs*)+0x63>
c001b8a2:	b8 02 00 00 00       	mov    eax,0x2
c001b8a7:	31 d2                	xor    edx,edx
c001b8a9:	83 c4 18             	add    esp,0x18
c001b8ac:	5b                   	pop    ebx
c001b8ad:	c3                   	ret    
c001b8ae:	b8 01 00 00 00       	mov    eax,0x1
c001b8b3:	eb f2                	jmp    c001b8a7 <sysCallReadDir(regs*)+0x5c>
c001b8b5:	83 ec 08             	sub    esp,0x8
c001b8b8:	52                   	push   edx
c001b8b9:	68 c8 c8 02 c0       	push   0xc002c8c8
c001b8be:	e8 34 70 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001b8c3:	83 c4 10             	add    esp,0x10
c001b8c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8cb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8d0:	83 c4 18             	add    esp,0x18
c001b8d3:	5b                   	pop    ebx
c001b8d4:	c3                   	ret    
c001b8d5:	31 c0                	xor    eax,eax
c001b8d7:	eb ce                	jmp    c001b8a7 <sysCallReadDir(regs*)+0x5c>

c001b8d9 <sysCallIsATTY(regs*)>:
c001b8d9:	83 ec 0c             	sub    esp,0xc
c001b8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8e0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b8e3:	83 f8 02             	cmp    eax,0x2
c001b8e6:	76 07                	jbe    c001b8ef <sysCallIsATTY(regs*)+0x16>
c001b8e8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b8ed:	75 26                	jne    c001b915 <sysCallIsATTY(regs*)+0x3c>
c001b8ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8f4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8f7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b8fd:	85 c0                	test   eax,eax
c001b8ff:	74 24                	je     c001b925 <sysCallIsATTY(regs*)+0x4c>
c001b901:	83 ec 0c             	sub    esp,0xc
c001b904:	8b 10                	mov    edx,DWORD PTR [eax]
c001b906:	50                   	push   eax
c001b907:	ff 12                	call   DWORD PTR [edx]
c001b909:	31 d2                	xor    edx,edx
c001b90b:	0f b6 c0             	movzx  eax,al
c001b90e:	83 c4 10             	add    esp,0x10
c001b911:	83 c4 0c             	add    esp,0xc
c001b914:	c3                   	ret    
c001b915:	83 ec 0c             	sub    esp,0xc
c001b918:	50                   	push   eax
c001b919:	e8 7d 5a ff ff       	call   c001139b <getFromFileDescriptor(int)>
c001b91e:	83 c4 10             	add    esp,0x10
c001b921:	85 c0                	test   eax,eax
c001b923:	75 dc                	jne    c001b901 <sysCallIsATTY(regs*)+0x28>
c001b925:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b92a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b92f:	83 c4 0c             	add    esp,0xc
c001b932:	c3                   	ret    

c001b933 <sysCallSeek(regs*)>:
c001b933:	53                   	push   ebx
c001b934:	83 ec 08             	sub    esp,0x8
c001b937:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b93b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b93e:	83 f8 02             	cmp    eax,0x2
c001b941:	76 4a                	jbe    c001b98d <sysCallSeek(regs*)+0x5a>
c001b943:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b948:	77 32                	ja     c001b97c <sysCallSeek(regs*)+0x49>
c001b94a:	83 ec 0c             	sub    esp,0xc
c001b94d:	50                   	push   eax
c001b94e:	e8 48 5a ff ff       	call   c001139b <getFromFileDescriptor(int)>
c001b953:	83 c4 0c             	add    esp,0xc
c001b956:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b959:	31 db                	xor    ebx,ebx
c001b95b:	53                   	push   ebx
c001b95c:	51                   	push   ecx
c001b95d:	50                   	push   eax
c001b95e:	e8 15 76 ff ff       	call   c0012f78 <File::seek(unsigned long long)>
c001b963:	83 c4 10             	add    esp,0x10
c001b966:	85 c0                	test   eax,eax
c001b968:	0f 95 c0             	setne  al
c001b96b:	31 d2                	xor    edx,edx
c001b96d:	0f b6 c0             	movzx  eax,al
c001b970:	f7 d8                	neg    eax
c001b972:	83 d2 00             	adc    edx,0x0
c001b975:	83 c4 08             	add    esp,0x8
c001b978:	f7 da                	neg    edx
c001b97a:	5b                   	pop    ebx
c001b97b:	c3                   	ret    
c001b97c:	83 ec 08             	sub    esp,0x8
c001b97f:	50                   	push   eax
c001b980:	68 af c7 02 c0       	push   0xc002c7af
c001b985:	e8 6d 6f ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001b98a:	83 c4 10             	add    esp,0x10
c001b98d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b992:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b997:	83 c4 08             	add    esp,0x8
c001b99a:	5b                   	pop    ebx
c001b99b:	c3                   	ret    

c001b99c <sysCallTell(regs*)>:
c001b99c:	53                   	push   ebx
c001b99d:	83 ec 08             	sub    esp,0x8
c001b9a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9a4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9a7:	83 f8 02             	cmp    eax,0x2
c001b9aa:	76 5e                	jbe    c001ba0a <sysCallTell(regs*)+0x6e>
c001b9ac:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9b1:	77 2d                	ja     c001b9e0 <sysCallTell(regs*)+0x44>
c001b9b3:	83 ec 0c             	sub    esp,0xc
c001b9b6:	50                   	push   eax
c001b9b7:	e8 df 59 ff ff       	call   c001139b <getFromFileDescriptor(int)>
c001b9bc:	5a                   	pop    edx
c001b9bd:	59                   	pop    ecx
c001b9be:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b9c1:	50                   	push   eax
c001b9c2:	e8 07 76 ff ff       	call   c0012fce <File::tell(unsigned long long*)>
c001b9c7:	83 c4 10             	add    esp,0x10
c001b9ca:	85 c0                	test   eax,eax
c001b9cc:	0f 95 c0             	setne  al
c001b9cf:	31 d2                	xor    edx,edx
c001b9d1:	0f b6 c0             	movzx  eax,al
c001b9d4:	f7 d8                	neg    eax
c001b9d6:	83 d2 00             	adc    edx,0x0
c001b9d9:	83 c4 08             	add    esp,0x8
c001b9dc:	f7 da                	neg    edx
c001b9de:	5b                   	pop    ebx
c001b9df:	c3                   	ret    
c001b9e0:	83 ec 08             	sub    esp,0x8
c001b9e3:	50                   	push   eax
c001b9e4:	68 c9 c7 02 c0       	push   0xc002c7c9
c001b9e9:	e8 09 6f ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001b9ee:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b9f1:	83 c4 10             	add    esp,0x10
c001b9f4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b9fa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba01:	31 d2                	xor    edx,edx
c001ba03:	31 c0                	xor    eax,eax
c001ba05:	83 c4 08             	add    esp,0x8
c001ba08:	5b                   	pop    ebx
c001ba09:	c3                   	ret    
c001ba0a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba0f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba14:	83 c4 08             	add    esp,0x8
c001ba17:	5b                   	pop    ebx
c001ba18:	c3                   	ret    

c001ba19 <sysCallSize(regs*)>:
c001ba19:	53                   	push   ebx
c001ba1a:	83 ec 18             	sub    esp,0x18
c001ba1d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ba21:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba24:	83 f8 02             	cmp    eax,0x2
c001ba27:	76 64                	jbe    c001ba8d <sysCallSize(regs*)+0x74>
c001ba29:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba2e:	77 33                	ja     c001ba63 <sysCallSize(regs*)+0x4a>
c001ba30:	83 ec 0c             	sub    esp,0xc
c001ba33:	50                   	push   eax
c001ba34:	e8 62 59 ff ff       	call   c001139b <getFromFileDescriptor(int)>
c001ba39:	83 c4 0c             	add    esp,0xc
c001ba3c:	8d 54 24 13          	lea    edx,[esp+0x13]
c001ba40:	52                   	push   edx
c001ba41:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba44:	50                   	push   eax
c001ba45:	e8 1c 77 ff ff       	call   c0013166 <File::stat(unsigned long long*, bool*)>
c001ba4a:	83 c4 10             	add    esp,0x10
c001ba4d:	85 c0                	test   eax,eax
c001ba4f:	0f 95 c0             	setne  al
c001ba52:	31 d2                	xor    edx,edx
c001ba54:	0f b6 c0             	movzx  eax,al
c001ba57:	f7 d8                	neg    eax
c001ba59:	83 d2 00             	adc    edx,0x0
c001ba5c:	83 c4 18             	add    esp,0x18
c001ba5f:	f7 da                	neg    edx
c001ba61:	5b                   	pop    ebx
c001ba62:	c3                   	ret    
c001ba63:	83 ec 08             	sub    esp,0x8
c001ba66:	50                   	push   eax
c001ba67:	68 e3 c7 02 c0       	push   0xc002c7e3
c001ba6c:	e8 86 6e ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001ba71:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba74:	83 c4 10             	add    esp,0x10
c001ba77:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba7d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba84:	31 d2                	xor    edx,edx
c001ba86:	31 c0                	xor    eax,eax
c001ba88:	83 c4 18             	add    esp,0x18
c001ba8b:	5b                   	pop    ebx
c001ba8c:	c3                   	ret    
c001ba8d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba92:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba97:	83 c4 18             	add    esp,0x18
c001ba9a:	5b                   	pop    ebx
c001ba9b:	c3                   	ret    

c001ba9c <sysCallSizeFromFilename(regs*)>:
c001ba9c:	57                   	push   edi
c001ba9d:	56                   	push   esi
c001ba9e:	53                   	push   ebx
c001ba9f:	83 ec 20             	sub    esp,0x20
c001baa2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001baa6:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001baa9:	83 fb 02             	cmp    ebx,0x2
c001baac:	0f 86 99 00 00 00    	jbe    c001bb4b <sysCallSizeFromFilename(regs*)+0xaf>
c001bab2:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bab8:	77 65                	ja     c001bb1f <sysCallSizeFromFilename(regs*)+0x83>
c001baba:	83 ec 0c             	sub    esp,0xc
c001babd:	68 14 01 00 00       	push   0x114
c001bac2:	e8 c5 3d ff ff       	call   c000f88c <malloc>
c001bac7:	83 c4 0c             	add    esp,0xc
c001baca:	89 c6                	mov    esi,eax
c001bacc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bad1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bad4:	53                   	push   ebx
c001bad5:	56                   	push   esi
c001bad6:	e8 7b 73 ff ff       	call   c0012e56 <File::File(char const*, Process*)>
c001badb:	83 c4 0c             	add    esp,0xc
c001bade:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bae2:	50                   	push   eax
c001bae3:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bae6:	56                   	push   esi
c001bae7:	e8 7a 76 ff ff       	call   c0013166 <File::stat(unsigned long long*, bool*)>
c001baec:	83 c4 10             	add    esp,0x10
c001baef:	85 f6                	test   esi,esi
c001baf1:	74 14                	je     c001bb07 <sysCallSizeFromFilename(regs*)+0x6b>
c001baf3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001baf7:	8b 16                	mov    edx,DWORD PTR [esi]
c001baf9:	83 ec 0c             	sub    esp,0xc
c001bafc:	56                   	push   esi
c001bafd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb00:	83 c4 10             	add    esp,0x10
c001bb03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb07:	85 c0                	test   eax,eax
c001bb09:	0f 95 c0             	setne  al
c001bb0c:	31 d2                	xor    edx,edx
c001bb0e:	0f b6 c0             	movzx  eax,al
c001bb11:	f7 d8                	neg    eax
c001bb13:	83 d2 00             	adc    edx,0x0
c001bb16:	83 c4 20             	add    esp,0x20
c001bb19:	f7 da                	neg    edx
c001bb1b:	5b                   	pop    ebx
c001bb1c:	5e                   	pop    esi
c001bb1d:	5f                   	pop    edi
c001bb1e:	c3                   	ret    
c001bb1f:	83 ec 08             	sub    esp,0x8
c001bb22:	53                   	push   ebx
c001bb23:	68 e3 c7 02 c0       	push   0xc002c7e3
c001bb28:	e8 ca 6d ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001bb2d:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bb30:	83 c4 10             	add    esp,0x10
c001bb33:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb39:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb40:	31 d2                	xor    edx,edx
c001bb42:	83 c4 20             	add    esp,0x20
c001bb45:	31 c0                	xor    eax,eax
c001bb47:	5b                   	pop    ebx
c001bb48:	5e                   	pop    esi
c001bb49:	5f                   	pop    edi
c001bb4a:	c3                   	ret    
c001bb4b:	83 c4 20             	add    esp,0x20
c001bb4e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb53:	5b                   	pop    ebx
c001bb54:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb59:	5e                   	pop    esi
c001bb5a:	5f                   	pop    edi
c001bb5b:	c3                   	ret    

c001bb5c <sysCallClose(regs*)>:
c001bb5c:	53                   	push   ebx
c001bb5d:	83 ec 08             	sub    esp,0x8
c001bb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb64:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb67:	83 f8 02             	cmp    eax,0x2
c001bb6a:	76 50                	jbe    c001bbbc <sysCallClose(regs*)+0x60>
c001bb6c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bb71:	74 58                	je     c001bbcb <sysCallClose(regs*)+0x6f>
c001bb73:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb78:	74 60                	je     c001bbda <sysCallClose(regs*)+0x7e>
c001bb7a:	77 2f                	ja     c001bbab <sysCallClose(regs*)+0x4f>
c001bb7c:	83 ec 0c             	sub    esp,0xc
c001bb7f:	50                   	push   eax
c001bb80:	e8 16 58 ff ff       	call   c001139b <getFromFileDescriptor(int)>
c001bb85:	89 c3                	mov    ebx,eax
c001bb87:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb8a:	e8 89 73 ff ff       	call   c0012f18 <File::close()>
c001bb8f:	83 c4 10             	add    esp,0x10
c001bb92:	85 db                	test   ebx,ebx
c001bb94:	74 0c                	je     c001bba2 <sysCallClose(regs*)+0x46>
c001bb96:	83 ec 0c             	sub    esp,0xc
c001bb99:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb9b:	53                   	push   ebx
c001bb9c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bb9f:	83 c4 10             	add    esp,0x10
c001bba2:	31 c0                	xor    eax,eax
c001bba4:	31 d2                	xor    edx,edx
c001bba6:	83 c4 08             	add    esp,0x8
c001bba9:	5b                   	pop    ebx
c001bbaa:	c3                   	ret    
c001bbab:	83 ec 08             	sub    esp,0x8
c001bbae:	50                   	push   eax
c001bbaf:	68 ec c8 02 c0       	push   0xc002c8ec
c001bbb4:	e8 3e 6d ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001bbb9:	83 c4 10             	add    esp,0x10
c001bbbc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbc1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbc6:	83 c4 08             	add    esp,0x8
c001bbc9:	5b                   	pop    ebx
c001bbca:	c3                   	ret    
c001bbcb:	83 ec 0c             	sub    esp,0xc
c001bbce:	68 fe c7 02 c0       	push   0xc002c7fe
c001bbd3:	e8 1f 6d ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001bbd8:	eb c5                	jmp    c001bb9f <sysCallClose(regs*)+0x43>
c001bbda:	83 ec 0c             	sub    esp,0xc
c001bbdd:	68 0c c8 02 c0       	push   0xc002c80c
c001bbe2:	eb ef                	jmp    c001bbd3 <sysCallClose(regs*)+0x77>

c001bbe4 <sysCallOpenDir(regs*)>:
c001bbe4:	56                   	push   esi
c001bbe5:	53                   	push   ebx
c001bbe6:	53                   	push   ebx
c001bbe7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bbeb:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bbee:	85 f6                	test   esi,esi
c001bbf0:	74 59                	je     c001bc4b <sysCallOpenDir(regs*)+0x67>
c001bbf2:	83 ec 0c             	sub    esp,0xc
c001bbf5:	68 14 01 00 00       	push   0x114
c001bbfa:	e8 8d 3c ff ff       	call   c000f88c <malloc>
c001bbff:	83 c4 0c             	add    esp,0xc
c001bc02:	89 c6                	mov    esi,eax
c001bc04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc09:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc0c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc0f:	56                   	push   esi
c001bc10:	e8 ed 76 ff ff       	call   c0013302 <Directory::Directory(char const*, Process*)>
c001bc15:	83 c4 10             	add    esp,0x10
c001bc18:	85 f6                	test   esi,esi
c001bc1a:	74 2f                	je     c001bc4b <sysCallOpenDir(regs*)+0x67>
c001bc1c:	83 ec 0c             	sub    esp,0xc
c001bc1f:	56                   	push   esi
c001bc20:	e8 41 77 ff ff       	call   c0013366 <Directory::open()>
c001bc25:	83 c4 10             	add    esp,0x10
c001bc28:	85 c0                	test   eax,eax
c001bc2a:	75 1f                	jne    c001bc4b <sysCallOpenDir(regs*)+0x67>
c001bc2c:	83 ec 0c             	sub    esp,0xc
c001bc2f:	56                   	push   esi
c001bc30:	e8 71 54 ff ff       	call   c00110a6 <UnixFile::getFileDescriptor()>
c001bc35:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bc38:	83 c4 10             	add    esp,0x10
c001bc3b:	89 02                	mov    DWORD PTR [edx],eax
c001bc3d:	c1 f8 1f             	sar    eax,0x1f
c001bc40:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bc43:	31 c0                	xor    eax,eax
c001bc45:	59                   	pop    ecx
c001bc46:	31 d2                	xor    edx,edx
c001bc48:	5b                   	pop    ebx
c001bc49:	5e                   	pop    esi
c001bc4a:	c3                   	ret    
c001bc4b:	59                   	pop    ecx
c001bc4c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc51:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc56:	5b                   	pop    ebx
c001bc57:	5e                   	pop    esi
c001bc58:	c3                   	ret    

c001bc59 <sysCallCloseDir(regs*)>:
c001bc59:	53                   	push   ebx
c001bc5a:	83 ec 08             	sub    esp,0x8
c001bc5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc61:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc64:	83 f8 02             	cmp    eax,0x2
c001bc67:	76 47                	jbe    c001bcb0 <sysCallCloseDir(regs*)+0x57>
c001bc69:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc6e:	77 2f                	ja     c001bc9f <sysCallCloseDir(regs*)+0x46>
c001bc70:	83 ec 0c             	sub    esp,0xc
c001bc73:	50                   	push   eax
c001bc74:	e8 22 57 ff ff       	call   c001139b <getFromFileDescriptor(int)>
c001bc79:	89 c3                	mov    ebx,eax
c001bc7b:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc7e:	e8 3f 77 ff ff       	call   c00133c2 <Directory::close()>
c001bc83:	83 c4 10             	add    esp,0x10
c001bc86:	85 db                	test   ebx,ebx
c001bc88:	74 0c                	je     c001bc96 <sysCallCloseDir(regs*)+0x3d>
c001bc8a:	83 ec 0c             	sub    esp,0xc
c001bc8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc8f:	53                   	push   ebx
c001bc90:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc93:	83 c4 10             	add    esp,0x10
c001bc96:	31 c0                	xor    eax,eax
c001bc98:	31 d2                	xor    edx,edx
c001bc9a:	83 c4 08             	add    esp,0x8
c001bc9d:	5b                   	pop    ebx
c001bc9e:	c3                   	ret    
c001bc9f:	83 ec 08             	sub    esp,0x8
c001bca2:	50                   	push   eax
c001bca3:	68 14 c9 02 c0       	push   0xc002c914
c001bca8:	e8 4a 6c ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001bcad:	83 c4 10             	add    esp,0x10
c001bcb0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcb5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcba:	83 c4 08             	add    esp,0x8
c001bcbd:	5b                   	pop    ebx
c001bcbe:	c3                   	ret    

c001bcbf <sysCallMakeDir(regs*)>:
c001bcbf:	56                   	push   esi
c001bcc0:	53                   	push   ebx
c001bcc1:	83 ec 10             	sub    esp,0x10
c001bcc4:	68 14 01 00 00       	push   0x114
c001bcc9:	e8 be 3b ff ff       	call   c000f88c <malloc>
c001bcce:	83 c4 0c             	add    esp,0xc
c001bcd1:	89 c3                	mov    ebx,eax
c001bcd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcd8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bcdb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bcdf:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bce2:	53                   	push   ebx
c001bce3:	e8 1a 76 ff ff       	call   c0013302 <Directory::Directory(char const*, Process*)>
c001bce8:	83 c4 10             	add    esp,0x10
c001bceb:	85 db                	test   ebx,ebx
c001bced:	74 32                	je     c001bd21 <sysCallMakeDir(regs*)+0x62>
c001bcef:	83 ec 0c             	sub    esp,0xc
c001bcf2:	53                   	push   ebx
c001bcf3:	e8 4e 78 ff ff       	call   c0013546 <Directory::create()>
c001bcf8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bcfb:	89 c6                	mov    esi,eax
c001bcfd:	e8 c0 76 ff ff       	call   c00133c2 <Directory::close()>
c001bd02:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd07:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd0a:	83 c4 10             	add    esp,0x10
c001bd0d:	31 c0                	xor    eax,eax
c001bd0f:	59                   	pop    ecx
c001bd10:	85 f6                	test   esi,esi
c001bd12:	5b                   	pop    ebx
c001bd13:	0f 95 c0             	setne  al
c001bd16:	5e                   	pop    esi
c001bd17:	31 d2                	xor    edx,edx
c001bd19:	f7 d8                	neg    eax
c001bd1b:	83 d2 00             	adc    edx,0x0
c001bd1e:	f7 da                	neg    edx
c001bd20:	c3                   	ret    
c001bd21:	59                   	pop    ecx
c001bd22:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd27:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd2c:	5b                   	pop    ebx
c001bd2d:	5e                   	pop    esi
c001bd2e:	c3                   	ret    

c001bd2f <sysCallWait(regs*)>:
c001bd2f:	83 ec 10             	sub    esp,0x10
c001bd32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bd36:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bd39:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd3c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bd3f:	e8 c8 25 00 00       	call   c001e30c <waitTask(int, int*, int)>
c001bd44:	83 c4 1c             	add    esp,0x1c
c001bd47:	99                   	cdq    
c001bd48:	c3                   	ret    

c001bd49 <sysCallNotImpl(regs*)>:
c001bd49:	83 ec 18             	sub    esp,0x18
c001bd4c:	68 1a c8 02 c0       	push   0xc002c81a
c001bd51:	e8 d7 e5 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c001bd56:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd5b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd60:	83 c4 1c             	add    esp,0x1c
c001bd63:	c3                   	ret    

c001bd64 <sysPanic(regs*)>:
c001bd64:	83 ec 18             	sub    esp,0x18
c001bd67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd6b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd6e:	e8 ba e5 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c001bd73:	c7 04 24 34 c8 02 c0 	mov    DWORD PTR [esp],0xc002c834
c001bd7a:	e8 ae e5 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c001bd7f:	b8 01 00 00 00       	mov    eax,0x1
c001bd84:	31 d2                	xor    edx,edx
c001bd86:	83 c4 1c             	add    esp,0x1c
c001bd89:	c3                   	ret    

c001bd8a <sysCallRmdir(regs*)>:
c001bd8a:	56                   	push   esi
c001bd8b:	53                   	push   ebx
c001bd8c:	83 ec 20             	sub    esp,0x20
c001bd8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bd93:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bd96:	68 14 01 00 00       	push   0x114
c001bd9b:	e8 ec 3a ff ff       	call   c000f88c <malloc>
c001bda0:	83 c4 0c             	add    esp,0xc
c001bda3:	89 c3                	mov    ebx,eax
c001bda5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdaa:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bdad:	56                   	push   esi
c001bdae:	53                   	push   ebx
c001bdaf:	e8 a2 70 ff ff       	call   c0012e56 <File::File(char const*, Process*)>
c001bdb4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdb7:	e8 76 72 ff ff       	call   c0013032 <File::unlink()>
c001bdbc:	83 c4 10             	add    esp,0x10
c001bdbf:	85 db                	test   ebx,ebx
c001bdc1:	74 14                	je     c001bdd7 <sysCallRmdir(regs*)+0x4d>
c001bdc3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bdc7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bdc9:	83 ec 0c             	sub    esp,0xc
c001bdcc:	53                   	push   ebx
c001bdcd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bdd0:	83 c4 10             	add    esp,0x10
c001bdd3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bdd7:	85 c0                	test   eax,eax
c001bdd9:	0f 95 c0             	setne  al
c001bddc:	31 d2                	xor    edx,edx
c001bdde:	0f b6 c0             	movzx  eax,al
c001bde1:	f7 d8                	neg    eax
c001bde3:	83 d2 00             	adc    edx,0x0
c001bde6:	83 c4 14             	add    esp,0x14
c001bde9:	f7 da                	neg    edx
c001bdeb:	5b                   	pop    ebx
c001bdec:	5e                   	pop    esi
c001bded:	c3                   	ret    

c001bdee <sysCallUnlink(regs*)>:
c001bdee:	56                   	push   esi
c001bdef:	53                   	push   ebx
c001bdf0:	83 ec 20             	sub    esp,0x20
c001bdf3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bdf7:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bdfa:	68 14 01 00 00       	push   0x114
c001bdff:	e8 88 3a ff ff       	call   c000f88c <malloc>
c001be04:	83 c4 0c             	add    esp,0xc
c001be07:	89 c3                	mov    ebx,eax
c001be09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be0e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be11:	56                   	push   esi
c001be12:	53                   	push   ebx
c001be13:	e8 3e 70 ff ff       	call   c0012e56 <File::File(char const*, Process*)>
c001be18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be1b:	e8 12 72 ff ff       	call   c0013032 <File::unlink()>
c001be20:	83 c4 10             	add    esp,0x10
c001be23:	85 db                	test   ebx,ebx
c001be25:	74 14                	je     c001be3b <sysCallUnlink(regs*)+0x4d>
c001be27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be2b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be2d:	83 ec 0c             	sub    esp,0xc
c001be30:	53                   	push   ebx
c001be31:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be34:	83 c4 10             	add    esp,0x10
c001be37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be3b:	85 c0                	test   eax,eax
c001be3d:	0f 95 c0             	setne  al
c001be40:	31 d2                	xor    edx,edx
c001be42:	0f b6 c0             	movzx  eax,al
c001be45:	f7 d8                	neg    eax
c001be47:	83 d2 00             	adc    edx,0x0
c001be4a:	83 c4 14             	add    esp,0x14
c001be4d:	f7 da                	neg    edx
c001be4f:	5b                   	pop    ebx
c001be50:	5e                   	pop    esi
c001be51:	c3                   	ret    

c001be52 <sysCallGetArgv(regs*)>:
c001be52:	83 ec 0c             	sub    esp,0xc
c001be55:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001be59:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001be5c:	85 c0                	test   eax,eax
c001be5e:	78 2b                	js     c001be8b <sysCallGetArgv(regs*)+0x39>
c001be60:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001be66:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001be69:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001be6f:	7d 1a                	jge    c001be8b <sysCallGetArgv(regs*)+0x39>
c001be71:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001be78:	85 c0                	test   eax,eax
c001be7a:	74 17                	je     c001be93 <sysCallGetArgv(regs*)+0x41>
c001be7c:	83 ec 08             	sub    esp,0x8
c001be7f:	50                   	push   eax
c001be80:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001be83:	e8 84 49 fe ff       	call   c000080c <strcpy>
c001be88:	83 c4 10             	add    esp,0x10
c001be8b:	31 c0                	xor    eax,eax
c001be8d:	31 d2                	xor    edx,edx
c001be8f:	83 c4 0c             	add    esp,0xc
c001be92:	c3                   	ret    
c001be93:	b8 01 00 00 00       	mov    eax,0x1
c001be98:	31 d2                	xor    edx,edx
c001be9a:	83 c4 0c             	add    esp,0xc
c001be9d:	c3                   	ret    

c001be9e <sysCallTTYName(regs*)>:
c001be9e:	56                   	push   esi
c001be9f:	53                   	push   ebx
c001bea0:	53                   	push   ebx
c001bea1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bea5:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bea8:	85 c0                	test   eax,eax
c001beaa:	74 5f                	je     c001bf0b <sysCallTTYName(regs*)+0x6d>
c001beac:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001beaf:	83 f8 02             	cmp    eax,0x2
c001beb2:	77 3e                	ja     c001bef2 <sysCallTTYName(regs*)+0x54>
c001beb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001beb9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bebc:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bec2:	85 db                	test   ebx,ebx
c001bec4:	74 45                	je     c001bf0b <sysCallTTYName(regs*)+0x6d>
c001bec6:	83 ec 0c             	sub    esp,0xc
c001bec9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001becb:	53                   	push   ebx
c001becc:	ff 10                	call   DWORD PTR [eax]
c001bece:	83 c4 10             	add    esp,0x10
c001bed1:	84 c0                	test   al,al
c001bed3:	74 41                	je     c001bf16 <sysCallTTYName(regs*)+0x78>
c001bed5:	83 ec 08             	sub    esp,0x8
c001bed8:	81 c3 82 00 00 00    	add    ebx,0x82
c001bede:	53                   	push   ebx
c001bedf:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bee2:	e8 25 49 fe ff       	call   c000080c <strcpy>
c001bee7:	83 c4 10             	add    esp,0x10
c001beea:	31 c0                	xor    eax,eax
c001beec:	59                   	pop    ecx
c001beed:	31 d2                	xor    edx,edx
c001beef:	5b                   	pop    ebx
c001bef0:	5e                   	pop    esi
c001bef1:	c3                   	ret    
c001bef2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bef7:	74 bb                	je     c001beb4 <sysCallTTYName(regs*)+0x16>
c001bef9:	83 ec 0c             	sub    esp,0xc
c001befc:	50                   	push   eax
c001befd:	e8 99 54 ff ff       	call   c001139b <getFromFileDescriptor(int)>
c001bf02:	83 c4 10             	add    esp,0x10
c001bf05:	89 c3                	mov    ebx,eax
c001bf07:	85 db                	test   ebx,ebx
c001bf09:	75 bb                	jne    c001bec6 <sysCallTTYName(regs*)+0x28>
c001bf0b:	59                   	pop    ecx
c001bf0c:	b8 01 00 00 00       	mov    eax,0x1
c001bf11:	31 d2                	xor    edx,edx
c001bf13:	5b                   	pop    ebx
c001bf14:	5e                   	pop    esi
c001bf15:	c3                   	ret    
c001bf16:	59                   	pop    ecx
c001bf17:	b8 02 00 00 00       	mov    eax,0x2
c001bf1c:	31 d2                	xor    edx,edx
c001bf1e:	5b                   	pop    ebx
c001bf1f:	5e                   	pop    esi
c001bf20:	c3                   	ret    

c001bf21 <sysCallUSleep(regs*)>:
c001bf21:	83 ec 14             	sub    esp,0x14
c001bf24:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bf29:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bf2d:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bf34:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bf37:	01 ca                	add    edx,ecx
c001bf39:	52                   	push   edx
c001bf3a:	50                   	push   eax
c001bf3b:	e8 a3 24 00 00       	call   c001e3e3 <nanoSleep(unsigned long long)>
c001bf40:	31 c0                	xor    eax,eax
c001bf42:	31 d2                	xor    edx,edx
c001bf44:	83 c4 1c             	add    esp,0x1c
c001bf47:	c3                   	ret    

c001bf48 <sysCallSpawn(regs*)>:
c001bf48:	56                   	push   esi
c001bf49:	53                   	push   ebx
c001bf4a:	50                   	push   eax
c001bf4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf4f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bf52:	85 c0                	test   eax,eax
c001bf54:	75 08                	jne    c001bf5e <sysCallSpawn(regs*)+0x16>
c001bf56:	59                   	pop    ecx
c001bf57:	31 c0                	xor    eax,eax
c001bf59:	31 d2                	xor    edx,edx
c001bf5b:	5b                   	pop    ebx
c001bf5c:	5e                   	pop    esi
c001bf5d:	c3                   	ret    
c001bf5e:	83 ec 08             	sub    esp,0x8
c001bf61:	50                   	push   eax
c001bf62:	68 43 c8 02 c0       	push   0xc002c843
c001bf67:	e8 8b 69 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001bf6c:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001bf73:	e8 14 39 ff ff       	call   c000f88c <malloc>
c001bf78:	83 c4 10             	add    esp,0x10
c001bf7b:	89 c6                	mov    esi,eax
c001bf7d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bf80:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bf83:	85 c0                	test   eax,eax
c001bf85:	75 32                	jne    c001bfb9 <sysCallSpawn(regs*)+0x71>
c001bf87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf8c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf8f:	52                   	push   edx
c001bf90:	50                   	push   eax
c001bf91:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf94:	56                   	push   esi
c001bf95:	e8 26 1b 00 00       	call   c001dac0 <Process::Process(char const*, Process*, char**)>
c001bf9a:	83 c4 10             	add    esp,0x10
c001bf9d:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bfa4:	75 b0                	jne    c001bf56 <sysCallSpawn(regs*)+0xe>
c001bfa6:	83 ec 0c             	sub    esp,0xc
c001bfa9:	56                   	push   esi
c001bfaa:	e8 f3 1f 00 00       	call   c001dfa2 <Process::createUserThread()>
c001bfaf:	8b 06                	mov    eax,DWORD PTR [esi]
c001bfb1:	83 c4 10             	add    esp,0x10
c001bfb4:	99                   	cdq    
c001bfb5:	59                   	pop    ecx
c001bfb6:	5b                   	pop    ebx
c001bfb7:	5e                   	pop    esi
c001bfb8:	c3                   	ret    
c001bfb9:	31 c0                	xor    eax,eax
c001bfbb:	eb d2                	jmp    c001bf8f <sysCallSpawn(regs*)+0x47>

c001bfbd <sysCallGetEnv(regs*)>:
c001bfbd:	55                   	push   ebp
c001bfbe:	57                   	push   edi
c001bfbf:	56                   	push   esi
c001bfc0:	53                   	push   ebx
c001bfc1:	83 ec 28             	sub    esp,0x28
c001bfc4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001bfc8:	68 51 c8 02 c0       	push   0xc002c851
c001bfcd:	e8 25 69 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001bfd2:	5f                   	pop    edi
c001bfd3:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001bfd6:	5d                   	pop    ebp
c001bfd7:	53                   	push   ebx
c001bfd8:	68 7e cb 02 c0       	push   0xc002cb7e
c001bfdd:	e8 15 69 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001bfe2:	58                   	pop    eax
c001bfe3:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001bfe6:	5a                   	pop    edx
c001bfe7:	57                   	push   edi
c001bfe8:	68 5a c8 02 c0       	push   0xc002c85a
c001bfed:	e8 05 69 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001bff2:	59                   	pop    ecx
c001bff3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bff8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bffb:	e8 49 e2 ff ff       	call   c001a249 <Krnl::getProcessTotalEnvCount(Process*)>
c001c000:	5a                   	pop    edx
c001c001:	89 c5                	mov    ebp,eax
c001c003:	59                   	pop    ecx
c001c004:	50                   	push   eax
c001c005:	68 64 c8 02 c0       	push   0xc002c864
c001c00a:	e8 e8 68 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001c00f:	83 c4 10             	add    esp,0x10
c001c012:	39 ef                	cmp    edi,ebp
c001c014:	7c 15                	jl     c001c02b <sysCallGetEnv(regs*)+0x6e>
c001c016:	85 db                	test   ebx,ebx
c001c018:	75 0c                	jne    c001c026 <sysCallGetEnv(regs*)+0x69>
c001c01a:	83 c4 1c             	add    esp,0x1c
c001c01d:	31 c0                	xor    eax,eax
c001c01f:	5b                   	pop    ebx
c001c020:	31 d2                	xor    edx,edx
c001c022:	5e                   	pop    esi
c001c023:	5f                   	pop    edi
c001c024:	5d                   	pop    ebp
c001c025:	c3                   	ret    
c001c026:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c029:	eb ef                	jmp    c001c01a <sysCallGetEnv(regs*)+0x5d>
c001c02b:	83 ec 0c             	sub    esp,0xc
c001c02e:	68 70 c8 02 c0       	push   0xc002c870
c001c033:	e8 bf 68 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001c038:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c03c:	83 c4 0c             	add    esp,0xc
c001c03f:	57                   	push   edi
c001c040:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c046:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c049:	50                   	push   eax
c001c04a:	e8 1a e2 ff ff       	call   c001a269 <Krnl::getProcessEnvPair(Process*, int)>
c001c04f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c053:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c057:	68 2f cc 02 c0       	push   0xc002cc2f
c001c05c:	e8 96 68 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001c061:	83 c4 10             	add    esp,0x10
c001c064:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c067:	85 f6                	test   esi,esi
c001c069:	75 47                	jne    c001c0b2 <sysCallGetEnv(regs*)+0xf5>
c001c06b:	83 ec 0c             	sub    esp,0xc
c001c06e:	55                   	push   ebp
c001c06f:	e8 f8 46 fe ff       	call   c000076c <strlen>
c001c074:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c077:	89 c3                	mov    ebx,eax
c001c079:	e8 ee 46 fe ff       	call   c000076c <strlen>
c001c07e:	5a                   	pop    edx
c001c07f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c083:	59                   	pop    ecx
c001c084:	50                   	push   eax
c001c085:	68 73 c8 02 c0       	push   0xc002c873
c001c08a:	e8 68 68 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001c08f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c092:	e8 d5 46 fe ff       	call   c000076c <strlen>
c001c097:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c09a:	89 c3                	mov    ebx,eax
c001c09c:	e8 cb 46 fe ff       	call   c000076c <strlen>
c001c0a1:	83 c4 10             	add    esp,0x10
c001c0a4:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c0a8:	83 c4 1c             	add    esp,0x1c
c001c0ab:	31 d2                	xor    edx,edx
c001c0ad:	5b                   	pop    ebx
c001c0ae:	5e                   	pop    esi
c001c0af:	5f                   	pop    edi
c001c0b0:	5d                   	pop    ebp
c001c0b1:	c3                   	ret    
c001c0b2:	83 ec 0c             	sub    esp,0xc
c001c0b5:	68 49 cc 02 c0       	push   0xc002cc49
c001c0ba:	e8 38 68 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001c0bf:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c0c2:	58                   	pop    eax
c001c0c3:	5a                   	pop    edx
c001c0c4:	55                   	push   ebp
c001c0c5:	53                   	push   ebx
c001c0c6:	e8 41 47 fe ff       	call   c000080c <strcpy>
c001c0cb:	59                   	pop    ecx
c001c0cc:	5e                   	pop    esi
c001c0cd:	68 7d c8 02 c0       	push   0xc002c87d
c001c0d2:	53                   	push   ebx
c001c0d3:	e8 74 48 fe ff       	call   c000094c <strcat>
c001c0d8:	5d                   	pop    ebp
c001c0d9:	58                   	pop    eax
c001c0da:	57                   	push   edi
c001c0db:	53                   	push   ebx
c001c0dc:	e8 6b 48 fe ff       	call   c000094c <strcat>
c001c0e1:	c7 04 24 63 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc63
c001c0e8:	e8 0a 68 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001c0ed:	83 c4 10             	add    esp,0x10
c001c0f0:	e9 25 ff ff ff       	jmp    c001c01a <sysCallGetEnv(regs*)+0x5d>

c001c0f5 <sysAppSettings(regs*)>:
c001c0f5:	57                   	push   edi
c001c0f6:	56                   	push   esi
c001c0f7:	56                   	push   esi
c001c0f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0fc:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c0ff:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001c105:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c10a:	66 3d c0 09          	cmp    ax,0x9c0
c001c10e:	75 2e                	jne    c001c13e <sysAppSettings(regs*)+0x49>
c001c110:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001c116:	83 e0 1f             	and    eax,0x1f
c001c119:	3c 01                	cmp    al,0x1
c001c11b:	74 2c                	je     c001c149 <sysAppSettings(regs*)+0x54>
c001c11d:	3c 07                	cmp    al,0x7
c001c11f:	0f 84 b3 00 00 00    	je     c001c1d8 <sysAppSettings(regs*)+0xe3>
c001c125:	84 c0                	test   al,al
c001c127:	0f 84 d2 00 00 00    	je     c001c1ff <sysAppSettings(regs*)+0x10a>
c001c12d:	3c 08                	cmp    al,0x8
c001c12f:	74 63                	je     c001c194 <sysAppSettings(regs*)+0x9f>
c001c131:	59                   	pop    ecx
c001c132:	0f b6 c0             	movzx  eax,al
c001c135:	5e                   	pop    esi
c001c136:	05 e8 03 00 00       	add    eax,0x3e8
c001c13b:	5f                   	pop    edi
c001c13c:	99                   	cdq    
c001c13d:	c3                   	ret    
c001c13e:	b8 01 00 00 00       	mov    eax,0x1
c001c143:	59                   	pop    ecx
c001c144:	31 d2                	xor    edx,edx
c001c146:	5e                   	pop    esi
c001c147:	5f                   	pop    edi
c001c148:	c3                   	ret    
c001c149:	50                   	push   eax
c001c14a:	68 00 01 00 00       	push   0x100
c001c14f:	6a 00                	push   0x0
c001c151:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c156:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c159:	83 c0 0c             	add    eax,0xc
c001c15c:	50                   	push   eax
c001c15d:	e8 ee 45 fe ff       	call   c0000750 <memset>
c001c162:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c167:	b9 ff 00 00 00       	mov    ecx,0xff
c001c16c:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c16f:	83 c7 0c             	add    edi,0xc
c001c172:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c174:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c179:	5a                   	pop    edx
c001c17a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c17d:	59                   	pop    ecx
c001c17e:	8d 50 0c             	lea    edx,[eax+0xc]
c001c181:	52                   	push   edx
c001c182:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c188:	e8 79 42 ff ff       	call   c0010406 <VgaText::setTitle(char*)>
c001c18d:	83 c4 10             	add    esp,0x10
c001c190:	31 c0                	xor    eax,eax
c001c192:	eb af                	jmp    c001c143 <sysAppSettings(regs*)+0x4e>
c001c194:	83 ec 08             	sub    esp,0x8
c001c197:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c19d:	83 e0 0f             	and    eax,0xf
c001c1a0:	50                   	push   eax
c001c1a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1a9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c1af:	e8 42 42 ff ff       	call   c00103f6 <VgaText::setTitleColour(VgaColour)>
c001c1b4:	5f                   	pop    edi
c001c1b5:	58                   	pop    eax
c001c1b6:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c1bc:	c1 e8 04             	shr    eax,0x4
c001c1bf:	83 e0 0f             	and    eax,0xf
c001c1c2:	50                   	push   eax
c001c1c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1cb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c1d1:	e8 10 42 ff ff       	call   c00103e6 <VgaText::setTitleTextColour(VgaColour)>
c001c1d6:	eb b5                	jmp    c001c18d <sysAppSettings(regs*)+0x98>
c001c1d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1e0:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c1e6:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c1ec:	c0 e8 06             	shr    al,0x6
c001c1ef:	83 e0 01             	and    eax,0x1
c001c1f2:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c1f8:	31 c0                	xor    eax,eax
c001c1fa:	e9 44 ff ff ff       	jmp    c001c143 <sysAppSettings(regs*)+0x4e>
c001c1ff:	b8 02 00 00 00       	mov    eax,0x2
c001c204:	e9 3a ff ff ff       	jmp    c001c143 <sysAppSettings(regs*)+0x4e>

c001c209 <sysSetFatAttrib(regs*)>:
c001c209:	57                   	push   edi
c001c20a:	56                   	push   esi
c001c20b:	53                   	push   ebx
c001c20c:	83 ec 1c             	sub    esp,0x1c
c001c20f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c213:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c216:	68 14 01 00 00       	push   0x114
c001c21b:	e8 6c 36 ff ff       	call   c000f88c <malloc>
c001c220:	83 c4 0c             	add    esp,0xc
c001c223:	89 c3                	mov    ebx,eax
c001c225:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c22a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c22d:	57                   	push   edi
c001c22e:	53                   	push   ebx
c001c22f:	e8 22 6c ff ff       	call   c0012e56 <File::File(char const*, Process*)>
c001c234:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c237:	83 c4 0c             	add    esp,0xc
c001c23a:	0f b6 d4             	movzx  edx,ah
c001c23d:	0f b6 c0             	movzx  eax,al
c001c240:	52                   	push   edx
c001c241:	50                   	push   eax
c001c242:	53                   	push   ebx
c001c243:	e8 84 6e ff ff       	call   c00130cc <File::chfatattr(unsigned char, unsigned char)>
c001c248:	83 c4 10             	add    esp,0x10
c001c24b:	85 db                	test   ebx,ebx
c001c24d:	74 14                	je     c001c263 <sysSetFatAttrib(regs*)+0x5a>
c001c24f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c253:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c255:	83 ec 0c             	sub    esp,0xc
c001c258:	53                   	push   ebx
c001c259:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c25c:	83 c4 10             	add    esp,0x10
c001c25f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c263:	85 c0                	test   eax,eax
c001c265:	0f 95 c0             	setne  al
c001c268:	31 d2                	xor    edx,edx
c001c26a:	0f b6 c0             	movzx  eax,al
c001c26d:	f7 d8                	neg    eax
c001c26f:	83 d2 00             	adc    edx,0x0
c001c272:	83 c4 10             	add    esp,0x10
c001c275:	f7 da                	neg    edx
c001c277:	5b                   	pop    ebx
c001c278:	5e                   	pop    esi
c001c279:	5f                   	pop    edi
c001c27a:	c3                   	ret    

c001c27b <sysPipe(regs*)>:
c001c27b:	57                   	push   edi
c001c27c:	56                   	push   esi
c001c27d:	53                   	push   ebx
c001c27e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c282:	83 ec 0c             	sub    esp,0xc
c001c285:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c288:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c28b:	6a 20                	push   0x20
c001c28d:	e8 fa 35 ff ff       	call   c000f88c <malloc>
c001c292:	89 c3                	mov    ebx,eax
c001c294:	58                   	pop    eax
c001c295:	5a                   	pop    edx
c001c296:	68 00 50 00 00       	push   0x5000
c001c29b:	53                   	push   ebx
c001c29c:	e8 9d 3e ff ff       	call   c001013e <Pipe::Pipe(int)>
c001c2a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2a4:	e8 fd 4d ff ff       	call   c00110a6 <UnixFile::getFileDescriptor()>
c001c2a9:	89 07                	mov    DWORD PTR [edi],eax
c001c2ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2ae:	e8 f3 4d ff ff       	call   c00110a6 <UnixFile::getFileDescriptor()>
c001c2b3:	83 c4 10             	add    esp,0x10
c001c2b6:	89 06                	mov    DWORD PTR [esi],eax
c001c2b8:	31 d2                	xor    edx,edx
c001c2ba:	5b                   	pop    ebx
c001c2bb:	31 c0                	xor    eax,eax
c001c2bd:	5e                   	pop    esi
c001c2be:	5f                   	pop    edi
c001c2bf:	c3                   	ret    

c001c2c0 <sysGetUnixTime(regs*)>:
c001c2c0:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001c2c5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c2cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c2cf:	e9 74 75 ff ff       	jmp    c0013848 <Clock::timeInSecondsLocal()>

c001c2d4 <string_ends_with(char const*, char const*)>:
c001c2d4:	57                   	push   edi
c001c2d5:	56                   	push   esi
c001c2d6:	53                   	push   ebx
c001c2d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c2db:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c2df:	83 ec 0c             	sub    esp,0xc
c001c2e2:	53                   	push   ebx
c001c2e3:	e8 84 44 fe ff       	call   c000076c <strlen>
c001c2e8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c2eb:	89 c6                	mov    esi,eax
c001c2ed:	e8 7a 44 fe ff       	call   c000076c <strlen>
c001c2f2:	83 c4 10             	add    esp,0x10
c001c2f5:	39 c6                	cmp    esi,eax
c001c2f7:	7d 06                	jge    c001c2ff <string_ends_with(char const*, char const*)+0x2b>
c001c2f9:	5b                   	pop    ebx
c001c2fa:	31 c0                	xor    eax,eax
c001c2fc:	5e                   	pop    esi
c001c2fd:	5f                   	pop    edi
c001c2fe:	c3                   	ret    
c001c2ff:	83 ec 08             	sub    esp,0x8
c001c302:	29 c6                	sub    esi,eax
c001c304:	57                   	push   edi
c001c305:	01 f3                	add    ebx,esi
c001c307:	53                   	push   ebx
c001c308:	e8 8b 45 fe ff       	call   c0000898 <strcmp>
c001c30d:	83 c4 10             	add    esp,0x10
c001c310:	85 c0                	test   eax,eax
c001c312:	5b                   	pop    ebx
c001c313:	0f 94 c0             	sete   al
c001c316:	5e                   	pop    esi
c001c317:	0f b6 c0             	movzx  eax,al
c001c31a:	5f                   	pop    edi
c001c31b:	c3                   	ret    

c001c31c <sysCallOpen(regs*)>:
c001c31c:	56                   	push   esi
c001c31d:	53                   	push   ebx
c001c31e:	81 ec 04 01 00 00    	sub    esp,0x104
c001c324:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c32b:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c32e:	85 c9                	test   ecx,ecx
c001c330:	0f 84 b3 00 00 00    	je     c001c3e9 <sysCallOpen(regs*)+0xcd>
c001c336:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c339:	85 c0                	test   eax,eax
c001c33b:	0f 84 a8 00 00 00    	je     c001c3e9 <sysCallOpen(regs*)+0xcd>
c001c341:	52                   	push   edx
c001c342:	68 7f c8 02 c0       	push   0xc002c87f
c001c347:	50                   	push   eax
c001c348:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c34c:	56                   	push   esi
c001c34d:	e8 5a 69 ff ff       	call   c0012cac <Fs::standardiseFiles(char*, char const*, char const*)>
c001c352:	89 34 24             	mov    DWORD PTR [esp],esi
c001c355:	e8 12 44 fe ff       	call   c000076c <strlen>
c001c35a:	83 c4 10             	add    esp,0x10
c001c35d:	48                   	dec    eax
c001c35e:	74 1d                	je     c001c37d <sysCallOpen(regs*)+0x61>
c001c360:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c363:	eb 0f                	jmp    c001c374 <sysCallOpen(regs*)+0x58>
c001c365:	80 fa 3a             	cmp    dl,0x3a
c001c368:	74 0f                	je     c001c379 <sysCallOpen(regs*)+0x5d>
c001c36a:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c36e:	48                   	dec    eax
c001c36f:	74 0c                	je     c001c37d <sysCallOpen(regs*)+0x61>
c001c371:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c374:	80 fa 2e             	cmp    dl,0x2e
c001c377:	75 ec                	jne    c001c365 <sysCallOpen(regs*)+0x49>
c001c379:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c37d:	83 ec 08             	sub    esp,0x8
c001c380:	68 83 c8 02 c0       	push   0xc002c883
c001c385:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c388:	e8 47 ff ff ff       	call   c001c2d4 <string_ends_with(char const*, char const*)>
c001c38d:	83 c4 10             	add    esp,0x10
c001c390:	85 c0                	test   eax,eax
c001c392:	75 17                	jne    c001c3ab <sysCallOpen(regs*)+0x8f>
c001c394:	83 ec 08             	sub    esp,0x8
c001c397:	68 a4 c8 02 c0       	push   0xc002c8a4
c001c39c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c39f:	e8 30 ff ff ff       	call   c001c2d4 <string_ends_with(char const*, char const*)>
c001c3a4:	83 c4 10             	add    esp,0x10
c001c3a7:	85 c0                	test   eax,eax
c001c3a9:	74 51                	je     c001c3fc <sysCallOpen(regs*)+0xe0>
c001c3ab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c3ae:	83 ec 08             	sub    esp,0x8
c001c3b1:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c3b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c3be:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c3c1:	ff 30                	push   DWORD PTR [eax]
c001c3c3:	68 88 c8 02 c0       	push   0xc002c888
c001c3c8:	e8 2a 65 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001c3cd:	c7 04 24 97 c8 02 c0 	mov    DWORD PTR [esp],0xc002c897
c001c3d4:	e8 1e 65 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001c3d9:	83 c4 10             	add    esp,0x10
c001c3dc:	81 c4 04 01 00 00    	add    esp,0x104
c001c3e2:	31 c0                	xor    eax,eax
c001c3e4:	31 d2                	xor    edx,edx
c001c3e6:	5b                   	pop    ebx
c001c3e7:	5e                   	pop    esi
c001c3e8:	c3                   	ret    
c001c3e9:	81 c4 04 01 00 00    	add    esp,0x104
c001c3ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c3f4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c3f9:	5b                   	pop    ebx
c001c3fa:	5e                   	pop    esi
c001c3fb:	c3                   	ret    
c001c3fc:	83 ec 08             	sub    esp,0x8
c001c3ff:	68 84 c8 02 c0       	push   0xc002c884
c001c404:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c407:	e8 8c 44 fe ff       	call   c0000898 <strcmp>
c001c40c:	83 c4 10             	add    esp,0x10
c001c40f:	85 c0                	test   eax,eax
c001c411:	74 98                	je     c001c3ab <sysCallOpen(regs*)+0x8f>
c001c413:	83 ec 08             	sub    esp,0x8
c001c416:	68 83 c8 02 c0       	push   0xc002c883
c001c41b:	56                   	push   esi
c001c41c:	e8 b3 fe ff ff       	call   c001c2d4 <string_ends_with(char const*, char const*)>
c001c421:	83 c4 10             	add    esp,0x10
c001c424:	85 c0                	test   eax,eax
c001c426:	75 83                	jne    c001c3ab <sysCallOpen(regs*)+0x8f>
c001c428:	83 ec 08             	sub    esp,0x8
c001c42b:	68 a9 c8 02 c0       	push   0xc002c8a9
c001c430:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c433:	e8 9c fe ff ff       	call   c001c2d4 <string_ends_with(char const*, char const*)>
c001c438:	83 c4 10             	add    esp,0x10
c001c43b:	85 c0                	test   eax,eax
c001c43d:	0f 85 d9 00 00 00    	jne    c001c51c <sysCallOpen(regs*)+0x200>
c001c443:	83 ec 08             	sub    esp,0x8
c001c446:	68 ae c8 02 c0       	push   0xc002c8ae
c001c44b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c44e:	e8 81 fe ff ff       	call   c001c2d4 <string_ends_with(char const*, char const*)>
c001c453:	83 c4 10             	add    esp,0x10
c001c456:	85 c0                	test   eax,eax
c001c458:	0f 85 be 00 00 00    	jne    c001c51c <sysCallOpen(regs*)+0x200>
c001c45e:	83 ec 08             	sub    esp,0x8
c001c461:	68 aa c8 02 c0       	push   0xc002c8aa
c001c466:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c469:	e8 2a 44 fe ff       	call   c0000898 <strcmp>
c001c46e:	83 c4 10             	add    esp,0x10
c001c471:	85 c0                	test   eax,eax
c001c473:	0f 84 a3 00 00 00    	je     c001c51c <sysCallOpen(regs*)+0x200>
c001c479:	83 ec 08             	sub    esp,0x8
c001c47c:	68 a9 c8 02 c0       	push   0xc002c8a9
c001c481:	56                   	push   esi
c001c482:	e8 4d fe ff ff       	call   c001c2d4 <string_ends_with(char const*, char const*)>
c001c487:	83 c4 10             	add    esp,0x10
c001c48a:	85 c0                	test   eax,eax
c001c48c:	0f 85 8a 00 00 00    	jne    c001c51c <sysCallOpen(regs*)+0x200>
c001c492:	83 ec 0c             	sub    esp,0xc
c001c495:	68 14 01 00 00       	push   0x114
c001c49a:	e8 ed 33 ff ff       	call   c000f88c <malloc>
c001c49f:	83 c4 0c             	add    esp,0xc
c001c4a2:	89 c6                	mov    esi,eax
c001c4a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c4a9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c4ac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4af:	56                   	push   esi
c001c4b0:	e8 a1 69 ff ff       	call   c0012e56 <File::File(char const*, Process*)>
c001c4b5:	83 c4 10             	add    esp,0x10
c001c4b8:	85 f6                	test   esi,esi
c001c4ba:	0f 84 29 ff ff ff    	je     c001c3e9 <sysCallOpen(regs*)+0xcd>
c001c4c0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c4c3:	0f b6 c2             	movzx  eax,dl
c001c4c6:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c4c9:	89 d0                	mov    eax,edx
c001c4cb:	83 e0 01             	and    eax,0x1
c001c4ce:	f6 c2 02             	test   dl,0x2
c001c4d1:	74 03                	je     c001c4d6 <sysCallOpen(regs*)+0x1ba>
c001c4d3:	83 c8 02             	or     eax,0x2
c001c4d6:	f6 c2 04             	test   dl,0x4
c001c4d9:	74 03                	je     c001c4de <sysCallOpen(regs*)+0x1c2>
c001c4db:	83 c8 04             	or     eax,0x4
c001c4de:	f6 c2 08             	test   dl,0x8
c001c4e1:	74 03                	je     c001c4e6 <sysCallOpen(regs*)+0x1ca>
c001c4e3:	83 c8 0a             	or     eax,0xa
c001c4e6:	83 e2 10             	and    edx,0x10
c001c4e9:	74 03                	je     c001c4ee <sysCallOpen(regs*)+0x1d2>
c001c4eb:	83 c8 12             	or     eax,0x12
c001c4ee:	83 ec 08             	sub    esp,0x8
c001c4f1:	50                   	push   eax
c001c4f2:	56                   	push   esi
c001c4f3:	e8 c2 69 ff ff       	call   c0012eba <File::open(FileOpenMode)>
c001c4f8:	83 c4 10             	add    esp,0x10
c001c4fb:	85 c0                	test   eax,eax
c001c4fd:	0f 85 e6 fe ff ff    	jne    c001c3e9 <sysCallOpen(regs*)+0xcd>
c001c503:	83 ec 0c             	sub    esp,0xc
c001c506:	56                   	push   esi
c001c507:	e8 9a 4b ff ff       	call   c00110a6 <UnixFile::getFileDescriptor()>
c001c50c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c50f:	89 02                	mov    DWORD PTR [edx],eax
c001c511:	c1 f8 1f             	sar    eax,0x1f
c001c514:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c517:	e9 bd fe ff ff       	jmp    c001c3d9 <sysCallOpen(regs*)+0xbd>
c001c51c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c51f:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c525:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c52c:	e9 ab fe ff ff       	jmp    c001c3dc <sysCallOpen(regs*)+0xc0>

c001c531 <Sys::loadSyscalls()>:
c001c531:	c7 05 80 1b 03 c0 21 b6 01 c0 	mov    DWORD PTR ds:0xc0031b80,0xc001b621
c001c53b:	c7 05 84 1b 03 c0 86 b1 01 c0 	mov    DWORD PTR ds:0xc0031b84,0xc001b186
c001c545:	c7 05 88 1b 03 c0 74 b3 01 c0 	mov    DWORD PTR ds:0xc0031b88,0xc001b374
c001c54f:	c7 05 8c 1b 03 c0 57 b5 01 c0 	mov    DWORD PTR ds:0xc0031b8c,0xc001b557
c001c559:	c7 05 90 1b 03 c0 0c b3 01 c0 	mov    DWORD PTR ds:0xc0031b90,0xc001b30c
c001c563:	c7 05 94 1b 03 c0 bd b1 01 c0 	mov    DWORD PTR ds:0xc0031b94,0xc001b1bd
c001c56d:	c7 05 98 1b 03 c0 9e b1 01 c0 	mov    DWORD PTR ds:0xc0031b98,0xc001b19e
c001c577:	c7 05 9c 1b 03 c0 c9 b3 01 c0 	mov    DWORD PTR ds:0xc0031b9c,0xc001b3c9
c001c581:	c7 05 a4 1b 03 c0 5c bb 01 c0 	mov    DWORD PTR ds:0xc0031ba4,0xc001bb5c
c001c58b:	c7 05 a0 1b 03 c0 1c c3 01 c0 	mov    DWORD PTR ds:0xc0031ba0,0xc001c31c
c001c595:	c7 05 a8 1b 03 c0 e4 bb 01 c0 	mov    DWORD PTR ds:0xc0031ba8,0xc001bbe4
c001c59f:	c7 05 ac 1b 03 c0 4b b8 01 c0 	mov    DWORD PTR ds:0xc0031bac,0xc001b84b
c001c5a9:	c7 05 b0 1b 03 c0 67 b6 01 c0 	mov    DWORD PTR ds:0xc0031bb0,0xc001b667
c001c5b3:	c7 05 b4 1b 03 c0 6c b6 01 c0 	mov    DWORD PTR ds:0xc0031bb4,0xc001b66c
c001c5bd:	c7 05 b8 1b 03 c0 bf bc 01 c0 	mov    DWORD PTR ds:0xc0031bb8,0xc001bcbf
c001c5c7:	c7 05 bc 1b 03 c0 59 bc 01 c0 	mov    DWORD PTR ds:0xc0031bbc,0xc001bc59
c001c5d1:	c7 05 c0 1b 03 c0 33 b9 01 c0 	mov    DWORD PTR ds:0xc0031bc0,0xc001b933
c001c5db:	c7 05 c4 1b 03 c0 9c b9 01 c0 	mov    DWORD PTR ds:0xc0031bc4,0xc001b99c
c001c5e5:	c7 05 c8 1b 03 c0 19 ba 01 c0 	mov    DWORD PTR ds:0xc0031bc8,0xc001ba19
c001c5ef:	c7 05 cc 1b 03 c0 71 b6 01 c0 	mov    DWORD PTR ds:0xc0031bcc,0xc001b671
c001c5f9:	c7 05 d0 1b 03 c0 2f bd 01 c0 	mov    DWORD PTR ds:0xc0031bd0,0xc001bd2f
c001c603:	c7 05 d4 1b 03 c0 49 bd 01 c0 	mov    DWORD PTR ds:0xc0031bd4,0xc001bd49
c001c60d:	c7 05 d8 1b 03 c0 49 bd 01 c0 	mov    DWORD PTR ds:0xc0031bd8,0xc001bd49
c001c617:	c7 05 dc 1b 03 c0 8a bd 01 c0 	mov    DWORD PTR ds:0xc0031bdc,0xc001bd8a
c001c621:	c7 05 e0 1b 03 c0 ee bd 01 c0 	mov    DWORD PTR ds:0xc0031be0,0xc001bdee
c001c62b:	c7 05 e4 1b 03 c0 1d b8 01 c0 	mov    DWORD PTR ds:0xc0031be4,0xc001b81d
c001c635:	c7 05 e8 1b 03 c0 52 be 01 c0 	mov    DWORD PTR ds:0xc0031be8,0xc001be52
c001c63f:	c7 05 ec 1b 03 c0 da b7 01 c0 	mov    DWORD PTR ds:0xc0031bec,0xc001b7da
c001c649:	c7 05 f0 1b 03 c0 9e be 01 c0 	mov    DWORD PTR ds:0xc0031bf0,0xc001be9e
c001c653:	c7 05 f4 1b 03 c0 d9 b8 01 c0 	mov    DWORD PTR ds:0xc0031bf4,0xc001b8d9
c001c65d:	c7 05 f8 1b 03 c0 21 bf 01 c0 	mov    DWORD PTR ds:0xc0031bf8,0xc001bf21
c001c667:	c7 05 fc 1b 03 c0 9c ba 01 c0 	mov    DWORD PTR ds:0xc0031bfc,0xc001ba9c
c001c671:	c7 05 00 1c 03 c0 48 bf 01 c0 	mov    DWORD PTR ds:0xc0031c00,0xc001bf48
c001c67b:	c7 05 04 1c 03 c0 bd bf 01 c0 	mov    DWORD PTR ds:0xc0031c04,0xc001bfbd
c001c685:	c7 05 08 1c 03 c0 f5 c0 01 c0 	mov    DWORD PTR ds:0xc0031c08,0xc001c0f5
c001c68f:	c7 05 0c 1c 03 c0 7b b6 01 c0 	mov    DWORD PTR ds:0xc0031c0c,0xc001b67b
c001c699:	c7 05 10 1c 03 c0 e5 b6 01 c0 	mov    DWORD PTR ds:0xc0031c10,0xc001b6e5
c001c6a3:	c7 05 14 1c 03 c0 2b b7 01 c0 	mov    DWORD PTR ds:0xc0031c14,0xc001b72b
c001c6ad:	c7 05 18 1c 03 c0 09 c2 01 c0 	mov    DWORD PTR ds:0xc0031c18,0xc001c209
c001c6b7:	c7 05 1c 1c 03 c0 64 bd 01 c0 	mov    DWORD PTR ds:0xc0031c1c,0xc001bd64
c001c6c1:	c7 05 20 1c 03 c0 7c b7 01 c0 	mov    DWORD PTR ds:0xc0031c20,0xc001b77c
c001c6cb:	c7 05 24 1c 03 c0 7b c2 01 c0 	mov    DWORD PTR ds:0xc0031c24,0xc001c27b
c001c6d5:	c7 05 28 1c 03 c0 c0 c2 01 c0 	mov    DWORD PTR ds:0xc0031c28,0xc001c2c0
c001c6df:	c7 05 2c 1c 03 c0 64 b2 01 c0 	mov    DWORD PTR ds:0xc0031c2c,0xc001b264
c001c6e9:	c7 05 30 1c 03 c0 e5 b3 01 c0 	mov    DWORD PTR ds:0xc0031c30,0xc001b3e5
c001c6f3:	c7 05 34 1c 03 c0 0d b5 01 c0 	mov    DWORD PTR ds:0xc0031c34,0xc001b50d
c001c6fd:	c7 05 38 1c 03 c0 50 b1 01 c0 	mov    DWORD PTR ds:0xc0031c38,0xc001b150
c001c707:	c7 05 3c 1c 03 c0 bf b5 01 c0 	mov    DWORD PTR ds:0xc0031c3c,0xc001b5bf
c001c711:	c7 05 40 1c 03 c0 c9 b1 01 c0 	mov    DWORD PTR ds:0xc0031c40,0xc001b1c9
c001c71b:	c7 05 44 1c 03 c0 e0 b1 01 c0 	mov    DWORD PTR ds:0xc0031c44,0xc001b1e0
c001c725:	c3                   	ret    

c001c726 <Sys::systemCall(regs*, void*)>:
c001c726:	53                   	push   ebx
c001c727:	83 ec 08             	sub    esp,0x8
c001c72a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c72e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c731:	83 f8 7f             	cmp    eax,0x7f
c001c734:	77 16                	ja     c001c74c <Sys::systemCall(regs*, void*)+0x26>
c001c736:	8b 14 85 80 1b 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce480]
c001c73d:	85 d2                	test   edx,edx
c001c73f:	74 0b                	je     c001c74c <Sys::systemCall(regs*, void*)+0x26>
c001c741:	83 ec 0c             	sub    esp,0xc
c001c744:	53                   	push   ebx
c001c745:	ff d2                	call   edx
c001c747:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c74a:	eb 0d                	jmp    c001c759 <Sys::systemCall(regs*, void*)+0x33>
c001c74c:	52                   	push   edx
c001c74d:	52                   	push   edx
c001c74e:	50                   	push   eax
c001c74f:	68 b3 c8 02 c0       	push   0xc002c8b3
c001c754:	e8 9e 61 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001c759:	83 c4 10             	add    esp,0x10
c001c75c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c761:	31 d2                	xor    edx,edx
c001c763:	83 c4 08             	add    esp,0x8
c001c766:	5b                   	pop    ebx
c001c767:	c3                   	ret    

c001c768 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c768:	55                   	push   ebp
c001c769:	57                   	push   edi
c001c76a:	56                   	push   esi
c001c76b:	53                   	push   ebx
c001c76c:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c772:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c779:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c780:	85 c0                	test   eax,eax
c001c782:	0f 95 c1             	setne  cl
c001c785:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c78d:	0f 94 c2             	sete   dl
c001c790:	84 d1                	test   cl,dl
c001c792:	74 23                	je     c001c7b7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c794:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c79a:	74 1b                	je     c001c7b7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c79c:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c7a2:	89 da                	mov    edx,ebx
c001c7a4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c7aa:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c7b0:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c7b7:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c7be:	05 ff 0f 00 00       	add    eax,0xfff
c001c7c3:	83 ec 0c             	sub    esp,0xc
c001c7c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c7ca:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c7d0:	c1 e8 0c             	shr    eax,0xc
c001c7d3:	89 fe                	mov    esi,edi
c001c7d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c7d9:	c1 ee 0c             	shr    esi,0xc
c001c7dc:	6a 01                	push   0x1
c001c7de:	e8 0e 4d ff ff       	call   c00114f1 <Virt::allocateKernelVirtualPages(int)>
c001c7e3:	89 c5                	mov    ebp,eax
c001c7e5:	58                   	pop    eax
c001c7e6:	5a                   	pop    edx
c001c7e7:	56                   	push   esi
c001c7e8:	68 37 c9 02 c0       	push   0xc002c937
c001c7ed:	e8 05 61 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001c7f2:	59                   	pop    ecx
c001c7f3:	58                   	pop    eax
c001c7f4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c7f8:	68 49 c9 02 c0       	push   0xc002c949
c001c7fd:	e8 f5 60 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001c802:	83 c4 10             	add    esp,0x10
c001c805:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c80b:	0f 86 31 01 00 00    	jbe    c001c942 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c811:	c1 e6 0c             	shl    esi,0xc
c001c814:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c817:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c81a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c81e:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c825:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c828:	01 df                	add    edi,ebx
c001c82a:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c82d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c831:	0f 84 08 01 00 00    	je     c001c93f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c837:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c83d:	76 05                	jbe    c001c844 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c83f:	bf 00 10 00 00       	mov    edi,0x1000
c001c844:	83 ec 0c             	sub    esp,0xc
c001c847:	31 d2                	xor    edx,edx
c001c849:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c850:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c852:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c856:	50                   	push   eax
c001c857:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c85b:	56                   	push   esi
c001c85c:	52                   	push   edx
c001c85d:	57                   	push   edi
c001c85e:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c865:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c868:	83 c4 20             	add    esp,0x20
c001c86b:	85 c0                	test   eax,eax
c001c86d:	74 0a                	je     c001c879 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c86f:	53                   	push   ebx
c001c870:	53                   	push   ebx
c001c871:	50                   	push   eax
c001c872:	68 5b c9 02 c0       	push   0xc002c95b
c001c877:	eb 0f                	jmp    c001c888 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c879:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c87d:	74 20                	je     c001c89f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c87f:	51                   	push   ecx
c001c880:	51                   	push   ecx
c001c881:	6a 00                	push   0x0
c001c883:	68 86 c9 02 c0       	push   0xc002c986
c001c888:	e8 6a 60 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001c88d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c890:	e8 1c 51 ff ff       	call   c00119b1 <Virt::freeKernelVirtualPages(unsigned long)>
c001c895:	83 c4 10             	add    esp,0x10
c001c898:	31 c0                	xor    eax,eax
c001c89a:	e9 68 01 00 00       	jmp    c001ca07 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c89f:	fa                   	cli    
c001c8a0:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001c8a6:	e8 0d 33 ff ff       	call   c000fbb8 <Phys::allocatePage()>
c001c8ab:	6a 07                	push   0x7
c001c8ad:	89 c7                	mov    edi,eax
c001c8af:	55                   	push   ebp
c001c8b0:	50                   	push   eax
c001c8b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8b9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8bf:	e8 64 54 ff ff       	call   c0011d28 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c8c4:	83 c4 0c             	add    esp,0xc
c001c8c7:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c8ce:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8d4:	6a 00                	push   0x0
c001c8d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8db:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8de:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8e4:	e8 99 52 ff ff       	call   c0011b82 <VAS::mapOtherVASIn(bool, VAS*)>
c001c8e9:	58                   	pop    eax
c001c8ea:	5a                   	pop    edx
c001c8eb:	68 07 0c 00 00       	push   0xc07
c001c8f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c8f4:	57                   	push   edi
c001c8f5:	89 ef                	mov    edi,ebp
c001c8f7:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c8fe:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c904:	6a 00                	push   0x0
c001c906:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c90b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c90e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c914:	e8 cb 57 ff ff       	call   c00120e4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c919:	b9 00 10 00 00       	mov    ecx,0x1000
c001c91e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c920:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001c925:	83 c4 20             	add    esp,0x20
c001c928:	48                   	dec    eax
c001c929:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001c92e:	85 c0                	test   eax,eax
c001c930:	75 01                	jne    c001c933 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c932:	fb                   	sti    
c001c933:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c93a:	e9 df fe ff ff       	jmp    c001c81e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c93f:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c942:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c94a:	0f 86 a9 00 00 00    	jbe    c001c9f9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c950:	fa                   	cli    
c001c951:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001c957:	51                   	push   ecx
c001c958:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c95f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c965:	6a 00                	push   0x0
c001c967:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c96c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c96f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c975:	e8 08 52 ff ff       	call   c0011b82 <VAS::mapOtherVASIn(bool, VAS*)>
c001c97a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c97e:	c1 e6 0c             	shl    esi,0xc
c001c981:	01 de                	add    esi,ebx
c001c983:	83 c4 10             	add    esp,0x10
c001c986:	39 de                	cmp    esi,ebx
c001c988:	74 61                	je     c001c9eb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c98a:	e8 29 32 ff ff       	call   c000fbb8 <Phys::allocatePage()>
c001c98f:	6a 07                	push   0x7
c001c991:	89 c7                	mov    edi,eax
c001c993:	55                   	push   ebp
c001c994:	50                   	push   eax
c001c995:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c99a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c99d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9a3:	e8 80 53 ff ff       	call   c0011d28 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c9a8:	58                   	pop    eax
c001c9a9:	5a                   	pop    edx
c001c9aa:	68 07 0c 00 00       	push   0xc07
c001c9af:	53                   	push   ebx
c001c9b0:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c9b6:	57                   	push   edi
c001c9b7:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c9be:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9c4:	6a 00                	push   0x0
c001c9c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9cb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9ce:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9d4:	e8 0b 57 ff ff       	call   c00120e4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c9d9:	83 c4 1c             	add    esp,0x1c
c001c9dc:	68 00 10 00 00       	push   0x1000
c001c9e1:	6a 00                	push   0x0
c001c9e3:	55                   	push   ebp
c001c9e4:	e8 67 3d fe ff       	call   c0000750 <memset>
c001c9e9:	eb 98                	jmp    c001c983 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c9eb:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001c9f0:	48                   	dec    eax
c001c9f1:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001c9f6:	75 01                	jne    c001c9f9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c9f8:	fb                   	sti    
c001c9f9:	83 ec 0c             	sub    esp,0xc
c001c9fc:	55                   	push   ebp
c001c9fd:	e8 af 4f ff ff       	call   c00119b1 <Virt::freeKernelVirtualPages(unsigned long)>
c001ca02:	83 c4 10             	add    esp,0x10
c001ca05:	b0 01                	mov    al,0x1
c001ca07:	81 c4 2c 10 00 00    	add    esp,0x102c
c001ca0d:	5b                   	pop    ebx
c001ca0e:	5e                   	pop    esi
c001ca0f:	5f                   	pop    edi
c001ca10:	5d                   	pop    ebp
c001ca11:	c3                   	ret    

c001ca12 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001ca12:	55                   	push   ebp
c001ca13:	57                   	push   edi
c001ca14:	56                   	push   esi
c001ca15:	53                   	push   ebx
c001ca16:	83 ec 48             	sub    esp,0x48
c001ca19:	68 14 01 00 00       	push   0x114
c001ca1e:	e8 69 2e ff ff       	call   c000f88c <malloc>
c001ca23:	83 c4 0c             	add    esp,0xc
c001ca26:	89 c6                	mov    esi,eax
c001ca28:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001ca2c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ca30:	50                   	push   eax
c001ca31:	e8 20 64 ff ff       	call   c0012e56 <File::File(char const*, Process*)>
c001ca36:	58                   	pop    eax
c001ca37:	5a                   	pop    edx
c001ca38:	6a 01                	push   0x1
c001ca3a:	56                   	push   esi
c001ca3b:	e8 7a 64 ff ff       	call   c0012eba <File::open(FileOpenMode)>
c001ca40:	83 c4 10             	add    esp,0x10
c001ca43:	85 c0                	test   eax,eax
c001ca45:	0f 85 47 01 00 00    	jne    c001cb92 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca4b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ca53:	83 ec 0c             	sub    esp,0xc
c001ca56:	6a 34                	push   0x34
c001ca58:	e8 2f 2e ff ff       	call   c000f88c <malloc>
c001ca5d:	89 c3                	mov    ebx,eax
c001ca5f:	58                   	pop    eax
c001ca60:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca62:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ca66:	57                   	push   edi
c001ca67:	53                   	push   ebx
c001ca68:	6a 00                	push   0x0
c001ca6a:	6a 34                	push   0x34
c001ca6c:	56                   	push   esi
c001ca6d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ca70:	83 c4 20             	add    esp,0x20
c001ca73:	85 c0                	test   eax,eax
c001ca75:	0f 85 17 01 00 00    	jne    c001cb92 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca7b:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ca81:	0f 85 0b 01 00 00    	jne    c001cb92 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca87:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ca8a:	85 c0                	test   eax,eax
c001ca8c:	0f 84 00 01 00 00    	je     c001cb92 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca92:	31 d2                	xor    edx,edx
c001ca94:	55                   	push   ebp
c001ca95:	52                   	push   edx
c001ca96:	50                   	push   eax
c001ca97:	56                   	push   esi
c001ca98:	e8 db 64 ff ff       	call   c0012f78 <File::seek(unsigned long long)>
c001ca9d:	83 c4 10             	add    esp,0x10
c001caa0:	85 c0                	test   eax,eax
c001caa2:	0f 85 ea 00 00 00    	jne    c001cb92 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001caa8:	83 ec 0c             	sub    esp,0xc
c001caab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001caae:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cab2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cab6:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001caba:	0f af c2             	imul   eax,edx
c001cabd:	50                   	push   eax
c001cabe:	e8 c9 2d ff ff       	call   c000f88c <malloc>
c001cac3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cac5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cac9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cacc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cad0:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cad4:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cad8:	0f af c2             	imul   eax,edx
c001cadb:	99                   	cdq    
c001cadc:	52                   	push   edx
c001cadd:	50                   	push   eax
c001cade:	56                   	push   esi
c001cadf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cae2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cae5:	83 c4 20             	add    esp,0x20
c001cae8:	85 c0                	test   eax,eax
c001caea:	0f 84 a2 00 00 00    	je     c001cb92 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001caf0:	31 d2                	xor    edx,edx
c001caf2:	51                   	push   ecx
c001caf3:	52                   	push   edx
c001caf4:	50                   	push   eax
c001caf5:	56                   	push   esi
c001caf6:	e8 7d 64 ff ff       	call   c0012f78 <File::seek(unsigned long long)>
c001cafb:	83 c4 10             	add    esp,0x10
c001cafe:	85 c0                	test   eax,eax
c001cb00:	0f 85 8c 00 00 00    	jne    c001cb92 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb06:	83 ec 0c             	sub    esp,0xc
c001cb09:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb0d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb11:	31 ed                	xor    ebp,ebp
c001cb13:	0f af c2             	imul   eax,edx
c001cb16:	50                   	push   eax
c001cb17:	e8 70 2d ff ff       	call   c000f88c <malloc>
c001cb1c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb1e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb22:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb29:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb2d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb31:	0f af c2             	imul   eax,edx
c001cb34:	99                   	cdq    
c001cb35:	52                   	push   edx
c001cb36:	50                   	push   eax
c001cb37:	56                   	push   esi
c001cb38:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb3b:	83 c4 20             	add    esp,0x20
c001cb3e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cb46:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cb4a:	0f 86 80 00 00 00    	jbe    c001cbd0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cb50:	0f b7 fd             	movzx  edi,bp
c001cb53:	c1 e7 05             	shl    edi,0x5
c001cb56:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cb5a:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cb5d:	75 6b                	jne    c001cbca <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cb5f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cb62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb66:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cb69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb6d:	52                   	push   edx
c001cb6e:	31 d2                	xor    edx,edx
c001cb70:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cb73:	52                   	push   edx
c001cb74:	50                   	push   eax
c001cb75:	56                   	push   esi
c001cb76:	e8 fd 63 ff ff       	call   c0012f78 <File::seek(unsigned long long)>
c001cb7b:	83 c4 10             	add    esp,0x10
c001cb7e:	85 c0                	test   eax,eax
c001cb80:	74 17                	je     c001cb99 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cb82:	83 ec 0c             	sub    esp,0xc
c001cb85:	68 b2 c9 02 c0       	push   0xc002c9b2
c001cb8a:	e8 68 5d ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001cb8f:	83 c4 10             	add    esp,0x10
c001cb92:	31 c0                	xor    eax,eax
c001cb94:	e9 87 00 00 00       	jmp    c001cc20 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cb99:	83 ec 0c             	sub    esp,0xc
c001cb9c:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cb9f:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cba2:	50                   	push   eax
c001cba3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cba7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbab:	56                   	push   esi
c001cbac:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cbb0:	e8 b3 fb ff ff       	call   c001c768 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cbb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cbb9:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cbbd:	83 c4 20             	add    esp,0x20
c001cbc0:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cbc4:	73 04                	jae    c001cbca <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cbc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cbca:	45                   	inc    ebp
c001cbcb:	e9 76 ff ff ff       	jmp    c001cb46 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cbd0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cbd4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cbd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cbdc:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cbe2:	83 ec 0c             	sub    esp,0xc
c001cbe5:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cbeb:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cbf0:	05 00 10 00 00       	add    eax,0x1000
c001cbf5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cbf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbfc:	e8 9b 2c ff ff       	call   c000f89c <free>
c001cc01:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc04:	e8 93 2c ff ff       	call   c000f89c <free>
c001cc09:	58                   	pop    eax
c001cc0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc0e:	e8 89 2c ff ff       	call   c000f89c <free>
c001cc13:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc16:	e8 fd 62 ff ff       	call   c0012f18 <File::close()>
c001cc1b:	83 c4 10             	add    esp,0x10
c001cc1e:	b0 01                	mov    al,0x1
c001cc20:	83 c4 3c             	add    esp,0x3c
c001cc23:	5b                   	pop    ebx
c001cc24:	5e                   	pop    esi
c001cc25:	5f                   	pop    edi
c001cc26:	5d                   	pop    ebp
c001cc27:	c3                   	ret    

c001cc28 <Thr::runtimeReferenceHelper()>:
c001cc28:	83 ec 18             	sub    esp,0x18
c001cc2b:	68 ba c9 02 c0       	push   0xc002c9ba
c001cc30:	e8 c2 5c ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001cc35:	fa                   	cli    
c001cc36:	83 c4 10             	add    esp,0x10
c001cc39:	eb fe                	jmp    c001cc39 <Thr::runtimeReferenceHelper()+0x11>

c001cc3b <Thr::getAddressOfKernelSymbol(char const*)>:
c001cc3b:	57                   	push   edi
c001cc3c:	56                   	push   esi
c001cc3d:	53                   	push   ebx
c001cc3e:	31 db                	xor    ebx,ebx
c001cc40:	39 1d 20 25 03 c0    	cmp    DWORD PTR ds:0xc0032520,ebx
c001cc46:	7e 3c                	jle    c001cc84 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cc48:	8b 34 9d a0 24 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcdb60]
c001cc4f:	31 ff                	xor    edi,edi
c001cc51:	39 3c 9d a0 23 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcdc60],edi
c001cc58:	7e 27                	jle    c001cc81 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cc5a:	50                   	push   eax
c001cc5b:	50                   	push   eax
c001cc5c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc60:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc62:	03 04 9d 20 24 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcdbe0]
c001cc69:	50                   	push   eax
c001cc6a:	e8 29 3c fe ff       	call   c0000898 <strcmp>
c001cc6f:	83 c4 10             	add    esp,0x10
c001cc72:	85 c0                	test   eax,eax
c001cc74:	75 05                	jne    c001cc7b <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cc76:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cc79:	eb 0b                	jmp    c001cc86 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cc7b:	83 c6 10             	add    esi,0x10
c001cc7e:	47                   	inc    edi
c001cc7f:	eb d0                	jmp    c001cc51 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cc81:	43                   	inc    ebx
c001cc82:	eb bc                	jmp    c001cc40 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cc84:	31 c0                	xor    eax,eax
c001cc86:	5b                   	pop    ebx
c001cc87:	5e                   	pop    esi
c001cc88:	5f                   	pop    edi
c001cc89:	c3                   	ret    

c001cc8a <Thr::loadKernelSymbolTable(char const*)>:
c001cc8a:	55                   	push   ebp
c001cc8b:	57                   	push   edi
c001cc8c:	56                   	push   esi
c001cc8d:	53                   	push   ebx
c001cc8e:	83 ec 68             	sub    esp,0x68
c001cc91:	8b 35 70 25 03 c0    	mov    esi,DWORD PTR ds:0xc0032570
c001cc97:	68 14 01 00 00       	push   0x114
c001cc9c:	e8 eb 2b ff ff       	call   c000f88c <malloc>
c001cca1:	83 c4 0c             	add    esp,0xc
c001cca4:	89 c3                	mov    ebx,eax
c001cca6:	56                   	push   esi
c001cca7:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001ccab:	50                   	push   eax
c001ccac:	e8 a5 61 ff ff       	call   c0012e56 <File::File(char const*, Process*)>
c001ccb1:	5e                   	pop    esi
c001ccb2:	5f                   	pop    edi
c001ccb3:	6a 01                	push   0x1
c001ccb5:	53                   	push   ebx
c001ccb6:	e8 ff 61 ff ff       	call   c0012eba <File::open(FileOpenMode)>
c001ccbb:	83 c4 10             	add    esp,0x10
c001ccbe:	85 c0                	test   eax,eax
c001ccc0:	74 0a                	je     c001cccc <Thr::loadKernelSymbolTable(char const*)+0x42>
c001ccc2:	83 ec 0c             	sub    esp,0xc
c001ccc5:	68 dc c9 02 c0       	push   0xc002c9dc
c001ccca:	eb 34                	jmp    c001cd00 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cccc:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001ccd4:	83 ec 0c             	sub    esp,0xc
c001ccd7:	6a 34                	push   0x34
c001ccd9:	e8 ae 2b ff ff       	call   c000f88c <malloc>
c001ccde:	59                   	pop    ecx
c001ccdf:	89 c7                	mov    edi,eax
c001cce1:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cce5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cce7:	56                   	push   esi
c001cce8:	57                   	push   edi
c001cce9:	6a 00                	push   0x0
c001cceb:	6a 34                	push   0x34
c001cced:	53                   	push   ebx
c001ccee:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ccf1:	83 c4 20             	add    esp,0x20
c001ccf4:	85 c0                	test   eax,eax
c001ccf6:	74 17                	je     c001cd0f <Thr::loadKernelSymbolTable(char const*)+0x85>
c001ccf8:	83 ec 0c             	sub    esp,0xc
c001ccfb:	68 f3 c9 02 c0       	push   0xc002c9f3
c001cd00:	e8 28 d6 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c001cd05:	83 c4 10             	add    esp,0x10
c001cd08:	31 c0                	xor    eax,eax
c001cd0a:	e9 31 02 00 00       	jmp    c001cf40 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cd0f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cd15:	75 e1                	jne    c001ccf8 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd17:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cd1a:	85 c0                	test   eax,eax
c001cd1c:	74 da                	je     c001ccf8 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd1e:	52                   	push   edx
c001cd1f:	31 d2                	xor    edx,edx
c001cd21:	52                   	push   edx
c001cd22:	50                   	push   eax
c001cd23:	53                   	push   ebx
c001cd24:	e8 4f 62 ff ff       	call   c0012f78 <File::seek(unsigned long long)>
c001cd29:	83 c4 10             	add    esp,0x10
c001cd2c:	85 c0                	test   eax,eax
c001cd2e:	75 c8                	jne    c001ccf8 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd30:	83 ec 0c             	sub    esp,0xc
c001cd33:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd37:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd3b:	31 ed                	xor    ebp,ebp
c001cd3d:	0f af c2             	imul   eax,edx
c001cd40:	50                   	push   eax
c001cd41:	e8 46 2b ff ff       	call   c000f88c <malloc>
c001cd46:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cd48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd4c:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd53:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd57:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd5b:	0f af c2             	imul   eax,edx
c001cd5e:	99                   	cdq    
c001cd5f:	52                   	push   edx
c001cd60:	50                   	push   eax
c001cd61:	53                   	push   ebx
c001cd62:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd65:	83 c4 20             	add    esp,0x20
c001cd68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cd70:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cd78:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cd80:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cd88:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cd8c:	0f 86 aa 00 00 00    	jbe    c001ce3c <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cd92:	0f b7 f5             	movzx  esi,bp
c001cd95:	6b f6 28             	imul   esi,esi,0x28
c001cd98:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cd9c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cd9f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cda3:	50                   	push   eax
c001cda4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cda8:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cdac:	8b 16                	mov    edx,DWORD PTR [esi]
c001cdae:	6b c0 28             	imul   eax,eax,0x28
c001cdb1:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cdb5:	89 d0                	mov    eax,edx
c001cdb7:	31 d2                	xor    edx,edx
c001cdb9:	52                   	push   edx
c001cdba:	50                   	push   eax
c001cdbb:	53                   	push   ebx
c001cdbc:	e8 b7 61 ff ff       	call   c0012f78 <File::seek(unsigned long long)>
c001cdc1:	83 c4 0c             	add    esp,0xc
c001cdc4:	6a 20                	push   0x20
c001cdc6:	6a 00                	push   0x0
c001cdc8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cdcc:	52                   	push   edx
c001cdcd:	e8 7e 39 fe ff       	call   c0000750 <memset>
c001cdd2:	58                   	pop    eax
c001cdd3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cdd5:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cdd9:	51                   	push   ecx
c001cdda:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cdde:	52                   	push   edx
c001cddf:	6a 00                	push   0x0
c001cde1:	6a 1f                	push   0x1f
c001cde3:	53                   	push   ebx
c001cde4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cde7:	83 c4 18             	add    esp,0x18
c001cdea:	68 0a ca 02 c0       	push   0xc002ca0a
c001cdef:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cdf3:	52                   	push   edx
c001cdf4:	e8 9f 3a fe ff       	call   c0000898 <strcmp>
c001cdf9:	83 c4 10             	add    esp,0x10
c001cdfc:	85 c0                	test   eax,eax
c001cdfe:	75 0f                	jne    c001ce0f <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ce00:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce03:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce0f:	50                   	push   eax
c001ce10:	50                   	push   eax
c001ce11:	68 12 ca 02 c0       	push   0xc002ca12
c001ce16:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ce1a:	50                   	push   eax
c001ce1b:	e8 78 3a fe ff       	call   c0000898 <strcmp>
c001ce20:	83 c4 10             	add    esp,0x10
c001ce23:	85 c0                	test   eax,eax
c001ce25:	75 0f                	jne    c001ce36 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ce27:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce2a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ce2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce32:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ce36:	45                   	inc    ebp
c001ce37:	e9 4c ff ff ff       	jmp    c001cd88 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ce3c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ce41:	75 10                	jne    c001ce53 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ce43:	83 ec 0c             	sub    esp,0xc
c001ce46:	68 1a ca 02 c0       	push   0xc002ca1a
c001ce4b:	e8 dd d4 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c001ce50:	83 c4 10             	add    esp,0x10
c001ce53:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001ce58:	75 10                	jne    c001ce6a <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001ce5a:	83 ec 0c             	sub    esp,0xc
c001ce5d:	68 1a ca 02 c0       	push   0xc002ca1a
c001ce62:	e8 c6 d4 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c001ce67:	83 c4 10             	add    esp,0x10
c001ce6a:	31 d2                	xor    edx,edx
c001ce6c:	50                   	push   eax
c001ce6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce71:	52                   	push   edx
c001ce72:	50                   	push   eax
c001ce73:	53                   	push   ebx
c001ce74:	e8 ff 60 ff ff       	call   c0012f78 <File::seek(unsigned long long)>
c001ce79:	5a                   	pop    edx
c001ce7a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ce7e:	e8 09 2a ff ff       	call   c000f88c <malloc>
c001ce83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce87:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ce8b:	31 c9                	xor    ecx,ecx
c001ce8d:	5e                   	pop    esi
c001ce8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce90:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001ce94:	55                   	push   ebp
c001ce95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce99:	51                   	push   ecx
c001ce9a:	52                   	push   edx
c001ce9b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ce9f:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cea3:	53                   	push   ebx
c001cea4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cea7:	83 c4 14             	add    esp,0x14
c001ceaa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ceae:	e8 d9 29 ff ff       	call   c000f88c <malloc>
c001ceb3:	89 c6                	mov    esi,eax
c001ceb5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ceb7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ceba:	56                   	push   esi
c001cebb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cebf:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cec3:	51                   	push   ecx
c001cec4:	52                   	push   edx
c001cec5:	53                   	push   ebx
c001cec6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cec9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cecd:	8b 15 20 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032520
c001ced3:	83 c4 1c             	add    esp,0x1c
c001ced6:	c1 e8 04             	shr    eax,0x4
c001ced9:	89 04 95 a0 23 03 c0 	mov    DWORD PTR [edx*4-0x3ffcdc60],eax
c001cee0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cee4:	31 d2                	xor    edx,edx
c001cee6:	52                   	push   edx
c001cee7:	50                   	push   eax
c001cee8:	53                   	push   ebx
c001cee9:	e8 8a 60 ff ff       	call   c0012f78 <File::seek(unsigned long long)>
c001ceee:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cef0:	31 d2                	xor    edx,edx
c001cef2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cef5:	56                   	push   esi
c001cef6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cefa:	52                   	push   edx
c001cefb:	50                   	push   eax
c001cefc:	53                   	push   ebx
c001cefd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf00:	83 c4 14             	add    esp,0x14
c001cf03:	53                   	push   ebx
c001cf04:	e8 0f 60 ff ff       	call   c0012f18 <File::close()>
c001cf09:	5d                   	pop    ebp
c001cf0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf0e:	e8 89 29 ff ff       	call   c000f89c <free>
c001cf13:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf16:	e8 81 29 ff ff       	call   c000f89c <free>
c001cf1b:	a1 20 25 03 c0       	mov    eax,ds:0xc0032520
c001cf20:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf24:	8d 50 01             	lea    edx,[eax+0x1]
c001cf27:	89 0c 85 a0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb60],ecx
c001cf2e:	89 34 85 20 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdbe0],esi
c001cf35:	89 15 20 25 03 c0    	mov    DWORD PTR ds:0xc0032520,edx
c001cf3b:	83 c4 10             	add    esp,0x10
c001cf3e:	b0 01                	mov    al,0x1
c001cf40:	83 c4 5c             	add    esp,0x5c
c001cf43:	5b                   	pop    ebx
c001cf44:	5e                   	pop    esi
c001cf45:	5f                   	pop    edi
c001cf46:	5d                   	pop    ebp
c001cf47:	c3                   	ret    

c001cf48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cf48:	55                   	push   ebp
c001cf49:	57                   	push   edi
c001cf4a:	56                   	push   esi
c001cf4b:	53                   	push   ebx
c001cf4c:	81 ec 68 03 00 00    	sub    esp,0x368
c001cf52:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cf59:	8b 1d 70 25 03 c0    	mov    ebx,DWORD PTR ds:0xc0032570
c001cf5f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cf63:	68 14 01 00 00       	push   0x114
c001cf68:	e8 1f 29 ff ff       	call   c000f88c <malloc>
c001cf6d:	83 c4 0c             	add    esp,0xc
c001cf70:	89 c5                	mov    ebp,eax
c001cf72:	53                   	push   ebx
c001cf73:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cf7a:	50                   	push   eax
c001cf7b:	e8 d6 5e ff ff       	call   c0012e56 <File::File(char const*, Process*)>
c001cf80:	5e                   	pop    esi
c001cf81:	5f                   	pop    edi
c001cf82:	6a 01                	push   0x1
c001cf84:	55                   	push   ebp
c001cf85:	e8 30 5f ff ff       	call   c0012eba <File::open(FileOpenMode)>
c001cf8a:	83 c4 10             	add    esp,0x10
c001cf8d:	85 c0                	test   eax,eax
c001cf8f:	0f 85 a7 06 00 00    	jne    c001d63c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cf95:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cf9d:	83 ec 0c             	sub    esp,0xc
c001cfa0:	6a 34                	push   0x34
c001cfa2:	e8 e5 28 ff ff       	call   c000f88c <malloc>
c001cfa7:	5b                   	pop    ebx
c001cfa8:	89 c7                	mov    edi,eax
c001cfaa:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cfae:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cfb1:	53                   	push   ebx
c001cfb2:	57                   	push   edi
c001cfb3:	6a 00                	push   0x0
c001cfb5:	6a 34                	push   0x34
c001cfb7:	55                   	push   ebp
c001cfb8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cfbb:	83 c4 20             	add    esp,0x20
c001cfbe:	85 c0                	test   eax,eax
c001cfc0:	0f 85 76 06 00 00    	jne    c001d63c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cfc6:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cfcc:	0f 85 6a 06 00 00    	jne    c001d63c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cfd2:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cfd5:	85 c0                	test   eax,eax
c001cfd7:	0f 84 5f 06 00 00    	je     c001d63c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cfdd:	31 d2                	xor    edx,edx
c001cfdf:	51                   	push   ecx
c001cfe0:	52                   	push   edx
c001cfe1:	50                   	push   eax
c001cfe2:	55                   	push   ebp
c001cfe3:	e8 90 5f ff ff       	call   c0012f78 <File::seek(unsigned long long)>
c001cfe8:	83 c4 10             	add    esp,0x10
c001cfeb:	85 c0                	test   eax,eax
c001cfed:	0f 85 49 06 00 00    	jne    c001d63c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cff3:	83 ec 0c             	sub    esp,0xc
c001cff6:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001cff9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cffd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d001:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d005:	0f af c2             	imul   eax,edx
c001d008:	50                   	push   eax
c001d009:	e8 7e 28 ff ff       	call   c000f88c <malloc>
c001d00e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d011:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d015:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d018:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d01c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d020:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d024:	0f af c2             	imul   eax,edx
c001d027:	99                   	cdq    
c001d028:	52                   	push   edx
c001d029:	50                   	push   eax
c001d02a:	55                   	push   ebp
c001d02b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d02e:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d031:	83 c4 20             	add    esp,0x20
c001d034:	85 c0                	test   eax,eax
c001d036:	0f 84 00 06 00 00    	je     c001d63c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d03c:	52                   	push   edx
c001d03d:	31 d2                	xor    edx,edx
c001d03f:	52                   	push   edx
c001d040:	50                   	push   eax
c001d041:	55                   	push   ebp
c001d042:	e8 31 5f ff ff       	call   c0012f78 <File::seek(unsigned long long)>
c001d047:	83 c4 10             	add    esp,0x10
c001d04a:	85 c0                	test   eax,eax
c001d04c:	0f 85 ea 05 00 00    	jne    c001d63c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d052:	83 ec 0c             	sub    esp,0xc
c001d055:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d059:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d05d:	31 f6                	xor    esi,esi
c001d05f:	0f af c2             	imul   eax,edx
c001d062:	50                   	push   eax
c001d063:	e8 24 28 ff ff       	call   c000f88c <malloc>
c001d068:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d06b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d06f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d072:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d076:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d07a:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d07e:	0f af c2             	imul   eax,edx
c001d081:	99                   	cdq    
c001d082:	52                   	push   edx
c001d083:	50                   	push   eax
c001d084:	55                   	push   ebp
c001d085:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d088:	83 c4 20             	add    esp,0x20
c001d08b:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d08f:	0f 86 8a 00 00 00    	jbe    c001d11f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d095:	0f b7 de             	movzx  ebx,si
c001d098:	c1 e3 05             	shl    ebx,0x5
c001d09b:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d09f:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d0a2:	75 75                	jne    c001d119 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d0a4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d0a7:	31 d2                	xor    edx,edx
c001d0a9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d0ad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d0b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d0b4:	50                   	push   eax
c001d0b5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d0b8:	52                   	push   edx
c001d0b9:	50                   	push   eax
c001d0ba:	55                   	push   ebp
c001d0bb:	e8 b8 5e ff ff       	call   c0012f78 <File::seek(unsigned long long)>
c001d0c0:	83 c4 10             	add    esp,0x10
c001d0c3:	85 c0                	test   eax,eax
c001d0c5:	0f 85 71 05 00 00    	jne    c001d63c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d0cb:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d0d2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0d5:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d0d9:	31 d2                	xor    edx,edx
c001d0db:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d0df:	83 ec 0c             	sub    esp,0xc
c001d0e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d0e6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0ed:	50                   	push   eax
c001d0ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d0f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0f6:	52                   	push   edx
c001d0f7:	50                   	push   eax
c001d0f8:	55                   	push   ebp
c001d0f9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0fc:	83 c4 1c             	add    esp,0x1c
c001d0ff:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d102:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d105:	50                   	push   eax
c001d106:	6a 00                	push   0x0
c001d108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d10c:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d110:	50                   	push   eax
c001d111:	e8 3a 36 fe ff       	call   c0000750 <memset>
c001d116:	83 c4 10             	add    esp,0x10
c001d119:	46                   	inc    esi
c001d11a:	e9 6c ff ff ff       	jmp    c001d08b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d11f:	53                   	push   ebx
c001d120:	31 db                	xor    ebx,ebx
c001d122:	68 00 01 00 00       	push   0x100
c001d127:	6a 00                	push   0x0
c001d129:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d12d:	50                   	push   eax
c001d12e:	e8 1d 36 fe ff       	call   c0000750 <memset>
c001d133:	83 c4 0c             	add    esp,0xc
c001d136:	68 00 01 00 00       	push   0x100
c001d13b:	6a 00                	push   0x0
c001d13d:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d144:	50                   	push   eax
c001d145:	e8 06 36 fe ff       	call   c0000750 <memset>
c001d14a:	83 c4 10             	add    esp,0x10
c001d14d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d155:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d15d:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d165:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d16d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d175:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d179:	0f 86 30 01 00 00    	jbe    c001d2af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d17f:	0f b7 f3             	movzx  esi,bx
c001d182:	6b f6 28             	imul   esi,esi,0x28
c001d185:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d189:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d18c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d190:	52                   	push   edx
c001d191:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d195:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d199:	8b 06                	mov    eax,DWORD PTR [esi]
c001d19b:	6b d2 28             	imul   edx,edx,0x28
c001d19e:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d1a2:	31 d2                	xor    edx,edx
c001d1a4:	52                   	push   edx
c001d1a5:	50                   	push   eax
c001d1a6:	55                   	push   ebp
c001d1a7:	e8 cc 5d ff ff       	call   c0012f78 <File::seek(unsigned long long)>
c001d1ac:	83 c4 0c             	add    esp,0xc
c001d1af:	6a 20                	push   0x20
c001d1b1:	6a 00                	push   0x0
c001d1b3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d1ba:	51                   	push   ecx
c001d1bb:	e8 90 35 fe ff       	call   c0000750 <memset>
c001d1c0:	59                   	pop    ecx
c001d1c1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d1c4:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d1c8:	52                   	push   edx
c001d1c9:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d1d0:	51                   	push   ecx
c001d1d1:	6a 00                	push   0x0
c001d1d3:	6a 1f                	push   0x1f
c001d1d5:	55                   	push   ebp
c001d1d6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d1d9:	83 c4 1c             	add    esp,0x1c
c001d1dc:	6a 09                	push   0x9
c001d1de:	68 34 ca 02 c0       	push   0xc002ca34
c001d1e3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d1ea:	51                   	push   ecx
c001d1eb:	e8 5c 34 fe ff       	call   c000064c <memcmp>
c001d1f0:	83 c4 10             	add    esp,0x10
c001d1f3:	85 c0                	test   eax,eax
c001d1f5:	75 21                	jne    c001d218 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d1f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d1ff:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d203:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d207:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d20a:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d211:	89 d0                	mov    eax,edx
c001d213:	40                   	inc    eax
c001d214:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d218:	50                   	push   eax
c001d219:	6a 09                	push   0x9
c001d21b:	68 3e ca 02 c0       	push   0xc002ca3e
c001d220:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d227:	50                   	push   eax
c001d228:	e8 1f 34 fe ff       	call   c000064c <memcmp>
c001d22d:	83 c4 10             	add    esp,0x10
c001d230:	85 c0                	test   eax,eax
c001d232:	75 21                	jne    c001d255 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d234:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d238:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d23c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d240:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d244:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d247:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d24e:	89 d0                	mov    eax,edx
c001d250:	40                   	inc    eax
c001d251:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d255:	50                   	push   eax
c001d256:	50                   	push   eax
c001d257:	68 0a ca 02 c0       	push   0xc002ca0a
c001d25c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d263:	50                   	push   eax
c001d264:	e8 2f 36 fe ff       	call   c0000898 <strcmp>
c001d269:	83 c4 10             	add    esp,0x10
c001d26c:	85 c0                	test   eax,eax
c001d26e:	75 0f                	jne    c001d27f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d270:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d273:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d277:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d27b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d27f:	50                   	push   eax
c001d280:	50                   	push   eax
c001d281:	68 12 ca 02 c0       	push   0xc002ca12
c001d286:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d28d:	50                   	push   eax
c001d28e:	e8 05 36 fe ff       	call   c0000898 <strcmp>
c001d293:	83 c4 10             	add    esp,0x10
c001d296:	85 c0                	test   eax,eax
c001d298:	75 0f                	jne    c001d2a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d29a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d29d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2a5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d2a9:	43                   	inc    ebx
c001d2aa:	e9 c6 fe ff ff       	jmp    c001d175 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d2af:	31 d2                	xor    edx,edx
c001d2b1:	50                   	push   eax
c001d2b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d2b6:	52                   	push   edx
c001d2b7:	50                   	push   eax
c001d2b8:	55                   	push   ebp
c001d2b9:	e8 ba 5c ff ff       	call   c0012f78 <File::seek(unsigned long long)>
c001d2be:	58                   	pop    eax
c001d2bf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d2c3:	e8 c4 25 ff ff       	call   c000f88c <malloc>
c001d2c8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d2cb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d2cf:	31 d2                	xor    edx,edx
c001d2d1:	58                   	pop    eax
c001d2d2:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d2d6:	53                   	push   ebx
c001d2d7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d2db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2df:	52                   	push   edx
c001d2e0:	50                   	push   eax
c001d2e1:	55                   	push   ebp
c001d2e2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2e5:	83 c4 14             	add    esp,0x14
c001d2e8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2ec:	e8 9b 25 ff ff       	call   c000f88c <malloc>
c001d2f1:	31 d2                	xor    edx,edx
c001d2f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d2f7:	83 c4 0c             	add    esp,0xc
c001d2fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2fe:	52                   	push   edx
c001d2ff:	50                   	push   eax
c001d300:	55                   	push   ebp
c001d301:	e8 72 5c ff ff       	call   c0012f78 <File::seek(unsigned long long)>
c001d306:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d309:	31 d2                	xor    edx,edx
c001d30b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d30e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d312:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d316:	52                   	push   edx
c001d317:	50                   	push   eax
c001d318:	55                   	push   ebp
c001d319:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d31c:	83 c4 20             	add    esp,0x20
c001d31f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d327:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d32b:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d32f:	0f 84 0b 03 00 00    	je     c001d640 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d335:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d33c:	31 d2                	xor    edx,edx
c001d33e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d342:	c1 e8 03             	shr    eax,0x3
c001d345:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d349:	51                   	push   ecx
c001d34a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d34e:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d352:	52                   	push   edx
c001d353:	50                   	push   eax
c001d354:	55                   	push   ebp
c001d355:	e8 1e 5c ff ff       	call   c0012f78 <File::seek(unsigned long long)>
c001d35a:	5b                   	pop    ebx
c001d35b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d35f:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d366:	e8 21 25 ff ff       	call   c000f88c <malloc>
c001d36b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d36e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d372:	31 d2                	xor    edx,edx
c001d374:	5e                   	pop    esi
c001d375:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d379:	50                   	push   eax
c001d37a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d37e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d382:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d389:	52                   	push   edx
c001d38a:	50                   	push   eax
c001d38b:	55                   	push   ebp
c001d38c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d38f:	83 c4 20             	add    esp,0x20
c001d392:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d39a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d39e:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d3a2:	0f 8d 7c 02 00 00    	jge    c001d624 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d3a8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d3ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3b0:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d3b5:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d3b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d3bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3c0:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d3c4:	89 d8                	mov    eax,ebx
c001d3c6:	c1 e8 08             	shr    eax,0x8
c001d3c9:	89 c6                	mov    esi,eax
c001d3cb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d3cf:	c1 e6 04             	shl    esi,0x4
c001d3d2:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d3d6:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d3d9:	85 d2                	test   edx,edx
c001d3db:	0f 85 bf 00 00 00    	jne    c001d4a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d3e1:	83 ec 0c             	sub    esp,0xc
c001d3e4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3e8:	03 06                	add    eax,DWORD PTR [esi]
c001d3ea:	50                   	push   eax
c001d3eb:	e8 4b f8 ff ff       	call   c001cc3b <Thr::getAddressOfKernelSymbol(char const*)>
c001d3f0:	83 c4 10             	add    esp,0x10
c001d3f3:	89 c2                	mov    edx,eax
c001d3f5:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d3fa:	85 c0                	test   eax,eax
c001d3fc:	0f 85 9e 00 00 00    	jne    c001d4a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d402:	83 ec 0c             	sub    esp,0xc
c001d405:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d409:	03 06                	add    eax,DWORD PTR [esi]
c001d40b:	50                   	push   eax
c001d40c:	e8 2e 11 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001d411:	83 c4 10             	add    esp,0x10
c001d414:	89 c2                	mov    edx,eax
c001d416:	85 c0                	test   eax,eax
c001d418:	0f 85 82 00 00 00    	jne    c001d4a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d41e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d422:	50                   	push   eax
c001d423:	50                   	push   eax
c001d424:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d428:	03 06                	add    eax,DWORD PTR [esi]
c001d42a:	50                   	push   eax
c001d42b:	68 48 ca 02 c0       	push   0xc002ca48
c001d430:	e8 c2 54 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001d435:	58                   	pop    eax
c001d436:	5a                   	pop    edx
c001d437:	68 62 ca 02 c0       	push   0xc002ca62
c001d43c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d443:	50                   	push   eax
c001d444:	e8 c3 33 fe ff       	call   c000080c <strcpy>
c001d449:	59                   	pop    ecx
c001d44a:	58                   	pop    eax
c001d44b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d44f:	03 06                	add    eax,DWORD PTR [esi]
c001d451:	50                   	push   eax
c001d452:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d459:	50                   	push   eax
c001d45a:	e8 ed 34 fe ff       	call   c000094c <strcat>
c001d45f:	58                   	pop    eax
c001d460:	5a                   	pop    edx
c001d461:	68 f8 ca 02 c0       	push   0xc002caf8
c001d466:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d46d:	50                   	push   eax
c001d46e:	e8 d9 34 fe ff       	call   c000094c <strcat>
c001d473:	83 c4 10             	add    esp,0x10
c001d476:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d47b:	0f 84 5d 01 00 00    	je     c001d5de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d481:	83 ec 0c             	sub    esp,0xc
c001d484:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d48b:	50                   	push   eax
c001d48c:	e8 9c ce ff ff       	call   c001a32d <Krnl::panic(char const*)>
c001d491:	83 c4 10             	add    esp,0x10
c001d494:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d498:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d49c:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d4a0:	80 fb 01             	cmp    bl,0x1
c001d4a3:	0f 85 88 00 00 00    	jne    c001d531 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d4a9:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d4b0:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d4b4:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d4b8:	01 ce                	add    esi,ecx
c001d4ba:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d4c0:	0f 94 c0             	sete   al
c001d4c3:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d4c9:	0f 94 c3             	sete   bl
c001d4cc:	09 c3                	or     ebx,eax
c001d4ce:	8b 06                	mov    eax,DWORD PTR [esi]
c001d4d0:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d4d5:	74 41                	je     c001d518 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d4d7:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d4da:	84 db                	test   bl,bl
c001d4dc:	75 15                	jne    c001d4f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d4de:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d4e2:	66 83 f8 0c          	cmp    ax,0xc
c001d4e6:	76 05                	jbe    c001d4ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d4e8:	b8 0c 00 00 00       	mov    eax,0xc
c001d4ed:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d4f1:	76 37                	jbe    c001d52a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d4f3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d4f7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4fc:	0f 84 dc 00 00 00    	je     c001d5de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d502:	83 ec 0c             	sub    esp,0xc
c001d505:	68 79 ca 02 c0       	push   0xc002ca79
c001d50a:	e8 1e ce ff ff       	call   c001a32d <Krnl::panic(char const*)>
c001d50f:	83 c4 10             	add    esp,0x10
c001d512:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d516:	eb 12                	jmp    c001d52a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d518:	01 c1                	add    ecx,eax
c001d51a:	84 db                	test   bl,bl
c001d51c:	75 0c                	jne    c001d52a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d51e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d522:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d526:	77 02                	ja     c001d52a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d528:	01 d1                	add    ecx,edx
c001d52a:	89 0e                	mov    DWORD PTR [esi],ecx
c001d52c:	e9 ea 00 00 00       	jmp    c001d61b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d531:	80 fb 02             	cmp    bl,0x2
c001d534:	75 7c                	jne    c001d5b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d536:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d53d:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d541:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d545:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d54b:	74 20                	je     c001d56d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d54d:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d553:	74 18                	je     c001d56d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d555:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d559:	b9 0a 00 00 00       	mov    ecx,0xa
c001d55e:	66 83 f8 0e          	cmp    ax,0xe
c001d562:	77 03                	ja     c001d567 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d564:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d567:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d56b:	76 1f                	jbe    c001d58c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d56d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d571:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d576:	74 66                	je     c001d5de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d578:	83 ec 0c             	sub    esp,0xc
c001d57b:	68 95 ca 02 c0       	push   0xc002ca95
c001d580:	e8 a8 cd ff ff       	call   c001a32d <Krnl::panic(char const*)>
c001d585:	83 c4 10             	add    esp,0x10
c001d588:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d58c:	8b 06                	mov    eax,DWORD PTR [esi]
c001d58e:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d593:	74 13                	je     c001d5a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d595:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d599:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d5a0:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d5a4:	01 c8                	add    eax,ecx
c001d5a6:	eb 04                	jmp    c001d5ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d5a8:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d5ac:	01 c2                	add    edx,eax
c001d5ae:	89 16                	mov    DWORD PTR [esi],edx
c001d5b0:	eb 69                	jmp    c001d61b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d5b2:	0f b6 db             	movzx  ebx,bl
c001d5b5:	50                   	push   eax
c001d5b6:	50                   	push   eax
c001d5b7:	53                   	push   ebx
c001d5b8:	68 b1 ca 02 c0       	push   0xc002cab1
c001d5bd:	e8 35 53 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001d5c2:	83 c4 10             	add    esp,0x10
c001d5c5:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5ca:	74 12                	je     c001d5de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d5cc:	83 ec 0c             	sub    esp,0xc
c001d5cf:	68 bc ca 02 c0       	push   0xc002cabc
c001d5d4:	e8 54 cd ff ff       	call   c001a32d <Krnl::panic(char const*)>
c001d5d9:	83 c4 10             	add    esp,0x10
c001d5dc:	eb 3d                	jmp    c001d61b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d5de:	83 ec 0c             	sub    esp,0xc
c001d5e1:	55                   	push   ebp
c001d5e2:	e8 31 59 ff ff       	call   c0012f18 <File::close()>
c001d5e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d5ea:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d5ed:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d5f0:	59                   	pop    ecx
c001d5f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5f5:	e8 a2 22 ff ff       	call   c000f89c <free>
c001d5fa:	5b                   	pop    ebx
c001d5fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d5ff:	e8 98 22 ff ff       	call   c000f89c <free>
c001d604:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d607:	e8 90 22 ff ff       	call   c000f89c <free>
c001d60c:	5e                   	pop    esi
c001d60d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d611:	e8 86 22 ff ff       	call   c000f89c <free>
c001d616:	83 c4 10             	add    esp,0x10
c001d619:	eb 21                	jmp    c001d63c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d61b:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d61f:	e9 76 fd ff ff       	jmp    c001d39a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d624:	83 ec 0c             	sub    esp,0xc
c001d627:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d62b:	e8 6c 22 ff ff       	call   c000f89c <free>
c001d630:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d634:	83 c4 10             	add    esp,0x10
c001d637:	e9 eb fc ff ff       	jmp    c001d327 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d63c:	31 c0                	xor    eax,eax
c001d63e:	eb 33                	jmp    c001d673 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d640:	83 ec 0c             	sub    esp,0xc
c001d643:	55                   	push   ebp
c001d644:	e8 cf 58 ff ff       	call   c0012f18 <File::close()>
c001d649:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d64c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d64f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d652:	58                   	pop    eax
c001d653:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d657:	e8 40 22 ff ff       	call   c000f89c <free>
c001d65c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d65f:	e8 38 22 ff ff       	call   c000f89c <free>
c001d664:	5a                   	pop    edx
c001d665:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d669:	e8 2e 22 ff ff       	call   c000f89c <free>
c001d66e:	83 c4 10             	add    esp,0x10
c001d671:	b0 01                	mov    al,0x1
c001d673:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d679:	5b                   	pop    ebx
c001d67a:	5e                   	pop    esi
c001d67b:	5f                   	pop    edi
c001d67c:	5d                   	pop    ebp
c001d67d:	c3                   	ret    

c001d67e <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d67e:	56                   	push   esi
c001d67f:	31 d2                	xor    edx,edx
c001d681:	53                   	push   ebx
c001d682:	8b 1d 80 1d 03 c0    	mov    ebx,DWORD PTR ds:0xc0031d80
c001d688:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d68c:	39 d3                	cmp    ebx,edx
c001d68e:	7e 1b                	jle    c001d6ab <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d690:	8b 04 95 a0 1f 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffce060]
c001d697:	39 c8                	cmp    eax,ecx
c001d699:	77 0d                	ja     c001d6a8 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d69b:	8b 34 95 a0 1d 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffce260]
c001d6a2:	01 c6                	add    esi,eax
c001d6a4:	39 ce                	cmp    esi,ecx
c001d6a6:	77 05                	ja     c001d6ad <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d6a8:	42                   	inc    edx
c001d6a9:	eb e1                	jmp    c001d68c <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d6ab:	31 c0                	xor    eax,eax
c001d6ad:	5b                   	pop    ebx
c001d6ae:	5e                   	pop    esi
c001d6af:	c3                   	ret    

c001d6b0 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d6b0:	53                   	push   ebx
c001d6b1:	31 c0                	xor    eax,eax
c001d6b3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d6b7:	8b 1d 80 1d 03 c0    	mov    ebx,DWORD PTR ds:0xc0031d80
c001d6bd:	39 c3                	cmp    ebx,eax
c001d6bf:	7e 22                	jle    c001d6e3 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d6c1:	8b 14 85 a0 1f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce060]
c001d6c8:	39 ca                	cmp    edx,ecx
c001d6ca:	77 14                	ja     c001d6e0 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d6cc:	03 14 85 a0 1d 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffce260]
c001d6d3:	39 ca                	cmp    edx,ecx
c001d6d5:	76 09                	jbe    c001d6e0 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d6d7:	8b 04 85 a0 21 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcde60]
c001d6de:	eb 05                	jmp    c001d6e5 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d6e0:	40                   	inc    eax
c001d6e1:	eb da                	jmp    c001d6bd <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d6e3:	31 c0                	xor    eax,eax
c001d6e5:	5b                   	pop    ebx
c001d6e6:	c3                   	ret    

c001d6e7 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d6e7:	53                   	push   ebx
c001d6e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d6ec:	53                   	push   ebx
c001d6ed:	e8 8c ff ff ff       	call   c001d67e <Thr::getDriverBaseFromAddress(unsigned long)>
c001d6f2:	5a                   	pop    edx
c001d6f3:	31 d2                	xor    edx,edx
c001d6f5:	85 c0                	test   eax,eax
c001d6f7:	74 04                	je     c001d6fd <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d6f9:	89 da                	mov    edx,ebx
c001d6fb:	29 c2                	sub    edx,eax
c001d6fd:	89 d0                	mov    eax,edx
c001d6ff:	5b                   	pop    ebx
c001d700:	c3                   	ret    

c001d701 <Thr::loadDLL(char const*, bool)>:
c001d701:	55                   	push   ebp
c001d702:	57                   	push   edi
c001d703:	56                   	push   esi
c001d704:	53                   	push   ebx
c001d705:	81 ec 34 01 00 00    	sub    esp,0x134
c001d70b:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d712:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d719:	56                   	push   esi
c001d71a:	68 d4 ca 02 c0       	push   0xc002cad4
c001d71f:	e8 d3 51 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001d724:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d72b:	e8 5c 21 ff ff       	call   c000f88c <malloc>
c001d730:	83 c4 0c             	add    esp,0xc
c001d733:	89 c3                	mov    ebx,eax
c001d735:	ff 35 70 25 03 c0    	push   DWORD PTR ds:0xc0032570
c001d73b:	56                   	push   esi
c001d73c:	50                   	push   eax
c001d73d:	e8 14 57 ff ff       	call   c0012e56 <File::File(char const*, Process*)>
c001d742:	83 c4 10             	add    esp,0x10
c001d745:	85 db                	test   ebx,ebx
c001d747:	75 3c                	jne    c001d785 <Thr::loadDLL(char const*, bool)+0x84>
c001d749:	89 f8                	mov    eax,edi
c001d74b:	84 c0                	test   al,al
c001d74d:	0f 84 cc 01 00 00    	je     c001d91f <Thr::loadDLL(char const*, bool)+0x21e>
c001d753:	55                   	push   ebp
c001d754:	55                   	push   ebp
c001d755:	68 e5 ca 02 c0       	push   0xc002cae5
c001d75a:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d75e:	55                   	push   ebp
c001d75f:	e8 a8 30 fe ff       	call   c000080c <strcpy>
c001d764:	58                   	pop    eax
c001d765:	5a                   	pop    edx
c001d766:	56                   	push   esi
c001d767:	55                   	push   ebp
c001d768:	e8 df 31 fe ff       	call   c000094c <strcat>
c001d76d:	59                   	pop    ecx
c001d76e:	58                   	pop    eax
c001d76f:	68 f8 ca 02 c0       	push   0xc002caf8
c001d774:	55                   	push   ebp
c001d775:	e8 d2 31 fe ff       	call   c000094c <strcat>
c001d77a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d77d:	e8 ab cb ff ff       	call   c001a32d <Krnl::panic(char const*)>
c001d782:	83 c4 10             	add    esp,0x10
c001d785:	51                   	push   ecx
c001d786:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d78a:	50                   	push   eax
c001d78b:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d78f:	50                   	push   eax
c001d790:	53                   	push   ebx
c001d791:	e8 d0 59 ff ff       	call   c0013166 <File::stat(unsigned long long*, bool*)>
c001d796:	83 c4 10             	add    esp,0x10
c001d799:	85 db                	test   ebx,ebx
c001d79b:	74 0c                	je     c001d7a9 <Thr::loadDLL(char const*, bool)+0xa8>
c001d79d:	83 ec 0c             	sub    esp,0xc
c001d7a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d7a2:	53                   	push   ebx
c001d7a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d7a6:	83 c4 10             	add    esp,0x10
c001d7a9:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d7ae:	75 0a                	jne    c001d7ba <Thr::loadDLL(char const*, bool)+0xb9>
c001d7b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d7b4:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d7b8:	75 3c                	jne    c001d7f6 <Thr::loadDLL(char const*, bool)+0xf5>
c001d7ba:	89 f8                	mov    eax,edi
c001d7bc:	84 c0                	test   al,al
c001d7be:	0f 84 43 01 00 00    	je     c001d907 <Thr::loadDLL(char const*, bool)+0x206>
c001d7c4:	51                   	push   ecx
c001d7c5:	51                   	push   ecx
c001d7c6:	68 e5 ca 02 c0       	push   0xc002cae5
c001d7cb:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d7cf:	53                   	push   ebx
c001d7d0:	e8 37 30 fe ff       	call   c000080c <strcpy>
c001d7d5:	5d                   	pop    ebp
c001d7d6:	58                   	pop    eax
c001d7d7:	56                   	push   esi
c001d7d8:	53                   	push   ebx
c001d7d9:	e8 6e 31 fe ff       	call   c000094c <strcat>
c001d7de:	58                   	pop    eax
c001d7df:	5a                   	pop    edx
c001d7e0:	68 f8 ca 02 c0       	push   0xc002caf8
c001d7e5:	53                   	push   ebx
c001d7e6:	e8 61 31 fe ff       	call   c000094c <strcat>
c001d7eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d7ee:	e8 3a cb ff ff       	call   c001a32d <Krnl::panic(char const*)>
c001d7f3:	83 c4 10             	add    esp,0x10
c001d7f6:	52                   	push   edx
c001d7f7:	6a 03                	push   0x3
c001d7f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7fd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d801:	05 ff 0f 00 00       	add    eax,0xfff
c001d806:	83 d2 00             	adc    edx,0x0
c001d809:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d80d:	50                   	push   eax
c001d80e:	ff 35 90 f1 02 c0    	push   DWORD PTR ds:0xc002f190
c001d814:	e8 11 46 ff ff       	call   c0011e2a <VAS::allocatePages(int, int)>
c001d819:	59                   	pop    ecx
c001d81a:	89 c3                	mov    ebx,eax
c001d81c:	5d                   	pop    ebp
c001d81d:	50                   	push   eax
c001d81e:	68 fa ca 02 c0       	push   0xc002cafa
c001d823:	e8 cf 50 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001d828:	89 34 24             	mov    DWORD PTR [esp],esi
c001d82b:	e8 3c 2f fe ff       	call   c000076c <strlen>
c001d830:	8b 2d 80 1d 03 c0    	mov    ebp,DWORD PTR ds:0xc0031d80
c001d836:	40                   	inc    eax
c001d837:	89 04 24             	mov    DWORD PTR [esp],eax
c001d83a:	e8 4d 20 ff ff       	call   c000f88c <malloc>
c001d83f:	89 04 ad a0 21 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcde60],eax
c001d846:	58                   	pop    eax
c001d847:	a1 80 1d 03 c0       	mov    eax,ds:0xc0031d80
c001d84c:	5a                   	pop    edx
c001d84d:	56                   	push   esi
c001d84e:	ff 34 85 a0 21 03 c0 	push   DWORD PTR [eax*4-0x3ffcde60]
c001d855:	e8 b2 2f fe ff       	call   c000080c <strcpy>
c001d85a:	a1 80 1d 03 c0       	mov    eax,ds:0xc0031d80
c001d85f:	8d 50 01             	lea    edx,[eax+0x1]
c001d862:	89 1c 85 a0 1f 03 c0 	mov    DWORD PTR [eax*4-0x3ffce060],ebx
c001d869:	89 15 80 1d 03 c0    	mov    DWORD PTR ds:0xc0031d80,edx
c001d86f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d873:	83 c4 0c             	add    esp,0xc
c001d876:	89 14 85 a0 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce260],edx
c001d87d:	6a 01                	push   0x1
c001d87f:	53                   	push   ebx
c001d880:	56                   	push   esi
c001d881:	e8 c2 f6 ff ff       	call   c001cf48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d886:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d88a:	83 c4 10             	add    esp,0x10
c001d88d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d892:	0f 85 83 00 00 00    	jne    c001d91b <Thr::loadDLL(char const*, bool)+0x21a>
c001d898:	89 f8                	mov    eax,edi
c001d89a:	84 c0                	test   al,al
c001d89c:	74 6d                	je     c001d90b <Thr::loadDLL(char const*, bool)+0x20a>
c001d89e:	83 ec 0c             	sub    esp,0xc
c001d8a1:	68 07 cb 02 c0       	push   0xc002cb07
c001d8a6:	e8 82 ca ff ff       	call   c001a32d <Krnl::panic(char const*)>
c001d8ab:	83 c4 10             	add    esp,0x10
c001d8ae:	eb 5b                	jmp    c001d90b <Thr::loadDLL(char const*, bool)+0x20a>
c001d8b0:	89 ee                	mov    esi,ebp
c001d8b2:	50                   	push   eax
c001d8b3:	c1 e6 0c             	shl    esi,0xc
c001d8b6:	50                   	push   eax
c001d8b7:	01 de                	add    esi,ebx
c001d8b9:	56                   	push   esi
c001d8ba:	ff 35 90 f1 02 c0    	push   DWORD PTR ds:0xc002f190
c001d8c0:	e8 cd 40 ff ff       	call   c0011992 <VAS::getPageTableEntry(unsigned long)>
c001d8c5:	83 c4 10             	add    esp,0x10
c001d8c8:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d8cb:	75 0c                	jne    c001d8d9 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d8cd:	83 ec 0c             	sub    esp,0xc
c001d8d0:	56                   	push   esi
c001d8d1:	e8 87 22 ff ff       	call   c000fb5d <Phys::freePage(unsigned long)>
c001d8d6:	83 c4 10             	add    esp,0x10
c001d8d9:	45                   	inc    ebp
c001d8da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d8e2:	05 ff 0f 00 00       	add    eax,0xfff
c001d8e7:	bf 00 00 00 00       	mov    edi,0x0
c001d8ec:	83 d2 00             	adc    edx,0x0
c001d8ef:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d8f3:	c1 ea 0c             	shr    edx,0xc
c001d8f6:	39 c5                	cmp    ebp,eax
c001d8f8:	89 d1                	mov    ecx,edx
c001d8fa:	89 f8                	mov    eax,edi
c001d8fc:	19 c8                	sbb    eax,ecx
c001d8fe:	72 b0                	jb     c001d8b0 <Thr::loadDLL(char const*, bool)+0x1af>
c001d900:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d905:	75 18                	jne    c001d91f <Thr::loadDLL(char const*, bool)+0x21e>
c001d907:	31 db                	xor    ebx,ebx
c001d909:	eb 14                	jmp    c001d91f <Thr::loadDLL(char const*, bool)+0x21e>
c001d90b:	83 ec 0c             	sub    esp,0xc
c001d90e:	68 26 cb 02 c0       	push   0xc002cb26
c001d913:	e8 15 ca ff ff       	call   c001a32d <Krnl::panic(char const*)>
c001d918:	83 c4 10             	add    esp,0x10
c001d91b:	31 ed                	xor    ebp,ebp
c001d91d:	eb bb                	jmp    c001d8da <Thr::loadDLL(char const*, bool)+0x1d9>
c001d91f:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d925:	89 d8                	mov    eax,ebx
c001d927:	5b                   	pop    ebx
c001d928:	5e                   	pop    esi
c001d929:	5f                   	pop    edi
c001d92a:	5d                   	pop    ebp
c001d92b:	c3                   	ret    

c001d92c <Thr::executeDLL(unsigned long, void*)>:
c001d92c:	56                   	push   esi
c001d92d:	53                   	push   ebx
c001d92e:	52                   	push   edx
c001d92f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d933:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d937:	85 db                	test   ebx,ebx
c001d939:	75 10                	jne    c001d94b <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d93b:	83 ec 0c             	sub    esp,0xc
c001d93e:	68 42 cb 02 c0       	push   0xc002cb42
c001d943:	e8 e5 c9 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c001d948:	83 c4 10             	add    esp,0x10
c001d94b:	50                   	push   eax
c001d94c:	50                   	push   eax
c001d94d:	53                   	push   ebx
c001d94e:	68 6c cb 02 c0       	push   0xc002cb6c
c001d953:	e8 9f 4f ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001d958:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d95c:	89 d8                	mov    eax,ebx
c001d95e:	83 c4 14             	add    esp,0x14
c001d961:	5b                   	pop    ebx
c001d962:	5e                   	pop    esi
c001d963:	ff e0                	jmp    eax
c001d965:	90                   	nop

c001d966 <userModeEntryPoint(void*)>:
c001d966:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001d96b:	48                   	dec    eax
c001d96c:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001d971:	75 01                	jne    c001d974 <userModeEntryPoint(void*)+0xe>
c001d973:	fb                   	sti    
c001d974:	fb                   	sti    
c001d975:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d97a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d97d:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d983:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d987:	e9 9e 29 fe ff       	jmp    c000032a <goToUsermode>

c001d98c <changeTSS>:
c001d98c:	83 ec 14             	sub    esp,0x14
c001d98f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d994:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d997:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d99c:	c1 e2 15             	shl    edx,0x15
c001d99f:	29 d0                	sub    eax,edx
c001d9a1:	50                   	push   eax
c001d9a2:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001d9a7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d9ad:	05 7c 11 00 00       	add    eax,0x117c
c001d9b2:	50                   	push   eax
c001d9b3:	e8 78 34 ff ff       	call   c0010e30 <TSS::setESP(unsigned long)>
c001d9b8:	83 c4 1c             	add    esp,0x1c
c001d9bb:	c3                   	ret    

c001d9bc <switchToThread(ThreadControlBlock*)>:
c001d9bc:	57                   	push   edi
c001d9bd:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c001d9c2:	56                   	push   esi
c001d9c3:	85 c0                	test   eax,eax
c001d9c5:	53                   	push   ebx
c001d9c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d9ca:	0f 85 88 00 00 00    	jne    c001da58 <switchToThread(ThreadControlBlock*)+0x9c>
c001d9d0:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d9d3:	3c ff                	cmp    al,0xff
c001d9d5:	74 7d                	je     c001da54 <switchToThread(ThreadControlBlock*)+0x98>
c001d9d7:	0f b6 d0             	movzx  edx,al
c001d9da:	b8 84 03 00 00       	mov    eax,0x384
c001d9df:	29 d0                	sub    eax,edx
c001d9e1:	c1 e0 10             	shl    eax,0x10
c001d9e4:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d9e7:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d9ea:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c001d9ef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d9f5:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d9fc:	74 4a                	je     c001da48 <switchToThread(ThreadControlBlock*)+0x8c>
c001d9fe:	0f 31                	rdtsc  
c001da00:	a3 88 25 03 c0       	mov    ds:0xc0032588,eax
c001da05:	89 c6                	mov    esi,eax
c001da07:	89 d7                	mov    edi,edx
c001da09:	2b 35 78 25 03 c0    	sub    esi,DWORD PTR ds:0xc0032578
c001da0f:	89 15 8c 25 03 c0    	mov    DWORD PTR ds:0xc003258c,edx
c001da15:	1b 3d 7c 25 03 c0    	sbb    edi,DWORD PTR ds:0xc003257c
c001da1b:	89 35 80 25 03 c0    	mov    DWORD PTR ds:0xc0032580,esi
c001da21:	a3 78 25 03 c0       	mov    ds:0xc0032578,eax
c001da26:	89 3d 84 25 03 c0    	mov    DWORD PTR ds:0xc0032584,edi
c001da2c:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001da32:	89 15 7c 25 03 c0    	mov    DWORD PTR ds:0xc003257c,edx
c001da38:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001da3b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001da3e:	01 c6                	add    esi,eax
c001da40:	11 d7                	adc    edi,edx
c001da42:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001da45:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001da48:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001da4c:	5b                   	pop    ebx
c001da4d:	5e                   	pop    esi
c001da4e:	5f                   	pop    edi
c001da4f:	e9 0e 29 fe ff       	jmp    c0000362 <switchToThreadASM>
c001da54:	31 c0                	xor    eax,eax
c001da56:	eb 8f                	jmp    c001d9e7 <switchToThread(ThreadControlBlock*)+0x2b>
c001da58:	5b                   	pop    ebx
c001da59:	c7 05 40 25 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032540,0x1
c001da63:	5e                   	pop    esi
c001da64:	5f                   	pop    edi
c001da65:	c3                   	ret    

c001da66 <Process::addArgs(char**)>:
c001da66:	57                   	push   edi
c001da67:	56                   	push   esi
c001da68:	53                   	push   ebx
c001da69:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da6d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001da71:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001da7b:	85 ff                	test   edi,edi
c001da7d:	74 3d                	je     c001dabc <Process::addArgs(char**)+0x56>
c001da7f:	8b 07                	mov    eax,DWORD PTR [edi]
c001da81:	85 c0                	test   eax,eax
c001da83:	74 37                	je     c001dabc <Process::addArgs(char**)+0x56>
c001da85:	31 db                	xor    ebx,ebx
c001da87:	83 ec 0c             	sub    esp,0xc
c001da8a:	50                   	push   eax
c001da8b:	e8 dc 2c fe ff       	call   c000076c <strlen>
c001da90:	40                   	inc    eax
c001da91:	89 04 24             	mov    DWORD PTR [esp],eax
c001da94:	e8 f3 1d ff ff       	call   c000f88c <malloc>
c001da99:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001daa0:	5a                   	pop    edx
c001daa1:	59                   	pop    ecx
c001daa2:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001daa5:	43                   	inc    ebx
c001daa6:	50                   	push   eax
c001daa7:	e8 60 2d fe ff       	call   c000080c <strcpy>
c001daac:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001dab2:	83 c4 10             	add    esp,0x10
c001dab5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001dab8:	85 c0                	test   eax,eax
c001daba:	75 cb                	jne    c001da87 <Process::addArgs(char**)+0x21>
c001dabc:	5b                   	pop    ebx
c001dabd:	5e                   	pop    esi
c001dabe:	5f                   	pop    edi
c001dabf:	c3                   	ret    

c001dac0 <Process::Process(char const*, Process*, char**)>:
c001dac0:	56                   	push   esi
c001dac1:	53                   	push   ebx
c001dac2:	83 ec 14             	sub    esp,0x14
c001dac5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dac9:	05 0c 02 00 00       	add    eax,0x20c
c001dace:	bb 07 00 00 00       	mov    ebx,0x7
c001dad3:	89 c6                	mov    esi,eax
c001dad5:	85 db                	test   ebx,ebx
c001dad7:	78 12                	js     c001daeb <Process::Process(char const*, Process*, char**)+0x2b>
c001dad9:	83 ec 0c             	sub    esp,0xc
c001dadc:	56                   	push   esi
c001dadd:	e8 e0 ba 00 00       	call   c00295c2 <ThreadControlBlock::ThreadControlBlock()>
c001dae2:	83 c4 10             	add    esp,0x10
c001dae5:	83 c6 63             	add    esi,0x63
c001dae8:	4b                   	dec    ebx
c001dae9:	eb ea                	jmp    c001dad5 <Process::Process(char const*, Process*, char**)+0x15>
c001daeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daef:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001daf6:	83 ec 0c             	sub    esp,0xc
c001daf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dafd:	e8 84 c6 ff ff       	call   c001a186 <Krnl::newProcessEnv(Process*)>
c001db02:	83 c4 10             	add    esp,0x10
c001db05:	89 c2                	mov    edx,eax
c001db07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db0b:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001db11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db15:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001db1e:	a1 b0 e5 02 c0       	mov    eax,ds:0xc002e5b0
c001db23:	8d 50 01             	lea    edx,[eax+0x1]
c001db26:	89 15 b0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5b0,edx
c001db2c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db30:	89 02                	mov    DWORD PTR [edx],eax
c001db32:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001db3a:	83 ec 0c             	sub    esp,0xc
c001db3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001db41:	e8 46 1d ff ff       	call   c000f88c <malloc>
c001db46:	83 c4 10             	add    esp,0x10
c001db49:	89 c3                	mov    ebx,eax
c001db4b:	83 ec 08             	sub    esp,0x8
c001db4e:	6a 00                	push   0x0
c001db50:	53                   	push   ebx
c001db51:	e8 7c 46 ff ff       	call   c00121d2 <VAS::VAS(bool)>
c001db56:	83 c4 10             	add    esp,0x10
c001db59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db5d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001db63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db67:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001db71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db75:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001db79:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001db7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db83:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db89:	85 c0                	test   eax,eax
c001db8b:	74 42                	je     c001dbcf <Process::Process(char const*, Process*, char**)+0x10f>
c001db8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db91:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db97:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001db9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dba1:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dba7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbab:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbb1:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dbb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbbb:	05 0c 01 00 00       	add    eax,0x10c
c001dbc0:	83 ec 08             	sub    esp,0x8
c001dbc3:	52                   	push   edx
c001dbc4:	50                   	push   eax
c001dbc5:	e8 42 2c fe ff       	call   c000080c <strcpy>
c001dbca:	83 c4 10             	add    esp,0x10
c001dbcd:	eb 63                	jmp    c001dc32 <Process::Process(char const*, Process*, char**)+0x172>
c001dbcf:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001dbd7:	83 ec 0c             	sub    esp,0xc
c001dbda:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dbde:	e8 a9 1c ff ff       	call   c000f88c <malloc>
c001dbe3:	83 c4 10             	add    esp,0x10
c001dbe6:	89 c3                	mov    ebx,eax
c001dbe8:	83 ec 08             	sub    esp,0x8
c001dbeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbef:	53                   	push   ebx
c001dbf0:	e8 1d 2f ff ff       	call   c0010b12 <VgaText::VgaText(char const*)>
c001dbf5:	83 c4 10             	add    esp,0x10
c001dbf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbfc:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dc02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc06:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dc0c:	83 ec 0c             	sub    esp,0xc
c001dc0f:	50                   	push   eax
c001dc10:	e8 04 26 ff ff       	call   c0010219 <addToTerminalCycle(VgaText*)>
c001dc15:	83 c4 10             	add    esp,0x10
c001dc18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc1c:	05 0c 01 00 00       	add    eax,0x10c
c001dc21:	83 ec 08             	sub    esp,0x8
c001dc24:	68 8b cb 02 c0       	push   0xc002cb8b
c001dc29:	50                   	push   eax
c001dc2a:	e8 dd 2b fe ff       	call   c000080c <strcpy>
c001dc2f:	83 c4 10             	add    esp,0x10
c001dc32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc36:	83 c0 0c             	add    eax,0xc
c001dc39:	83 ec 08             	sub    esp,0x8
c001dc3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc40:	50                   	push   eax
c001dc41:	e8 c6 2b fe ff       	call   c000080c <strcpy>
c001dc46:	83 c4 10             	add    esp,0x10
c001dc49:	83 ec 08             	sub    esp,0x8
c001dc4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dc50:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc54:	e8 0d fe ff ff       	call   c001da66 <Process::addArgs(char**)>
c001dc59:	83 c4 10             	add    esp,0x10
c001dc5c:	83 ec 08             	sub    esp,0x8
c001dc5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc67:	e8 a6 ed ff ff       	call   c001ca12 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dc6c:	83 c4 10             	add    esp,0x10
c001dc6f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc73:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc77:	83 f0 01             	xor    eax,0x1
c001dc7a:	88 c2                	mov    dl,al
c001dc7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc80:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dc86:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dc8b:	83 ec 08             	sub    esp,0x8
c001dc8e:	50                   	push   eax
c001dc8f:	68 b8 cc 02 c0       	push   0xc002ccb8
c001dc94:	e8 5e 4c ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001dc99:	83 c4 10             	add    esp,0x10
c001dc9c:	90                   	nop
c001dc9d:	83 c4 14             	add    esp,0x14
c001dca0:	5b                   	pop    ebx
c001dca1:	5e                   	pop    esi
c001dca2:	c3                   	ret    
c001dca3:	90                   	nop

c001dca4 <Process::Process(bool, char const*, Process*, char**)>:
c001dca4:	56                   	push   esi
c001dca5:	53                   	push   ebx
c001dca6:	83 ec 24             	sub    esp,0x24
c001dca9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dcad:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dcb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcb5:	05 0c 02 00 00       	add    eax,0x20c
c001dcba:	bb 07 00 00 00       	mov    ebx,0x7
c001dcbf:	89 c6                	mov    esi,eax
c001dcc1:	85 db                	test   ebx,ebx
c001dcc3:	78 12                	js     c001dcd7 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dcc5:	83 ec 0c             	sub    esp,0xc
c001dcc8:	56                   	push   esi
c001dcc9:	e8 f4 b8 00 00       	call   c00295c2 <ThreadControlBlock::ThreadControlBlock()>
c001dcce:	83 c4 10             	add    esp,0x10
c001dcd1:	83 c6 63             	add    esi,0x63
c001dcd4:	4b                   	dec    ebx
c001dcd5:	eb ea                	jmp    c001dcc1 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dcd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcdb:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dce2:	83 ec 0c             	sub    esp,0xc
c001dce5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dce9:	e8 98 c4 ff ff       	call   c001a186 <Krnl::newProcessEnv(Process*)>
c001dcee:	83 c4 10             	add    esp,0x10
c001dcf1:	89 c2                	mov    edx,eax
c001dcf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcf7:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dcfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd01:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dd0a:	a1 b0 e5 02 c0       	mov    eax,ds:0xc002e5b0
c001dd0f:	8d 50 01             	lea    edx,[eax+0x1]
c001dd12:	89 15 b0 e5 02 c0    	mov    DWORD PTR ds:0xc002e5b0,edx
c001dd18:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dd1c:	89 02                	mov    DWORD PTR [edx],eax
c001dd1e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001dd26:	83 ec 0c             	sub    esp,0xc
c001dd29:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dd2d:	e8 5a 1b ff ff       	call   c000f88c <malloc>
c001dd32:	83 c4 10             	add    esp,0x10
c001dd35:	89 c3                	mov    ebx,eax
c001dd37:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dd3c:	83 ec 08             	sub    esp,0x8
c001dd3f:	50                   	push   eax
c001dd40:	53                   	push   ebx
c001dd41:	e8 8c 44 ff ff       	call   c00121d2 <VAS::VAS(bool)>
c001dd46:	83 c4 10             	add    esp,0x10
c001dd49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd4d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dd53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd57:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd65:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dd69:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dd6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd73:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd79:	85 c0                	test   eax,eax
c001dd7b:	74 42                	je     c001ddbf <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dd7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd81:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd87:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd91:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dd97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd9b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dda1:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dda7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddab:	05 0c 01 00 00       	add    eax,0x10c
c001ddb0:	83 ec 08             	sub    esp,0x8
c001ddb3:	52                   	push   edx
c001ddb4:	50                   	push   eax
c001ddb5:	e8 52 2a fe ff       	call   c000080c <strcpy>
c001ddba:	83 c4 10             	add    esp,0x10
c001ddbd:	eb 63                	jmp    c001de22 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001ddbf:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001ddc7:	83 ec 0c             	sub    esp,0xc
c001ddca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ddce:	e8 b9 1a ff ff       	call   c000f88c <malloc>
c001ddd3:	83 c4 10             	add    esp,0x10
c001ddd6:	89 c3                	mov    ebx,eax
c001ddd8:	83 ec 08             	sub    esp,0x8
c001dddb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dddf:	53                   	push   ebx
c001dde0:	e8 2d 2d ff ff       	call   c0010b12 <VgaText::VgaText(char const*)>
c001dde5:	83 c4 10             	add    esp,0x10
c001dde8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddec:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001ddf2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddf6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ddfc:	83 ec 0c             	sub    esp,0xc
c001ddff:	50                   	push   eax
c001de00:	e8 14 24 ff ff       	call   c0010219 <addToTerminalCycle(VgaText*)>
c001de05:	83 c4 10             	add    esp,0x10
c001de08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de0c:	05 0c 01 00 00       	add    eax,0x10c
c001de11:	83 ec 08             	sub    esp,0x8
c001de14:	68 8b cb 02 c0       	push   0xc002cb8b
c001de19:	50                   	push   eax
c001de1a:	e8 ed 29 fe ff       	call   c000080c <strcpy>
c001de1f:	83 c4 10             	add    esp,0x10
c001de22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de26:	83 c0 0c             	add    eax,0xc
c001de29:	83 ec 08             	sub    esp,0x8
c001de2c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de30:	50                   	push   eax
c001de31:	e8 d6 29 fe ff       	call   c000080c <strcpy>
c001de36:	83 c4 10             	add    esp,0x10
c001de39:	83 ec 08             	sub    esp,0x8
c001de3c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001de40:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de44:	e8 1d fc ff ff       	call   c001da66 <Process::addArgs(char**)>
c001de49:	83 c4 10             	add    esp,0x10
c001de4c:	90                   	nop
c001de4d:	83 c4 24             	add    esp,0x24
c001de50:	5b                   	pop    ebx
c001de51:	5e                   	pop    esi
c001de52:	c3                   	ret    

c001de53 <taskStartupFunction>:
c001de53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de58:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001de5b:	c3                   	ret    

c001de5c <Semaphore::Semaphore(int)>:
c001de5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de64:	89 10                	mov    DWORD PTR [eax],edx
c001de66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de6a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001de71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de75:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001de7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de80:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001de87:	90                   	nop
c001de88:	c3                   	ret    
c001de89:	90                   	nop

c001de8a <Mutex::Mutex()>:
c001de8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de8e:	6a 01                	push   0x1
c001de90:	50                   	push   eax
c001de91:	e8 c6 ff ff ff       	call   c001de5c <Semaphore::Semaphore(int)>
c001de96:	83 c4 08             	add    esp,0x8
c001de99:	90                   	nop
c001de9a:	c3                   	ret    
c001de9b:	90                   	nop

c001de9c <Process::createThread(void (*)(void*), void*, int)>:
c001de9c:	55                   	push   ebp
c001de9d:	31 c9                	xor    ecx,ecx
c001de9f:	57                   	push   edi
c001dea0:	56                   	push   esi
c001dea1:	53                   	push   ebx
c001dea2:	83 ec 1c             	sub    esp,0x1c
c001dea5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dea9:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001deb0:	89 f2                	mov    edx,esi
c001deb2:	0f b7 c2             	movzx  eax,dx
c001deb5:	83 e2 01             	and    edx,0x1
c001deb8:	74 16                	je     c001ded0 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001deba:	d1 f8                	sar    eax,1
c001debc:	41                   	inc    ecx
c001debd:	89 c2                	mov    edx,eax
c001debf:	83 f9 10             	cmp    ecx,0x10
c001dec2:	75 ee                	jne    c001deb2 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dec4:	83 c4 1c             	add    esp,0x1c
c001dec7:	31 db                	xor    ebx,ebx
c001dec9:	89 d8                	mov    eax,ebx
c001decb:	5b                   	pop    ebx
c001decc:	5e                   	pop    esi
c001decd:	5f                   	pop    edi
c001dece:	5d                   	pop    ebp
c001decf:	c3                   	ret    
c001ded0:	b8 01 00 00 00       	mov    eax,0x1
c001ded5:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001ded8:	d3 e0                	shl    eax,cl
c001deda:	09 c6                	or     esi,eax
c001dedc:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001dedf:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001dee6:	89 c6                	mov    esi,eax
c001dee8:	c1 e6 05             	shl    esi,0x5
c001deeb:	01 f0                	add    eax,esi
c001deed:	01 d8                	add    eax,ebx
c001deef:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001def6:	75 0a                	jne    c001df02 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001def8:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001df02:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001df08:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001df0c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001df0f:	01 ca                	add    edx,ecx
c001df11:	83 ec 08             	sub    esp,0x8
c001df14:	89 d0                	mov    eax,edx
c001df16:	c1 e0 05             	shl    eax,0x5
c001df19:	01 d0                	add    eax,edx
c001df1b:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001df1f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001df23:	01 d8                	add    eax,ebx
c001df25:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001df2b:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001df31:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001df37:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001df3d:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001df43:	89 cd                	mov    ebp,ecx
c001df45:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001df49:	f7 dd                	neg    ebp
c001df4b:	c1 e5 15             	shl    ebp,0x15
c001df4e:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001df54:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001df5a:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001df64:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001df6a:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001df74:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001df7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df82:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001df89:	53                   	push   ebx
c001df8a:	68 64 25 03 c0       	push   0xc0032564
c001df8f:	e8 e8 b3 00 00       	call   c002937c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df94:	89 d8                	mov    eax,ebx
c001df96:	83 c4 10             	add    esp,0x10
c001df99:	83 c4 1c             	add    esp,0x1c
c001df9c:	5b                   	pop    ebx
c001df9d:	5e                   	pop    esi
c001df9e:	5f                   	pop    edi
c001df9f:	5d                   	pop    ebp
c001dfa0:	c3                   	ret    
c001dfa1:	90                   	nop

c001dfa2 <Process::createUserThread()>:
c001dfa2:	83 ec 0c             	sub    esp,0xc
c001dfa5:	68 80 00 00 00       	push   0x80
c001dfaa:	6a 00                	push   0x0
c001dfac:	68 66 d9 01 c0       	push   0xc001d966
c001dfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dfb5:	e8 e2 fe ff ff       	call   c001de9c <Process::createThread(void (*)(void*), void*, int)>
c001dfba:	83 c4 1c             	add    esp,0x1c
c001dfbd:	c3                   	ret    

c001dfbe <setupMultitasking(void (*)())>:
c001dfbe:	56                   	push   esi
c001dfbf:	53                   	push   ebx
c001dfc0:	51                   	push   ecx
c001dfc1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dfc5:	eb 10                	jmp    c001dfd7 <setupMultitasking(void (*)())+0x19>
c001dfc7:	83 ec 0c             	sub    esp,0xc
c001dfca:	68 64 25 03 c0       	push   0xc0032564
c001dfcf:	e8 fa b2 00 00       	call   c00292ce <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dfd4:	83 c4 10             	add    esp,0x10
c001dfd7:	83 ec 0c             	sub    esp,0xc
c001dfda:	68 64 25 03 c0       	push   0xc0032564
c001dfdf:	e8 c6 b2 00 00       	call   c00292aa <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dfe4:	83 c4 10             	add    esp,0x10
c001dfe7:	84 c0                	test   al,al
c001dfe9:	74 dc                	je     c001dfc7 <setupMultitasking(void (*)())+0x9>
c001dfeb:	83 ec 0c             	sub    esp,0xc
c001dfee:	68 3f 07 00 00       	push   0x73f
c001dff3:	e8 94 18 ff ff       	call   c000f88c <malloc>
c001dff8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dfff:	89 c3                	mov    ebx,eax
c001e001:	6a 00                	push   0x0
c001e003:	68 8f cb 02 c0       	push   0xc002cb8f
c001e008:	6a 01                	push   0x1
c001e00a:	50                   	push   eax
c001e00b:	e8 94 fc ff ff       	call   c001dca4 <Process::Process(bool, char const*, Process*, char**)>
c001e010:	83 c4 18             	add    esp,0x18
c001e013:	89 1d 70 25 03 c0    	mov    DWORD PTR ds:0xc0032570,ebx
c001e019:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e01f:	68 e0 cc 02 c0       	push   0xc002cce0
c001e024:	e8 ce 48 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001e029:	58                   	pop    eax
c001e02a:	5a                   	pop    edx
c001e02b:	6a 63                	push   0x63
c001e02d:	68 14 cd 02 c0       	push   0xc002cd14
c001e032:	e8 c0 48 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001e037:	59                   	pop    ecx
c001e038:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e03e:	e8 d7 26 ff ff       	call   c001071a <setActiveTerminal(VgaText*)>
c001e043:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e04b:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e055:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e05b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e05e:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e068:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e06e:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e074:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e07e:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e088:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e092:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e098:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e0a2:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e0a8:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e0b2:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e0b8:	58                   	pop    eax
c001e0b9:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e0bf:	5a                   	pop    edx
c001e0c0:	68 8b cb 02 c0       	push   0xc002cb8b
c001e0c5:	50                   	push   eax
c001e0c6:	e8 41 27 fe ff       	call   c000080c <strcpy>
c001e0cb:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e0d2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e0d6:	83 c4 14             	add    esp,0x14
c001e0d9:	5b                   	pop    ebx
c001e0da:	5e                   	pop    esi
c001e0db:	e9 74 22 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e0e0 <schedule()>:
c001e0e0:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c001e0e5:	85 c0                	test   eax,eax
c001e0e7:	74 0b                	je     c001e0f4 <schedule()+0x14>
c001e0e9:	c7 05 40 25 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032540,0x1
c001e0f3:	c3                   	ret    
c001e0f4:	53                   	push   ebx
c001e0f5:	83 ec 14             	sub    esp,0x14
c001e0f8:	68 64 25 03 c0       	push   0xc0032564
c001e0fd:	e8 a8 b1 00 00       	call   c00292aa <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e102:	83 c4 10             	add    esp,0x10
c001e105:	84 c0                	test   al,al
c001e107:	75 38                	jne    c001e141 <schedule()+0x61>
c001e109:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e10e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e111:	4a                   	dec    edx
c001e112:	74 32                	je     c001e146 <schedule()+0x66>
c001e114:	83 ec 0c             	sub    esp,0xc
c001e117:	68 64 25 03 c0       	push   0xc0032564
c001e11c:	e8 a5 b1 00 00       	call   c00292c6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e121:	c7 04 24 64 25 03 c0 	mov    DWORD PTR [esp],0xc0032564
c001e128:	89 c3                	mov    ebx,eax
c001e12a:	e8 9f b1 00 00       	call   c00292ce <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e12f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e136:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e139:	e8 7e f8 ff ff       	call   c001d9bc <switchToThread(ThreadControlBlock*)>
c001e13e:	83 c4 10             	add    esp,0x10
c001e141:	83 c4 08             	add    esp,0x8
c001e144:	5b                   	pop    ebx
c001e145:	c3                   	ret    
c001e146:	83 ec 08             	sub    esp,0x8
c001e149:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e150:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e156:	68 64 25 03 c0       	push   0xc0032564
c001e15b:	e8 1c b2 00 00       	call   c002937c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e160:	83 c4 10             	add    esp,0x10
c001e163:	eb af                	jmp    c001e114 <schedule()+0x34>
c001e165:	90                   	nop

c001e166 <Semaphore::tryAcquire()>:
c001e166:	53                   	push   ebx
c001e167:	83 ec 08             	sub    esp,0x8
c001e16a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e16e:	fa                   	cli    
c001e16f:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e174:	8d 50 01             	lea    edx,[eax+0x1]
c001e177:	89 15 48 25 03 c0    	mov    DWORD PTR ds:0xc0032548,edx
c001e17d:	8b 15 44 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032544
c001e183:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e186:	89 1d 44 25 03 c0    	mov    DWORD PTR ds:0xc0032544,ebx
c001e18c:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e18f:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e191:	7c 2a                	jl     c001e1bd <Semaphore::tryAcquire()+0x57>
c001e193:	89 15 44 25 03 c0    	mov    DWORD PTR ds:0xc0032544,edx
c001e199:	85 d2                	test   edx,edx
c001e19b:	75 0a                	jne    c001e1a7 <Semaphore::tryAcquire()+0x41>
c001e19d:	8b 15 40 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032540
c001e1a3:	85 d2                	test   edx,edx
c001e1a5:	75 5b                	jne    c001e202 <Semaphore::tryAcquire()+0x9c>
c001e1a7:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e1ac:	85 c0                	test   eax,eax
c001e1ae:	74 07                	je     c001e1b7 <Semaphore::tryAcquire()+0x51>
c001e1b0:	31 c0                	xor    eax,eax
c001e1b2:	83 c4 08             	add    esp,0x8
c001e1b5:	5b                   	pop    ebx
c001e1b6:	c3                   	ret    
c001e1b7:	fb                   	sti    
c001e1b8:	83 c4 08             	add    esp,0x8
c001e1bb:	5b                   	pop    ebx
c001e1bc:	c3                   	ret    
c001e1bd:	43                   	inc    ebx
c001e1be:	89 15 44 25 03 c0    	mov    DWORD PTR ds:0xc0032544,edx
c001e1c4:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e1c7:	85 d2                	test   edx,edx
c001e1c9:	75 1f                	jne    c001e1ea <Semaphore::tryAcquire()+0x84>
c001e1cb:	8b 0d 40 25 03 c0    	mov    ecx,DWORD PTR ds:0xc0032540
c001e1d1:	85 c9                	test   ecx,ecx
c001e1d3:	74 15                	je     c001e1ea <Semaphore::tryAcquire()+0x84>
c001e1d5:	c7 05 40 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032540,0x0
c001e1df:	e8 fc fe ff ff       	call   c001e0e0 <schedule()>
c001e1e4:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e1e9:	48                   	dec    eax
c001e1ea:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e1ef:	85 c0                	test   eax,eax
c001e1f1:	75 08                	jne    c001e1fb <Semaphore::tryAcquire()+0x95>
c001e1f3:	fb                   	sti    
c001e1f4:	b0 01                	mov    al,0x1
c001e1f6:	83 c4 08             	add    esp,0x8
c001e1f9:	5b                   	pop    ebx
c001e1fa:	c3                   	ret    
c001e1fb:	b0 01                	mov    al,0x1
c001e1fd:	83 c4 08             	add    esp,0x8
c001e200:	5b                   	pop    ebx
c001e201:	c3                   	ret    
c001e202:	c7 05 40 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032540,0x0
c001e20c:	e8 cf fe ff ff       	call   c001e0e0 <schedule()>
c001e211:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e216:	48                   	dec    eax
c001e217:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e21c:	85 c0                	test   eax,eax
c001e21e:	75 90                	jne    c001e1b0 <Semaphore::tryAcquire()+0x4a>
c001e220:	eb 95                	jmp    c001e1b7 <Semaphore::tryAcquire()+0x51>

c001e222 <Semaphore::assertLocked(char const*)>:
c001e222:	83 ec 0c             	sub    esp,0xc
c001e225:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e229:	fa                   	cli    
c001e22a:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001e230:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c001e235:	8d 48 01             	lea    ecx,[eax+0x1]
c001e238:	89 0d 44 25 03 c0    	mov    DWORD PTR ds:0xc0032544,ecx
c001e23e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e240:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e243:	7c 24                	jl     c001e269 <Semaphore::assertLocked(char const*)+0x47>
c001e245:	a3 44 25 03 c0       	mov    ds:0xc0032544,eax
c001e24a:	85 c0                	test   eax,eax
c001e24c:	75 09                	jne    c001e257 <Semaphore::assertLocked(char const*)+0x35>
c001e24e:	a1 40 25 03 c0       	mov    eax,ds:0xc0032540
c001e253:	85 c0                	test   eax,eax
c001e255:	75 29                	jne    c001e280 <Semaphore::assertLocked(char const*)+0x5e>
c001e257:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e25c:	48                   	dec    eax
c001e25d:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e262:	75 01                	jne    c001e265 <Semaphore::assertLocked(char const*)+0x43>
c001e264:	fb                   	sti    
c001e265:	83 c4 0c             	add    esp,0xc
c001e268:	c3                   	ret    
c001e269:	83 ec 0c             	sub    esp,0xc
c001e26c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e270:	e8 b8 c0 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c001e275:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c001e27a:	83 c4 10             	add    esp,0x10
c001e27d:	48                   	dec    eax
c001e27e:	eb c5                	jmp    c001e245 <Semaphore::assertLocked(char const*)+0x23>
c001e280:	c7 05 40 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032540,0x0
c001e28a:	e8 51 fe ff ff       	call   c001e0e0 <schedule()>
c001e28f:	eb c6                	jmp    c001e257 <Semaphore::assertLocked(char const*)+0x35>

c001e291 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e291:	83 ec 14             	sub    esp,0x14
c001e294:	ff 35 48 25 03 c0    	push   DWORD PTR ds:0xc0032548
c001e29a:	68 38 cd 02 c0       	push   0xc002cd38
c001e29f:	e8 53 46 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001e2a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2a9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2ad:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2b0:	e8 2b fe ff ff       	call   c001e0e0 <schedule()>
c001e2b5:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e2ba:	83 c4 10             	add    esp,0x10
c001e2bd:	48                   	dec    eax
c001e2be:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e2c3:	85 c0                	test   eax,eax
c001e2c5:	75 06                	jne    c001e2cd <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e2c7:	fb                   	sti    
c001e2c8:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e2cd:	83 ec 08             	sub    esp,0x8
c001e2d0:	50                   	push   eax
c001e2d1:	68 6c cd 02 c0       	push   0xc002cd6c
c001e2d6:	e8 1c 46 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001e2db:	83 c4 1c             	add    esp,0x1c
c001e2de:	c3                   	ret    

c001e2df <blockTask(TaskState)>:
c001e2df:	83 ec 0c             	sub    esp,0xc
c001e2e2:	fa                   	cli    
c001e2e3:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001e2e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e2ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2f2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2f5:	e8 e6 fd ff ff       	call   c001e0e0 <schedule()>
c001e2fa:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e2ff:	48                   	dec    eax
c001e300:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e305:	75 01                	jne    c001e308 <blockTask(TaskState)+0x29>
c001e307:	fb                   	sti    
c001e308:	83 c4 0c             	add    esp,0xc
c001e30b:	c3                   	ret    

c001e30c <waitTask(int, int*, int)>:
c001e30c:	83 ec 18             	sub    esp,0x18
c001e30f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e314:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e318:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e31b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e31f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e324:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e327:	6a 07                	push   0x7
c001e329:	e8 b1 ff ff ff       	call   c001e2df <blockTask(TaskState)>
c001e32e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e333:	83 c4 10             	add    esp,0x10
c001e336:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e339:	85 d2                	test   edx,edx
c001e33b:	74 0a                	je     c001e347 <waitTask(int, int*, int)+0x3b>
c001e33d:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e340:	89 02                	mov    DWORD PTR [edx],eax
c001e342:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e347:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e34a:	83 c4 0c             	add    esp,0xc
c001e34d:	c3                   	ret    

c001e34e <nanoSleepUntil(unsigned long long)>:
c001e34e:	83 ec 0c             	sub    esp,0xc
c001e351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e355:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e359:	3b 05 90 f6 02 c0    	cmp    eax,DWORD PTR ds:0xc002f690
c001e35f:	89 d1                	mov    ecx,edx
c001e361:	1b 0d 94 f6 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f694
c001e367:	73 04                	jae    c001e36d <nanoSleepUntil(unsigned long long)+0x1f>
c001e369:	83 c4 0c             	add    esp,0xc
c001e36c:	c3                   	ret    
c001e36d:	fa                   	cli    
c001e36e:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001e374:	83 ec 08             	sub    esp,0x8
c001e377:	ff 05 44 25 03 c0    	inc    DWORD PTR ds:0xc0032544
c001e37d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e383:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e386:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e389:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e38f:	68 58 25 03 c0       	push   0xc0032558
c001e394:	e8 e3 af 00 00       	call   c002937c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e399:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e3a0:	e8 3a ff ff ff       	call   c001e2df <blockTask(TaskState)>
c001e3a5:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c001e3aa:	83 c4 10             	add    esp,0x10
c001e3ad:	48                   	dec    eax
c001e3ae:	a3 44 25 03 c0       	mov    ds:0xc0032544,eax
c001e3b3:	85 c0                	test   eax,eax
c001e3b5:	75 09                	jne    c001e3c0 <nanoSleepUntil(unsigned long long)+0x72>
c001e3b7:	a1 40 25 03 c0       	mov    eax,ds:0xc0032540
c001e3bc:	85 c0                	test   eax,eax
c001e3be:	75 12                	jne    c001e3d2 <nanoSleepUntil(unsigned long long)+0x84>
c001e3c0:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e3c5:	48                   	dec    eax
c001e3c6:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e3cb:	75 9c                	jne    c001e369 <nanoSleepUntil(unsigned long long)+0x1b>
c001e3cd:	fb                   	sti    
c001e3ce:	83 c4 0c             	add    esp,0xc
c001e3d1:	c3                   	ret    
c001e3d2:	c7 05 40 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032540,0x0
c001e3dc:	e8 ff fc ff ff       	call   c001e0e0 <schedule()>
c001e3e1:	eb dd                	jmp    c001e3c0 <nanoSleepUntil(unsigned long long)+0x72>

c001e3e3 <nanoSleep(unsigned long long)>:
c001e3e3:	a1 90 f6 02 c0       	mov    eax,ds:0xc002f690
c001e3e8:	8b 15 94 f6 02 c0    	mov    edx,DWORD PTR ds:0xc002f694
c001e3ee:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e3f2:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e3f6:	e9 53 ff ff ff       	jmp    c001e34e <nanoSleepUntil(unsigned long long)>

c001e3fb <sleep(unsigned long long)>:
c001e3fb:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e403:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e408:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e40c:	01 ca                	add    edx,ecx
c001e40e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e412:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e416:	eb cb                	jmp    c001e3e3 <nanoSleep(unsigned long long)>

c001e418 <Semaphore::acquire()>:
c001e418:	83 ec 0c             	sub    esp,0xc
c001e41b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e41f:	fa                   	cli    
c001e420:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c001e425:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001e42b:	8d 48 01             	lea    ecx,[eax+0x1]
c001e42e:	89 0d 44 25 03 c0    	mov    DWORD PTR ds:0xc0032544,ecx
c001e434:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e437:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e439:	7d 28                	jge    c001e463 <Semaphore::acquire()+0x4b>
c001e43b:	41                   	inc    ecx
c001e43c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e43f:	a3 44 25 03 c0       	mov    ds:0xc0032544,eax
c001e444:	85 c0                	test   eax,eax
c001e446:	75 09                	jne    c001e451 <Semaphore::acquire()+0x39>
c001e448:	a1 40 25 03 c0       	mov    eax,ds:0xc0032540
c001e44d:	85 c0                	test   eax,eax
c001e44f:	75 4e                	jne    c001e49f <Semaphore::acquire()+0x87>
c001e451:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e456:	48                   	dec    eax
c001e457:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e45c:	75 01                	jne    c001e45f <Semaphore::acquire()+0x47>
c001e45e:	fb                   	sti    
c001e45f:	83 c4 0c             	add    esp,0xc
c001e462:	c3                   	ret    
c001e463:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e468:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e46f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e472:	85 c9                	test   ecx,ecx
c001e474:	74 3a                	je     c001e4b0 <Semaphore::acquire()+0x98>
c001e476:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e479:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e47f:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e482:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e487:	83 ec 0c             	sub    esp,0xc
c001e48a:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e48d:	6a 05                	push   0x5
c001e48f:	e8 4b fe ff ff       	call   c001e2df <blockTask(TaskState)>
c001e494:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c001e499:	83 c4 10             	add    esp,0x10
c001e49c:	48                   	dec    eax
c001e49d:	eb a0                	jmp    c001e43f <Semaphore::acquire()+0x27>
c001e49f:	c7 05 40 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032540,0x0
c001e4a9:	e8 32 fc ff ff       	call   c001e0e0 <schedule()>
c001e4ae:	eb a1                	jmp    c001e451 <Semaphore::acquire()+0x39>
c001e4b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4b5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e4b8:	eb c8                	jmp    c001e482 <Semaphore::acquire()+0x6a>

c001e4ba <taskReturned>:
c001e4ba:	83 ec 18             	sub    esp,0x18
c001e4bd:	68 a0 cd 02 c0       	push   0xc002cda0
c001e4c2:	e8 66 be ff ff       	call   c001a32d <Krnl::panic(char const*)>
c001e4c7:	83 c4 10             	add    esp,0x10
c001e4ca:	83 ec 0c             	sub    esp,0xc
c001e4cd:	6a 02                	push   0x2
c001e4cf:	e8 0b fe ff ff       	call   c001e2df <blockTask(TaskState)>
c001e4d4:	fa                   	cli    
c001e4d5:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001e4db:	e8 00 fc ff ff       	call   c001e0e0 <schedule()>
c001e4e0:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e4e5:	83 c4 10             	add    esp,0x10
c001e4e8:	48                   	dec    eax
c001e4e9:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e4ee:	85 c0                	test   eax,eax
c001e4f0:	75 d8                	jne    c001e4ca <taskReturned+0x10>
c001e4f2:	fb                   	sti    
c001e4f3:	eb d5                	jmp    c001e4ca <taskReturned+0x10>

c001e4f5 <Thr::processFromPID(int)>:
c001e4f5:	57                   	push   edi
c001e4f6:	56                   	push   esi
c001e4f7:	53                   	push   ebx
c001e4f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e4fc:	83 ec 0c             	sub    esp,0xc
c001e4ff:	68 96 cb 02 c0       	push   0xc002cb96
c001e504:	e8 ee 43 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001e509:	fa                   	cli    
c001e50a:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001e510:	c7 04 24 64 25 03 c0 	mov    DWORD PTR [esp],0xc0032564
c001e517:	e8 aa ad 00 00       	call   c00292c6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e51c:	83 c4 10             	add    esp,0x10
c001e51f:	89 c7                	mov    edi,eax
c001e521:	eb 14                	jmp    c001e537 <Thr::processFromPID(int)+0x42>
c001e523:	83 ec 0c             	sub    esp,0xc
c001e526:	68 64 25 03 c0       	push   0xc0032564
c001e52b:	e8 96 ad 00 00       	call   c00292c6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e530:	83 c4 10             	add    esp,0x10
c001e533:	39 f8                	cmp    eax,edi
c001e535:	74 49                	je     c001e580 <Thr::processFromPID(int)+0x8b>
c001e537:	83 ec 0c             	sub    esp,0xc
c001e53a:	68 64 25 03 c0       	push   0xc0032564
c001e53f:	e8 82 ad 00 00       	call   c00292c6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e544:	c7 04 24 64 25 03 c0 	mov    DWORD PTR [esp],0xc0032564
c001e54b:	89 c3                	mov    ebx,eax
c001e54d:	e8 7c ad 00 00       	call   c00292ce <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e552:	58                   	pop    eax
c001e553:	5a                   	pop    edx
c001e554:	53                   	push   ebx
c001e555:	68 64 25 03 c0       	push   0xc0032564
c001e55a:	e8 1d ae 00 00       	call   c002937c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e55f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e562:	83 c4 10             	add    esp,0x10
c001e565:	39 30                	cmp    DWORD PTR [eax],esi
c001e567:	75 ba                	jne    c001e523 <Thr::processFromPID(int)+0x2e>
c001e569:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e56e:	48                   	dec    eax
c001e56f:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e574:	74 07                	je     c001e57d <Thr::processFromPID(int)+0x88>
c001e576:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e579:	5b                   	pop    ebx
c001e57a:	5e                   	pop    esi
c001e57b:	5f                   	pop    edi
c001e57c:	c3                   	ret    
c001e57d:	fb                   	sti    
c001e57e:	eb f6                	jmp    c001e576 <Thr::processFromPID(int)+0x81>
c001e580:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e585:	48                   	dec    eax
c001e586:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e58b:	75 01                	jne    c001e58e <Thr::processFromPID(int)+0x99>
c001e58d:	fb                   	sti    
c001e58e:	83 ec 0c             	sub    esp,0xc
c001e591:	68 b1 cb 02 c0       	push   0xc002cbb1
c001e596:	e8 5c 43 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001e59b:	83 c4 10             	add    esp,0x10
c001e59e:	31 c0                	xor    eax,eax
c001e5a0:	5b                   	pop    ebx
c001e5a1:	5e                   	pop    esi
c001e5a2:	5f                   	pop    edi
c001e5a3:	c3                   	ret    

c001e5a4 <unblockTask(ThreadControlBlock*)>:
c001e5a4:	53                   	push   ebx
c001e5a5:	83 ec 08             	sub    esp,0x8
c001e5a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e5ac:	fa                   	cli    
c001e5ad:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001e5b3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e5b6:	85 c0                	test   eax,eax
c001e5b8:	74 66                	je     c001e620 <unblockTask(ThreadControlBlock*)+0x7c>
c001e5ba:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e5bd:	48                   	dec    eax
c001e5be:	74 31                	je     c001e5f1 <unblockTask(ThreadControlBlock*)+0x4d>
c001e5c0:	83 ec 0c             	sub    esp,0xc
c001e5c3:	68 64 25 03 c0       	push   0xc0032564
c001e5c8:	e8 f9 ac 00 00       	call   c00292c6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5cd:	83 c4 10             	add    esp,0x10
c001e5d0:	85 c0                	test   eax,eax
c001e5d2:	75 17                	jne    c001e5eb <unblockTask(ThreadControlBlock*)+0x47>
c001e5d4:	eb 68                	jmp    c001e63e <unblockTask(ThreadControlBlock*)+0x9a>
c001e5d6:	83 ec 08             	sub    esp,0x8
c001e5d9:	50                   	push   eax
c001e5da:	68 64 25 03 c0       	push   0xc0032564
c001e5df:	e8 80 b0 00 00       	call   c0029664 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e5e4:	83 c4 10             	add    esp,0x10
c001e5e7:	85 c0                	test   eax,eax
c001e5e9:	74 53                	je     c001e63e <unblockTask(ThreadControlBlock*)+0x9a>
c001e5eb:	39 c3                	cmp    ebx,eax
c001e5ed:	75 e7                	jne    c001e5d6 <unblockTask(ThreadControlBlock*)+0x32>
c001e5ef:	eb 1c                	jmp    c001e60d <unblockTask(ThreadControlBlock*)+0x69>
c001e5f1:	83 ec 0c             	sub    esp,0xc
c001e5f4:	68 90 ce 02 c0       	push   0xc002ce90
c001e5f9:	e8 f9 42 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001e5fe:	c7 04 24 1c ce 02 c0 	mov    DWORD PTR [esp],0xc002ce1c
c001e605:	e8 ed 42 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001e60a:	83 c4 10             	add    esp,0x10
c001e60d:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e612:	48                   	dec    eax
c001e613:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e618:	75 01                	jne    c001e61b <unblockTask(ThreadControlBlock*)+0x77>
c001e61a:	fb                   	sti    
c001e61b:	83 c4 08             	add    esp,0x8
c001e61e:	5b                   	pop    ebx
c001e61f:	c3                   	ret    
c001e620:	83 ec 0c             	sub    esp,0xc
c001e623:	68 d4 cd 02 c0       	push   0xc002cdd4
c001e628:	e8 ca 42 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001e62d:	c7 04 24 1c ce 02 c0 	mov    DWORD PTR [esp],0xc002ce1c
c001e634:	e8 be 42 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001e639:	83 c4 10             	add    esp,0x10
c001e63c:	eb cf                	jmp    c001e60d <unblockTask(ThreadControlBlock*)+0x69>
c001e63e:	83 ec 08             	sub    esp,0x8
c001e641:	53                   	push   ebx
c001e642:	68 64 25 03 c0       	push   0xc0032564
c001e647:	e8 30 ad 00 00       	call   c002937c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e64c:	83 c4 10             	add    esp,0x10
c001e64f:	eb bc                	jmp    c001e60d <unblockTask(ThreadControlBlock*)+0x69>

c001e651 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e651:	55                   	push   ebp
c001e652:	57                   	push   edi
c001e653:	56                   	push   esi
c001e654:	53                   	push   ebx
c001e655:	83 ec 1c             	sub    esp,0x1c
c001e658:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e65c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e65f:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e665:	85 ff                	test   edi,edi
c001e667:	7e 20                	jle    c001e689 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e669:	31 f6                	xor    esi,esi
c001e66b:	83 ec 0c             	sub    esp,0xc
c001e66e:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e675:	46                   	inc    esi
c001e676:	e8 21 12 ff ff       	call   c000f89c <free>
c001e67b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e67e:	83 c4 10             	add    esp,0x10
c001e681:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e687:	7f e2                	jg     c001e66b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e689:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e693:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e698:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e69b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e69e:	d3 c0                	rol    eax,cl
c001e6a0:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e6a7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e6aa:	89 f7                	mov    edi,esi
c001e6ac:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e6b4:	0f 85 74 01 00 00    	jne    c001e82e <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e6ba:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e6c0:	85 ed                	test   ebp,ebp
c001e6c2:	74 1b                	je     c001e6df <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e6c4:	83 ec 0c             	sub    esp,0xc
c001e6c7:	55                   	push   ebp
c001e6c8:	e8 d5 b9 ff ff       	call   c001a0a2 <EnvVarContainer::~EnvVarContainer()>
c001e6cd:	59                   	pop    ecx
c001e6ce:	5e                   	pop    esi
c001e6cf:	6a 0c                	push   0xc
c001e6d1:	55                   	push   ebp
c001e6d2:	e8 40 41 ff ff       	call   c0012817 <operator delete(void*, unsigned long)>
c001e6d7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e6da:	83 c4 10             	add    esp,0x10
c001e6dd:	89 f7                	mov    edi,esi
c001e6df:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e6e5:	85 c0                	test   eax,eax
c001e6e7:	0f 84 aa 00 00 00    	je     c001e797 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e6ed:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e6f0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e6f4:	31 c9                	xor    ecx,ecx
c001e6f6:	eb 10                	jmp    c001e708 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e6f8:	41                   	inc    ecx
c001e6f9:	83 f9 10             	cmp    ecx,0x10
c001e6fc:	0f 84 95 00 00 00    	je     c001e797 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e702:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e708:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e70f:	d3 fa                	sar    edx,cl
c001e711:	83 e2 01             	and    edx,0x1
c001e714:	74 e2                	je     c001e6f8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e716:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e719:	01 ca                	add    edx,ecx
c001e71b:	89 d5                	mov    ebp,edx
c001e71d:	c1 e5 05             	shl    ebp,0x5
c001e720:	01 ea                	add    edx,ebp
c001e722:	01 d0                	add    eax,edx
c001e724:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e72a:	83 fd 07             	cmp    ebp,0x7
c001e72d:	75 c9                	jne    c001e6f8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e72f:	05 40 02 00 00       	add    eax,0x240
c001e734:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e737:	83 fd ff             	cmp    ebp,0xffffffff
c001e73a:	0f 8c 08 01 00 00    	jl     c001e848 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e740:	0f 84 b9 01 00 00    	je     c001e8ff <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e746:	85 ed                	test   ebp,ebp
c001e748:	0f 84 a0 01 00 00    	je     c001e8ee <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e74e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e750:	75 a6                	jne    c001e6f8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e752:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e758:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e75c:	01 d0                	add    eax,edx
c001e75e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e762:	83 ec 0c             	sub    esp,0xc
c001e765:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e76b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e76e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e774:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e77b:	50                   	push   eax
c001e77c:	e8 23 fe ff ff       	call   c001e5a4 <unblockTask(ThreadControlBlock*)>
c001e781:	83 c4 10             	add    esp,0x10
c001e784:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e787:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e78b:	89 f7                	mov    edi,esi
c001e78d:	41                   	inc    ecx
c001e78e:	83 f9 10             	cmp    ecx,0x10
c001e791:	0f 85 6b ff ff ff    	jne    c001e702 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e797:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e79d:	85 c0                	test   eax,eax
c001e79f:	74 5d                	je     c001e7fe <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e7a1:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e7a7:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e7ad:	74 4f                	je     c001e7fe <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e7af:	83 ec 0c             	sub    esp,0xc
c001e7b2:	68 64 25 03 c0       	push   0xc0032564
c001e7b7:	e8 0a ab 00 00       	call   c00292c6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7bc:	c7 04 24 64 25 03 c0 	mov    DWORD PTR [esp],0xc0032564
c001e7c3:	89 c7                	mov    edi,eax
c001e7c5:	e8 e0 aa 00 00       	call   c00292aa <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e7ca:	83 c4 10             	add    esp,0x10
c001e7cd:	84 c0                	test   al,al
c001e7cf:	0f 84 e4 00 00 00    	je     c001e8b9 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e7d5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7d8:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e7de:	85 d2                	test   edx,edx
c001e7e0:	74 0f                	je     c001e7f1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e7e2:	83 ec 0c             	sub    esp,0xc
c001e7e5:	8b 02                	mov    eax,DWORD PTR [edx]
c001e7e7:	52                   	push   edx
c001e7e8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e7eb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7ee:	83 c4 10             	add    esp,0x10
c001e7f1:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e7fb:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e7fe:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e804:	85 db                	test   ebx,ebx
c001e806:	74 16                	je     c001e81e <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e808:	83 ec 0c             	sub    esp,0xc
c001e80b:	53                   	push   ebx
c001e80c:	e8 9b 33 ff ff       	call   c0011bac <VAS::~VAS()>
c001e811:	58                   	pop    eax
c001e812:	5a                   	pop    edx
c001e813:	6a 14                	push   0x14
c001e815:	53                   	push   ebx
c001e816:	e8 fc 3f ff ff       	call   c0012817 <operator delete(void*, unsigned long)>
c001e81b:	83 c4 10             	add    esp,0x10
c001e81e:	83 ec 0c             	sub    esp,0xc
c001e821:	68 c8 cb 02 c0       	push   0xc002cbc8
c001e826:	e8 cc 40 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001e82b:	83 c4 10             	add    esp,0x10
c001e82e:	83 ec 08             	sub    esp,0x8
c001e831:	68 3f 07 00 00       	push   0x73f
c001e836:	68 d6 cb 02 c0       	push   0xc002cbd6
c001e83b:	e8 b7 40 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001e840:	83 c4 2c             	add    esp,0x2c
c001e843:	5b                   	pop    ebx
c001e844:	5e                   	pop    esi
c001e845:	5f                   	pop    edi
c001e846:	5d                   	pop    ebp
c001e847:	c3                   	ret    
c001e848:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e84c:	83 ec 0c             	sub    esp,0xc
c001e84f:	68 d4 ce 02 c0       	push   0xc002ced4
c001e854:	e8 d4 ba ff ff       	call   c001a32d <Krnl::panic(char const*)>
c001e859:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e85c:	83 c4 10             	add    esp,0x10
c001e85f:	89 f7                	mov    edi,esi
c001e861:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e865:	e9 8e fe ff ff       	jmp    c001e6f8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e86a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e870:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e876:	75 1c                	jne    c001e894 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e878:	83 ec 0c             	sub    esp,0xc
c001e87b:	68 3c cf 02 c0       	push   0xc002cf3c
c001e880:	e8 72 40 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001e885:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e88c:	e8 4e fa ff ff       	call   c001e2df <blockTask(TaskState)>
c001e891:	83 c4 10             	add    esp,0x10
c001e894:	83 ec 08             	sub    esp,0x8
c001e897:	56                   	push   esi
c001e898:	68 64 25 03 c0       	push   0xc0032564
c001e89d:	e8 da aa 00 00       	call   c002937c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e8a2:	c7 04 24 64 25 03 c0 	mov    DWORD PTR [esp],0xc0032564
c001e8a9:	e8 18 aa 00 00       	call   c00292c6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8ae:	83 c4 10             	add    esp,0x10
c001e8b1:	39 f8                	cmp    eax,edi
c001e8b3:	0f 84 1c ff ff ff    	je     c001e7d5 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e8b9:	83 ec 0c             	sub    esp,0xc
c001e8bc:	68 64 25 03 c0       	push   0xc0032564
c001e8c1:	e8 00 aa 00 00       	call   c00292c6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8c6:	c7 04 24 64 25 03 c0 	mov    DWORD PTR [esp],0xc0032564
c001e8cd:	89 c6                	mov    esi,eax
c001e8cf:	e8 fa a9 00 00       	call   c00292ce <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e8d4:	83 c4 10             	add    esp,0x10
c001e8d7:	39 f3                	cmp    ebx,esi
c001e8d9:	74 b9                	je     c001e894 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e8db:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e8de:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e8e1:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e8e7:	75 ab                	jne    c001e894 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e8e9:	e9 7c ff ff ff       	jmp    c001e86a <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e8ee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e8f2:	83 ec 0c             	sub    esp,0xc
c001e8f5:	68 08 cf 02 c0       	push   0xc002cf08
c001e8fa:	e9 55 ff ff ff       	jmp    c001e854 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e8ff:	8b 36                	mov    esi,DWORD PTR [esi]
c001e901:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e905:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e908:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e90b:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e911:	01 d7                	add    edi,edx
c001e913:	89 f8                	mov    eax,edi
c001e915:	e9 44 fe ff ff       	jmp    c001e75e <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e91a <cleanerTaskFunction(void*)>:
c001e91a:	53                   	push   ebx
c001e91b:	83 ec 08             	sub    esp,0x8
c001e91e:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e923:	48                   	dec    eax
c001e924:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e929:	75 01                	jne    c001e92c <cleanerTaskFunction(void*)+0x12>
c001e92b:	fb                   	sti    
c001e92c:	fa                   	cli    
c001e92d:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e932:	80 3d 2c 25 03 c0 00 	cmp    BYTE PTR ds:0xc003252c,0x0
c001e939:	8d 50 01             	lea    edx,[eax+0x1]
c001e93c:	89 15 48 25 03 c0    	mov    DWORD PTR ds:0xc0032548,edx
c001e942:	0f 84 b9 00 00 00    	je     c001ea01 <cleanerTaskFunction(void*)+0xe7>
c001e948:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e94d:	85 c0                	test   eax,eax
c001e94f:	75 01                	jne    c001e952 <cleanerTaskFunction(void*)+0x38>
c001e951:	fb                   	sti    
c001e952:	c6 05 2c 25 03 c0 00 	mov    BYTE PTR ds:0xc003252c,0x0
c001e959:	fa                   	cli    
c001e95a:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001e960:	ff 05 44 25 03 c0    	inc    DWORD PTR ds:0xc0032544
c001e966:	fa                   	cli    
c001e967:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001e96d:	eb 3e                	jmp    c001e9ad <cleanerTaskFunction(void*)+0x93>
c001e96f:	83 ec 0c             	sub    esp,0xc
c001e972:	68 4c 25 03 c0       	push   0xc003254c
c001e977:	e8 4a a9 00 00       	call   c00292c6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e97c:	c7 04 24 4c 25 03 c0 	mov    DWORD PTR [esp],0xc003254c
c001e983:	89 c3                	mov    ebx,eax
c001e985:	e8 44 a9 00 00       	call   c00292ce <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e98a:	c7 04 24 ec cb 02 c0 	mov    DWORD PTR [esp],0xc002cbec
c001e991:	e8 61 3f ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001e996:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e999:	e8 b3 fc ff ff       	call   c001e651 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e99e:	c7 04 24 05 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc05
c001e9a5:	e8 4d 3f ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001e9aa:	83 c4 10             	add    esp,0x10
c001e9ad:	83 ec 0c             	sub    esp,0xc
c001e9b0:	68 4c 25 03 c0       	push   0xc003254c
c001e9b5:	e8 f0 a8 00 00       	call   c00292aa <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e9ba:	83 c4 10             	add    esp,0x10
c001e9bd:	84 c0                	test   al,al
c001e9bf:	74 ae                	je     c001e96f <cleanerTaskFunction(void*)+0x55>
c001e9c1:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001e9c6:	48                   	dec    eax
c001e9c7:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001e9cc:	75 01                	jne    c001e9cf <cleanerTaskFunction(void*)+0xb5>
c001e9ce:	fb                   	sti    
c001e9cf:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c001e9d4:	48                   	dec    eax
c001e9d5:	a3 44 25 03 c0       	mov    ds:0xc0032544,eax
c001e9da:	0f 85 3e ff ff ff    	jne    c001e91e <cleanerTaskFunction(void*)+0x4>
c001e9e0:	a1 40 25 03 c0       	mov    eax,ds:0xc0032540
c001e9e5:	85 c0                	test   eax,eax
c001e9e7:	0f 84 31 ff ff ff    	je     c001e91e <cleanerTaskFunction(void*)+0x4>
c001e9ed:	c7 05 40 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032540,0x0
c001e9f7:	e8 e4 f6 ff ff       	call   c001e0e0 <schedule()>
c001e9fc:	e9 1d ff ff ff       	jmp    c001e91e <cleanerTaskFunction(void*)+0x4>
c001ea01:	83 ec 0c             	sub    esp,0xc
c001ea04:	6a 02                	push   0x2
c001ea06:	e8 86 f8 ff ff       	call   c001e291 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ea0b:	83 c4 10             	add    esp,0x10
c001ea0e:	e9 3f ff ff ff       	jmp    c001e952 <cleanerTaskFunction(void*)+0x38>

c001ea13 <terminateTask(int)>:
c001ea13:	83 ec 14             	sub    esp,0x14
c001ea16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea1b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ea1e:	83 c0 0c             	add    eax,0xc
c001ea21:	50                   	push   eax
c001ea22:	68 64 cf 02 c0       	push   0xc002cf64
c001ea27:	e8 cb 3e ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001ea2c:	fa                   	cli    
c001ea2d:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001ea33:	ff 05 44 25 03 c0    	inc    DWORD PTR ds:0xc0032544
c001ea39:	fa                   	cli    
c001ea3a:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001ea40:	c7 04 24 18 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc18
c001ea47:	e8 ab 3e ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001ea4c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ea50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea55:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001ea58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea5d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ea60:	5a                   	pop    edx
c001ea61:	59                   	pop    ecx
c001ea62:	50                   	push   eax
c001ea63:	68 4c 25 03 c0       	push   0xc003254c
c001ea68:	e8 0f a9 00 00       	call   c002937c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ea6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea72:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001ea79:	c7 04 24 32 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc32
c001ea80:	e8 72 3e ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001ea85:	83 c4 10             	add    esp,0x10
c001ea88:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001ea8d:	85 c0                	test   eax,eax
c001ea8f:	0f 84 8d 00 00 00    	je     c001eb22 <terminateTask(int)+0x10f>
c001ea95:	83 ec 0c             	sub    esp,0xc
c001ea98:	68 4c cc 02 c0       	push   0xc002cc4c
c001ea9d:	e8 55 3e ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001eaa2:	58                   	pop    eax
c001eaa3:	c6 05 2c 25 03 c0 01 	mov    BYTE PTR ds:0xc003252c,0x1
c001eaaa:	ff 35 28 25 03 c0    	push   DWORD PTR ds:0xc0032528
c001eab0:	e8 ef fa ff ff       	call   c001e5a4 <unblockTask(ThreadControlBlock*)>
c001eab5:	c7 04 24 66 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc66
c001eabc:	e8 36 3e ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001eac1:	83 c4 10             	add    esp,0x10
c001eac4:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001eac9:	48                   	dec    eax
c001eaca:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001eacf:	75 01                	jne    c001ead2 <terminateTask(int)+0xbf>
c001ead1:	fb                   	sti    
c001ead2:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c001ead7:	48                   	dec    eax
c001ead8:	a3 44 25 03 c0       	mov    ds:0xc0032544,eax
c001eadd:	75 09                	jne    c001eae8 <terminateTask(int)+0xd5>
c001eadf:	83 3d 40 25 03 c0 00 	cmp    DWORD PTR ds:0xc0032540,0x0
c001eae6:	75 4c                	jne    c001eb34 <terminateTask(int)+0x121>
c001eae8:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001eaed:	48                   	dec    eax
c001eaee:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001eaf3:	75 01                	jne    c001eaf6 <terminateTask(int)+0xe3>
c001eaf5:	fb                   	sti    
c001eaf6:	83 ec 0c             	sub    esp,0xc
c001eaf9:	68 9e cc 02 c0       	push   0xc002cc9e
c001eafe:	e8 f4 3d ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001eb03:	83 c4 10             	add    esp,0x10
c001eb06:	fa                   	cli    
c001eb07:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001eb0d:	e8 ce f5 ff ff       	call   c001e0e0 <schedule()>
c001eb12:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001eb17:	48                   	dec    eax
c001eb18:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001eb1d:	75 e7                	jne    c001eb06 <terminateTask(int)+0xf3>
c001eb1f:	fb                   	sti    
c001eb20:	eb e4                	jmp    c001eb06 <terminateTask(int)+0xf3>
c001eb22:	83 ec 0c             	sub    esp,0xc
c001eb25:	68 80 cc 02 c0       	push   0xc002cc80
c001eb2a:	e8 c8 3d ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001eb2f:	83 c4 10             	add    esp,0x10
c001eb32:	eb 90                	jmp    c001eac4 <terminateTask(int)+0xb1>
c001eb34:	c7 05 40 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032540,0x0
c001eb3e:	e8 9d f5 ff ff       	call   c001e0e0 <schedule()>
c001eb43:	eb a3                	jmp    c001eae8 <terminateTask(int)+0xd5>

c001eb45 <Thr::terminateFromIRQ(int)>:
c001eb45:	83 ec 18             	sub    esp,0x18
c001eb48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb4c:	e8 c2 fe ff ff       	call   c001ea13 <terminateTask(int)>
c001eb51:	90                   	nop

c001eb52 <Semaphore::release()>:
c001eb52:	83 ec 0c             	sub    esp,0xc
c001eb55:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eb59:	fa                   	cli    
c001eb5a:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c001eb5f:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001eb65:	8d 48 01             	lea    ecx,[eax+0x1]
c001eb68:	89 0d 44 25 03 c0    	mov    DWORD PTR ds:0xc0032544,ecx
c001eb6e:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001eb71:	85 c9                	test   ecx,ecx
c001eb73:	74 3c                	je     c001ebb1 <Semaphore::release()+0x5f>
c001eb75:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001eb78:	83 ec 0c             	sub    esp,0xc
c001eb7b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001eb7e:	51                   	push   ecx
c001eb7f:	e8 20 fa ff ff       	call   c001e5a4 <unblockTask(ThreadControlBlock*)>
c001eb84:	a1 44 25 03 c0       	mov    eax,ds:0xc0032544
c001eb89:	83 c4 10             	add    esp,0x10
c001eb8c:	48                   	dec    eax
c001eb8d:	a3 44 25 03 c0       	mov    ds:0xc0032544,eax
c001eb92:	85 c0                	test   eax,eax
c001eb94:	75 09                	jne    c001eb9f <Semaphore::release()+0x4d>
c001eb96:	a1 40 25 03 c0       	mov    eax,ds:0xc0032540
c001eb9b:	85 c0                	test   eax,eax
c001eb9d:	75 17                	jne    c001ebb6 <Semaphore::release()+0x64>
c001eb9f:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001eba4:	48                   	dec    eax
c001eba5:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001ebaa:	75 01                	jne    c001ebad <Semaphore::release()+0x5b>
c001ebac:	fb                   	sti    
c001ebad:	83 c4 0c             	add    esp,0xc
c001ebb0:	c3                   	ret    
c001ebb1:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001ebb4:	eb d7                	jmp    c001eb8d <Semaphore::release()+0x3b>
c001ebb6:	c7 05 40 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032540,0x0
c001ebc0:	e8 1b f5 ff ff       	call   c001e0e0 <schedule()>
c001ebc5:	eb d8                	jmp    c001eb9f <Semaphore::release()+0x4d>

c001ebc7 <__static_initialization_and_destruction_0(int, int)>:
c001ebc7:	83 ec 0c             	sub    esp,0xc
c001ebca:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ebcf:	0f 85 88 00 00 00    	jne    c001ec5d <__static_initialization_and_destruction_0(int, int)+0x96>
c001ebd5:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ebdd:	75 7e                	jne    c001ec5d <__static_initialization_and_destruction_0(int, int)+0x96>
c001ebdf:	83 ec 0c             	sub    esp,0xc
c001ebe2:	68 64 25 03 c0       	push   0xc0032564
c001ebe7:	e8 20 aa 00 00       	call   c002960c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ebec:	83 c4 10             	add    esp,0x10
c001ebef:	83 ec 04             	sub    esp,0x4
c001ebf2:	68 dc dd 02 c0       	push   0xc002dddc
c001ebf7:	68 64 25 03 c0       	push   0xc0032564
c001ebfc:	68 c0 95 02 c0       	push   0xc00295c0
c001ec01:	e8 8b 3b ff ff       	call   c0012791 <__cxa_atexit>
c001ec06:	83 c4 10             	add    esp,0x10
c001ec09:	83 ec 0c             	sub    esp,0xc
c001ec0c:	68 58 25 03 c0       	push   0xc0032558
c001ec11:	e8 f6 a9 00 00       	call   c002960c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ec16:	83 c4 10             	add    esp,0x10
c001ec19:	83 ec 04             	sub    esp,0x4
c001ec1c:	68 dc dd 02 c0       	push   0xc002dddc
c001ec21:	68 58 25 03 c0       	push   0xc0032558
c001ec26:	68 c0 95 02 c0       	push   0xc00295c0
c001ec2b:	e8 61 3b ff ff       	call   c0012791 <__cxa_atexit>
c001ec30:	83 c4 10             	add    esp,0x10
c001ec33:	83 ec 0c             	sub    esp,0xc
c001ec36:	68 4c 25 03 c0       	push   0xc003254c
c001ec3b:	e8 cc a9 00 00       	call   c002960c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ec40:	83 c4 10             	add    esp,0x10
c001ec43:	83 ec 04             	sub    esp,0x4
c001ec46:	68 dc dd 02 c0       	push   0xc002dddc
c001ec4b:	68 4c 25 03 c0       	push   0xc003254c
c001ec50:	68 c0 95 02 c0       	push   0xc00295c0
c001ec55:	e8 37 3b ff ff       	call   c0012791 <__cxa_atexit>
c001ec5a:	83 c4 10             	add    esp,0x10
c001ec5d:	90                   	nop
c001ec5e:	83 c4 0c             	add    esp,0xc
c001ec61:	c3                   	ret    

c001ec62 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ec62:	83 ec 0c             	sub    esp,0xc
c001ec65:	83 ec 08             	sub    esp,0x8
c001ec68:	68 ff ff 00 00       	push   0xffff
c001ec6d:	6a 01                	push   0x1
c001ec6f:	e8 53 ff ff ff       	call   c001ebc7 <__static_initialization_and_destruction_0(int, int)>
c001ec74:	83 c4 10             	add    esp,0x10
c001ec77:	83 c4 0c             	add    esp,0xc
c001ec7a:	c3                   	ret    

c001ec7b <Vm::inbv(unsigned short)>:
c001ec7b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ec7f:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ec84:	75 06                	jne    c001ec8c <Vm::inbv(unsigned short)+0x11>
c001ec86:	a0 ac 25 03 c0       	mov    al,ds:0xc00325ac
c001ec8b:	c3                   	ret    
c001ec8c:	ec                   	in     al,dx
c001ec8d:	c3                   	ret    

c001ec8e <Vm::outbv(unsigned short, unsigned char)>:
c001ec8e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ec92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec96:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ec9b:	75 25                	jne    c001ecc2 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001ec9d:	8b 0d ac 25 03 c0    	mov    ecx,DWORD PTR ds:0xc00325ac
c001eca3:	8d 51 01             	lea    edx,[ecx+0x1]
c001eca6:	88 81 c0 25 03 c0    	mov    BYTE PTR [ecx-0x3ffcda40],al
c001ecac:	89 15 ac 25 03 c0    	mov    DWORD PTR ds:0xc00325ac,edx
c001ecb2:	83 fa 20             	cmp    edx,0x20
c001ecb5:	75 0c                	jne    c001ecc3 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001ecb7:	c7 05 ac 25 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00325ac,0x1f
c001ecc1:	c3                   	ret    
c001ecc2:	ee                   	out    dx,al
c001ecc3:	c3                   	ret    

c001ecc4 <Vm::realToLinear(unsigned short, unsigned short)>:
c001ecc4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ecc9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ecce:	c1 e0 04             	shl    eax,0x4
c001ecd1:	01 d0                	add    eax,edx
c001ecd3:	c3                   	ret    

c001ecd4 <Vm::getSegment(unsigned int)>:
c001ecd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecd8:	c1 e8 10             	shr    eax,0x10
c001ecdb:	c3                   	ret    

c001ecdc <Vm::getOffset(unsigned int)>:
c001ecdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ece0:	c3                   	ret    

c001ece1 <Vm::mainloop2()>:
c001ece1:	83 ec 18             	sub    esp,0x18
c001ece4:	fa                   	cli    
c001ece5:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001eceb:	6a 02                	push   0x2
c001eced:	c6 05 a5 25 03 c0 01 	mov    BYTE PTR ds:0xc00325a5,0x1
c001ecf4:	e8 98 f5 ff ff       	call   c001e291 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ecf9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ecfe:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ed02:	52                   	push   edx
c001ed03:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ed07:	52                   	push   edx
c001ed08:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ed0c:	52                   	push   edx
c001ed0d:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ed11:	50                   	push   eax
c001ed12:	e8 e3 15 fe ff       	call   c00002fa <goToVM86>
c001ed17:	83 c4 2c             	add    esp,0x2c
c001ed1a:	c3                   	ret    

c001ed1b <Vm::mainVm8086Loop(void*)>:
c001ed1b:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001ed20:	48                   	dec    eax
c001ed21:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001ed26:	75 01                	jne    c001ed29 <Vm::mainVm8086Loop(void*)+0xe>
c001ed28:	fb                   	sti    
c001ed29:	eb b6                	jmp    c001ece1 <Vm::mainloop2()>

c001ed2b <Vm::mainloop3(unsigned long)>:
c001ed2b:	83 ec 18             	sub    esp,0x18
c001ed2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ed32:	fa                   	cli    
c001ed33:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001ed39:	6a 02                	push   0x2
c001ed3b:	c6 05 a4 25 03 c0 01 	mov    BYTE PTR ds:0xc00325a4,0x1
c001ed42:	a3 a0 25 03 c0       	mov    ds:0xc00325a0,eax
c001ed47:	e8 45 f5 ff ff       	call   c001e291 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ed4c:	83 c4 1c             	add    esp,0x1c
c001ed4f:	eb 90                	jmp    c001ece1 <Vm::mainloop2()>

c001ed51 <Vm::initialise8086()>:
c001ed51:	83 ec 0c             	sub    esp,0xc
c001ed54:	68 80 00 00 00       	push   0x80
c001ed59:	6a 00                	push   0x0
c001ed5b:	68 1b ed 01 c0       	push   0xc001ed1b
c001ed60:	ff 35 70 25 03 c0    	push   DWORD PTR ds:0xc0032570
c001ed66:	e8 31 f1 ff ff       	call   c001de9c <Process::createThread(void (*)(void*), void*, int)>
c001ed6b:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ed72:	a3 a8 25 03 c0       	mov    ds:0xc00325a8,eax
c001ed77:	68 00 01 00 00       	push   0x100
c001ed7c:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c001ed81:	6a 00                	push   0x0
c001ed83:	6a 00                	push   0x0
c001ed85:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ed8b:	e8 8e 32 ff ff       	call   c001201e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ed90:	83 c4 2c             	add    esp,0x2c
c001ed93:	c3                   	ret    

c001ed94 <Vm::finish8086()>:
c001ed94:	53                   	push   ebx
c001ed95:	83 ec 08             	sub    esp,0x8
c001ed98:	fa                   	cli    
c001ed99:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001ed9f:	80 3d a4 25 03 c0 00 	cmp    BYTE PTR ds:0xc00325a4,0x0
c001eda6:	75 15                	jne    c001edbd <Vm::finish8086()+0x29>
c001eda8:	e8 33 f3 ff ff       	call   c001e0e0 <schedule()>
c001edad:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001edb2:	48                   	dec    eax
c001edb3:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001edb8:	75 de                	jne    c001ed98 <Vm::finish8086()+0x4>
c001edba:	fb                   	sti    
c001edbb:	eb db                	jmp    c001ed98 <Vm::finish8086()+0x4>
c001edbd:	83 ec 0c             	sub    esp,0xc
c001edc0:	8b 1d a0 25 03 c0    	mov    ebx,DWORD PTR ds:0xc00325a0
c001edc6:	ff 35 a8 25 03 c0    	push   DWORD PTR ds:0xc00325a8
c001edcc:	c6 05 a4 25 03 c0 00 	mov    BYTE PTR ds:0xc00325a4,0x0
c001edd3:	e8 cc f7 ff ff       	call   c001e5a4 <unblockTask(ThreadControlBlock*)>
c001edd8:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001eddd:	83 c4 10             	add    esp,0x10
c001ede0:	8d 50 ff             	lea    edx,[eax-0x1]
c001ede3:	89 15 48 25 03 c0    	mov    DWORD PTR ds:0xc0032548,edx
c001ede9:	85 d2                	test   edx,edx
c001edeb:	75 01                	jne    c001edee <Vm::finish8086()+0x5a>
c001eded:	fb                   	sti    
c001edee:	89 d8                	mov    eax,ebx
c001edf0:	83 c4 08             	add    esp,0x8
c001edf3:	5b                   	pop    ebx
c001edf4:	c3                   	ret    

c001edf5 <Vm::getOutput8086(unsigned char*)>:
c001edf5:	57                   	push   edi
c001edf6:	8b 0d ac 25 03 c0    	mov    ecx,DWORD PTR ds:0xc00325ac
c001edfc:	56                   	push   esi
c001edfd:	be c0 25 03 c0       	mov    esi,0xc00325c0
c001ee02:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ee06:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ee08:	a1 ac 25 03 c0       	mov    eax,ds:0xc00325ac
c001ee0d:	5e                   	pop    esi
c001ee0e:	c7 05 ac 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325ac,0x0
c001ee18:	5f                   	pop    edi
c001ee19:	c3                   	ret    

c001ee1a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ee1a:	55                   	push   ebp
c001ee1b:	57                   	push   edi
c001ee1c:	56                   	push   esi
c001ee1d:	53                   	push   ebx
c001ee1e:	83 ec 2c             	sub    esp,0x2c
c001ee21:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ee25:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ee29:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001ee2d:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001ee31:	fa                   	cli    
c001ee32:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c001ee38:	0f b6 35 a5 25 03 c0 	movzx  esi,BYTE PTR ds:0xc00325a5
c001ee3f:	89 f0                	mov    eax,esi
c001ee41:	84 c0                	test   al,al
c001ee43:	75 1d                	jne    c001ee62 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001ee45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ee49:	e8 92 f2 ff ff       	call   c001e0e0 <schedule()>
c001ee4e:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001ee53:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ee57:	48                   	dec    eax
c001ee58:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001ee5d:	75 d2                	jne    c001ee31 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ee5f:	fb                   	sti    
c001ee60:	eb cf                	jmp    c001ee31 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ee62:	a1 a8 25 03 c0       	mov    eax,ds:0xc00325a8
c001ee67:	c7 05 ac 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00325ac,0x0
c001ee71:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001ee75:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001ee79:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001ee7d:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001ee81:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ee85:	50                   	push   eax
c001ee86:	6a 20                	push   0x20
c001ee88:	6a 00                	push   0x0
c001ee8a:	68 c0 25 03 c0       	push   0xc00325c0
c001ee8f:	e8 bc 18 fe ff       	call   c0000750 <memset>
c001ee94:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ee9b:	e8 ec 09 ff ff       	call   c000f88c <malloc>
c001eea0:	83 c4 0c             	add    esp,0xc
c001eea3:	89 c3                	mov    ebx,eax
c001eea5:	ff 35 70 25 03 c0    	push   DWORD PTR ds:0xc0032570
c001eeab:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001eeaf:	50                   	push   eax
c001eeb0:	e8 a1 3f ff ff       	call   c0012e56 <File::File(char const*, Process*)>
c001eeb5:	83 c4 10             	add    esp,0x10
c001eeb8:	85 db                	test   ebx,ebx
c001eeba:	75 0a                	jne    c001eec6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001eebc:	83 ec 0c             	sub    esp,0xc
c001eebf:	68 83 cf 02 c0       	push   0xc002cf83
c001eec4:	eb 3e                	jmp    c001ef04 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001eec6:	50                   	push   eax
c001eec7:	8d 44 24 17          	lea    eax,[esp+0x17]
c001eecb:	50                   	push   eax
c001eecc:	8d 44 24 20          	lea    eax,[esp+0x20]
c001eed0:	50                   	push   eax
c001eed1:	53                   	push   ebx
c001eed2:	e8 8f 42 ff ff       	call   c0013166 <File::stat(unsigned long long*, bool*)>
c001eed7:	83 c4 10             	add    esp,0x10
c001eeda:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001eedf:	74 0a                	je     c001eeeb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001eee1:	83 ec 0c             	sub    esp,0xc
c001eee4:	68 97 cf 02 c0       	push   0xc002cf97
c001eee9:	eb 19                	jmp    c001ef04 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001eeeb:	51                   	push   ecx
c001eeec:	51                   	push   ecx
c001eeed:	6a 01                	push   0x1
c001eeef:	53                   	push   ebx
c001eef0:	e8 c5 3f ff ff       	call   c0012eba <File::open(FileOpenMode)>
c001eef5:	83 c4 10             	add    esp,0x10
c001eef8:	85 c0                	test   eax,eax
c001eefa:	74 24                	je     c001ef20 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001eefc:	83 ec 0c             	sub    esp,0xc
c001eeff:	68 b0 cf 02 c0       	push   0xc002cfb0
c001ef04:	e8 24 b4 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c001ef09:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001ef0e:	83 c4 10             	add    esp,0x10
c001ef11:	48                   	dec    eax
c001ef12:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001ef17:	85 c0                	test   eax,eax
c001ef19:	75 01                	jne    c001ef1c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001ef1b:	fb                   	sti    
c001ef1c:	31 f6                	xor    esi,esi
c001ef1e:	eb 58                	jmp    c001ef78 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001ef20:	0f b7 ed             	movzx  ebp,bp
c001ef23:	50                   	push   eax
c001ef24:	0f b7 ff             	movzx  edi,di
c001ef27:	50                   	push   eax
c001ef28:	55                   	push   ebp
c001ef29:	57                   	push   edi
c001ef2a:	e8 95 fd ff ff       	call   c001ecc4 <Vm::realToLinear(unsigned short, unsigned short)>
c001ef2f:	5a                   	pop    edx
c001ef30:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ef32:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ef36:	51                   	push   ecx
c001ef37:	50                   	push   eax
c001ef38:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ef3c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ef40:	53                   	push   ebx
c001ef41:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ef44:	83 c4 14             	add    esp,0x14
c001ef47:	53                   	push   ebx
c001ef48:	e8 cb 3f ff ff       	call   c0012f18 <File::close()>
c001ef4d:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c001ef52:	83 c4 10             	add    esp,0x10
c001ef55:	48                   	dec    eax
c001ef56:	c6 05 a5 25 03 c0 00 	mov    BYTE PTR ds:0xc00325a5,0x0
c001ef5d:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c001ef62:	85 c0                	test   eax,eax
c001ef64:	75 01                	jne    c001ef67 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001ef66:	fb                   	sti    
c001ef67:	83 ec 0c             	sub    esp,0xc
c001ef6a:	ff 35 a8 25 03 c0    	push   DWORD PTR ds:0xc00325a8
c001ef70:	e8 2f f6 ff ff       	call   c001e5a4 <unblockTask(ThreadControlBlock*)>
c001ef75:	83 c4 10             	add    esp,0x10
c001ef78:	83 c4 2c             	add    esp,0x2c
c001ef7b:	89 f0                	mov    eax,esi
c001ef7d:	5b                   	pop    ebx
c001ef7e:	5e                   	pop    esi
c001ef7f:	5f                   	pop    edi
c001ef80:	5d                   	pop    ebp
c001ef81:	c3                   	ret    

c001ef82 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ef82:	57                   	push   edi
c001ef83:	56                   	push   esi
c001ef84:	53                   	push   ebx
c001ef85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef8d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ef91:	83 e8 06             	sub    eax,0x6
c001ef94:	0f b7 c0             	movzx  eax,ax
c001ef97:	50                   	push   eax
c001ef98:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ef9d:	50                   	push   eax
c001ef9e:	e8 21 fd ff ff       	call   c001ecc4 <Vm::realToLinear(unsigned short, unsigned short)>
c001efa3:	5a                   	pop    edx
c001efa4:	5e                   	pop    esi
c001efa5:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001efa8:	8d 56 fa             	lea    edx,[esi-0x6]
c001efab:	81 e2 ff ff 00 00    	and    edx,0xffff
c001efb1:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001efb4:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001efb7:	83 c2 02             	add    edx,0x2
c001efba:	66 89 10             	mov    WORD PTR [eax],dx
c001efbd:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001efc0:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001efc4:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001efc7:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001efcb:	89 d6                	mov    esi,edx
c001efcd:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001efd3:	66 81 e6 ff fd       	and    si,0xfdff
c001efd8:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001efdc:	74 07                	je     c001efe5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001efde:	89 d6                	mov    esi,edx
c001efe0:	66 81 ce 00 02       	or     si,0x200
c001efe5:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001efe9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001efee:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001eff2:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001effa:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001effd:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001f005:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001f008:	5b                   	pop    ebx
c001f009:	5e                   	pop    esi
c001f00a:	5f                   	pop    edi
c001f00b:	c3                   	ret    

c001f00c <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f00c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f011:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f016:	c1 e0 04             	shl    eax,0x4
c001f019:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f01c:	c3                   	ret    

c001f01d <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f01d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f022:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f027:	c1 e0 04             	shl    eax,0x4
c001f02a:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f02e:	c3                   	ret    

c001f02f <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f02f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f034:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f039:	c1 e0 04             	shl    eax,0x4
c001f03c:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f03f:	c3                   	ret    

c001f040 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f040:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f045:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f04a:	c1 e0 04             	shl    eax,0x4
c001f04d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f051:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f054:	c3                   	ret    

c001f055 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f055:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f05a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f05f:	c1 e0 04             	shl    eax,0x4
c001f062:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f066:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f06a:	c3                   	ret    

c001f06b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f06b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f070:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f075:	c1 e0 04             	shl    eax,0x4
c001f078:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f07c:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f07f:	c3                   	ret    

c001f080 <Vm::faultHandler(regs*)>:
c001f080:	55                   	push   ebp
c001f081:	57                   	push   edi
c001f082:	56                   	push   esi
c001f083:	53                   	push   ebx
c001f084:	83 ec 1c             	sub    esp,0x1c
c001f087:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f08b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001f08e:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001f092:	0f b7 f8             	movzx  edi,ax
c001f095:	52                   	push   edx
c001f096:	0f b7 c0             	movzx  eax,ax
c001f099:	50                   	push   eax
c001f09a:	e8 25 fc ff ff       	call   c001ecc4 <Vm::realToLinear(unsigned short, unsigned short)>
c001f09f:	5a                   	pop    edx
c001f0a0:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001f0a3:	59                   	pop    ecx
c001f0a4:	89 c1                	mov    ecx,eax
c001f0a6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f0a9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f0ad:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f0b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f0b6:	0f b7 c5             	movzx  eax,bp
c001f0b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f0bd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001f0c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f0c5:	e8 fa fb ff ff       	call   c001ecc4 <Vm::realToLinear(unsigned short, unsigned short)>
c001f0ca:	5e                   	pop    esi
c001f0cb:	be 06 00 00 00       	mov    esi,0x6
c001f0d0:	5a                   	pop    edx
c001f0d1:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001f0d6:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001f0db:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001f0de:	80 fa 9d             	cmp    dl,0x9d
c001f0e1:	0f 84 2c 02 00 00    	je     c001f313 <Vm::faultHandler(regs*)+0x293>
c001f0e7:	0f 87 91 00 00 00    	ja     c001f17e <Vm::faultHandler(regs*)+0xfe>
c001f0ed:	80 fa 66             	cmp    dl,0x66
c001f0f0:	0f 84 98 01 00 00    	je     c001f28e <Vm::faultHandler(regs*)+0x20e>
c001f0f6:	77 47                	ja     c001f13f <Vm::faultHandler(regs*)+0xbf>
c001f0f8:	80 fa 36             	cmp    dl,0x36
c001f0fb:	0f 84 80 01 00 00    	je     c001f281 <Vm::faultHandler(regs*)+0x201>
c001f101:	77 1a                	ja     c001f11d <Vm::faultHandler(regs*)+0x9d>
c001f103:	80 fa 26             	cmp    dl,0x26
c001f106:	0f 84 4e 01 00 00    	je     c001f25a <Vm::faultHandler(regs*)+0x1da>
c001f10c:	80 fa 2e             	cmp    dl,0x2e
c001f10f:	0f 85 e2 05 00 00    	jne    c001f6f7 <Vm::faultHandler(regs*)+0x677>
c001f115:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f118:	31 f6                	xor    esi,esi
c001f11a:	41                   	inc    ecx
c001f11b:	eb be                	jmp    c001f0db <Vm::faultHandler(regs*)+0x5b>
c001f11d:	80 fa 64             	cmp    dl,0x64
c001f120:	0f 84 41 01 00 00    	je     c001f267 <Vm::faultHandler(regs*)+0x1e7>
c001f126:	0f 87 48 01 00 00    	ja     c001f274 <Vm::faultHandler(regs*)+0x1f4>
c001f12c:	80 fa 3e             	cmp    dl,0x3e
c001f12f:	0f 85 c2 05 00 00    	jne    c001f6f7 <Vm::faultHandler(regs*)+0x677>
c001f135:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f138:	be 01 00 00 00       	mov    esi,0x1
c001f13d:	eb db                	jmp    c001f11a <Vm::faultHandler(regs*)+0x9a>
c001f13f:	80 fa 6d             	cmp    dl,0x6d
c001f142:	0f 84 ec 02 00 00    	je     c001f434 <Vm::faultHandler(regs*)+0x3b4>
c001f148:	77 17                	ja     c001f161 <Vm::faultHandler(regs*)+0xe1>
c001f14a:	80 fa 67             	cmp    dl,0x67
c001f14d:	0f 84 48 01 00 00    	je     c001f29b <Vm::faultHandler(regs*)+0x21b>
c001f153:	80 fa 6c             	cmp    dl,0x6c
c001f156:	0f 84 69 02 00 00    	je     c001f3c5 <Vm::faultHandler(regs*)+0x345>
c001f15c:	e9 96 05 00 00       	jmp    c001f6f7 <Vm::faultHandler(regs*)+0x677>
c001f161:	80 fa 6f             	cmp    dl,0x6f
c001f164:	0f 84 f4 03 00 00    	je     c001f55e <Vm::faultHandler(regs*)+0x4de>
c001f16a:	0f 82 59 03 00 00    	jb     c001f4c9 <Vm::faultHandler(regs*)+0x449>
c001f170:	80 fa 9c             	cmp    dl,0x9c
c001f173:	0f 84 2f 01 00 00    	je     c001f2a8 <Vm::faultHandler(regs*)+0x228>
c001f179:	e9 79 05 00 00       	jmp    c001f6f7 <Vm::faultHandler(regs*)+0x677>
c001f17e:	80 fa ec             	cmp    dl,0xec
c001f181:	0f 84 14 05 00 00    	je     c001f69b <Vm::faultHandler(regs*)+0x61b>
c001f187:	77 7b                	ja     c001f204 <Vm::faultHandler(regs*)+0x184>
c001f189:	80 fa e4             	cmp    dl,0xe4
c001f18c:	0f 84 93 04 00 00    	je     c001f625 <Vm::faultHandler(regs*)+0x5a5>
c001f192:	77 53                	ja     c001f1e7 <Vm::faultHandler(regs*)+0x167>
c001f194:	80 fa cd             	cmp    dl,0xcd
c001f197:	0f 84 d9 01 00 00    	je     c001f376 <Vm::faultHandler(regs*)+0x2f6>
c001f19d:	80 fa cf             	cmp    dl,0xcf
c001f1a0:	0f 85 51 05 00 00    	jne    c001f6f7 <Vm::faultHandler(regs*)+0x677>
c001f1a6:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f1a9:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001f1ac:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001f1b0:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001f1b3:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001f1b7:	81 ca 00 02 02 00    	or     edx,0x20200
c001f1bd:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f1c0:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001f1c4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1ca:	66 c1 e8 09          	shr    ax,0x9
c001f1ce:	83 e0 01             	and    eax,0x1
c001f1d1:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1d4:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f1d7:	83 c0 06             	add    eax,0x6
c001f1da:	25 ff ff 00 00       	and    eax,0xffff
c001f1df:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f1e2:	e9 0c 05 00 00       	jmp    c001f6f3 <Vm::faultHandler(regs*)+0x673>
c001f1e7:	80 fa e6             	cmp    dl,0xe6
c001f1ea:	0f 84 7f 04 00 00    	je     c001f66f <Vm::faultHandler(regs*)+0x5ef>
c001f1f0:	0f 82 4b 04 00 00    	jb     c001f641 <Vm::faultHandler(regs*)+0x5c1>
c001f1f6:	80 fa e7             	cmp    dl,0xe7
c001f1f9:	0f 84 87 04 00 00    	je     c001f686 <Vm::faultHandler(regs*)+0x606>
c001f1ff:	e9 f3 04 00 00       	jmp    c001f6f7 <Vm::faultHandler(regs*)+0x677>
c001f204:	80 fa ef             	cmp    dl,0xef
c001f207:	0f 84 d1 04 00 00    	je     c001f6de <Vm::faultHandler(regs*)+0x65e>
c001f20d:	77 28                	ja     c001f237 <Vm::faultHandler(regs*)+0x1b7>
c001f20f:	80 fa ed             	cmp    dl,0xed
c001f212:	0f 84 9f 04 00 00    	je     c001f6b7 <Vm::faultHandler(regs*)+0x637>
c001f218:	80 fa ee             	cmp    dl,0xee
c001f21b:	0f 85 d6 04 00 00    	jne    c001f6f7 <Vm::faultHandler(regs*)+0x677>
c001f221:	50                   	push   eax
c001f222:	50                   	push   eax
c001f223:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f227:	50                   	push   eax
c001f228:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f22c:	50                   	push   eax
c001f22d:	e8 5c fa ff ff       	call   c001ec8e <Vm::outbv(unsigned short, unsigned char)>
c001f232:	e9 9f 04 00 00       	jmp    c001f6d6 <Vm::faultHandler(regs*)+0x656>
c001f237:	80 fa fa             	cmp    dl,0xfa
c001f23a:	0f 84 69 01 00 00    	je     c001f3a9 <Vm::faultHandler(regs*)+0x329>
c001f240:	80 fa fb             	cmp    dl,0xfb
c001f243:	0f 84 6e 01 00 00    	je     c001f3b7 <Vm::faultHandler(regs*)+0x337>
c001f249:	80 fa f3             	cmp    dl,0xf3
c001f24c:	0f 85 a5 04 00 00    	jne    c001f6f7 <Vm::faultHandler(regs*)+0x677>
c001f252:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f255:	e9 c0 fe ff ff       	jmp    c001f11a <Vm::faultHandler(regs*)+0x9a>
c001f25a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f25d:	be 02 00 00 00       	mov    esi,0x2
c001f262:	e9 b3 fe ff ff       	jmp    c001f11a <Vm::faultHandler(regs*)+0x9a>
c001f267:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f26a:	be 03 00 00 00       	mov    esi,0x3
c001f26f:	e9 a6 fe ff ff       	jmp    c001f11a <Vm::faultHandler(regs*)+0x9a>
c001f274:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f277:	be 04 00 00 00       	mov    esi,0x4
c001f27c:	e9 99 fe ff ff       	jmp    c001f11a <Vm::faultHandler(regs*)+0x9a>
c001f281:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f284:	be 05 00 00 00       	mov    esi,0x5
c001f289:	e9 8c fe ff ff       	jmp    c001f11a <Vm::faultHandler(regs*)+0x9a>
c001f28e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f291:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001f296:	e9 7f fe ff ff       	jmp    c001f11a <Vm::faultHandler(regs*)+0x9a>
c001f29b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f29e:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001f2a3:	e9 72 fe ff ff       	jmp    c001f11a <Vm::faultHandler(regs*)+0x9a>
c001f2a8:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001f2ab:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f2af:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f2b4:	74 30                	je     c001f2e6 <Vm::faultHandler(regs*)+0x266>
c001f2b6:	83 e9 04             	sub    ecx,0x4
c001f2b9:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f2bf:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f2c5:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f2c8:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f2cb:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f2d1:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f2d5:	0f 84 15 04 00 00    	je     c001f6f0 <Vm::faultHandler(regs*)+0x670>
c001f2db:	80 ce 02             	or     dh,0x2
c001f2de:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f2e1:	e9 0a 04 00 00       	jmp    c001f6f0 <Vm::faultHandler(regs*)+0x670>
c001f2e6:	83 e9 02             	sub    ecx,0x2
c001f2e9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f2ef:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f2f2:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f2f6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f2fc:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f300:	74 05                	je     c001f307 <Vm::faultHandler(regs*)+0x287>
c001f302:	80 ce 02             	or     dh,0x2
c001f305:	eb 03                	jmp    c001f30a <Vm::faultHandler(regs*)+0x28a>
c001f307:	80 e6 fd             	and    dh,0xfd
c001f30a:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f30e:	e9 dd 03 00 00       	jmp    c001f6f0 <Vm::faultHandler(regs*)+0x670>
c001f313:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f318:	74 2a                	je     c001f344 <Vm::faultHandler(regs*)+0x2c4>
c001f31a:	8b 10                	mov    edx,DWORD PTR [eax]
c001f31c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f322:	81 ca 00 02 02 00    	or     edx,0x20200
c001f328:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f32b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f32d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f333:	c1 e8 09             	shr    eax,0x9
c001f336:	83 e0 01             	and    eax,0x1
c001f339:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f33c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f33f:	83 c0 04             	add    eax,0x4
c001f342:	eb 25                	jmp    c001f369 <Vm::faultHandler(regs*)+0x2e9>
c001f344:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f347:	81 ca 00 02 02 00    	or     edx,0x20200
c001f34d:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f350:	66 8b 00             	mov    ax,WORD PTR [eax]
c001f353:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f359:	66 c1 e8 09          	shr    ax,0x9
c001f35d:	83 e0 01             	and    eax,0x1
c001f360:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f363:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f366:	83 c0 02             	add    eax,0x2
c001f369:	25 ff ff 00 00       	and    eax,0xffff
c001f36e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f371:	e9 7a 03 00 00       	jmp    c001f6f0 <Vm::faultHandler(regs*)+0x670>
c001f376:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f37a:	3c ee                	cmp    al,0xee
c001f37c:	75 10                	jne    c001f38e <Vm::faultHandler(regs*)+0x30e>
c001f37e:	83 ec 0c             	sub    esp,0xc
c001f381:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001f384:	e8 a2 f9 ff ff       	call   c001ed2b <Vm::mainloop3(unsigned long)>
c001f389:	e9 4b 03 00 00       	jmp    c001f6d9 <Vm::faultHandler(regs*)+0x659>
c001f38e:	83 ec 0c             	sub    esp,0xc
c001f391:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f395:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f399:	51                   	push   ecx
c001f39a:	50                   	push   eax
c001f39b:	53                   	push   ebx
c001f39c:	e8 e1 fb ff ff       	call   c001ef82 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f3a1:	83 c4 20             	add    esp,0x20
c001f3a4:	e9 4a 03 00 00       	jmp    c001f6f3 <Vm::faultHandler(regs*)+0x673>
c001f3a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f3ae:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f3b2:	e9 39 03 00 00       	jmp    c001f6f0 <Vm::faultHandler(regs*)+0x670>
c001f3b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f3bc:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f3c0:	e9 2b 03 00 00       	jmp    c001f6f0 <Vm::faultHandler(regs*)+0x670>
c001f3c5:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f3c8:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f3cd:	74 2b                	je     c001f3fa <Vm::faultHandler(regs*)+0x37a>
c001f3cf:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001f3d6:	76 22                	jbe    c001f3fa <Vm::faultHandler(regs*)+0x37a>
c001f3d8:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f3dc:	50                   	push   eax
c001f3dd:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f3e1:	50                   	push   eax
c001f3e2:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f3e6:	50                   	push   eax
c001f3e7:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f3eb:	50                   	push   eax
c001f3ec:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f3f0:	50                   	push   eax
c001f3f1:	6a 6c                	push   0x6c
c001f3f3:	6a 6c                	push   0x6c
c001f3f5:	e9 b9 01 00 00       	jmp    c001f5b3 <Vm::faultHandler(regs*)+0x533>
c001f3fa:	83 ec 0c             	sub    esp,0xc
c001f3fd:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f401:	0f b7 f6             	movzx  esi,si
c001f404:	50                   	push   eax
c001f405:	e8 71 f8 ff ff       	call   c001ec7b <Vm::inbv(unsigned short)>
c001f40a:	83 c4 0c             	add    esp,0xc
c001f40d:	0f b6 c0             	movzx  eax,al
c001f410:	50                   	push   eax
c001f411:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001f415:	50                   	push   eax
c001f416:	56                   	push   esi
c001f417:	e8 24 fc ff ff       	call   c001f040 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f41c:	83 c4 10             	add    esp,0x10
c001f41f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f422:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f426:	74 03                	je     c001f42b <Vm::faultHandler(regs*)+0x3ab>
c001f428:	48                   	dec    eax
c001f429:	eb 01                	jmp    c001f42c <Vm::faultHandler(regs*)+0x3ac>
c001f42b:	40                   	inc    eax
c001f42c:	0f b7 c0             	movzx  eax,ax
c001f42f:	e9 8d 00 00 00       	jmp    c001f4c1 <Vm::faultHandler(regs*)+0x441>
c001f434:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f437:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f43a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f43f:	74 29                	je     c001f46a <Vm::faultHandler(regs*)+0x3ea>
c001f441:	3d ff ff 00 00       	cmp    eax,0xffff
c001f446:	76 22                	jbe    c001f46a <Vm::faultHandler(regs*)+0x3ea>
c001f448:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f44c:	50                   	push   eax
c001f44d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f451:	50                   	push   eax
c001f452:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f456:	50                   	push   eax
c001f457:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f45b:	50                   	push   eax
c001f45c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f460:	50                   	push   eax
c001f461:	6a 6d                	push   0x6d
c001f463:	6a 6d                	push   0x6d
c001f465:	e9 49 01 00 00       	jmp    c001f5b3 <Vm::faultHandler(regs*)+0x533>
c001f46a:	0f b7 c8             	movzx  ecx,ax
c001f46d:	0f b7 f6             	movzx  esi,si
c001f470:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f473:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f478:	74 20                	je     c001f49a <Vm::faultHandler(regs*)+0x41a>
c001f47a:	ed                   	in     eax,dx
c001f47b:	55                   	push   ebp
c001f47c:	50                   	push   eax
c001f47d:	51                   	push   ecx
c001f47e:	56                   	push   esi
c001f47f:	e8 e7 fb ff ff       	call   c001f06b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f484:	83 c4 10             	add    esp,0x10
c001f487:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f48a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f48e:	74 05                	je     c001f495 <Vm::faultHandler(regs*)+0x415>
c001f490:	83 e8 04             	sub    eax,0x4
c001f493:	eb 27                	jmp    c001f4bc <Vm::faultHandler(regs*)+0x43c>
c001f495:	83 c0 04             	add    eax,0x4
c001f498:	eb 22                	jmp    c001f4bc <Vm::faultHandler(regs*)+0x43c>
c001f49a:	66 ed                	in     ax,dx
c001f49c:	0f b7 c0             	movzx  eax,ax
c001f49f:	57                   	push   edi
c001f4a0:	50                   	push   eax
c001f4a1:	51                   	push   ecx
c001f4a2:	56                   	push   esi
c001f4a3:	e8 ad fb ff ff       	call   c001f055 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f4a8:	83 c4 10             	add    esp,0x10
c001f4ab:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f4ae:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f4b2:	74 05                	je     c001f4b9 <Vm::faultHandler(regs*)+0x439>
c001f4b4:	83 e8 02             	sub    eax,0x2
c001f4b7:	eb 03                	jmp    c001f4bc <Vm::faultHandler(regs*)+0x43c>
c001f4b9:	83 c0 02             	add    eax,0x2
c001f4bc:	25 ff ff 00 00       	and    eax,0xffff
c001f4c1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001f4c4:	e9 27 02 00 00       	jmp    c001f6f0 <Vm::faultHandler(regs*)+0x670>
c001f4c9:	8d 46 ff             	lea    eax,[esi-0x1]
c001f4cc:	3c 05                	cmp    al,0x5
c001f4ce:	77 24                	ja     c001f4f4 <Vm::faultHandler(regs*)+0x474>
c001f4d0:	0f b6 c0             	movzx  eax,al
c001f4d3:	ff 24 85 24 d0 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd2fdc]
c001f4da:	0f b7 fd             	movzx  edi,bp
c001f4dd:	eb 15                	jmp    c001f4f4 <Vm::faultHandler(regs*)+0x474>
c001f4df:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001f4e3:	eb 0f                	jmp    c001f4f4 <Vm::faultHandler(regs*)+0x474>
c001f4e5:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001f4e9:	eb 09                	jmp    c001f4f4 <Vm::faultHandler(regs*)+0x474>
c001f4eb:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001f4ef:	eb 03                	jmp    c001f4f4 <Vm::faultHandler(regs*)+0x474>
c001f4f1:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001f4f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f4f7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f4fc:	74 29                	je     c001f527 <Vm::faultHandler(regs*)+0x4a7>
c001f4fe:	3d ff ff 00 00       	cmp    eax,0xffff
c001f503:	76 22                	jbe    c001f527 <Vm::faultHandler(regs*)+0x4a7>
c001f505:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f509:	50                   	push   eax
c001f50a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f50e:	50                   	push   eax
c001f50f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f513:	50                   	push   eax
c001f514:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f518:	50                   	push   eax
c001f519:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f51d:	50                   	push   eax
c001f51e:	6a 6e                	push   0x6e
c001f520:	6a 6e                	push   0x6e
c001f522:	e9 8c 00 00 00       	jmp    c001f5b3 <Vm::faultHandler(regs*)+0x533>
c001f527:	0f b7 c0             	movzx  eax,ax
c001f52a:	52                   	push   edx
c001f52b:	52                   	push   edx
c001f52c:	50                   	push   eax
c001f52d:	57                   	push   edi
c001f52e:	e8 d9 fa ff ff       	call   c001f00c <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f533:	59                   	pop    ecx
c001f534:	0f b6 c0             	movzx  eax,al
c001f537:	5e                   	pop    esi
c001f538:	50                   	push   eax
c001f539:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f53d:	50                   	push   eax
c001f53e:	e8 4b f7 ff ff       	call   c001ec8e <Vm::outbv(unsigned short, unsigned char)>
c001f543:	83 c4 10             	add    esp,0x10
c001f546:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f549:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f54d:	74 03                	je     c001f552 <Vm::faultHandler(regs*)+0x4d2>
c001f54f:	48                   	dec    eax
c001f550:	eb 01                	jmp    c001f553 <Vm::faultHandler(regs*)+0x4d3>
c001f552:	40                   	inc    eax
c001f553:	0f b7 c0             	movzx  eax,ax
c001f556:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001f559:	e9 92 01 00 00       	jmp    c001f6f0 <Vm::faultHandler(regs*)+0x670>
c001f55e:	8d 46 ff             	lea    eax,[esi-0x1]
c001f561:	3c 05                	cmp    al,0x5
c001f563:	77 1f                	ja     c001f584 <Vm::faultHandler(regs*)+0x504>
c001f565:	0f b6 c0             	movzx  eax,al
c001f568:	ff 24 85 3c d0 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd2fc4]
c001f56f:	89 ef                	mov    edi,ebp
c001f571:	eb 11                	jmp    c001f584 <Vm::faultHandler(regs*)+0x504>
c001f573:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001f576:	eb 0c                	jmp    c001f584 <Vm::faultHandler(regs*)+0x504>
c001f578:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001f57b:	eb 07                	jmp    c001f584 <Vm::faultHandler(regs*)+0x504>
c001f57d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001f580:	eb 02                	jmp    c001f584 <Vm::faultHandler(regs*)+0x504>
c001f582:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001f584:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001f587:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f58c:	74 37                	je     c001f5c5 <Vm::faultHandler(regs*)+0x545>
c001f58e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001f594:	76 2f                	jbe    c001f5c5 <Vm::faultHandler(regs*)+0x545>
c001f596:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f59a:	50                   	push   eax
c001f59b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f59f:	50                   	push   eax
c001f5a0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f5a4:	50                   	push   eax
c001f5a5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f5a9:	50                   	push   eax
c001f5aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f5ae:	50                   	push   eax
c001f5af:	6a 6f                	push   0x6f
c001f5b1:	6a 6f                	push   0x6f
c001f5b3:	68 c9 cf 02 c0       	push   0xc002cfc9
c001f5b8:	e8 3a 33 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001f5bd:	83 c4 20             	add    esp,0x20
c001f5c0:	e9 86 01 00 00       	jmp    c001f74b <Vm::faultHandler(regs*)+0x6cb>
c001f5c5:	0f b7 d7             	movzx  edx,di
c001f5c8:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001f5cb:	0f b7 c6             	movzx  eax,si
c001f5ce:	81 e1 00 04 00 00    	and    ecx,0x400
c001f5d4:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001f5d7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f5dc:	74 1d                	je     c001f5fb <Vm::faultHandler(regs*)+0x57b>
c001f5de:	55                   	push   ebp
c001f5df:	55                   	push   ebp
c001f5e0:	50                   	push   eax
c001f5e1:	52                   	push   edx
c001f5e2:	e8 48 fa ff ff       	call   c001f02f <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f5e7:	83 c4 10             	add    esp,0x10
c001f5ea:	89 fa                	mov    edx,edi
c001f5ec:	ef                   	out    dx,eax
c001f5ed:	85 c9                	test   ecx,ecx
c001f5ef:	74 05                	je     c001f5f6 <Vm::faultHandler(regs*)+0x576>
c001f5f1:	83 ee 04             	sub    esi,0x4
c001f5f4:	eb 21                	jmp    c001f617 <Vm::faultHandler(regs*)+0x597>
c001f5f6:	83 c6 04             	add    esi,0x4
c001f5f9:	eb 1c                	jmp    c001f617 <Vm::faultHandler(regs*)+0x597>
c001f5fb:	55                   	push   ebp
c001f5fc:	55                   	push   ebp
c001f5fd:	50                   	push   eax
c001f5fe:	52                   	push   edx
c001f5ff:	e8 19 fa ff ff       	call   c001f01d <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f604:	83 c4 10             	add    esp,0x10
c001f607:	89 fa                	mov    edx,edi
c001f609:	66 ef                	out    dx,ax
c001f60b:	85 c9                	test   ecx,ecx
c001f60d:	74 05                	je     c001f614 <Vm::faultHandler(regs*)+0x594>
c001f60f:	83 ee 02             	sub    esi,0x2
c001f612:	eb 03                	jmp    c001f617 <Vm::faultHandler(regs*)+0x597>
c001f614:	83 c6 02             	add    esi,0x2
c001f617:	81 e6 ff ff 00 00    	and    esi,0xffff
c001f61d:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001f620:	e9 cb 00 00 00       	jmp    c001f6f0 <Vm::faultHandler(regs*)+0x670>
c001f625:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f62c:	83 ec 0c             	sub    esp,0xc
c001f62f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f633:	50                   	push   eax
c001f634:	e8 42 f6 ff ff       	call   c001ec7b <Vm::inbv(unsigned short)>
c001f639:	0f b6 c0             	movzx  eax,al
c001f63c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f63f:	eb 3f                	jmp    c001f680 <Vm::faultHandler(regs*)+0x600>
c001f641:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f646:	74 07                	je     c001f64f <Vm::faultHandler(regs*)+0x5cf>
c001f648:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f64c:	ed                   	in     eax,dx
c001f64d:	eb 14                	jmp    c001f663 <Vm::faultHandler(regs*)+0x5e3>
c001f64f:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001f652:	66 31 f6             	xor    si,si
c001f655:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001f658:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f65c:	66 ed                	in     ax,dx
c001f65e:	0f b7 c0             	movzx  eax,ax
c001f661:	09 f0                	or     eax,esi
c001f663:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f666:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f66a:	e9 84 00 00 00       	jmp    c001f6f3 <Vm::faultHandler(regs*)+0x673>
c001f66f:	52                   	push   edx
c001f670:	52                   	push   edx
c001f671:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f675:	50                   	push   eax
c001f676:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f67a:	50                   	push   eax
c001f67b:	e8 0e f6 ff ff       	call   c001ec8e <Vm::outbv(unsigned short, unsigned char)>
c001f680:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f684:	eb 53                	jmp    c001f6d9 <Vm::faultHandler(regs*)+0x659>
c001f686:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f689:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f68d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f692:	74 03                	je     c001f697 <Vm::faultHandler(regs*)+0x617>
c001f694:	ef                   	out    dx,eax
c001f695:	eb cf                	jmp    c001f666 <Vm::faultHandler(regs*)+0x5e6>
c001f697:	66 ef                	out    dx,ax
c001f699:	eb cb                	jmp    c001f666 <Vm::faultHandler(regs*)+0x5e6>
c001f69b:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f6a2:	83 ec 0c             	sub    esp,0xc
c001f6a5:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f6a9:	50                   	push   eax
c001f6aa:	e8 cc f5 ff ff       	call   c001ec7b <Vm::inbv(unsigned short)>
c001f6af:	0f b6 c0             	movzx  eax,al
c001f6b2:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f6b5:	eb 1f                	jmp    c001f6d6 <Vm::faultHandler(regs*)+0x656>
c001f6b7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f6ba:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f6bf:	74 03                	je     c001f6c4 <Vm::faultHandler(regs*)+0x644>
c001f6c1:	ed                   	in     eax,dx
c001f6c2:	eb 0d                	jmp    c001f6d1 <Vm::faultHandler(regs*)+0x651>
c001f6c4:	66 ed                	in     ax,dx
c001f6c6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001f6c9:	0f b7 c0             	movzx  eax,ax
c001f6cc:	66 31 d2             	xor    dx,dx
c001f6cf:	09 d0                	or     eax,edx
c001f6d1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f6d4:	eb 1a                	jmp    c001f6f0 <Vm::faultHandler(regs*)+0x670>
c001f6d6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f6d9:	83 c4 10             	add    esp,0x10
c001f6dc:	eb 15                	jmp    c001f6f3 <Vm::faultHandler(regs*)+0x673>
c001f6de:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f6e1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f6e4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f6e9:	74 03                	je     c001f6ee <Vm::faultHandler(regs*)+0x66e>
c001f6eb:	ef                   	out    dx,eax
c001f6ec:	eb 02                	jmp    c001f6f0 <Vm::faultHandler(regs*)+0x670>
c001f6ee:	66 ef                	out    dx,ax
c001f6f0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f6f3:	b0 01                	mov    al,0x1
c001f6f5:	eb 56                	jmp    c001f74d <Vm::faultHandler(regs*)+0x6cd>
c001f6f7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f6fb:	50                   	push   eax
c001f6fc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f700:	50                   	push   eax
c001f701:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f705:	50                   	push   eax
c001f706:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f70a:	50                   	push   eax
c001f70b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f70f:	50                   	push   eax
c001f710:	52                   	push   edx
c001f711:	52                   	push   edx
c001f712:	68 f6 cf 02 c0       	push   0xc002cff6
c001f717:	e8 db 31 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c001f71c:	83 c4 20             	add    esp,0x20
c001f71f:	83 ec 0c             	sub    esp,0xc
c001f722:	6a 60                	push   0x60
c001f724:	e8 52 f5 ff ff       	call   c001ec7b <Vm::inbv(unsigned short)>
c001f729:	83 c4 10             	add    esp,0x10
c001f72c:	3c 1c                	cmp    al,0x1c
c001f72e:	74 04                	je     c001f734 <Vm::faultHandler(regs*)+0x6b4>
c001f730:	3c 5a                	cmp    al,0x5a
c001f732:	75 eb                	jne    c001f71f <Vm::faultHandler(regs*)+0x69f>
c001f734:	3c 5a                	cmp    al,0x5a
c001f736:	74 04                	je     c001f73c <Vm::faultHandler(regs*)+0x6bc>
c001f738:	3c 1c                	cmp    al,0x1c
c001f73a:	75 0f                	jne    c001f74b <Vm::faultHandler(regs*)+0x6cb>
c001f73c:	83 ec 0c             	sub    esp,0xc
c001f73f:	6a 60                	push   0x60
c001f741:	e8 35 f5 ff ff       	call   c001ec7b <Vm::inbv(unsigned short)>
c001f746:	83 c4 10             	add    esp,0x10
c001f749:	eb e9                	jmp    c001f734 <Vm::faultHandler(regs*)+0x6b4>
c001f74b:	31 c0                	xor    eax,eax
c001f74d:	83 c4 1c             	add    esp,0x1c
c001f750:	5b                   	pop    ebx
c001f751:	5e                   	pop    esi
c001f752:	5f                   	pop    edi
c001f753:	5d                   	pop    ebp
c001f754:	c3                   	ret    

c001f755 <Vm::fpuInternalTo32(unsigned long long)>:
c001f755:	57                   	push   edi
c001f756:	56                   	push   esi
c001f757:	53                   	push   ebx
c001f758:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f75c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f760:	89 d6                	mov    esi,edx
c001f762:	89 d7                	mov    edi,edx
c001f764:	89 c1                	mov    ecx,eax
c001f766:	c1 ef 14             	shr    edi,0x14
c001f769:	89 d3                	mov    ebx,edx
c001f76b:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f771:	31 d2                	xor    edx,edx
c001f773:	89 f8                	mov    eax,edi
c001f775:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f77b:	bf ff 00 00 00       	mov    edi,0xff
c001f780:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f785:	83 d2 ff             	adc    edx,0xffffffff
c001f788:	39 c7                	cmp    edi,eax
c001f78a:	bf 00 00 00 00       	mov    edi,0x0
c001f78f:	19 d7                	sbb    edi,edx
c001f791:	72 15                	jb     c001f7a8 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f793:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f797:	c1 e0 17             	shl    eax,0x17
c001f79a:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f7a0:	09 f1                	or     ecx,esi
c001f7a2:	09 c1                	or     ecx,eax
c001f7a4:	89 cf                	mov    edi,ecx
c001f7a6:	eb 02                	jmp    c001f7aa <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f7a8:	31 ff                	xor    edi,edi
c001f7aa:	89 f8                	mov    eax,edi
c001f7ac:	5b                   	pop    ebx
c001f7ad:	5e                   	pop    esi
c001f7ae:	5f                   	pop    edi
c001f7af:	c3                   	ret    

c001f7b0 <Vm::fpuInternalTo64(unsigned long long)>:
c001f7b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f7b8:	c3                   	ret    

c001f7b9 <Vm::fpu32ToInternal(unsigned int)>:
c001f7b9:	57                   	push   edi
c001f7ba:	31 ff                	xor    edi,edi
c001f7bc:	56                   	push   esi
c001f7bd:	53                   	push   ebx
c001f7be:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f7c2:	89 cb                	mov    ebx,ecx
c001f7c4:	89 ce                	mov    esi,ecx
c001f7c6:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f7cc:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f7d2:	c1 e9 17             	shr    ecx,0x17
c001f7d5:	89 f0                	mov    eax,esi
c001f7d7:	0f b6 d1             	movzx  edx,cl
c001f7da:	81 c2 80 03 00 00    	add    edx,0x380
c001f7e0:	89 d1                	mov    ecx,edx
c001f7e2:	89 fa                	mov    edx,edi
c001f7e4:	c1 e1 14             	shl    ecx,0x14
c001f7e7:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f7eb:	c1 e0 1d             	shl    eax,0x1d
c001f7ee:	89 d7                	mov    edi,edx
c001f7f0:	89 c6                	mov    esi,eax
c001f7f2:	89 ca                	mov    edx,ecx
c001f7f4:	89 f0                	mov    eax,esi
c001f7f6:	09 fa                	or     edx,edi
c001f7f8:	09 da                	or     edx,ebx
c001f7fa:	5b                   	pop    ebx
c001f7fb:	5e                   	pop    esi
c001f7fc:	5f                   	pop    edi
c001f7fd:	c3                   	ret    

c001f7fe <Vm::fpu64ToInternal(unsigned long long)>:
c001f7fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f802:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f806:	c3                   	ret    

c001f807 <Vm::fpuFloatToLong(unsigned long long)>:
c001f807:	57                   	push   edi
c001f808:	31 c0                	xor    eax,eax
c001f80a:	56                   	push   esi
c001f80b:	31 d2                	xor    edx,edx
c001f80d:	53                   	push   ebx
c001f80e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f812:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f816:	89 d9                	mov    ecx,ebx
c001f818:	c1 e9 14             	shr    ecx,0x14
c001f81b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f821:	89 cf                	mov    edi,ecx
c001f823:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f829:	78 33                	js     c001f85e <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f82b:	89 d9                	mov    ecx,ebx
c001f82d:	89 f0                	mov    eax,esi
c001f82f:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f835:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f83b:	89 ca                	mov    edx,ecx
c001f83d:	b9 34 00 00 00       	mov    ecx,0x34
c001f842:	29 f9                	sub    ecx,edi
c001f844:	0f ad d0             	shrd   eax,edx,cl
c001f847:	d3 fa                	sar    edx,cl
c001f849:	f6 c1 20             	test   cl,0x20
c001f84c:	74 05                	je     c001f853 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f84e:	89 d0                	mov    eax,edx
c001f850:	c1 fa 1f             	sar    edx,0x1f
c001f853:	85 db                	test   ebx,ebx
c001f855:	79 07                	jns    c001f85e <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f857:	f7 d8                	neg    eax
c001f859:	83 d2 00             	adc    edx,0x0
c001f85c:	f7 da                	neg    edx
c001f85e:	5b                   	pop    ebx
c001f85f:	5e                   	pop    esi
c001f860:	5f                   	pop    edi
c001f861:	c3                   	ret    

c001f862 <Vm::fpuULongToFloat(unsigned long long)>:
c001f862:	57                   	push   edi
c001f863:	31 c9                	xor    ecx,ecx
c001f865:	56                   	push   esi
c001f866:	53                   	push   ebx
c001f867:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f86b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f86f:	0f ba e7 14          	bt     edi,0x14
c001f873:	72 07                	jb     c001f87c <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f875:	01 f6                	add    esi,esi
c001f877:	11 ff                	adc    edi,edi
c001f879:	41                   	inc    ecx
c001f87a:	eb f3                	jmp    c001f86f <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f87c:	89 fa                	mov    edx,edi
c001f87e:	89 f0                	mov    eax,esi
c001f880:	bb 33 04 00 00       	mov    ebx,0x433
c001f885:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f88b:	29 cb                	sub    ebx,ecx
c001f88d:	89 d9                	mov    ecx,ebx
c001f88f:	5b                   	pop    ebx
c001f890:	c1 e1 14             	shl    ecx,0x14
c001f893:	5e                   	pop    esi
c001f894:	09 ca                	or     edx,ecx
c001f896:	5f                   	pop    edi
c001f897:	c3                   	ret    

c001f898 <Vm::fpuLongToFloat(long long)>:
c001f898:	56                   	push   esi
c001f899:	31 c0                	xor    eax,eax
c001f89b:	53                   	push   ebx
c001f89c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f8a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f8a4:	39 c8                	cmp    eax,ecx
c001f8a6:	19 d8                	sbb    eax,ebx
c001f8a8:	7d 04                	jge    c001f8ae <Vm::fpuLongToFloat(long long)+0x16>
c001f8aa:	31 f6                	xor    esi,esi
c001f8ac:	eb 0c                	jmp    c001f8ba <Vm::fpuLongToFloat(long long)+0x22>
c001f8ae:	f7 d9                	neg    ecx
c001f8b0:	be 01 00 00 00       	mov    esi,0x1
c001f8b5:	83 d3 00             	adc    ebx,0x0
c001f8b8:	f7 db                	neg    ebx
c001f8ba:	31 c0                	xor    eax,eax
c001f8bc:	0f ba e3 14          	bt     ebx,0x14
c001f8c0:	72 07                	jb     c001f8c9 <Vm::fpuLongToFloat(long long)+0x31>
c001f8c2:	01 c9                	add    ecx,ecx
c001f8c4:	11 db                	adc    ebx,ebx
c001f8c6:	40                   	inc    eax
c001f8c7:	eb f3                	jmp    c001f8bc <Vm::fpuLongToFloat(long long)+0x24>
c001f8c9:	ba 33 04 00 00       	mov    edx,0x433
c001f8ce:	29 c2                	sub    edx,eax
c001f8d0:	89 c8                	mov    eax,ecx
c001f8d2:	c1 e2 14             	shl    edx,0x14
c001f8d5:	89 d9                	mov    ecx,ebx
c001f8d7:	89 f3                	mov    ebx,esi
c001f8d9:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f8df:	09 ca                	or     edx,ecx
c001f8e1:	84 db                	test   bl,bl
c001f8e3:	74 06                	je     c001f8eb <Vm::fpuLongToFloat(long long)+0x53>
c001f8e5:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f8eb:	5b                   	pop    ebx
c001f8ec:	5e                   	pop    esi
c001f8ed:	c3                   	ret    

c001f8ee <Vm::fpuGet0()>:
c001f8ee:	31 c0                	xor    eax,eax
c001f8f0:	31 d2                	xor    edx,edx
c001f8f2:	c3                   	ret    

c001f8f3 <Vm::fpuGet1()>:
c001f8f3:	b8 01 00 00 00       	mov    eax,0x1
c001f8f8:	31 d2                	xor    edx,edx
c001f8fa:	c3                   	ret    

c001f8fb <Vm::fpuGetPi()>:
c001f8fb:	b8 03 00 00 00       	mov    eax,0x3
c001f900:	31 d2                	xor    edx,edx
c001f902:	c3                   	ret    

c001f903 <Vm::fpuGetLog2E()>:
c001f903:	83 ec 18             	sub    esp,0x18
c001f906:	68 54 d0 02 c0       	push   0xc002d054
c001f90b:	e8 1d aa ff ff       	call   c001a32d <Krnl::panic(char const*)>
c001f910:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f915:	31 d2                	xor    edx,edx
c001f917:	83 c4 1c             	add    esp,0x1c
c001f91a:	c3                   	ret    

c001f91b <Vm::fpuGetLogE2()>:
c001f91b:	83 ec 18             	sub    esp,0x18
c001f91e:	68 60 d0 02 c0       	push   0xc002d060
c001f923:	e8 05 aa ff ff       	call   c001a32d <Krnl::panic(char const*)>
c001f928:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f92d:	31 d2                	xor    edx,edx
c001f92f:	83 c4 1c             	add    esp,0x1c
c001f932:	c3                   	ret    

c001f933 <Vm::fpuGetLog210()>:
c001f933:	83 ec 18             	sub    esp,0x18
c001f936:	68 6c d0 02 c0       	push   0xc002d06c
c001f93b:	e8 ed a9 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c001f940:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f945:	31 d2                	xor    edx,edx
c001f947:	83 c4 1c             	add    esp,0x1c
c001f94a:	c3                   	ret    

c001f94b <Vm::fpuGetLog102()>:
c001f94b:	83 ec 18             	sub    esp,0x18
c001f94e:	68 79 d0 02 c0       	push   0xc002d079
c001f953:	e8 d5 a9 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c001f958:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f95d:	31 d2                	xor    edx,edx
c001f95f:	83 c4 1c             	add    esp,0x1c
c001f962:	c3                   	ret    

c001f963 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f963:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f967:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f96b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f96f:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f973:	0f 92 c0             	setb   al
c001f976:	c3                   	ret    

c001f977 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f977:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f97b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f97f:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f983:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f987:	09 c2                	or     edx,eax
c001f989:	0f 94 c0             	sete   al
c001f98c:	c3                   	ret    

c001f98d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f98d:	57                   	push   edi
c001f98e:	56                   	push   esi
c001f98f:	53                   	push   ebx
c001f990:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f994:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f998:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f99c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f9a0:	57                   	push   edi
c001f9a1:	56                   	push   esi
c001f9a2:	53                   	push   ebx
c001f9a3:	51                   	push   ecx
c001f9a4:	e8 ce ff ff ff       	call   c001f977 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f9a9:	83 c4 10             	add    esp,0x10
c001f9ac:	88 c2                	mov    dl,al
c001f9ae:	31 c0                	xor    eax,eax
c001f9b0:	84 d2                	test   dl,dl
c001f9b2:	75 0c                	jne    c001f9c0 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f9b4:	57                   	push   edi
c001f9b5:	56                   	push   esi
c001f9b6:	53                   	push   ebx
c001f9b7:	51                   	push   ecx
c001f9b8:	e8 a6 ff ff ff       	call   c001f963 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f9bd:	83 c4 10             	add    esp,0x10
c001f9c0:	83 e0 01             	and    eax,0x1
c001f9c3:	5b                   	pop    ebx
c001f9c4:	88 c1                	mov    cl,al
c001f9c6:	83 e2 01             	and    edx,0x1
c001f9c9:	a0 e1 25 03 c0       	mov    al,ds:0xc00325e1
c001f9ce:	c1 e2 06             	shl    edx,0x6
c001f9d1:	83 e0 ba             	and    eax,0xffffffba
c001f9d4:	5e                   	pop    esi
c001f9d5:	09 c8                	or     eax,ecx
c001f9d7:	5f                   	pop    edi
c001f9d8:	09 d0                	or     eax,edx
c001f9da:	a2 e1 25 03 c0       	mov    ds:0xc00325e1,al
c001f9df:	c3                   	ret    

c001f9e0 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f9e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f9e4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f9e8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f9ec:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f9f0:	c3                   	ret    

c001f9f1 <Vm::fpuAbs(unsigned long long)>:
c001f9f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9f5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9f9:	c3                   	ret    

c001f9fa <Vm::fpuChs(unsigned long long)>:
c001f9fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fa02:	f7 d8                	neg    eax
c001fa04:	83 d2 00             	adc    edx,0x0
c001fa07:	f7 da                	neg    edx
c001fa09:	c3                   	ret    

c001fa0a <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001fa0a:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001fa0e:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001fa13:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001fa17:	eb c7                	jmp    c001f9e0 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001fa19 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001fa19:	53                   	push   ebx
c001fa1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fa22:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fa26:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fa2a:	0f af ca             	imul   ecx,edx
c001fa2d:	0f af d8             	imul   ebx,eax
c001fa30:	f7 e2                	mul    edx
c001fa32:	01 d9                	add    ecx,ebx
c001fa34:	5b                   	pop    ebx
c001fa35:	01 ca                	add    edx,ecx
c001fa37:	c3                   	ret    

c001fa38 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001fa38:	83 ec 0c             	sub    esp,0xc
c001fa3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa4b:	e8 d4 77 00 00       	call   c0027224 <__udivdi3>
c001fa50:	83 c4 1c             	add    esp,0x1c
c001fa53:	c3                   	ret    

c001fa54 <Vm::fpuSquare(unsigned long long)>:
c001fa54:	50                   	push   eax
c001fa55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa59:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fa5d:	52                   	push   edx
c001fa5e:	50                   	push   eax
c001fa5f:	52                   	push   edx
c001fa60:	50                   	push   eax
c001fa61:	e8 b3 ff ff ff       	call   c001fa19 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fa66:	83 c4 14             	add    esp,0x14
c001fa69:	c3                   	ret    

c001fa6a <Vm::fpuGetReg(int)>:
c001fa6a:	83 ec 0c             	sub    esp,0xc
c001fa6d:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa72:	76 10                	jbe    c001fa84 <Vm::fpuGetReg(int)+0x1a>
c001fa74:	83 ec 0c             	sub    esp,0xc
c001fa77:	68 86 d0 02 c0       	push   0xc002d086
c001fa7c:	e8 ac a8 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c001fa81:	83 c4 10             	add    esp,0x10
c001fa84:	a0 e1 25 03 c0       	mov    al,ds:0xc00325e1
c001fa89:	b9 08 00 00 00       	mov    ecx,0x8
c001fa8e:	c0 e8 03             	shr    al,0x3
c001fa91:	83 e0 07             	and    eax,0x7
c001fa94:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa98:	99                   	cdq    
c001fa99:	f7 f9                	idiv   ecx
c001fa9b:	8b 04 d5 e4 25 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcda1c]
c001faa2:	8b 14 d5 e8 25 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcda18]
c001faa9:	83 c4 0c             	add    esp,0xc
c001faac:	c3                   	ret    

c001faad <Vm::fpuSetReg(int, unsigned long long)>:
c001faad:	57                   	push   edi
c001faae:	56                   	push   esi
c001faaf:	52                   	push   edx
c001fab0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fab4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fab8:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fabd:	76 10                	jbe    c001facf <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fabf:	83 ec 0c             	sub    esp,0xc
c001fac2:	68 99 d0 02 c0       	push   0xc002d099
c001fac7:	e8 61 a8 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c001facc:	83 c4 10             	add    esp,0x10
c001facf:	a0 e1 25 03 c0       	mov    al,ds:0xc00325e1
c001fad4:	b9 08 00 00 00       	mov    ecx,0x8
c001fad9:	c0 e8 03             	shr    al,0x3
c001fadc:	83 e0 07             	and    eax,0x7
c001fadf:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fae3:	99                   	cdq    
c001fae4:	f7 f9                	idiv   ecx
c001fae6:	89 34 d5 e4 25 03 c0 	mov    DWORD PTR [edx*8-0x3ffcda1c],esi
c001faed:	89 3c d5 e8 25 03 c0 	mov    DWORD PTR [edx*8-0x3ffcda18],edi
c001faf4:	58                   	pop    eax
c001faf5:	5e                   	pop    esi
c001faf6:	5f                   	pop    edi
c001faf7:	c3                   	ret    

c001faf8 <Vm::fpuPush(unsigned long long)>:
c001faf8:	a0 e1 25 03 c0       	mov    al,ds:0xc00325e1
c001fafd:	c0 e8 03             	shr    al,0x3
c001fb00:	83 e0 07             	and    eax,0x7
c001fb03:	83 c0 07             	add    eax,0x7
c001fb06:	88 c2                	mov    dl,al
c001fb08:	83 e0 07             	and    eax,0x7
c001fb0b:	83 e2 07             	and    edx,0x7
c001fb0e:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fb15:	8a 15 e1 25 03 c0    	mov    dl,BYTE PTR ds:0xc00325e1
c001fb1b:	83 e2 c7             	and    edx,0xffffffc7
c001fb1e:	09 ca                	or     edx,ecx
c001fb20:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fb24:	88 15 e1 25 03 c0    	mov    BYTE PTR ds:0xc00325e1,dl
c001fb2a:	89 0c c5 e8 25 03 c0 	mov    DWORD PTR [eax*8-0x3ffcda18],ecx
c001fb31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fb35:	89 14 c5 e4 25 03 c0 	mov    DWORD PTR [eax*8-0x3ffcda1c],edx
c001fb3c:	a1 24 26 03 c0       	mov    eax,ds:0xc0032624
c001fb41:	83 f8 08             	cmp    eax,0x8
c001fb44:	75 08                	jne    c001fb4e <Vm::fpuPush(unsigned long long)+0x56>
c001fb46:	80 0d e0 25 03 c0 40 	or     BYTE PTR ds:0xc00325e0,0x40
c001fb4d:	c3                   	ret    
c001fb4e:	40                   	inc    eax
c001fb4f:	a3 24 26 03 c0       	mov    ds:0xc0032624,eax
c001fb54:	c3                   	ret    

c001fb55 <Vm::fpuPop()>:
c001fb55:	8a 0d e1 25 03 c0    	mov    cl,BYTE PTR ds:0xc00325e1
c001fb5b:	53                   	push   ebx
c001fb5c:	c0 e9 03             	shr    cl,0x3
c001fb5f:	8a 1d e1 25 03 c0    	mov    bl,BYTE PTR ds:0xc00325e1
c001fb65:	83 e1 07             	and    ecx,0x7
c001fb68:	83 e3 c7             	and    ebx,0xffffffc7
c001fb6b:	8b 04 cd e4 25 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcda1c]
c001fb72:	8b 14 cd e8 25 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcda18]
c001fb79:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fb80:	83 e1 38             	and    ecx,0x38
c001fb83:	09 d9                	or     ecx,ebx
c001fb85:	88 0d e1 25 03 c0    	mov    BYTE PTR ds:0xc00325e1,cl
c001fb8b:	8b 0d 24 26 03 c0    	mov    ecx,DWORD PTR ds:0xc0032624
c001fb91:	85 c9                	test   ecx,ecx
c001fb93:	74 09                	je     c001fb9e <Vm::fpuPop()+0x49>
c001fb95:	49                   	dec    ecx
c001fb96:	89 0d 24 26 03 c0    	mov    DWORD PTR ds:0xc0032624,ecx
c001fb9c:	eb 07                	jmp    c001fba5 <Vm::fpuPop()+0x50>
c001fb9e:	80 0d e0 25 03 c0 40 	or     BYTE PTR ds:0xc00325e0,0x40
c001fba5:	5b                   	pop    ebx
c001fba6:	c3                   	ret    

c001fba7 <Vm::x87Handler(regs*)>:
c001fba7:	55                   	push   ebp
c001fba8:	57                   	push   edi
c001fba9:	56                   	push   esi
c001fbaa:	53                   	push   ebx
c001fbab:	83 ec 1c             	sub    esp,0x1c
c001fbae:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fbb2:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fbb7:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fbba:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fbc2:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fbc6:	50                   	push   eax
c001fbc7:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fbcb:	50                   	push   eax
c001fbcc:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fbd0:	50                   	push   eax
c001fbd1:	53                   	push   ebx
c001fbd2:	e8 23 9e ff ff       	call   c00199fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fbd7:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fbda:	83 c4 10             	add    esp,0x10
c001fbdd:	89 c6                	mov    esi,eax
c001fbdf:	80 fa d9             	cmp    dl,0xd9
c001fbe2:	0f 85 52 01 00 00    	jne    c001fd3a <Vm::x87Handler(regs*)+0x193>
c001fbe8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbec:	8d 50 20             	lea    edx,[eax+0x20]
c001fbef:	80 fa 0e             	cmp    dl,0xe
c001fbf2:	0f 87 86 00 00 00    	ja     c001fc7e <Vm::x87Handler(regs*)+0xd7>
c001fbf8:	0f b6 d2             	movzx  edx,dl
c001fbfb:	ff 24 95 ac d0 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2f54]
c001fc02:	e8 e7 fc ff ff       	call   c001f8ee <Vm::fpuGet0()>
c001fc07:	eb 05                	jmp    c001fc0e <Vm::x87Handler(regs*)+0x67>
c001fc09:	e8 e5 fc ff ff       	call   c001f8f3 <Vm::fpuGet1()>
c001fc0e:	57                   	push   edi
c001fc0f:	57                   	push   edi
c001fc10:	52                   	push   edx
c001fc11:	50                   	push   eax
c001fc12:	e8 e1 fe ff ff       	call   c001faf8 <Vm::fpuPush(unsigned long long)>
c001fc17:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fc1b:	83 c4 10             	add    esp,0x10
c001fc1e:	b0 01                	mov    al,0x1
c001fc20:	e9 e3 09 00 00       	jmp    c0020608 <Vm::x87Handler(regs*)+0xa61>
c001fc25:	83 ec 0c             	sub    esp,0xc
c001fc28:	6a 00                	push   0x0
c001fc2a:	e8 3b fe ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c001fc2f:	59                   	pop    ecx
c001fc30:	5e                   	pop    esi
c001fc31:	52                   	push   edx
c001fc32:	50                   	push   eax
c001fc33:	e8 c2 fd ff ff       	call   c001f9fa <Vm::fpuChs(unsigned long long)>
c001fc38:	eb 13                	jmp    c001fc4d <Vm::x87Handler(regs*)+0xa6>
c001fc3a:	83 ec 0c             	sub    esp,0xc
c001fc3d:	6a 00                	push   0x0
c001fc3f:	e8 26 fe ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c001fc44:	5f                   	pop    edi
c001fc45:	5d                   	pop    ebp
c001fc46:	52                   	push   edx
c001fc47:	50                   	push   eax
c001fc48:	e8 a4 fd ff ff       	call   c001f9f1 <Vm::fpuAbs(unsigned long long)>
c001fc4d:	83 c4 0c             	add    esp,0xc
c001fc50:	52                   	push   edx
c001fc51:	50                   	push   eax
c001fc52:	6a 00                	push   0x0
c001fc54:	e8 54 fe ff ff       	call   c001faad <Vm::fpuSetReg(int, unsigned long long)>
c001fc59:	eb bc                	jmp    c001fc17 <Vm::x87Handler(regs*)+0x70>
c001fc5b:	e8 d3 fc ff ff       	call   c001f933 <Vm::fpuGetLog210()>
c001fc60:	eb ac                	jmp    c001fc0e <Vm::x87Handler(regs*)+0x67>
c001fc62:	e8 9c fc ff ff       	call   c001f903 <Vm::fpuGetLog2E()>
c001fc67:	eb a5                	jmp    c001fc0e <Vm::x87Handler(regs*)+0x67>
c001fc69:	e8 8d fc ff ff       	call   c001f8fb <Vm::fpuGetPi()>
c001fc6e:	eb 9e                	jmp    c001fc0e <Vm::x87Handler(regs*)+0x67>
c001fc70:	e8 d6 fc ff ff       	call   c001f94b <Vm::fpuGetLog102()>
c001fc75:	eb 97                	jmp    c001fc0e <Vm::x87Handler(regs*)+0x67>
c001fc77:	e8 9f fc ff ff       	call   c001f91b <Vm::fpuGetLogE2()>
c001fc7c:	eb 90                	jmp    c001fc0e <Vm::x87Handler(regs*)+0x67>
c001fc7e:	8d 50 40             	lea    edx,[eax+0x40]
c001fc81:	80 fa 07             	cmp    dl,0x7
c001fc84:	77 15                	ja     c001fc9b <Vm::x87Handler(regs*)+0xf4>
c001fc86:	83 ec 0c             	sub    esp,0xc
c001fc89:	2d c0 00 00 00       	sub    eax,0xc0
c001fc8e:	50                   	push   eax
c001fc8f:	e8 d6 fd ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c001fc94:	59                   	pop    ecx
c001fc95:	5e                   	pop    esi
c001fc96:	e9 75 ff ff ff       	jmp    c001fc10 <Vm::x87Handler(regs*)+0x69>
c001fc9b:	8d 50 38             	lea    edx,[eax+0x38]
c001fc9e:	80 fa 07             	cmp    dl,0x7
c001fca1:	77 3c                	ja     c001fcdf <Vm::x87Handler(regs*)+0x138>
c001fca3:	83 ec 0c             	sub    esp,0xc
c001fca6:	2d c8 00 00 00       	sub    eax,0xc8
c001fcab:	50                   	push   eax
c001fcac:	e8 b9 fd ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c001fcb1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcb8:	89 c6                	mov    esi,eax
c001fcba:	89 d7                	mov    edi,edx
c001fcbc:	e8 a9 fd ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c001fcc1:	83 c4 0c             	add    esp,0xc
c001fcc4:	52                   	push   edx
c001fcc5:	50                   	push   eax
c001fcc6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcca:	2d c8 00 00 00       	sub    eax,0xc8
c001fccf:	50                   	push   eax
c001fcd0:	e8 d8 fd ff ff       	call   c001faad <Vm::fpuSetReg(int, unsigned long long)>
c001fcd5:	83 c4 0c             	add    esp,0xc
c001fcd8:	57                   	push   edi
c001fcd9:	56                   	push   esi
c001fcda:	e9 73 ff ff ff       	jmp    c001fc52 <Vm::x87Handler(regs*)+0xab>
c001fcdf:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fce3:	84 d2                	test   dl,dl
c001fce5:	75 0f                	jne    c001fcf6 <Vm::x87Handler(regs*)+0x14f>
c001fce7:	83 ec 0c             	sub    esp,0xc
c001fcea:	ff 36                	push   DWORD PTR [esi]
c001fcec:	e8 c8 fa ff ff       	call   c001f7b9 <Vm::fpu32ToInternal(unsigned int)>
c001fcf1:	e9 bf 00 00 00       	jmp    c001fdb5 <Vm::x87Handler(regs*)+0x20e>
c001fcf6:	80 fa 03             	cmp    dl,0x3
c001fcf9:	75 13                	jne    c001fd0e <Vm::x87Handler(regs*)+0x167>
c001fcfb:	e8 55 fe ff ff       	call   c001fb55 <Vm::fpuPop()>
c001fd00:	55                   	push   ebp
c001fd01:	55                   	push   ebp
c001fd02:	52                   	push   edx
c001fd03:	50                   	push   eax
c001fd04:	e8 4c fa ff ff       	call   c001f755 <Vm::fpuInternalTo32(unsigned long long)>
c001fd09:	e9 88 00 00 00       	jmp    c001fd96 <Vm::x87Handler(regs*)+0x1ef>
c001fd0e:	80 fa 05             	cmp    dl,0x5
c001fd11:	75 0e                	jne    c001fd21 <Vm::x87Handler(regs*)+0x17a>
c001fd13:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fd16:	66 a3 e2 25 03 c0    	mov    ds:0xc00325e2,ax
c001fd1c:	e9 df 00 00 00       	jmp    c001fe00 <Vm::x87Handler(regs*)+0x259>
c001fd21:	31 c0                	xor    eax,eax
c001fd23:	80 fa 07             	cmp    dl,0x7
c001fd26:	0f 85 dc 08 00 00    	jne    c0020608 <Vm::x87Handler(regs*)+0xa61>
c001fd2c:	66 a1 e2 25 03 c0    	mov    ax,ds:0xc00325e2
c001fd32:	66 89 06             	mov    WORD PTR [esi],ax
c001fd35:	e9 c6 00 00 00       	jmp    c001fe00 <Vm::x87Handler(regs*)+0x259>
c001fd3a:	80 fa d8             	cmp    dl,0xd8
c001fd3d:	0f 84 c9 00 00 00    	je     c001fe0c <Vm::x87Handler(regs*)+0x265>
c001fd43:	80 fa dc             	cmp    dl,0xdc
c001fd46:	0f 84 0d 02 00 00    	je     c001ff59 <Vm::x87Handler(regs*)+0x3b2>
c001fd4c:	80 fa de             	cmp    dl,0xde
c001fd4f:	0f 84 cd 02 00 00    	je     c0020022 <Vm::x87Handler(regs*)+0x47b>
c001fd55:	80 fa dd             	cmp    dl,0xdd
c001fd58:	0f 84 5f 04 00 00    	je     c00201bd <Vm::x87Handler(regs*)+0x616>
c001fd5e:	80 fa da             	cmp    dl,0xda
c001fd61:	0f 84 24 05 00 00    	je     c002028b <Vm::x87Handler(regs*)+0x6e4>
c001fd67:	80 fa df             	cmp    dl,0xdf
c001fd6a:	0f 84 68 05 00 00    	je     c00202d8 <Vm::x87Handler(regs*)+0x731>
c001fd70:	31 c0                	xor    eax,eax
c001fd72:	80 fa db             	cmp    dl,0xdb
c001fd75:	0f 85 8d 08 00 00    	jne    c0020608 <Vm::x87Handler(regs*)+0xa61>
c001fd7b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd7f:	80 fa 03             	cmp    dl,0x3
c001fd82:	0f 85 70 06 00 00    	jne    c00203f8 <Vm::x87Handler(regs*)+0x851>
c001fd88:	e8 c8 fd ff ff       	call   c001fb55 <Vm::fpuPop()>
c001fd8d:	55                   	push   ebp
c001fd8e:	55                   	push   ebp
c001fd8f:	52                   	push   edx
c001fd90:	50                   	push   eax
c001fd91:	e8 71 fa ff ff       	call   c001f807 <Vm::fpuFloatToLong(unsigned long long)>
c001fd96:	83 c4 10             	add    esp,0x10
c001fd99:	89 06                	mov    DWORD PTR [esi],eax
c001fd9b:	eb 63                	jmp    c001fe00 <Vm::x87Handler(regs*)+0x259>
c001fd9d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fda1:	84 d2                	test   dl,dl
c001fda3:	0f 85 e6 05 00 00    	jne    c002038f <Vm::x87Handler(regs*)+0x7e8>
c001fda9:	57                   	push   edi
c001fdaa:	57                   	push   edi
c001fdab:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fdae:	ff 36                	push   DWORD PTR [esi]
c001fdb0:	e8 49 fa ff ff       	call   c001f7fe <Vm::fpu64ToInternal(unsigned long long)>
c001fdb5:	5e                   	pop    esi
c001fdb6:	5f                   	pop    edi
c001fdb7:	52                   	push   edx
c001fdb8:	50                   	push   eax
c001fdb9:	e8 3a fd ff ff       	call   c001faf8 <Vm::fpuPush(unsigned long long)>
c001fdbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fdc2:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fdc5:	e9 51 fe ff ff       	jmp    c001fc1b <Vm::x87Handler(regs*)+0x74>
c001fdca:	80 fa 03             	cmp    dl,0x3
c001fdcd:	0f 85 d7 06 00 00    	jne    c00204aa <Vm::x87Handler(regs*)+0x903>
c001fdd3:	57                   	push   edi
c001fdd4:	57                   	push   edi
c001fdd5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fdd8:	ff 36                	push   DWORD PTR [esi]
c001fdda:	e8 1f fa ff ff       	call   c001f7fe <Vm::fpu64ToInternal(unsigned long long)>
c001fddf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fde6:	89 c6                	mov    esi,eax
c001fde8:	89 d7                	mov    edi,edx
c001fdea:	e8 7b fc ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c001fdef:	57                   	push   edi
c001fdf0:	56                   	push   esi
c001fdf1:	52                   	push   edx
c001fdf2:	50                   	push   eax
c001fdf3:	e8 95 fb ff ff       	call   c001f98d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fdf8:	83 c4 20             	add    esp,0x20
c001fdfb:	e8 55 fd ff ff       	call   c001fb55 <Vm::fpuPop()>
c001fe00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe04:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fe07:	e9 12 fe ff ff       	jmp    c001fc1e <Vm::x87Handler(regs*)+0x77>
c001fe0c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe10:	8d 50 40             	lea    edx,[eax+0x40]
c001fe13:	80 fa 07             	cmp    dl,0x7
c001fe16:	77 29                	ja     c001fe41 <Vm::x87Handler(regs*)+0x29a>
c001fe18:	83 ec 0c             	sub    esp,0xc
c001fe1b:	2d c0 00 00 00       	sub    eax,0xc0
c001fe20:	50                   	push   eax
c001fe21:	e8 44 fc ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c001fe26:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe2d:	89 c6                	mov    esi,eax
c001fe2f:	89 d7                	mov    edi,edx
c001fe31:	e8 34 fc ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c001fe36:	57                   	push   edi
c001fe37:	56                   	push   esi
c001fe38:	52                   	push   edx
c001fe39:	50                   	push   eax
c001fe3a:	e8 a1 fb ff ff       	call   c001f9e0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe3f:	eb 2f                	jmp    c001fe70 <Vm::x87Handler(regs*)+0x2c9>
c001fe41:	8d 50 38             	lea    edx,[eax+0x38]
c001fe44:	80 fa 07             	cmp    dl,0x7
c001fe47:	77 2f                	ja     c001fe78 <Vm::x87Handler(regs*)+0x2d1>
c001fe49:	83 ec 0c             	sub    esp,0xc
c001fe4c:	2d c8 00 00 00       	sub    eax,0xc8
c001fe51:	50                   	push   eax
c001fe52:	e8 13 fc ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c001fe57:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe5e:	89 c6                	mov    esi,eax
c001fe60:	89 d7                	mov    edi,edx
c001fe62:	e8 03 fc ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c001fe67:	57                   	push   edi
c001fe68:	56                   	push   esi
c001fe69:	52                   	push   edx
c001fe6a:	50                   	push   eax
c001fe6b:	e8 a9 fb ff ff       	call   c001fa19 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe70:	83 c4 1c             	add    esp,0x1c
c001fe73:	e9 d8 fd ff ff       	jmp    c001fc50 <Vm::x87Handler(regs*)+0xa9>
c001fe78:	8d 50 30             	lea    edx,[eax+0x30]
c001fe7b:	80 fa 07             	cmp    dl,0x7
c001fe7e:	77 0d                	ja     c001fe8d <Vm::x87Handler(regs*)+0x2e6>
c001fe80:	83 ec 0c             	sub    esp,0xc
c001fe83:	2d d0 00 00 00       	sub    eax,0xd0
c001fe88:	e9 99 03 00 00       	jmp    c0020226 <Vm::x87Handler(regs*)+0x67f>
c001fe8d:	8d 50 28             	lea    edx,[eax+0x28]
c001fe90:	80 fa 07             	cmp    dl,0x7
c001fe93:	77 0d                	ja     c001fea2 <Vm::x87Handler(regs*)+0x2fb>
c001fe95:	83 ec 0c             	sub    esp,0xc
c001fe98:	2d d8 00 00 00       	sub    eax,0xd8
c001fe9d:	e9 c0 03 00 00       	jmp    c0020262 <Vm::x87Handler(regs*)+0x6bb>
c001fea2:	8d 50 20             	lea    edx,[eax+0x20]
c001fea5:	80 fa 07             	cmp    dl,0x7
c001fea8:	77 1b                	ja     c001fec5 <Vm::x87Handler(regs*)+0x31e>
c001feaa:	83 ec 0c             	sub    esp,0xc
c001fead:	2d e0 00 00 00       	sub    eax,0xe0
c001feb2:	50                   	push   eax
c001feb3:	e8 b2 fb ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c001feb8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001febf:	89 c6                	mov    esi,eax
c001fec1:	89 d7                	mov    edi,edx
c001fec3:	eb 22                	jmp    c001fee7 <Vm::x87Handler(regs*)+0x340>
c001fec5:	8d 50 18             	lea    edx,[eax+0x18]
c001fec8:	80 fa 07             	cmp    dl,0x7
c001fecb:	77 2d                	ja     c001fefa <Vm::x87Handler(regs*)+0x353>
c001fecd:	83 ec 0c             	sub    esp,0xc
c001fed0:	6a 00                	push   0x0
c001fed2:	e8 93 fb ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c001fed7:	89 c6                	mov    esi,eax
c001fed9:	89 d7                	mov    edi,edx
c001fedb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fedf:	2d e8 00 00 00       	sub    eax,0xe8
c001fee4:	89 04 24             	mov    DWORD PTR [esp],eax
c001fee7:	e8 7e fb ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c001feec:	57                   	push   edi
c001feed:	56                   	push   esi
c001feee:	52                   	push   edx
c001feef:	50                   	push   eax
c001fef0:	e8 15 fb ff ff       	call   c001fa0a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fef5:	e9 76 ff ff ff       	jmp    c001fe70 <Vm::x87Handler(regs*)+0x2c9>
c001fefa:	8d 50 10             	lea    edx,[eax+0x10]
c001fefd:	80 fa 07             	cmp    dl,0x7
c001ff00:	77 1b                	ja     c001ff1d <Vm::x87Handler(regs*)+0x376>
c001ff02:	83 ec 0c             	sub    esp,0xc
c001ff05:	2d f0 00 00 00       	sub    eax,0xf0
c001ff0a:	50                   	push   eax
c001ff0b:	e8 5a fb ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c001ff10:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff17:	89 c6                	mov    esi,eax
c001ff19:	89 d7                	mov    edi,edx
c001ff1b:	eb 22                	jmp    c001ff3f <Vm::x87Handler(regs*)+0x398>
c001ff1d:	3c f7                	cmp    al,0xf7
c001ff1f:	0f 86 d1 03 00 00    	jbe    c00202f6 <Vm::x87Handler(regs*)+0x74f>
c001ff25:	83 ec 0c             	sub    esp,0xc
c001ff28:	6a 00                	push   0x0
c001ff2a:	e8 3b fb ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c001ff2f:	89 c6                	mov    esi,eax
c001ff31:	89 d7                	mov    edi,edx
c001ff33:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff37:	2d f8 00 00 00       	sub    eax,0xf8
c001ff3c:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff3f:	e8 26 fb ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c001ff44:	57                   	push   edi
c001ff45:	56                   	push   esi
c001ff46:	52                   	push   edx
c001ff47:	50                   	push   eax
c001ff48:	e8 eb fa ff ff       	call   c001fa38 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ff4d:	83 c4 1c             	add    esp,0x1c
c001ff50:	52                   	push   edx
c001ff51:	50                   	push   eax
c001ff52:	6a 00                	push   0x0
c001ff54:	e9 51 02 00 00       	jmp    c00201aa <Vm::x87Handler(regs*)+0x603>
c001ff59:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff5d:	8d 50 40             	lea    edx,[eax+0x40]
c001ff60:	80 fa 07             	cmp    dl,0x7
c001ff63:	77 37                	ja     c001ff9c <Vm::x87Handler(regs*)+0x3f5>
c001ff65:	83 ec 0c             	sub    esp,0xc
c001ff68:	2d c0 00 00 00       	sub    eax,0xc0
c001ff6d:	50                   	push   eax
c001ff6e:	e8 f7 fa ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c001ff73:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff7a:	89 c6                	mov    esi,eax
c001ff7c:	89 d7                	mov    edi,edx
c001ff7e:	e8 e7 fa ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c001ff83:	57                   	push   edi
c001ff84:	56                   	push   esi
c001ff85:	52                   	push   edx
c001ff86:	50                   	push   eax
c001ff87:	e8 54 fa ff ff       	call   c001f9e0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff8c:	83 c4 1c             	add    esp,0x1c
c001ff8f:	52                   	push   edx
c001ff90:	50                   	push   eax
c001ff91:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff95:	2d c0 00 00 00       	sub    eax,0xc0
c001ff9a:	eb 3d                	jmp    c001ffd9 <Vm::x87Handler(regs*)+0x432>
c001ff9c:	8d 50 38             	lea    edx,[eax+0x38]
c001ff9f:	80 fa 07             	cmp    dl,0x7
c001ffa2:	77 3b                	ja     c001ffdf <Vm::x87Handler(regs*)+0x438>
c001ffa4:	83 ec 0c             	sub    esp,0xc
c001ffa7:	2d c8 00 00 00       	sub    eax,0xc8
c001ffac:	50                   	push   eax
c001ffad:	e8 b8 fa ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c001ffb2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffb9:	89 c6                	mov    esi,eax
c001ffbb:	89 d7                	mov    edi,edx
c001ffbd:	e8 a8 fa ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c001ffc2:	57                   	push   edi
c001ffc3:	56                   	push   esi
c001ffc4:	52                   	push   edx
c001ffc5:	50                   	push   eax
c001ffc6:	e8 4e fa ff ff       	call   c001fa19 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ffcb:	83 c4 1c             	add    esp,0x1c
c001ffce:	52                   	push   edx
c001ffcf:	50                   	push   eax
c001ffd0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffd4:	2d c8 00 00 00       	sub    eax,0xc8
c001ffd9:	50                   	push   eax
c001ffda:	e9 75 fc ff ff       	jmp    c001fc54 <Vm::x87Handler(regs*)+0xad>
c001ffdf:	83 c0 18             	add    eax,0x18
c001ffe2:	3c 07                	cmp    al,0x7
c001ffe4:	0f 87 3b 04 00 00    	ja     c0020425 <Vm::x87Handler(regs*)+0x87e>
c001ffea:	83 ec 0c             	sub    esp,0xc
c001ffed:	6a 00                	push   0x0
c001ffef:	e8 76 fa ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c001fff4:	89 c6                	mov    esi,eax
c001fff6:	89 d7                	mov    edi,edx
c001fff8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fffc:	2d e8 00 00 00       	sub    eax,0xe8
c0020001:	89 04 24             	mov    DWORD PTR [esp],eax
c0020004:	e8 61 fa ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c0020009:	57                   	push   edi
c002000a:	56                   	push   esi
c002000b:	52                   	push   edx
c002000c:	50                   	push   eax
c002000d:	e8 f8 f9 ff ff       	call   c001fa0a <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020012:	83 c4 1c             	add    esp,0x1c
c0020015:	52                   	push   edx
c0020016:	50                   	push   eax
c0020017:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002001b:	2d e8 00 00 00       	sub    eax,0xe8
c0020020:	eb b7                	jmp    c001ffd9 <Vm::x87Handler(regs*)+0x432>
c0020022:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020026:	8d 50 40             	lea    edx,[eax+0x40]
c0020029:	80 fa 07             	cmp    dl,0x7
c002002c:	77 3a                	ja     c0020068 <Vm::x87Handler(regs*)+0x4c1>
c002002e:	83 ec 0c             	sub    esp,0xc
c0020031:	2d c0 00 00 00       	sub    eax,0xc0
c0020036:	50                   	push   eax
c0020037:	e8 2e fa ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c002003c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020043:	89 c6                	mov    esi,eax
c0020045:	89 d7                	mov    edi,edx
c0020047:	e8 1e fa ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c002004c:	57                   	push   edi
c002004d:	56                   	push   esi
c002004e:	52                   	push   edx
c002004f:	50                   	push   eax
c0020050:	e8 8b f9 ff ff       	call   c001f9e0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020055:	83 c4 1c             	add    esp,0x1c
c0020058:	52                   	push   edx
c0020059:	50                   	push   eax
c002005a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002005e:	2d c0 00 00 00       	sub    eax,0xc0
c0020063:	e9 9e 01 00 00       	jmp    c0020206 <Vm::x87Handler(regs*)+0x65f>
c0020068:	8d 50 20             	lea    edx,[eax+0x20]
c002006b:	80 fa 07             	cmp    dl,0x7
c002006e:	77 3a                	ja     c00200aa <Vm::x87Handler(regs*)+0x503>
c0020070:	83 ec 0c             	sub    esp,0xc
c0020073:	2d e0 00 00 00       	sub    eax,0xe0
c0020078:	50                   	push   eax
c0020079:	e8 ec f9 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c002007e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020085:	89 c6                	mov    esi,eax
c0020087:	89 d7                	mov    edi,edx
c0020089:	e8 dc f9 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c002008e:	57                   	push   edi
c002008f:	56                   	push   esi
c0020090:	52                   	push   edx
c0020091:	50                   	push   eax
c0020092:	e8 73 f9 ff ff       	call   c001fa0a <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020097:	83 c4 1c             	add    esp,0x1c
c002009a:	52                   	push   edx
c002009b:	50                   	push   eax
c002009c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200a0:	2d e0 00 00 00       	sub    eax,0xe0
c00200a5:	e9 5c 01 00 00       	jmp    c0020206 <Vm::x87Handler(regs*)+0x65f>
c00200aa:	8d 50 18             	lea    edx,[eax+0x18]
c00200ad:	80 fa 07             	cmp    dl,0x7
c00200b0:	77 3b                	ja     c00200ed <Vm::x87Handler(regs*)+0x546>
c00200b2:	83 ec 0c             	sub    esp,0xc
c00200b5:	6a 00                	push   0x0
c00200b7:	e8 ae f9 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c00200bc:	89 c6                	mov    esi,eax
c00200be:	89 d7                	mov    edi,edx
c00200c0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200c4:	2d e8 00 00 00       	sub    eax,0xe8
c00200c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00200cc:	e8 99 f9 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c00200d1:	57                   	push   edi
c00200d2:	56                   	push   esi
c00200d3:	52                   	push   edx
c00200d4:	50                   	push   eax
c00200d5:	e8 30 f9 ff ff       	call   c001fa0a <Vm::fpuSub(unsigned long long, unsigned long long)>
c00200da:	83 c4 1c             	add    esp,0x1c
c00200dd:	52                   	push   edx
c00200de:	50                   	push   eax
c00200df:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200e3:	2d e8 00 00 00       	sub    eax,0xe8
c00200e8:	e9 19 01 00 00       	jmp    c0020206 <Vm::x87Handler(regs*)+0x65f>
c00200ed:	8d 50 38             	lea    edx,[eax+0x38]
c00200f0:	80 fa 07             	cmp    dl,0x7
c00200f3:	77 37                	ja     c002012c <Vm::x87Handler(regs*)+0x585>
c00200f5:	83 ec 0c             	sub    esp,0xc
c00200f8:	2d c8 00 00 00       	sub    eax,0xc8
c00200fd:	50                   	push   eax
c00200fe:	e8 67 f9 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c0020103:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002010a:	89 c6                	mov    esi,eax
c002010c:	89 d7                	mov    edi,edx
c002010e:	e8 57 f9 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c0020113:	57                   	push   edi
c0020114:	56                   	push   esi
c0020115:	52                   	push   edx
c0020116:	50                   	push   eax
c0020117:	e8 fd f8 ff ff       	call   c001fa19 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002011c:	83 c4 1c             	add    esp,0x1c
c002011f:	52                   	push   edx
c0020120:	50                   	push   eax
c0020121:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020125:	2d c8 00 00 00       	sub    eax,0xc8
c002012a:	eb 7d                	jmp    c00201a9 <Vm::x87Handler(regs*)+0x602>
c002012c:	3c f7                	cmp    al,0xf7
c002012e:	76 38                	jbe    c0020168 <Vm::x87Handler(regs*)+0x5c1>
c0020130:	83 ec 0c             	sub    esp,0xc
c0020133:	6a 00                	push   0x0
c0020135:	e8 30 f9 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c002013a:	89 c6                	mov    esi,eax
c002013c:	89 d7                	mov    edi,edx
c002013e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020142:	2d f8 00 00 00       	sub    eax,0xf8
c0020147:	89 04 24             	mov    DWORD PTR [esp],eax
c002014a:	e8 1b f9 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c002014f:	57                   	push   edi
c0020150:	56                   	push   esi
c0020151:	52                   	push   edx
c0020152:	50                   	push   eax
c0020153:	e8 e0 f8 ff ff       	call   c001fa38 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020158:	83 c4 1c             	add    esp,0x1c
c002015b:	52                   	push   edx
c002015c:	50                   	push   eax
c002015d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020161:	2d f8 00 00 00       	sub    eax,0xf8
c0020166:	eb 41                	jmp    c00201a9 <Vm::x87Handler(regs*)+0x602>
c0020168:	8d 50 10             	lea    edx,[eax+0x10]
c002016b:	80 fa 07             	cmp    dl,0x7
c002016e:	0f 87 5a 01 00 00    	ja     c00202ce <Vm::x87Handler(regs*)+0x727>
c0020174:	83 ec 0c             	sub    esp,0xc
c0020177:	2d f0 00 00 00       	sub    eax,0xf0
c002017c:	50                   	push   eax
c002017d:	e8 e8 f8 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c0020182:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020189:	89 c6                	mov    esi,eax
c002018b:	89 d7                	mov    edi,edx
c002018d:	e8 d8 f8 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c0020192:	57                   	push   edi
c0020193:	56                   	push   esi
c0020194:	52                   	push   edx
c0020195:	50                   	push   eax
c0020196:	e8 9d f8 ff ff       	call   c001fa38 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002019b:	83 c4 1c             	add    esp,0x1c
c002019e:	52                   	push   edx
c002019f:	50                   	push   eax
c00201a0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201a4:	2d f0 00 00 00       	sub    eax,0xf0
c00201a9:	50                   	push   eax
c00201aa:	e8 fe f8 ff ff       	call   c001faad <Vm::fpuSetReg(int, unsigned long long)>
c00201af:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201b3:	e8 9d f9 ff ff       	call   c001fb55 <Vm::fpuPop()>
c00201b8:	e9 5e fa ff ff       	jmp    c001fc1b <Vm::x87Handler(regs*)+0x74>
c00201bd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201c1:	8d 50 30             	lea    edx,[eax+0x30]
c00201c4:	80 fa 07             	cmp    dl,0x7
c00201c7:	77 1d                	ja     c00201e6 <Vm::x87Handler(regs*)+0x63f>
c00201c9:	83 ec 0c             	sub    esp,0xc
c00201cc:	6a 00                	push   0x0
c00201ce:	e8 97 f8 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c00201d3:	83 c4 0c             	add    esp,0xc
c00201d6:	52                   	push   edx
c00201d7:	50                   	push   eax
c00201d8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201dc:	2d d0 00 00 00       	sub    eax,0xd0
c00201e1:	e9 f3 fd ff ff       	jmp    c001ffd9 <Vm::x87Handler(regs*)+0x432>
c00201e6:	8d 50 28             	lea    edx,[eax+0x28]
c00201e9:	80 fa 07             	cmp    dl,0x7
c00201ec:	77 28                	ja     c0020216 <Vm::x87Handler(regs*)+0x66f>
c00201ee:	83 ec 0c             	sub    esp,0xc
c00201f1:	6a 00                	push   0x0
c00201f3:	e8 72 f8 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c00201f8:	83 c4 0c             	add    esp,0xc
c00201fb:	52                   	push   edx
c00201fc:	50                   	push   eax
c00201fd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020201:	2d d8 00 00 00       	sub    eax,0xd8
c0020206:	50                   	push   eax
c0020207:	e8 a1 f8 ff ff       	call   c001faad <Vm::fpuSetReg(int, unsigned long long)>
c002020c:	e8 44 f9 ff ff       	call   c001fb55 <Vm::fpuPop()>
c0020211:	e9 01 fa ff ff       	jmp    c001fc17 <Vm::x87Handler(regs*)+0x70>
c0020216:	8d 50 20             	lea    edx,[eax+0x20]
c0020219:	80 fa 07             	cmp    dl,0x7
c002021c:	77 30                	ja     c002024e <Vm::x87Handler(regs*)+0x6a7>
c002021e:	83 ec 0c             	sub    esp,0xc
c0020221:	2d e0 00 00 00       	sub    eax,0xe0
c0020226:	50                   	push   eax
c0020227:	e8 3e f8 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c002022c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020233:	89 c6                	mov    esi,eax
c0020235:	89 d7                	mov    edi,edx
c0020237:	e8 2e f8 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c002023c:	57                   	push   edi
c002023d:	56                   	push   esi
c002023e:	52                   	push   edx
c002023f:	50                   	push   eax
c0020240:	e8 48 f7 ff ff       	call   c001f98d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020245:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020249:	e9 54 02 00 00       	jmp    c00204a2 <Vm::x87Handler(regs*)+0x8fb>
c002024e:	8d 50 18             	lea    edx,[eax+0x18]
c0020251:	80 fa 07             	cmp    dl,0x7
c0020254:	0f 87 43 fb ff ff    	ja     c001fd9d <Vm::x87Handler(regs*)+0x1f6>
c002025a:	83 ec 0c             	sub    esp,0xc
c002025d:	2d e8 00 00 00       	sub    eax,0xe8
c0020262:	50                   	push   eax
c0020263:	e8 02 f8 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c0020268:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002026f:	89 c6                	mov    esi,eax
c0020271:	89 d7                	mov    edi,edx
c0020273:	e8 f2 f7 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c0020278:	57                   	push   edi
c0020279:	56                   	push   esi
c002027a:	52                   	push   edx
c002027b:	50                   	push   eax
c002027c:	e8 0c f7 ff ff       	call   c001f98d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020281:	83 c4 20             	add    esp,0x20
c0020284:	e8 cc f8 ff ff       	call   c001fb55 <Vm::fpuPop()>
c0020289:	eb 62                	jmp    c00202ed <Vm::x87Handler(regs*)+0x746>
c002028b:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c002028f:	0f 85 0f 01 00 00    	jne    c00203a4 <Vm::x87Handler(regs*)+0x7fd>
c0020295:	83 ec 0c             	sub    esp,0xc
c0020298:	6a 01                	push   0x1
c002029a:	e8 cb f7 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c002029f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202a6:	89 c6                	mov    esi,eax
c00202a8:	89 d7                	mov    edi,edx
c00202aa:	e8 bb f7 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c00202af:	57                   	push   edi
c00202b0:	56                   	push   esi
c00202b1:	52                   	push   edx
c00202b2:	50                   	push   eax
c00202b3:	e8 d5 f6 ff ff       	call   c001f98d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00202b8:	83 c4 20             	add    esp,0x20
c00202bb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00202bf:	e8 91 f8 ff ff       	call   c001fb55 <Vm::fpuPop()>
c00202c4:	e8 8c f8 ff ff       	call   c001fb55 <Vm::fpuPop()>
c00202c9:	e9 50 f9 ff ff       	jmp    c001fc1e <Vm::x87Handler(regs*)+0x77>
c00202ce:	3c d9                	cmp    al,0xd9
c00202d0:	0f 85 b5 02 00 00    	jne    c002058b <Vm::x87Handler(regs*)+0x9e4>
c00202d6:	eb bd                	jmp    c0020295 <Vm::x87Handler(regs*)+0x6ee>
c00202d8:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00202dc:	0f 85 ea 02 00 00    	jne    c00205cc <Vm::x87Handler(regs*)+0xa25>
c00202e2:	0f b7 05 e0 25 03 c0 	movzx  eax,WORD PTR ds:0xc00325e0
c00202e9:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00202ed:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00202f1:	e9 28 f9 ff ff       	jmp    c001fc1e <Vm::x87Handler(regs*)+0x77>
c00202f6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202fa:	84 d2                	test   dl,dl
c00202fc:	75 0f                	jne    c002030d <Vm::x87Handler(regs*)+0x766>
c00202fe:	83 ec 0c             	sub    esp,0xc
c0020301:	ff 36                	push   DWORD PTR [esi]
c0020303:	e8 b1 f4 ff ff       	call   c001f7b9 <Vm::fpu32ToInternal(unsigned int)>
c0020308:	e9 2c 01 00 00       	jmp    c0020439 <Vm::x87Handler(regs*)+0x892>
c002030d:	80 fa 01             	cmp    dl,0x1
c0020310:	75 0f                	jne    c0020321 <Vm::x87Handler(regs*)+0x77a>
c0020312:	83 ec 0c             	sub    esp,0xc
c0020315:	ff 36                	push   DWORD PTR [esi]
c0020317:	e8 9d f4 ff ff       	call   c001f7b9 <Vm::fpu32ToInternal(unsigned int)>
c002031c:	e9 81 02 00 00       	jmp    c00205a2 <Vm::x87Handler(regs*)+0x9fb>
c0020321:	80 fa 04             	cmp    dl,0x4
c0020324:	75 0f                	jne    c0020335 <Vm::x87Handler(regs*)+0x78e>
c0020326:	83 ec 0c             	sub    esp,0xc
c0020329:	ff 36                	push   DWORD PTR [esi]
c002032b:	e8 89 f4 ff ff       	call   c001f7b9 <Vm::fpu32ToInternal(unsigned int)>
c0020330:	e9 86 01 00 00       	jmp    c00204bb <Vm::x87Handler(regs*)+0x914>
c0020335:	80 fa 05             	cmp    dl,0x5
c0020338:	75 1b                	jne    c0020355 <Vm::x87Handler(regs*)+0x7ae>
c002033a:	83 ec 0c             	sub    esp,0xc
c002033d:	6a 00                	push   0x0
c002033f:	e8 26 f7 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c0020344:	89 c7                	mov    edi,eax
c0020346:	89 d5                	mov    ebp,edx
c0020348:	58                   	pop    eax
c0020349:	ff 36                	push   DWORD PTR [esi]
c002034b:	e8 69 f4 ff ff       	call   c001f7b9 <Vm::fpu32ToInternal(unsigned int)>
c0020350:	e9 a3 01 00 00       	jmp    c00204f8 <Vm::x87Handler(regs*)+0x951>
c0020355:	80 fa 06             	cmp    dl,0x6
c0020358:	75 0f                	jne    c0020369 <Vm::x87Handler(regs*)+0x7c2>
c002035a:	83 ec 0c             	sub    esp,0xc
c002035d:	ff 36                	push   DWORD PTR [esi]
c002035f:	e8 55 f4 ff ff       	call   c001f7b9 <Vm::fpu32ToInternal(unsigned int)>
c0020364:	e9 ae 01 00 00       	jmp    c0020517 <Vm::x87Handler(regs*)+0x970>
c0020369:	31 c0                	xor    eax,eax
c002036b:	80 fa 07             	cmp    dl,0x7
c002036e:	0f 85 94 02 00 00    	jne    c0020608 <Vm::x87Handler(regs*)+0xa61>
c0020374:	83 ec 0c             	sub    esp,0xc
c0020377:	6a 00                	push   0x0
c0020379:	e8 ec f6 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c002037e:	89 c7                	mov    edi,eax
c0020380:	89 d5                	mov    ebp,edx
c0020382:	58                   	pop    eax
c0020383:	ff 36                	push   DWORD PTR [esi]
c0020385:	e8 2f f4 ff ff       	call   c001f7b9 <Vm::fpu32ToInternal(unsigned int)>
c002038a:	e9 cb 01 00 00       	jmp    c002055a <Vm::x87Handler(regs*)+0x9b3>
c002038f:	80 fa 03             	cmp    dl,0x3
c0020392:	0f 85 d3 01 00 00    	jne    c002056b <Vm::x87Handler(regs*)+0x9c4>
c0020398:	e8 b8 f7 ff ff       	call   c001fb55 <Vm::fpuPop()>
c002039d:	51                   	push   ecx
c002039e:	51                   	push   ecx
c002039f:	e9 de 01 00 00       	jmp    c0020582 <Vm::x87Handler(regs*)+0x9db>
c00203a4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00203a8:	80 fa 01             	cmp    dl,0x1
c00203ab:	75 09                	jne    c00203b6 <Vm::x87Handler(regs*)+0x80f>
c00203ad:	57                   	push   edi
c00203ae:	57                   	push   edi
c00203af:	8b 06                	mov    eax,DWORD PTR [esi]
c00203b1:	e9 e3 01 00 00       	jmp    c0020599 <Vm::x87Handler(regs*)+0x9f2>
c00203b6:	80 fa 04             	cmp    dl,0x4
c00203b9:	75 12                	jne    c00203cd <Vm::x87Handler(regs*)+0x826>
c00203bb:	31 d2                	xor    edx,edx
c00203bd:	51                   	push   ecx
c00203be:	51                   	push   ecx
c00203bf:	8b 06                	mov    eax,DWORD PTR [esi]
c00203c1:	52                   	push   edx
c00203c2:	50                   	push   eax
c00203c3:	e8 d0 f4 ff ff       	call   c001f898 <Vm::fpuLongToFloat(long long)>
c00203c8:	e9 ee 00 00 00       	jmp    c00204bb <Vm::x87Handler(regs*)+0x914>
c00203cd:	31 c0                	xor    eax,eax
c00203cf:	80 fa 07             	cmp    dl,0x7
c00203d2:	0f 85 30 02 00 00    	jne    c0020608 <Vm::x87Handler(regs*)+0xa61>
c00203d8:	83 ec 0c             	sub    esp,0xc
c00203db:	6a 00                	push   0x0
c00203dd:	e8 88 f6 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c00203e2:	89 c7                	mov    edi,eax
c00203e4:	89 d5                	mov    ebp,edx
c00203e6:	58                   	pop    eax
c00203e7:	8b 06                	mov    eax,DWORD PTR [esi]
c00203e9:	5a                   	pop    edx
c00203ea:	31 d2                	xor    edx,edx
c00203ec:	52                   	push   edx
c00203ed:	50                   	push   eax
c00203ee:	e8 a5 f4 ff ff       	call   c001f898 <Vm::fpuLongToFloat(long long)>
c00203f3:	e9 62 01 00 00       	jmp    c002055a <Vm::x87Handler(regs*)+0x9b3>
c00203f8:	84 d2                	test   dl,dl
c00203fa:	75 0d                	jne    c0020409 <Vm::x87Handler(regs*)+0x862>
c00203fc:	31 d2                	xor    edx,edx
c00203fe:	55                   	push   ebp
c00203ff:	55                   	push   ebp
c0020400:	8b 06                	mov    eax,DWORD PTR [esi]
c0020402:	52                   	push   edx
c0020403:	50                   	push   eax
c0020404:	e9 d3 01 00 00       	jmp    c00205dc <Vm::x87Handler(regs*)+0xa35>
c0020409:	31 c0                	xor    eax,eax
c002040b:	80 fa 02             	cmp    dl,0x2
c002040e:	0f 85 f4 01 00 00    	jne    c0020608 <Vm::x87Handler(regs*)+0xa61>
c0020414:	83 ec 0c             	sub    esp,0xc
c0020417:	6a 00                	push   0x0
c0020419:	e8 4c f6 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c002041e:	59                   	pop    ecx
c002041f:	5f                   	pop    edi
c0020420:	e9 6a f9 ff ff       	jmp    c001fd8f <Vm::x87Handler(regs*)+0x1e8>
c0020425:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020429:	84 d2                	test   dl,dl
c002042b:	75 2a                	jne    c0020457 <Vm::x87Handler(regs*)+0x8b0>
c002042d:	50                   	push   eax
c002042e:	50                   	push   eax
c002042f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020432:	ff 36                	push   DWORD PTR [esi]
c0020434:	e8 c5 f3 ff ff       	call   c001f7fe <Vm::fpu64ToInternal(unsigned long long)>
c0020439:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020440:	89 c6                	mov    esi,eax
c0020442:	89 d7                	mov    edi,edx
c0020444:	e8 21 f6 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c0020449:	57                   	push   edi
c002044a:	56                   	push   esi
c002044b:	52                   	push   edx
c002044c:	50                   	push   eax
c002044d:	e8 8e f5 ff ff       	call   c001f9e0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020452:	e9 64 01 00 00       	jmp    c00205bb <Vm::x87Handler(regs*)+0xa14>
c0020457:	80 fa 01             	cmp    dl,0x1
c002045a:	75 11                	jne    c002046d <Vm::x87Handler(regs*)+0x8c6>
c002045c:	50                   	push   eax
c002045d:	50                   	push   eax
c002045e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020461:	ff 36                	push   DWORD PTR [esi]
c0020463:	e8 96 f3 ff ff       	call   c001f7fe <Vm::fpu64ToInternal(unsigned long long)>
c0020468:	e9 35 01 00 00       	jmp    c00205a2 <Vm::x87Handler(regs*)+0x9fb>
c002046d:	80 fa 02             	cmp    dl,0x2
c0020470:	0f 85 54 f9 ff ff    	jne    c001fdca <Vm::x87Handler(regs*)+0x223>
c0020476:	55                   	push   ebp
c0020477:	55                   	push   ebp
c0020478:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002047b:	ff 36                	push   DWORD PTR [esi]
c002047d:	e8 7c f3 ff ff       	call   c001f7fe <Vm::fpu64ToInternal(unsigned long long)>
c0020482:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020489:	89 c6                	mov    esi,eax
c002048b:	89 d7                	mov    edi,edx
c002048d:	e8 d8 f5 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c0020492:	57                   	push   edi
c0020493:	56                   	push   esi
c0020494:	52                   	push   edx
c0020495:	50                   	push   eax
c0020496:	e8 f2 f4 ff ff       	call   c001f98d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002049b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002049f:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00204a2:	83 c4 20             	add    esp,0x20
c00204a5:	e9 74 f7 ff ff       	jmp    c001fc1e <Vm::x87Handler(regs*)+0x77>
c00204aa:	80 fa 04             	cmp    dl,0x4
c00204ad:	75 2a                	jne    c00204d9 <Vm::x87Handler(regs*)+0x932>
c00204af:	51                   	push   ecx
c00204b0:	51                   	push   ecx
c00204b1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204b4:	ff 36                	push   DWORD PTR [esi]
c00204b6:	e8 43 f3 ff ff       	call   c001f7fe <Vm::fpu64ToInternal(unsigned long long)>
c00204bb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204c2:	89 c6                	mov    esi,eax
c00204c4:	89 d7                	mov    edi,edx
c00204c6:	e8 9f f5 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c00204cb:	57                   	push   edi
c00204cc:	56                   	push   esi
c00204cd:	52                   	push   edx
c00204ce:	50                   	push   eax
c00204cf:	e8 36 f5 ff ff       	call   c001fa0a <Vm::fpuSub(unsigned long long, unsigned long long)>
c00204d4:	e9 e2 00 00 00       	jmp    c00205bb <Vm::x87Handler(regs*)+0xa14>
c00204d9:	80 fa 05             	cmp    dl,0x5
c00204dc:	75 28                	jne    c0020506 <Vm::x87Handler(regs*)+0x95f>
c00204de:	83 ec 0c             	sub    esp,0xc
c00204e1:	6a 00                	push   0x0
c00204e3:	e8 82 f5 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c00204e8:	89 c7                	mov    edi,eax
c00204ea:	89 d5                	mov    ebp,edx
c00204ec:	58                   	pop    eax
c00204ed:	5a                   	pop    edx
c00204ee:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204f1:	ff 36                	push   DWORD PTR [esi]
c00204f3:	e8 06 f3 ff ff       	call   c001f7fe <Vm::fpu64ToInternal(unsigned long long)>
c00204f8:	83 c4 10             	add    esp,0x10
c00204fb:	55                   	push   ebp
c00204fc:	57                   	push   edi
c00204fd:	52                   	push   edx
c00204fe:	50                   	push   eax
c00204ff:	e8 06 f5 ff ff       	call   c001fa0a <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020504:	eb 60                	jmp    c0020566 <Vm::x87Handler(regs*)+0x9bf>
c0020506:	80 fa 06             	cmp    dl,0x6
c0020509:	75 2a                	jne    c0020535 <Vm::x87Handler(regs*)+0x98e>
c002050b:	51                   	push   ecx
c002050c:	51                   	push   ecx
c002050d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020510:	ff 36                	push   DWORD PTR [esi]
c0020512:	e8 e7 f2 ff ff       	call   c001f7fe <Vm::fpu64ToInternal(unsigned long long)>
c0020517:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002051e:	89 c6                	mov    esi,eax
c0020520:	89 d7                	mov    edi,edx
c0020522:	e8 43 f5 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c0020527:	57                   	push   edi
c0020528:	56                   	push   esi
c0020529:	52                   	push   edx
c002052a:	50                   	push   eax
c002052b:	e8 08 f5 ff ff       	call   c001fa38 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020530:	e9 86 00 00 00       	jmp    c00205bb <Vm::x87Handler(regs*)+0xa14>
c0020535:	31 c0                	xor    eax,eax
c0020537:	80 fa 07             	cmp    dl,0x7
c002053a:	0f 85 c8 00 00 00    	jne    c0020608 <Vm::x87Handler(regs*)+0xa61>
c0020540:	83 ec 0c             	sub    esp,0xc
c0020543:	6a 00                	push   0x0
c0020545:	e8 20 f5 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c002054a:	89 c7                	mov    edi,eax
c002054c:	89 d5                	mov    ebp,edx
c002054e:	58                   	pop    eax
c002054f:	5a                   	pop    edx
c0020550:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020553:	ff 36                	push   DWORD PTR [esi]
c0020555:	e8 a4 f2 ff ff       	call   c001f7fe <Vm::fpu64ToInternal(unsigned long long)>
c002055a:	83 c4 10             	add    esp,0x10
c002055d:	55                   	push   ebp
c002055e:	57                   	push   edi
c002055f:	52                   	push   edx
c0020560:	50                   	push   eax
c0020561:	e8 d2 f4 ff ff       	call   c001fa38 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020566:	83 c4 0c             	add    esp,0xc
c0020569:	eb 53                	jmp    c00205be <Vm::x87Handler(regs*)+0xa17>
c002056b:	31 c0                	xor    eax,eax
c002056d:	80 fa 02             	cmp    dl,0x2
c0020570:	0f 85 92 00 00 00    	jne    c0020608 <Vm::x87Handler(regs*)+0xa61>
c0020576:	83 ec 0c             	sub    esp,0xc
c0020579:	6a 00                	push   0x0
c002057b:	e8 ea f4 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c0020580:	59                   	pop    ecx
c0020581:	5f                   	pop    edi
c0020582:	52                   	push   edx
c0020583:	50                   	push   eax
c0020584:	e8 27 f2 ff ff       	call   c001f7b0 <Vm::fpuInternalTo64(unsigned long long)>
c0020589:	eb 70                	jmp    c00205fb <Vm::x87Handler(regs*)+0xa54>
c002058b:	31 c0                	xor    eax,eax
c002058d:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020592:	75 74                	jne    c0020608 <Vm::x87Handler(regs*)+0xa61>
c0020594:	50                   	push   eax
c0020595:	50                   	push   eax
c0020596:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020599:	31 d2                	xor    edx,edx
c002059b:	52                   	push   edx
c002059c:	50                   	push   eax
c002059d:	e8 f6 f2 ff ff       	call   c001f898 <Vm::fpuLongToFloat(long long)>
c00205a2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205a9:	89 c6                	mov    esi,eax
c00205ab:	89 d7                	mov    edi,edx
c00205ad:	e8 b8 f4 ff ff       	call   c001fa6a <Vm::fpuGetReg(int)>
c00205b2:	57                   	push   edi
c00205b3:	56                   	push   esi
c00205b4:	52                   	push   edx
c00205b5:	50                   	push   eax
c00205b6:	e8 5e f4 ff ff       	call   c001fa19 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00205bb:	83 c4 1c             	add    esp,0x1c
c00205be:	52                   	push   edx
c00205bf:	50                   	push   eax
c00205c0:	6a 00                	push   0x0
c00205c2:	e8 e6 f4 ff ff       	call   c001faad <Vm::fpuSetReg(int, unsigned long long)>
c00205c7:	e9 f2 f7 ff ff       	jmp    c001fdbe <Vm::x87Handler(regs*)+0x217>
c00205cc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00205d0:	80 fa 05             	cmp    dl,0x5
c00205d3:	75 11                	jne    c00205e6 <Vm::x87Handler(regs*)+0xa3f>
c00205d5:	55                   	push   ebp
c00205d6:	55                   	push   ebp
c00205d7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00205da:	ff 36                	push   DWORD PTR [esi]
c00205dc:	e8 81 f2 ff ff       	call   c001f862 <Vm::fpuULongToFloat(unsigned long long)>
c00205e1:	e9 cf f7 ff ff       	jmp    c001fdb5 <Vm::x87Handler(regs*)+0x20e>
c00205e6:	31 c0                	xor    eax,eax
c00205e8:	80 fa 07             	cmp    dl,0x7
c00205eb:	75 1b                	jne    c0020608 <Vm::x87Handler(regs*)+0xa61>
c00205ed:	e8 63 f5 ff ff       	call   c001fb55 <Vm::fpuPop()>
c00205f2:	51                   	push   ecx
c00205f3:	51                   	push   ecx
c00205f4:	52                   	push   edx
c00205f5:	50                   	push   eax
c00205f6:	e8 0c f2 ff ff       	call   c001f807 <Vm::fpuFloatToLong(unsigned long long)>
c00205fb:	83 c4 10             	add    esp,0x10
c00205fe:	89 06                	mov    DWORD PTR [esi],eax
c0020600:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020603:	e9 f8 f7 ff ff       	jmp    c001fe00 <Vm::x87Handler(regs*)+0x259>
c0020608:	83 c4 1c             	add    esp,0x1c
c002060b:	5b                   	pop    ebx
c002060c:	5e                   	pop    esi
c002060d:	5f                   	pop    edi
c002060e:	5d                   	pop    ebp
c002060f:	c3                   	ret    

c0020610 <__static_initialization_and_destruction_0(int, int)>:
c0020610:	83 ec 0c             	sub    esp,0xc
c0020613:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020618:	75 1a                	jne    c0020634 <__static_initialization_and_destruction_0(int, int)+0x24>
c002061a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020622:	75 10                	jne    c0020634 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020624:	83 ec 0c             	sub    esp,0xc
c0020627:	68 e0 25 03 c0       	push   0xc00325e0
c002062c:	e8 3b 90 00 00       	call   c002966c <Vm::_FPUState::_FPUState()>
c0020631:	83 c4 10             	add    esp,0x10
c0020634:	90                   	nop
c0020635:	83 c4 0c             	add    esp,0xc
c0020638:	c3                   	ret    

c0020639 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020639:	83 ec 0c             	sub    esp,0xc
c002063c:	83 ec 08             	sub    esp,0x8
c002063f:	68 ff ff 00 00       	push   0xffff
c0020644:	6a 01                	push   0x1
c0020646:	e8 c5 ff ff ff       	call   c0020610 <__static_initialization_and_destruction_0(int, int)>
c002064b:	83 c4 10             	add    esp,0x10
c002064e:	83 c4 0c             	add    esp,0xc
c0020651:	c3                   	ret    

c0020652 <FAT::getName()>:
c0020652:	b8 e8 d0 02 c0       	mov    eax,0xc002d0e8
c0020657:	c3                   	ret    

c0020658 <FAT::tell(void*, unsigned long long*)>:
c0020658:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002065d:	75 06                	jne    c0020665 <FAT::tell(void*, unsigned long long*)+0xd>
c002065f:	b8 04 00 00 00       	mov    eax,0x4
c0020664:	c3                   	ret    
c0020665:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002066a:	75 06                	jne    c0020672 <FAT::tell(void*, unsigned long long*)+0x1a>
c002066c:	b8 04 00 00 00       	mov    eax,0x4
c0020671:	c3                   	ret    
c0020672:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020676:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020679:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c002067c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020680:	89 01                	mov    DWORD PTR [ecx],eax
c0020682:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020685:	b8 00 00 00 00       	mov    eax,0x0
c002068a:	c3                   	ret    
c002068b:	90                   	nop

c002068c <FAT::stat(void*, unsigned long long*)>:
c002068c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020691:	75 06                	jne    c0020699 <FAT::stat(void*, unsigned long long*)+0xd>
c0020693:	b8 04 00 00 00       	mov    eax,0x4
c0020698:	c3                   	ret    
c0020699:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002069e:	75 06                	jne    c00206a6 <FAT::stat(void*, unsigned long long*)+0x1a>
c00206a0:	b8 04 00 00 00       	mov    eax,0x4
c00206a5:	c3                   	ret    
c00206a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00206aa:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00206ad:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00206b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00206b4:	89 01                	mov    DWORD PTR [ecx],eax
c00206b6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00206b9:	b8 00 00 00 00       	mov    eax,0x0
c00206be:	c3                   	ret    
c00206bf:	90                   	nop

c00206c0 <FAT::~FAT()>:
c00206c0:	83 ec 0c             	sub    esp,0xc
c00206c3:	ba 78 d1 02 c0       	mov    edx,0xc002d178
c00206c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206cc:	89 10                	mov    DWORD PTR [eax],edx
c00206ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206d2:	83 ec 0c             	sub    esp,0xc
c00206d5:	50                   	push   eax
c00206d6:	e8 4b 25 ff ff       	call   c0012c26 <Filesystem::~Filesystem()>
c00206db:	83 c4 10             	add    esp,0x10
c00206de:	90                   	nop
c00206df:	83 c4 0c             	add    esp,0xc
c00206e2:	c3                   	ret    
c00206e3:	90                   	nop

c00206e4 <FAT::~FAT()>:
c00206e4:	83 ec 0c             	sub    esp,0xc
c00206e7:	83 ec 0c             	sub    esp,0xc
c00206ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206ee:	e8 cd ff ff ff       	call   c00206c0 <FAT::~FAT()>
c00206f3:	83 c4 10             	add    esp,0x10
c00206f6:	83 ec 08             	sub    esp,0x8
c00206f9:	6a 08                	push   0x8
c00206fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206ff:	e8 13 21 ff ff       	call   c0012817 <operator delete(void*, unsigned long)>
c0020704:	83 c4 10             	add    esp,0x10
c0020707:	83 c4 0c             	add    esp,0xc
c002070a:	c3                   	ret    
c002070b:	90                   	nop

c002070c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c002070c:	83 ec 1c             	sub    esp,0x1c
c002070f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020716:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002071b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002071f:	8b 04 85 60 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9a0]
c0020726:	83 f8 ff             	cmp    eax,0xffffffff
c0020729:	75 34                	jne    c002075f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c002072b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002072f:	88 c2                	mov    dl,al
c0020731:	a1 40 26 03 c0       	mov    eax,ds:0xc0032640
c0020736:	01 d0                	add    eax,edx
c0020738:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002073c:	8b 15 40 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032640
c0020742:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020746:	89 14 85 60 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9a0],edx
c002074d:	a1 40 26 03 c0       	mov    eax,ds:0xc0032640
c0020752:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020756:	89 14 85 e0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd920],edx
c002075d:	eb 17                	jmp    c0020776 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c002075f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020763:	88 c2                	mov    dl,al
c0020765:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020769:	8b 04 85 60 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9a0]
c0020770:	01 d0                	add    eax,edx
c0020772:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020776:	83 ec 04             	sub    esp,0x4
c0020779:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002077d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020781:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020785:	50                   	push   eax
c0020786:	e8 73 65 fe ff       	call   c0006cfe <f_getlabel>
c002078b:	83 c4 10             	add    esp,0x10
c002078e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020792:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020797:	75 07                	jne    c00207a0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020799:	b8 00 00 00 00       	mov    eax,0x0
c002079e:	eb 05                	jmp    c00207a5 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00207a0:	b8 01 00 00 00       	mov    eax,0x1
c00207a5:	83 c4 1c             	add    esp,0x1c
c00207a8:	c3                   	ret    
c00207a9:	90                   	nop

c00207aa <FAT::setlabel(LogicalDisk*, int, char*)>:
c00207aa:	57                   	push   edi
c00207ab:	83 ec 58             	sub    esp,0x58
c00207ae:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00207b6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00207ba:	b9 0f 00 00 00       	mov    ecx,0xf
c00207bf:	b8 00 00 00 00       	mov    eax,0x0
c00207c4:	fc                   	cld    
c00207c5:	89 d7                	mov    edi,edx
c00207c7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00207c9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00207cd:	8b 04 85 60 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9a0]
c00207d4:	83 f8 ff             	cmp    eax,0xffffffff
c00207d7:	75 34                	jne    c002080d <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00207d9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00207dd:	88 c2                	mov    dl,al
c00207df:	a1 40 26 03 c0       	mov    eax,ds:0xc0032640
c00207e4:	01 d0                	add    eax,edx
c00207e6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207ea:	8b 15 40 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032640
c00207f0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00207f4:	89 14 85 60 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9a0],edx
c00207fb:	a1 40 26 03 c0       	mov    eax,ds:0xc0032640
c0020800:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020804:	89 14 85 e0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd920],edx
c002080b:	eb 17                	jmp    c0020824 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c002080d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020811:	88 c2                	mov    dl,al
c0020813:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020817:	8b 04 85 60 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9a0]
c002081e:	01 d0                	add    eax,edx
c0020820:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020824:	83 ec 08             	sub    esp,0x8
c0020827:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002082b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002082f:	50                   	push   eax
c0020830:	e8 17 01 fe ff       	call   c000094c <strcat>
c0020835:	83 c4 10             	add    esp,0x10
c0020838:	83 ec 0c             	sub    esp,0xc
c002083b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002083f:	50                   	push   eax
c0020840:	e8 a7 66 fe ff       	call   c0006eec <f_setlabel>
c0020845:	83 c4 10             	add    esp,0x10
c0020848:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002084c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020851:	75 07                	jne    c002085a <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020853:	b8 00 00 00 00       	mov    eax,0x0
c0020858:	eb 05                	jmp    c002085f <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002085a:	b8 01 00 00 00       	mov    eax,0x1
c002085f:	83 c4 58             	add    esp,0x58
c0020862:	5f                   	pop    edi
c0020863:	c3                   	ret    

c0020864 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020864:	83 ec 2c             	sub    esp,0x2c
c0020867:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002086f:	83 ec 08             	sub    esp,0x8
c0020872:	68 0c d1 02 c0       	push   0xc002d10c
c0020877:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002087b:	e8 18 00 fe ff       	call   c0000898 <strcmp>
c0020880:	83 c4 10             	add    esp,0x10
c0020883:	85 c0                	test   eax,eax
c0020885:	0f 94 c0             	sete   al
c0020888:	84 c0                	test   al,al
c002088a:	74 0d                	je     c0020899 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002088c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020894:	e9 a6 00 00 00       	jmp    c002093f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020899:	83 ec 08             	sub    esp,0x8
c002089c:	68 fe d0 02 c0       	push   0xc002d0fe
c00208a1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208a5:	e8 ee ff fd ff       	call   c0000898 <strcmp>
c00208aa:	83 c4 10             	add    esp,0x10
c00208ad:	85 c0                	test   eax,eax
c00208af:	0f 94 c0             	sete   al
c00208b2:	84 c0                	test   al,al
c00208b4:	74 0a                	je     c00208c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00208b6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00208be:	eb 7f                	jmp    c002093f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208c0:	83 ec 08             	sub    esp,0x8
c00208c3:	68 04 d1 02 c0       	push   0xc002d104
c00208c8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208cc:	e8 c7 ff fd ff       	call   c0000898 <strcmp>
c00208d1:	83 c4 10             	add    esp,0x10
c00208d4:	85 c0                	test   eax,eax
c00208d6:	0f 94 c0             	sete   al
c00208d9:	84 c0                	test   al,al
c00208db:	74 0a                	je     c00208e7 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00208dd:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00208e5:	eb 58                	jmp    c002093f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208e7:	83 ec 08             	sub    esp,0x8
c00208ea:	68 cc 9d 02 c0       	push   0xc0029dcc
c00208ef:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208f3:	e8 a0 ff fd ff       	call   c0000898 <strcmp>
c00208f8:	83 c4 10             	add    esp,0x10
c00208fb:	85 c0                	test   eax,eax
c00208fd:	0f 94 c0             	sete   al
c0020900:	84 c0                	test   al,al
c0020902:	74 0a                	je     c002090e <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020904:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c002090c:	eb 31                	jmp    c002093f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002090e:	83 ec 08             	sub    esp,0x8
c0020911:	68 0a d1 02 c0       	push   0xc002d10a
c0020916:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002091a:	e8 79 ff fd ff       	call   c0000898 <strcmp>
c002091f:	83 c4 10             	add    esp,0x10
c0020922:	85 c0                	test   eax,eax
c0020924:	0f 94 c0             	sete   al
c0020927:	84 c0                	test   al,al
c0020929:	74 0a                	je     c0020935 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c002092b:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020933:	eb 0a                	jmp    c002093f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020935:	b8 08 00 00 00       	mov    eax,0x8
c002093a:	e9 04 01 00 00       	jmp    c0020a43 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002093f:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020946:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002094b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002094f:	8b 04 85 60 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9a0]
c0020956:	83 f8 ff             	cmp    eax,0xffffffff
c0020959:	75 34                	jne    c002098f <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002095b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002095f:	88 c2                	mov    dl,al
c0020961:	a1 40 26 03 c0       	mov    eax,ds:0xc0032640
c0020966:	01 d0                	add    eax,edx
c0020968:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002096c:	8b 15 40 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032640
c0020972:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020976:	89 14 85 60 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9a0],edx
c002097d:	a1 40 26 03 c0       	mov    eax,ds:0xc0032640
c0020982:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020986:	89 14 85 e0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd920],edx
c002098d:	eb 17                	jmp    c00209a6 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c002098f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020993:	88 c2                	mov    dl,al
c0020995:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020999:	8b 04 85 60 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9a0]
c00209a0:	01 d0                	add    eax,edx
c00209a2:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00209a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00209aa:	88 04 24             	mov    BYTE PTR [esp],al
c00209ad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00209b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00209b5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00209bd:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00209c2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00209ca:	83 ec 0c             	sub    esp,0xc
c00209cd:	68 00 20 00 00       	push   0x2000
c00209d2:	e8 b5 ee fe ff       	call   c000f88c <malloc>
c00209d7:	83 c4 10             	add    esp,0x10
c00209da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00209de:	68 00 20 00 00       	push   0x2000
c00209e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209e7:	8d 44 24 08          	lea    eax,[esp+0x8]
c00209eb:	50                   	push   eax
c00209ec:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00209f0:	50                   	push   eax
c00209f1:	e8 41 69 fe ff       	call   c0007337 <f_mkfs>
c00209f6:	83 c4 10             	add    esp,0x10
c00209f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00209fd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020a02:	75 07                	jne    c0020a0b <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020a04:	b8 00 00 00 00       	mov    eax,0x0
c0020a09:	eb 38                	jmp    c0020a43 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020a0b:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020a10:	75 17                	jne    c0020a29 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020a12:	83 ec 0c             	sub    esp,0xc
c0020a15:	68 48 d1 02 c0       	push   0xc002d148
c0020a1a:	e8 d8 1e ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0020a1f:	83 c4 10             	add    esp,0x10
c0020a22:	b8 09 00 00 00       	mov    eax,0x9
c0020a27:	eb 1a                	jmp    c0020a43 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020a29:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020a2d:	83 ec 08             	sub    esp,0x8
c0020a30:	50                   	push   eax
c0020a31:	68 10 d1 02 c0       	push   0xc002d110
c0020a36:	e8 bc 1e ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0020a3b:	83 c4 10             	add    esp,0x10
c0020a3e:	b8 01 00 00 00       	mov    eax,0x1
c0020a43:	83 c4 2c             	add    esp,0x2c
c0020a46:	c3                   	ret    
c0020a47:	90                   	nop

c0020a48 <FAT::tryMount(LogicalDisk*, int)>:
c0020a48:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020a4e:	a1 40 26 03 c0       	mov    eax,ds:0xc0032640
c0020a53:	83 f8 14             	cmp    eax,0x14
c0020a56:	75 17                	jne    c0020a6f <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020a58:	83 ec 0c             	sub    esp,0xc
c0020a5b:	68 22 d1 02 c0       	push   0xc002d122
c0020a60:	e8 c8 98 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c0020a65:	83 c4 10             	add    esp,0x10
c0020a68:	b0 00                	mov    al,0x0
c0020a6a:	e9 d7 01 00 00       	jmp    c0020c46 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a6f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020a76:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020a7c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020a82:	3d 00 02 00 00       	cmp    eax,0x200
c0020a87:	74 07                	je     c0020a90 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020a89:	b0 00                	mov    al,0x0
c0020a8b:	e9 b6 01 00 00       	jmp    c0020c46 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a90:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020a98:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a9f:	8b 04 85 60 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9a0]
c0020aa6:	83 f8 ff             	cmp    eax,0xffffffff
c0020aa9:	74 07                	je     c0020ab2 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020aab:	b0 01                	mov    al,0x1
c0020aad:	e9 94 01 00 00       	jmp    c0020c46 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020ab2:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020abc:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020ac4:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020acb:	88 c2                	mov    dl,al
c0020acd:	a1 40 26 03 c0       	mov    eax,ds:0xc0032640
c0020ad2:	01 d0                	add    eax,edx
c0020ad4:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020adb:	8b 15 40 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032640
c0020ae1:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020ae8:	89 14 85 60 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9a0],edx
c0020aef:	a1 40 26 03 c0       	mov    eax,ds:0xc0032640
c0020af4:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020afb:	89 14 85 e0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd920],edx
c0020b02:	83 ec 0c             	sub    esp,0xc
c0020b05:	68 54 02 00 00       	push   0x254
c0020b0a:	e8 7d ed fe ff       	call   c000f88c <malloc>
c0020b0f:	83 c4 10             	add    esp,0x10
c0020b12:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020b19:	83 ec 04             	sub    esp,0x4
c0020b1c:	6a 00                	push   0x0
c0020b1e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b25:	50                   	push   eax
c0020b26:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b2d:	e8 c3 43 fe ff       	call   c0004ef5 <f_mount>
c0020b32:	83 c4 10             	add    esp,0x10
c0020b35:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020b3c:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020b44:	74 19                	je     c0020b5f <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020b46:	83 ec 0c             	sub    esp,0xc
c0020b49:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b50:	e8 57 ed fe ff       	call   c000f8ac <rfree>
c0020b55:	83 c4 10             	add    esp,0x10
c0020b58:	b0 00                	mov    al,0x0
c0020b5a:	e9 e7 00 00 00       	jmp    c0020c46 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b5f:	83 ec 04             	sub    esp,0x4
c0020b62:	68 00 01 00 00       	push   0x100
c0020b67:	6a 00                	push   0x0
c0020b69:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b70:	50                   	push   eax
c0020b71:	e8 da fb fd ff       	call   c0000750 <memset>
c0020b76:	83 c4 10             	add    esp,0x10
c0020b79:	83 ec 08             	sub    esp,0x8
c0020b7c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b83:	50                   	push   eax
c0020b84:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b8b:	50                   	push   eax
c0020b8c:	e8 bb fd fd ff       	call   c000094c <strcat>
c0020b91:	83 c4 10             	add    esp,0x10
c0020b94:	83 ec 08             	sub    esp,0x8
c0020b97:	68 30 d1 02 c0       	push   0xc002d130
c0020b9c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020ba3:	50                   	push   eax
c0020ba4:	e8 a3 fd fd ff       	call   c000094c <strcat>
c0020ba9:	83 c4 10             	add    esp,0x10
c0020bac:	83 ec 04             	sub    esp,0x4
c0020baf:	6a 01                	push   0x1
c0020bb1:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020bb8:	50                   	push   eax
c0020bb9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020bbd:	50                   	push   eax
c0020bbe:	e8 94 43 fe ff       	call   c0004f57 <f_open>
c0020bc3:	83 c4 10             	add    esp,0x10
c0020bc6:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020bcd:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020bd4:	85 c0                	test   eax,eax
c0020bd6:	74 0a                	je     c0020be2 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020bd8:	78 2d                	js     c0020c07 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020bda:	83 e8 04             	sub    eax,0x4
c0020bdd:	83 f8 01             	cmp    eax,0x1
c0020be0:	77 25                	ja     c0020c07 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020be2:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020bea:	83 ec 0c             	sub    esp,0xc
c0020bed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020bf1:	50                   	push   eax
c0020bf2:	e8 b2 4e fe ff       	call   c0005aa9 <f_close>
c0020bf7:	83 c4 10             	add    esp,0x10
c0020bfa:	90                   	nop
c0020bfb:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020c03:	74 3a                	je     c0020c3f <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020c05:	eb 2d                	jmp    c0020c34 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020c07:	83 ec 0c             	sub    esp,0xc
c0020c0a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020c11:	e8 96 ec fe ff       	call   c000f8ac <rfree>
c0020c16:	83 c4 10             	add    esp,0x10
c0020c19:	83 ec 04             	sub    esp,0x4
c0020c1c:	6a 00                	push   0x0
c0020c1e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020c25:	50                   	push   eax
c0020c26:	6a 00                	push   0x0
c0020c28:	e8 c8 42 fe ff       	call   c0004ef5 <f_mount>
c0020c2d:	83 c4 10             	add    esp,0x10
c0020c30:	b0 00                	mov    al,0x0
c0020c32:	eb 12                	jmp    c0020c46 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020c34:	a1 40 26 03 c0       	mov    eax,ds:0xc0032640
c0020c39:	40                   	inc    eax
c0020c3a:	a3 40 26 03 c0       	mov    ds:0xc0032640,eax
c0020c3f:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020c46:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020c4c:	c3                   	ret    
c0020c4d:	90                   	nop

c0020c4e <FAT::getFileFirstSector(char const*)>:
c0020c4e:	53                   	push   ebx
c0020c4f:	83 ec 28             	sub    esp,0x28
c0020c52:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020c5a:	83 ec 0c             	sub    esp,0xc
c0020c5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c61:	e8 26 ec fe ff       	call   c000f88c <malloc>
c0020c66:	83 c4 10             	add    esp,0x10
c0020c69:	89 c3                	mov    ebx,eax
c0020c6b:	a1 70 25 03 c0       	mov    eax,ds:0xc0032570
c0020c70:	83 ec 04             	sub    esp,0x4
c0020c73:	50                   	push   eax
c0020c74:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020c78:	53                   	push   ebx
c0020c79:	e8 d8 21 ff ff       	call   c0012e56 <File::File(char const*, Process*)>
c0020c7e:	83 c4 10             	add    esp,0x10
c0020c81:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020c85:	83 ec 08             	sub    esp,0x8
c0020c88:	6a 01                	push   0x1
c0020c8a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020c8e:	e8 27 22 ff ff       	call   c0012eba <File::open(FileOpenMode)>
c0020c93:	83 c4 10             	add    esp,0x10
c0020c96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020c9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c9c:	83 c0 0c             	add    eax,0xc
c0020c9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0020ca1:	83 ec 0c             	sub    esp,0xc
c0020ca4:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020ca8:	52                   	push   edx
c0020ca9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020cad:	52                   	push   edx
c0020cae:	6a 00                	push   0x0
c0020cb0:	6a 04                	push   0x4
c0020cb2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020cb6:	ff d0                	call   eax
c0020cb8:	83 c4 20             	add    esp,0x20
c0020cbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020cbf:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020cc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020cc9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020ccd:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020cd0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020cd3:	83 ec 04             	sub    esp,0x4
c0020cd6:	52                   	push   edx
c0020cd7:	50                   	push   eax
c0020cd8:	68 3b d1 02 c0       	push   0xc002d13b
c0020cdd:	e8 15 1c ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0020ce2:	83 c4 10             	add    esp,0x10
c0020ce5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020ce9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020cec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020cef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020cf3:	83 ec 0c             	sub    esp,0xc
c0020cf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020cfa:	e8 19 22 ff ff       	call   c0012f18 <File::close()>
c0020cff:	83 c4 10             	add    esp,0x10
c0020d02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d06:	ba 00 00 00 00       	mov    edx,0x0
c0020d0b:	83 c4 28             	add    esp,0x28
c0020d0e:	5b                   	pop    ebx
c0020d0f:	c3                   	ret    

c0020d10 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020d10:	57                   	push   edi
c0020d11:	56                   	push   esi
c0020d12:	53                   	push   ebx
c0020d13:	81 ec 50 02 00 00    	sub    esp,0x250
c0020d19:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0020d21:	74 0a                	je     c0020d2d <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020d23:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0020d2b:	75 0a                	jne    c0020d37 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0020d2d:	b8 04 00 00 00       	mov    eax,0x4
c0020d32:	e9 29 01 00 00       	jmp    c0020e60 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020d37:	83 ec 08             	sub    esp,0x8
c0020d3a:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020d41:	50                   	push   eax
c0020d42:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0020d49:	e8 65 53 fe ff       	call   c00060b3 <f_readdir>
c0020d4e:	83 c4 10             	add    esp,0x10
c0020d51:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0020d58:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020d5f:	83 ec 0c             	sub    esp,0xc
c0020d62:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020d69:	83 c0 1a             	add    eax,0x1a
c0020d6c:	50                   	push   eax
c0020d6d:	e8 fa f9 fd ff       	call   c000076c <strlen>
c0020d72:	83 c4 10             	add    esp,0x10
c0020d75:	ba 00 00 00 00       	mov    edx,0x0
c0020d7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020d82:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020d89:	0f b6 c0             	movzx  eax,al
c0020d8c:	83 e0 10             	and    eax,0x10
c0020d8f:	74 07                	je     c0020d98 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020d91:	b8 02 00 00 00       	mov    eax,0x2
c0020d96:	eb 05                	jmp    c0020d9d <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020d98:	b8 01 00 00 00       	mov    eax,0x1
c0020d9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020da1:	83 ec 08             	sub    esp,0x8
c0020da4:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020dab:	83 c0 1a             	add    eax,0x1a
c0020dae:	50                   	push   eax
c0020daf:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020db3:	83 c0 10             	add    eax,0x10
c0020db6:	50                   	push   eax
c0020db7:	e8 50 fa fd ff       	call   c000080c <strcpy>
c0020dbc:	83 c4 10             	add    esp,0x10
c0020dbf:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020dc6:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020dcd:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020dd1:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020dd8:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020ddf:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020de6:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020ded:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020df4:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020dfb:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020e02:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0020e09:	89 c6                	mov    esi,eax
c0020e0b:	89 d7                	mov    edi,edx
c0020e0d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020e0f:	89 c8                	mov    eax,ecx
c0020e11:	89 fa                	mov    edx,edi
c0020e13:	89 f3                	mov    ebx,esi
c0020e15:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0020e1c:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020e23:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0020e2a:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020e31:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020e37:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020e3e:	84 c0                	test   al,al
c0020e40:	75 07                	jne    c0020e49 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020e42:	b8 07 00 00 00       	mov    eax,0x7
c0020e47:	eb 17                	jmp    c0020e60 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020e49:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020e50:	85 c0                	test   eax,eax
c0020e52:	75 07                	jne    c0020e5b <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020e54:	b8 00 00 00 00       	mov    eax,0x0
c0020e59:	eb 05                	jmp    c0020e60 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020e5b:	b8 01 00 00 00       	mov    eax,0x1
c0020e60:	81 c4 50 02 00 00    	add    esp,0x250
c0020e66:	5b                   	pop    ebx
c0020e67:	5e                   	pop    esi
c0020e68:	5f                   	pop    edi
c0020e69:	c3                   	ret    

c0020e6a <FAT::read(void*, unsigned long, void*, int*)>:
c0020e6a:	83 ec 1c             	sub    esp,0x1c
c0020e6d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020e72:	74 07                	je     c0020e7b <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020e74:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020e79:	75 07                	jne    c0020e82 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020e7b:	b8 04 00 00 00       	mov    eax,0x4
c0020e80:	eb 3d                	jmp    c0020ebf <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020e82:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020e86:	50                   	push   eax
c0020e87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020e8b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020e8f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e93:	e8 fb 44 fe ff       	call   c0005393 <f_read>
c0020e98:	83 c4 10             	add    esp,0x10
c0020e9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e9f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ea3:	89 c2                	mov    edx,eax
c0020ea5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020ea9:	89 10                	mov    DWORD PTR [eax],edx
c0020eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020eaf:	85 c0                	test   eax,eax
c0020eb1:	75 07                	jne    c0020eba <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020eb3:	b8 00 00 00 00       	mov    eax,0x0
c0020eb8:	eb 05                	jmp    c0020ebf <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020eba:	b8 01 00 00 00       	mov    eax,0x1
c0020ebf:	83 c4 1c             	add    esp,0x1c
c0020ec2:	c3                   	ret    
c0020ec3:	90                   	nop

c0020ec4 <FAT::write(void*, unsigned long, void*, int*)>:
c0020ec4:	83 ec 1c             	sub    esp,0x1c
c0020ec7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ecc:	74 07                	je     c0020ed5 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020ece:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020ed3:	75 07                	jne    c0020edc <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020ed5:	b8 04 00 00 00       	mov    eax,0x4
c0020eda:	eb 3d                	jmp    c0020f19 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020edc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ee0:	50                   	push   eax
c0020ee1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020ee5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020ee9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020eed:	e8 21 47 fe ff       	call   c0005613 <f_write>
c0020ef2:	83 c4 10             	add    esp,0x10
c0020ef5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ef9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020efd:	89 c2                	mov    edx,eax
c0020eff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020f03:	89 10                	mov    DWORD PTR [eax],edx
c0020f05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f09:	85 c0                	test   eax,eax
c0020f0b:	75 07                	jne    c0020f14 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020f0d:	b8 00 00 00 00       	mov    eax,0x0
c0020f12:	eb 05                	jmp    c0020f19 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020f14:	b8 01 00 00 00       	mov    eax,0x1
c0020f19:	83 c4 1c             	add    esp,0x1c
c0020f1c:	c3                   	ret    
c0020f1d:	90                   	nop

c0020f1e <FAT::close(void*)>:
c0020f1e:	83 ec 1c             	sub    esp,0x1c
c0020f21:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020f26:	75 07                	jne    c0020f2f <FAT::close(void*)+0x11>
c0020f28:	b8 04 00 00 00       	mov    eax,0x4
c0020f2d:	eb 36                	jmp    c0020f65 <FAT::close(void*)+0x47>
c0020f2f:	83 ec 0c             	sub    esp,0xc
c0020f32:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f36:	e8 6e 4b fe ff       	call   c0005aa9 <f_close>
c0020f3b:	83 c4 10             	add    esp,0x10
c0020f3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f42:	83 ec 0c             	sub    esp,0xc
c0020f45:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f49:	e8 4e e9 fe ff       	call   c000f89c <free>
c0020f4e:	83 c4 10             	add    esp,0x10
c0020f51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f55:	85 c0                	test   eax,eax
c0020f57:	75 07                	jne    c0020f60 <FAT::close(void*)+0x42>
c0020f59:	b8 00 00 00 00       	mov    eax,0x0
c0020f5e:	eb 05                	jmp    c0020f65 <FAT::close(void*)+0x47>
c0020f60:	b8 01 00 00 00       	mov    eax,0x1
c0020f65:	83 c4 1c             	add    esp,0x1c
c0020f68:	c3                   	ret    
c0020f69:	90                   	nop

c0020f6a <FAT::closeDir(void*)>:
c0020f6a:	83 ec 1c             	sub    esp,0x1c
c0020f6d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020f72:	75 07                	jne    c0020f7b <FAT::closeDir(void*)+0x11>
c0020f74:	b8 04 00 00 00       	mov    eax,0x4
c0020f79:	eb 36                	jmp    c0020fb1 <FAT::closeDir(void*)+0x47>
c0020f7b:	83 ec 0c             	sub    esp,0xc
c0020f7e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f82:	e8 0a 51 fe ff       	call   c0006091 <f_closedir>
c0020f87:	83 c4 10             	add    esp,0x10
c0020f8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f8e:	83 ec 0c             	sub    esp,0xc
c0020f91:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f95:	e8 02 e9 fe ff       	call   c000f89c <free>
c0020f9a:	83 c4 10             	add    esp,0x10
c0020f9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020fa1:	85 c0                	test   eax,eax
c0020fa3:	75 07                	jne    c0020fac <FAT::closeDir(void*)+0x42>
c0020fa5:	b8 00 00 00 00       	mov    eax,0x0
c0020faa:	eb 05                	jmp    c0020fb1 <FAT::closeDir(void*)+0x47>
c0020fac:	b8 01 00 00 00       	mov    eax,0x1
c0020fb1:	83 c4 1c             	add    esp,0x1c
c0020fb4:	c3                   	ret    
c0020fb5:	90                   	nop

c0020fb6 <FAT::seek(void*, unsigned long long)>:
c0020fb6:	83 ec 2c             	sub    esp,0x2c
c0020fb9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020fbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020fc1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020fc5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020fc9:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020fce:	75 07                	jne    c0020fd7 <FAT::seek(void*, unsigned long long)+0x21>
c0020fd0:	b8 04 00 00 00       	mov    eax,0x4
c0020fd5:	eb 2f                	jmp    c0021006 <FAT::seek(void*, unsigned long long)+0x50>
c0020fd7:	83 ec 04             	sub    esp,0x4
c0020fda:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020fde:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020fe2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020fe6:	e8 ed 4a fe ff       	call   c0005ad8 <f_lseek>
c0020feb:	83 c4 10             	add    esp,0x10
c0020fee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020ff2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020ff6:	85 c0                	test   eax,eax
c0020ff8:	75 07                	jne    c0021001 <FAT::seek(void*, unsigned long long)+0x4b>
c0020ffa:	b8 00 00 00 00       	mov    eax,0x0
c0020fff:	eb 05                	jmp    c0021006 <FAT::seek(void*, unsigned long long)+0x50>
c0021001:	b8 01 00 00 00       	mov    eax,0x1
c0021006:	83 c4 2c             	add    esp,0x2c
c0021009:	c3                   	ret    

c002100a <fatWrapperReadDisk>:
c002100a:	83 ec 1c             	sub    esp,0x1c
c002100d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021011:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021015:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021019:	89 04 24             	mov    DWORD PTR [esp],eax
c002101c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021020:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021024:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021029:	8b 04 85 20 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd09e0]
c0021030:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021034:	83 ec 0c             	sub    esp,0xc
c0021037:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002103b:	52                   	push   edx
c002103c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021040:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021044:	50                   	push   eax
c0021045:	e8 2a 52 ff ff       	call   c0016274 <LogicalDisk::read(unsigned long long, int, void*)>
c002104a:	83 c4 20             	add    esp,0x20
c002104d:	83 c4 1c             	add    esp,0x1c
c0021050:	c3                   	ret    

c0021051 <fatWrapperWriteDisk>:
c0021051:	83 ec 1c             	sub    esp,0x1c
c0021054:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021058:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002105c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021060:	89 04 24             	mov    DWORD PTR [esp],eax
c0021063:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021067:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002106b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021070:	8b 04 85 20 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd09e0]
c0021077:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002107b:	83 ec 0c             	sub    esp,0xc
c002107e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021082:	52                   	push   edx
c0021083:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021087:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002108b:	50                   	push   eax
c002108c:	e8 4f 52 ff ff       	call   c00162e0 <LogicalDisk::write(unsigned long long, int, void*)>
c0021091:	83 c4 20             	add    esp,0x20
c0021094:	83 c4 1c             	add    esp,0x1c
c0021097:	c3                   	ret    

c0021098 <fatWrapperIoctl>:
c0021098:	53                   	push   ebx
c0021099:	83 ec 28             	sub    esp,0x28
c002109c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00210a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00210a4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00210a8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00210ac:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00210b1:	75 31                	jne    c00210e4 <fatWrapperIoctl+0x4c>
c00210b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00210b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00210bb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00210c0:	8b 04 85 20 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd09e0]
c00210c7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00210cd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00210d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00210d7:	66 89 02             	mov    WORD PTR [edx],ax
c00210da:	b8 00 00 00 00       	mov    eax,0x0
c00210df:	e9 b2 00 00 00       	jmp    c0021196 <fatWrapperIoctl+0xfe>
c00210e4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00210e9:	75 6a                	jne    c0021155 <fatWrapperIoctl+0xbd>
c00210eb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00210ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00210f3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00210f8:	8b 04 85 20 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd09e0]
c00210ff:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021105:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c002110b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0021111:	89 c8                	mov    eax,ecx
c0021113:	89 da                	mov    edx,ebx
c0021115:	0f a4 c2 0a          	shld   edx,eax,0xa
c0021119:	c1 e0 0a             	shl    eax,0xa
c002111c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021121:	8b 0c 8d 20 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd09e0]
c0021128:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c002112e:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0021134:	89 cb                	mov    ebx,ecx
c0021136:	c1 fb 1f             	sar    ebx,0x1f
c0021139:	53                   	push   ebx
c002113a:	51                   	push   ecx
c002113b:	52                   	push   edx
c002113c:	50                   	push   eax
c002113d:	e8 e2 60 00 00       	call   c0027224 <__udivdi3>
c0021142:	83 c4 10             	add    esp,0x10
c0021145:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021149:	89 01                	mov    DWORD PTR [ecx],eax
c002114b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002114e:	b8 00 00 00 00       	mov    eax,0x0
c0021153:	eb 41                	jmp    c0021196 <fatWrapperIoctl+0xfe>
c0021155:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002115a:	75 07                	jne    c0021163 <fatWrapperIoctl+0xcb>
c002115c:	b8 00 00 00 00       	mov    eax,0x0
c0021161:	eb 33                	jmp    c0021196 <fatWrapperIoctl+0xfe>
c0021163:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0021168:	75 19                	jne    c0021183 <fatWrapperIoctl+0xeb>
c002116a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002116e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021172:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021176:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002117c:	b8 00 00 00 00       	mov    eax,0x0
c0021181:	eb 13                	jmp    c0021196 <fatWrapperIoctl+0xfe>
c0021183:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0021188:	75 07                	jne    c0021191 <fatWrapperIoctl+0xf9>
c002118a:	b8 00 00 00 00       	mov    eax,0x0
c002118f:	eb 05                	jmp    c0021196 <fatWrapperIoctl+0xfe>
c0021191:	b8 04 00 00 00       	mov    eax,0x4
c0021196:	83 c4 28             	add    esp,0x28
c0021199:	5b                   	pop    ebx
c002119a:	c3                   	ret    
c002119b:	90                   	nop

c002119c <FAT::FAT()>:
c002119c:	83 ec 1c             	sub    esp,0x1c
c002119f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211a3:	83 ec 0c             	sub    esp,0xc
c00211a6:	50                   	push   eax
c00211a7:	e8 56 1a ff ff       	call   c0012c02 <Filesystem::Filesystem()>
c00211ac:	83 c4 10             	add    esp,0x10
c00211af:	ba 78 d1 02 c0       	mov    edx,0xc002d178
c00211b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00211b8:	89 10                	mov    DWORD PTR [eax],edx
c00211ba:	c7 05 40 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032640,0x0
c00211c4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00211cc:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00211d1:	7f 15                	jg     c00211e8 <FAT::FAT()+0x4c>
c00211d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00211d7:	c7 04 85 60 26 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcd9a0],0xffffffff
c00211e2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00211e6:	eb e4                	jmp    c00211cc <FAT::FAT()+0x30>
c00211e8:	90                   	nop
c00211e9:	83 c4 1c             	add    esp,0x1c
c00211ec:	c3                   	ret    
c00211ed:	90                   	nop

c00211ee <FAT::fixFilepath(char*)>:
c00211ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211f2:	8a 00                	mov    al,BYTE PTR [eax]
c00211f4:	3c 40                	cmp    al,0x40
c00211f6:	7e 2c                	jle    c0021224 <FAT::fixFilepath(char*)+0x36>
c00211f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211fc:	8a 00                	mov    al,BYTE PTR [eax]
c00211fe:	83 e8 41             	sub    eax,0x41
c0021201:	88 c2                	mov    dl,al
c0021203:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021207:	88 10                	mov    BYTE PTR [eax],dl
c0021209:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002120d:	8a 00                	mov    al,BYTE PTR [eax]
c002120f:	0f be c0             	movsx  eax,al
c0021212:	8b 04 85 60 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9a0]
c0021219:	83 c0 30             	add    eax,0x30
c002121c:	88 c2                	mov    dl,al
c002121e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021222:	88 10                	mov    BYTE PTR [eax],dl
c0021224:	90                   	nop
c0021225:	c3                   	ret    

c0021226 <FAT::open(char const*, void**, FileOpenMode)>:
c0021226:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002122c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021234:	74 0a                	je     c0021240 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021236:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002123e:	75 0a                	jne    c002124a <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0021240:	b8 04 00 00 00       	mov    eax,0x4
c0021245:	e9 fd 00 00 00       	jmp    c0021347 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002124a:	83 ec 08             	sub    esp,0x8
c002124d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021254:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021258:	50                   	push   eax
c0021259:	e8 ae f5 fd ff       	call   c000080c <strcpy>
c002125e:	83 c4 10             	add    esp,0x10
c0021261:	83 ec 08             	sub    esp,0x8
c0021264:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021268:	50                   	push   eax
c0021269:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021270:	e8 79 ff ff ff       	call   c00211ee <FAT::fixFilepath(char*)>
c0021275:	83 c4 10             	add    esp,0x10
c0021278:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021280:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021287:	83 e0 01             	and    eax,0x1
c002128a:	74 08                	je     c0021294 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002128c:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021294:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002129b:	83 e0 04             	and    eax,0x4
c002129e:	74 10                	je     c00212b0 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00212a0:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00212a8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00212b0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00212b7:	83 e0 02             	and    eax,0x2
c00212ba:	74 08                	je     c00212c4 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00212bc:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00212c4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00212cb:	83 e0 08             	and    eax,0x8
c00212ce:	74 08                	je     c00212d8 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00212d0:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00212d8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00212df:	83 e0 10             	and    eax,0x10
c00212e2:	74 08                	je     c00212ec <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00212e4:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00212ec:	83 ec 0c             	sub    esp,0xc
c00212ef:	68 50 02 00 00       	push   0x250
c00212f4:	e8 93 e5 fe ff       	call   c000f88c <malloc>
c00212f9:	83 c4 10             	add    esp,0x10
c00212fc:	89 c2                	mov    edx,eax
c00212fe:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021305:	89 10                	mov    DWORD PTR [eax],edx
c0021307:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002130f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021316:	8b 00                	mov    eax,DWORD PTR [eax]
c0021318:	83 ec 04             	sub    esp,0x4
c002131b:	52                   	push   edx
c002131c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0021320:	52                   	push   edx
c0021321:	50                   	push   eax
c0021322:	e8 30 3c fe ff       	call   c0004f57 <f_open>
c0021327:	83 c4 10             	add    esp,0x10
c002132a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021331:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021339:	74 07                	je     c0021342 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c002133b:	b8 01 00 00 00       	mov    eax,0x1
c0021340:	eb 05                	jmp    c0021347 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021342:	b8 00 00 00 00       	mov    eax,0x0
c0021347:	81 c4 1c 01 00 00    	add    esp,0x11c
c002134d:	c3                   	ret    

c002134e <FAT::openDir(char const*, void**)>:
c002134e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021354:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002135c:	74 0a                	je     c0021368 <FAT::openDir(char const*, void**)+0x1a>
c002135e:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021366:	75 07                	jne    c002136f <FAT::openDir(char const*, void**)+0x21>
c0021368:	b8 04 00 00 00       	mov    eax,0x4
c002136d:	eb 7d                	jmp    c00213ec <FAT::openDir(char const*, void**)+0x9e>
c002136f:	83 ec 08             	sub    esp,0x8
c0021372:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021379:	8d 44 24 18          	lea    eax,[esp+0x18]
c002137d:	50                   	push   eax
c002137e:	e8 89 f4 fd ff       	call   c000080c <strcpy>
c0021383:	83 c4 10             	add    esp,0x10
c0021386:	83 ec 08             	sub    esp,0x8
c0021389:	8d 44 24 14          	lea    eax,[esp+0x14]
c002138d:	50                   	push   eax
c002138e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021395:	e8 54 fe ff ff       	call   c00211ee <FAT::fixFilepath(char*)>
c002139a:	83 c4 10             	add    esp,0x10
c002139d:	83 ec 0c             	sub    esp,0xc
c00213a0:	6a 4c                	push   0x4c
c00213a2:	e8 e5 e4 fe ff       	call   c000f88c <malloc>
c00213a7:	83 c4 10             	add    esp,0x10
c00213aa:	89 c2                	mov    edx,eax
c00213ac:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00213b3:	89 10                	mov    DWORD PTR [eax],edx
c00213b5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00213bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00213be:	83 ec 08             	sub    esp,0x8
c00213c1:	8d 54 24 14          	lea    edx,[esp+0x14]
c00213c5:	52                   	push   edx
c00213c6:	50                   	push   eax
c00213c7:	e8 c3 4b fe ff       	call   c0005f8f <f_opendir>
c00213cc:	83 c4 10             	add    esp,0x10
c00213cf:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00213d6:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00213de:	74 07                	je     c00213e7 <FAT::openDir(char const*, void**)+0x99>
c00213e0:	b8 01 00 00 00       	mov    eax,0x1
c00213e5:	eb 05                	jmp    c00213ec <FAT::openDir(char const*, void**)+0x9e>
c00213e7:	b8 00 00 00 00       	mov    eax,0x0
c00213ec:	81 c4 1c 01 00 00    	add    esp,0x11c
c00213f2:	c3                   	ret    
c00213f3:	90                   	nop

c00213f4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00213f4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00213fa:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021402:	75 0a                	jne    c002140e <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021404:	b8 04 00 00 00       	mov    eax,0x4
c0021409:	e9 c9 00 00 00       	jmp    c00214d7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002140e:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021416:	75 0a                	jne    c0021422 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021418:	b8 04 00 00 00       	mov    eax,0x4
c002141d:	e9 b5 00 00 00       	jmp    c00214d7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021422:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c002142a:	75 0a                	jne    c0021436 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c002142c:	b8 04 00 00 00       	mov    eax,0x4
c0021431:	e9 a1 00 00 00       	jmp    c00214d7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021436:	83 ec 08             	sub    esp,0x8
c0021439:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021440:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021447:	50                   	push   eax
c0021448:	e8 bf f3 fd ff       	call   c000080c <strcpy>
c002144d:	83 c4 10             	add    esp,0x10
c0021450:	83 ec 08             	sub    esp,0x8
c0021453:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002145a:	50                   	push   eax
c002145b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021462:	e8 87 fd ff ff       	call   c00211ee <FAT::fixFilepath(char*)>
c0021467:	83 c4 10             	add    esp,0x10
c002146a:	83 ec 08             	sub    esp,0x8
c002146d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021471:	50                   	push   eax
c0021472:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021479:	50                   	push   eax
c002147a:	e8 cf 4c fe ff       	call   c000614e <f_stat>
c002147f:	83 c4 10             	add    esp,0x10
c0021482:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021489:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021490:	85 c0                	test   eax,eax
c0021492:	74 07                	je     c002149b <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021494:	83 f8 04             	cmp    eax,0x4
c0021497:	74 32                	je     c00214cb <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021499:	eb 37                	jmp    c00214d2 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002149b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002149f:	0f b6 c0             	movzx  eax,al
c00214a2:	83 e0 10             	and    eax,0x10
c00214a5:	0f 95 c2             	setne  dl
c00214a8:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00214af:	88 10                	mov    BYTE PTR [eax],dl
c00214b1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00214b4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00214b8:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00214bf:	89 01                	mov    DWORD PTR [ecx],eax
c00214c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00214c4:	b8 00 00 00 00       	mov    eax,0x0
c00214c9:	eb 0c                	jmp    c00214d7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00214cb:	b8 02 00 00 00       	mov    eax,0x2
c00214d0:	eb 05                	jmp    c00214d7 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00214d2:	b8 01 00 00 00       	mov    eax,0x1
c00214d7:	81 c4 2c 02 00 00    	add    esp,0x22c
c00214dd:	c3                   	ret    

c00214de <FAT::unlink(char const*)>:
c00214de:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00214e4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00214ec:	75 07                	jne    c00214f5 <FAT::unlink(char const*)+0x17>
c00214ee:	b8 04 00 00 00       	mov    eax,0x4
c00214f3:	eb 5c                	jmp    c0021551 <FAT::unlink(char const*)+0x73>
c00214f5:	83 ec 08             	sub    esp,0x8
c00214f8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00214ff:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021503:	50                   	push   eax
c0021504:	e8 03 f3 fd ff       	call   c000080c <strcpy>
c0021509:	83 c4 10             	add    esp,0x10
c002150c:	83 ec 08             	sub    esp,0x8
c002150f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021513:	50                   	push   eax
c0021514:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002151b:	e8 ce fc ff ff       	call   c00211ee <FAT::fixFilepath(char*)>
c0021520:	83 c4 10             	add    esp,0x10
c0021523:	83 ec 0c             	sub    esp,0xc
c0021526:	8d 44 24 18          	lea    eax,[esp+0x18]
c002152a:	50                   	push   eax
c002152b:	e8 70 4f fe ff       	call   c00064a0 <f_unlink>
c0021530:	83 c4 10             	add    esp,0x10
c0021533:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002153a:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021541:	85 c0                	test   eax,eax
c0021543:	75 07                	jne    c002154c <FAT::unlink(char const*)+0x6e>
c0021545:	b8 00 00 00 00       	mov    eax,0x0
c002154a:	eb 05                	jmp    c0021551 <FAT::unlink(char const*)+0x73>
c002154c:	b8 01 00 00 00       	mov    eax,0x1
c0021551:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021557:	c3                   	ret    

c0021558 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021558:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002155e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021565:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c002156c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021570:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021574:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c002157c:	75 0a                	jne    c0021588 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c002157e:	b8 04 00 00 00       	mov    eax,0x4
c0021583:	e9 1c 01 00 00       	jmp    c00216a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021588:	83 ec 08             	sub    esp,0x8
c002158b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021592:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021596:	50                   	push   eax
c0021597:	e8 70 f2 fd ff       	call   c000080c <strcpy>
c002159c:	83 c4 10             	add    esp,0x10
c002159f:	83 ec 08             	sub    esp,0x8
c00215a2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00215a6:	50                   	push   eax
c00215a7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00215ae:	e8 3b fc ff ff       	call   c00211ee <FAT::fixFilepath(char*)>
c00215b3:	83 c4 10             	add    esp,0x10
c00215b6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00215be:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00215c6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00215cb:	83 e0 01             	and    eax,0x1
c00215ce:	74 08                	je     c00215d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00215d0:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00215d8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00215dd:	83 e0 02             	and    eax,0x2
c00215e0:	74 08                	je     c00215ea <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00215e2:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00215ea:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00215ef:	83 e0 04             	and    eax,0x4
c00215f2:	74 08                	je     c00215fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00215f4:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00215fc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021601:	83 e0 08             	and    eax,0x8
c0021604:	74 08                	je     c002160e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021606:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002160e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021613:	83 e0 01             	and    eax,0x1
c0021616:	74 08                	je     c0021620 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021618:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021620:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021625:	83 e0 02             	and    eax,0x2
c0021628:	74 08                	je     c0021632 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c002162a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021632:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021637:	83 e0 04             	and    eax,0x4
c002163a:	74 08                	je     c0021644 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c002163c:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021644:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021649:	83 e0 08             	and    eax,0x8
c002164c:	74 08                	je     c0021656 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c002164e:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021656:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002165d:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021664:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c002166c:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021674:	83 ec 04             	sub    esp,0x4
c0021677:	52                   	push   edx
c0021678:	50                   	push   eax
c0021679:	8d 44 24 24          	lea    eax,[esp+0x24]
c002167d:	50                   	push   eax
c002167e:	e8 bf 54 fe ff       	call   c0006b42 <f_chmod>
c0021683:	83 c4 10             	add    esp,0x10
c0021686:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c002168d:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021694:	85 c0                	test   eax,eax
c0021696:	75 07                	jne    c002169f <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021698:	b8 00 00 00 00       	mov    eax,0x0
c002169d:	eb 05                	jmp    c00216a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002169f:	b8 01 00 00 00       	mov    eax,0x1
c00216a4:	81 c4 2c 01 00 00    	add    esp,0x12c
c00216aa:	c3                   	ret    
c00216ab:	90                   	nop

c00216ac <FAT::rename(char const*, char const*)>:
c00216ac:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00216b2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00216ba:	74 0a                	je     c00216c6 <FAT::rename(char const*, char const*)+0x1a>
c00216bc:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00216c4:	75 0a                	jne    c00216d0 <FAT::rename(char const*, char const*)+0x24>
c00216c6:	b8 04 00 00 00       	mov    eax,0x4
c00216cb:	e9 98 00 00 00       	jmp    c0021768 <FAT::rename(char const*, char const*)+0xbc>
c00216d0:	83 ec 08             	sub    esp,0x8
c00216d3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00216da:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00216e1:	50                   	push   eax
c00216e2:	e8 25 f1 fd ff       	call   c000080c <strcpy>
c00216e7:	83 c4 10             	add    esp,0x10
c00216ea:	83 ec 08             	sub    esp,0x8
c00216ed:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00216f4:	50                   	push   eax
c00216f5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00216fc:	e8 ed fa ff ff       	call   c00211ee <FAT::fixFilepath(char*)>
c0021701:	83 c4 10             	add    esp,0x10
c0021704:	83 ec 08             	sub    esp,0x8
c0021707:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002170e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021712:	50                   	push   eax
c0021713:	e8 f4 f0 fd ff       	call   c000080c <strcpy>
c0021718:	83 c4 10             	add    esp,0x10
c002171b:	83 ec 08             	sub    esp,0x8
c002171e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021722:	50                   	push   eax
c0021723:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002172a:	e8 bf fa ff ff       	call   c00211ee <FAT::fixFilepath(char*)>
c002172f:	83 c4 10             	add    esp,0x10
c0021732:	83 ec 08             	sub    esp,0x8
c0021735:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021739:	50                   	push   eax
c002173a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021741:	50                   	push   eax
c0021742:	e8 08 51 fe ff       	call   c000684f <f_rename>
c0021747:	83 c4 10             	add    esp,0x10
c002174a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021751:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021758:	85 c0                	test   eax,eax
c002175a:	75 07                	jne    c0021763 <FAT::rename(char const*, char const*)+0xb7>
c002175c:	b8 00 00 00 00       	mov    eax,0x0
c0021761:	eb 05                	jmp    c0021768 <FAT::rename(char const*, char const*)+0xbc>
c0021763:	b8 01 00 00 00       	mov    eax,0x1
c0021768:	81 c4 1c 02 00 00    	add    esp,0x21c
c002176e:	c3                   	ret    
c002176f:	90                   	nop

c0021770 <FAT::mkdir(char const*)>:
c0021770:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021776:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002177e:	75 07                	jne    c0021787 <FAT::mkdir(char const*)+0x17>
c0021780:	b8 04 00 00 00       	mov    eax,0x4
c0021785:	eb 5c                	jmp    c00217e3 <FAT::mkdir(char const*)+0x73>
c0021787:	83 ec 08             	sub    esp,0x8
c002178a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021791:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021795:	50                   	push   eax
c0021796:	e8 71 f0 fd ff       	call   c000080c <strcpy>
c002179b:	83 c4 10             	add    esp,0x10
c002179e:	83 ec 08             	sub    esp,0x8
c00217a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00217a5:	50                   	push   eax
c00217a6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00217ad:	e8 3c fa ff ff       	call   c00211ee <FAT::fixFilepath(char*)>
c00217b2:	83 c4 10             	add    esp,0x10
c00217b5:	83 ec 0c             	sub    esp,0xc
c00217b8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00217bc:	50                   	push   eax
c00217bd:	e8 61 4e fe ff       	call   c0006623 <f_mkdir>
c00217c2:	83 c4 10             	add    esp,0x10
c00217c5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00217cc:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00217d3:	85 c0                	test   eax,eax
c00217d5:	75 07                	jne    c00217de <FAT::mkdir(char const*)+0x6e>
c00217d7:	b8 00 00 00 00       	mov    eax,0x0
c00217dc:	eb 05                	jmp    c00217e3 <FAT::mkdir(char const*)+0x73>
c00217de:	b8 01 00 00 00       	mov    eax,0x1
c00217e3:	81 c4 1c 01 00 00    	add    esp,0x11c
c00217e9:	c3                   	ret    

c00217ea <FAT::exists(char const*)>:
c00217ea:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00217f0:	83 ec 08             	sub    esp,0x8
c00217f3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00217fa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00217fe:	50                   	push   eax
c00217ff:	e8 08 f0 fd ff       	call   c000080c <strcpy>
c0021804:	83 c4 10             	add    esp,0x10
c0021807:	83 ec 08             	sub    esp,0x8
c002180a:	8d 44 24 08          	lea    eax,[esp+0x8]
c002180e:	50                   	push   eax
c002180f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021816:	e8 d3 f9 ff ff       	call   c00211ee <FAT::fixFilepath(char*)>
c002181b:	83 c4 10             	add    esp,0x10
c002181e:	83 ec 08             	sub    esp,0x8
c0021821:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021828:	50                   	push   eax
c0021829:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002182d:	50                   	push   eax
c002182e:	e8 1b 49 fe ff       	call   c000614e <f_stat>
c0021833:	83 c4 10             	add    esp,0x10
c0021836:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002183d:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021844:	85 c0                	test   eax,eax
c0021846:	75 04                	jne    c002184c <FAT::exists(char const*)+0x62>
c0021848:	b0 01                	mov    al,0x1
c002184a:	eb 02                	jmp    c002184e <FAT::exists(char const*)+0x64>
c002184c:	b0 00                	mov    al,0x0
c002184e:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021854:	c3                   	ret    
c0021855:	90                   	nop

c0021856 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021856:	b8 08 00 00 00       	mov    eax,0x8
c002185b:	c3                   	ret    

c002185c <ISO9660::seek(void*, unsigned long long)>:
c002185c:	53                   	push   ebx
c002185d:	b8 04 00 00 00       	mov    eax,0x4
c0021862:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021866:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002186a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002186e:	85 d2                	test   edx,edx
c0021870:	74 17                	je     c0021889 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021872:	89 c8                	mov    eax,ecx
c0021874:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021877:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c002187a:	b8 01 00 00 00       	mov    eax,0x1
c002187f:	73 08                	jae    c0021889 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021881:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021884:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021887:	31 c0                	xor    eax,eax
c0021889:	5b                   	pop    ebx
c002188a:	c3                   	ret    
c002188b:	90                   	nop

c002188c <ISO9660::tell(void*, unsigned long long*)>:
c002188c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021890:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021894:	85 d2                	test   edx,edx
c0021896:	74 12                	je     c00218aa <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021898:	85 c0                	test   eax,eax
c002189a:	74 0e                	je     c00218aa <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002189c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002189f:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00218a2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00218a5:	89 10                	mov    DWORD PTR [eax],edx
c00218a7:	31 c0                	xor    eax,eax
c00218a9:	c3                   	ret    
c00218aa:	b8 04 00 00 00       	mov    eax,0x4
c00218af:	c3                   	ret    

c00218b0 <ISO9660::getName()>:
c00218b0:	b8 d8 d1 02 c0       	mov    eax,0xc002d1d8
c00218b5:	c3                   	ret    

c00218b6 <ISO9660::stat(void*, unsigned long long*)>:
c00218b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00218ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218be:	85 d2                	test   edx,edx
c00218c0:	74 12                	je     c00218d4 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00218c2:	85 c0                	test   eax,eax
c00218c4:	74 0e                	je     c00218d4 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00218c6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00218c9:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00218cc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00218cf:	89 10                	mov    DWORD PTR [eax],edx
c00218d1:	31 c0                	xor    eax,eax
c00218d3:	c3                   	ret    
c00218d4:	b8 04 00 00 00       	mov    eax,0x4
c00218d9:	c3                   	ret    

c00218da <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00218da:	b8 01 00 00 00       	mov    eax,0x1
c00218df:	c3                   	ret    

c00218e0 <ISO9660::unlink(char const*)>:
c00218e0:	b8 01 00 00 00       	mov    eax,0x1
c00218e5:	c3                   	ret    

c00218e6 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00218e6:	b8 01 00 00 00       	mov    eax,0x1
c00218eb:	c3                   	ret    

c00218ec <ISO9660::rename(char const*, char const*)>:
c00218ec:	b8 01 00 00 00       	mov    eax,0x1
c00218f1:	c3                   	ret    

c00218f2 <ISO9660::mkdir(char const*)>:
c00218f2:	b8 01 00 00 00       	mov    eax,0x1
c00218f7:	c3                   	ret    

c00218f8 <ISO9660::close(void*)>:
c00218f8:	83 ec 0c             	sub    esp,0xc
c00218fb:	b8 04 00 00 00       	mov    eax,0x4
c0021900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021904:	85 d2                	test   edx,edx
c0021906:	74 0e                	je     c0021916 <ISO9660::close(void*)+0x1e>
c0021908:	83 ec 0c             	sub    esp,0xc
c002190b:	52                   	push   edx
c002190c:	e8 8b df fe ff       	call   c000f89c <free>
c0021911:	83 c4 10             	add    esp,0x10
c0021914:	31 c0                	xor    eax,eax
c0021916:	83 c4 0c             	add    esp,0xc
c0021919:	c3                   	ret    

c002191a <ISO9660::closeDir(void*)>:
c002191a:	83 ec 0c             	sub    esp,0xc
c002191d:	b8 04 00 00 00       	mov    eax,0x4
c0021922:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021926:	85 d2                	test   edx,edx
c0021928:	74 0e                	je     c0021938 <ISO9660::closeDir(void*)+0x1e>
c002192a:	83 ec 0c             	sub    esp,0xc
c002192d:	52                   	push   edx
c002192e:	e8 69 df fe ff       	call   c000f89c <free>
c0021933:	83 c4 10             	add    esp,0x10
c0021936:	31 c0                	xor    eax,eax
c0021938:	83 c4 0c             	add    esp,0xc
c002193b:	c3                   	ret    

c002193c <ISO9660::~ISO9660()>:
c002193c:	83 ec 0c             	sub    esp,0xc
c002193f:	ba 3c d2 02 c0       	mov    edx,0xc002d23c
c0021944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021948:	89 10                	mov    DWORD PTR [eax],edx
c002194a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002194e:	83 ec 0c             	sub    esp,0xc
c0021951:	50                   	push   eax
c0021952:	e8 cf 12 ff ff       	call   c0012c26 <Filesystem::~Filesystem()>
c0021957:	83 c4 10             	add    esp,0x10
c002195a:	90                   	nop
c002195b:	83 c4 0c             	add    esp,0xc
c002195e:	c3                   	ret    
c002195f:	90                   	nop

c0021960 <ISO9660::~ISO9660()>:
c0021960:	83 ec 0c             	sub    esp,0xc
c0021963:	83 ec 0c             	sub    esp,0xc
c0021966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002196a:	e8 cd ff ff ff       	call   c002193c <ISO9660::~ISO9660()>
c002196f:	83 c4 10             	add    esp,0x10
c0021972:	83 ec 08             	sub    esp,0x8
c0021975:	6a 08                	push   0x8
c0021977:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002197b:	e8 97 0e ff ff       	call   c0012817 <operator delete(void*, unsigned long)>
c0021980:	83 c4 10             	add    esp,0x10
c0021983:	83 c4 0c             	add    esp,0xc
c0021986:	c3                   	ret    

c0021987 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021987:	55                   	push   ebp
c0021988:	31 c9                	xor    ecx,ecx
c002198a:	57                   	push   edi
c002198b:	56                   	push   esi
c002198c:	53                   	push   ebx
c002198d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021991:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021995:	89 eb                	mov    ebx,ebp
c0021997:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002199b:	39 ce                	cmp    esi,ecx
c002199d:	7e 17                	jle    c00219b6 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002199f:	31 d2                	xor    edx,edx
c00219a1:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00219a5:	7d 13                	jge    c00219ba <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00219a7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00219ab:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00219ae:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00219b1:	75 0d                	jne    c00219c0 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00219b3:	42                   	inc    edx
c00219b4:	eb eb                	jmp    c00219a1 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00219b6:	31 c0                	xor    eax,eax
c00219b8:	eb 0a                	jmp    c00219c4 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00219ba:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00219be:	eb 04                	jmp    c00219c4 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00219c0:	41                   	inc    ecx
c00219c1:	43                   	inc    ebx
c00219c2:	eb d7                	jmp    c002199b <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00219c4:	5b                   	pop    ebx
c00219c5:	5e                   	pop    esi
c00219c6:	5f                   	pop    edi
c00219c7:	5d                   	pop    ebp
c00219c8:	c3                   	ret    

c00219c9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00219c9:	57                   	push   edi
c00219ca:	56                   	push   esi
c00219cb:	53                   	push   ebx
c00219cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00219d4:	39 0d 40 27 03 c0    	cmp    DWORD PTR ds:0xc0032740,ecx
c00219da:	75 08                	jne    c00219e4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c00219dc:	38 05 b4 e5 02 c0    	cmp    BYTE PTR ds:0xc002e5b4,al
c00219e2:	74 2b                	je     c0021a0f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c00219e4:	83 ec 0c             	sub    esp,0xc
c00219e7:	a2 b4 e5 02 c0       	mov    ds:0xc002e5b4,al
c00219ec:	68 60 27 03 c0       	push   0xc0032760
c00219f1:	0f be c0             	movsx  eax,al
c00219f4:	6a 01                	push   0x1
c00219f6:	89 0d 40 27 03 c0    	mov    DWORD PTR ds:0xc0032740,ecx
c00219fc:	31 db                	xor    ebx,ebx
c00219fe:	53                   	push   ebx
c00219ff:	51                   	push   ecx
c0021a00:	ff 34 85 1c f5 02 c0 	push   DWORD PTR [eax*4-0x3ffd0ae4]
c0021a07:	e8 68 48 ff ff       	call   c0016274 <LogicalDisk::read(unsigned long long, int, void*)>
c0021a0c:	83 c4 20             	add    esp,0x20
c0021a0f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021a13:	be 60 27 03 c0       	mov    esi,0xc0032760
c0021a18:	b9 00 08 00 00       	mov    ecx,0x800
c0021a1d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021a1f:	5b                   	pop    ebx
c0021a20:	5e                   	pop    esi
c0021a21:	5f                   	pop    edi
c0021a22:	c3                   	ret    
c0021a23:	90                   	nop

c0021a24 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021a24:	81 ec 10 08 00 00    	sub    esp,0x810
c0021a2a:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021a31:	83 c0 41             	add    eax,0x41
c0021a34:	0f be c0             	movsx  eax,al
c0021a37:	50                   	push   eax
c0021a38:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021a3c:	50                   	push   eax
c0021a3d:	6a 10                	push   0x10
c0021a3f:	e8 85 ff ff ff       	call   c00219c9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a44:	83 c4 10             	add    esp,0x10
c0021a47:	31 c0                	xor    eax,eax
c0021a49:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021a4e:	75 1d                	jne    c0021a6d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021a50:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021a55:	75 16                	jne    c0021a6d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021a57:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021a5c:	75 0f                	jne    c0021a6d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021a5e:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021a63:	75 08                	jne    c0021a6d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021a65:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021a6a:	0f 94 c0             	sete   al
c0021a6d:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021a73:	c3                   	ret    

c0021a74 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021a74:	55                   	push   ebp
c0021a75:	57                   	push   edi
c0021a76:	56                   	push   esi
c0021a77:	53                   	push   ebx
c0021a78:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021a7e:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021a85:	85 ed                	test   ebp,ebp
c0021a87:	0f 84 da 01 00 00    	je     c0021c67 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021a8d:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021a95:	0f 84 cc 01 00 00    	je     c0021c67 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021a9b:	b8 01 00 00 00       	mov    eax,0x1
c0021aa0:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021aa4:	0f 85 c2 01 00 00    	jne    c0021c6c <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021aaa:	31 d2                	xor    edx,edx
c0021aac:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021ab3:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021ab6:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021ab9:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021abc:	89 04 24             	mov    DWORD PTR [esp],eax
c0021abf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021ac3:	01 c8                	add    eax,ecx
c0021ac5:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021ac8:	11 da                	adc    edx,ebx
c0021aca:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021ace:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021ad2:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021ad6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021ada:	19 d7                	sbb    edi,edx
c0021adc:	72 11                	jb     c0021aef <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021ade:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021ae1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021ae5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021ae9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021aed:	eb 0c                	jmp    c0021afb <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021aef:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021af3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021af7:	29 ce                	sub    esi,ecx
c0021af9:	19 df                	sbb    edi,ebx
c0021afb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021afe:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021b01:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021b05:	c1 e0 0b             	shl    eax,0xb
c0021b08:	01 c8                	add    eax,ecx
c0021b0a:	11 da                	adc    edx,ebx
c0021b0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b0f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b13:	51                   	push   ecx
c0021b14:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021b18:	50                   	push   eax
c0021b19:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021b1d:	53                   	push   ebx
c0021b1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021b22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021b26:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021b2a:	50                   	push   eax
c0021b2b:	e8 99 fe ff ff       	call   c00219c9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b30:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021b33:	b8 00 08 00 00       	mov    eax,0x800
c0021b38:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021b3e:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0021b42:	29 d0                	sub    eax,edx
c0021b44:	83 c4 10             	add    esp,0x10
c0021b47:	89 f9                	mov    ecx,edi
c0021b49:	39 c6                	cmp    esi,eax
c0021b4b:	83 d9 00             	sbb    ecx,0x0
c0021b4e:	7d 1b                	jge    c0021b6b <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0021b50:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021b55:	75 12                	jne    c0021b69 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0021b57:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021b5e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021b64:	e9 fa 00 00 00       	jmp    c0021c63 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021b69:	89 f0                	mov    eax,esi
c0021b6b:	01 d3                	add    ebx,edx
c0021b6d:	31 d2                	xor    edx,edx
c0021b6f:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021b73:	39 c2                	cmp    edx,eax
c0021b75:	7d 14                	jge    c0021b8b <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0021b77:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021b7e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021b82:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021b85:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021b88:	42                   	inc    edx
c0021b89:	eb e8                	jmp    c0021b73 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021b8b:	89 c2                	mov    edx,eax
c0021b8d:	85 c0                	test   eax,eax
c0021b8f:	79 02                	jns    c0021b93 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021b91:	31 d2                	xor    edx,edx
c0021b93:	01 c2                	add    edx,eax
c0021b95:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021b98:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021b9f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021ba3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021ba7:	99                   	cdq    
c0021ba8:	01 c1                	add    ecx,eax
c0021baa:	11 d3                	adc    ebx,edx
c0021bac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021bb0:	29 c6                	sub    esi,eax
c0021bb2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021bb6:	19 d7                	sbb    edi,edx
c0021bb8:	89 34 24             	mov    DWORD PTR [esp],esi
c0021bbb:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021bbf:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021bc4:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021bc7:	b8 00 00 00 00       	mov    eax,0x0
c0021bcc:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021bd0:	7d 43                	jge    c0021c15 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021bd2:	52                   	push   edx
c0021bd3:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021bd7:	50                   	push   eax
c0021bd8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021bdc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021be0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021be4:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021be8:	50                   	push   eax
c0021be9:	e8 db fd ff ff       	call   c00219c9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021bee:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021bf6:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021bfb:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0021c03:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021c0b:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021c10:	83 c4 10             	add    esp,0x10
c0021c13:	eb aa                	jmp    c0021bbf <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0021c15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c19:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021c1c:	74 2a                	je     c0021c48 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0021c1e:	50                   	push   eax
c0021c1f:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021c23:	50                   	push   eax
c0021c24:	8d 74 24 28          	lea    esi,[esp+0x28]
c0021c28:	56                   	push   esi
c0021c29:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021c2d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021c31:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0021c35:	51                   	push   ecx
c0021c36:	e8 8e fd ff ff       	call   c00219c9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c3b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021c3f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021c43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021c45:	83 c4 10             	add    esp,0x10
c0021c48:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021c4f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021c53:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021c57:	89 18                	mov    DWORD PTR [eax],ebx
c0021c59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021c5d:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021c60:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021c63:	31 c0                	xor    eax,eax
c0021c65:	eb 05                	jmp    c0021c6c <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021c67:	b8 04 00 00 00       	mov    eax,0x4
c0021c6c:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021c72:	5b                   	pop    ebx
c0021c73:	5e                   	pop    esi
c0021c74:	5f                   	pop    edi
c0021c75:	5d                   	pop    ebp
c0021c76:	c3                   	ret    
c0021c77:	90                   	nop

c0021c78 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021c78:	55                   	push   ebp
c0021c79:	57                   	push   edi
c0021c7a:	56                   	push   esi
c0021c7b:	53                   	push   ebx
c0021c7c:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021c82:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021c89:	85 ed                	test   ebp,ebp
c0021c8b:	0f 84 51 02 00 00    	je     c0021ee2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021c91:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021c99:	0f 84 43 02 00 00    	je     c0021ee2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021c9f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021ca2:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021ca5:	75 0a                	jne    c0021cb1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021ca7:	b8 07 00 00 00       	mov    eax,0x7
c0021cac:	e9 36 02 00 00       	jmp    c0021ee7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021cb1:	50                   	push   eax
c0021cb2:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021cb6:	50                   	push   eax
c0021cb7:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021cbe:	53                   	push   ebx
c0021cbf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021cc2:	c1 e0 0b             	shl    eax,0xb
c0021cc5:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021cc8:	c1 e8 0b             	shr    eax,0xb
c0021ccb:	50                   	push   eax
c0021ccc:	e8 f8 fc ff ff       	call   c00219c9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021cd1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021cd4:	83 c4 10             	add    esp,0x10
c0021cd7:	89 c1                	mov    ecx,eax
c0021cd9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021cdc:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021ce2:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021ce5:	84 db                	test   bl,bl
c0021ce7:	0f 85 8b 00 00 00    	jne    c0021d78 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021ced:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021cf3:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021cf6:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0021cfc:	29 c6                	sub    esi,eax
c0021cfe:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021d02:	89 f3                	mov    ebx,esi
c0021d04:	89 f1                	mov    ecx,esi
c0021d06:	c1 fb 1f             	sar    ebx,0x1f
c0021d09:	01 f0                	add    eax,esi
c0021d0b:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021d0e:	11 da                	adc    edx,ebx
c0021d10:	89 04 24             	mov    DWORD PTR [esp],eax
c0021d13:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021d17:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021d1a:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021d1d:	89 d8                	mov    eax,ebx
c0021d1f:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021d23:	ba 00 00 00 00       	mov    edx,0x0
c0021d28:	19 f8                	sbb    eax,edi
c0021d2a:	b8 00 00 00 00       	mov    eax,0x0
c0021d2f:	73 08                	jae    c0021d39 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0021d31:	89 f0                	mov    eax,esi
c0021d33:	89 fa                	mov    edx,edi
c0021d35:	29 c8                	sub    eax,ecx
c0021d37:	19 da                	sbb    edx,ebx
c0021d39:	89 d7                	mov    edi,edx
c0021d3b:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021d3e:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021d41:	09 c7                	or     edi,eax
c0021d43:	0f 84 5e ff ff ff    	je     c0021ca7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021d49:	57                   	push   edi
c0021d4a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021d4e:	50                   	push   eax
c0021d4f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021d56:	53                   	push   ebx
c0021d57:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021d5a:	c1 e0 0b             	shl    eax,0xb
c0021d5d:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021d61:	c1 e8 0b             	shr    eax,0xb
c0021d64:	50                   	push   eax
c0021d65:	e8 5f fc ff ff       	call   c00219c9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d6a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021d6d:	83 c4 10             	add    esp,0x10
c0021d70:	25 ff 07 00 00       	and    eax,0x7ff
c0021d75:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021d78:	31 ff                	xor    edi,edi
c0021d7a:	56                   	push   esi
c0021d7b:	6a 28                	push   0x28
c0021d7d:	6a 00                	push   0x0
c0021d7f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021d83:	50                   	push   eax
c0021d84:	e8 c7 e9 fd ff       	call   c0000750 <memset>
c0021d89:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021d8c:	25 ff 07 00 00       	and    eax,0x7ff
c0021d91:	89 c6                	mov    esi,eax
c0021d93:	83 c6 21             	add    esi,0x21
c0021d96:	83 d7 00             	adc    edi,0x0
c0021d99:	83 c4 10             	add    esp,0x10
c0021d9c:	31 c9                	xor    ecx,ecx
c0021d9e:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021da5:	83 f9 28             	cmp    ecx,0x28
c0021da8:	88 04 24             	mov    BYTE PTR [esp],al
c0021dab:	0f 94 c2             	sete   dl
c0021dae:	88 d0                	mov    al,dl
c0021db0:	ba ff 07 00 00       	mov    edx,0x7ff
c0021db5:	39 f2                	cmp    edx,esi
c0021db7:	ba 00 00 00 00       	mov    edx,0x0
c0021dbc:	19 fa                	sbb    edx,edi
c0021dbe:	0f 92 c2             	setb   dl
c0021dc1:	09 c2                	or     edx,eax
c0021dc3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021dc7:	0f 94 c0             	sete   al
c0021dca:	08 d0                	or     al,dl
c0021dcc:	75 16                	jne    c0021de4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021dce:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021dd2:	74 10                	je     c0021de4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021dd4:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021dd7:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021ddb:	41                   	inc    ecx
c0021ddc:	83 c6 01             	add    esi,0x1
c0021ddf:	83 d7 00             	adc    edi,0x0
c0021de2:	eb ba                	jmp    c0021d9e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021de4:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021deb:	83 ec 0c             	sub    esp,0xc
c0021dee:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021df2:	56                   	push   esi
c0021df3:	e8 74 e9 fd ff       	call   c000076c <strlen>
c0021df8:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021dff:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021e03:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021e0b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021e0e:	5a                   	pop    edx
c0021e0f:	25 ff 07 00 00       	and    eax,0x7ff
c0021e14:	59                   	pop    ecx
c0021e15:	01 f8                	add    eax,edi
c0021e17:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021e1d:	83 e0 02             	and    eax,0x2
c0021e20:	3c 01                	cmp    al,0x1
c0021e22:	19 c0                	sbb    eax,eax
c0021e24:	83 c0 02             	add    eax,0x2
c0021e27:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021e2b:	56                   	push   esi
c0021e2c:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021e30:	50                   	push   eax
c0021e31:	e8 d6 e9 fd ff       	call   c000080c <strcpy>
c0021e36:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021e3a:	83 c4 10             	add    esp,0x10
c0021e3d:	84 c0                	test   al,al
c0021e3f:	75 21                	jne    c0021e62 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021e41:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021e49:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021e51:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021e59:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021e60:	eb 28                	jmp    c0021e8a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021e62:	fe c8                	dec    al
c0021e64:	75 24                	jne    c0021e8a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021e66:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021e6e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021e76:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021e7e:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021e85:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021e8a:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021e8e:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021e95:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021e9c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021e9e:	0f b6 f3             	movzx  esi,bl
c0021ea1:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021ea8:	31 db                	xor    ebx,ebx
c0021eaa:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021eb0:	89 df                	mov    edi,ebx
c0021eb2:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021eb8:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021ebb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021ebe:	39 c6                	cmp    esi,eax
c0021ec0:	19 d7                	sbb    edi,edx
c0021ec2:	72 10                	jb     c0021ed4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021ec4:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021ecb:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021ed2:	eb 0a                	jmp    c0021ede <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021ed4:	29 f0                	sub    eax,esi
c0021ed6:	19 da                	sbb    edx,ebx
c0021ed8:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021edb:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021ede:	31 c0                	xor    eax,eax
c0021ee0:	eb 05                	jmp    c0021ee7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021ee2:	b8 04 00 00 00       	mov    eax,0x4
c0021ee7:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021eed:	5b                   	pop    ebx
c0021eee:	5e                   	pop    esi
c0021eef:	5f                   	pop    edi
c0021ef0:	5d                   	pop    ebp
c0021ef1:	c3                   	ret    

c0021ef2 <readRoot(unsigned int*, unsigned int*, char)>:
c0021ef2:	57                   	push   edi
c0021ef3:	56                   	push   esi
c0021ef4:	81 ec 38 08 00 00    	sub    esp,0x838
c0021efa:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021f02:	50                   	push   eax
c0021f03:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021f07:	50                   	push   eax
c0021f08:	6a 10                	push   0x10
c0021f0a:	e8 ba fa ff ff       	call   c00219c9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021f0f:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021f16:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0021f1a:	b9 22 00 00 00       	mov    ecx,0x22
c0021f1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021f21:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021f28:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021f2c:	89 10                	mov    DWORD PTR [eax],edx
c0021f2e:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021f35:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021f39:	89 10                	mov    DWORD PTR [eax],edx
c0021f3b:	81 c4 44 08 00 00    	add    esp,0x844
c0021f41:	b0 01                	mov    al,0x1
c0021f43:	5e                   	pop    esi
c0021f44:	5f                   	pop    edi
c0021f45:	c3                   	ret    

c0021f46 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021f46:	55                   	push   ebp
c0021f47:	57                   	push   edi
c0021f48:	56                   	push   esi
c0021f49:	53                   	push   ebx
c0021f4a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021f50:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021f57:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021f5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021f62:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021f66:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021f6a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021f6e:	75 03                	jne    c0021f73 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021f70:	83 c3 02             	add    ebx,0x2
c0021f73:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021f76:	75 03                	jne    c0021f7b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021f78:	43                   	inc    ebx
c0021f79:	eb f8                	jmp    c0021f73 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021f7b:	51                   	push   ecx
c0021f7c:	68 00 01 00 00       	push   0x100
c0021f81:	6a 00                	push   0x0
c0021f83:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f87:	50                   	push   eax
c0021f88:	e8 c3 e7 fd ff       	call   c0000750 <memset>
c0021f8d:	83 c4 10             	add    esp,0x10
c0021f90:	31 d2                	xor    edx,edx
c0021f92:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021f95:	84 c0                	test   al,al
c0021f97:	74 21                	je     c0021fba <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021f99:	3c 2f                	cmp    al,0x2f
c0021f9b:	75 0b                	jne    c0021fa8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021f9d:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021fa1:	bd 01 00 00 00       	mov    ebp,0x1
c0021fa6:	eb 14                	jmp    c0021fbc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021fa8:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021fab:	80 f9 19             	cmp    cl,0x19
c0021fae:	77 03                	ja     c0021fb3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021fb0:	83 e8 20             	sub    eax,0x20
c0021fb3:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021fb7:	42                   	inc    edx
c0021fb8:	eb d8                	jmp    c0021f92 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021fba:	31 ed                	xor    ebp,ebp
c0021fbc:	83 ec 0c             	sub    esp,0xc
c0021fbf:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021fc6:	e8 c1 d8 fe ff       	call   c000f88c <malloc>
c0021fcb:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021fd2:	89 c6                	mov    esi,eax
c0021fd4:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021fda:	c1 ef 0b             	shr    edi,0xb
c0021fdd:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021fe4:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021fe8:	83 c4 10             	add    esp,0x10
c0021feb:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021ff0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021ff4:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021ffb:	74 28                	je     c0022025 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021ffd:	52                   	push   edx
c0021ffe:	57                   	push   edi
c0021fff:	50                   	push   eax
c0022000:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022004:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c002200b:	e8 b9 f9 ff ff       	call   c00219c9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022014:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c002201b:	05 00 08 00 00       	add    eax,0x800
c0022020:	83 c4 10             	add    esp,0x10
c0022023:	eb cb                	jmp    c0021ff0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0022025:	83 ec 0c             	sub    esp,0xc
c0022028:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c002202c:	57                   	push   edi
c002202d:	e8 3a e7 fd ff       	call   c000076c <strlen>
c0022032:	50                   	push   eax
c0022033:	57                   	push   edi
c0022034:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c002203b:	56                   	push   esi
c002203c:	e8 46 f9 ff ff       	call   c0021987 <__memmem(unsigned char*, int, unsigned char*, int)>
c0022041:	83 c4 20             	add    esp,0x20
c0022044:	85 c0                	test   eax,eax
c0022046:	75 13                	jne    c002205b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0022048:	83 ec 0c             	sub    esp,0xc
c002204b:	56                   	push   esi
c002204c:	e8 4b d8 fe ff       	call   c000f89c <free>
c0022051:	83 c4 10             	add    esp,0x10
c0022054:	31 c0                	xor    eax,eax
c0022056:	e9 b3 00 00 00       	jmp    c002210e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002205b:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c002205f:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0022063:	c1 e7 08             	shl    edi,0x8
c0022066:	c1 e2 10             	shl    edx,0x10
c0022069:	09 d7                	or     edi,edx
c002206b:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c002206f:	09 d7                	or     edi,edx
c0022071:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0022075:	c1 e2 18             	shl    edx,0x18
c0022078:	09 d7                	or     edi,edx
c002207a:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c002207e:	89 d1                	mov    ecx,edx
c0022080:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0022084:	c1 e1 08             	shl    ecx,0x8
c0022087:	c1 e2 10             	shl    edx,0x10
c002208a:	09 ca                	or     edx,ecx
c002208c:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0022090:	09 ca                	or     edx,ecx
c0022092:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0022096:	c1 e1 18             	shl    ecx,0x18
c0022099:	09 ca                	or     edx,ecx
c002209b:	89 e9                	mov    ecx,ebp
c002209d:	84 c9                	test   cl,cl
c002209f:	74 3c                	je     c00220dd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c00220a1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00220a5:	83 ec 0c             	sub    esp,0xc
c00220a8:	56                   	push   esi
c00220a9:	e8 ee d7 fe ff       	call   c000f89c <free>
c00220ae:	83 c4 0c             	add    esp,0xc
c00220b1:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00220b8:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00220bd:	50                   	push   eax
c00220be:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00220c5:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00220cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00220d0:	52                   	push   edx
c00220d1:	57                   	push   edi
c00220d2:	53                   	push   ebx
c00220d3:	e8 6e fe ff ff       	call   c0021f46 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00220d8:	83 c4 20             	add    esp,0x20
c00220db:	eb 31                	jmp    c002210e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00220dd:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00220e0:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00220e7:	d0 e8                	shr    al,1
c00220e9:	89 3b                	mov    DWORD PTR [ebx],edi
c00220eb:	83 e0 01             	and    eax,0x1
c00220ee:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00220f5:	83 ec 0c             	sub    esp,0xc
c00220f8:	89 13                	mov    DWORD PTR [ebx],edx
c00220fa:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0022101:	89 03                	mov    DWORD PTR [ebx],eax
c0022103:	56                   	push   esi
c0022104:	e8 93 d7 fe ff       	call   c000f89c <free>
c0022109:	83 c4 10             	add    esp,0x10
c002210c:	b0 01                	mov    al,0x1
c002210e:	81 c4 1c 01 00 00    	add    esp,0x11c
c0022114:	5b                   	pop    ebx
c0022115:	5e                   	pop    esi
c0022116:	5f                   	pop    edi
c0022117:	5d                   	pop    ebp
c0022118:	c3                   	ret    

c0022119 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0022119:	55                   	push   ebp
c002211a:	57                   	push   edi
c002211b:	56                   	push   esi
c002211c:	53                   	push   ebx
c002211d:	83 ec 20             	sub    esp,0x20
c0022120:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022124:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0022128:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002212c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022134:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002213c:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0022141:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0022147:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c002214d:	57                   	push   edi
c002214e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022152:	50                   	push   eax
c0022153:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022157:	50                   	push   eax
c0022158:	e8 95 fd ff ff       	call   c0021ef2 <readRoot(unsigned int*, unsigned int*, char)>
c002215d:	5a                   	pop    edx
c002215e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022162:	e8 05 e6 fd ff       	call   c000076c <strlen>
c0022167:	83 c4 10             	add    esp,0x10
c002216a:	83 f8 03             	cmp    eax,0x3
c002216d:	77 17                	ja     c0022186 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c002216f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022173:	89 03                	mov    DWORD PTR [ebx],eax
c0022175:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022179:	89 06                	mov    DWORD PTR [esi],eax
c002217b:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0022182:	b0 01                	mov    al,0x1
c0022184:	eb 19                	jmp    c002219f <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0022186:	50                   	push   eax
c0022187:	55                   	push   ebp
c0022188:	57                   	push   edi
c0022189:	56                   	push   esi
c002218a:	53                   	push   ebx
c002218b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002218f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022193:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022197:	e8 aa fd ff ff       	call   c0021f46 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002219c:	83 c4 20             	add    esp,0x20
c002219f:	83 c4 1c             	add    esp,0x1c
c00221a2:	5b                   	pop    ebx
c00221a3:	5e                   	pop    esi
c00221a4:	5f                   	pop    edi
c00221a5:	5d                   	pop    ebp
c00221a6:	c3                   	ret    
c00221a7:	90                   	nop

c00221a8 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00221a8:	57                   	push   edi
c00221a9:	56                   	push   esi
c00221aa:	53                   	push   ebx
c00221ab:	83 ec 10             	sub    esp,0x10
c00221ae:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00221b2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00221b6:	85 ff                	test   edi,edi
c00221b8:	0f 84 9d 00 00 00    	je     c002225b <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00221be:	85 f6                	test   esi,esi
c00221c0:	0f 84 95 00 00 00    	je     c002225b <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00221c6:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00221cb:	74 17                	je     c00221e4 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c00221cd:	83 ec 0c             	sub    esp,0xc
c00221d0:	68 f3 d1 02 c0       	push   0xc002d1f3
c00221d5:	e8 1d 07 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00221da:	83 c4 10             	add    esp,0x10
c00221dd:	b8 03 00 00 00       	mov    eax,0x3
c00221e2:	eb 7c                	jmp    c0022260 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00221e4:	83 ec 0c             	sub    esp,0xc
c00221e7:	6a 1c                	push   0x1c
c00221e9:	e8 9e d6 fe ff       	call   c000f88c <malloc>
c00221ee:	89 07                	mov    DWORD PTR [edi],eax
c00221f0:	89 c3                	mov    ebx,eax
c00221f2:	58                   	pop    eax
c00221f3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00221f7:	50                   	push   eax
c00221f8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00221fb:	50                   	push   eax
c00221fc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022200:	50                   	push   eax
c0022201:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022205:	50                   	push   eax
c0022206:	56                   	push   esi
c0022207:	e8 0d ff ff ff       	call   c0022119 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002220c:	83 c4 20             	add    esp,0x20
c002220f:	84 c0                	test   al,al
c0022211:	74 07                	je     c002221a <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0022213:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022218:	74 0b                	je     c0022225 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c002221a:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002221e:	b8 01 00 00 00       	mov    eax,0x1
c0022223:	eb 3b                	jmp    c0022260 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022225:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022229:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002222d:	89 03                	mov    DWORD PTR [ebx],eax
c002222f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002223a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022241:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022248:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002224b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022252:	8a 06                	mov    al,BYTE PTR [esi]
c0022254:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022257:	31 c0                	xor    eax,eax
c0022259:	eb 05                	jmp    c0022260 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002225b:	b8 04 00 00 00       	mov    eax,0x4
c0022260:	83 c4 10             	add    esp,0x10
c0022263:	5b                   	pop    ebx
c0022264:	5e                   	pop    esi
c0022265:	5f                   	pop    edi
c0022266:	c3                   	ret    
c0022267:	90                   	nop

c0022268 <ISO9660::exists(char const*)>:
c0022268:	83 ec 28             	sub    esp,0x28
c002226b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002226f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022273:	52                   	push   edx
c0022274:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022277:	52                   	push   edx
c0022278:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002227c:	52                   	push   edx
c002227d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022281:	52                   	push   edx
c0022282:	50                   	push   eax
c0022283:	e8 91 fe ff ff       	call   c0022119 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022288:	83 c4 3c             	add    esp,0x3c
c002228b:	c3                   	ret    

c002228c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c002228c:	56                   	push   esi
c002228d:	53                   	push   ebx
c002228e:	83 ec 14             	sub    esp,0x14
c0022291:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022295:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022299:	85 db                	test   ebx,ebx
c002229b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002229f:	0f 94 c2             	sete   dl
c00222a2:	85 f6                	test   esi,esi
c00222a4:	0f 94 c0             	sete   al
c00222a7:	08 c2                	or     dl,al
c00222a9:	75 68                	jne    c0022313 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00222ab:	85 c9                	test   ecx,ecx
c00222ad:	74 64                	je     c0022313 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00222af:	83 ec 0c             	sub    esp,0xc
c00222b2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00222b5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00222b9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00222bf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00222c6:	50                   	push   eax
c00222c7:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00222ca:	50                   	push   eax
c00222cb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00222cf:	50                   	push   eax
c00222d0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00222d4:	50                   	push   eax
c00222d5:	51                   	push   ecx
c00222d6:	e8 3e fe ff ff       	call   c0022119 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00222db:	83 c4 20             	add    esp,0x20
c00222de:	ba 01 00 00 00       	mov    edx,0x1
c00222e3:	84 c0                	test   al,al
c00222e5:	74 31                	je     c0022318 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00222e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00222eb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00222f2:	89 03                	mov    DWORD PTR [ebx],eax
c00222f4:	ba 00 00 00 00       	mov    edx,0x0
c00222f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222fd:	85 c0                	test   eax,eax
c00222ff:	0f 95 06             	setne  BYTE PTR [esi]
c0022302:	74 14                	je     c0022318 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022304:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002230a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022311:	eb 05                	jmp    c0022318 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022313:	ba 04 00 00 00       	mov    edx,0x4
c0022318:	83 c4 14             	add    esp,0x14
c002231b:	89 d0                	mov    eax,edx
c002231d:	5b                   	pop    ebx
c002231e:	5e                   	pop    esi
c002231f:	c3                   	ret    

c0022320 <ISO9660::openDir(char const*, void**)>:
c0022320:	57                   	push   edi
c0022321:	56                   	push   esi
c0022322:	53                   	push   ebx
c0022323:	83 ec 10             	sub    esp,0x10
c0022326:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002232a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002232e:	85 ff                	test   edi,edi
c0022330:	0f 84 95 00 00 00    	je     c00223cb <ISO9660::openDir(char const*, void**)+0xab>
c0022336:	85 f6                	test   esi,esi
c0022338:	0f 84 8d 00 00 00    	je     c00223cb <ISO9660::openDir(char const*, void**)+0xab>
c002233e:	83 ec 0c             	sub    esp,0xc
c0022341:	6a 1c                	push   0x1c
c0022343:	e8 44 d5 fe ff       	call   c000f88c <malloc>
c0022348:	89 07                	mov    DWORD PTR [edi],eax
c002234a:	89 c3                	mov    ebx,eax
c002234c:	59                   	pop    ecx
c002234d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022351:	50                   	push   eax
c0022352:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022355:	50                   	push   eax
c0022356:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002235a:	50                   	push   eax
c002235b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002235f:	50                   	push   eax
c0022360:	56                   	push   esi
c0022361:	e8 b3 fd ff ff       	call   c0022119 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022366:	83 c4 20             	add    esp,0x20
c0022369:	84 c0                	test   al,al
c002236b:	74 07                	je     c0022374 <ISO9660::openDir(char const*, void**)+0x54>
c002236d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022372:	75 21                	jne    c0022395 <ISO9660::openDir(char const*, void**)+0x75>
c0022374:	0f b6 c0             	movzx  eax,al
c0022377:	52                   	push   edx
c0022378:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002237c:	50                   	push   eax
c002237d:	68 19 d2 02 c0       	push   0xc002d219
c0022382:	e8 70 05 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0022387:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002238b:	83 c4 10             	add    esp,0x10
c002238e:	b8 01 00 00 00       	mov    eax,0x1
c0022393:	eb 3b                	jmp    c00223d0 <ISO9660::openDir(char const*, void**)+0xb0>
c0022395:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022399:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002239d:	89 03                	mov    DWORD PTR [ebx],eax
c002239f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00223a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00223aa:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00223b1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00223b8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00223bb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00223c2:	8a 06                	mov    al,BYTE PTR [esi]
c00223c4:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00223c7:	31 c0                	xor    eax,eax
c00223c9:	eb 05                	jmp    c00223d0 <ISO9660::openDir(char const*, void**)+0xb0>
c00223cb:	b8 04 00 00 00       	mov    eax,0x4
c00223d0:	83 c4 10             	add    esp,0x10
c00223d3:	5b                   	pop    ebx
c00223d4:	5e                   	pop    esi
c00223d5:	5f                   	pop    edi
c00223d6:	c3                   	ret    
c00223d7:	90                   	nop

c00223d8 <ISO9660::ISO9660()>:
c00223d8:	83 ec 0c             	sub    esp,0xc
c00223db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223df:	83 ec 0c             	sub    esp,0xc
c00223e2:	50                   	push   eax
c00223e3:	e8 1a 08 ff ff       	call   c0012c02 <Filesystem::Filesystem()>
c00223e8:	83 c4 10             	add    esp,0x10
c00223eb:	ba 3c d2 02 c0       	mov    edx,0xc002d23c
c00223f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223f4:	89 10                	mov    DWORD PTR [eax],edx
c00223f6:	90                   	nop
c00223f7:	83 c4 0c             	add    esp,0xc
c00223fa:	c3                   	ret    
c00223fb:	90                   	nop

c00223fc <SoundChannel::SoundChannel(int, int, int, int)>:
c00223fc:	83 ec 1c             	sub    esp,0x1c
c00223ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022403:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022407:	89 10                	mov    DWORD PTR [eax],edx
c0022409:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002240d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022411:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022414:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022418:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002241c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002241f:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022424:	75 23                	jne    c0022449 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0022426:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002242a:	8b 10                	mov    edx,DWORD PTR [eax]
c002242c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022430:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022433:	0f af c2             	imul   eax,edx
c0022436:	85 c0                	test   eax,eax
c0022438:	79 03                	jns    c002243d <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c002243a:	83 c0 03             	add    eax,0x3
c002243d:	c1 f8 02             	sar    eax,0x2
c0022440:	05 a0 0f 00 00       	add    eax,0xfa0
c0022445:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022449:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002244d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022451:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022454:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022458:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c002245f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022463:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c002246a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002246e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022471:	c1 e0 02             	shl    eax,0x2
c0022474:	83 ec 0c             	sub    esp,0xc
c0022477:	50                   	push   eax
c0022478:	e8 0f d4 fe ff       	call   c000f88c <malloc>
c002247d:	83 c4 10             	add    esp,0x10
c0022480:	89 c2                	mov    edx,eax
c0022482:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022486:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022489:	83 ec 04             	sub    esp,0x4
c002248c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022490:	50                   	push   eax
c0022491:	6a 01                	push   0x1
c0022493:	6a 04                	push   0x4
c0022495:	e8 cb 66 fe ff       	call   c0008b65 <src_new>
c002249a:	83 c4 10             	add    esp,0x10
c002249d:	89 c2                	mov    edx,eax
c002249f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00224a6:	83 ec 0c             	sub    esp,0xc
c00224a9:	68 9c d2 02 c0       	push   0xc002d29c
c00224ae:	e8 44 04 ff ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00224b3:	83 c4 10             	add    esp,0x10
c00224b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224ba:	85 c0                	test   eax,eax
c00224bc:	74 10                	je     c00224ce <SoundChannel::SoundChannel(int, int, int, int)+0xd2>
c00224be:	83 ec 0c             	sub    esp,0xc
c00224c1:	68 b2 d2 02 c0       	push   0xc002d2b2
c00224c6:	e8 62 7e ff ff       	call   c001a32d <Krnl::panic(char const*)>
c00224cb:	83 c4 10             	add    esp,0x10
c00224ce:	a0 60 33 03 c0       	mov    al,ds:0xc0033360
c00224d3:	83 f0 01             	xor    eax,0x1
c00224d6:	84 c0                	test   al,al
c00224d8:	74 57                	je     c0022531 <SoundChannel::SoundChannel(int, int, int, int)+0x135>
c00224da:	a1 cc d2 02 c0       	mov    eax,ds:0xc002d2cc
c00224df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00224e3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00224eb:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00224f3:	7f 35                	jg     c002252a <SoundChannel::SoundChannel(int, int, int, int)+0x12e>
c00224f5:	83 ec 0c             	sub    esp,0xc
c00224f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00224fc:	e8 4e 56 00 00       	call   c0027b4f <__floatsisf>
c0022501:	83 c4 10             	add    esp,0x10
c0022504:	8b 15 cc d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d2cc
c002250a:	83 ec 08             	sub    esp,0x8
c002250d:	52                   	push   edx
c002250e:	50                   	push   eax
c002250f:	e8 4d 52 00 00       	call   c0027761 <__mulsf3>
c0022514:	83 c4 10             	add    esp,0x10
c0022517:	89 c2                	mov    edx,eax
c0022519:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002251d:	89 14 85 60 2f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd0a0],edx
c0022524:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022528:	eb c1                	jmp    c00224eb <SoundChannel::SoundChannel(int, int, int, int)+0xef>
c002252a:	c6 05 60 33 03 c0 01 	mov    BYTE PTR ds:0xc0033360,0x1
c0022531:	90                   	nop
c0022532:	83 c4 1c             	add    esp,0x1c
c0022535:	c3                   	ret    

c0022536 <SoundChannel::~SoundChannel()>:
c0022536:	83 ec 0c             	sub    esp,0xc
c0022539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002253d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022540:	83 ec 0c             	sub    esp,0xc
c0022543:	50                   	push   eax
c0022544:	e8 53 d3 fe ff       	call   c000f89c <free>
c0022549:	83 c4 10             	add    esp,0x10
c002254c:	90                   	nop
c002254d:	83 c4 0c             	add    esp,0xc
c0022550:	c3                   	ret    
c0022551:	90                   	nop

c0022552 <SoundChannel::getSampleRate()>:
c0022552:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022556:	8b 00                	mov    eax,DWORD PTR [eax]
c0022558:	c3                   	ret    
c0022559:	90                   	nop

c002255a <SoundChannel::getBits()>:
c002255a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002255e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022561:	c3                   	ret    

c0022562 <SoundChannel::getBufferUsed()>:
c0022562:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022566:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022569:	c3                   	ret    

c002256a <SoundChannel::getBufferSize()>:
c002256a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002256e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022571:	c3                   	ret    

c0022572 <SoundChannel::unbuffer(float*, int, int)>:
c0022572:	56                   	push   esi
c0022573:	53                   	push   ebx
c0022574:	83 ec 40             	sub    esp,0x40
c0022577:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c002257b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002257e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022582:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022585:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022589:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002258d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022591:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022595:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022599:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c002259d:	e8 ad 55 00 00       	call   c0027b4f <__floatsisf>
c00225a2:	5a                   	pop    edx
c00225a3:	89 c6                	mov    esi,eax
c00225a5:	ff 33                	push   DWORD PTR [ebx]
c00225a7:	e8 a3 55 00 00       	call   c0027b4f <__floatsisf>
c00225ac:	59                   	pop    ecx
c00225ad:	5a                   	pop    edx
c00225ae:	50                   	push   eax
c00225af:	56                   	push   esi
c00225b0:	e8 6f 53 00 00       	call   c0027924 <__divsf3>
c00225b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00225b8:	e8 62 68 00 00       	call   c0028e1f <__extendsfdf2>
c00225bd:	59                   	pop    ecx
c00225be:	5e                   	pop    esi
c00225bf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00225c3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00225c7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00225cf:	8d 44 24 14          	lea    eax,[esp+0x14]
c00225d3:	50                   	push   eax
c00225d4:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00225d7:	e8 7e 61 fe ff       	call   c000875a <src_process>
c00225dc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00225e0:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00225e3:	83 c4 0c             	add    esp,0xc
c00225e6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00225e9:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00225ec:	29 d0                	sub    eax,edx
c00225ee:	c1 e0 02             	shl    eax,0x2
c00225f1:	50                   	push   eax
c00225f2:	8d 04 91             	lea    eax,[ecx+edx*4]
c00225f5:	50                   	push   eax
c00225f6:	51                   	push   ecx
c00225f7:	e8 8c e0 fd ff       	call   c0000688 <memmove>
c00225fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022600:	83 c4 44             	add    esp,0x44
c0022603:	5b                   	pop    ebx
c0022604:	5e                   	pop    esi
c0022605:	c3                   	ret    

c0022606 <SoundChannel::buffer16(short*, int)>:
c0022606:	55                   	push   ebp
c0022607:	57                   	push   edi
c0022608:	56                   	push   esi
c0022609:	53                   	push   ebx
c002260a:	83 ec 1c             	sub    esp,0x1c
c002260d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022611:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0022614:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0022617:	0f 84 d2 00 00 00    	je     c00226ef <SoundChannel::buffer16(short*, int)+0xe9>
c002261d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0022621:	85 ed                	test   ebp,ebp
c0022623:	0f 8e c6 00 00 00    	jle    c00226ef <SoundChannel::buffer16(short*, int)+0xe9>
c0022629:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002262d:	bd 00 00 00 38       	mov    ebp,0x38000000
c0022632:	83 ec 0c             	sub    esp,0xc
c0022635:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0022638:	50                   	push   eax
c0022639:	e8 11 55 00 00       	call   c0027b4f <__floatsisf>
c002263e:	59                   	pop    ecx
c002263f:	8d 4e 01             	lea    ecx,[esi+0x1]
c0022642:	5f                   	pop    edi
c0022643:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0022646:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022649:	55                   	push   ebp
c002264a:	50                   	push   eax
c002264b:	e8 11 51 00 00       	call   c0027761 <__mulsf3>
c0022650:	83 c4 10             	add    esp,0x10
c0022653:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0022656:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0022659:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c002265c:	0f 84 99 00 00 00    	je     c00226fb <SoundChannel::buffer16(short*, int)+0xf5>
c0022662:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0022667:	74 78                	je     c00226e1 <SoundChannel::buffer16(short*, int)+0xdb>
c0022669:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002266d:	83 ec 0c             	sub    esp,0xc
c0022670:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0022674:	50                   	push   eax
c0022675:	e8 d5 54 00 00       	call   c0027b4f <__floatsisf>
c002267a:	5f                   	pop    edi
c002267b:	8d 4e 01             	lea    ecx,[esi+0x1]
c002267e:	5a                   	pop    edx
c002267f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0022682:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022685:	55                   	push   ebp
c0022686:	50                   	push   eax
c0022687:	e8 d5 50 00 00       	call   c0027761 <__mulsf3>
c002268c:	83 c4 10             	add    esp,0x10
c002268f:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0022692:	be 02 00 00 00       	mov    esi,0x2
c0022697:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c002269a:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c002269d:	74 46                	je     c00226e5 <SoundChannel::buffer16(short*, int)+0xdf>
c002269f:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00226a3:	eb 36                	jmp    c00226db <SoundChannel::buffer16(short*, int)+0xd5>
c00226a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00226a9:	83 ec 0c             	sub    esp,0xc
c00226ac:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c00226b0:	46                   	inc    esi
c00226b1:	50                   	push   eax
c00226b2:	e8 98 54 00 00       	call   c0027b4f <__floatsisf>
c00226b7:	5a                   	pop    edx
c00226b8:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00226bb:	59                   	pop    ecx
c00226bc:	8d 4f 01             	lea    ecx,[edi+0x1]
c00226bf:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c00226c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226c6:	50                   	push   eax
c00226c7:	e8 95 50 00 00       	call   c0027761 <__mulsf3>
c00226cc:	83 c4 10             	add    esp,0x10
c00226cf:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c00226d3:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c00226d6:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c00226d9:	74 0a                	je     c00226e5 <SoundChannel::buffer16(short*, int)+0xdf>
c00226db:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c00226df:	75 c4                	jne    c00226a5 <SoundChannel::buffer16(short*, int)+0x9f>
c00226e1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00226e5:	83 c4 1c             	add    esp,0x1c
c00226e8:	89 f0                	mov    eax,esi
c00226ea:	5b                   	pop    ebx
c00226eb:	5e                   	pop    esi
c00226ec:	5f                   	pop    edi
c00226ed:	5d                   	pop    ebp
c00226ee:	c3                   	ret    
c00226ef:	83 c4 1c             	add    esp,0x1c
c00226f2:	31 f6                	xor    esi,esi
c00226f4:	5b                   	pop    ebx
c00226f5:	89 f0                	mov    eax,esi
c00226f7:	5e                   	pop    esi
c00226f8:	5f                   	pop    edi
c00226f9:	5d                   	pop    ebp
c00226fa:	c3                   	ret    
c00226fb:	be 01 00 00 00       	mov    esi,0x1
c0022700:	eb e3                	jmp    c00226e5 <SoundChannel::buffer16(short*, int)+0xdf>

c0022702 <SoundChannel::buffer8(unsigned char*, int)>:
c0022702:	55                   	push   ebp
c0022703:	57                   	push   edi
c0022704:	56                   	push   esi
c0022705:	53                   	push   ebx
c0022706:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002270a:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002270e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022711:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022715:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022718:	74 7a                	je     c0022794 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002271a:	85 ff                	test   edi,edi
c002271c:	7e 76                	jle    c0022794 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002271e:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022722:	8d 70 01             	lea    esi,[eax+0x1]
c0022725:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022728:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002272b:	8b 1c 9d 60 2f 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd0a0]
c0022732:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022735:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022738:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002273b:	74 5e                	je     c002279b <SoundChannel::buffer8(unsigned char*, int)+0x99>
c002273d:	83 ff 01             	cmp    edi,0x1
c0022740:	74 4b                	je     c002278d <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022742:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022746:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022749:	8d 70 01             	lea    esi,[eax+0x1]
c002274c:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002274f:	8b 1c 9d 60 2f 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd0a0]
c0022756:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022759:	b8 02 00 00 00       	mov    eax,0x2
c002275e:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022761:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022764:	75 23                	jne    c0022789 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022766:	eb 27                	jmp    c002278f <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022768:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c002276d:	8d 71 01             	lea    esi,[ecx+0x1]
c0022770:	40                   	inc    eax
c0022771:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022774:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022777:	8b 1c 9d 60 2f 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd0a0]
c002277e:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022781:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022784:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022787:	74 06                	je     c002278f <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022789:	39 c7                	cmp    edi,eax
c002278b:	75 db                	jne    c0022768 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c002278d:	89 f8                	mov    eax,edi
c002278f:	5b                   	pop    ebx
c0022790:	5e                   	pop    esi
c0022791:	5f                   	pop    edi
c0022792:	5d                   	pop    ebp
c0022793:	c3                   	ret    
c0022794:	5b                   	pop    ebx
c0022795:	31 c0                	xor    eax,eax
c0022797:	5e                   	pop    esi
c0022798:	5f                   	pop    edi
c0022799:	5d                   	pop    ebp
c002279a:	c3                   	ret    
c002279b:	b8 01 00 00 00       	mov    eax,0x1
c00227a0:	eb ed                	jmp    c002278f <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00227a2 <SoundDevice::SoundDevice(char const*)>:
c00227a2:	83 ec 1c             	sub    esp,0x1c
c00227a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227a9:	83 ec 08             	sub    esp,0x8
c00227ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00227b0:	50                   	push   eax
c00227b1:	e8 7e 17 ff ff       	call   c0013f34 <Device::Device(char const*)>
c00227b6:	83 c4 10             	add    esp,0x10
c00227b9:	ba cc d3 02 c0       	mov    edx,0xc002d3cc
c00227be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227c2:	89 10                	mov    DWORD PTR [eax],edx
c00227c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227c8:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00227d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227d6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00227e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00227e8:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00227ed:	7f 19                	jg     c0022808 <SoundDevice::SoundDevice(char const*)+0x66>
c00227ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00227f7:	83 c2 54             	add    edx,0x54
c00227fa:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022802:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022806:	eb e0                	jmp    c00227e8 <SoundDevice::SoundDevice(char const*)+0x46>
c0022808:	90                   	nop
c0022809:	83 c4 1c             	add    esp,0x1c
c002280c:	c3                   	ret    
c002280d:	90                   	nop

c002280e <SoundDevice::~SoundDevice()>:
c002280e:	53                   	push   ebx
c002280f:	83 ec 18             	sub    esp,0x18
c0022812:	ba cc d3 02 c0       	mov    edx,0xc002d3cc
c0022817:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002281b:	89 10                	mov    DWORD PTR [eax],edx
c002281d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022825:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002282a:	7f 46                	jg     c0022872 <SoundDevice::~SoundDevice()+0x64>
c002282c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022830:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022834:	83 c2 54             	add    edx,0x54
c0022837:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c002283b:	85 c0                	test   eax,eax
c002283d:	74 2d                	je     c002286c <SoundDevice::~SoundDevice()+0x5e>
c002283f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022843:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022847:	83 c2 54             	add    edx,0x54
c002284a:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002284e:	85 db                	test   ebx,ebx
c0022850:	74 1a                	je     c002286c <SoundDevice::~SoundDevice()+0x5e>
c0022852:	83 ec 0c             	sub    esp,0xc
c0022855:	53                   	push   ebx
c0022856:	e8 db fc ff ff       	call   c0022536 <SoundChannel::~SoundChannel()>
c002285b:	83 c4 10             	add    esp,0x10
c002285e:	83 ec 08             	sub    esp,0x8
c0022861:	6a 2c                	push   0x2c
c0022863:	53                   	push   ebx
c0022864:	e8 ae ff fe ff       	call   c0012817 <operator delete(void*, unsigned long)>
c0022869:	83 c4 10             	add    esp,0x10
c002286c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022870:	eb b3                	jmp    c0022825 <SoundDevice::~SoundDevice()+0x17>
c0022872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022876:	83 ec 0c             	sub    esp,0xc
c0022879:	50                   	push   eax
c002287a:	e8 7f 13 ff ff       	call   c0013bfe <Device::~Device()>
c002287f:	83 c4 10             	add    esp,0x10
c0022882:	90                   	nop
c0022883:	83 c4 18             	add    esp,0x18
c0022886:	5b                   	pop    ebx
c0022887:	c3                   	ret    

c0022888 <SoundDevice::~SoundDevice()>:
c0022888:	83 ec 0c             	sub    esp,0xc
c002288b:	83 ec 0c             	sub    esp,0xc
c002288e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022892:	e8 77 ff ff ff       	call   c002280e <SoundDevice::~SoundDevice()>
c0022897:	83 c4 10             	add    esp,0x10
c002289a:	83 ec 08             	sub    esp,0x8
c002289d:	68 e4 01 00 00       	push   0x1e4
c00228a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228a6:	e8 6c ff fe ff       	call   c0012817 <operator delete(void*, unsigned long)>
c00228ab:	83 c4 10             	add    esp,0x10
c00228ae:	83 c4 0c             	add    esp,0xc
c00228b1:	c3                   	ret    

c00228b2 <SoundDevice::getFreeChannelNum()>:
c00228b2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00228b6:	31 c0                	xor    eax,eax
c00228b8:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00228c0:	74 09                	je     c00228cb <SoundDevice::getFreeChannelNum()+0x19>
c00228c2:	40                   	inc    eax
c00228c3:	83 f8 20             	cmp    eax,0x20
c00228c6:	75 f0                	jne    c00228b8 <SoundDevice::getFreeChannelNum()+0x6>
c00228c8:	83 c8 ff             	or     eax,0xffffffff
c00228cb:	c3                   	ret    

c00228cc <SoundDevice::addChannel(SoundChannel*)>:
c00228cc:	56                   	push   esi
c00228cd:	53                   	push   ebx
c00228ce:	51                   	push   ecx
c00228cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00228d3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00228d7:	53                   	push   ebx
c00228d8:	e8 d5 ff ff ff       	call   c00228b2 <SoundDevice::getFreeChannelNum()>
c00228dd:	5a                   	pop    edx
c00228de:	83 f8 ff             	cmp    eax,0xffffffff
c00228e1:	74 51                	je     c0022934 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00228e3:	85 f6                	test   esi,esi
c00228e5:	74 4d                	je     c0022934 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00228e7:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00228ee:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00228f5:	75 30                	jne    c0022927 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00228f7:	83 ec 0c             	sub    esp,0xc
c00228fa:	56                   	push   esi
c00228fb:	e8 52 fc ff ff       	call   c0022552 <SoundChannel::getSampleRate()>
c0022900:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022906:	89 34 24             	mov    DWORD PTR [esp],esi
c0022909:	e8 4c fc ff ff       	call   c002255a <SoundChannel::getBits()>
c002290e:	83 c4 0c             	add    esp,0xc
c0022911:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022917:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022919:	50                   	push   eax
c002291a:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022920:	53                   	push   ebx
c0022921:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0022924:	83 c4 10             	add    esp,0x10
c0022927:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c002292d:	b8 01 00 00 00       	mov    eax,0x1
c0022932:	eb 03                	jmp    c0022937 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022934:	83 c8 ff             	or     eax,0xffffffff
c0022937:	5a                   	pop    edx
c0022938:	5b                   	pop    ebx
c0022939:	5e                   	pop    esi
c002293a:	c3                   	ret    
c002293b:	90                   	nop

c002293c <SoundDevice::removeChannel(int)>:
c002293c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022944:	83 fa 1f             	cmp    edx,0x1f
c0022947:	77 23                	ja     c002296c <SoundDevice::removeChannel(int)+0x30>
c0022949:	8d 14 90             	lea    edx,[eax+edx*4]
c002294c:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022953:	74 17                	je     c002296c <SoundDevice::removeChannel(int)+0x30>
c0022955:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002295f:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022965:	75 05                	jne    c002296c <SoundDevice::removeChannel(int)+0x30>
c0022967:	8b 00                	mov    eax,DWORD PTR [eax]
c0022969:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c002296c:	c3                   	ret    
c002296d:	90                   	nop

c002296e <SoundDevice::floatTo16(float*, short*, int)>:
c002296e:	57                   	push   edi
c002296f:	56                   	push   esi
c0022970:	53                   	push   ebx
c0022971:	31 db                	xor    ebx,ebx
c0022973:	83 ec 10             	sub    esp,0x10
c0022976:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002297a:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002297e:	0f 8d d0 00 00 00    	jge    c0022a54 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0022984:	83 ec 0c             	sub    esp,0xc
c0022987:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002298b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002298e:	e8 8c 64 00 00       	call   c0028e1f <__extendsfdf2>
c0022993:	83 c4 10             	add    esp,0x10
c0022996:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002299a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002299e:	68 00 00 f0 3f       	push   0x3ff00000
c00229a3:	6a 00                	push   0x0
c00229a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229ad:	e8 f9 53 00 00       	call   c0027dab <__adddf3>
c00229b2:	83 c4 10             	add    esp,0x10
c00229b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00229b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00229bd:	68 00 00 e0 3f       	push   0x3fe00000
c00229c2:	6a 00                	push   0x0
c00229c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229cc:	e8 57 5a 00 00       	call   c0028428 <__muldf3>
c00229d1:	83 c4 10             	add    esp,0x10
c00229d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00229d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00229dc:	68 c0 ff df 40       	push   0x40dfffc0
c00229e1:	6a 00                	push   0x0
c00229e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229eb:	e8 38 5a 00 00       	call   c0028428 <__muldf3>
c00229f0:	59                   	pop    ecx
c00229f1:	5f                   	pop    edi
c00229f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00229f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00229fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a02:	e8 f4 62 00 00       	call   c0028cfb <__truncdfsf2>
c0022a07:	5a                   	pop    edx
c0022a08:	89 c7                	mov    edi,eax
c0022a0a:	59                   	pop    ecx
c0022a0b:	68 00 fe ff 46       	push   0x46fffe00
c0022a10:	50                   	push   eax
c0022a11:	e8 8f 53 00 00       	call   c0027da5 <__gesf2>
c0022a16:	83 c4 10             	add    esp,0x10
c0022a19:	85 c0                	test   eax,eax
c0022a1b:	78 08                	js     c0022a25 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c0022a1d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0022a23:	eb 29                	jmp    c0022a4e <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022a25:	50                   	push   eax
c0022a26:	50                   	push   eax
c0022a27:	6a 00                	push   0x0
c0022a29:	57                   	push   edi
c0022a2a:	e8 7a 53 00 00       	call   c0027da9 <__lesf2>
c0022a2f:	83 c4 10             	add    esp,0x10
c0022a32:	85 c0                	test   eax,eax
c0022a34:	7f 08                	jg     c0022a3e <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0022a36:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c0022a3c:	eb 10                	jmp    c0022a4e <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022a3e:	83 ec 0c             	sub    esp,0xc
c0022a41:	57                   	push   edi
c0022a42:	e8 75 64 00 00       	call   c0028ebc <lrintf>
c0022a47:	83 c4 10             	add    esp,0x10
c0022a4a:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0022a4e:	43                   	inc    ebx
c0022a4f:	e9 26 ff ff ff       	jmp    c002297a <SoundDevice::floatTo16(float*, short*, int)+0xc>
c0022a54:	83 c4 10             	add    esp,0x10
c0022a57:	5b                   	pop    ebx
c0022a58:	5e                   	pop    esi
c0022a59:	5f                   	pop    edi
c0022a5a:	c3                   	ret    
c0022a5b:	90                   	nop

c0022a5c <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022a5c:	57                   	push   edi
c0022a5d:	56                   	push   esi
c0022a5e:	53                   	push   ebx
c0022a5f:	31 db                	xor    ebx,ebx
c0022a61:	83 ec 10             	sub    esp,0x10
c0022a64:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022a68:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022a6c:	0f 8d cb 00 00 00    	jge    c0022b3d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022a72:	83 ec 0c             	sub    esp,0xc
c0022a75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022a79:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022a7c:	e8 9e 63 00 00       	call   c0028e1f <__extendsfdf2>
c0022a81:	83 c4 10             	add    esp,0x10
c0022a84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a88:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022a8c:	68 00 00 f0 3f       	push   0x3ff00000
c0022a91:	6a 00                	push   0x0
c0022a93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a9b:	e8 0b 53 00 00       	call   c0027dab <__adddf3>
c0022aa0:	83 c4 10             	add    esp,0x10
c0022aa3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022aa7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022aab:	68 00 00 e0 3f       	push   0x3fe00000
c0022ab0:	6a 00                	push   0x0
c0022ab2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ab6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022aba:	e8 69 59 00 00       	call   c0028428 <__muldf3>
c0022abf:	83 c4 10             	add    esp,0x10
c0022ac2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022ac6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022aca:	68 00 00 60 40       	push   0x40600000
c0022acf:	6a 00                	push   0x0
c0022ad1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ad5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ad9:	e8 4a 59 00 00       	call   c0028428 <__muldf3>
c0022ade:	59                   	pop    ecx
c0022adf:	5f                   	pop    edi
c0022ae0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022ae4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022ae8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022aec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022af0:	e8 06 62 00 00       	call   c0028cfb <__truncdfsf2>
c0022af5:	5a                   	pop    edx
c0022af6:	89 c7                	mov    edi,eax
c0022af8:	59                   	pop    ecx
c0022af9:	68 00 00 fe 42       	push   0x42fe0000
c0022afe:	50                   	push   eax
c0022aff:	e8 a1 52 00 00       	call   c0027da5 <__gesf2>
c0022b04:	83 c4 10             	add    esp,0x10
c0022b07:	85 c0                	test   eax,eax
c0022b09:	78 06                	js     c0022b11 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022b0b:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022b0f:	eb 26                	jmp    c0022b37 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022b11:	50                   	push   eax
c0022b12:	50                   	push   eax
c0022b13:	6a 00                	push   0x0
c0022b15:	57                   	push   edi
c0022b16:	e8 8e 52 00 00       	call   c0027da9 <__lesf2>
c0022b1b:	83 c4 10             	add    esp,0x10
c0022b1e:	85 c0                	test   eax,eax
c0022b20:	7f 06                	jg     c0022b28 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022b22:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022b26:	eb 0f                	jmp    c0022b37 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022b28:	83 ec 0c             	sub    esp,0xc
c0022b2b:	57                   	push   edi
c0022b2c:	e8 8b 63 00 00       	call   c0028ebc <lrintf>
c0022b31:	83 c4 10             	add    esp,0x10
c0022b34:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022b37:	43                   	inc    ebx
c0022b38:	e9 2b ff ff ff       	jmp    c0022a68 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022b3d:	83 c4 10             	add    esp,0x10
c0022b40:	5b                   	pop    ebx
c0022b41:	5e                   	pop    esi
c0022b42:	5f                   	pop    edi
c0022b43:	c3                   	ret    

c0022b44 <SoundDevice::getAudio(int, float*, float*)>:
c0022b44:	55                   	push   ebp
c0022b45:	57                   	push   edi
c0022b46:	56                   	push   esi
c0022b47:	53                   	push   ebx
c0022b48:	83 ec 28             	sub    esp,0x28
c0022b4b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0022b4f:	68 d0 d2 02 c0       	push   0xc002d2d0
c0022b54:	e8 9e fd fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0022b59:	59                   	pop    ecx
c0022b5a:	5e                   	pop    esi
c0022b5b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022b5f:	68 e7 d2 02 c0       	push   0xc002d2e7
c0022b64:	e8 8e fd fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0022b69:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0022b6d:	83 c4 0c             	add    esp,0xc
c0022b70:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
c0022b77:	56                   	push   esi
c0022b78:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022b7c:	68 09 d3 02 c0       	push   0xc002d309
c0022b81:	e8 71 fd fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0022b86:	83 c4 0c             	add    esp,0xc
c0022b89:	56                   	push   esi
c0022b8a:	31 f6                	xor    esi,esi
c0022b8c:	6a 00                	push   0x0
c0022b8e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022b92:	e8 b9 db fd ff       	call   c0000750 <memset>
c0022b97:	83 c4 10             	add    esp,0x10
c0022b9a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022ba2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022baa:	8b 84 b3 5c 01 00 00 	mov    eax,DWORD PTR [ebx+esi*4+0x15c]
c0022bb1:	85 c0                	test   eax,eax
c0022bb3:	0f 84 d7 00 00 00    	je     c0022c90 <SoundDevice::getAudio(int, float*, float*)+0x14c>
c0022bb9:	83 ec 0c             	sub    esp,0xc
c0022bbc:	50                   	push   eax
c0022bbd:	e8 a8 f9 ff ff       	call   c002256a <SoundChannel::getBufferSize()>
c0022bc2:	5f                   	pop    edi
c0022bc3:	5d                   	pop    ebp
c0022bc4:	50                   	push   eax
c0022bc5:	68 2d d3 02 c0       	push   0xc002d32d
c0022bca:	e8 28 fd fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0022bcf:	58                   	pop    eax
c0022bd0:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022bd7:	e8 86 f9 ff ff       	call   c0022562 <SoundChannel::getBufferUsed()>
c0022bdc:	5a                   	pop    edx
c0022bdd:	59                   	pop    ecx
c0022bde:	50                   	push   eax
c0022bdf:	68 40 d3 02 c0       	push   0xc002d340
c0022be4:	e8 0e fd fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0022be9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0022bed:	99                   	cdq    
c0022bee:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022bf4:	50                   	push   eax
c0022bf5:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022bfb:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022bff:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022c06:	e8 67 f9 ff ff       	call   c0022572 <SoundChannel::unbuffer(float*, int, int)>
c0022c0b:	83 c4 14             	add    esp,0x14
c0022c0e:	89 c5                	mov    ebp,eax
c0022c10:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022c17:	e8 46 f9 ff ff       	call   c0022562 <SoundChannel::getBufferUsed()>
c0022c1c:	5f                   	pop    edi
c0022c1d:	5a                   	pop    edx
c0022c1e:	50                   	push   eax
c0022c1f:	68 58 d3 02 c0       	push   0xc002d358
c0022c24:	e8 ce fc fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0022c29:	56                   	push   esi
c0022c2a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022c2e:	99                   	cdq    
c0022c2f:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022c35:	50                   	push   eax
c0022c36:	55                   	push   ebp
c0022c37:	68 70 d3 02 c0       	push   0xc002d370
c0022c3c:	e8 b6 fc fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0022c41:	83 c4 20             	add    esp,0x20
c0022c44:	31 c0                	xor    eax,eax
c0022c46:	39 e8                	cmp    eax,ebp
c0022c48:	7d 1e                	jge    c0022c68 <SoundDevice::getAudio(int, float*, float*)+0x124>
c0022c4a:	8b 93 58 01 00 00    	mov    edx,DWORD PTR [ebx+0x158]
c0022c50:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022c54:	0f af d0             	imul   edx,eax
c0022c57:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c0022c5a:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
c0022c5e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022c62:	40                   	inc    eax
c0022c63:	89 0c 97             	mov    DWORD PTR [edi+edx*4],ecx
c0022c66:	eb de                	jmp    c0022c46 <SoundDevice::getAudio(int, float*, float*)+0x102>
c0022c68:	50                   	push   eax
c0022c69:	50                   	push   eax
c0022c6a:	55                   	push   ebp
c0022c6b:	68 9d d3 02 c0       	push   0xc002d39d
c0022c70:	e8 82 fc fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0022c75:	01 6c 24 18          	add    DWORD PTR [esp+0x18],ebp
c0022c79:	5a                   	pop    edx
c0022c7a:	59                   	pop    ecx
c0022c7b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022c7f:	68 ae d3 02 c0       	push   0xc002d3ae
c0022c84:	e8 6e fc fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0022c89:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0022c8d:	83 c4 10             	add    esp,0x10
c0022c90:	46                   	inc    esi
c0022c91:	83 fe 20             	cmp    esi,0x20
c0022c94:	0f 85 10 ff ff ff    	jne    c0022baa <SoundDevice::getAudio(int, float*, float*)+0x66>
c0022c9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022c9e:	83 c4 1c             	add    esp,0x1c
c0022ca1:	5b                   	pop    ebx
c0022ca2:	5e                   	pop    esi
c0022ca3:	5f                   	pop    edi
c0022ca4:	5d                   	pop    ebp
c0022ca5:	c3                   	ret    

c0022ca6 <PCI::open(int, int, void*)>:
c0022ca6:	83 ec 18             	sub    esp,0x18
c0022ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022cad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022cb1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022cb7:	8b 10                	mov    edx,DWORD PTR [eax]
c0022cb9:	50                   	push   eax
c0022cba:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022cbd:	31 c0                	xor    eax,eax
c0022cbf:	83 c4 1c             	add    esp,0x1c
c0022cc2:	c3                   	ret    
c0022cc3:	90                   	nop

c0022cc4 <PCI::close(int, int, void*)>:
c0022cc4:	31 c0                	xor    eax,eax
c0022cc6:	c3                   	ret    
c0022cc7:	90                   	nop

c0022cc8 <PCI::PCI()>:
c0022cc8:	83 ec 0c             	sub    esp,0xc
c0022ccb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ccf:	83 ec 08             	sub    esp,0x8
c0022cd2:	68 fc d3 02 c0       	push   0xc002d3fc
c0022cd7:	50                   	push   eax
c0022cd8:	e8 bb 08 ff ff       	call   c0013598 <Bus::Bus(char const*)>
c0022cdd:	83 c4 10             	add    esp,0x10
c0022ce0:	ba 10 d5 02 c0       	mov    edx,0xc002d510
c0022ce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ce9:	89 10                	mov    DWORD PTR [eax],edx
c0022ceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cef:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022cf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cfd:	a3 64 33 03 c0       	mov    ds:0xc0033364,eax
c0022d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d06:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022d0c:	0f b6 d0             	movzx  edx,al
c0022d0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d13:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022d1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d1e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022d24:	0f b6 d0             	movzx  edx,al
c0022d27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d2b:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022d3a:	8d 50 01             	lea    edx,[eax+0x1]
c0022d3d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022d41:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022d47:	0f b6 d0             	movzx  edx,al
c0022d4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d4e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022d52:	83 c9 c0             	or     ecx,0xffffffc0
c0022d55:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022d59:	90                   	nop
c0022d5a:	83 c4 0c             	add    esp,0xc
c0022d5d:	c3                   	ret    

c0022d5e <PCI::readBAR8(unsigned int, int)>:
c0022d5e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022d62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022d66:	f6 c2 01             	test   dl,0x1
c0022d69:	74 07                	je     c0022d72 <PCI::readBAR8(unsigned int, int)+0x14>
c0022d6b:	83 e2 fc             	and    edx,0xfffffffc
c0022d6e:	01 c2                	add    edx,eax
c0022d70:	ec                   	in     al,dx
c0022d71:	c3                   	ret    
c0022d72:	83 e2 f0             	and    edx,0xfffffff0
c0022d75:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022d78:	c3                   	ret    
c0022d79:	90                   	nop

c0022d7a <PCI::readBAR16(unsigned int, int)>:
c0022d7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022d7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022d82:	f6 c2 01             	test   dl,0x1
c0022d85:	74 08                	je     c0022d8f <PCI::readBAR16(unsigned int, int)+0x15>
c0022d87:	83 e2 fc             	and    edx,0xfffffffc
c0022d8a:	01 c2                	add    edx,eax
c0022d8c:	66 ed                	in     ax,dx
c0022d8e:	c3                   	ret    
c0022d8f:	83 e2 f0             	and    edx,0xfffffff0
c0022d92:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022d96:	c3                   	ret    
c0022d97:	90                   	nop

c0022d98 <PCI::readBAR32(unsigned int, int)>:
c0022d98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022d9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022da0:	f6 c2 01             	test   dl,0x1
c0022da3:	74 07                	je     c0022dac <PCI::readBAR32(unsigned int, int)+0x14>
c0022da5:	83 e2 fc             	and    edx,0xfffffffc
c0022da8:	01 c2                	add    edx,eax
c0022daa:	ed                   	in     eax,dx
c0022dab:	c3                   	ret    
c0022dac:	83 e2 f0             	and    edx,0xfffffff0
c0022daf:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022db2:	c3                   	ret    
c0022db3:	90                   	nop

c0022db4 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022db4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022db8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022dbc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022dc0:	f6 c2 01             	test   dl,0x1
c0022dc3:	74 07                	je     c0022dcc <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022dc5:	83 e2 fc             	and    edx,0xfffffffc
c0022dc8:	01 ca                	add    edx,ecx
c0022dca:	ee                   	out    dx,al
c0022dcb:	c3                   	ret    
c0022dcc:	83 e2 f0             	and    edx,0xfffffff0
c0022dcf:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022dd2:	c3                   	ret    
c0022dd3:	90                   	nop

c0022dd4 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022dd4:	57                   	push   edi
c0022dd5:	56                   	push   esi
c0022dd6:	53                   	push   ebx
c0022dd7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022ddb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022ddf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022de3:	f6 c2 01             	test   dl,0x1
c0022de6:	74 24                	je     c0022e0c <PCI::writeBAR16(unsigned int, unsigned short, int)+0x38>
c0022de8:	89 d3                	mov    ebx,edx
c0022dea:	83 e3 fc             	and    ebx,0xfffffffc
c0022ded:	50                   	push   eax
c0022dee:	0f b7 c7             	movzx  eax,di
c0022df1:	50                   	push   eax
c0022df2:	8d 04 33             	lea    eax,[ebx+esi*1]
c0022df5:	50                   	push   eax
c0022df6:	68 04 d4 02 c0       	push   0xc002d404
c0022dfb:	e8 f7 fa fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0022e00:	8d 14 33             	lea    edx,[ebx+esi*1]
c0022e03:	89 f8                	mov    eax,edi
c0022e05:	66 ef                	out    dx,ax
c0022e07:	83 c4 10             	add    esp,0x10
c0022e0a:	eb 07                	jmp    c0022e13 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x3f>
c0022e0c:	83 e2 f0             	and    edx,0xfffffff0
c0022e0f:	66 89 3c 32          	mov    WORD PTR [edx+esi*1],di
c0022e13:	5b                   	pop    ebx
c0022e14:	5e                   	pop    esi
c0022e15:	5f                   	pop    edi
c0022e16:	c3                   	ret    
c0022e17:	90                   	nop

c0022e18 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022e18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022e1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e20:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022e24:	f6 c2 01             	test   dl,0x1
c0022e27:	74 07                	je     c0022e30 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022e29:	83 e2 fc             	and    edx,0xfffffffc
c0022e2c:	01 ca                	add    edx,ecx
c0022e2e:	ef                   	out    dx,eax
c0022e2f:	c3                   	ret    
c0022e30:	83 e2 f0             	and    edx,0xfffffff0
c0022e33:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022e36:	c3                   	ret    
c0022e37:	90                   	nop

c0022e38 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022e38:	55                   	push   ebp
c0022e39:	57                   	push   edi
c0022e3a:	56                   	push   esi
c0022e3b:	53                   	push   ebx
c0022e3c:	83 ec 0c             	sub    esp,0xc
c0022e3f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022e43:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0022e47:	89 f0                	mov    eax,esi
c0022e49:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022e4d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022e51:	3c 07                	cmp    al,0x7
c0022e53:	76 10                	jbe    c0022e65 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0022e55:	83 ec 0c             	sub    esp,0xc
c0022e58:	68 1b d4 02 c0       	push   0xc002d41b
c0022e5d:	e8 cb 74 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c0022e62:	83 c4 10             	add    esp,0x10
c0022e65:	80 fb 0f             	cmp    bl,0xf
c0022e68:	76 10                	jbe    c0022e7a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0022e6a:	83 ec 0c             	sub    esp,0xc
c0022e6d:	68 4b d4 02 c0       	push   0xc002d44b
c0022e72:	e8 b6 74 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c0022e77:	83 c4 10             	add    esp,0x10
c0022e7a:	8d 04 36             	lea    eax,[esi+esi*1]
c0022e7d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022e82:	83 c8 f0             	or     eax,0xfffffff0
c0022e85:	ee                   	out    dx,al
c0022e86:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022e8b:	89 e8                	mov    eax,ebp
c0022e8d:	ee                   	out    dx,al
c0022e8e:	83 c4 0c             	add    esp,0xc
c0022e91:	89 d8                	mov    eax,ebx
c0022e93:	66 81 e7 fc 00       	and    di,0xfc
c0022e98:	5b                   	pop    ebx
c0022e99:	c1 e0 08             	shl    eax,0x8
c0022e9c:	5e                   	pop    esi
c0022e9d:	09 f8                	or     eax,edi
c0022e9f:	5f                   	pop    edi
c0022ea0:	66 0d 00 c0          	or     ax,0xc000
c0022ea4:	5d                   	pop    ebp
c0022ea5:	c3                   	ret    

c0022ea6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022ea6:	57                   	push   edi
c0022ea7:	56                   	push   esi
c0022ea8:	53                   	push   ebx
c0022ea9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022ead:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022eb1:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022eb7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022ebb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022ebf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022ec3:	83 ff 01             	cmp    edi,0x1
c0022ec6:	75 3e                	jne    c0022f06 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022ec8:	89 de                	mov    esi,ebx
c0022eca:	0f b6 c0             	movzx  eax,al
c0022ecd:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022ed3:	c1 e0 10             	shl    eax,0x10
c0022ed6:	0f b6 c9             	movzx  ecx,cl
c0022ed9:	09 f0                	or     eax,esi
c0022edb:	c1 e1 08             	shl    ecx,0x8
c0022ede:	0f b6 d2             	movzx  edx,dl
c0022ee1:	09 c8                	or     eax,ecx
c0022ee3:	c1 e2 0b             	shl    edx,0xb
c0022ee6:	09 d0                	or     eax,edx
c0022ee8:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022eed:	0d 00 00 00 80       	or     eax,0x80000000
c0022ef2:	ef                   	out    dx,eax
c0022ef3:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022ef8:	ed                   	in     eax,dx
c0022ef9:	83 e3 02             	and    ebx,0x2
c0022efc:	0f b6 cb             	movzx  ecx,bl
c0022eff:	c1 e1 03             	shl    ecx,0x3
c0022f02:	d3 e8                	shr    eax,cl
c0022f04:	eb 43                	jmp    c0022f49 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022f06:	83 ff 02             	cmp    edi,0x2
c0022f09:	75 2c                	jne    c0022f37 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022f0b:	83 ec 0c             	sub    esp,0xc
c0022f0e:	0f b6 c9             	movzx  ecx,cl
c0022f11:	0f b6 d2             	movzx  edx,dl
c0022f14:	0f b6 fb             	movzx  edi,bl
c0022f17:	0f b6 c0             	movzx  eax,al
c0022f1a:	57                   	push   edi
c0022f1b:	51                   	push   ecx
c0022f1c:	52                   	push   edx
c0022f1d:	50                   	push   eax
c0022f1e:	56                   	push   esi
c0022f1f:	e8 14 ff ff ff       	call   c0022e38 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f24:	89 c2                	mov    edx,eax
c0022f26:	ed                   	in     eax,dx
c0022f27:	83 e3 02             	and    ebx,0x2
c0022f2a:	83 c4 20             	add    esp,0x20
c0022f2d:	0f b6 cb             	movzx  ecx,bl
c0022f30:	c1 e1 03             	shl    ecx,0x3
c0022f33:	d3 e8                	shr    eax,cl
c0022f35:	eb 12                	jmp    c0022f49 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022f37:	83 ec 0c             	sub    esp,0xc
c0022f3a:	68 7b d4 02 c0       	push   0xc002d47b
c0022f3f:	e8 e9 73 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c0022f44:	83 c4 10             	add    esp,0x10
c0022f47:	31 c0                	xor    eax,eax
c0022f49:	5b                   	pop    ebx
c0022f4a:	5e                   	pop    esi
c0022f4b:	5f                   	pop    edi
c0022f4c:	c3                   	ret    
c0022f4d:	90                   	nop

c0022f4e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022f4e:	83 ec 18             	sub    esp,0x18
c0022f51:	6a 00                	push   0x0
c0022f53:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f58:	50                   	push   eax
c0022f59:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f5e:	50                   	push   eax
c0022f5f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f64:	50                   	push   eax
c0022f65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f69:	e8 38 ff ff ff       	call   c0022ea6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f6e:	83 c4 2c             	add    esp,0x2c
c0022f71:	c3                   	ret    

c0022f72 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022f72:	83 ec 18             	sub    esp,0x18
c0022f75:	6a 0e                	push   0xe
c0022f77:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f7c:	50                   	push   eax
c0022f7d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f82:	50                   	push   eax
c0022f83:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f88:	50                   	push   eax
c0022f89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f8d:	e8 14 ff ff ff       	call   c0022ea6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f92:	83 c4 2c             	add    esp,0x2c
c0022f95:	0f b6 c0             	movzx  eax,al
c0022f98:	c3                   	ret    
c0022f99:	90                   	nop

c0022f9a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022f9a:	55                   	push   ebp
c0022f9b:	57                   	push   edi
c0022f9c:	56                   	push   esi
c0022f9d:	53                   	push   ebx
c0022f9e:	83 ec 18             	sub    esp,0x18
c0022fa1:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022fa6:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022fab:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022fb0:	6a 0a                	push   0xa
c0022fb2:	56                   	push   esi
c0022fb3:	55                   	push   ebp
c0022fb4:	57                   	push   edi
c0022fb5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022fb9:	e8 e8 fe ff ff       	call   c0022ea6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022fbe:	83 c4 14             	add    esp,0x14
c0022fc1:	89 c3                	mov    ebx,eax
c0022fc3:	6a 0a                	push   0xa
c0022fc5:	0f b6 db             	movzx  ebx,bl
c0022fc8:	56                   	push   esi
c0022fc9:	55                   	push   ebp
c0022fca:	57                   	push   edi
c0022fcb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022fcf:	e8 d2 fe ff ff       	call   c0022ea6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022fd4:	83 c4 2c             	add    esp,0x2c
c0022fd7:	25 00 ff 00 00       	and    eax,0xff00
c0022fdc:	09 d8                	or     eax,ebx
c0022fde:	5b                   	pop    ebx
c0022fdf:	5e                   	pop    esi
c0022fe0:	5f                   	pop    edi
c0022fe1:	5d                   	pop    ebp
c0022fe2:	c3                   	ret    
c0022fe3:	90                   	nop

c0022fe4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022fe4:	83 ec 18             	sub    esp,0x18
c0022fe7:	6a 08                	push   0x8
c0022fe9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fee:	50                   	push   eax
c0022fef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ff4:	50                   	push   eax
c0022ff5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ffa:	50                   	push   eax
c0022ffb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022fff:	e8 a2 fe ff ff       	call   c0022ea6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023004:	83 c4 2c             	add    esp,0x2c
c0023007:	0f b6 c4             	movzx  eax,ah
c002300a:	c3                   	ret    
c002300b:	90                   	nop

c002300c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002300c:	83 ec 18             	sub    esp,0x18
c002300f:	6a 08                	push   0x8
c0023011:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023016:	50                   	push   eax
c0023017:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002301c:	50                   	push   eax
c002301d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023022:	50                   	push   eax
c0023023:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023027:	e8 7a fe ff ff       	call   c0022ea6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002302c:	83 c4 2c             	add    esp,0x2c
c002302f:	c3                   	ret    

c0023030 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0023030:	83 ec 18             	sub    esp,0x18
c0023033:	6a 3c                	push   0x3c
c0023035:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002303a:	50                   	push   eax
c002303b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023040:	50                   	push   eax
c0023041:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023046:	50                   	push   eax
c0023047:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002304b:	e8 56 fe ff ff       	call   c0022ea6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023050:	83 c4 2c             	add    esp,0x2c
c0023053:	c3                   	ret    

c0023054 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0023054:	83 ec 18             	sub    esp,0x18
c0023057:	6a 18                	push   0x18
c0023059:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002305e:	50                   	push   eax
c002305f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023064:	50                   	push   eax
c0023065:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002306a:	50                   	push   eax
c002306b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002306f:	e8 32 fe ff ff       	call   c0022ea6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023074:	83 c4 2c             	add    esp,0x2c
c0023077:	0f b6 c4             	movzx  eax,ah
c002307a:	c3                   	ret    
c002307b:	90                   	nop

c002307c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002307c:	55                   	push   ebp
c002307d:	57                   	push   edi
c002307e:	56                   	push   esi
c002307f:	53                   	push   ebx
c0023080:	83 ec 28             	sub    esp,0x28
c0023083:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0023087:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002308c:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0023091:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0023096:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002309d:	8d 43 12             	lea    eax,[ebx+0x12]
c00230a0:	83 c3 10             	add    ebx,0x10
c00230a3:	0f b6 c0             	movzx  eax,al
c00230a6:	0f b6 db             	movzx  ebx,bl
c00230a9:	50                   	push   eax
c00230aa:	51                   	push   ecx
c00230ab:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00230af:	57                   	push   edi
c00230b0:	55                   	push   ebp
c00230b1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00230b5:	e8 ec fd ff ff       	call   c0022ea6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00230ba:	83 c4 14             	add    esp,0x14
c00230bd:	89 c6                	mov    esi,eax
c00230bf:	53                   	push   ebx
c00230c0:	c1 e6 10             	shl    esi,0x10
c00230c3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00230c7:	51                   	push   ecx
c00230c8:	57                   	push   edi
c00230c9:	55                   	push   ebp
c00230ca:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00230ce:	e8 d3 fd ff ff       	call   c0022ea6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00230d3:	83 c4 3c             	add    esp,0x3c
c00230d6:	0f b7 c0             	movzx  eax,ax
c00230d9:	5b                   	pop    ebx
c00230da:	09 f0                	or     eax,esi
c00230dc:	5e                   	pop    esi
c00230dd:	5f                   	pop    edi
c00230de:	5d                   	pop    ebp
c00230df:	c3                   	ret    

c00230e0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00230e0:	55                   	push   ebp
c00230e1:	57                   	push   edi
c00230e2:	56                   	push   esi
c00230e3:	53                   	push   ebx
c00230e4:	83 ec 0c             	sub    esp,0xc
c00230e7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00230eb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00230ef:	89 f5                	mov    ebp,esi
c00230f1:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00230f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00230fb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00230ff:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023103:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023107:	83 f9 01             	cmp    ecx,0x1
c002310a:	75 5d                	jne    c0023169 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c002310c:	0f b6 c8             	movzx  ecx,al
c002310f:	0f b6 d2             	movzx  edx,dl
c0023112:	c1 e1 10             	shl    ecx,0x10
c0023115:	c1 e2 0b             	shl    edx,0xb
c0023118:	89 f0                	mov    eax,esi
c002311a:	25 fc 00 00 00       	and    eax,0xfc
c002311f:	09 c1                	or     ecx,eax
c0023121:	89 e8                	mov    eax,ebp
c0023123:	0f b6 c0             	movzx  eax,al
c0023126:	c1 e0 08             	shl    eax,0x8
c0023129:	09 c1                	or     ecx,eax
c002312b:	09 d1                	or     ecx,edx
c002312d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023132:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0023138:	89 c8                	mov    eax,ecx
c002313a:	ef                   	out    dx,eax
c002313b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023140:	ed                   	in     eax,dx
c0023141:	0f b7 db             	movzx  ebx,bx
c0023144:	83 e6 02             	and    esi,0x2
c0023147:	74 0a                	je     c0023153 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0023149:	0f b7 d0             	movzx  edx,ax
c002314c:	c1 e3 10             	shl    ebx,0x10
c002314f:	09 d3                	or     ebx,edx
c0023151:	eb 05                	jmp    c0023158 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0023153:	66 31 c0             	xor    ax,ax
c0023156:	09 c3                	or     ebx,eax
c0023158:	ba f8 0c 00 00       	mov    edx,0xcf8
c002315d:	89 c8                	mov    eax,ecx
c002315f:	ef                   	out    dx,eax
c0023160:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023165:	89 d8                	mov    eax,ebx
c0023167:	eb 41                	jmp    c00231aa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0023169:	83 f9 02             	cmp    ecx,0x2
c002316c:	75 45                	jne    c00231b3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c002316e:	83 ec 0c             	sub    esp,0xc
c0023171:	0f b6 d2             	movzx  edx,dl
c0023174:	89 f1                	mov    ecx,esi
c0023176:	0f b6 c0             	movzx  eax,al
c0023179:	0f b6 f1             	movzx  esi,cl
c002317c:	89 e9                	mov    ecx,ebp
c002317e:	56                   	push   esi
c002317f:	0f b6 c9             	movzx  ecx,cl
c0023182:	51                   	push   ecx
c0023183:	52                   	push   edx
c0023184:	50                   	push   eax
c0023185:	57                   	push   edi
c0023186:	e8 ad fc ff ff       	call   c0022e38 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002318b:	89 c2                	mov    edx,eax
c002318d:	ed                   	in     eax,dx
c002318e:	83 c4 20             	add    esp,0x20
c0023191:	0f b7 db             	movzx  ebx,bx
c0023194:	f6 c2 02             	test   dl,0x2
c0023197:	74 0c                	je     c00231a5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0023199:	0f b7 c8             	movzx  ecx,ax
c002319c:	89 d8                	mov    eax,ebx
c002319e:	c1 e0 10             	shl    eax,0x10
c00231a1:	09 c8                	or     eax,ecx
c00231a3:	eb 05                	jmp    c00231aa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00231a5:	66 31 c0             	xor    ax,ax
c00231a8:	09 d8                	or     eax,ebx
c00231aa:	ef                   	out    dx,eax
c00231ab:	83 c4 0c             	add    esp,0xc
c00231ae:	5b                   	pop    ebx
c00231af:	5e                   	pop    esi
c00231b0:	5f                   	pop    edi
c00231b1:	5d                   	pop    ebp
c00231b2:	c3                   	ret    
c00231b3:	c7 44 24 20 7b d4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002d47b
c00231bb:	83 c4 0c             	add    esp,0xc
c00231be:	5b                   	pop    ebx
c00231bf:	5e                   	pop    esi
c00231c0:	5f                   	pop    edi
c00231c1:	5d                   	pop    ebp
c00231c2:	e9 66 71 ff ff       	jmp    c001a32d <Krnl::panic(char const*)>
c00231c7:	90                   	nop

c00231c8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00231c8:	55                   	push   ebp
c00231c9:	57                   	push   edi
c00231ca:	56                   	push   esi
c00231cb:	53                   	push   ebx
c00231cc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00231d2:	80 3d 70 33 03 c0 00 	cmp    BYTE PTR ds:0xc0033370,0x0
c00231d9:	0f 85 96 00 00 00    	jne    c0023275 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xad>
c00231df:	83 ec 0c             	sub    esp,0xc
c00231e2:	68 14 01 00 00       	push   0x114
c00231e7:	e8 a0 c6 fe ff       	call   c000f88c <malloc>
c00231ec:	83 c4 0c             	add    esp,0xc
c00231ef:	89 c3                	mov    ebx,eax
c00231f1:	ff 35 70 25 03 c0    	push   DWORD PTR ds:0xc0032570
c00231f7:	68 81 d4 02 c0       	push   0xc002d481
c00231fc:	50                   	push   eax
c00231fd:	e8 54 fc fe ff       	call   c0012e56 <File::File(char const*, Process*)>
c0023202:	5a                   	pop    edx
c0023203:	59                   	pop    ecx
c0023204:	6a 01                	push   0x1
c0023206:	53                   	push   ebx
c0023207:	e8 ae fc fe ff       	call   c0012eba <File::open(FileOpenMode)>
c002320c:	83 c4 0c             	add    esp,0xc
c002320f:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0023213:	50                   	push   eax
c0023214:	8d 44 24 28          	lea    eax,[esp+0x28]
c0023218:	50                   	push   eax
c0023219:	53                   	push   ebx
c002321a:	e8 47 ff fe ff       	call   c0013166 <File::stat(unsigned long long*, bool*)>
c002321f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023223:	40                   	inc    eax
c0023224:	89 04 24             	mov    DWORD PTR [esp],eax
c0023227:	e8 60 c6 fe ff       	call   c000f88c <malloc>
c002322c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023230:	a3 6c 33 03 c0       	mov    ds:0xc003336c,eax
c0023235:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0023239:	5e                   	pop    esi
c002323a:	8b 13                	mov    edx,DWORD PTR [ebx]
c002323c:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0023240:	51                   	push   ecx
c0023241:	50                   	push   eax
c0023242:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0023246:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002324a:	53                   	push   ebx
c002324b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002324e:	83 c4 14             	add    esp,0x14
c0023251:	53                   	push   ebx
c0023252:	e8 c1 fc fe ff       	call   c0012f18 <File::close()>
c0023257:	5f                   	pop    edi
c0023258:	5d                   	pop    ebp
c0023259:	ff 35 6c 33 03 c0    	push   DWORD PTR ds:0xc003336c
c002325f:	68 9a d4 02 c0       	push   0xc002d49a
c0023264:	e8 8e f6 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0023269:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002326d:	83 c4 10             	add    esp,0x10
c0023270:	a3 68 33 03 c0       	mov    ds:0xc0033368,eax
c0023275:	a1 68 33 03 c0       	mov    eax,ds:0xc0033368
c002327a:	8b 15 6c 33 03 c0    	mov    edx,DWORD PTR ds:0xc003336c
c0023280:	89 04 24             	mov    DWORD PTR [esp],eax
c0023283:	31 ff                	xor    edi,edi
c0023285:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c002328d:	31 f6                	xor    esi,esi
c002328f:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0023294:	31 db                	xor    ebx,ebx
c0023296:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002329e:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00232a3:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c00232aa:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00232ae:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c00232b5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00232b9:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00232bc:	0f 8e 6b 01 00 00    	jle    c002342d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c00232c2:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00232c5:	d4 40                	aam    0x40
c00232c7:	d5 39                	aad    0x39
c00232c9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00232cd:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c00232d1:	d4 40                	aam    0x40
c00232d3:	d5 39                	aad    0x39
c00232d5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00232d9:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c00232dd:	d4 40                	aam    0x40
c00232df:	d5 39                	aad    0x39
c00232e1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00232e5:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c00232e9:	d4 40                	aam    0x40
c00232eb:	d5 39                	aad    0x39
c00232ed:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00232f1:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c00232f5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00232f9:	3c 56                	cmp    al,0x56
c00232fb:	74 45                	je     c0023342 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x17a>
c00232fd:	d4 40                	aam    0x40
c00232ff:	d5 39                	aad    0x39
c0023301:	8d 48 d0             	lea    ecx,[eax-0x30]
c0023304:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0023308:	0f b6 c9             	movzx  ecx,cl
c002330b:	c1 e1 04             	shl    ecx,0x4
c002330e:	d4 40                	aam    0x40
c0023310:	d5 39                	aad    0x39
c0023312:	8d 58 d0             	lea    ebx,[eax-0x30]
c0023315:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0023319:	0f b6 db             	movzx  ebx,bl
c002331c:	09 cb                	or     ebx,ecx
c002331e:	c1 e3 04             	shl    ebx,0x4
c0023321:	d4 40                	aam    0x40
c0023323:	d5 39                	aad    0x39
c0023325:	8d 48 d0             	lea    ecx,[eax-0x30]
c0023328:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c002332c:	0f b6 c9             	movzx  ecx,cl
c002332f:	09 cb                	or     ebx,ecx
c0023331:	c1 e3 04             	shl    ebx,0x4
c0023334:	89 d9                	mov    ecx,ebx
c0023336:	d4 40                	aam    0x40
c0023338:	d5 39                	aad    0x39
c002333a:	8d 58 d0             	lea    ebx,[eax-0x30]
c002333d:	0f b6 db             	movzx  ebx,bl
c0023340:	09 cb                	or     ebx,ecx
c0023342:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0023346:	80 f9 44             	cmp    cl,0x44
c0023349:	74 47                	je     c0023392 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ca>
c002334b:	88 c8                	mov    al,cl
c002334d:	d4 40                	aam    0x40
c002334f:	d5 39                	aad    0x39
c0023351:	83 e8 30             	sub    eax,0x30
c0023354:	0f b6 e8             	movzx  ebp,al
c0023357:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c002335b:	c1 e5 04             	shl    ebp,0x4
c002335e:	d4 40                	aam    0x40
c0023360:	d5 39                	aad    0x39
c0023362:	83 e8 30             	sub    eax,0x30
c0023365:	0f b6 f0             	movzx  esi,al
c0023368:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c002336c:	09 ee                	or     esi,ebp
c002336e:	c1 e6 04             	shl    esi,0x4
c0023371:	d4 40                	aam    0x40
c0023373:	d5 39                	aad    0x39
c0023375:	83 e8 30             	sub    eax,0x30
c0023378:	0f b6 e8             	movzx  ebp,al
c002337b:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c002337f:	09 ee                	or     esi,ebp
c0023381:	c1 e6 04             	shl    esi,0x4
c0023384:	89 f5                	mov    ebp,esi
c0023386:	d4 40                	aam    0x40
c0023388:	d5 39                	aad    0x39
c002338a:	83 e8 30             	sub    eax,0x30
c002338d:	0f b6 f0             	movzx  esi,al
c0023390:	09 ee                	or     esi,ebp
c0023392:	83 c7 10             	add    edi,0x10
c0023395:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0023399:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c002339c:	3c 0a                	cmp    al,0xa
c002339e:	74 09                	je     c00233a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e1>
c00233a0:	45                   	inc    ebp
c00233a1:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00233a4:	75 16                	jne    c00233bc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f4>
c00233a6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00233a9:	3c 0a                	cmp    al,0xa
c00233ab:	0f 94 c0             	sete   al
c00233ae:	0f b6 c0             	movzx  eax,al
c00233b1:	01 c7                	add    edi,eax
c00233b3:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c00233b8:	75 0c                	jne    c00233c6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1fe>
c00233ba:	eb 15                	jmp    c00233d1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c00233bc:	47                   	inc    edi
c00233bd:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c00233c0:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00233c4:	eb d3                	jmp    c0023399 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1d1>
c00233c6:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c00233cb:	0f 85 e8 fe ff ff    	jne    c00232b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00233d1:	80 f9 44             	cmp    cl,0x44
c00233d4:	74 0b                	je     c00233e1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x219>
c00233d6:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c00233db:	0f 85 d8 fe ff ff    	jne    c00232b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00233e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00233e5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00233e9:	c1 e1 04             	shl    ecx,0x4
c00233ec:	83 e8 30             	sub    eax,0x30
c00233ef:	09 c8                	or     eax,ecx
c00233f1:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c00233f5:	0f 85 be fe ff ff    	jne    c00232b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00233fb:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c00233ff:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023403:	c1 e1 04             	shl    ecx,0x4
c0023406:	83 e8 30             	sub    eax,0x30
c0023409:	09 c8                	or     eax,ecx
c002340b:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c002340f:	0f 85 a4 fe ff ff    	jne    c00232b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c0023415:	50                   	push   eax
c0023416:	50                   	push   eax
c0023417:	8d 44 24 28          	lea    eax,[esp+0x28]
c002341b:	50                   	push   eax
c002341c:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0023423:	e8 e4 d3 fd ff       	call   c000080c <strcpy>
c0023428:	83 c4 10             	add    esp,0x10
c002342b:	eb 15                	jmp    c0023442 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x27a>
c002342d:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0023434:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c002343f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0023442:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0023449:	81 c4 2c 01 00 00    	add    esp,0x12c
c002344f:	5b                   	pop    ebx
c0023450:	5e                   	pop    esi
c0023451:	5f                   	pop    edi
c0023452:	5d                   	pop    ebp
c0023453:	c3                   	ret    

c0023454 <PCI::checkBus(unsigned char)>:
c0023454:	56                   	push   esi
c0023455:	53                   	push   ebx
c0023456:	31 db                	xor    ebx,ebx
c0023458:	51                   	push   ecx
c0023459:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002345e:	52                   	push   edx
c002345f:	53                   	push   ebx
c0023460:	43                   	inc    ebx
c0023461:	56                   	push   esi
c0023462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023466:	e8 37 03 00 00       	call   c00237a2 <PCI::checkDevice(unsigned char, unsigned char)>
c002346b:	83 c4 10             	add    esp,0x10
c002346e:	83 fb 20             	cmp    ebx,0x20
c0023471:	75 eb                	jne    c002345e <PCI::checkBus(unsigned char)+0xa>
c0023473:	58                   	pop    eax
c0023474:	5b                   	pop    ebx
c0023475:	5e                   	pop    esi
c0023476:	c3                   	ret    
c0023477:	90                   	nop

c0023478 <PCI::foundDevice(PCIDeviceInfo)>:
c0023478:	55                   	push   ebp
c0023479:	57                   	push   edi
c002347a:	56                   	push   esi
c002347b:	53                   	push   ebx
c002347c:	83 ec 1c             	sub    esp,0x1c
c002347f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023483:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0023489:	0f 84 52 01 00 00    	je     c00235e1 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c002348f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0023493:	66 81 f9 06 04       	cmp    cx,0x406
c0023498:	75 2c                	jne    c00234c6 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c002349a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002349f:	50                   	push   eax
c00234a0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00234a5:	50                   	push   eax
c00234a6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00234ab:	50                   	push   eax
c00234ac:	56                   	push   esi
c00234ad:	e8 a2 fb ff ff       	call   c0023054 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00234b2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00234b6:	0f b6 c0             	movzx  eax,al
c00234b9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00234bd:	83 c4 2c             	add    esp,0x2c
c00234c0:	5b                   	pop    ebx
c00234c1:	5e                   	pop    esi
c00234c2:	5f                   	pop    edi
c00234c3:	5d                   	pop    ebp
c00234c4:	eb 8e                	jmp    c0023454 <PCI::checkBus(unsigned char)>
c00234c6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00234ca:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00234d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00234d4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00234d8:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00234dc:	88 d3                	mov    bl,dl
c00234de:	85 c0                	test   eax,eax
c00234e0:	74 33                	je     c0023515 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00234e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00234e5:	85 d2                	test   edx,edx
c00234e7:	74 28                	je     c0023511 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00234e9:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00234ef:	31 ef                	xor    edi,ebp
c00234f1:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00234f7:	75 18                	jne    c0023511 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00234f9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00234fd:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0023503:	75 0c                	jne    c0023511 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023505:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c002350b:	0f 84 d0 00 00 00    	je     c00235e1 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0023511:	8b 00                	mov    eax,DWORD PTR [eax]
c0023513:	eb c9                	jmp    c00234de <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0023515:	66 81 f9 01 06       	cmp    cx,0x601
c002351a:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c002351e:	75 19                	jne    c0023539 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0023520:	83 ec 0c             	sub    esp,0xc
c0023523:	68 64 01 00 00       	push   0x164
c0023528:	e8 5f c3 fe ff       	call   c000f88c <malloc>
c002352d:	89 c5                	mov    ebp,eax
c002352f:	89 04 24             	mov    DWORD PTR [esp],eax
c0023532:	e8 a1 0f 00 00       	call   c00244d8 <SATABus::SATABus()>
c0023537:	eb 1e                	jmp    c0023557 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0023539:	66 81 f9 01 01       	cmp    cx,0x101
c002353e:	75 60                	jne    c00235a0 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0023540:	83 ec 0c             	sub    esp,0xc
c0023543:	68 70 02 00 00       	push   0x270
c0023548:	e8 3f c3 fe ff       	call   c000f88c <malloc>
c002354d:	89 c5                	mov    ebp,eax
c002354f:	89 04 24             	mov    DWORD PTR [esp],eax
c0023552:	e8 0f 03 00 00       	call   c0023866 <IDE::IDE()>
c0023557:	58                   	pop    eax
c0023558:	5a                   	pop    edx
c0023559:	55                   	push   ebp
c002355a:	56                   	push   esi
c002355b:	e8 d0 07 ff ff       	call   c0013d30 <Device::addChild(Device*)>
c0023560:	83 ec 1c             	sub    esp,0x1c
c0023563:	b9 09 00 00 00       	mov    ecx,0x9
c0023568:	fc                   	cld    
c0023569:	89 e7                	mov    edi,esp
c002356b:	89 de                	mov    esi,ebx
c002356d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002356f:	55                   	push   ebp
c0023570:	e8 cd 06 ff ff       	call   c0013c42 <Device::preOpenPCI(PCIDeviceInfo)>
c0023575:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023578:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002357c:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0023584:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002358c:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0023594:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023597:	83 c4 4c             	add    esp,0x4c
c002359a:	5b                   	pop    ebx
c002359b:	5e                   	pop    esi
c002359c:	5f                   	pop    edi
c002359d:	5d                   	pop    ebp
c002359e:	ff e0                	jmp    eax
c00235a0:	83 ec 0c             	sub    esp,0xc
c00235a3:	68 58 01 00 00       	push   0x158
c00235a8:	e8 df c2 fe ff       	call   c000f88c <malloc>
c00235ad:	89 c5                	mov    ebp,eax
c00235af:	58                   	pop    eax
c00235b0:	5a                   	pop    edx
c00235b1:	68 ac d4 02 c0       	push   0xc002d4ac
c00235b6:	55                   	push   ebp
c00235b7:	e8 7e 0a ff ff       	call   c001403a <DriverlessDevice::DriverlessDevice(char const*)>
c00235bc:	59                   	pop    ecx
c00235bd:	5f                   	pop    edi
c00235be:	55                   	push   ebp
c00235bf:	56                   	push   esi
c00235c0:	e8 6b 07 ff ff       	call   c0013d30 <Device::addChild(Device*)>
c00235c5:	b9 09 00 00 00       	mov    ecx,0x9
c00235ca:	fc                   	cld    
c00235cb:	89 df                	mov    edi,ebx
c00235cd:	89 de                	mov    esi,ebx
c00235cf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00235d1:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00235d5:	83 c4 2c             	add    esp,0x2c
c00235d8:	5b                   	pop    ebx
c00235d9:	5e                   	pop    esi
c00235da:	5f                   	pop    edi
c00235db:	5d                   	pop    ebp
c00235dc:	e9 61 06 ff ff       	jmp    c0013c42 <Device::preOpenPCI(PCIDeviceInfo)>
c00235e1:	83 c4 1c             	add    esp,0x1c
c00235e4:	5b                   	pop    ebx
c00235e5:	5e                   	pop    esi
c00235e6:	5f                   	pop    edi
c00235e7:	5d                   	pop    ebp
c00235e8:	c3                   	ret    
c00235e9:	90                   	nop

c00235ea <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00235ea:	55                   	push   ebp
c00235eb:	57                   	push   edi
c00235ec:	56                   	push   esi
c00235ed:	53                   	push   ebx
c00235ee:	83 ec 68             	sub    esp,0x68
c00235f1:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c00235f5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00235fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023600:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0023607:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c002360c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023610:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0023617:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c002361c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023620:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0023625:	6a 0c                	push   0xc
c0023627:	57                   	push   edi
c0023628:	53                   	push   ebx
c0023629:	56                   	push   esi
c002362a:	55                   	push   ebp
c002362b:	e8 76 f8 ff ff       	call   c0022ea6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023630:	83 c4 20             	add    esp,0x20
c0023633:	57                   	push   edi
c0023634:	53                   	push   ebx
c0023635:	56                   	push   esi
c0023636:	55                   	push   ebp
c0023637:	e8 5e f9 ff ff       	call   c0022f9a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002363c:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0023641:	57                   	push   edi
c0023642:	53                   	push   ebx
c0023643:	56                   	push   esi
c0023644:	55                   	push   ebp
c0023645:	e8 e6 f9 ff ff       	call   c0023030 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002364a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c002364e:	83 c4 14             	add    esp,0x14
c0023651:	6a 3c                	push   0x3c
c0023653:	57                   	push   edi
c0023654:	53                   	push   ebx
c0023655:	56                   	push   esi
c0023656:	55                   	push   ebp
c0023657:	e8 4a f8 ff ff       	call   c0022ea6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002365c:	0f b6 c4             	movzx  eax,ah
c002365f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0023663:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0023667:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c002366b:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0023670:	83 c4 20             	add    esp,0x20
c0023673:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0023679:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0023680:	74 7c                	je     c00236fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0023682:	31 c0                	xor    eax,eax
c0023684:	8b 15 28 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f028
c002368a:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023690:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0023696:	7e 66                	jle    c00236fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0023698:	8d 14 c2             	lea    edx,[edx+eax*8]
c002369b:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00236a2:	39 cb                	cmp    ebx,ecx
c00236a4:	75 55                	jne    c00236fb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c00236a6:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00236ad:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00236b1:	75 48                	jne    c00236fb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c00236b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00236b7:	83 ec 0c             	sub    esp,0xc
c00236ba:	68 c6 d4 02 c0       	push   0xc002d4c6
c00236bf:	e8 33 f2 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00236c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00236c8:	8b 15 28 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f028
c00236ce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00236d2:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00236d8:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c00236e0:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c00236e4:	52                   	push   edx
c00236e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00236e9:	53                   	push   ebx
c00236ea:	68 eb d4 02 c0       	push   0xc002d4eb
c00236ef:	e8 03 f2 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00236f4:	83 c4 20             	add    esp,0x20
c00236f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00236fb:	40                   	inc    eax
c00236fc:	eb 86                	jmp    c0023684 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c00236fe:	31 d2                	xor    edx,edx
c0023700:	83 ec 0c             	sub    esp,0xc
c0023703:	57                   	push   edi
c0023704:	53                   	push   ebx
c0023705:	56                   	push   esi
c0023706:	52                   	push   edx
c0023707:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002370b:	55                   	push   ebp
c002370c:	e8 6b f9 ff ff       	call   c002307c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023711:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0023715:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0023719:	42                   	inc    edx
c002371a:	83 c4 20             	add    esp,0x20
c002371d:	83 fa 06             	cmp    edx,0x6
c0023720:	75 de                	jne    c0023700 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0023722:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0023727:	83 ec 0c             	sub    esp,0xc
c002372a:	86 e0                	xchg   al,ah
c002372c:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0023731:	6a 02                	push   0x2
c0023733:	57                   	push   edi
c0023734:	53                   	push   ebx
c0023735:	56                   	push   esi
c0023736:	55                   	push   ebp
c0023737:	e8 6a f7 ff ff       	call   c0022ea6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002373c:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0023741:	83 c4 20             	add    esp,0x20
c0023744:	57                   	push   edi
c0023745:	53                   	push   ebx
c0023746:	56                   	push   esi
c0023747:	55                   	push   ebp
c0023748:	e8 97 f8 ff ff       	call   c0022fe4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002374d:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023751:	57                   	push   edi
c0023752:	53                   	push   ebx
c0023753:	56                   	push   esi
c0023754:	55                   	push   ebp
c0023755:	e8 f4 f7 ff ff       	call   c0022f4e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002375a:	b9 09 00 00 00       	mov    ecx,0x9
c002375f:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0023764:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0023768:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002376c:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0023770:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0023774:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0023778:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002377c:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0023780:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0023784:	83 ec 0c             	sub    esp,0xc
c0023787:	fc                   	cld    
c0023788:	89 e7                	mov    edi,esp
c002378a:	8d 74 24 58          	lea    esi,[esp+0x58]
c002378e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023790:	55                   	push   ebp
c0023791:	e8 e2 fc ff ff       	call   c0023478 <PCI::foundDevice(PCIDeviceInfo)>
c0023796:	81 c4 8c 00 00 00    	add    esp,0x8c
c002379c:	5b                   	pop    ebx
c002379d:	5e                   	pop    esi
c002379e:	5f                   	pop    edi
c002379f:	5d                   	pop    ebp
c00237a0:	c3                   	ret    
c00237a1:	90                   	nop

c00237a2 <PCI::checkDevice(unsigned char, unsigned char)>:
c00237a2:	55                   	push   ebp
c00237a3:	57                   	push   edi
c00237a4:	56                   	push   esi
c00237a5:	53                   	push   ebx
c00237a6:	83 ec 0c             	sub    esp,0xc
c00237a9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00237ad:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00237b2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00237b7:	6a 00                	push   0x0
c00237b9:	56                   	push   esi
c00237ba:	57                   	push   edi
c00237bb:	55                   	push   ebp
c00237bc:	e8 8d f7 ff ff       	call   c0022f4e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00237c1:	6a 00                	push   0x0
c00237c3:	56                   	push   esi
c00237c4:	57                   	push   edi
c00237c5:	55                   	push   ebp
c00237c6:	e8 1f fe ff ff       	call   c00235ea <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00237cb:	83 c4 20             	add    esp,0x20
c00237ce:	6a 00                	push   0x0
c00237d0:	56                   	push   esi
c00237d1:	57                   	push   edi
c00237d2:	55                   	push   ebp
c00237d3:	e8 9a f7 ff ff       	call   c0022f72 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00237d8:	83 c4 10             	add    esp,0x10
c00237db:	84 c0                	test   al,al
c00237dd:	79 27                	jns    c0023806 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00237df:	bb 01 00 00 00       	mov    ebx,0x1
c00237e4:	53                   	push   ebx
c00237e5:	56                   	push   esi
c00237e6:	57                   	push   edi
c00237e7:	55                   	push   ebp
c00237e8:	e8 61 f7 ff ff       	call   c0022f4e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00237ed:	83 c4 10             	add    esp,0x10
c00237f0:	66 40                	inc    ax
c00237f2:	74 0c                	je     c0023800 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00237f4:	53                   	push   ebx
c00237f5:	56                   	push   esi
c00237f6:	57                   	push   edi
c00237f7:	55                   	push   ebp
c00237f8:	e8 ed fd ff ff       	call   c00235ea <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00237fd:	83 c4 10             	add    esp,0x10
c0023800:	43                   	inc    ebx
c0023801:	83 fb 08             	cmp    ebx,0x8
c0023804:	75 de                	jne    c00237e4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0023806:	83 c4 0c             	add    esp,0xc
c0023809:	5b                   	pop    ebx
c002380a:	5e                   	pop    esi
c002380b:	5f                   	pop    edi
c002380c:	5d                   	pop    ebp
c002380d:	c3                   	ret    

c002380e <PCI::detect()>:
c002380e:	56                   	push   esi
c002380f:	53                   	push   ebx
c0023810:	53                   	push   ebx
c0023811:	31 db                	xor    ebx,ebx
c0023813:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023817:	6a 00                	push   0x0
c0023819:	6a 00                	push   0x0
c002381b:	6a 00                	push   0x0
c002381d:	56                   	push   esi
c002381e:	e8 4f f7 ff ff       	call   c0022f72 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023823:	83 c4 10             	add    esp,0x10
c0023826:	a8 80                	test   al,0x80
c0023828:	75 21                	jne    c002384b <PCI::detect()+0x3d>
c002382a:	51                   	push   ecx
c002382b:	51                   	push   ecx
c002382c:	6a 00                	push   0x0
c002382e:	56                   	push   esi
c002382f:	e8 20 fc ff ff       	call   c0023454 <PCI::checkBus(unsigned char)>
c0023834:	83 c4 10             	add    esp,0x10
c0023837:	eb 24                	jmp    c002385d <PCI::detect()+0x4f>
c0023839:	52                   	push   edx
c002383a:	52                   	push   edx
c002383b:	53                   	push   ebx
c002383c:	43                   	inc    ebx
c002383d:	56                   	push   esi
c002383e:	e8 11 fc ff ff       	call   c0023454 <PCI::checkBus(unsigned char)>
c0023843:	83 c4 10             	add    esp,0x10
c0023846:	83 fb 08             	cmp    ebx,0x8
c0023849:	74 12                	je     c002385d <PCI::detect()+0x4f>
c002384b:	53                   	push   ebx
c002384c:	6a 00                	push   0x0
c002384e:	6a 00                	push   0x0
c0023850:	56                   	push   esi
c0023851:	e8 f8 f6 ff ff       	call   c0022f4e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023856:	83 c4 10             	add    esp,0x10
c0023859:	66 40                	inc    ax
c002385b:	74 dc                	je     c0023839 <PCI::detect()+0x2b>
c002385d:	58                   	pop    eax
c002385e:	5b                   	pop    ebx
c002385f:	5e                   	pop    esi
c0023860:	c3                   	ret    
c0023861:	90                   	nop

c0023862 <IDE::close(int, int, void*)>:
c0023862:	83 c8 ff             	or     eax,0xffffffff
c0023865:	c3                   	ret    

c0023866 <IDE::IDE()>:
c0023866:	83 ec 0c             	sub    esp,0xc
c0023869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002386d:	83 ec 08             	sub    esp,0x8
c0023870:	68 34 d5 02 c0       	push   0xc002d534
c0023875:	50                   	push   eax
c0023876:	e8 63 08 ff ff       	call   c00140de <HardDiskController::HardDiskController(char const*)>
c002387b:	83 c4 10             	add    esp,0x10
c002387e:	ba 74 d7 02 c0       	mov    edx,0xc002d774
c0023883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023887:	89 10                	mov    DWORD PTR [eax],edx
c0023889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002388d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023894:	90                   	nop
c0023895:	83 c4 0c             	add    esp,0xc
c0023898:	c3                   	ret    
c0023899:	90                   	nop

c002389a <IDE::prepareInterrupt(unsigned char)>:
c002389a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002389f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00238a3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00238ab:	c3                   	ret    

c00238ac <selectDrive(unsigned char, unsigned char)>:
c00238ac:	c3                   	ret    
c00238ad:	90                   	nop

c00238ae <IDE::getBase(unsigned char)>:
c00238ae:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00238b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00238b7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00238bf:	c3                   	ret    

c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00238c0:	55                   	push   ebp
c00238c1:	57                   	push   edi
c00238c2:	56                   	push   esi
c00238c3:	53                   	push   ebx
c00238c4:	83 ec 1c             	sub    esp,0x1c
c00238c7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00238cb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00238cf:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00238d2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00238d6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00238da:	80 f9 03             	cmp    cl,0x3
c00238dd:	77 51                	ja     c0023930 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00238df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00238e3:	0f b6 f2             	movzx  esi,dl
c00238e6:	0f b6 db             	movzx  ebx,bl
c00238e9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00238ec:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00238f0:	83 ca 80             	or     edx,0xffffff80
c00238f3:	0f b6 d2             	movzx  edx,dl
c00238f6:	52                   	push   edx
c00238f7:	6a 0c                	push   0xc
c00238f9:	56                   	push   esi
c00238fa:	57                   	push   edi
c00238fb:	e8 c0 ff ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023900:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023905:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023909:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002390d:	ee                   	out    dx,al
c002390e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023913:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023917:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002391b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002391f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023927:	83 c4 2c             	add    esp,0x2c
c002392a:	5b                   	pop    ebx
c002392b:	5e                   	pop    esi
c002392c:	5f                   	pop    edi
c002392d:	5d                   	pop    ebp
c002392e:	eb 90                	jmp    c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023930:	80 fb 07             	cmp    bl,0x7
c0023933:	77 12                	ja     c0023947 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023935:	0f b6 d2             	movzx  edx,dl
c0023938:	0f b6 db             	movzx  ebx,bl
c002393b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023943:	89 da                	mov    edx,ebx
c0023945:	eb 2f                	jmp    c0023976 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023947:	80 fb 0d             	cmp    bl,0xd
c002394a:	77 13                	ja     c002395f <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002394c:	0f b6 d2             	movzx  edx,dl
c002394f:	0f b6 db             	movzx  ebx,bl
c0023952:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023959:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002395d:	eb 17                	jmp    c0023976 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002395f:	80 fb 15             	cmp    bl,0x15
c0023962:	77 13                	ja     c0023977 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023964:	0f b6 d2             	movzx  edx,dl
c0023967:	0f b6 db             	movzx  ebx,bl
c002396a:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023972:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023976:	ee                   	out    dx,al
c0023977:	83 c4 1c             	add    esp,0x1c
c002397a:	5b                   	pop    ebx
c002397b:	5e                   	pop    esi
c002397c:	5f                   	pop    edi
c002397d:	5d                   	pop    ebp
c002397e:	c3                   	ret    
c002397f:	90                   	nop

c0023980 <IDE::read(unsigned char, unsigned char)>:
c0023980:	55                   	push   ebp
c0023981:	57                   	push   edi
c0023982:	56                   	push   esi
c0023983:	53                   	push   ebx
c0023984:	83 ec 1c             	sub    esp,0x1c
c0023987:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002398b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002398f:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023992:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023996:	3c 03                	cmp    al,0x3
c0023998:	77 43                	ja     c00239dd <IDE::read(unsigned char, unsigned char)+0x5d>
c002399a:	0f b6 f2             	movzx  esi,dl
c002399d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00239a0:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00239a4:	83 c8 80             	or     eax,0xffffff80
c00239a7:	0f b6 c0             	movzx  eax,al
c00239aa:	50                   	push   eax
c00239ab:	6a 0c                	push   0xc
c00239ad:	56                   	push   esi
c00239ae:	57                   	push   edi
c00239af:	e8 0c ff ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239b4:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00239b9:	0f b6 c3             	movzx  eax,bl
c00239bc:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00239c0:	ec                   	in     al,dx
c00239c1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00239c5:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00239ca:	52                   	push   edx
c00239cb:	6a 0c                	push   0xc
c00239cd:	56                   	push   esi
c00239ce:	57                   	push   edi
c00239cf:	e8 ec fe ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239d4:	83 c4 20             	add    esp,0x20
c00239d7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00239db:	eb 49                	jmp    c0023a26 <IDE::read(unsigned char, unsigned char)+0xa6>
c00239dd:	80 fb 07             	cmp    bl,0x7
c00239e0:	77 12                	ja     c00239f4 <IDE::read(unsigned char, unsigned char)+0x74>
c00239e2:	0f b6 d2             	movzx  edx,dl
c00239e5:	0f b6 c3             	movzx  eax,bl
c00239e8:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00239f0:	89 c2                	mov    edx,eax
c00239f2:	eb 31                	jmp    c0023a25 <IDE::read(unsigned char, unsigned char)+0xa5>
c00239f4:	80 fb 0d             	cmp    bl,0xd
c00239f7:	77 13                	ja     c0023a0c <IDE::read(unsigned char, unsigned char)+0x8c>
c00239f9:	0f b6 d2             	movzx  edx,dl
c00239fc:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023a03:	0f b6 d3             	movzx  edx,bl
c0023a06:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023a0a:	eb 19                	jmp    c0023a25 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023a0c:	31 c0                	xor    eax,eax
c0023a0e:	80 fb 15             	cmp    bl,0x15
c0023a11:	77 13                	ja     c0023a26 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023a13:	0f b6 d2             	movzx  edx,dl
c0023a16:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023a1e:	0f b6 d3             	movzx  edx,bl
c0023a21:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023a25:	ec                   	in     al,dx
c0023a26:	83 c4 1c             	add    esp,0x1c
c0023a29:	5b                   	pop    ebx
c0023a2a:	5e                   	pop    esi
c0023a2b:	5f                   	pop    edi
c0023a2c:	5d                   	pop    ebp
c0023a2d:	c3                   	ret    

c0023a2e <IDE::waitInterrupt(unsigned char)>:
c0023a2e:	55                   	push   ebp
c0023a2f:	57                   	push   edi
c0023a30:	56                   	push   esi
c0023a31:	53                   	push   ebx
c0023a32:	31 db                	xor    ebx,ebx
c0023a34:	83 ec 0c             	sub    esp,0xc
c0023a37:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023a3b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023a40:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023a48:	89 e8                	mov    eax,ebp
c0023a4a:	84 c0                	test   al,al
c0023a4c:	75 34                	jne    c0023a82 <IDE::waitInterrupt(unsigned char)+0x54>
c0023a4e:	52                   	push   edx
c0023a4f:	6a 0c                	push   0xc
c0023a51:	56                   	push   esi
c0023a52:	57                   	push   edi
c0023a53:	e8 28 ff ff ff       	call   c0023980 <IDE::read(unsigned char, unsigned char)>
c0023a58:	83 c4 10             	add    esp,0x10
c0023a5b:	a8 01                	test   al,0x1
c0023a5d:	75 2b                	jne    c0023a8a <IDE::waitInterrupt(unsigned char)+0x5c>
c0023a5f:	f6 c3 04             	test   bl,0x4
c0023a62:	75 16                	jne    c0023a7a <IDE::waitInterrupt(unsigned char)+0x4c>
c0023a64:	83 fb 32             	cmp    ebx,0x32
c0023a67:	7e 11                	jle    c0023a7a <IDE::waitInterrupt(unsigned char)+0x4c>
c0023a69:	50                   	push   eax
c0023a6a:	50                   	push   eax
c0023a6b:	6a 00                	push   0x0
c0023a6d:	68 80 96 98 00       	push   0x989680
c0023a72:	e8 6c a9 ff ff       	call   c001e3e3 <nanoSleep(unsigned long long)>
c0023a77:	83 c4 10             	add    esp,0x10
c0023a7a:	83 fb 3c             	cmp    ebx,0x3c
c0023a7d:	74 0b                	je     c0023a8a <IDE::waitInterrupt(unsigned char)+0x5c>
c0023a7f:	43                   	inc    ebx
c0023a80:	eb be                	jmp    c0023a40 <IDE::waitInterrupt(unsigned char)+0x12>
c0023a82:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023a8a:	83 c4 0c             	add    esp,0xc
c0023a8d:	89 e8                	mov    eax,ebp
c0023a8f:	5b                   	pop    ebx
c0023a90:	5e                   	pop    esi
c0023a91:	5f                   	pop    edi
c0023a92:	5d                   	pop    ebp
c0023a93:	c3                   	ret    

c0023a94 <ideChannel0IRQHandler(regs*, void*)>:
c0023a94:	83 ec 10             	sub    esp,0x10
c0023a97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a9b:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023aa2:	6a 07                	push   0x7
c0023aa4:	6a 00                	push   0x0
c0023aa6:	50                   	push   eax
c0023aa7:	e8 d4 fe ff ff       	call   c0023980 <IDE::read(unsigned char, unsigned char)>
c0023aac:	83 c4 1c             	add    esp,0x1c
c0023aaf:	c3                   	ret    

c0023ab0 <ideChannel1IRQHandler(regs*, void*)>:
c0023ab0:	83 ec 10             	sub    esp,0x10
c0023ab3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023ab7:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023abe:	6a 07                	push   0x7
c0023ac0:	6a 01                	push   0x1
c0023ac2:	50                   	push   eax
c0023ac3:	e8 b8 fe ff ff       	call   c0023980 <IDE::read(unsigned char, unsigned char)>
c0023ac8:	83 c4 1c             	add    esp,0x1c
c0023acb:	c3                   	ret    

c0023acc <IDE::enableIRQs(unsigned char, bool)>:
c0023acc:	57                   	push   edi
c0023acd:	56                   	push   esi
c0023ace:	be 04 00 00 00       	mov    esi,0x4
c0023ad3:	53                   	push   ebx
c0023ad4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023ad9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023add:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023ae2:	0f 94 c0             	sete   al
c0023ae5:	d1 e0                	shl    eax,1
c0023ae7:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023aee:	0f b6 c0             	movzx  eax,al
c0023af1:	50                   	push   eax
c0023af2:	6a 0c                	push   0xc
c0023af4:	57                   	push   edi
c0023af5:	53                   	push   ebx
c0023af6:	e8 c5 fd ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023afb:	83 c4 10             	add    esp,0x10
c0023afe:	50                   	push   eax
c0023aff:	6a 0c                	push   0xc
c0023b01:	57                   	push   edi
c0023b02:	53                   	push   ebx
c0023b03:	e8 78 fe ff ff       	call   c0023980 <IDE::read(unsigned char, unsigned char)>
c0023b08:	83 c4 10             	add    esp,0x10
c0023b0b:	4e                   	dec    esi
c0023b0c:	75 f0                	jne    c0023afe <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023b0e:	5b                   	pop    ebx
c0023b0f:	5e                   	pop    esi
c0023b10:	5f                   	pop    edi
c0023b11:	c3                   	ret    

c0023b12 <IDE::open(int, int, void*)>:
c0023b12:	55                   	push   ebp
c0023b13:	57                   	push   edi
c0023b14:	56                   	push   esi
c0023b15:	53                   	push   ebx
c0023b16:	83 ec 1c             	sub    esp,0x1c
c0023b19:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023b1d:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023b26:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023b2f:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023b36:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023b3d:	0f 85 b0 02 00 00    	jne    c0023df3 <IDE::open(int, int, void*)+0x2e1>
c0023b43:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023b49:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023b4d:	83 e0 7f             	and    eax,0x7f
c0023b50:	3c 05                	cmp    al,0x5
c0023b52:	74 04                	je     c0023b58 <IDE::open(int, int, void*)+0x46>
c0023b54:	3c 0f                	cmp    al,0xf
c0023b56:	75 32                	jne    c0023b8a <IDE::open(int, int, void*)+0x78>
c0023b58:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023b5e:	83 e0 fc             	and    eax,0xfffffffc
c0023b61:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023b68:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023b6e:	83 e0 fc             	and    eax,0xfffffffc
c0023b71:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023b78:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023b7e:	83 e0 fc             	and    eax,0xfffffffc
c0023b81:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023b88:	eb 14                	jmp    c0023b9e <IDE::open(int, int, void*)+0x8c>
c0023b8a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023b94:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023b9e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023ba5:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023bac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023bb0:	89 c6                	mov    esi,eax
c0023bb2:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023bb7:	c1 e6 10             	shl    esi,0x10
c0023bba:	89 e8                	mov    eax,ebp
c0023bbc:	89 fa                	mov    edx,edi
c0023bbe:	c1 e0 0b             	shl    eax,0xb
c0023bc1:	09 f0                	or     eax,esi
c0023bc3:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023bca:	c1 e6 08             	shl    esi,0x8
c0023bcd:	09 c6                	or     esi,eax
c0023bcf:	89 f0                	mov    eax,esi
c0023bd1:	0d 08 00 00 80       	or     eax,0x80000008
c0023bd6:	ef                   	out    dx,eax
c0023bd7:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023bdc:	89 ca                	mov    edx,ecx
c0023bde:	ed                   	in     eax,dx
c0023bdf:	c1 e8 10             	shr    eax,0x10
c0023be2:	3d ff ff 00 00       	cmp    eax,0xffff
c0023be7:	0f 84 f5 00 00 00    	je     c0023ce2 <IDE::open(int, int, void*)+0x1d0>
c0023bed:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023bf3:	89 fa                	mov    edx,edi
c0023bf5:	89 f0                	mov    eax,esi
c0023bf7:	ef                   	out    dx,eax
c0023bf8:	b0 fe                	mov    al,0xfe
c0023bfa:	89 ca                	mov    edx,ecx
c0023bfc:	ee                   	out    dx,al
c0023bfd:	89 f0                	mov    eax,esi
c0023bff:	89 fa                	mov    edx,edi
c0023c01:	ef                   	out    dx,eax
c0023c02:	89 ca                	mov    edx,ecx
c0023c04:	ed                   	in     eax,dx
c0023c05:	3c fe                	cmp    al,0xfe
c0023c07:	0f 85 a9 00 00 00    	jne    c0023cb6 <IDE::open(int, int, void*)+0x1a4>
c0023c0d:	8b 15 28 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f028
c0023c13:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023c1a:	74 33                	je     c0023c4f <IDE::open(int, int, void*)+0x13d>
c0023c1c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023c22:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023c26:	40                   	inc    eax
c0023c27:	83 ec 0c             	sub    esp,0xc
c0023c2a:	0f b6 c0             	movzx  eax,al
c0023c2d:	50                   	push   eax
c0023c2e:	55                   	push   ebp
c0023c2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023c33:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023c39:	51                   	push   ecx
c0023c3a:	e8 a1 41 ff ff       	call   c0017de0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023c3f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023c44:	83 c4 1c             	add    esp,0x1c
c0023c47:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023c4d:	eb 0a                	jmp    c0023c59 <IDE::open(int, int, void*)+0x147>
c0023c4f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023c59:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023c60:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023c67:	c1 e1 10             	shl    ecx,0x10
c0023c6a:	c1 e0 08             	shl    eax,0x8
c0023c6d:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023c72:	09 c1                	or     ecx,eax
c0023c74:	89 fa                	mov    edx,edi
c0023c76:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023c7d:	c1 e0 0b             	shl    eax,0xb
c0023c80:	09 c1                	or     ecx,eax
c0023c82:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023c88:	89 c8                	mov    eax,ecx
c0023c8a:	ef                   	out    dx,eax
c0023c8b:	be fc 0c 00 00       	mov    esi,0xcfc
c0023c90:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023c96:	89 f2                	mov    edx,esi
c0023c98:	ee                   	out    dx,al
c0023c99:	89 c8                	mov    eax,ecx
c0023c9b:	89 fa                	mov    edx,edi
c0023c9d:	ef                   	out    dx,eax
c0023c9e:	89 f2                	mov    edx,esi
c0023ca0:	ed                   	in     eax,dx
c0023ca1:	0f b6 c0             	movzx  eax,al
c0023ca4:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023caa:	74 46                	je     c0023cf2 <IDE::open(int, int, void*)+0x1e0>
c0023cac:	83 ec 0c             	sub    esp,0xc
c0023caf:	68 4c d5 02 c0       	push   0xc002d54c
c0023cb4:	eb 34                	jmp    c0023cea <IDE::open(int, int, void*)+0x1d8>
c0023cb6:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023cbf:	75 17                	jne    c0023cd8 <IDE::open(int, int, void*)+0x1c6>
c0023cc1:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023cc6:	74 07                	je     c0023ccf <IDE::open(int, int, void*)+0x1bd>
c0023cc8:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023ccd:	75 09                	jne    c0023cd8 <IDE::open(int, int, void*)+0x1c6>
c0023ccf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023cd6:	eb 1a                	jmp    c0023cf2 <IDE::open(int, int, void*)+0x1e0>
c0023cd8:	83 ec 0c             	sub    esp,0xc
c0023cdb:	68 54 d5 02 c0       	push   0xc002d554
c0023ce0:	eb 08                	jmp    c0023cea <IDE::open(int, int, void*)+0x1d8>
c0023ce2:	83 ec 0c             	sub    esp,0xc
c0023ce5:	68 85 d5 02 c0       	push   0xc002d585
c0023cea:	e8 3e 66 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c0023cef:	83 c4 10             	add    esp,0x10
c0023cf2:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023cf9:	79 1a                	jns    c0023d15 <IDE::open(int, int, void*)+0x203>
c0023cfb:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023d01:	83 e0 fc             	and    eax,0xfffffffc
c0023d04:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023d0b:	83 c0 08             	add    eax,0x8
c0023d0e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023d15:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023d1b:	89 c2                	mov    edx,eax
c0023d1d:	83 e2 0f             	and    edx,0xf
c0023d20:	66 83 fa 08          	cmp    dx,0x8
c0023d24:	75 0a                	jne    c0023d30 <IDE::open(int, int, void*)+0x21e>
c0023d26:	83 e8 02             	sub    eax,0x2
c0023d29:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023d30:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023d36:	89 c2                	mov    edx,eax
c0023d38:	83 e2 0f             	and    edx,0xf
c0023d3b:	66 83 fa 08          	cmp    dx,0x8
c0023d3f:	75 0a                	jne    c0023d4b <IDE::open(int, int, void*)+0x239>
c0023d41:	83 e8 02             	sub    eax,0x2
c0023d44:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023d4b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023d52:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023d59:	89 d0                	mov    eax,edx
c0023d5b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023d5e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023d62:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023d66:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023d69:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023d6e:	0f b6 c9             	movzx  ecx,cl
c0023d71:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023d78:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023d7b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023d7f:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023d83:	8d 50 02             	lea    edx,[eax+0x2]
c0023d86:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023d8b:	0f b6 d2             	movzx  edx,dl
c0023d8e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023d94:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023d97:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023d9b:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023d9f:	8d 48 03             	lea    ecx,[eax+0x3]
c0023da2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023da7:	0f b6 c9             	movzx  ecx,cl
c0023daa:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023db0:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023db3:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023db7:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023dbb:	8d 50 04             	lea    edx,[eax+0x4]
c0023dbe:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023dc4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023dc9:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023dd0:	66 85 f6             	test   si,si
c0023dd3:	74 3e                	je     c0023e13 <IDE::open(int, int, void*)+0x301>
c0023dd5:	0f b6 d2             	movzx  edx,dl
c0023dd8:	83 c0 05             	add    eax,0x5
c0023ddb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023dde:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023de2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023de6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023dec:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023df1:	eb 20                	jmp    c0023e13 <IDE::open(int, int, void*)+0x301>
c0023df3:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023dfd:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023e07:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023e0e:	e9 02 ff ff ff       	jmp    c0023d15 <IDE::open(int, int, void*)+0x203>
c0023e13:	52                   	push   edx
c0023e14:	52                   	push   edx
c0023e15:	6a 00                	push   0x0
c0023e17:	53                   	push   ebx
c0023e18:	e8 7d fa ff ff       	call   c002389a <IDE::prepareInterrupt(unsigned char)>
c0023e1d:	59                   	pop    ecx
c0023e1e:	5e                   	pop    esi
c0023e1f:	6a 01                	push   0x1
c0023e21:	53                   	push   ebx
c0023e22:	e8 73 fa ff ff       	call   c002389a <IDE::prepareInterrupt(unsigned char)>
c0023e27:	83 c4 0c             	add    esp,0xc
c0023e2a:	6a 00                	push   0x0
c0023e2c:	6a 00                	push   0x0
c0023e2e:	53                   	push   ebx
c0023e2f:	e8 98 fc ff ff       	call   c0023acc <IDE::enableIRQs(unsigned char, bool)>
c0023e34:	83 c4 0c             	add    esp,0xc
c0023e37:	6a 00                	push   0x0
c0023e39:	6a 01                	push   0x1
c0023e3b:	53                   	push   ebx
c0023e3c:	e8 8b fc ff ff       	call   c0023acc <IDE::enableIRQs(unsigned char, bool)>
c0023e41:	83 c4 10             	add    esp,0x10
c0023e44:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023e4b:	74 40                	je     c0023e8d <IDE::open(int, int, void*)+0x37b>
c0023e4d:	83 ec 0c             	sub    esp,0xc
c0023e50:	68 af d5 02 c0       	push   0xc002d5af
c0023e55:	e8 9d ea fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0023e5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023e5d:	6a 01                	push   0x1
c0023e5f:	68 94 3a 02 c0       	push   0xc0023a94
c0023e64:	6a 0e                	push   0xe
c0023e66:	53                   	push   ebx
c0023e67:	e8 3c fe fe ff       	call   c0013ca8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e6c:	83 c4 14             	add    esp,0x14
c0023e6f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023e75:	53                   	push   ebx
c0023e76:	6a 01                	push   0x1
c0023e78:	68 b0 3a 02 c0       	push   0xc0023ab0
c0023e7d:	6a 0f                	push   0xf
c0023e7f:	53                   	push   ebx
c0023e80:	e8 23 fe fe ff       	call   c0013ca8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e85:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023e8b:	eb 4a                	jmp    c0023ed7 <IDE::open(int, int, void*)+0x3c5>
c0023e8d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023e97:	50                   	push   eax
c0023e98:	6a 0f                	push   0xf
c0023e9a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023ea0:	68 cb d5 02 c0       	push   0xc002d5cb
c0023ea5:	e8 4d ea fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0023eaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023ead:	6a 00                	push   0x0
c0023eaf:	68 94 3a 02 c0       	push   0xc0023a94
c0023eb4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023eba:	53                   	push   ebx
c0023ebb:	e8 e8 fd fe ff       	call   c0013ca8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023ec0:	83 c4 14             	add    esp,0x14
c0023ec3:	53                   	push   ebx
c0023ec4:	6a 00                	push   0x0
c0023ec6:	68 b0 3a 02 c0       	push   0xc0023ab0
c0023ecb:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023ed1:	53                   	push   ebx
c0023ed2:	e8 d1 fd fe ff       	call   c0013ca8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023ed7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023ed9:	83 c4 20             	add    esp,0x20
c0023edc:	83 ec 0c             	sub    esp,0xc
c0023edf:	53                   	push   ebx
c0023ee0:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023ee3:	83 c4 0c             	add    esp,0xc
c0023ee6:	6a 07                	push   0x7
c0023ee8:	6a 00                	push   0x0
c0023eea:	53                   	push   ebx
c0023eeb:	e8 90 fa ff ff       	call   c0023980 <IDE::read(unsigned char, unsigned char)>
c0023ef0:	83 c4 0c             	add    esp,0xc
c0023ef3:	6a 07                	push   0x7
c0023ef5:	6a 01                	push   0x1
c0023ef7:	53                   	push   ebx
c0023ef8:	e8 83 fa ff ff       	call   c0023980 <IDE::read(unsigned char, unsigned char)>
c0023efd:	83 c4 0c             	add    esp,0xc
c0023f00:	6a 01                	push   0x1
c0023f02:	6a 00                	push   0x0
c0023f04:	53                   	push   ebx
c0023f05:	e8 c2 fb ff ff       	call   c0023acc <IDE::enableIRQs(unsigned char, bool)>
c0023f0a:	83 c4 0c             	add    esp,0xc
c0023f0d:	6a 01                	push   0x1
c0023f0f:	6a 01                	push   0x1
c0023f11:	53                   	push   ebx
c0023f12:	e8 b5 fb ff ff       	call   c0023acc <IDE::enableIRQs(unsigned char, bool)>
c0023f17:	83 c4 2c             	add    esp,0x2c
c0023f1a:	31 c0                	xor    eax,eax
c0023f1c:	5b                   	pop    ebx
c0023f1d:	5e                   	pop    esi
c0023f1e:	5f                   	pop    edi
c0023f1f:	5d                   	pop    ebp
c0023f20:	c3                   	ret    
c0023f21:	90                   	nop

c0023f22 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023f22:	55                   	push   ebp
c0023f23:	57                   	push   edi
c0023f24:	56                   	push   esi
c0023f25:	53                   	push   ebx
c0023f26:	83 ec 1c             	sub    esp,0x1c
c0023f29:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023f2d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023f31:	8d 50 f8             	lea    edx,[eax-0x8]
c0023f34:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023f38:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023f3c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023f40:	80 fa 03             	cmp    dl,0x3
c0023f43:	77 5d                	ja     c0023fa2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023f45:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023f49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023f4d:	0f b6 db             	movzx  ebx,bl
c0023f50:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023f53:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023f57:	83 ca 80             	or     edx,0xffffff80
c0023f5a:	0f b6 d2             	movzx  edx,dl
c0023f5d:	52                   	push   edx
c0023f5e:	6a 0c                	push   0xc
c0023f60:	53                   	push   ebx
c0023f61:	56                   	push   esi
c0023f62:	e8 59 f9 ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f67:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023f6c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f70:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023f74:	0f b6 c0             	movzx  eax,al
c0023f77:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023f7b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023f7d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023f82:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023f86:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023f8a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023f8e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023f96:	83 c4 2c             	add    esp,0x2c
c0023f99:	5b                   	pop    ebx
c0023f9a:	5e                   	pop    esi
c0023f9b:	5f                   	pop    edi
c0023f9c:	5d                   	pop    ebp
c0023f9d:	e9 1e f9 ff ff       	jmp    c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fa2:	3c 07                	cmp    al,0x7
c0023fa4:	77 10                	ja     c0023fb6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023fa6:	0f b6 db             	movzx  ebx,bl
c0023fa9:	0f b6 d0             	movzx  edx,al
c0023fac:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023fb4:	eb 2d                	jmp    c0023fe3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023fb6:	3c 0d                	cmp    al,0xd
c0023fb8:	77 13                	ja     c0023fcd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023fba:	0f b6 db             	movzx  ebx,bl
c0023fbd:	0f b6 c0             	movzx  eax,al
c0023fc0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023fc7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023fcb:	eb 16                	jmp    c0023fe3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023fcd:	3c 15                	cmp    al,0x15
c0023fcf:	77 14                	ja     c0023fe5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023fd1:	0f b6 db             	movzx  ebx,bl
c0023fd4:	0f b6 c0             	movzx  eax,al
c0023fd7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023fdf:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023fe3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023fe5:	83 c4 1c             	add    esp,0x1c
c0023fe8:	5b                   	pop    ebx
c0023fe9:	5e                   	pop    esi
c0023fea:	5f                   	pop    edi
c0023feb:	5d                   	pop    ebp
c0023fec:	c3                   	ret    
c0023fed:	90                   	nop

c0023fee <IDE::detect()>:
c0023fee:	55                   	push   ebp
c0023fef:	57                   	push   edi
c0023ff0:	56                   	push   esi
c0023ff1:	53                   	push   ebx
c0023ff2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023ff8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023fff:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0024006:	0f 85 be 02 00 00    	jne    c00242ca <IDE::detect()+0x2dc>
c002400c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0024013:	31 f6                	xor    esi,esi
c0024015:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002401d:	31 ed                	xor    ebp,ebp
c002401f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024023:	c1 e0 06             	shl    eax,0x6
c0024026:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002402e:	89 e8                	mov    eax,ebp
c0024030:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0024034:	c1 e0 04             	shl    eax,0x4
c0024037:	83 c8 a0             	or     eax,0xffffffa0
c002403a:	0f b6 c0             	movzx  eax,al
c002403d:	50                   	push   eax
c002403e:	6a 06                	push   0x6
c0024040:	56                   	push   esi
c0024041:	53                   	push   ebx
c0024042:	e8 79 f8 ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024047:	83 c4 0c             	add    esp,0xc
c002404a:	6a 0c                	push   0xc
c002404c:	56                   	push   esi
c002404d:	53                   	push   ebx
c002404e:	e8 2d f9 ff ff       	call   c0023980 <IDE::read(unsigned char, unsigned char)>
c0024053:	83 c4 0c             	add    esp,0xc
c0024056:	6a 0c                	push   0xc
c0024058:	56                   	push   esi
c0024059:	53                   	push   ebx
c002405a:	e8 21 f9 ff ff       	call   c0023980 <IDE::read(unsigned char, unsigned char)>
c002405f:	83 c4 0c             	add    esp,0xc
c0024062:	6a 0c                	push   0xc
c0024064:	56                   	push   esi
c0024065:	53                   	push   ebx
c0024066:	e8 15 f9 ff ff       	call   c0023980 <IDE::read(unsigned char, unsigned char)>
c002406b:	83 c4 0c             	add    esp,0xc
c002406e:	6a 0c                	push   0xc
c0024070:	56                   	push   esi
c0024071:	53                   	push   ebx
c0024072:	e8 09 f9 ff ff       	call   c0023980 <IDE::read(unsigned char, unsigned char)>
c0024077:	68 ec 00 00 00       	push   0xec
c002407c:	6a 07                	push   0x7
c002407e:	56                   	push   esi
c002407f:	53                   	push   ebx
c0024080:	e8 3b f8 ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024085:	83 c4 1c             	add    esp,0x1c
c0024088:	6a 0c                	push   0xc
c002408a:	56                   	push   esi
c002408b:	53                   	push   ebx
c002408c:	e8 ef f8 ff ff       	call   c0023980 <IDE::read(unsigned char, unsigned char)>
c0024091:	83 c4 0c             	add    esp,0xc
c0024094:	6a 0c                	push   0xc
c0024096:	56                   	push   esi
c0024097:	53                   	push   ebx
c0024098:	e8 e3 f8 ff ff       	call   c0023980 <IDE::read(unsigned char, unsigned char)>
c002409d:	83 c4 0c             	add    esp,0xc
c00240a0:	6a 0c                	push   0xc
c00240a2:	56                   	push   esi
c00240a3:	53                   	push   ebx
c00240a4:	e8 d7 f8 ff ff       	call   c0023980 <IDE::read(unsigned char, unsigned char)>
c00240a9:	83 c4 0c             	add    esp,0xc
c00240ac:	6a 0c                	push   0xc
c00240ae:	56                   	push   esi
c00240af:	53                   	push   ebx
c00240b0:	e8 cb f8 ff ff       	call   c0023980 <IDE::read(unsigned char, unsigned char)>
c00240b5:	83 c4 0c             	add    esp,0xc
c00240b8:	6a 0c                	push   0xc
c00240ba:	56                   	push   esi
c00240bb:	53                   	push   ebx
c00240bc:	e8 bf f8 ff ff       	call   c0023980 <IDE::read(unsigned char, unsigned char)>
c00240c1:	83 c4 10             	add    esp,0x10
c00240c4:	84 c0                	test   al,al
c00240c6:	0f 84 8b 01 00 00    	je     c0024257 <IDE::detect()+0x269>
c00240cc:	31 ff                	xor    edi,edi
c00240ce:	50                   	push   eax
c00240cf:	6a 0c                	push   0xc
c00240d1:	56                   	push   esi
c00240d2:	53                   	push   ebx
c00240d3:	e8 a8 f8 ff ff       	call   c0023980 <IDE::read(unsigned char, unsigned char)>
c00240d8:	83 c4 10             	add    esp,0x10
c00240db:	a8 01                	test   al,0x1
c00240dd:	0f 85 8e 01 00 00    	jne    c0024271 <IDE::detect()+0x283>
c00240e3:	84 c0                	test   al,al
c00240e5:	78 04                	js     c00240eb <IDE::detect()+0xfd>
c00240e7:	a8 08                	test   al,0x8
c00240e9:	75 27                	jne    c0024112 <IDE::detect()+0x124>
c00240eb:	47                   	inc    edi
c00240ec:	81 ff 17 01 00 00    	cmp    edi,0x117
c00240f2:	7e da                	jle    c00240ce <IDE::detect()+0xe0>
c00240f4:	50                   	push   eax
c00240f5:	50                   	push   eax
c00240f6:	6a 00                	push   0x0
c00240f8:	68 40 4b 4c 00       	push   0x4c4b40
c00240fd:	e8 e1 a2 ff ff       	call   c001e3e3 <nanoSleep(unsigned long long)>
c0024102:	83 c4 10             	add    esp,0x10
c0024105:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002410b:	75 c1                	jne    c00240ce <IDE::detect()+0xe0>
c002410d:	e9 5f 01 00 00       	jmp    c0024271 <IDE::detect()+0x283>
c0024112:	31 c9                	xor    ecx,ecx
c0024114:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0024118:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002411c:	83 ec 0c             	sub    esp,0xc
c002411f:	68 80 00 00 00       	push   0x80
c0024124:	57                   	push   edi
c0024125:	6a 00                	push   0x0
c0024127:	56                   	push   esi
c0024128:	53                   	push   ebx
c0024129:	e8 f4 fd ff ff       	call   c0023f22 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002412e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0024133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024137:	89 d1                	mov    ecx,edx
c0024139:	c1 e0 06             	shl    eax,0x6
c002413c:	01 d8                	add    eax,ebx
c002413e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0024145:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002414c:	89 f2                	mov    edx,esi
c002414e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0024154:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0024158:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002415e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024162:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0024169:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0024171:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0024178:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0024180:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0024186:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002418d:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0024193:	8d 54 24 58          	lea    edx,[esp+0x58]
c0024197:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002419b:	83 c4 20             	add    esp,0x20
c002419e:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00241a1:	83 c0 02             	add    eax,0x2
c00241a4:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00241aa:	83 c7 02             	add    edi,0x2
c00241ad:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00241b0:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00241b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00241ba:	75 e2                	jne    c002419e <IDE::detect()+0x1b0>
c00241bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00241c0:	c1 e0 06             	shl    eax,0x6
c00241c3:	01 d8                	add    eax,ebx
c00241c5:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00241cb:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00241d2:	66 c1 ea 09          	shr    dx,0x9
c00241d6:	83 e2 01             	and    edx,0x1
c00241d9:	84 c9                	test   cl,cl
c00241db:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00241e1:	75 2f                	jne    c0024212 <IDE::detect()+0x224>
c00241e3:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00241e9:	85 c0                	test   eax,eax
c00241eb:	74 66                	je     c0024253 <IDE::detect()+0x265>
c00241ed:	50                   	push   eax
c00241ee:	55                   	push   ebp
c00241ef:	56                   	push   esi
c00241f0:	68 e7 d5 02 c0       	push   0xc002d5e7
c00241f5:	e8 fd e6 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00241fa:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024201:	e8 86 b6 fe ff       	call   c000f88c <malloc>
c0024206:	89 c7                	mov    edi,eax
c0024208:	89 04 24             	mov    DWORD PTR [esp],eax
c002420b:	e8 78 06 00 00       	call   c0024888 <ATA::ATA()>
c0024210:	eb 28                	jmp    c002423a <IDE::detect()+0x24c>
c0024212:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0024218:	55                   	push   ebp
c0024219:	56                   	push   esi
c002421a:	68 16 d6 02 c0       	push   0xc002d616
c002421f:	e8 d3 e6 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0024224:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002422b:	e8 5c b6 fe ff       	call   c000f88c <malloc>
c0024230:	89 c7                	mov    edi,eax
c0024232:	89 04 24             	mov    DWORD PTR [esp],eax
c0024235:	e8 56 0c 00 00       	call   c0024e90 <ATAPI::ATAPI()>
c002423a:	5a                   	pop    edx
c002423b:	59                   	pop    ecx
c002423c:	57                   	push   edi
c002423d:	53                   	push   ebx
c002423e:	e8 ed fa fe ff       	call   c0013d30 <Device::addChild(Device*)>
c0024243:	8b 07                	mov    eax,DWORD PTR [edi]
c0024245:	53                   	push   ebx
c0024246:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002424a:	6a 00                	push   0x0
c002424c:	57                   	push   edi
c002424d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024250:	83 c4 20             	add    esp,0x20
c0024253:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0024257:	4d                   	dec    ebp
c0024258:	74 0a                	je     c0024264 <IDE::detect()+0x276>
c002425a:	bd 01 00 00 00       	mov    ebp,0x1
c002425f:	e9 bb fd ff ff       	jmp    c002401f <IDE::detect()+0x31>
c0024264:	4e                   	dec    esi
c0024265:	74 63                	je     c00242ca <IDE::detect()+0x2dc>
c0024267:	be 01 00 00 00       	mov    esi,0x1
c002426c:	e9 ac fd ff ff       	jmp    c002401d <IDE::detect()+0x2f>
c0024271:	50                   	push   eax
c0024272:	6a 04                	push   0x4
c0024274:	56                   	push   esi
c0024275:	53                   	push   ebx
c0024276:	e8 05 f7 ff ff       	call   c0023980 <IDE::read(unsigned char, unsigned char)>
c002427b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002427f:	83 c4 0c             	add    esp,0xc
c0024282:	6a 05                	push   0x5
c0024284:	56                   	push   esi
c0024285:	53                   	push   ebx
c0024286:	e8 f5 f6 ff ff       	call   c0023980 <IDE::read(unsigned char, unsigned char)>
c002428b:	83 c4 10             	add    esp,0x10
c002428e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0024292:	80 fa 14             	cmp    dl,0x14
c0024295:	75 04                	jne    c002429b <IDE::detect()+0x2ad>
c0024297:	3c eb                	cmp    al,0xeb
c0024299:	eb 07                	jmp    c00242a2 <IDE::detect()+0x2b4>
c002429b:	3c 96                	cmp    al,0x96
c002429d:	75 b8                	jne    c0024257 <IDE::detect()+0x269>
c002429f:	80 fa 69             	cmp    dl,0x69
c00242a2:	75 b3                	jne    c0024257 <IDE::detect()+0x269>
c00242a4:	68 a1 00 00 00       	push   0xa1
c00242a9:	6a 07                	push   0x7
c00242ab:	56                   	push   esi
c00242ac:	53                   	push   ebx
c00242ad:	e8 0e f6 ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242b2:	5f                   	pop    edi
c00242b3:	58                   	pop    eax
c00242b4:	6a 00                	push   0x0
c00242b6:	68 40 42 0f 00       	push   0xf4240
c00242bb:	e8 23 a1 ff ff       	call   c001e3e3 <nanoSleep(unsigned long long)>
c00242c0:	83 c4 10             	add    esp,0x10
c00242c3:	b1 01                	mov    cl,0x1
c00242c5:	e9 4a fe ff ff       	jmp    c0024114 <IDE::detect()+0x126>
c00242ca:	81 c4 1c 02 00 00    	add    esp,0x21c
c00242d0:	5b                   	pop    ebx
c00242d1:	5e                   	pop    esi
c00242d2:	5f                   	pop    edi
c00242d3:	5d                   	pop    ebp
c00242d4:	c3                   	ret    
c00242d5:	90                   	nop

c00242d6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00242d6:	55                   	push   ebp
c00242d7:	57                   	push   edi
c00242d8:	56                   	push   esi
c00242d9:	53                   	push   ebx
c00242da:	83 ec 1c             	sub    esp,0x1c
c00242dd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00242e1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00242e5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00242e9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00242ed:	88 c3                	mov    bl,al
c00242ef:	84 c0                	test   al,al
c00242f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00242f5:	0f 84 67 01 00 00    	je     c0024462 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00242fb:	83 ec 0c             	sub    esp,0xc
c00242fe:	68 47 d6 02 c0       	push   0xc002d647
c0024303:	e8 ef e5 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0024308:	83 c4 10             	add    esp,0x10
c002430b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002430f:	3c 01                	cmp    al,0x1
c0024311:	75 17                	jne    c002432a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0024313:	83 ec 0c             	sub    esp,0xc
c0024316:	b3 13                	mov    bl,0x13
c0024318:	68 53 d6 02 c0       	push   0xc002d653
c002431d:	e8 d5 e5 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0024322:	83 c4 10             	add    esp,0x10
c0024325:	e9 25 01 00 00       	jmp    c002444f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002432a:	3c 02                	cmp    al,0x2
c002432c:	0f 85 ef 00 00 00    	jne    c0024421 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0024332:	d1 e6                	shl    esi,1
c0024334:	09 ee                	or     esi,ebp
c0024336:	52                   	push   edx
c0024337:	89 f0                	mov    eax,esi
c0024339:	6a 01                	push   0x1
c002433b:	0f b6 f0             	movzx  esi,al
c002433e:	c1 e6 06             	shl    esi,0x6
c0024341:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0024349:	50                   	push   eax
c002434a:	57                   	push   edi
c002434b:	e8 30 f6 ff ff       	call   c0023980 <IDE::read(unsigned char, unsigned char)>
c0024350:	83 c4 10             	add    esp,0x10
c0024353:	89 c6                	mov    esi,eax
c0024355:	a8 01                	test   al,0x1
c0024357:	74 12                	je     c002436b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0024359:	83 ec 0c             	sub    esp,0xc
c002435c:	b3 07                	mov    bl,0x7
c002435e:	68 68 d6 02 c0       	push   0xc002d668
c0024363:	e8 8f e5 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0024368:	83 c4 10             	add    esp,0x10
c002436b:	f7 c6 02 00 00 00    	test   esi,0x2
c0024371:	74 12                	je     c0024385 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0024373:	83 ec 0c             	sub    esp,0xc
c0024376:	b3 03                	mov    bl,0x3
c0024378:	68 86 d6 02 c0       	push   0xc002d686
c002437d:	e8 75 e5 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0024382:	83 c4 10             	add    esp,0x10
c0024385:	f7 c6 04 00 00 00    	test   esi,0x4
c002438b:	74 12                	je     c002439f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c002438d:	83 ec 0c             	sub    esp,0xc
c0024390:	b3 14                	mov    bl,0x14
c0024392:	68 a6 d6 02 c0       	push   0xc002d6a6
c0024397:	e8 5b e5 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c002439c:	83 c4 10             	add    esp,0x10
c002439f:	f7 c6 08 00 00 00    	test   esi,0x8
c00243a5:	74 12                	je     c00243b9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00243a7:	83 ec 0c             	sub    esp,0xc
c00243aa:	b3 03                	mov    bl,0x3
c00243ac:	68 86 d6 02 c0       	push   0xc002d686
c00243b1:	e8 41 e5 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00243b6:	83 c4 10             	add    esp,0x10
c00243b9:	f7 c6 10 00 00 00    	test   esi,0x10
c00243bf:	74 12                	je     c00243d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00243c1:	83 ec 0c             	sub    esp,0xc
c00243c4:	b3 15                	mov    bl,0x15
c00243c6:	68 be d6 02 c0       	push   0xc002d6be
c00243cb:	e8 27 e5 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00243d0:	83 c4 10             	add    esp,0x10
c00243d3:	f7 c6 20 00 00 00    	test   esi,0x20
c00243d9:	74 12                	je     c00243ed <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00243db:	83 ec 0c             	sub    esp,0xc
c00243de:	b3 03                	mov    bl,0x3
c00243e0:	68 86 d6 02 c0       	push   0xc002d686
c00243e5:	e8 0d e5 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00243ea:	83 c4 10             	add    esp,0x10
c00243ed:	f7 c6 40 00 00 00    	test   esi,0x40
c00243f3:	74 12                	je     c0024407 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00243f5:	83 ec 0c             	sub    esp,0xc
c00243f8:	b3 16                	mov    bl,0x16
c00243fa:	68 d8 d6 02 c0       	push   0xc002d6d8
c00243ff:	e8 f3 e4 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0024404:	83 c4 10             	add    esp,0x10
c0024407:	89 f0                	mov    eax,esi
c0024409:	84 c0                	test   al,al
c002440b:	79 42                	jns    c002444f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002440d:	83 ec 0c             	sub    esp,0xc
c0024410:	b3 0d                	mov    bl,0xd
c0024412:	68 f9 d6 02 c0       	push   0xc002d6f9
c0024417:	e8 db e4 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c002441c:	83 c4 10             	add    esp,0x10
c002441f:	eb 2e                	jmp    c002444f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024421:	3c 03                	cmp    al,0x3
c0024423:	75 14                	jne    c0024439 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0024425:	83 ec 0c             	sub    esp,0xc
c0024428:	b3 17                	mov    bl,0x17
c002442a:	68 0d d7 02 c0       	push   0xc002d70d
c002442f:	e8 c3 e4 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0024434:	83 c4 10             	add    esp,0x10
c0024437:	eb 16                	jmp    c002444f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024439:	3c 04                	cmp    al,0x4
c002443b:	75 12                	jne    c002444f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002443d:	83 ec 0c             	sub    esp,0xc
c0024440:	b3 08                	mov    bl,0x8
c0024442:	68 23 d7 02 c0       	push   0xc002d723
c0024447:	e8 ab e4 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c002444c:	83 c4 10             	add    esp,0x10
c002444f:	50                   	push   eax
c0024450:	50                   	push   eax
c0024451:	0f b6 c3             	movzx  eax,bl
c0024454:	50                   	push   eax
c0024455:	68 3b d7 02 c0       	push   0xc002d73b
c002445a:	e8 98 e4 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c002445f:	83 c4 10             	add    esp,0x10
c0024462:	83 c4 1c             	add    esp,0x1c
c0024465:	88 d8                	mov    al,bl
c0024467:	5b                   	pop    ebx
c0024468:	5e                   	pop    esi
c0024469:	5f                   	pop    edi
c002446a:	5d                   	pop    ebp
c002446b:	c3                   	ret    

c002446c <IDE::polling(unsigned char, unsigned int)>:
c002446c:	57                   	push   edi
c002446d:	56                   	push   esi
c002446e:	53                   	push   ebx
c002446f:	bb 04 00 00 00       	mov    ebx,0x4
c0024474:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0024478:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002447d:	52                   	push   edx
c002447e:	6a 0c                	push   0xc
c0024480:	56                   	push   esi
c0024481:	57                   	push   edi
c0024482:	e8 f9 f4 ff ff       	call   c0023980 <IDE::read(unsigned char, unsigned char)>
c0024487:	83 c4 10             	add    esp,0x10
c002448a:	4b                   	dec    ebx
c002448b:	75 f0                	jne    c002447d <IDE::polling(unsigned char, unsigned int)+0x11>
c002448d:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024492:	50                   	push   eax
c0024493:	6a 0c                	push   0xc
c0024495:	56                   	push   esi
c0024496:	57                   	push   edi
c0024497:	e8 e4 f4 ff ff       	call   c0023980 <IDE::read(unsigned char, unsigned char)>
c002449c:	83 c4 10             	add    esp,0x10
c002449f:	a8 01                	test   al,0x1
c00244a1:	74 12                	je     c00244b5 <IDE::polling(unsigned char, unsigned int)+0x49>
c00244a3:	83 ec 0c             	sub    esp,0xc
c00244a6:	68 55 d7 02 c0       	push   0xc002d755
c00244ab:	e8 47 e4 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00244b0:	83 c4 10             	add    esp,0x10
c00244b3:	eb 17                	jmp    c00244cc <IDE::polling(unsigned char, unsigned int)+0x60>
c00244b5:	a8 20                	test   al,0x20
c00244b7:	75 0f                	jne    c00244c8 <IDE::polling(unsigned char, unsigned int)+0x5c>
c00244b9:	4b                   	dec    ebx
c00244ba:	74 10                	je     c00244cc <IDE::polling(unsigned char, unsigned int)+0x60>
c00244bc:	84 c0                	test   al,al
c00244be:	78 d2                	js     c0024492 <IDE::polling(unsigned char, unsigned int)+0x26>
c00244c0:	a8 08                	test   al,0x8
c00244c2:	74 ce                	je     c0024492 <IDE::polling(unsigned char, unsigned int)+0x26>
c00244c4:	31 c0                	xor    eax,eax
c00244c6:	eb 06                	jmp    c00244ce <IDE::polling(unsigned char, unsigned int)+0x62>
c00244c8:	b0 01                	mov    al,0x1
c00244ca:	eb 02                	jmp    c00244ce <IDE::polling(unsigned char, unsigned int)+0x62>
c00244cc:	b0 02                	mov    al,0x2
c00244ce:	5b                   	pop    ebx
c00244cf:	5e                   	pop    esi
c00244d0:	5f                   	pop    edi
c00244d1:	c3                   	ret    

c00244d2 <SATABus::close(int, int, void*)>:
c00244d2:	31 c0                	xor    eax,eax
c00244d4:	c3                   	ret    
c00244d5:	90                   	nop

c00244d6 <SATABus::detect()>:
c00244d6:	c3                   	ret    
c00244d7:	90                   	nop

c00244d8 <SATABus::SATABus()>:
c00244d8:	83 ec 0c             	sub    esp,0xc
c00244db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244df:	83 ec 08             	sub    esp,0x8
c00244e2:	68 98 d7 02 c0       	push   0xc002d798
c00244e7:	50                   	push   eax
c00244e8:	e8 f1 fb fe ff       	call   c00140de <HardDiskController::HardDiskController(char const*)>
c00244ed:	83 c4 10             	add    esp,0x10
c00244f0:	ba 54 d8 02 c0       	mov    edx,0xc002d854
c00244f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244f9:	89 10                	mov    DWORD PTR [eax],edx
c00244fb:	83 ec 0c             	sub    esp,0xc
c00244fe:	6a 50                	push   0x50
c0024500:	e8 68 b7 fe ff       	call   c000fc6d <Phys::allocateContiguousPages(int)>
c0024505:	83 c4 10             	add    esp,0x10
c0024508:	89 c2                	mov    edx,eax
c002450a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002450e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024514:	83 ec 0c             	sub    esp,0xc
c0024517:	6a 50                	push   0x50
c0024519:	e8 d3 cf fe ff       	call   c00114f1 <Virt::allocateKernelVirtualPages(int)>
c002451e:	83 c4 10             	add    esp,0x10
c0024521:	89 c2                	mov    edx,eax
c0024523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024527:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002452d:	a1 90 f1 02 c0       	mov    eax,ds:0xc002f190
c0024532:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024536:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002453c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024540:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024546:	83 ec 0c             	sub    esp,0xc
c0024549:	6a 03                	push   0x3
c002454b:	6a 50                	push   0x50
c002454d:	51                   	push   ecx
c002454e:	52                   	push   edx
c002454f:	50                   	push   eax
c0024550:	e8 c9 da fe ff       	call   c001201e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0024555:	83 c4 20             	add    esp,0x20
c0024558:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002455c:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0024562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024566:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002456c:	83 ec 04             	sub    esp,0x4
c002456f:	52                   	push   edx
c0024570:	50                   	push   eax
c0024571:	68 bc d7 02 c0       	push   0xc002d7bc
c0024576:	e8 7c e3 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c002457b:	83 c4 10             	add    esp,0x10
c002457e:	90                   	nop
c002457f:	83 c4 0c             	add    esp,0xc
c0024582:	c3                   	ret    
c0024583:	90                   	nop

c0024584 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0024584:	83 ec 0c             	sub    esp,0xc
c0024587:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002458b:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002458e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0024591:	09 c2                	or     edx,eax
c0024593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024597:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002459d:	8b 08                	mov    ecx,DWORD PTR [eax]
c002459f:	31 c0                	xor    eax,eax
c00245a1:	c1 e9 08             	shr    ecx,0x8
c00245a4:	83 e1 0f             	and    ecx,0xf
c00245a7:	39 c8                	cmp    eax,ecx
c00245a9:	74 0a                	je     c00245b5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00245ab:	f6 c2 01             	test   dl,0x1
c00245ae:	74 18                	je     c00245c8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c00245b0:	d1 ea                	shr    edx,1
c00245b2:	40                   	inc    eax
c00245b3:	eb f2                	jmp    c00245a7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c00245b5:	83 ec 0c             	sub    esp,0xc
c00245b8:	68 e0 d7 02 c0       	push   0xc002d7e0
c00245bd:	e8 6b 5d ff ff       	call   c001a32d <Krnl::panic(char const*)>
c00245c2:	83 c4 10             	add    esp,0x10
c00245c5:	83 c8 ff             	or     eax,0xffffffff
c00245c8:	83 c4 0c             	add    esp,0xc
c00245cb:	c3                   	ret    

c00245cc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00245cc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00245d0:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00245d3:	89 c2                	mov    edx,eax
c00245d5:	c1 ea 08             	shr    edx,0x8
c00245d8:	83 e2 0f             	and    edx,0xf
c00245db:	fe ca                	dec    dl
c00245dd:	75 31                	jne    c0024610 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00245df:	83 e0 0f             	and    eax,0xf
c00245e2:	3c 03                	cmp    al,0x3
c00245e4:	75 2a                	jne    c0024610 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00245e6:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00245e9:	b8 02 00 00 00       	mov    eax,0x2
c00245ee:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00245f4:	74 1c                	je     c0024612 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00245f6:	b8 04 00 00 00       	mov    eax,0x4
c00245fb:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0024601:	74 0f                	je     c0024612 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024603:	31 c0                	xor    eax,eax
c0024605:	83 fa 03             	cmp    edx,0x3
c0024608:	0f 94 c0             	sete   al
c002460b:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002460f:	c3                   	ret    
c0024610:	31 c0                	xor    eax,eax
c0024612:	c3                   	ret    
c0024613:	90                   	nop

c0024614 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0024614:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024618:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002461b:	0f ba e2 0f          	bt     edx,0xf
c002461f:	72 f7                	jb     c0024618 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0024621:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024624:	83 ca 10             	or     edx,0x10
c0024627:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002462a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002462d:	83 ca 01             	or     edx,0x1
c0024630:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024633:	c3                   	ret    

c0024634 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0024634:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024638:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002463b:	83 e2 fe             	and    edx,0xfffffffe
c002463e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024641:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024644:	83 e2 ef             	and    edx,0xffffffef
c0024647:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002464a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002464d:	0f ba e2 0e          	bt     edx,0xe
c0024651:	72 f7                	jb     c002464a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024653:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024656:	0f ba e2 0f          	bt     edx,0xf
c002465a:	72 ee                	jb     c002464a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002465c:	c3                   	ret    
c002465d:	90                   	nop

c002465e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002465e:	55                   	push   ebp
c002465f:	57                   	push   edi
c0024660:	56                   	push   esi
c0024661:	53                   	push   ebx
c0024662:	83 ec 1c             	sub    esp,0x1c
c0024665:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024669:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002466d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024671:	53                   	push   ebx
c0024672:	89 fd                	mov    ebp,edi
c0024674:	56                   	push   esi
c0024675:	c1 e5 0a             	shl    ebp,0xa
c0024678:	e8 b7 ff ff ff       	call   c0024634 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002467d:	83 ec 0c             	sub    esp,0xc
c0024680:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0024686:	01 e8                	add    eax,ebp
c0024688:	89 03                	mov    DWORD PTR [ebx],eax
c002468a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002468c:	68 00 04 00 00       	push   0x400
c0024691:	6a 00                	push   0x0
c0024693:	50                   	push   eax
c0024694:	e8 b7 c0 fd ff       	call   c0000750 <memset>
c0024699:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c002469f:	89 fa                	mov    edx,edi
c00246a1:	01 e8                	add    eax,ebp
c00246a3:	c1 e7 0d             	shl    edi,0xd
c00246a6:	89 03                	mov    DWORD PTR [ebx],eax
c00246a8:	c1 e2 08             	shl    edx,0x8
c00246ab:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00246b2:	81 c2 00 80 00 00    	add    edx,0x8000
c00246b8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00246bc:	89 d0                	mov    eax,edx
c00246be:	83 c4 1c             	add    esp,0x1c
c00246c1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00246c7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00246ca:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00246cd:	68 00 01 00 00       	push   0x100
c00246d2:	6a 00                	push   0x0
c00246d4:	50                   	push   eax
c00246d5:	e8 76 c0 fd ff       	call   c0000750 <memset>
c00246da:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00246de:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00246e4:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c00246ea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00246ee:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00246f1:	83 c4 10             	add    esp,0x10
c00246f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00246fb:	31 ff                	xor    edi,edi
c00246fd:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0024703:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0024709:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002470d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024713:	83 c5 20             	add    ebp,0x20
c0024716:	01 f8                	add    eax,edi
c0024718:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002471b:	52                   	push   edx
c002471c:	68 00 01 00 00       	push   0x100
c0024721:	6a 00                	push   0x0
c0024723:	50                   	push   eax
c0024724:	e8 27 c0 fd ff       	call   c0000750 <memset>
c0024729:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002472d:	83 c4 10             	add    esp,0x10
c0024730:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0024736:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002473d:	01 f8                	add    eax,edi
c002473f:	81 c7 00 01 00 00    	add    edi,0x100
c0024745:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024748:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002474e:	75 b3                	jne    c0024703 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024750:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0024754:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0024758:	83 c4 1c             	add    esp,0x1c
c002475b:	5b                   	pop    ebx
c002475c:	5e                   	pop    esi
c002475d:	5f                   	pop    edi
c002475e:	5d                   	pop    ebp
c002475f:	e9 b0 fe ff ff       	jmp    c0024614 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0024764 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0024764:	55                   	push   ebp
c0024765:	57                   	push   edi
c0024766:	56                   	push   esi
c0024767:	53                   	push   ebx
c0024768:	31 db                	xor    ebx,ebx
c002476a:	83 ec 0c             	sub    esp,0xc
c002476d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024771:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024775:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0024778:	f7 c7 01 00 00 00    	test   edi,0x1
c002477e:	0f 84 aa 00 00 00    	je     c002482e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024784:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024788:	89 d8                	mov    eax,ebx
c002478a:	c1 e0 07             	shl    eax,0x7
c002478d:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0024794:	55                   	push   ebp
c0024795:	56                   	push   esi
c0024796:	e8 31 fe ff ff       	call   c00245cc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002479b:	5a                   	pop    edx
c002479c:	83 f8 01             	cmp    eax,0x1
c002479f:	59                   	pop    ecx
c00247a0:	75 30                	jne    c00247d2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c00247a2:	50                   	push   eax
c00247a3:	50                   	push   eax
c00247a4:	53                   	push   ebx
c00247a5:	68 05 d8 02 c0       	push   0xc002d805
c00247aa:	e8 48 e1 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00247af:	83 c4 0c             	add    esp,0xc
c00247b2:	53                   	push   ebx
c00247b3:	55                   	push   ebp
c00247b4:	56                   	push   esi
c00247b5:	e8 a4 fe ff ff       	call   c002465e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00247ba:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00247c1:	e8 c6 b0 fe ff       	call   c000f88c <malloc>
c00247c6:	89 c5                	mov    ebp,eax
c00247c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00247cb:	e8 24 0d 00 00       	call   c00254f4 <SATA::SATA()>
c00247d0:	eb 33                	jmp    c0024805 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c00247d2:	83 f8 04             	cmp    eax,0x4
c00247d5:	75 47                	jne    c002481e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c00247d7:	50                   	push   eax
c00247d8:	50                   	push   eax
c00247d9:	53                   	push   ebx
c00247da:	68 1c d8 02 c0       	push   0xc002d81c
c00247df:	e8 13 e1 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00247e4:	83 c4 0c             	add    esp,0xc
c00247e7:	53                   	push   ebx
c00247e8:	55                   	push   ebp
c00247e9:	56                   	push   esi
c00247ea:	e8 6f fe ff ff       	call   c002465e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00247ef:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00247f6:	e8 91 b0 fe ff       	call   c000f88c <malloc>
c00247fb:	89 c5                	mov    ebp,eax
c00247fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0024800:	e8 65 10 00 00       	call   c002586a <SATAPI::SATAPI()>
c0024805:	5a                   	pop    edx
c0024806:	59                   	pop    ecx
c0024807:	55                   	push   ebp
c0024808:	56                   	push   esi
c0024809:	e8 22 f5 fe ff       	call   c0013d30 <Device::addChild(Device*)>
c002480e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024811:	56                   	push   esi
c0024812:	6a 00                	push   0x0
c0024814:	53                   	push   ebx
c0024815:	55                   	push   ebp
c0024816:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024819:	83 c4 20             	add    esp,0x20
c002481c:	eb 10                	jmp    c002482e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c002481e:	50                   	push   eax
c002481f:	50                   	push   eax
c0024820:	53                   	push   ebx
c0024821:	68 35 d8 02 c0       	push   0xc002d835
c0024826:	e8 cc e0 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c002482b:	83 c4 10             	add    esp,0x10
c002482e:	d1 ef                	shr    edi,1
c0024830:	43                   	inc    ebx
c0024831:	83 fb 20             	cmp    ebx,0x20
c0024834:	0f 85 3e ff ff ff    	jne    c0024778 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002483a:	83 c4 0c             	add    esp,0xc
c002483d:	5b                   	pop    ebx
c002483e:	5e                   	pop    esi
c002483f:	5f                   	pop    edi
c0024840:	5d                   	pop    ebp
c0024841:	c3                   	ret    

c0024842 <SATABus::open(int, int, void*)>:
c0024842:	83 ec 14             	sub    esp,0x14
c0024845:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024849:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c002484f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024855:	52                   	push   edx
c0024856:	50                   	push   eax
c0024857:	e8 08 ff ff ff       	call   c0024764 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002485c:	31 c0                	xor    eax,eax
c002485e:	83 c4 1c             	add    esp,0x1c
c0024861:	c3                   	ret    

c0024862 <ATA::close(int, int, void*)>:
c0024862:	83 ec 0c             	sub    esp,0xc
c0024865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024869:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002486f:	85 c0                	test   eax,eax
c0024871:	74 0c                	je     c002487f <ATA::close(int, int, void*)+0x1d>
c0024873:	83 ec 0c             	sub    esp,0xc
c0024876:	8b 10                	mov    edx,DWORD PTR [eax]
c0024878:	50                   	push   eax
c0024879:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002487c:	83 c4 10             	add    esp,0x10
c002487f:	31 c0                	xor    eax,eax
c0024881:	83 c4 0c             	add    esp,0xc
c0024884:	c3                   	ret    
c0024885:	90                   	nop

c0024886 <ATA::powerSaving(PowerSavingLevel)>:
c0024886:	c3                   	ret    
c0024887:	90                   	nop

c0024888 <ATA::ATA()>:
c0024888:	83 ec 0c             	sub    esp,0xc
c002488b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002488f:	83 ec 04             	sub    esp,0x4
c0024892:	68 00 02 00 00       	push   0x200
c0024897:	68 1d d9 02 c0       	push   0xc002d91d
c002489c:	50                   	push   eax
c002489d:	e8 d4 f8 fe ff       	call   c0014176 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00248a2:	83 c4 10             	add    esp,0x10
c00248a5:	ba a0 d8 02 c0       	mov    edx,0xc002d8a0
c00248aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248ae:	89 10                	mov    DWORD PTR [eax],edx
c00248b0:	90                   	nop
c00248b1:	83 c4 0c             	add    esp,0xc
c00248b4:	c3                   	ret    
c00248b5:	90                   	nop

c00248b6 <ATA::flush(bool)>:
c00248b6:	53                   	push   ebx
c00248b7:	83 ec 08             	sub    esp,0x8
c00248ba:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00248bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00248c3:	19 c0                	sbb    eax,eax
c00248c5:	83 e0 fd             	and    eax,0xfffffffd
c00248c8:	05 ea 00 00 00       	add    eax,0xea
c00248cd:	50                   	push   eax
c00248ce:	6a 07                	push   0x7
c00248d0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00248d7:	50                   	push   eax
c00248d8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00248de:	e8 dd ef ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00248e3:	83 c4 0c             	add    esp,0xc
c00248e6:	6a 00                	push   0x0
c00248e8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00248ef:	50                   	push   eax
c00248f0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00248f6:	e8 71 fb ff ff       	call   c002446c <IDE::polling(unsigned char, unsigned int)>
c00248fb:	83 c4 18             	add    esp,0x18
c00248fe:	5b                   	pop    ebx
c00248ff:	c3                   	ret    

c0024900 <ATA::readyForCommand()>:
c0024900:	56                   	push   esi
c0024901:	53                   	push   ebx
c0024902:	31 db                	xor    ebx,ebx
c0024904:	50                   	push   eax
c0024905:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024909:	50                   	push   eax
c002490a:	6a 0c                	push   0xc
c002490c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024913:	50                   	push   eax
c0024914:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002491a:	e8 61 f0 ff ff       	call   c0023980 <IDE::read(unsigned char, unsigned char)>
c002491f:	83 c4 10             	add    esp,0x10
c0024922:	a8 88                	test   al,0x88
c0024924:	74 23                	je     c0024949 <ATA::readyForCommand()+0x49>
c0024926:	43                   	inc    ebx
c0024927:	83 fb 63             	cmp    ebx,0x63
c002492a:	7e dd                	jle    c0024909 <ATA::readyForCommand()+0x9>
c002492c:	51                   	push   ecx
c002492d:	51                   	push   ecx
c002492e:	6a 00                	push   0x0
c0024930:	68 40 42 0f 00       	push   0xf4240
c0024935:	e8 a9 9a ff ff       	call   c001e3e3 <nanoSleep(unsigned long long)>
c002493a:	83 c4 10             	add    esp,0x10
c002493d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024943:	75 c4                	jne    c0024909 <ATA::readyForCommand()+0x9>
c0024945:	31 c0                	xor    eax,eax
c0024947:	eb 02                	jmp    c002494b <ATA::readyForCommand()+0x4b>
c0024949:	b0 01                	mov    al,0x1
c002494b:	5a                   	pop    edx
c002494c:	5b                   	pop    ebx
c002494d:	5e                   	pop    esi
c002494e:	c3                   	ret    
c002494f:	90                   	nop

c0024950 <ATA::access(unsigned long long, int, void*, bool)>:
c0024950:	55                   	push   ebp
c0024951:	57                   	push   edi
c0024952:	56                   	push   esi
c0024953:	53                   	push   ebx
c0024954:	83 ec 2c             	sub    esp,0x2c
c0024957:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002495b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002495f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024963:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024967:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002496b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002496f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024973:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024979:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002497d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024983:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024987:	c1 e0 06             	shl    eax,0x6
c002498a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024992:	74 5d                	je     c00249f1 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024994:	89 fa                	mov    edx,edi
c0024996:	89 f0                	mov    eax,esi
c0024998:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002499c:	c1 ea 1c             	shr    edx,0x1c
c002499f:	89 d1                	mov    ecx,edx
c00249a1:	09 c1                	or     ecx,eax
c00249a3:	74 25                	je     c00249ca <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00249a5:	31 ed                	xor    ebp,ebp
c00249a7:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00249ae:	89 fa                	mov    edx,edi
c00249b0:	89 f0                	mov    eax,esi
c00249b2:	0f ad d0             	shrd   eax,edx,cl
c00249b5:	d3 ea                	shr    edx,cl
c00249b7:	f6 c1 20             	test   cl,0x20
c00249ba:	74 02                	je     c00249be <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00249bc:	89 d0                	mov    eax,edx
c00249be:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00249c2:	45                   	inc    ebp
c00249c3:	83 fd 06             	cmp    ebp,0x6
c00249c6:	75 df                	jne    c00249a7 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00249c8:	eb 76                	jmp    c0024a40 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00249ca:	89 f0                	mov    eax,esi
c00249cc:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00249d1:	89 fa                	mov    edx,edi
c00249d3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00249da:	0f ac d0 10          	shrd   eax,edx,0x10
c00249de:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00249e3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00249e7:	c1 ee 18             	shr    esi,0x18
c00249ea:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00249ef:	eb 56                	jmp    c0024a47 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00249f1:	6a 00                	push   0x0
c00249f3:	6a 3f                	push   0x3f
c00249f5:	57                   	push   edi
c00249f6:	56                   	push   esi
c00249f7:	e8 28 29 00 00       	call   c0027324 <__umoddi3>
c00249fc:	83 c4 10             	add    esp,0x10
c00249ff:	40                   	inc    eax
c0024a00:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024a04:	6a 00                	push   0x0
c0024a06:	68 f0 03 00 00       	push   0x3f0
c0024a0b:	57                   	push   edi
c0024a0c:	56                   	push   esi
c0024a0d:	e8 12 28 00 00       	call   c0027224 <__udivdi3>
c0024a12:	83 c4 10             	add    esp,0x10
c0024a15:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024a1a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024a21:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024a26:	6a 00                	push   0x0
c0024a28:	6a 3f                	push   0x3f
c0024a2a:	57                   	push   edi
c0024a2b:	56                   	push   esi
c0024a2c:	e8 f3 27 00 00       	call   c0027224 <__udivdi3>
c0024a31:	83 c4 10             	add    esp,0x10
c0024a34:	89 c6                	mov    esi,eax
c0024a36:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024a3b:	83 e6 0f             	and    esi,0xf
c0024a3e:	eb 07                	jmp    c0024a47 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024a40:	31 f6                	xor    esi,esi
c0024a42:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024a47:	bf 01 00 00 00       	mov    edi,0x1
c0024a4c:	50                   	push   eax
c0024a4d:	6a 00                	push   0x0
c0024a4f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a56:	50                   	push   eax
c0024a57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024a5b:	e8 6c f0 ff ff       	call   c0023acc <IDE::enableIRQs(unsigned char, bool)>
c0024a60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a63:	e8 98 fe ff ff       	call   c0024900 <ATA::readyForCommand()>
c0024a68:	83 c4 10             	add    esp,0x10
c0024a6b:	84 c0                	test   al,al
c0024a6d:	0f 84 5a 02 00 00    	je     c0024ccd <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024a73:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024a79:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024a7f:	c1 e0 04             	shl    eax,0x4
c0024a82:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024a89:	09 c6                	or     esi,eax
c0024a8b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024a90:	75 05                	jne    c0024a97 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024a92:	83 ce a0             	or     esi,0xffffffa0
c0024a95:	eb 03                	jmp    c0024a9a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024a97:	83 ce e0             	or     esi,0xffffffe0
c0024a9a:	89 f0                	mov    eax,esi
c0024a9c:	0f b6 f0             	movzx  esi,al
c0024a9f:	56                   	push   esi
c0024aa0:	6a 06                	push   0x6
c0024aa2:	51                   	push   ecx
c0024aa3:	52                   	push   edx
c0024aa4:	e8 17 ee ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024aa9:	83 c4 10             	add    esp,0x10
c0024aac:	6a 00                	push   0x0
c0024aae:	6a 01                	push   0x1
c0024ab0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ab7:	50                   	push   eax
c0024ab8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024abe:	e8 fd ed ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ac3:	83 c4 10             	add    esp,0x10
c0024ac6:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024acb:	75 6e                	jne    c0024b3b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024acd:	6a 00                	push   0x0
c0024acf:	6a 08                	push   0x8
c0024ad1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ad8:	50                   	push   eax
c0024ad9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024adf:	e8 dc ed ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ae4:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024ae9:	50                   	push   eax
c0024aea:	6a 09                	push   0x9
c0024aec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024af3:	50                   	push   eax
c0024af4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024afa:	e8 c1 ed ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024aff:	83 c4 20             	add    esp,0x20
c0024b02:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024b07:	50                   	push   eax
c0024b08:	6a 0a                	push   0xa
c0024b0a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b11:	50                   	push   eax
c0024b12:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b18:	e8 a3 ed ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b1d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024b22:	50                   	push   eax
c0024b23:	6a 0b                	push   0xb
c0024b25:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b2c:	50                   	push   eax
c0024b2d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b33:	e8 88 ed ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b38:	83 c4 20             	add    esp,0x20
c0024b3b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024b40:	50                   	push   eax
c0024b41:	6a 02                	push   0x2
c0024b43:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b4a:	50                   	push   eax
c0024b4b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b51:	e8 6a ed ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b56:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024b5b:	50                   	push   eax
c0024b5c:	6a 03                	push   0x3
c0024b5e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b65:	50                   	push   eax
c0024b66:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b6c:	e8 4f ed ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b71:	83 c4 20             	add    esp,0x20
c0024b74:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024b79:	50                   	push   eax
c0024b7a:	6a 04                	push   0x4
c0024b7c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b83:	50                   	push   eax
c0024b84:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b8a:	e8 31 ed ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b8f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024b94:	50                   	push   eax
c0024b95:	6a 05                	push   0x5
c0024b97:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b9e:	50                   	push   eax
c0024b9f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ba5:	e8 16 ed ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024baa:	83 c4 20             	add    esp,0x20
c0024bad:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024bb2:	0f 94 c0             	sete   al
c0024bb5:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024bba:	74 09                	je     c0024bc5 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024bbc:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024bc3:	eb 07                	jmp    c0024bcc <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024bc5:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024bcc:	0f b6 c0             	movzx  eax,al
c0024bcf:	50                   	push   eax
c0024bd0:	6a 07                	push   0x7
c0024bd2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bd9:	50                   	push   eax
c0024bda:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024be0:	e8 db ec ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024be5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024be9:	83 c4 10             	add    esp,0x10
c0024bec:	85 f6                	test   esi,esi
c0024bee:	0f 84 ba 00 00 00    	je     c0024cae <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024bf4:	50                   	push   eax
c0024bf5:	6a 01                	push   0x1
c0024bf7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bfe:	50                   	push   eax
c0024bff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c05:	e8 62 f8 ff ff       	call   c002446c <IDE::polling(unsigned char, unsigned int)>
c0024c0a:	83 c4 10             	add    esp,0x10
c0024c0d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024c13:	84 c0                	test   al,al
c0024c15:	74 2c                	je     c0024c43 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024c17:	0f b6 f8             	movzx  edi,al
c0024c1a:	0f b6 d2             	movzx  edx,dl
c0024c1d:	57                   	push   edi
c0024c1e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024c25:	50                   	push   eax
c0024c26:	52                   	push   edx
c0024c27:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c2d:	e8 a4 f6 ff ff       	call   c00242d6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024c32:	c7 04 24 78 d8 02 c0 	mov    DWORD PTR [esp],0xc002d878
c0024c39:	e8 b9 dc fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0024c3e:	e9 87 00 00 00       	jmp    c0024cca <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024c43:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024c48:	74 33                	je     c0024c7d <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024c4a:	31 ed                	xor    ebp,ebp
c0024c4c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024c50:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024c54:	50                   	push   eax
c0024c55:	50                   	push   eax
c0024c56:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c5d:	50                   	push   eax
c0024c5e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c64:	e8 45 ec ff ff       	call   c00238ae <IDE::getBase(unsigned char)>
c0024c69:	89 c2                	mov    edx,eax
c0024c6b:	89 f8                	mov    eax,edi
c0024c6d:	66 ef                	out    dx,ax
c0024c6f:	45                   	inc    ebp
c0024c70:	83 c4 10             	add    esp,0x10
c0024c73:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024c79:	75 d1                	jne    c0024c4c <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024c7b:	eb 23                	jmp    c0024ca0 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024c7d:	0f b6 d2             	movzx  edx,dl
c0024c80:	51                   	push   ecx
c0024c81:	51                   	push   ecx
c0024c82:	52                   	push   edx
c0024c83:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c89:	e8 20 ec ff ff       	call   c00238ae <IDE::getBase(unsigned char)>
c0024c8e:	b9 00 01 00 00       	mov    ecx,0x100
c0024c93:	89 c2                	mov    edx,eax
c0024c95:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024c99:	fc                   	cld    
c0024c9a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024c9d:	83 c4 10             	add    esp,0x10
c0024ca0:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024ca8:	4e                   	dec    esi
c0024ca9:	e9 3e ff ff ff       	jmp    c0024bec <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024cae:	31 ff                	xor    edi,edi
c0024cb0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024cb5:	74 16                	je     c0024ccd <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024cb7:	50                   	push   eax
c0024cb8:	50                   	push   eax
c0024cb9:	31 c0                	xor    eax,eax
c0024cbb:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024cc0:	0f 94 c0             	sete   al
c0024cc3:	50                   	push   eax
c0024cc4:	53                   	push   ebx
c0024cc5:	e8 ec fb ff ff       	call   c00248b6 <ATA::flush(bool)>
c0024cca:	83 c4 10             	add    esp,0x10
c0024ccd:	83 c4 2c             	add    esp,0x2c
c0024cd0:	89 f8                	mov    eax,edi
c0024cd2:	5b                   	pop    ebx
c0024cd3:	5e                   	pop    esi
c0024cd4:	5f                   	pop    edi
c0024cd5:	5d                   	pop    ebp
c0024cd6:	c3                   	ret    
c0024cd7:	90                   	nop

c0024cd8 <ATA::read(unsigned long long, int, void*)>:
c0024cd8:	57                   	push   edi
c0024cd9:	b8 04 00 00 00       	mov    eax,0x4
c0024cde:	56                   	push   esi
c0024cdf:	53                   	push   ebx
c0024ce0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024ce4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024ce8:	8d 7a ff             	lea    edi,[edx-0x1]
c0024ceb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024cef:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024cf3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024cf9:	77 25                	ja     c0024d20 <ATA::read(unsigned long long, int, void*)+0x48>
c0024cfb:	b8 06 00 00 00       	mov    eax,0x6
c0024d00:	85 f6                	test   esi,esi
c0024d02:	74 1c                	je     c0024d20 <ATA::read(unsigned long long, int, void*)+0x48>
c0024d04:	50                   	push   eax
c0024d05:	50                   	push   eax
c0024d06:	6a 00                	push   0x0
c0024d08:	56                   	push   esi
c0024d09:	52                   	push   edx
c0024d0a:	53                   	push   ebx
c0024d0b:	51                   	push   ecx
c0024d0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d10:	e8 3b fc ff ff       	call   c0024950 <ATA::access(unsigned long long, int, void*, bool)>
c0024d15:	83 c4 20             	add    esp,0x20
c0024d18:	85 c0                	test   eax,eax
c0024d1a:	0f 95 c0             	setne  al
c0024d1d:	0f b6 c0             	movzx  eax,al
c0024d20:	5b                   	pop    ebx
c0024d21:	5e                   	pop    esi
c0024d22:	5f                   	pop    edi
c0024d23:	c3                   	ret    

c0024d24 <ATA::write(unsigned long long, int, void*)>:
c0024d24:	57                   	push   edi
c0024d25:	b8 04 00 00 00       	mov    eax,0x4
c0024d2a:	56                   	push   esi
c0024d2b:	53                   	push   ebx
c0024d2c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024d30:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d34:	8d 7a ff             	lea    edi,[edx-0x1]
c0024d37:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024d3b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024d3f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024d45:	77 25                	ja     c0024d6c <ATA::write(unsigned long long, int, void*)+0x48>
c0024d47:	b8 06 00 00 00       	mov    eax,0x6
c0024d4c:	85 f6                	test   esi,esi
c0024d4e:	74 1c                	je     c0024d6c <ATA::write(unsigned long long, int, void*)+0x48>
c0024d50:	50                   	push   eax
c0024d51:	50                   	push   eax
c0024d52:	6a 01                	push   0x1
c0024d54:	56                   	push   esi
c0024d55:	52                   	push   edx
c0024d56:	53                   	push   ebx
c0024d57:	51                   	push   ecx
c0024d58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d5c:	e8 ef fb ff ff       	call   c0024950 <ATA::access(unsigned long long, int, void*, bool)>
c0024d61:	83 c4 20             	add    esp,0x20
c0024d64:	85 c0                	test   eax,eax
c0024d66:	0f 95 c0             	setne  al
c0024d69:	0f b6 c0             	movzx  eax,al
c0024d6c:	5b                   	pop    ebx
c0024d6d:	5e                   	pop    esi
c0024d6e:	5f                   	pop    edi
c0024d6f:	c3                   	ret    

c0024d70 <ATA::detectCHS()>:
c0024d70:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024d74:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024d7a:	c1 e0 06             	shl    eax,0x6
c0024d7d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024d83:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024d8d:	c7 44 24 04 83 d8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d883
c0024d95:	e9 93 55 ff ff       	jmp    c001a32d <Krnl::panic(char const*)>

c0024d9a <ATA::open(int, int, void*)>:
c0024d9a:	53                   	push   ebx
c0024d9b:	83 ec 08             	sub    esp,0x8
c0024d9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024da2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024da6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024daa:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024db0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024db6:	c1 e0 06             	shl    eax,0x6
c0024db9:	01 d0                	add    eax,edx
c0024dbb:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024dc2:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024dc8:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024dcf:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024dd9:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024ddf:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024de6:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024ded:	75 0c                	jne    c0024dfb <ATA::open(int, int, void*)+0x61>
c0024def:	83 ec 0c             	sub    esp,0xc
c0024df2:	53                   	push   ebx
c0024df3:	e8 78 ff ff ff       	call   c0024d70 <ATA::detectCHS()>
c0024df8:	83 c4 10             	add    esp,0x10
c0024dfb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024e01:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024e07:	c1 e0 06             	shl    eax,0x6
c0024e0a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024e11:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024e1b:	d1 e8                	shr    eax,1
c0024e1d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024e23:	6a 04                	push   0x4
c0024e25:	6a 0c                	push   0xc
c0024e27:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e2e:	50                   	push   eax
c0024e2f:	52                   	push   edx
c0024e30:	e8 8b ea ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e35:	90                   	nop
c0024e36:	90                   	nop
c0024e37:	6a 00                	push   0x0
c0024e39:	6a 0c                	push   0xc
c0024e3b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e42:	50                   	push   eax
c0024e43:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e49:	e8 72 ea ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e4e:	83 c4 14             	add    esp,0x14
c0024e51:	53                   	push   ebx
c0024e52:	e8 87 f3 fe ff       	call   c00141de <PhysicalDisk::startCache()>
c0024e57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024e5a:	e8 39 16 ff ff       	call   c0016498 <createPartitionsForDisk(PhysicalDisk*)>
c0024e5f:	31 c0                	xor    eax,eax
c0024e61:	83 c4 18             	add    esp,0x18
c0024e64:	5b                   	pop    ebx
c0024e65:	c3                   	ret    

c0024e66 <ATAPI::write(unsigned long long, int, void*)>:
c0024e66:	b8 03 00 00 00       	mov    eax,0x3
c0024e6b:	c3                   	ret    

c0024e6c <ATAPI::close(int, int, void*)>:
c0024e6c:	83 ec 0c             	sub    esp,0xc
c0024e6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e73:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024e79:	85 c0                	test   eax,eax
c0024e7b:	74 0c                	je     c0024e89 <ATAPI::close(int, int, void*)+0x1d>
c0024e7d:	83 ec 0c             	sub    esp,0xc
c0024e80:	8b 10                	mov    edx,DWORD PTR [eax]
c0024e82:	50                   	push   eax
c0024e83:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024e86:	83 c4 10             	add    esp,0x10
c0024e89:	31 c0                	xor    eax,eax
c0024e8b:	83 c4 0c             	add    esp,0xc
c0024e8e:	c3                   	ret    
c0024e8f:	90                   	nop

c0024e90 <ATAPI::ATAPI()>:
c0024e90:	83 ec 0c             	sub    esp,0xc
c0024e93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e97:	83 ec 04             	sub    esp,0x4
c0024e9a:	68 00 08 00 00       	push   0x800
c0024e9f:	68 bd d9 02 c0       	push   0xc002d9bd
c0024ea4:	50                   	push   eax
c0024ea5:	e8 cc f2 fe ff       	call   c0014176 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024eaa:	83 c4 10             	add    esp,0x10
c0024ead:	ba d8 d8 02 c0       	mov    edx,0xc002d8d8
c0024eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024eb6:	89 10                	mov    DWORD PTR [eax],edx
c0024eb8:	90                   	nop
c0024eb9:	83 c4 0c             	add    esp,0xc
c0024ebc:	c3                   	ret    
c0024ebd:	90                   	nop

c0024ebe <ATAPI::readyForCommand()>:
c0024ebe:	56                   	push   esi
c0024ebf:	53                   	push   ebx
c0024ec0:	31 db                	xor    ebx,ebx
c0024ec2:	50                   	push   eax
c0024ec3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024ec7:	50                   	push   eax
c0024ec8:	6a 0c                	push   0xc
c0024eca:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024ed1:	50                   	push   eax
c0024ed2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024ed8:	e8 a3 ea ff ff       	call   c0023980 <IDE::read(unsigned char, unsigned char)>
c0024edd:	83 c4 10             	add    esp,0x10
c0024ee0:	a8 88                	test   al,0x88
c0024ee2:	74 23                	je     c0024f07 <ATAPI::readyForCommand()+0x49>
c0024ee4:	43                   	inc    ebx
c0024ee5:	83 fb 63             	cmp    ebx,0x63
c0024ee8:	7e dd                	jle    c0024ec7 <ATAPI::readyForCommand()+0x9>
c0024eea:	51                   	push   ecx
c0024eeb:	51                   	push   ecx
c0024eec:	6a 00                	push   0x0
c0024eee:	68 40 42 0f 00       	push   0xf4240
c0024ef3:	e8 eb 94 ff ff       	call   c001e3e3 <nanoSleep(unsigned long long)>
c0024ef8:	83 c4 10             	add    esp,0x10
c0024efb:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024f01:	75 c4                	jne    c0024ec7 <ATAPI::readyForCommand()+0x9>
c0024f03:	31 c0                	xor    eax,eax
c0024f05:	eb 02                	jmp    c0024f09 <ATAPI::readyForCommand()+0x4b>
c0024f07:	b0 01                	mov    al,0x1
c0024f09:	5a                   	pop    edx
c0024f0a:	5b                   	pop    ebx
c0024f0b:	5e                   	pop    esi
c0024f0c:	c3                   	ret    
c0024f0d:	90                   	nop

c0024f0e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024f0e:	55                   	push   ebp
c0024f0f:	57                   	push   edi
c0024f10:	56                   	push   esi
c0024f11:	53                   	push   ebx
c0024f12:	83 ec 20             	sub    esp,0x20
c0024f15:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024f19:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024f1d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024f21:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024f25:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024f29:	6a 01                	push   0x1
c0024f2b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f32:	50                   	push   eax
c0024f33:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f39:	e8 8e eb ff ff       	call   c0023acc <IDE::enableIRQs(unsigned char, bool)>
c0024f3e:	5e                   	pop    esi
c0024f3f:	58                   	pop    eax
c0024f40:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f47:	50                   	push   eax
c0024f48:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f4e:	e8 47 e9 ff ff       	call   c002389a <IDE::prepareInterrupt(unsigned char)>
c0024f53:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024f56:	e8 63 ff ff ff       	call   c0024ebe <ATAPI::readyForCommand()>
c0024f5b:	83 c4 10             	add    esp,0x10
c0024f5e:	84 c0                	test   al,al
c0024f60:	75 0a                	jne    c0024f6c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024f62:	bb 01 00 00 00       	mov    ebx,0x1
c0024f67:	e9 57 02 00 00       	jmp    c00251c3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024f6c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024f72:	c1 e0 04             	shl    eax,0x4
c0024f75:	0f b6 c0             	movzx  eax,al
c0024f78:	50                   	push   eax
c0024f79:	6a 06                	push   0x6
c0024f7b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f82:	50                   	push   eax
c0024f83:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f89:	e8 32 e9 ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f8e:	6a 00                	push   0x0
c0024f90:	6a 01                	push   0x1
c0024f92:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f99:	50                   	push   eax
c0024f9a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fa0:	e8 1b e9 ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024fa5:	83 c4 20             	add    esp,0x20
c0024fa8:	0f b6 c3             	movzx  eax,bl
c0024fab:	0f b6 df             	movzx  ebx,bh
c0024fae:	50                   	push   eax
c0024faf:	6a 04                	push   0x4
c0024fb1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fb8:	50                   	push   eax
c0024fb9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fbf:	e8 fc e8 ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024fc4:	53                   	push   ebx
c0024fc5:	6a 05                	push   0x5
c0024fc7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fce:	50                   	push   eax
c0024fcf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fd5:	e8 e6 e8 ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024fda:	83 c4 20             	add    esp,0x20
c0024fdd:	68 a0 00 00 00       	push   0xa0
c0024fe2:	6a 07                	push   0x7
c0024fe4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024feb:	50                   	push   eax
c0024fec:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ff2:	e8 c9 e8 ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ff7:	83 c4 0c             	add    esp,0xc
c0024ffa:	6a 01                	push   0x1
c0024ffc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025003:	50                   	push   eax
c0025004:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002500a:	e8 5d f4 ff ff       	call   c002446c <IDE::polling(unsigned char, unsigned int)>
c002500f:	83 c4 10             	add    esp,0x10
c0025012:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0025018:	84 c0                	test   al,al
c002501a:	74 23                	je     c002503f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002501c:	0f b6 d8             	movzx  ebx,al
c002501f:	0f b6 d2             	movzx  edx,dl
c0025022:	53                   	push   ebx
c0025023:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002502a:	50                   	push   eax
c002502b:	52                   	push   edx
c002502c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025032:	e8 9f f2 ff ff       	call   c00242d6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0025037:	83 c4 10             	add    esp,0x10
c002503a:	e9 84 01 00 00       	jmp    c00251c3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002503f:	0f b6 d2             	movzx  edx,dl
c0025042:	53                   	push   ebx
c0025043:	53                   	push   ebx
c0025044:	52                   	push   edx
c0025045:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002504b:	e8 5e e8 ff ff       	call   c00238ae <IDE::getBase(unsigned char)>
c0025050:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0025054:	b9 06 00 00 00       	mov    ecx,0x6
c0025059:	89 c2                	mov    edx,eax
c002505b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002505e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0025062:	83 c4 10             	add    esp,0x10
c0025065:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002506b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025072:	85 db                	test   ebx,ebx
c0025074:	0f 84 ec 00 00 00    	je     c0025166 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002507a:	51                   	push   ecx
c002507b:	51                   	push   ecx
c002507c:	52                   	push   edx
c002507d:	50                   	push   eax
c002507e:	e8 ab e9 ff ff       	call   c0023a2e <IDE::waitInterrupt(unsigned char)>
c0025083:	83 c4 10             	add    esp,0x10
c0025086:	84 c0                	test   al,al
c0025088:	0f 84 d4 fe ff ff    	je     c0024f62 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002508e:	56                   	push   esi
c002508f:	56                   	push   esi
c0025090:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025097:	50                   	push   eax
c0025098:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002509e:	e8 f7 e7 ff ff       	call   c002389a <IDE::prepareInterrupt(unsigned char)>
c00250a3:	83 c4 0c             	add    esp,0xc
c00250a6:	6a 04                	push   0x4
c00250a8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250af:	50                   	push   eax
c00250b0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250b6:	e8 c5 e8 ff ff       	call   c0023980 <IDE::read(unsigned char, unsigned char)>
c00250bb:	83 c4 0c             	add    esp,0xc
c00250be:	89 c6                	mov    esi,eax
c00250c0:	6a 05                	push   0x5
c00250c2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250c9:	50                   	push   eax
c00250ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250d0:	e8 ab e8 ff ff       	call   c0023980 <IDE::read(unsigned char, unsigned char)>
c00250d5:	89 f1                	mov    ecx,esi
c00250d7:	0f b6 c0             	movzx  eax,al
c00250da:	0f b6 f1             	movzx  esi,cl
c00250dd:	c1 e0 08             	shl    eax,0x8
c00250e0:	09 c6                	or     esi,eax
c00250e2:	d1 fe                	sar    esi,1
c00250e4:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00250e8:	83 c4 10             	add    esp,0x10
c00250eb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00250f0:	74 41                	je     c0025133 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00250f2:	31 c9                	xor    ecx,ecx
c00250f4:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00250fa:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025101:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0025105:	75 0a                	jne    c0025111 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0025107:	01 c9                	add    ecx,ecx
c0025109:	01 cd                	add    ebp,ecx
c002510b:	4b                   	dec    ebx
c002510c:	e9 54 ff ff ff       	jmp    c0025065 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0025111:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0025116:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002511a:	51                   	push   ecx
c002511b:	51                   	push   ecx
c002511c:	52                   	push   edx
c002511d:	50                   	push   eax
c002511e:	e8 8b e7 ff ff       	call   c00238ae <IDE::getBase(unsigned char)>
c0025123:	89 c2                	mov    edx,eax
c0025125:	89 f0                	mov    eax,esi
c0025127:	66 ef                	out    dx,ax
c0025129:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002512d:	83 c4 10             	add    esp,0x10
c0025130:	41                   	inc    ecx
c0025131:	eb c1                	jmp    c00250f4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0025133:	31 f6                	xor    esi,esi
c0025135:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002513b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025142:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0025146:	75 06                	jne    c002514e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0025148:	01 f6                	add    esi,esi
c002514a:	01 f5                	add    ebp,esi
c002514c:	eb bd                	jmp    c002510b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002514e:	51                   	push   ecx
c002514f:	51                   	push   ecx
c0025150:	52                   	push   edx
c0025151:	50                   	push   eax
c0025152:	e8 57 e7 ff ff       	call   c00238ae <IDE::getBase(unsigned char)>
c0025157:	89 c2                	mov    edx,eax
c0025159:	66 ed                	in     ax,dx
c002515b:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0025160:	83 c4 10             	add    esp,0x10
c0025163:	46                   	inc    esi
c0025164:	eb cf                	jmp    c0025135 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0025166:	51                   	push   ecx
c0025167:	51                   	push   ecx
c0025168:	52                   	push   edx
c0025169:	50                   	push   eax
c002516a:	e8 bf e8 ff ff       	call   c0023a2e <IDE::waitInterrupt(unsigned char)>
c002516f:	83 c4 10             	add    esp,0x10
c0025172:	84 c0                	test   al,al
c0025174:	0f 84 e8 fd ff ff    	je     c0024f62 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002517a:	bb a0 86 01 00       	mov    ebx,0x186a0
c002517f:	52                   	push   edx
c0025180:	52                   	push   edx
c0025181:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025188:	50                   	push   eax
c0025189:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002518f:	e8 06 e7 ff ff       	call   c002389a <IDE::prepareInterrupt(unsigned char)>
c0025194:	83 c4 10             	add    esp,0x10
c0025197:	50                   	push   eax
c0025198:	50                   	push   eax
c0025199:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00251a0:	50                   	push   eax
c00251a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00251a7:	e8 02 e7 ff ff       	call   c00238ae <IDE::getBase(unsigned char)>
c00251ac:	8d 50 07             	lea    edx,[eax+0x7]
c00251af:	ec                   	in     al,dx
c00251b0:	83 c4 10             	add    esp,0x10
c00251b3:	a8 88                	test   al,0x88
c00251b5:	74 0a                	je     c00251c1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00251b7:	4b                   	dec    ebx
c00251b8:	75 dd                	jne    c0025197 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00251ba:	bb 02 00 00 00       	mov    ebx,0x2
c00251bf:	eb 02                	jmp    c00251c3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00251c1:	31 db                	xor    ebx,ebx
c00251c3:	83 c4 1c             	add    esp,0x1c
c00251c6:	89 d8                	mov    eax,ebx
c00251c8:	5b                   	pop    ebx
c00251c9:	5e                   	pop    esi
c00251ca:	5f                   	pop    edi
c00251cb:	5d                   	pop    ebp
c00251cc:	c3                   	ret    
c00251cd:	90                   	nop

c00251ce <ATAPI::diskRemoved()>:
c00251ce:	83 ec 18             	sub    esp,0x18
c00251d1:	68 c9 d9 02 c0       	push   0xc002d9c9
c00251d6:	e8 1c d7 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00251db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251df:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00251e6:	83 c4 1c             	add    esp,0x1c
c00251e9:	c3                   	ret    

c00251ea <ATAPI::eject()>:
c00251ea:	57                   	push   edi
c00251eb:	b9 03 00 00 00       	mov    ecx,0x3
c00251f0:	53                   	push   ebx
c00251f1:	83 ec 14             	sub    esp,0x14
c00251f4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00251f8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00251fc:	fc                   	cld    
c00251fd:	31 c0                	xor    eax,eax
c00251ff:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025201:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025206:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002520b:	50                   	push   eax
c002520c:	50                   	push   eax
c002520d:	6a 00                	push   0x0
c002520f:	6a 00                	push   0x0
c0025211:	6a 00                	push   0x0
c0025213:	6a 02                	push   0x2
c0025215:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025219:	50                   	push   eax
c002521a:	53                   	push   ebx
c002521b:	e8 ee fc ff ff       	call   c0024f0e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025220:	83 c4 14             	add    esp,0x14
c0025223:	53                   	push   ebx
c0025224:	e8 a5 ff ff ff       	call   c00251ce <ATAPI::diskRemoved()>
c0025229:	83 c4 24             	add    esp,0x24
c002522c:	31 c0                	xor    eax,eax
c002522e:	5b                   	pop    ebx
c002522f:	5f                   	pop    edi
c0025230:	c3                   	ret    
c0025231:	90                   	nop

c0025232 <ATAPI::diskInserted()>:
c0025232:	53                   	push   ebx
c0025233:	83 ec 14             	sub    esp,0x14
c0025236:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002523a:	68 e0 d9 02 c0       	push   0xc002d9e0
c002523f:	e8 b3 d6 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0025244:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c002524b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002524e:	e8 8b ef fe ff       	call   c00141de <PhysicalDisk::startCache()>
c0025253:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025257:	83 c4 18             	add    esp,0x18
c002525a:	5b                   	pop    ebx
c002525b:	e9 38 12 ff ff       	jmp    c0016498 <createPartitionsForDisk(PhysicalDisk*)>

c0025260 <ATAPI::detectMedia()>:
c0025260:	56                   	push   esi
c0025261:	53                   	push   ebx
c0025262:	83 ec 28             	sub    esp,0x28
c0025265:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025269:	6a 0c                	push   0xc
c002526b:	6a 00                	push   0x0
c002526d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025271:	56                   	push   esi
c0025272:	e8 d9 b4 fd ff       	call   c0000750 <memset>
c0025277:	58                   	pop    eax
c0025278:	5a                   	pop    edx
c0025279:	6a 00                	push   0x0
c002527b:	6a 00                	push   0x0
c002527d:	6a 00                	push   0x0
c002527f:	6a 00                	push   0x0
c0025281:	56                   	push   esi
c0025282:	53                   	push   ebx
c0025283:	e8 86 fc ff ff       	call   c0024f0e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025288:	83 c4 1c             	add    esp,0x1c
c002528b:	6a 0c                	push   0xc
c002528d:	6a 00                	push   0x0
c002528f:	56                   	push   esi
c0025290:	e8 bb b4 fd ff       	call   c0000750 <memset>
c0025295:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002529a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002529f:	59                   	pop    ecx
c00252a0:	58                   	pop    eax
c00252a1:	6a 01                	push   0x1
c00252a3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00252a7:	50                   	push   eax
c00252a8:	6a 00                	push   0x0
c00252aa:	6a 12                	push   0x12
c00252ac:	56                   	push   esi
c00252ad:	53                   	push   ebx
c00252ae:	e8 5b fc ff ff       	call   c0024f0e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00252b3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00252b7:	83 c4 20             	add    esp,0x20
c00252ba:	83 e0 7f             	and    eax,0x7f
c00252bd:	3c 70                	cmp    al,0x70
c00252bf:	74 15                	je     c00252d6 <ATAPI::detectMedia()+0x76>
c00252c1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00252c8:	75 0c                	jne    c00252d6 <ATAPI::detectMedia()+0x76>
c00252ca:	83 ec 0c             	sub    esp,0xc
c00252cd:	53                   	push   ebx
c00252ce:	e8 5f ff ff ff       	call   c0025232 <ATAPI::diskInserted()>
c00252d3:	83 c4 10             	add    esp,0x10
c00252d6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00252da:	83 e0 0f             	and    eax,0xf
c00252dd:	3c 02                	cmp    al,0x2
c00252df:	75 1b                	jne    c00252fc <ATAPI::detectMedia()+0x9c>
c00252e1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00252e6:	75 2d                	jne    c0025315 <ATAPI::detectMedia()+0xb5>
c00252e8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00252ef:	74 24                	je     c0025315 <ATAPI::detectMedia()+0xb5>
c00252f1:	83 ec 0c             	sub    esp,0xc
c00252f4:	53                   	push   ebx
c00252f5:	e8 d4 fe ff ff       	call   c00251ce <ATAPI::diskRemoved()>
c00252fa:	eb 16                	jmp    c0025312 <ATAPI::detectMedia()+0xb2>
c00252fc:	84 c0                	test   al,al
c00252fe:	75 15                	jne    c0025315 <ATAPI::detectMedia()+0xb5>
c0025300:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025307:	75 0c                	jne    c0025315 <ATAPI::detectMedia()+0xb5>
c0025309:	83 ec 0c             	sub    esp,0xc
c002530c:	53                   	push   ebx
c002530d:	e8 20 ff ff ff       	call   c0025232 <ATAPI::diskInserted()>
c0025312:	83 c4 10             	add    esp,0x10
c0025315:	83 c4 24             	add    esp,0x24
c0025318:	5b                   	pop    ebx
c0025319:	5e                   	pop    esi
c002531a:	c3                   	ret    
c002531b:	90                   	nop

c002531c <ATAPI::open(int, int, void*)>:
c002531c:	53                   	push   ebx
c002531d:	83 ec 08             	sub    esp,0x8
c0025320:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025324:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025328:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002532c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025332:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0025338:	c1 e0 06             	shl    eax,0x6
c002533b:	01 d0                	add    eax,edx
c002533d:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0025344:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002534a:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0025351:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002535b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025361:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025368:	6a 04                	push   0x4
c002536a:	6a 0c                	push   0xc
c002536c:	51                   	push   ecx
c002536d:	52                   	push   edx
c002536e:	e8 4d e5 ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025373:	90                   	nop
c0025374:	90                   	nop
c0025375:	6a 00                	push   0x0
c0025377:	6a 0c                	push   0xc
c0025379:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025380:	50                   	push   eax
c0025381:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025387:	e8 34 e5 ff ff       	call   c00238c0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002538c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0025393:	83 c4 14             	add    esp,0x14
c0025396:	53                   	push   ebx
c0025397:	e8 c4 fe ff ff       	call   c0025260 <ATAPI::detectMedia()>
c002539c:	31 c0                	xor    eax,eax
c002539e:	83 c4 18             	add    esp,0x18
c00253a1:	5b                   	pop    ebx
c00253a2:	c3                   	ret    
c00253a3:	90                   	nop

c00253a4 <ATAPI::read(unsigned long long, int, void*)>:
c00253a4:	55                   	push   ebp
c00253a5:	57                   	push   edi
c00253a6:	56                   	push   esi
c00253a7:	53                   	push   ebx
c00253a8:	83 ec 1c             	sub    esp,0x1c
c00253ab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00253af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00253b3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00253b7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00253be:	74 41                	je     c0025401 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00253c0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00253c4:	b9 03 00 00 00       	mov    ecx,0x3
c00253c9:	fc                   	cld    
c00253ca:	31 c0                	xor    eax,eax
c00253cc:	86 fb                	xchg   bl,bh
c00253ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00253d0:	c1 c3 10             	rol    ebx,0x10
c00253d3:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00253d8:	89 e8                	mov    eax,ebp
c00253da:	86 fb                	xchg   bl,bh
c00253dc:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00253e0:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00253e4:	50                   	push   eax
c00253e5:	50                   	push   eax
c00253e6:	55                   	push   ebp
c00253e7:	c1 e5 0b             	shl    ebp,0xb
c00253ea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00253ee:	6a 00                	push   0x0
c00253f0:	55                   	push   ebp
c00253f1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00253f5:	50                   	push   eax
c00253f6:	56                   	push   esi
c00253f7:	e8 12 fb ff ff       	call   c0024f0e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00253fc:	83 c4 20             	add    esp,0x20
c00253ff:	eb 1a                	jmp    c002541b <ATAPI::read(unsigned long long, int, void*)+0x77>
c0025401:	83 ec 0c             	sub    esp,0xc
c0025404:	56                   	push   esi
c0025405:	e8 56 fe ff ff       	call   c0025260 <ATAPI::detectMedia()>
c002540a:	83 c4 10             	add    esp,0x10
c002540d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0025414:	75 aa                	jne    c00253c0 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0025416:	b8 02 00 00 00       	mov    eax,0x2
c002541b:	83 c4 1c             	add    esp,0x1c
c002541e:	5b                   	pop    ebx
c002541f:	5e                   	pop    esi
c0025420:	5f                   	pop    edi
c0025421:	5d                   	pop    ebp
c0025422:	c3                   	ret    
c0025423:	90                   	nop

c0025424 <SATA::close(int, int, void*)>:
c0025424:	83 ec 0c             	sub    esp,0xc
c0025427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002542b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025431:	85 c0                	test   eax,eax
c0025433:	74 0c                	je     c0025441 <SATA::close(int, int, void*)+0x1d>
c0025435:	83 ec 0c             	sub    esp,0xc
c0025438:	8b 10                	mov    edx,DWORD PTR [eax]
c002543a:	50                   	push   eax
c002543b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002543e:	83 c4 10             	add    esp,0x10
c0025441:	31 c0                	xor    eax,eax
c0025443:	83 c4 0c             	add    esp,0xc
c0025446:	c3                   	ret    
c0025447:	90                   	nop

c0025448 <SATA::powerSaving(PowerSavingLevel)>:
c0025448:	c3                   	ret    
c0025449:	90                   	nop

c002544a <SATA::open(int, int, void*)>:
c002544a:	56                   	push   esi
c002544b:	53                   	push   ebx
c002544c:	50                   	push   eax
c002544d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025451:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025455:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002545f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025465:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002546f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025473:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002547d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025483:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002548a:	e8 29 a7 fe ff       	call   c000fbb8 <Phys::allocatePage()>
c002548f:	89 c6                	mov    esi,eax
c0025491:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025497:	81 c6 00 10 00 00    	add    esi,0x1000
c002549d:	e8 16 a7 fe ff       	call   c000fbb8 <Phys::allocatePage()>
c00254a2:	39 c6                	cmp    esi,eax
c00254a4:	74 10                	je     c00254b6 <SATA::open(int, int, void*)+0x6c>
c00254a6:	83 ec 0c             	sub    esp,0xc
c00254a9:	68 08 d9 02 c0       	push   0xc002d908
c00254ae:	e8 7a 4e ff ff       	call   c001a32d <Krnl::panic(char const*)>
c00254b3:	83 c4 10             	add    esp,0x10
c00254b6:	83 ec 0c             	sub    esp,0xc
c00254b9:	6a 02                	push   0x2
c00254bb:	e8 31 c0 fe ff       	call   c00114f1 <Virt::allocateKernelVirtualPages(int)>
c00254c0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00254c6:	6a 03                	push   0x3
c00254c8:	50                   	push   eax
c00254c9:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00254cf:	ff 35 90 f1 02 c0    	push   DWORD PTR ds:0xc002f190
c00254d5:	e8 4e c8 fe ff       	call   c0011d28 <VAS::mapPage(unsigned long, unsigned long, int)>
c00254da:	83 c4 14             	add    esp,0x14
c00254dd:	53                   	push   ebx
c00254de:	e8 fb ec fe ff       	call   c00141de <PhysicalDisk::startCache()>
c00254e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00254e6:	e8 ad 0f ff ff       	call   c0016498 <createPartitionsForDisk(PhysicalDisk*)>
c00254eb:	83 c4 14             	add    esp,0x14
c00254ee:	31 c0                	xor    eax,eax
c00254f0:	5b                   	pop    ebx
c00254f1:	5e                   	pop    esi
c00254f2:	c3                   	ret    
c00254f3:	90                   	nop

c00254f4 <SATA::SATA()>:
c00254f4:	83 ec 0c             	sub    esp,0xc
c00254f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254fb:	83 ec 04             	sub    esp,0x4
c00254fe:	68 00 02 00 00       	push   0x200
c0025503:	68 1c d9 02 c0       	push   0xc002d91c
c0025508:	50                   	push   eax
c0025509:	e8 68 ec fe ff       	call   c0014176 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002550e:	83 c4 10             	add    esp,0x10
c0025511:	ba 8c d9 02 c0       	mov    edx,0xc002d98c
c0025516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002551a:	89 10                	mov    DWORD PTR [eax],edx
c002551c:	90                   	nop
c002551d:	83 c4 0c             	add    esp,0xc
c0025520:	c3                   	ret    
c0025521:	90                   	nop

c0025522 <SATA::access(unsigned long long, int, void*, bool)>:
c0025522:	55                   	push   ebp
c0025523:	57                   	push   edi
c0025524:	56                   	push   esi
c0025525:	53                   	push   ebx
c0025526:	83 ec 2c             	sub    esp,0x2c
c0025529:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002552d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0025531:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025535:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025539:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002553d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0025542:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025546:	7e 10                	jle    c0025558 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0025548:	83 ec 0c             	sub    esp,0xc
c002554b:	68 2c d9 02 c0       	push   0xc002d92c
c0025550:	e8 d8 4d ff ff       	call   c001a32d <Krnl::panic(char const*)>
c0025555:	83 c4 10             	add    esp,0x10
c0025558:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002555e:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0025564:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002556a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002556e:	89 d0                	mov    eax,edx
c0025570:	c1 e0 07             	shl    eax,0x7
c0025573:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025577:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025581:	51                   	push   ecx
c0025582:	8d 42 02             	lea    eax,[edx+0x2]
c0025585:	51                   	push   ecx
c0025586:	c1 e0 07             	shl    eax,0x7
c0025589:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002558d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025591:	50                   	push   eax
c0025592:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0025598:	e8 e7 ef ff ff       	call   c0024584 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002559d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00255a1:	83 c4 10             	add    esp,0x10
c00255a4:	b8 01 00 00 00       	mov    eax,0x1
c00255a9:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00255ae:	0f 84 cb 01 00 00    	je     c002577f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00255b4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00255b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00255bc:	c1 e0 09             	shl    eax,0x9
c00255bf:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00255c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00255c8:	74 0e                	je     c00255d8 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c00255ca:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00255d0:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00255d4:	89 c1                	mov    ecx,eax
c00255d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00255d8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00255dc:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00255e2:	8d 42 02             	lea    eax,[edx+0x2]
c00255e5:	c1 e0 07             	shl    eax,0x7
c00255e8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00255ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00255ee:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00255f4:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00255fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00255fe:	c1 e1 05             	shl    ecx,0x5
c0025601:	01 c8                	add    eax,ecx
c0025603:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0025607:	83 e1 01             	and    ecx,0x1
c002560a:	89 ce                	mov    esi,ecx
c002560c:	8a 08                	mov    cl,BYTE PTR [eax]
c002560e:	c1 e6 06             	shl    esi,0x6
c0025611:	83 e1 bf             	and    ecx,0xffffffbf
c0025614:	09 f1                	or     ecx,esi
c0025616:	88 08                	mov    BYTE PTR [eax],cl
c0025618:	8b 08                	mov    ecx,DWORD PTR [eax]
c002561a:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0025620:	81 c9 05 00 01 00    	or     ecx,0x10005
c0025626:	89 08                	mov    DWORD PTR [eax],ecx
c0025628:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002562e:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0025634:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002563a:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002563d:	50                   	push   eax
c002563e:	68 90 00 00 00       	push   0x90
c0025643:	6a 00                	push   0x0
c0025645:	56                   	push   esi
c0025646:	e8 05 b1 fd ff       	call   c0000750 <memset>
c002564b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0025651:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0025655:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002565b:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002565f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0025663:	83 c4 10             	add    esp,0x10
c0025666:	48                   	dec    eax
c0025667:	25 ff ff 3f 00       	and    eax,0x3fffff
c002566c:	89 c1                	mov    ecx,eax
c002566e:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0025674:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025679:	09 c8                	or     eax,ecx
c002567b:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0025681:	66 8b 06             	mov    ax,WORD PTR [esi]
c0025684:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c002568b:	66 25 00 7f          	and    ax,0x7f00
c002568f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025693:	66 0d 27 80          	or     ax,0x8027
c0025697:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c002569c:	66 89 06             	mov    WORD PTR [esi],ax
c002569f:	19 c0                	sbb    eax,eax
c00256a1:	83 e0 f0             	and    eax,0xfffffff0
c00256a4:	83 c0 35             	add    eax,0x35
c00256a7:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00256aa:	89 e8                	mov    eax,ebp
c00256ac:	c1 e8 10             	shr    eax,0x10
c00256af:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00256b2:	89 e8                	mov    eax,ebp
c00256b4:	c1 e8 18             	shr    eax,0x18
c00256b7:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00256ba:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00256be:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00256c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00256c5:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00256c8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00256cc:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00256d0:	89 d6                	mov    esi,edx
c00256d2:	31 c0                	xor    eax,eax
c00256d4:	c1 e6 07             	shl    esi,0x7
c00256d7:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00256db:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00256e1:	80 e1 88             	and    cl,0x88
c00256e4:	74 0a                	je     c00256f0 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c00256e6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00256eb:	74 0a                	je     c00256f7 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c00256ed:	40                   	inc    eax
c00256ee:	eb eb                	jmp    c00256db <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c00256f0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00256f5:	75 0a                	jne    c0025701 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c00256f7:	83 ec 0c             	sub    esp,0xc
c00256fa:	68 65 d9 02 c0       	push   0xc002d965
c00256ff:	eb 56                	jmp    c0025757 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0025701:	b8 01 00 00 00       	mov    eax,0x1
c0025706:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002570a:	c1 e2 07             	shl    edx,0x7
c002570d:	d3 e0                	shl    eax,cl
c002570f:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0025713:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0025719:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c002571f:	85 c8                	test   eax,ecx
c0025721:	74 20                	je     c0025743 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0025723:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0025729:	0f ba e1 1e          	bt     ecx,0x1e
c002572d:	73 ea                	jae    c0025719 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c002572f:	83 ec 0c             	sub    esp,0xc
c0025732:	68 73 d9 02 c0       	push   0xc002d973
c0025737:	e8 f1 4b ff ff       	call   c001a32d <Krnl::panic(char const*)>
c002573c:	83 c4 10             	add    esp,0x10
c002573f:	31 c0                	xor    eax,eax
c0025741:	eb 3c                	jmp    c002577f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025743:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0025749:	0f ba e0 1e          	bt     eax,0x1e
c002574d:	73 17                	jae    c0025766 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c002574f:	83 ec 0c             	sub    esp,0xc
c0025752:	68 73 d9 02 c0       	push   0xc002d973
c0025757:	e8 d1 4b ff ff       	call   c001a32d <Krnl::panic(char const*)>
c002575c:	83 c4 10             	add    esp,0x10
c002575f:	b8 01 00 00 00       	mov    eax,0x1
c0025764:	eb 19                	jmp    c002577f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025766:	31 c0                	xor    eax,eax
c0025768:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002576d:	75 10                	jne    c002577f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002576f:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0025775:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0025779:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002577d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002577f:	83 c4 2c             	add    esp,0x2c
c0025782:	5b                   	pop    ebx
c0025783:	5e                   	pop    esi
c0025784:	5f                   	pop    edi
c0025785:	5d                   	pop    ebp
c0025786:	c3                   	ret    
c0025787:	90                   	nop

c0025788 <SATA::read(unsigned long long, int, void*)>:
c0025788:	57                   	push   edi
c0025789:	b8 04 00 00 00       	mov    eax,0x4
c002578e:	56                   	push   esi
c002578f:	53                   	push   ebx
c0025790:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025794:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025798:	8d 7a ff             	lea    edi,[edx-0x1]
c002579b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002579f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00257a3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00257a9:	77 25                	ja     c00257d0 <SATA::read(unsigned long long, int, void*)+0x48>
c00257ab:	b8 06 00 00 00       	mov    eax,0x6
c00257b0:	85 f6                	test   esi,esi
c00257b2:	74 1c                	je     c00257d0 <SATA::read(unsigned long long, int, void*)+0x48>
c00257b4:	50                   	push   eax
c00257b5:	50                   	push   eax
c00257b6:	6a 00                	push   0x0
c00257b8:	56                   	push   esi
c00257b9:	52                   	push   edx
c00257ba:	53                   	push   ebx
c00257bb:	51                   	push   ecx
c00257bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00257c0:	e8 5d fd ff ff       	call   c0025522 <SATA::access(unsigned long long, int, void*, bool)>
c00257c5:	83 c4 20             	add    esp,0x20
c00257c8:	85 c0                	test   eax,eax
c00257ca:	0f 95 c0             	setne  al
c00257cd:	0f b6 c0             	movzx  eax,al
c00257d0:	5b                   	pop    ebx
c00257d1:	5e                   	pop    esi
c00257d2:	5f                   	pop    edi
c00257d3:	c3                   	ret    

c00257d4 <SATA::write(unsigned long long, int, void*)>:
c00257d4:	55                   	push   ebp
c00257d5:	b8 04 00 00 00       	mov    eax,0x4
c00257da:	57                   	push   edi
c00257db:	56                   	push   esi
c00257dc:	53                   	push   ebx
c00257dd:	83 ec 0c             	sub    esp,0xc
c00257e0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00257e4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00257e8:	8d 73 ff             	lea    esi,[ebx-0x1]
c00257eb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00257ef:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00257f3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00257f9:	77 3d                	ja     c0025838 <SATA::write(unsigned long long, int, void*)+0x64>
c00257fb:	b8 06 00 00 00       	mov    eax,0x6
c0025800:	85 ed                	test   ebp,ebp
c0025802:	74 34                	je     c0025838 <SATA::write(unsigned long long, int, void*)+0x64>
c0025804:	c1 e3 09             	shl    ebx,0x9
c0025807:	01 eb                	add    ebx,ebp
c0025809:	89 d6                	mov    esi,edx
c002580b:	89 cf                	mov    edi,ecx
c002580d:	83 c6 01             	add    esi,0x1
c0025810:	83 d7 00             	adc    edi,0x0
c0025813:	50                   	push   eax
c0025814:	50                   	push   eax
c0025815:	6a 01                	push   0x1
c0025817:	55                   	push   ebp
c0025818:	81 c5 00 02 00 00    	add    ebp,0x200
c002581e:	6a 01                	push   0x1
c0025820:	51                   	push   ecx
c0025821:	52                   	push   edx
c0025822:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025826:	e8 f7 fc ff ff       	call   c0025522 <SATA::access(unsigned long long, int, void*, bool)>
c002582b:	83 c4 20             	add    esp,0x20
c002582e:	89 f2                	mov    edx,esi
c0025830:	89 f9                	mov    ecx,edi
c0025832:	39 dd                	cmp    ebp,ebx
c0025834:	75 d3                	jne    c0025809 <SATA::write(unsigned long long, int, void*)+0x35>
c0025836:	31 c0                	xor    eax,eax
c0025838:	83 c4 0c             	add    esp,0xc
c002583b:	5b                   	pop    ebx
c002583c:	5e                   	pop    esi
c002583d:	5f                   	pop    edi
c002583e:	5d                   	pop    ebp
c002583f:	c3                   	ret    

c0025840 <SATAPI::write(unsigned long long, int, void*)>:
c0025840:	b8 03 00 00 00       	mov    eax,0x3
c0025845:	c3                   	ret    

c0025846 <SATAPI::close(int, int, void*)>:
c0025846:	83 ec 0c             	sub    esp,0xc
c0025849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002584d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025853:	85 c0                	test   eax,eax
c0025855:	74 0c                	je     c0025863 <SATAPI::close(int, int, void*)+0x1d>
c0025857:	83 ec 0c             	sub    esp,0xc
c002585a:	8b 10                	mov    edx,DWORD PTR [eax]
c002585c:	50                   	push   eax
c002585d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025860:	83 c4 10             	add    esp,0x10
c0025863:	31 c0                	xor    eax,eax
c0025865:	83 c4 0c             	add    esp,0xc
c0025868:	c3                   	ret    
c0025869:	90                   	nop

c002586a <SATAPI::SATAPI()>:
c002586a:	83 ec 0c             	sub    esp,0xc
c002586d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025871:	83 ec 04             	sub    esp,0x4
c0025874:	68 00 08 00 00       	push   0x800
c0025879:	68 bc d9 02 c0       	push   0xc002d9bc
c002587e:	50                   	push   eax
c002587f:	e8 f2 e8 fe ff       	call   c0014176 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025884:	83 c4 10             	add    esp,0x10
c0025887:	ba 68 da 02 c0       	mov    edx,0xc002da68
c002588c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025890:	89 10                	mov    DWORD PTR [eax],edx
c0025892:	90                   	nop
c0025893:	83 c4 0c             	add    esp,0xc
c0025896:	c3                   	ret    
c0025897:	90                   	nop

c0025898 <SATAPI::diskRemoved()>:
c0025898:	83 ec 18             	sub    esp,0x18
c002589b:	68 c8 d9 02 c0       	push   0xc002d9c8
c00258a0:	e8 52 d0 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00258a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00258a9:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c00258b0:	83 c4 1c             	add    esp,0x1c
c00258b3:	c3                   	ret    

c00258b4 <SATAPI::diskInserted()>:
c00258b4:	53                   	push   ebx
c00258b5:	83 ec 14             	sub    esp,0x14
c00258b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00258bc:	68 df d9 02 c0       	push   0xc002d9df
c00258c1:	e8 31 d0 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00258c6:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c00258cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00258d0:	e8 09 e9 fe ff       	call   c00141de <PhysicalDisk::startCache()>
c00258d5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00258d9:	83 c4 18             	add    esp,0x18
c00258dc:	5b                   	pop    ebx
c00258dd:	e9 b6 0b ff ff       	jmp    c0016498 <createPartitionsForDisk(PhysicalDisk*)>

c00258e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00258e2:	55                   	push   ebp
c00258e3:	57                   	push   edi
c00258e4:	56                   	push   esi
c00258e5:	53                   	push   ebx
c00258e6:	83 ec 34             	sub    esp,0x34
c00258e9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00258ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00258f1:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00258f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00258f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00258fd:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0025903:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025909:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002590d:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0025913:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025917:	c1 e0 07             	shl    eax,0x7
c002591a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002591e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025922:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002592c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025930:	8d 58 02             	lea    ebx,[eax+0x2]
c0025933:	c1 e3 07             	shl    ebx,0x7
c0025936:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c002593a:	53                   	push   ebx
c002593b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0025941:	e8 3e ec ff ff       	call   c0024584 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025946:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002594a:	83 c4 10             	add    esp,0x10
c002594d:	b8 01 00 00 00       	mov    eax,0x1
c0025952:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025957:	0f 84 85 01 00 00    	je     c0025ae2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c002595d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025963:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025965:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002596b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025971:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025975:	c1 e1 05             	shl    ecx,0x5
c0025978:	01 c8                	add    eax,ecx
c002597a:	8b 08                	mov    ecx,DWORD PTR [eax]
c002597c:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025982:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025988:	89 08                	mov    DWORD PTR [eax],ecx
c002598a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025990:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025996:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002599c:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002599f:	8d 7b 40             	lea    edi,[ebx+0x40]
c00259a2:	50                   	push   eax
c00259a3:	68 90 00 00 00       	push   0x90
c00259a8:	6a 00                	push   0x0
c00259aa:	53                   	push   ebx
c00259ab:	e8 a0 ad fd ff       	call   c0000750 <memset>
c00259b0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00259b4:	b9 0c 00 00 00       	mov    ecx,0xc
c00259b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00259bb:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c00259c1:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00259c5:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00259cb:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00259cf:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00259d3:	48                   	dec    eax
c00259d4:	25 ff ff 3f 00       	and    eax,0x3fffff
c00259d9:	89 c1                	mov    ecx,eax
c00259db:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00259e1:	25 00 00 c0 ff       	and    eax,0xffc00000
c00259e6:	09 c8                	or     eax,ecx
c00259e8:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00259ee:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00259f1:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00259f8:	66 25 00 7f          	and    ax,0x7f00
c00259fc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025a00:	66 0d 27 80          	or     ax,0x8027
c0025a04:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0025a08:	66 89 03             	mov    WORD PTR [ebx],ax
c0025a0b:	89 d0                	mov    eax,edx
c0025a0d:	c1 ea 18             	shr    edx,0x18
c0025a10:	c1 e8 10             	shr    eax,0x10
c0025a13:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025a16:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025a19:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0025a1d:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025a20:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025a24:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025a27:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0025a2b:	83 c4 10             	add    esp,0x10
c0025a2e:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025a32:	31 c0                	xor    eax,eax
c0025a34:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025a38:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0025a3e:	80 e2 88             	and    dl,0x88
c0025a41:	74 0a                	je     c0025a4d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025a43:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025a48:	74 0a                	je     c0025a54 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0025a4a:	40                   	inc    eax
c0025a4b:	eb eb                	jmp    c0025a38 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0025a4d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025a52:	75 0f                	jne    c0025a63 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025a54:	83 ec 0c             	sub    esp,0xc
c0025a57:	68 65 d9 02 c0       	push   0xc002d965
c0025a5c:	e8 cc 48 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c0025a61:	eb 3f                	jmp    c0025aa2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025a63:	ba 01 00 00 00       	mov    edx,0x1
c0025a68:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025a6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025a70:	d3 e2                	shl    edx,cl
c0025a72:	c1 e0 07             	shl    eax,0x7
c0025a75:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025a7b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025a7f:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025a85:	85 ca                	test   edx,ecx
c0025a87:	74 23                	je     c0025aac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025a89:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025a8f:	0f ba e1 1e          	bt     ecx,0x1e
c0025a93:	73 ea                	jae    c0025a7f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025a95:	83 ec 0c             	sub    esp,0xc
c0025a98:	68 f7 d9 02 c0       	push   0xc002d9f7
c0025a9d:	e8 55 ce fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0025aa2:	83 c4 10             	add    esp,0x10
c0025aa5:	b8 01 00 00 00       	mov    eax,0x1
c0025aaa:	eb 36                	jmp    c0025ae2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025aac:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025ab2:	0f ba e0 1e          	bt     eax,0x1e
c0025ab6:	73 0a                	jae    c0025ac2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025ab8:	83 ec 0c             	sub    esp,0xc
c0025abb:	68 0a da 02 c0       	push   0xc002da0a
c0025ac0:	eb db                	jmp    c0025a9d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025ac2:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025ac7:	74 17                	je     c0025ae0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025ac9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025ace:	74 10                	je     c0025ae0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025ad0:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025ad6:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025ada:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025ade:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025ae0:	31 c0                	xor    eax,eax
c0025ae2:	83 c4 2c             	add    esp,0x2c
c0025ae5:	5b                   	pop    ebx
c0025ae6:	5e                   	pop    esi
c0025ae7:	5f                   	pop    edi
c0025ae8:	5d                   	pop    ebp
c0025ae9:	c3                   	ret    

c0025aea <SATAPI::eject()>:
c0025aea:	57                   	push   edi
c0025aeb:	b9 03 00 00 00       	mov    ecx,0x3
c0025af0:	53                   	push   ebx
c0025af1:	83 ec 14             	sub    esp,0x14
c0025af4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025af8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025afc:	fc                   	cld    
c0025afd:	31 c0                	xor    eax,eax
c0025aff:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025b01:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025b06:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025b0b:	50                   	push   eax
c0025b0c:	6a 00                	push   0x0
c0025b0e:	6a 00                	push   0x0
c0025b10:	6a 00                	push   0x0
c0025b12:	6a 00                	push   0x0
c0025b14:	6a 02                	push   0x2
c0025b16:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025b1a:	50                   	push   eax
c0025b1b:	53                   	push   ebx
c0025b1c:	e8 c1 fd ff ff       	call   c00258e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b21:	83 c4 14             	add    esp,0x14
c0025b24:	53                   	push   ebx
c0025b25:	e8 6e fd ff ff       	call   c0025898 <SATAPI::diskRemoved()>
c0025b2a:	83 c4 24             	add    esp,0x24
c0025b2d:	31 c0                	xor    eax,eax
c0025b2f:	5b                   	pop    ebx
c0025b30:	5f                   	pop    edi
c0025b31:	c3                   	ret    

c0025b32 <SATAPI::detectMedia()>:
c0025b32:	56                   	push   esi
c0025b33:	53                   	push   ebx
c0025b34:	83 ec 28             	sub    esp,0x28
c0025b37:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025b3b:	6a 0c                	push   0xc
c0025b3d:	6a 00                	push   0x0
c0025b3f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025b43:	56                   	push   esi
c0025b44:	e8 07 ac fd ff       	call   c0000750 <memset>
c0025b49:	83 c4 0c             	add    esp,0xc
c0025b4c:	6a 00                	push   0x0
c0025b4e:	6a 00                	push   0x0
c0025b50:	6a 00                	push   0x0
c0025b52:	6a 00                	push   0x0
c0025b54:	6a 00                	push   0x0
c0025b56:	56                   	push   esi
c0025b57:	53                   	push   ebx
c0025b58:	e8 85 fd ff ff       	call   c00258e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b5d:	83 c4 1c             	add    esp,0x1c
c0025b60:	6a 0c                	push   0xc
c0025b62:	6a 00                	push   0x0
c0025b64:	56                   	push   esi
c0025b65:	e8 e6 ab fd ff       	call   c0000750 <memset>
c0025b6a:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025b6f:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025b74:	83 c4 0c             	add    esp,0xc
c0025b77:	6a 01                	push   0x1
c0025b79:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025b7d:	50                   	push   eax
c0025b7e:	6a 00                	push   0x0
c0025b80:	6a 00                	push   0x0
c0025b82:	6a 12                	push   0x12
c0025b84:	56                   	push   esi
c0025b85:	53                   	push   ebx
c0025b86:	e8 57 fd ff ff       	call   c00258e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b8b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025b8f:	83 c4 20             	add    esp,0x20
c0025b92:	83 e0 7f             	and    eax,0x7f
c0025b95:	3c 70                	cmp    al,0x70
c0025b97:	74 15                	je     c0025bae <SATAPI::detectMedia()+0x7c>
c0025b99:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025ba0:	75 0c                	jne    c0025bae <SATAPI::detectMedia()+0x7c>
c0025ba2:	83 ec 0c             	sub    esp,0xc
c0025ba5:	53                   	push   ebx
c0025ba6:	e8 09 fd ff ff       	call   c00258b4 <SATAPI::diskInserted()>
c0025bab:	83 c4 10             	add    esp,0x10
c0025bae:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025bb2:	83 e0 0f             	and    eax,0xf
c0025bb5:	3c 02                	cmp    al,0x2
c0025bb7:	75 1b                	jne    c0025bd4 <SATAPI::detectMedia()+0xa2>
c0025bb9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025bbe:	75 2d                	jne    c0025bed <SATAPI::detectMedia()+0xbb>
c0025bc0:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025bc7:	74 24                	je     c0025bed <SATAPI::detectMedia()+0xbb>
c0025bc9:	83 ec 0c             	sub    esp,0xc
c0025bcc:	53                   	push   ebx
c0025bcd:	e8 c6 fc ff ff       	call   c0025898 <SATAPI::diskRemoved()>
c0025bd2:	eb 16                	jmp    c0025bea <SATAPI::detectMedia()+0xb8>
c0025bd4:	84 c0                	test   al,al
c0025bd6:	75 15                	jne    c0025bed <SATAPI::detectMedia()+0xbb>
c0025bd8:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025bdf:	75 0c                	jne    c0025bed <SATAPI::detectMedia()+0xbb>
c0025be1:	83 ec 0c             	sub    esp,0xc
c0025be4:	53                   	push   ebx
c0025be5:	e8 ca fc ff ff       	call   c00258b4 <SATAPI::diskInserted()>
c0025bea:	83 c4 10             	add    esp,0x10
c0025bed:	83 c4 24             	add    esp,0x24
c0025bf0:	5b                   	pop    ebx
c0025bf1:	5e                   	pop    esi
c0025bf2:	c3                   	ret    
c0025bf3:	90                   	nop

c0025bf4 <SATAPI::open(int, int, void*)>:
c0025bf4:	56                   	push   esi
c0025bf5:	53                   	push   ebx
c0025bf6:	50                   	push   eax
c0025bf7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025bfb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025bff:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025c09:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025c0f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025c19:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025c1d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025c27:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025c2d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025c34:	e8 7f 9f fe ff       	call   c000fbb8 <Phys::allocatePage()>
c0025c39:	89 c6                	mov    esi,eax
c0025c3b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025c41:	81 c6 00 10 00 00    	add    esi,0x1000
c0025c47:	e8 6c 9f fe ff       	call   c000fbb8 <Phys::allocatePage()>
c0025c4c:	39 c6                	cmp    esi,eax
c0025c4e:	74 10                	je     c0025c60 <SATAPI::open(int, int, void*)+0x6c>
c0025c50:	83 ec 0c             	sub    esp,0xc
c0025c53:	68 1f da 02 c0       	push   0xc002da1f
c0025c58:	e8 d0 46 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c0025c5d:	83 c4 10             	add    esp,0x10
c0025c60:	83 ec 0c             	sub    esp,0xc
c0025c63:	6a 02                	push   0x2
c0025c65:	e8 87 b8 fe ff       	call   c00114f1 <Virt::allocateKernelVirtualPages(int)>
c0025c6a:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025c70:	6a 03                	push   0x3
c0025c72:	50                   	push   eax
c0025c73:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025c79:	ff 35 90 f1 02 c0    	push   DWORD PTR ds:0xc002f190
c0025c7f:	e8 a4 c0 fe ff       	call   c0011d28 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025c84:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025c8b:	83 c4 14             	add    esp,0x14
c0025c8e:	53                   	push   ebx
c0025c8f:	e8 9e fe ff ff       	call   c0025b32 <SATAPI::detectMedia()>
c0025c94:	83 c4 14             	add    esp,0x14
c0025c97:	31 c0                	xor    eax,eax
c0025c99:	5b                   	pop    ebx
c0025c9a:	5e                   	pop    esi
c0025c9b:	c3                   	ret    

c0025c9c <SATAPI::read(unsigned long long, int, void*)>:
c0025c9c:	55                   	push   ebp
c0025c9d:	57                   	push   edi
c0025c9e:	56                   	push   esi
c0025c9f:	53                   	push   ebx
c0025ca0:	83 ec 1c             	sub    esp,0x1c
c0025ca3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025ca7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025cab:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025caf:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025cb6:	74 19                	je     c0025cd1 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025cb8:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025cbd:	7e 2e                	jle    c0025ced <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025cbf:	83 ec 0c             	sub    esp,0xc
c0025cc2:	68 35 da 02 c0       	push   0xc002da35
c0025cc7:	e8 61 46 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c0025ccc:	83 c4 10             	add    esp,0x10
c0025ccf:	eb 1c                	jmp    c0025ced <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025cd1:	83 ec 0c             	sub    esp,0xc
c0025cd4:	55                   	push   ebp
c0025cd5:	e8 58 fe ff ff       	call   c0025b32 <SATAPI::detectMedia()>
c0025cda:	83 c4 10             	add    esp,0x10
c0025cdd:	b8 02 00 00 00       	mov    eax,0x2
c0025ce2:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025ce9:	75 cd                	jne    c0025cb8 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025ceb:	eb 49                	jmp    c0025d36 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025ced:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025cf1:	b9 03 00 00 00       	mov    ecx,0x3
c0025cf6:	fc                   	cld    
c0025cf7:	31 c0                	xor    eax,eax
c0025cf9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025cfb:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025d00:	89 d8                	mov    eax,ebx
c0025d02:	86 e0                	xchg   al,ah
c0025d04:	c1 c0 10             	rol    eax,0x10
c0025d07:	86 e0                	xchg   al,ah
c0025d09:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025d0d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025d11:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025d15:	50                   	push   eax
c0025d16:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025d1a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025d1e:	56                   	push   esi
c0025d1f:	53                   	push   ebx
c0025d20:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025d24:	c1 e0 0b             	shl    eax,0xb
c0025d27:	50                   	push   eax
c0025d28:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025d2c:	50                   	push   eax
c0025d2d:	55                   	push   ebp
c0025d2e:	e8 af fb ff ff       	call   c00258e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025d33:	83 c4 20             	add    esp,0x20
c0025d36:	83 c4 1c             	add    esp,0x1c
c0025d39:	5b                   	pop    ebx
c0025d3a:	5e                   	pop    esi
c0025d3b:	5f                   	pop    edi
c0025d3c:	5d                   	pop    ebp
c0025d3d:	c3                   	ret    

c0025d3e <AVX::open(int, int, void*)>:
c0025d3e:	83 ec 0c             	sub    esp,0xc
c0025d41:	e8 42 11 00 00       	call   c0026e88 <avxInit>
c0025d46:	b8 00 00 00 00       	mov    eax,0x0
c0025d4b:	83 c4 0c             	add    esp,0xc
c0025d4e:	c3                   	ret    
c0025d4f:	90                   	nop

c0025d50 <AVX::close(int, int, void*)>:
c0025d50:	83 ec 0c             	sub    esp,0xc
c0025d53:	e8 31 11 00 00       	call   c0026e89 <avxClose>
c0025d58:	b8 00 00 00 00       	mov    eax,0x0
c0025d5d:	83 c4 0c             	add    esp,0xc
c0025d60:	c3                   	ret    
c0025d61:	90                   	nop

c0025d62 <AVX::available()>:
c0025d62:	83 ec 0c             	sub    esp,0xc
c0025d65:	e8 16 11 00 00       	call   c0026e80 <avxDetect>
c0025d6a:	85 c0                	test   eax,eax
c0025d6c:	0f 95 c0             	setne  al
c0025d6f:	83 c4 0c             	add    esp,0xc
c0025d72:	c3                   	ret    
c0025d73:	90                   	nop

c0025d74 <AVX::save(void*)>:
c0025d74:	83 ec 0c             	sub    esp,0xc
c0025d77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d7b:	83 ec 0c             	sub    esp,0xc
c0025d7e:	50                   	push   eax
c0025d7f:	e8 02 11 00 00       	call   c0026e86 <avxSave>
c0025d84:	83 c4 10             	add    esp,0x10
c0025d87:	90                   	nop
c0025d88:	83 c4 0c             	add    esp,0xc
c0025d8b:	c3                   	ret    

c0025d8c <AVX::load(void*)>:
c0025d8c:	83 ec 0c             	sub    esp,0xc
c0025d8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d93:	83 ec 0c             	sub    esp,0xc
c0025d96:	50                   	push   eax
c0025d97:	e8 eb 10 00 00       	call   c0026e87 <avxLoad>
c0025d9c:	83 c4 10             	add    esp,0x10
c0025d9f:	90                   	nop
c0025da0:	83 c4 0c             	add    esp,0xc
c0025da3:	c3                   	ret    

c0025da4 <AVX::AVX()>:
c0025da4:	83 ec 0c             	sub    esp,0xc
c0025da7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dab:	83 ec 08             	sub    esp,0x8
c0025dae:	68 98 da 02 c0       	push   0xc002da98
c0025db3:	50                   	push   eax
c0025db4:	e8 9b e4 fe ff       	call   c0014254 <FPU::FPU(char const*)>
c0025db9:	83 c4 10             	add    esp,0x10
c0025dbc:	ba a8 da 02 c0       	mov    edx,0xc002daa8
c0025dc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dc5:	89 10                	mov    DWORD PTR [eax],edx
c0025dc7:	90                   	nop
c0025dc8:	83 c4 0c             	add    esp,0xc
c0025dcb:	c3                   	ret    

c0025dcc <MMX::available()>:
c0025dcc:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0025dd1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025dd7:	83 e0 20             	and    eax,0x20
c0025dda:	84 c0                	test   al,al
c0025ddc:	0f 95 c0             	setne  al
c0025ddf:	c3                   	ret    

c0025de0 <MMX::open(int, int, void*)>:
c0025de0:	83 ec 0c             	sub    esp,0xc
c0025de3:	e8 2a 11 00 00       	call   c0026f12 <x87Init>
c0025de8:	b8 00 00 00 00       	mov    eax,0x0
c0025ded:	83 c4 0c             	add    esp,0xc
c0025df0:	c3                   	ret    
c0025df1:	90                   	nop

c0025df2 <MMX::close(int, int, void*)>:
c0025df2:	83 ec 0c             	sub    esp,0xc
c0025df5:	e8 32 11 00 00       	call   c0026f2c <x87Close>
c0025dfa:	b8 00 00 00 00       	mov    eax,0x0
c0025dff:	83 c4 0c             	add    esp,0xc
c0025e02:	c3                   	ret    
c0025e03:	90                   	nop

c0025e04 <MMX::save(void*)>:
c0025e04:	83 ec 0c             	sub    esp,0xc
c0025e07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e0b:	83 ec 0c             	sub    esp,0xc
c0025e0e:	50                   	push   eax
c0025e0f:	e8 ed 10 00 00       	call   c0026f01 <x87Save>
c0025e14:	83 c4 10             	add    esp,0x10
c0025e17:	90                   	nop
c0025e18:	83 c4 0c             	add    esp,0xc
c0025e1b:	c3                   	ret    

c0025e1c <MMX::load(void*)>:
c0025e1c:	83 ec 0c             	sub    esp,0xc
c0025e1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e23:	83 ec 0c             	sub    esp,0xc
c0025e26:	50                   	push   eax
c0025e27:	e8 de 10 00 00       	call   c0026f0a <x87Load>
c0025e2c:	83 c4 10             	add    esp,0x10
c0025e2f:	90                   	nop
c0025e30:	83 c4 0c             	add    esp,0xc
c0025e33:	c3                   	ret    

c0025e34 <MMX::MMX()>:
c0025e34:	83 ec 0c             	sub    esp,0xc
c0025e37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e3b:	83 ec 08             	sub    esp,0x8
c0025e3e:	68 d8 da 02 c0       	push   0xc002dad8
c0025e43:	50                   	push   eax
c0025e44:	e8 0b e4 fe ff       	call   c0014254 <FPU::FPU(char const*)>
c0025e49:	83 c4 10             	add    esp,0x10
c0025e4c:	ba e8 da 02 c0       	mov    edx,0xc002dae8
c0025e51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e55:	89 10                	mov    DWORD PTR [eax],edx
c0025e57:	90                   	nop
c0025e58:	83 c4 0c             	add    esp,0xc
c0025e5b:	c3                   	ret    

c0025e5c <SSE::open(int, int, void*)>:
c0025e5c:	83 ec 0c             	sub    esp,0xc
c0025e5f:	e8 60 10 00 00       	call   c0026ec4 <sseInit>
c0025e64:	b8 00 00 00 00       	mov    eax,0x0
c0025e69:	83 c4 0c             	add    esp,0xc
c0025e6c:	c3                   	ret    
c0025e6d:	90                   	nop

c0025e6e <SSE::close(int, int, void*)>:
c0025e6e:	83 ec 0c             	sub    esp,0xc
c0025e71:	e8 5e 10 00 00       	call   c0026ed4 <sseClose>
c0025e76:	b8 00 00 00 00       	mov    eax,0x0
c0025e7b:	83 c4 0c             	add    esp,0xc
c0025e7e:	c3                   	ret    
c0025e7f:	90                   	nop

c0025e80 <SSE::available()>:
c0025e80:	83 ec 1c             	sub    esp,0x1c
c0025e83:	e8 18 10 00 00       	call   c0026ea0 <absolutelyNoChanceInHell>
c0025e88:	85 c0                	test   eax,eax
c0025e8a:	0f 95 c0             	setne  al
c0025e8d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025e91:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025e95:	83 c4 1c             	add    esp,0x1c
c0025e98:	c3                   	ret    
c0025e99:	90                   	nop

c0025e9a <SSE::save(void*)>:
c0025e9a:	83 ec 0c             	sub    esp,0xc
c0025e9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ea1:	83 ec 0c             	sub    esp,0xc
c0025ea4:	50                   	push   eax
c0025ea5:	e8 0e 10 00 00       	call   c0026eb8 <sseSave>
c0025eaa:	83 c4 10             	add    esp,0x10
c0025ead:	90                   	nop
c0025eae:	83 c4 0c             	add    esp,0xc
c0025eb1:	c3                   	ret    

c0025eb2 <SSE::load(void*)>:
c0025eb2:	83 ec 0c             	sub    esp,0xc
c0025eb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025eb9:	83 ec 0c             	sub    esp,0xc
c0025ebc:	50                   	push   eax
c0025ebd:	e8 fc 0f 00 00       	call   c0026ebe <sseLoad>
c0025ec2:	83 c4 10             	add    esp,0x10
c0025ec5:	90                   	nop
c0025ec6:	83 c4 0c             	add    esp,0xc
c0025ec9:	c3                   	ret    

c0025eca <SSE::SSE()>:
c0025eca:	83 ec 0c             	sub    esp,0xc
c0025ecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ed1:	83 ec 08             	sub    esp,0x8
c0025ed4:	68 18 db 02 c0       	push   0xc002db18
c0025ed9:	50                   	push   eax
c0025eda:	e8 75 e3 fe ff       	call   c0014254 <FPU::FPU(char const*)>
c0025edf:	83 c4 10             	add    esp,0x10
c0025ee2:	ba 28 db 02 c0       	mov    edx,0xc002db28
c0025ee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eeb:	89 10                	mov    DWORD PTR [eax],edx
c0025eed:	90                   	nop
c0025eee:	83 c4 0c             	add    esp,0xc
c0025ef1:	c3                   	ret    

c0025ef2 <x87::open(int, int, void*)>:
c0025ef2:	83 ec 0c             	sub    esp,0xc
c0025ef5:	e8 18 10 00 00       	call   c0026f12 <x87Init>
c0025efa:	b8 00 00 00 00       	mov    eax,0x0
c0025eff:	83 c4 0c             	add    esp,0xc
c0025f02:	c3                   	ret    
c0025f03:	90                   	nop

c0025f04 <x87::close(int, int, void*)>:
c0025f04:	83 ec 0c             	sub    esp,0xc
c0025f07:	e8 20 10 00 00       	call   c0026f2c <x87Close>
c0025f0c:	b8 00 00 00 00       	mov    eax,0x0
c0025f11:	83 c4 0c             	add    esp,0xc
c0025f14:	c3                   	ret    
c0025f15:	90                   	nop

c0025f16 <x87::available()>:
c0025f16:	83 ec 0c             	sub    esp,0xc
c0025f19:	e8 c8 0f 00 00       	call   c0026ee6 <x87Detect>
c0025f1e:	85 c0                	test   eax,eax
c0025f20:	0f 95 c0             	setne  al
c0025f23:	83 c4 0c             	add    esp,0xc
c0025f26:	c3                   	ret    
c0025f27:	90                   	nop

c0025f28 <x87::save(void*)>:
c0025f28:	83 ec 0c             	sub    esp,0xc
c0025f2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f2f:	83 ec 0c             	sub    esp,0xc
c0025f32:	50                   	push   eax
c0025f33:	e8 c9 0f 00 00       	call   c0026f01 <x87Save>
c0025f38:	83 c4 10             	add    esp,0x10
c0025f3b:	90                   	nop
c0025f3c:	83 c4 0c             	add    esp,0xc
c0025f3f:	c3                   	ret    

c0025f40 <x87::load(void*)>:
c0025f40:	83 ec 0c             	sub    esp,0xc
c0025f43:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f47:	83 ec 0c             	sub    esp,0xc
c0025f4a:	50                   	push   eax
c0025f4b:	e8 ba 0f 00 00       	call   c0026f0a <x87Load>
c0025f50:	83 c4 10             	add    esp,0x10
c0025f53:	90                   	nop
c0025f54:	83 c4 0c             	add    esp,0xc
c0025f57:	c3                   	ret    

c0025f58 <x87::x87()>:
c0025f58:	83 ec 0c             	sub    esp,0xc
c0025f5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f5f:	83 ec 08             	sub    esp,0x8
c0025f62:	68 58 db 02 c0       	push   0xc002db58
c0025f67:	50                   	push   eax
c0025f68:	e8 e7 e2 fe ff       	call   c0014254 <FPU::FPU(char const*)>
c0025f6d:	83 c4 10             	add    esp,0x10
c0025f70:	ba 68 db 02 c0       	mov    edx,0xc002db68
c0025f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f79:	89 10                	mov    DWORD PTR [eax],edx
c0025f7b:	90                   	nop
c0025f7c:	83 c4 0c             	add    esp,0xc
c0025f7f:	c3                   	ret    

c0025f80 <APIC::disable()>:
c0025f80:	90                   	nop
c0025f81:	c3                   	ret    

c0025f82 <APIC::close(int, int, void*)>:
c0025f82:	55                   	push   ebp
c0025f83:	89 e5                	mov    ebp,esp
c0025f85:	83 ec 08             	sub    esp,0x8
c0025f88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f8d:	83 c0 3c             	add    eax,0x3c
c0025f90:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f92:	83 ec 0c             	sub    esp,0xc
c0025f95:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f98:	ff d0                	call   eax
c0025f9a:	83 c4 10             	add    esp,0x10
c0025f9d:	b8 00 00 00 00       	mov    eax,0x0
c0025fa2:	c9                   	leave  
c0025fa3:	c3                   	ret    

c0025fa4 <IOAPIC::close(int, int, void*)>:
c0025fa4:	b8 00 00 00 00       	mov    eax,0x0
c0025fa9:	c3                   	ret    

c0025faa <APIC::io_wait()>:
c0025faa:	eb 00                	jmp    c0025fac <APIC::io_wait()+0x2>
c0025fac:	eb 00                	jmp    c0025fae <APIC::io_wait()+0x4>
c0025fae:	90                   	nop
c0025faf:	c3                   	ret    

c0025fb0 <APIC::getBase()>:
c0025fb0:	55                   	push   ebp
c0025fb1:	89 e5                	mov    ebp,esp
c0025fb3:	83 ec 18             	sub    esp,0x18
c0025fb6:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0025fbb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025fc1:	83 e0 08             	and    eax,0x8
c0025fc4:	84 c0                	test   al,al
c0025fc6:	75 07                	jne    c0025fcf <APIC::getBase()+0x1f>
c0025fc8:	b8 00 00 00 00       	mov    eax,0x0
c0025fcd:	eb 21                	jmp    c0025ff0 <APIC::getBase()+0x40>
c0025fcf:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0025fd4:	83 ec 08             	sub    esp,0x8
c0025fd7:	6a 1b                	push   0x1b
c0025fd9:	50                   	push   eax
c0025fda:	e8 53 8e fe ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c0025fdf:	83 c4 10             	add    esp,0x10
c0025fe2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025fe5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025fe8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025feb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025ff0:	c9                   	leave  
c0025ff1:	c3                   	ret    

c0025ff2 <APIC::eoi(unsigned char)>:
c0025ff2:	55                   	push   ebp
c0025ff3:	89 e5                	mov    ebp,esp
c0025ff5:	83 ec 28             	sub    esp,0x28
c0025ff8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ffb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025ffe:	83 ec 0c             	sub    esp,0xc
c0026001:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026004:	e8 a7 ff ff ff       	call   c0025fb0 <APIC::getBase()>
c0026009:	83 c4 10             	add    esp,0x10
c002600c:	05 b0 00 00 00       	add    eax,0xb0
c0026011:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026014:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026017:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002601d:	90                   	nop
c002601e:	c9                   	leave  
c002601f:	c3                   	ret    

c0026020 <APIC::open(int, int, void*)>:
c0026020:	55                   	push   ebp
c0026021:	89 e5                	mov    ebp,esp
c0026023:	57                   	push   edi
c0026024:	56                   	push   esi
c0026025:	53                   	push   ebx
c0026026:	83 ec 2c             	sub    esp,0x2c
c0026029:	83 ec 0c             	sub    esp,0xc
c002602c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002602f:	e8 7c ff ff ff       	call   c0025fb0 <APIC::getBase()>
c0026034:	83 c4 10             	add    esp,0x10
c0026037:	89 c2                	mov    edx,eax
c0026039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002603c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026042:	0f b6 f8             	movzx  edi,al
c0026045:	89 d0                	mov    eax,edx
c0026047:	ba 00 00 00 00       	mov    edx,0x0
c002604c:	89 c1                	mov    ecx,eax
c002604e:	80 e5 ff             	and    ch,0xff
c0026051:	89 cb                	mov    ebx,ecx
c0026053:	0f b6 f2             	movzx  esi,dl
c0026056:	89 d8                	mov    eax,ebx
c0026058:	89 f2                	mov    edx,esi
c002605a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002605d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026060:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026064:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026068:	83 e0 00             	and    eax,0x0
c002606b:	09 d0                	or     eax,edx
c002606d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026074:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002607a:	8d 50 01             	lea    edx,[eax+0x1]
c002607d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026080:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026086:	0f b6 d0             	movzx  edx,al
c0026089:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002608c:	83 c2 08             	add    edx,0x8
c002608f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026093:	0f b6 c9             	movzx  ecx,cl
c0026096:	81 c9 00 00 01 00    	or     ecx,0x10000
c002609c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00260a0:	83 ec 0c             	sub    esp,0xc
c00260a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260a6:	e8 05 ff ff ff       	call   c0025fb0 <APIC::getBase()>
c00260ab:	83 c4 10             	add    esp,0x10
c00260ae:	05 f0 00 00 00       	add    eax,0xf0
c00260b3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00260b6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00260b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00260bb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00260be:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00260c5:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00260cc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00260cf:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00260d2:	89 10                	mov    DWORD PTR [eax],edx
c00260d4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00260db:	a1 f0 18 03 c0       	mov    eax,ds:0xc00318f0
c00260e0:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00260e3:	7d 7c                	jge    c0026161 <APIC::open(int, int, void*)+0x141>
c00260e5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00260e8:	8b 04 85 00 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce700]
c00260ef:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00260f2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00260f5:	8b 04 85 00 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce700]
c00260fc:	c1 e8 08             	shr    eax,0x8
c00260ff:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0026103:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026106:	8b 04 85 00 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce700]
c002610d:	c1 e8 18             	shr    eax,0x18
c0026110:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0026113:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0026117:	75 40                	jne    c0026159 <APIC::open(int, int, void*)+0x139>
c0026119:	83 ec 0c             	sub    esp,0xc
c002611c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002611f:	e8 8c fe ff ff       	call   c0025fb0 <APIC::getBase()>
c0026124:	83 c4 10             	add    esp,0x10
c0026127:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002612b:	75 07                	jne    c0026134 <APIC::open(int, int, void*)+0x114>
c002612d:	ba 60 03 00 00       	mov    edx,0x360
c0026132:	eb 05                	jmp    c0026139 <APIC::open(int, int, void*)+0x119>
c0026134:	ba 50 03 00 00       	mov    edx,0x350
c0026139:	01 d0                	add    eax,edx
c002613b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002613e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026141:	8b 00                	mov    eax,DWORD PTR [eax]
c0026143:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0026146:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002614d:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0026151:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026154:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026157:	89 10                	mov    DWORD PTR [eax],edx
c0026159:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002615c:	e9 7a ff ff ff       	jmp    c00260db <APIC::open(int, int, void*)+0xbb>
c0026161:	b8 00 00 00 00       	mov    eax,0x0
c0026166:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026169:	5b                   	pop    ebx
c002616a:	5e                   	pop    esi
c002616b:	5f                   	pop    edi
c002616c:	5d                   	pop    ebp
c002616d:	c3                   	ret    

c002616e <IOAPIC::IOAPIC()>:
c002616e:	83 ec 0c             	sub    esp,0xc
c0026171:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026175:	83 ec 08             	sub    esp,0x8
c0026178:	68 98 db 02 c0       	push   0xc002db98
c002617d:	50                   	push   eax
c002617e:	e8 b1 dd fe ff       	call   c0013f34 <Device::Device(char const*)>
c0026183:	83 c4 10             	add    esp,0x10
c0026186:	ba c0 dc 02 c0       	mov    edx,0xc002dcc0
c002618b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002618f:	89 10                	mov    DWORD PTR [eax],edx
c0026191:	90                   	nop
c0026192:	83 c4 0c             	add    esp,0xc
c0026195:	c3                   	ret    

c0026196 <APIC::APIC()>:
c0026196:	53                   	push   ebx
c0026197:	83 ec 18             	sub    esp,0x18
c002619a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002619e:	83 ec 08             	sub    esp,0x8
c00261a1:	68 a0 db 02 c0       	push   0xc002dba0
c00261a6:	50                   	push   eax
c00261a7:	e8 02 e5 fe ff       	call   c00146ae <InterruptController::InterruptController(char const*)>
c00261ac:	83 c4 10             	add    esp,0x10
c00261af:	ba 78 dc 02 c0       	mov    edx,0xc002dc78
c00261b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00261b8:	89 10                	mov    DWORD PTR [eax],edx
c00261ba:	a0 c0 33 03 c0       	mov    al,ds:0xc00333c0
c00261bf:	83 f0 01             	xor    eax,0x1
c00261c2:	84 c0                	test   al,al
c00261c4:	0f 84 a1 00 00 00    	je     c002626b <APIC::APIC()+0xd5>
c00261ca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00261cf:	a0 a0 19 03 c0       	mov    al,ds:0xc00319a0
c00261d4:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00261d8:	0f 83 86 00 00 00    	jae    c0026264 <APIC::APIC()+0xce>
c00261de:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00261e6:	83 ec 0c             	sub    esp,0xc
c00261e9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00261ed:	e8 9a 96 fe ff       	call   c000f88c <malloc>
c00261f2:	83 c4 10             	add    esp,0x10
c00261f5:	89 c3                	mov    ebx,eax
c00261f7:	83 ec 0c             	sub    esp,0xc
c00261fa:	53                   	push   ebx
c00261fb:	e8 6e ff ff ff       	call   c002616e <IOAPIC::IOAPIC()>
c0026200:	83 c4 10             	add    esp,0x10
c0026203:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0026207:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002620c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026210:	89 14 85 a0 33 03 c0 	mov    DWORD PTR [eax*4-0x3ffccc60],edx
c0026217:	a1 80 33 03 c0       	mov    eax,ds:0xc0033380
c002621c:	40                   	inc    eax
c002621d:	a3 80 33 03 c0       	mov    ds:0xc0033380,eax
c0026222:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0026227:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002622d:	83 ec 08             	sub    esp,0x8
c0026230:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026234:	50                   	push   eax
c0026235:	e8 f6 da fe ff       	call   c0013d30 <Device::addChild(Device*)>
c002623a:	83 c4 10             	add    esp,0x10
c002623d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026241:	8b 00                	mov    eax,DWORD PTR [eax]
c0026243:	83 c0 08             	add    eax,0x8
c0026246:	8b 00                	mov    eax,DWORD PTR [eax]
c0026248:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002624d:	6a 00                	push   0x0
c002624f:	6a 00                	push   0x0
c0026251:	52                   	push   edx
c0026252:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0026256:	ff d0                	call   eax
c0026258:	83 c4 10             	add    esp,0x10
c002625b:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002625f:	e9 6b ff ff ff       	jmp    c00261cf <APIC::APIC()+0x39>
c0026264:	c6 05 c0 33 03 c0 01 	mov    BYTE PTR ds:0xc00333c0,0x1
c002626b:	90                   	nop
c002626c:	83 c4 18             	add    esp,0x18
c002626f:	5b                   	pop    ebx
c0026270:	c3                   	ret    
c0026271:	90                   	nop

c0026272 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0026272:	55                   	push   ebp
c0026273:	89 e5                	mov    ebp,esp
c0026275:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026278:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002627e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026281:	72 1d                	jb     c00262a0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026283:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026286:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002628c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002628f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0026295:	01 d0                	add    eax,edx
c0026297:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002629a:	73 04                	jae    c00262a0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002629c:	b0 01                	mov    al,0x1
c002629e:	eb 02                	jmp    c00262a2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00262a0:	b0 00                	mov    al,0x0
c00262a2:	5d                   	pop    ebp
c00262a3:	c3                   	ret    

c00262a4 <IOAPIC::read(int)>:
c00262a4:	55                   	push   ebp
c00262a5:	89 e5                	mov    ebp,esp
c00262a7:	83 ec 10             	sub    esp,0x10
c00262aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262ad:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00262b3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00262b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00262b9:	0f b6 d0             	movzx  edx,al
c00262bc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00262bf:	89 10                	mov    DWORD PTR [eax],edx
c00262c1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00262c4:	83 c0 10             	add    eax,0x10
c00262c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00262c9:	c9                   	leave  
c00262ca:	c3                   	ret    
c00262cb:	90                   	nop

c00262cc <IOAPIC::open(int, int, void*)>:
c00262cc:	55                   	push   ebp
c00262cd:	89 e5                	mov    ebp,esp
c00262cf:	57                   	push   edi
c00262d0:	56                   	push   esi
c00262d1:	53                   	push   ebx
c00262d2:	83 ec 0c             	sub    esp,0xc
c00262d5:	83 ec 0c             	sub    esp,0xc
c00262d8:	68 cb db 02 c0       	push   0xc002dbcb
c00262dd:	e8 15 c6 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00262e2:	83 c4 10             	add    esp,0x10
c00262e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262e8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00262eb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00262f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262f4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00262fa:	8b 14 85 e0 19 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce620]
c0026301:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026304:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002630a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002630d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0026313:	8b 14 85 60 1a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce5a0]
c002631a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002631d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0026323:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026326:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002632c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002632f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026335:	0f b6 f8             	movzx  edi,al
c0026338:	89 d0                	mov    eax,edx
c002633a:	ba 00 00 00 00       	mov    edx,0x0
c002633f:	89 c1                	mov    ecx,eax
c0026341:	80 e5 ff             	and    ch,0xff
c0026344:	89 cb                	mov    ebx,ecx
c0026346:	0f b6 f2             	movzx  esi,dl
c0026349:	89 d8                	mov    eax,ebx
c002634b:	89 f2                	mov    edx,esi
c002634d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026350:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026353:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026357:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002635b:	83 e0 00             	and    eax,0x0
c002635e:	09 d0                	or     eax,edx
c0026360:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026364:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026367:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002636d:	8d 50 01             	lea    edx,[eax+0x1]
c0026370:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026373:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026379:	0f b6 d0             	movzx  edx,al
c002637c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002637f:	83 c2 08             	add    edx,0x8
c0026382:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026386:	0f b6 c9             	movzx  ecx,cl
c0026389:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002638f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026393:	83 ec 08             	sub    esp,0x8
c0026396:	6a 01                	push   0x1
c0026398:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002639b:	e8 04 ff ff ff       	call   c00262a4 <IOAPIC::read(int)>
c00263a0:	83 c4 10             	add    esp,0x10
c00263a3:	c1 f8 10             	sar    eax,0x10
c00263a6:	0f b6 c0             	movzx  eax,al
c00263a9:	8d 50 01             	lea    edx,[eax+0x1]
c00263ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263af:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00263b5:	b8 00 00 00 00       	mov    eax,0x0
c00263ba:	8d 65 f4             	lea    esp,[ebp-0xc]
c00263bd:	5b                   	pop    ebx
c00263be:	5e                   	pop    esi
c00263bf:	5f                   	pop    edi
c00263c0:	5d                   	pop    ebp
c00263c1:	c3                   	ret    

c00263c2 <IOAPIC::write(int, int)>:
c00263c2:	55                   	push   ebp
c00263c3:	89 e5                	mov    ebp,esp
c00263c5:	83 ec 10             	sub    esp,0x10
c00263c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263cb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00263d1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00263d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00263d7:	0f b6 d0             	movzx  edx,al
c00263da:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00263dd:	89 10                	mov    DWORD PTR [eax],edx
c00263df:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00263e2:	8d 50 10             	lea    edx,[eax+0x10]
c00263e5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00263e8:	89 02                	mov    DWORD PTR [edx],eax
c00263ea:	90                   	nop
c00263eb:	c9                   	leave  
c00263ec:	c3                   	ret    
c00263ed:	90                   	nop

c00263ee <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00263ee:	55                   	push   ebp
c00263ef:	89 e5                	mov    ebp,esp
c00263f1:	53                   	push   ebx
c00263f2:	83 ec 2c             	sub    esp,0x2c
c00263f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00263f8:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00263fb:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00263fe:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0026401:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0026404:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026407:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002640a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002640d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026410:	88 d8                	mov    al,bl
c0026412:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0026415:	88 c8                	mov    al,cl
c0026417:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002641a:	88 d0                	mov    al,dl
c002641c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002641f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026423:	83 c0 08             	add    eax,0x8
c0026426:	01 c0                	add    eax,eax
c0026428:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002642b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002642f:	83 c0 08             	add    eax,0x8
c0026432:	01 c0                	add    eax,eax
c0026434:	40                   	inc    eax
c0026435:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026438:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002643b:	50                   	push   eax
c002643c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002643f:	e8 60 fe ff ff       	call   c00262a4 <IOAPIC::read(int)>
c0026444:	83 c4 08             	add    esp,0x8
c0026447:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002644a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0026451:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0026454:	c1 e0 18             	shl    eax,0x18
c0026457:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002645a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002645d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026460:	52                   	push   edx
c0026461:	50                   	push   eax
c0026462:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026465:	e8 58 ff ff ff       	call   c00263c2 <IOAPIC::write(int, int)>
c002646a:	83 c4 0c             	add    esp,0xc
c002646d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026470:	50                   	push   eax
c0026471:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026474:	e8 2b fe ff ff       	call   c00262a4 <IOAPIC::read(int)>
c0026479:	83 c4 08             	add    esp,0x8
c002647c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002647f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0026486:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002648d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0026494:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026498:	74 09                	je     c00264a3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002649a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00264a1:	eb 07                	jmp    c00264aa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00264a3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00264aa:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00264ae:	74 09                	je     c00264b9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00264b0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00264b7:	eb 07                	jmp    c00264c0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00264b9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00264c0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00264c7:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00264cb:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00264ce:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00264d1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00264d4:	52                   	push   edx
c00264d5:	50                   	push   eax
c00264d6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264d9:	e8 e4 fe ff ff       	call   c00263c2 <IOAPIC::write(int, int)>
c00264de:	83 c4 0c             	add    esp,0xc
c00264e1:	90                   	nop
c00264e2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00264e5:	c9                   	leave  
c00264e6:	c3                   	ret    
c00264e7:	90                   	nop

c00264e8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00264e8:	55                   	push   ebp
c00264e9:	89 e5                	mov    ebp,esp
c00264eb:	57                   	push   edi
c00264ec:	56                   	push   esi
c00264ed:	53                   	push   ebx
c00264ee:	83 ec 2c             	sub    esp,0x2c
c00264f1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00264f4:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00264f7:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00264fb:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00264ff:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026503:	74 5a                	je     c002655f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026505:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0026509:	7f 44                	jg     c002654f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002650b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002650e:	05 80 e2 02 c0       	add    eax,0xc002e280
c0026513:	8a 00                	mov    al,BYTE PTR [eax]
c0026515:	0f b6 c0             	movzx  eax,al
c0026518:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002651b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002651e:	66 8b 84 00 80 19 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce680]
c0026526:	0f b7 c0             	movzx  eax,ax
c0026529:	83 e0 02             	and    eax,0x2
c002652c:	85 c0                	test   eax,eax
c002652e:	74 04                	je     c0026534 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0026530:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0026534:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026537:	66 8b 84 00 80 19 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce680]
c002653f:	0f b7 c0             	movzx  eax,ax
c0026542:	83 e0 08             	and    eax,0x8
c0026545:	85 c0                	test   eax,eax
c0026547:	74 16                	je     c002655f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026549:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002654d:	eb 10                	jmp    c002655f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002654f:	83 ec 0c             	sub    esp,0xc
c0026552:	68 dc db 02 c0       	push   0xc002dbdc
c0026557:	e8 d1 3d ff ff       	call   c001a32d <Krnl::panic(char const*)>
c002655c:	83 c4 10             	add    esp,0x10
c002655f:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0026563:	a1 80 33 03 c0       	mov    eax,ds:0xc0033380
c0026568:	83 ec 08             	sub    esp,0x8
c002656b:	50                   	push   eax
c002656c:	68 14 dc 02 c0       	push   0xc002dc14
c0026571:	e8 81 c3 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0026576:	83 c4 10             	add    esp,0x10
c0026579:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0026580:	a1 80 33 03 c0       	mov    eax,ds:0xc0033380
c0026585:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0026588:	7d 67                	jge    c00265f1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002658a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002658d:	8b 04 85 a0 33 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccc60]
c0026594:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026597:	83 ec 08             	sub    esp,0x8
c002659a:	52                   	push   edx
c002659b:	50                   	push   eax
c002659c:	e8 d1 fc ff ff       	call   c0026272 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00265a1:	83 c4 10             	add    esp,0x10
c00265a4:	84 c0                	test   al,al
c00265a6:	74 44                	je     c00265ec <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00265a8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00265ab:	8b 1c 85 a0 33 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffccc60]
c00265b2:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00265b6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00265b9:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00265bd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00265c0:	83 c0 20             	add    eax,0x20
c00265c3:	0f b6 f0             	movzx  esi,al
c00265c6:	b8 00 00 00 00       	mov    eax,0x0
c00265cb:	99                   	cdq    
c00265cc:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00265cf:	0f b6 c9             	movzx  ecx,cl
c00265d2:	83 ec 04             	sub    esp,0x4
c00265d5:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00265d8:	57                   	push   edi
c00265d9:	56                   	push   esi
c00265da:	52                   	push   edx
c00265db:	50                   	push   eax
c00265dc:	51                   	push   ecx
c00265dd:	53                   	push   ebx
c00265de:	e8 0b fe ff ff       	call   c00263ee <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00265e3:	83 c4 20             	add    esp,0x20
c00265e6:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00265ea:	eb 05                	jmp    c00265f1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00265ec:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00265ef:	eb 8f                	jmp    c0026580 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00265f1:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00265f4:	83 f0 01             	xor    eax,0x1
c00265f7:	84 c0                	test   al,al
c00265f9:	74 10                	je     c002660b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00265fb:	83 ec 0c             	sub    esp,0xc
c00265fe:	68 2b dc 02 c0       	push   0xc002dc2b
c0026603:	e8 25 3d ff ff       	call   c001a32d <Krnl::panic(char const*)>
c0026608:	83 c4 10             	add    esp,0x10
c002660b:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002660f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0026616:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002661a:	7f 65                	jg     c0026681 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002661c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002661f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026622:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026629:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002662c:	01 ca                	add    edx,ecx
c002662e:	83 c2 54             	add    edx,0x54
c0026631:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0026635:	85 c0                	test   eax,eax
c0026637:	75 43                	jne    c002667c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0026639:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002663c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002663f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026646:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026649:	01 ca                	add    edx,ecx
c002664b:	8d 4a 54             	lea    ecx,[edx+0x54]
c002664e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0026651:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026655:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026658:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002665b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026662:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026665:	01 ca                	add    edx,ecx
c0026667:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c002666d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0026670:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026674:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026677:	83 e8 20             	sub    eax,0x20
c002667a:	eb 1a                	jmp    c0026696 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c002667c:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c002667f:	eb 95                	jmp    c0026616 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0026681:	83 ec 0c             	sub    esp,0xc
c0026684:	68 38 dc 02 c0       	push   0xc002dc38
c0026689:	e8 9f 3c ff ff       	call   c001a32d <Krnl::panic(char const*)>
c002668e:	83 c4 10             	add    esp,0x10
c0026691:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026696:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026699:	5b                   	pop    ebx
c002669a:	5e                   	pop    esi
c002669b:	5f                   	pop    edi
c002669c:	5d                   	pop    ebp
c002669d:	c3                   	ret    

c002669e <PIC::disable()>:
c002669e:	55                   	push   ebp
c002669f:	89 e5                	mov    ebp,esp
c00266a1:	83 ec 10             	sub    esp,0x10
c00266a4:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00266aa:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00266ae:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00266b1:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00266b5:	ee                   	out    dx,al
c00266b6:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00266bc:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00266c0:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00266c3:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00266c7:	ee                   	out    dx,al
c00266c8:	90                   	nop
c00266c9:	c9                   	leave  
c00266ca:	c3                   	ret    
c00266cb:	90                   	nop

c00266cc <PIC::close(int, int, void*)>:
c00266cc:	55                   	push   ebp
c00266cd:	89 e5                	mov    ebp,esp
c00266cf:	83 ec 08             	sub    esp,0x8
c00266d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00266d7:	83 c0 3c             	add    eax,0x3c
c00266da:	8b 00                	mov    eax,DWORD PTR [eax]
c00266dc:	83 ec 0c             	sub    esp,0xc
c00266df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00266e2:	ff d0                	call   eax
c00266e4:	83 c4 10             	add    esp,0x10
c00266e7:	b8 00 00 00 00       	mov    eax,0x0
c00266ec:	c9                   	leave  
c00266ed:	c3                   	ret    

c00266ee <PIC::PIC()>:
c00266ee:	83 ec 0c             	sub    esp,0xc
c00266f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266f5:	83 ec 08             	sub    esp,0x8
c00266f8:	68 e4 dc 02 c0       	push   0xc002dce4
c00266fd:	50                   	push   eax
c00266fe:	e8 ab df fe ff       	call   c00146ae <InterruptController::InterruptController(char const*)>
c0026703:	83 c4 10             	add    esp,0x10
c0026706:	ba 10 dd 02 c0       	mov    edx,0xc002dd10
c002670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002670f:	89 10                	mov    DWORD PTR [eax],edx
c0026711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026715:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002671b:	0f b6 d0             	movzx  edx,al
c002671e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026722:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0026729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002672d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026733:	0f b6 d0             	movzx  edx,al
c0026736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002673a:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002673f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026743:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026749:	8d 50 01             	lea    edx,[eax+0x1]
c002674c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026750:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026756:	0f b6 d0             	movzx  edx,al
c0026759:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002675d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026761:	83 e1 3f             	and    ecx,0x3f
c0026764:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002676c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026772:	0f b6 d0             	movzx  edx,al
c0026775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026779:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026784:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002678a:	0f b6 d0             	movzx  edx,al
c002678d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026791:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002679a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00267a0:	8d 50 01             	lea    edx,[eax+0x1]
c00267a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00267a7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00267ad:	0f b6 d0             	movzx  edx,al
c00267b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267b4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00267b8:	83 e1 3f             	and    ecx,0x3f
c00267bb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00267bf:	90                   	nop
c00267c0:	83 c4 0c             	add    esp,0xc
c00267c3:	c3                   	ret    

c00267c4 <PIC::ioWait()>:
c00267c4:	eb 00                	jmp    c00267c6 <PIC::ioWait()+0x2>
c00267c6:	eb 00                	jmp    c00267c8 <PIC::ioWait()+0x4>
c00267c8:	90                   	nop
c00267c9:	c3                   	ret    

c00267ca <PIC::getIRQReg(int)>:
c00267ca:	55                   	push   ebp
c00267cb:	89 e5                	mov    ebp,esp
c00267cd:	83 ec 10             	sub    esp,0x10
c00267d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267d3:	0f b6 c0             	movzx  eax,al
c00267d6:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00267dc:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00267df:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00267e2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00267e6:	ee                   	out    dx,al
c00267e7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267ea:	0f b6 c0             	movzx  eax,al
c00267ed:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00267f3:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00267f6:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00267f9:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00267fd:	ee                   	out    dx,al
c00267fe:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026804:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0026808:	89 c2                	mov    edx,eax
c002680a:	ec                   	in     al,dx
c002680b:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c002680e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026811:	0f b6 c0             	movzx  eax,al
c0026814:	c1 e0 08             	shl    eax,0x8
c0026817:	89 c1                	mov    ecx,eax
c0026819:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c002681f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026823:	89 c2                	mov    edx,eax
c0026825:	ec                   	in     al,dx
c0026826:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026829:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002682c:	0f b6 c0             	movzx  eax,al
c002682f:	09 c8                	or     eax,ecx
c0026831:	c9                   	leave  
c0026832:	c3                   	ret    
c0026833:	90                   	nop

c0026834 <PIC::eoi(unsigned char)>:
c0026834:	55                   	push   ebp
c0026835:	89 e5                	mov    ebp,esp
c0026837:	83 ec 14             	sub    esp,0x14
c002683a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002683d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026840:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026844:	75 1e                	jne    c0026864 <PIC::eoi(unsigned char)+0x30>
c0026846:	6a 0b                	push   0xb
c0026848:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002684b:	e8 7a ff ff ff       	call   c00267ca <PIC::getIRQReg(int)>
c0026850:	83 c4 08             	add    esp,0x8
c0026853:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026857:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c002685b:	25 80 00 00 00       	and    eax,0x80
c0026860:	85 c0                	test   eax,eax
c0026862:	74 5f                	je     c00268c3 <PIC::eoi(unsigned char)+0x8f>
c0026864:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026868:	75 2d                	jne    c0026897 <PIC::eoi(unsigned char)+0x63>
c002686a:	6a 0b                	push   0xb
c002686c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002686f:	e8 56 ff ff ff       	call   c00267ca <PIC::getIRQReg(int)>
c0026874:	83 c4 08             	add    esp,0x8
c0026877:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c002687b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002687e:	66 85 c0             	test   ax,ax
c0026881:	78 14                	js     c0026897 <PIC::eoi(unsigned char)+0x63>
c0026883:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026889:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c002688d:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026890:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026894:	ee                   	out    dx,al
c0026895:	eb 2d                	jmp    c00268c4 <PIC::eoi(unsigned char)+0x90>
c0026897:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002689b:	76 12                	jbe    c00268af <PIC::eoi(unsigned char)+0x7b>
c002689d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00268a3:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00268a7:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00268aa:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00268ae:	ee                   	out    dx,al
c00268af:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00268b5:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00268b9:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00268bc:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00268c0:	ee                   	out    dx,al
c00268c1:	eb 01                	jmp    c00268c4 <PIC::eoi(unsigned char)+0x90>
c00268c3:	90                   	nop
c00268c4:	c9                   	leave  
c00268c5:	c3                   	ret    

c00268c6 <PIC::remap()>:
c00268c6:	55                   	push   ebp
c00268c7:	89 e5                	mov    ebp,esp
c00268c9:	83 ec 48             	sub    esp,0x48
c00268cc:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00268d3:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00268da:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00268e0:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00268e3:	89 c2                	mov    edx,eax
c00268e5:	ec                   	in     al,dx
c00268e6:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00268e9:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00268ec:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00268ef:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00268f5:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00268f8:	89 c2                	mov    edx,eax
c00268fa:	ec                   	in     al,dx
c00268fb:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00268fe:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026901:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026904:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002690a:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c002690e:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026911:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026914:	ee                   	out    dx,al
c0026915:	83 ec 0c             	sub    esp,0xc
c0026918:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002691b:	e8 a4 fe ff ff       	call   c00267c4 <PIC::ioWait()>
c0026920:	83 c4 10             	add    esp,0x10
c0026923:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026929:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c002692d:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026930:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026933:	ee                   	out    dx,al
c0026934:	83 ec 0c             	sub    esp,0xc
c0026937:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002693a:	e8 85 fe ff ff       	call   c00267c4 <PIC::ioWait()>
c002693f:	83 c4 10             	add    esp,0x10
c0026942:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026945:	0f b6 c0             	movzx  eax,al
c0026948:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c002694e:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026951:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026954:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026957:	ee                   	out    dx,al
c0026958:	83 ec 0c             	sub    esp,0xc
c002695b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002695e:	e8 61 fe ff ff       	call   c00267c4 <PIC::ioWait()>
c0026963:	83 c4 10             	add    esp,0x10
c0026966:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026969:	0f b6 c0             	movzx  eax,al
c002696c:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026972:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026975:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026978:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002697b:	ee                   	out    dx,al
c002697c:	83 ec 0c             	sub    esp,0xc
c002697f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026982:	e8 3d fe ff ff       	call   c00267c4 <PIC::ioWait()>
c0026987:	83 c4 10             	add    esp,0x10
c002698a:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026990:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026994:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026997:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002699a:	ee                   	out    dx,al
c002699b:	83 ec 0c             	sub    esp,0xc
c002699e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269a1:	e8 1e fe ff ff       	call   c00267c4 <PIC::ioWait()>
c00269a6:	83 c4 10             	add    esp,0x10
c00269a9:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00269af:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00269b3:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00269b6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00269b9:	ee                   	out    dx,al
c00269ba:	83 ec 0c             	sub    esp,0xc
c00269bd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269c0:	e8 ff fd ff ff       	call   c00267c4 <PIC::ioWait()>
c00269c5:	83 c4 10             	add    esp,0x10
c00269c8:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00269ce:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00269d2:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00269d5:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00269d8:	ee                   	out    dx,al
c00269d9:	83 ec 0c             	sub    esp,0xc
c00269dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269df:	e8 e0 fd ff ff       	call   c00267c4 <PIC::ioWait()>
c00269e4:	83 c4 10             	add    esp,0x10
c00269e7:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00269ed:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00269f1:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00269f4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00269f7:	ee                   	out    dx,al
c00269f8:	83 ec 0c             	sub    esp,0xc
c00269fb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269fe:	e8 c1 fd ff ff       	call   c00267c4 <PIC::ioWait()>
c0026a03:	83 c4 10             	add    esp,0x10
c0026a06:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026a0a:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026a10:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026a13:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026a16:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026a19:	ee                   	out    dx,al
c0026a1a:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026a1e:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026a24:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026a27:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026a2a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026a2d:	ee                   	out    dx,al
c0026a2e:	90                   	nop
c0026a2f:	c9                   	leave  
c0026a30:	c3                   	ret    
c0026a31:	90                   	nop

c0026a32 <PIC::open(int, int, void*)>:
c0026a32:	55                   	push   ebp
c0026a33:	89 e5                	mov    ebp,esp
c0026a35:	83 ec 18             	sub    esp,0x18
c0026a38:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026a3e:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026a42:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026a45:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026a49:	ee                   	out    dx,al
c0026a4a:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026a50:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026a54:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026a57:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026a5b:	ee                   	out    dx,al
c0026a5c:	83 ec 0c             	sub    esp,0xc
c0026a5f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a62:	e8 5f fe ff ff       	call   c00268c6 <PIC::remap()>
c0026a67:	83 c4 10             	add    esp,0x10
c0026a6a:	b8 00 00 00 00       	mov    eax,0x0
c0026a6f:	c9                   	leave  
c0026a70:	c3                   	ret    
c0026a71:	90                   	nop

c0026a72 <APICTimer::close(int, int, void*)>:
c0026a72:	b8 00 00 00 00       	mov    eax,0x0
c0026a77:	c3                   	ret    

c0026a78 <apicTimerHandler(regs*, void*)>:
c0026a78:	83 ec 0c             	sub    esp,0xc
c0026a7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026a7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026a81:	99                   	cdq    
c0026a82:	52                   	push   edx
c0026a83:	50                   	push   eax
c0026a84:	6a 00                	push   0x0
c0026a86:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026a8b:	e8 94 07 00 00       	call   c0027224 <__udivdi3>
c0026a90:	83 c4 10             	add    esp,0x10
c0026a93:	83 ec 08             	sub    esp,0x8
c0026a96:	52                   	push   edx
c0026a97:	50                   	push   eax
c0026a98:	e8 a0 fd fe ff       	call   c001683d <timerHandler(unsigned long long)>
c0026a9d:	83 c4 10             	add    esp,0x10
c0026aa0:	90                   	nop
c0026aa1:	83 c4 0c             	add    esp,0xc
c0026aa4:	c3                   	ret    
c0026aa5:	90                   	nop

c0026aa6 <APICTimer::write(int)>:
c0026aa6:	53                   	push   ebx
c0026aa7:	83 ec 28             	sub    esp,0x28
c0026aaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026aae:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026ab2:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026ab8:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0026abd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026ac3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026ac9:	83 ec 0c             	sub    esp,0xc
c0026acc:	50                   	push   eax
c0026acd:	e8 de f4 ff ff       	call   c0025fb0 <APIC::getBase()>
c0026ad2:	83 c4 10             	add    esp,0x10
c0026ad5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026ad9:	a1 90 f6 02 c0       	mov    eax,ds:0xc002f690
c0026ade:	8b 15 94 f6 02 c0    	mov    edx,DWORD PTR ds:0xc002f694
c0026ae4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026ae8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026aec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026af0:	05 e0 03 00 00       	add    eax,0x3e0
c0026af5:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026afb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026aff:	05 80 03 00 00       	add    eax,0x380
c0026b04:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026b0a:	fb                   	sti    
c0026b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b0f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026b13:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026b18:	83 d2 00             	adc    edx,0x0
c0026b1b:	89 c1                	mov    ecx,eax
c0026b1d:	89 d3                	mov    ebx,edx
c0026b1f:	a1 90 f6 02 c0       	mov    eax,ds:0xc002f690
c0026b24:	8b 15 94 f6 02 c0    	mov    edx,DWORD PTR ds:0xc002f694
c0026b2a:	39 c8                	cmp    eax,ecx
c0026b2c:	89 d0                	mov    eax,edx
c0026b2e:	19 d8                	sbb    eax,ebx
c0026b30:	73 02                	jae    c0026b34 <APICTimer::write(int)+0x8e>
c0026b32:	eb d7                	jmp    c0026b0b <APICTimer::write(int)+0x65>
c0026b34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b38:	05 20 03 00 00       	add    eax,0x320
c0026b3d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026b43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b47:	05 90 03 00 00       	add    eax,0x390
c0026b4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b4e:	f7 d0                	not    eax
c0026b50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026b54:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026b58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026b5c:	ba 00 00 00 00       	mov    edx,0x0
c0026b61:	f7 f3                	div    ebx
c0026b63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026b6b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026b71:	0d 00 00 02 00       	or     eax,0x20000
c0026b76:	89 c2                	mov    edx,eax
c0026b78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b7c:	05 20 03 00 00       	add    eax,0x320
c0026b81:	89 10                	mov    DWORD PTR [eax],edx
c0026b83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b87:	05 e0 03 00 00       	add    eax,0x3e0
c0026b8c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026b92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b96:	05 80 03 00 00       	add    eax,0x380
c0026b9b:	89 c2                	mov    edx,eax
c0026b9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026ba1:	89 02                	mov    DWORD PTR [edx],eax
c0026ba3:	90                   	nop
c0026ba4:	83 c4 28             	add    esp,0x28
c0026ba7:	5b                   	pop    ebx
c0026ba8:	c3                   	ret    
c0026ba9:	90                   	nop

c0026baa <APICTimer::open(int, int, void*)>:
c0026baa:	57                   	push   edi
c0026bab:	56                   	push   esi
c0026bac:	53                   	push   ebx
c0026bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bb1:	8b 00                	mov    eax,DWORD PTR [eax]
c0026bb3:	83 c0 24             	add    eax,0x24
c0026bb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0026bb8:	83 ec 08             	sub    esp,0x8
c0026bbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026bbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026bc3:	ff d0                	call   eax
c0026bc5:	83 c4 10             	add    esp,0x10
c0026bc8:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0026bcd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026bd3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026bd9:	83 ec 0c             	sub    esp,0xc
c0026bdc:	50                   	push   eax
c0026bdd:	e8 ce f3 ff ff       	call   c0025fb0 <APIC::getBase()>
c0026be2:	83 c4 10             	add    esp,0x10
c0026be5:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bef:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026bf5:	0f b6 f8             	movzx  edi,al
c0026bf8:	89 d0                	mov    eax,edx
c0026bfa:	ba 00 00 00 00       	mov    edx,0x0
c0026bff:	89 c1                	mov    ecx,eax
c0026c01:	80 e5 ff             	and    ch,0xff
c0026c04:	89 cb                	mov    ebx,ecx
c0026c06:	0f b6 f2             	movzx  esi,dl
c0026c09:	89 d8                	mov    eax,ebx
c0026c0b:	89 f2                	mov    edx,esi
c0026c0d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026c11:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026c14:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026c18:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026c1c:	83 e0 00             	and    eax,0x0
c0026c1f:	09 d0                	or     eax,edx
c0026c21:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026c25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c29:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026c2f:	8d 50 01             	lea    edx,[eax+0x1]
c0026c32:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026c36:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026c3c:	0f b6 d0             	movzx  edx,al
c0026c3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c43:	83 c2 08             	add    edx,0x8
c0026c46:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026c4a:	0f b6 c9             	movzx  ecx,cl
c0026c4d:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026c53:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026c5f:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026c65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c69:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026c6d:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026c73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026c77:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026c7d:	83 ec 0c             	sub    esp,0xc
c0026c80:	51                   	push   ecx
c0026c81:	6a 01                	push   0x1
c0026c83:	68 78 6a 02 c0       	push   0xc0026a78
c0026c88:	52                   	push   edx
c0026c89:	50                   	push   eax
c0026c8a:	e8 19 d0 fe ff       	call   c0013ca8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026c8f:	83 c4 20             	add    esp,0x20
c0026c92:	89 c2                	mov    edx,eax
c0026c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c98:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026c9e:	b8 00 00 00 00       	mov    eax,0x0
c0026ca3:	5b                   	pop    ebx
c0026ca4:	5e                   	pop    esi
c0026ca5:	5f                   	pop    edi
c0026ca6:	c3                   	ret    
c0026ca7:	90                   	nop

c0026ca8 <APICTimer::APICTimer()>:
c0026ca8:	83 ec 0c             	sub    esp,0xc
c0026cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026caf:	83 ec 08             	sub    esp,0x8
c0026cb2:	68 50 dd 02 c0       	push   0xc002dd50
c0026cb7:	50                   	push   eax
c0026cb8:	e8 f1 fa fe ff       	call   c00167ae <Timer::Timer(char const*)>
c0026cbd:	83 c4 10             	add    esp,0x10
c0026cc0:	ba 64 dd 02 c0       	mov    edx,0xc002dd64
c0026cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cc9:	89 10                	mov    DWORD PTR [eax],edx
c0026ccb:	90                   	nop
c0026ccc:	83 c4 0c             	add    esp,0xc
c0026ccf:	c3                   	ret    

c0026cd0 <PIT::write(int)>:
c0026cd0:	83 ec 10             	sub    esp,0x10
c0026cd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026cd7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026cdb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026ce1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026ce5:	a3 c4 33 03 c0       	mov    ds:0xc00333c4,eax
c0026cea:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026cef:	99                   	cdq    
c0026cf0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026cf4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026cf8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026cff:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026d04:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026d08:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026d0d:	ee                   	out    dx,al
c0026d0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026d12:	0f b6 c0             	movzx  eax,al
c0026d15:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026d1c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026d20:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026d24:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026d29:	ee                   	out    dx,al
c0026d2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026d2e:	c1 f8 08             	sar    eax,0x8
c0026d31:	0f b6 c0             	movzx  eax,al
c0026d34:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026d3b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026d3f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026d43:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026d48:	ee                   	out    dx,al
c0026d49:	90                   	nop
c0026d4a:	83 c4 10             	add    esp,0x10
c0026d4d:	c3                   	ret    

c0026d4e <pitHandler(regs*, void*)>:
c0026d4e:	83 ec 0c             	sub    esp,0xc
c0026d51:	a1 c4 33 03 c0       	mov    eax,ds:0xc00333c4
c0026d56:	99                   	cdq    
c0026d57:	52                   	push   edx
c0026d58:	50                   	push   eax
c0026d59:	6a 00                	push   0x0
c0026d5b:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026d60:	e8 bf 04 00 00       	call   c0027224 <__udivdi3>
c0026d65:	83 c4 10             	add    esp,0x10
c0026d68:	83 ec 08             	sub    esp,0x8
c0026d6b:	52                   	push   edx
c0026d6c:	50                   	push   eax
c0026d6d:	e8 cb fa fe ff       	call   c001683d <timerHandler(unsigned long long)>
c0026d72:	83 c4 10             	add    esp,0x10
c0026d75:	90                   	nop
c0026d76:	83 c4 0c             	add    esp,0xc
c0026d79:	c3                   	ret    

c0026d7a <PIT::open(int, int, void*)>:
c0026d7a:	83 ec 0c             	sub    esp,0xc
c0026d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d81:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d83:	83 c0 24             	add    eax,0x24
c0026d86:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d88:	83 ec 08             	sub    esp,0x8
c0026d8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d93:	ff d0                	call   eax
c0026d95:	83 c4 10             	add    esp,0x10
c0026d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d9c:	83 ec 0c             	sub    esp,0xc
c0026d9f:	6a 00                	push   0x0
c0026da1:	6a 01                	push   0x1
c0026da3:	68 4e 6d 02 c0       	push   0xc0026d4e
c0026da8:	6a 00                	push   0x0
c0026daa:	50                   	push   eax
c0026dab:	e8 f8 ce fe ff       	call   c0013ca8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026db0:	83 c4 20             	add    esp,0x20
c0026db3:	89 c2                	mov    edx,eax
c0026db5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026db9:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026dbf:	b8 00 00 00 00       	mov    eax,0x0
c0026dc4:	83 c4 0c             	add    esp,0xc
c0026dc7:	c3                   	ret    

c0026dc8 <PIT::close(int, int, void*)>:
c0026dc8:	83 ec 0c             	sub    esp,0xc
c0026dcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dcf:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026dd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ddd:	6a 01                	push   0x1
c0026ddf:	68 4e 6d 02 c0       	push   0xc0026d4e
c0026de4:	6a 00                	push   0x0
c0026de6:	50                   	push   eax
c0026de7:	e8 06 cf fe ff       	call   c0013cf2 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026dec:	83 c4 10             	add    esp,0x10
c0026def:	b8 00 00 00 00       	mov    eax,0x0
c0026df4:	83 c4 0c             	add    esp,0xc
c0026df7:	c3                   	ret    

c0026df8 <PIT::PIT()>:
c0026df8:	83 ec 0c             	sub    esp,0xc
c0026dfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dff:	83 ec 08             	sub    esp,0x8
c0026e02:	68 8c dd 02 c0       	push   0xc002dd8c
c0026e07:	50                   	push   eax
c0026e08:	e8 a1 f9 fe ff       	call   c00167ae <Timer::Timer(char const*)>
c0026e0d:	83 c4 10             	add    esp,0x10
c0026e10:	ba b4 dd 02 c0       	mov    edx,0xc002ddb4
c0026e15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e19:	89 10                	mov    DWORD PTR [eax],edx
c0026e1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e1f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026e25:	0f b6 d0             	movzx  edx,al
c0026e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e2c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026e33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e37:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026e3d:	0f b6 d0             	movzx  edx,al
c0026e40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e44:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026e49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e4d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026e53:	8d 50 01             	lea    edx,[eax+0x1]
c0026e56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026e5a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026e60:	0f b6 d0             	movzx  edx,al
c0026e63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e67:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026e6b:	83 e1 3f             	and    ecx,0x3f
c0026e6e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026e72:	90                   	nop
c0026e73:	83 c4 0c             	add    esp,0xc
c0026e76:	c3                   	ret    
c0026e77:	66 90                	xchg   ax,ax
c0026e79:	66 90                	xchg   ax,ax
c0026e7b:	66 90                	xchg   ax,ax
c0026e7d:	66 90                	xchg   ax,ax
c0026e7f:	90                   	nop

c0026e80 <avxDetect>:
c0026e80:	b8 00 00 00 00       	mov    eax,0x0
c0026e85:	c3                   	ret    

c0026e86 <avxSave>:
c0026e86:	c3                   	ret    

c0026e87 <avxLoad>:
c0026e87:	c3                   	ret    

c0026e88 <avxInit>:
c0026e88:	c3                   	ret    

c0026e89 <avxClose>:
c0026e89:	c3                   	ret    

c0026e8a <wouldSheSayYes>:
c0026e8a:	c3                   	ret    
c0026e8b:	49                   	dec    ecx
c0026e8c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026e90:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026e94:	75 20                	jne    c0026eb6 <sseDetect.noSSE+0x1>
c0026e96:	4e                   	dec    esi
c0026e97:	79 61                	jns    c0026efa <x87Detect+0x14>
c0026e99:	68 2e 2e 2e 00       	push   0x2e2e2e
c0026e9e:	66 90                	xchg   ax,ax

c0026ea0 <absolutelyNoChanceInHell>:
c0026ea0:	b8 01 00 00 00       	mov    eax,0x1
c0026ea5:	0f a2                	cpuid  
c0026ea7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0026ead:	74 06                	je     c0026eb5 <sseDetect.noSSE>
c0026eaf:	b8 01 00 00 00       	mov    eax,0x1
c0026eb4:	c3                   	ret    

c0026eb5 <sseDetect.noSSE>:
c0026eb5:	31 c0                	xor    eax,eax
c0026eb7:	c3                   	ret    

c0026eb8 <sseSave>:
c0026eb8:	0f ae 44 24 04       	fxsave [esp+0x4]
c0026ebd:	c3                   	ret    

c0026ebe <sseLoad>:
c0026ebe:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026ec3:	c3                   	ret    

c0026ec4 <sseInit>:
c0026ec4:	e8 49 00 00 00       	call   c0026f12 <x87Init>
c0026ec9:	0f 20 e0             	mov    eax,cr4
c0026ecc:	66 0d 00 06          	or     ax,0x600
c0026ed0:	0f 22 e0             	mov    cr4,eax
c0026ed3:	c3                   	ret    

c0026ed4 <sseClose>:
c0026ed4:	c3                   	ret    
c0026ed5:	66 90                	xchg   ax,ax
c0026ed7:	66 90                	xchg   ax,ax
c0026ed9:	66 90                	xchg   ax,ax
c0026edb:	66 90                	xchg   ax,ax
c0026edd:	66 90                	xchg   ax,ax
c0026edf:	90                   	nop

c0026ee0 <value_37F>:
c0026ee0:	7f 03                	jg     c0026ee5 <value_37A+0x1>

c0026ee2 <value_37E>:
c0026ee2:	7e 03                	jle    c0026ee7 <x87Detect+0x1>

c0026ee4 <value_37A>:
c0026ee4:	7a 03                	jp     c0026ee9 <x87Detect+0x3>

c0026ee6 <x87Detect>:
c0026ee6:	b8 01 00 00 00       	mov    eax,0x1
c0026eeb:	0f a2                	cpuid  
c0026eed:	f7 c2 01 00 00 00    	test   edx,0x1
c0026ef3:	74 06                	je     c0026efb <x87Detect.nox87>
c0026ef5:	b8 01 00 00 00       	mov    eax,0x1
c0026efa:	c3                   	ret    

c0026efb <x87Detect.nox87>:
c0026efb:	b8 00 00 00 00       	mov    eax,0x0
c0026f00:	c3                   	ret    

c0026f01 <x87Save>:
c0026f01:	55                   	push   ebp
c0026f02:	89 e5                	mov    ebp,esp
c0026f04:	9b dd 75 08          	fsave  [ebp+0x8]
c0026f08:	c9                   	leave  
c0026f09:	c3                   	ret    

c0026f0a <x87Load>:
c0026f0a:	55                   	push   ebp
c0026f0b:	89 e5                	mov    ebp,esp
c0026f0d:	dd 65 08             	frstor [ebp+0x8]
c0026f10:	c9                   	leave  
c0026f11:	c3                   	ret    

c0026f12 <x87Init>:
c0026f12:	9b db e3             	finit  
c0026f15:	0f 20 c0             	mov    eax,cr0
c0026f18:	66 25 fb ff          	and    ax,0xfffb
c0026f1c:	66 0d 22 00          	or     ax,0x22
c0026f20:	0f 22 c0             	mov    cr0,eax
c0026f23:	0f 06                	clts   
c0026f25:	d9 2d e4 6e 02 c0    	fldcw  WORD PTR ds:0xc0026ee4
c0026f2b:	c3                   	ret    

c0026f2c <x87Close>:
c0026f2c:	c3                   	ret    
c0026f2d:	66 90                	xchg   ax,ax
c0026f2f:	90                   	nop

c0026f30 <__do_global_ctors_aux>:
c0026f30:	a1 68 9b 02 c0       	mov    eax,ds:0xc0029b68
c0026f35:	83 f8 ff             	cmp    eax,0xffffffff
c0026f38:	74 1a                	je     c0026f54 <__do_global_ctors_aux+0x24>
c0026f3a:	55                   	push   ebp
c0026f3b:	89 e5                	mov    ebp,esp
c0026f3d:	53                   	push   ebx
c0026f3e:	52                   	push   edx
c0026f3f:	bb 68 9b 02 c0       	mov    ebx,0xc0029b68
c0026f44:	ff d0                	call   eax
c0026f46:	83 eb 04             	sub    ebx,0x4
c0026f49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026f4b:	83 f8 ff             	cmp    eax,0xffffffff
c0026f4e:	75 f4                	jne    c0026f44 <__do_global_ctors_aux+0x14>
c0026f50:	58                   	pop    eax
c0026f51:	5b                   	pop    ebx
c0026f52:	5d                   	pop    ebp
c0026f53:	c3                   	ret    
c0026f54:	c3                   	ret    
c0026f55:	66 90                	xchg   ax,ax
c0026f57:	90                   	nop

c0026f58 <__divdi3>:
c0026f58:	55                   	push   ebp
c0026f59:	57                   	push   edi
c0026f5a:	56                   	push   esi
c0026f5b:	53                   	push   ebx
c0026f5c:	83 ec 1c             	sub    esp,0x1c
c0026f5f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026f63:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026f67:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026f6a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026f6e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026f72:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026f76:	85 db                	test   ebx,ebx
c0026f78:	0f 88 8e 00 00 00    	js     c002700c <__divdi3+0xb4>
c0026f7e:	89 dd                	mov    ebp,ebx
c0026f80:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026f88:	89 d3                	mov    ebx,edx
c0026f8a:	85 d2                	test   edx,edx
c0026f8c:	79 0d                	jns    c0026f9b <__divdi3+0x43>
c0026f8e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026f92:	f7 d8                	neg    eax
c0026f94:	83 d2 00             	adc    edx,0x0
c0026f97:	f7 da                	neg    edx
c0026f99:	89 d3                	mov    ebx,edx
c0026f9b:	89 c7                	mov    edi,eax
c0026f9d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026fa0:	85 db                	test   ebx,ebx
c0026fa2:	75 48                	jne    c0026fec <__divdi3+0x94>
c0026fa4:	39 ef                	cmp    edi,ebp
c0026fa6:	76 24                	jbe    c0026fcc <__divdi3+0x74>
c0026fa8:	89 ea                	mov    edx,ebp
c0026faa:	f7 f7                	div    edi
c0026fac:	89 c1                	mov    ecx,eax
c0026fae:	31 f6                	xor    esi,esi
c0026fb0:	89 c8                	mov    eax,ecx
c0026fb2:	89 f2                	mov    edx,esi
c0026fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026fb8:	85 c9                	test   ecx,ecx
c0026fba:	74 07                	je     c0026fc3 <__divdi3+0x6b>
c0026fbc:	f7 d8                	neg    eax
c0026fbe:	83 d2 00             	adc    edx,0x0
c0026fc1:	f7 da                	neg    edx
c0026fc3:	83 c4 1c             	add    esp,0x1c
c0026fc6:	5b                   	pop    ebx
c0026fc7:	5e                   	pop    esi
c0026fc8:	5f                   	pop    edi
c0026fc9:	5d                   	pop    ebp
c0026fca:	c3                   	ret    
c0026fcb:	90                   	nop
c0026fcc:	85 ff                	test   edi,edi
c0026fce:	75 0b                	jne    c0026fdb <__divdi3+0x83>
c0026fd0:	b8 01 00 00 00       	mov    eax,0x1
c0026fd5:	31 d2                	xor    edx,edx
c0026fd7:	f7 f3                	div    ebx
c0026fd9:	89 c7                	mov    edi,eax
c0026fdb:	31 d2                	xor    edx,edx
c0026fdd:	89 e8                	mov    eax,ebp
c0026fdf:	f7 f7                	div    edi
c0026fe1:	89 c6                	mov    esi,eax
c0026fe3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026fe6:	f7 f7                	div    edi
c0026fe8:	89 c1                	mov    ecx,eax
c0026fea:	eb c4                	jmp    c0026fb0 <__divdi3+0x58>
c0026fec:	39 eb                	cmp    ebx,ebp
c0026fee:	77 3c                	ja     c002702c <__divdi3+0xd4>
c0026ff0:	0f bd f3             	bsr    esi,ebx
c0026ff3:	83 f6 1f             	xor    esi,0x1f
c0026ff6:	75 40                	jne    c0027038 <__divdi3+0xe0>
c0026ff8:	39 eb                	cmp    ebx,ebp
c0026ffa:	72 09                	jb     c0027005 <__divdi3+0xad>
c0026ffc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026fff:	0f 87 97 00 00 00    	ja     c002709c <__divdi3+0x144>
c0027005:	b9 01 00 00 00       	mov    ecx,0x1
c002700a:	eb a4                	jmp    c0026fb0 <__divdi3+0x58>
c002700c:	f7 d9                	neg    ecx
c002700e:	83 d3 00             	adc    ebx,0x0
c0027011:	f7 db                	neg    ebx
c0027013:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0027016:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002701a:	89 dd                	mov    ebp,ebx
c002701c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0027024:	e9 5f ff ff ff       	jmp    c0026f88 <__divdi3+0x30>
c0027029:	8d 76 00             	lea    esi,[esi+0x0]
c002702c:	31 f6                	xor    esi,esi
c002702e:	31 c9                	xor    ecx,ecx
c0027030:	e9 7b ff ff ff       	jmp    c0026fb0 <__divdi3+0x58>
c0027035:	8d 76 00             	lea    esi,[esi+0x0]
c0027038:	b8 20 00 00 00       	mov    eax,0x20
c002703d:	29 f0                	sub    eax,esi
c002703f:	89 f1                	mov    ecx,esi
c0027041:	d3 e3                	shl    ebx,cl
c0027043:	89 fa                	mov    edx,edi
c0027045:	88 c1                	mov    cl,al
c0027047:	d3 ea                	shr    edx,cl
c0027049:	09 da                	or     edx,ebx
c002704b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002704f:	89 f1                	mov    ecx,esi
c0027051:	d3 e7                	shl    edi,cl
c0027053:	89 eb                	mov    ebx,ebp
c0027055:	88 c1                	mov    cl,al
c0027057:	d3 eb                	shr    ebx,cl
c0027059:	89 f1                	mov    ecx,esi
c002705b:	d3 e5                	shl    ebp,cl
c002705d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0027060:	88 c1                	mov    cl,al
c0027062:	d3 ea                	shr    edx,cl
c0027064:	09 d5                	or     ebp,edx
c0027066:	89 e8                	mov    eax,ebp
c0027068:	89 da                	mov    edx,ebx
c002706a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002706e:	89 d3                	mov    ebx,edx
c0027070:	89 c5                	mov    ebp,eax
c0027072:	f7 e7                	mul    edi
c0027074:	39 d3                	cmp    ebx,edx
c0027076:	72 18                	jb     c0027090 <__divdi3+0x138>
c0027078:	74 0a                	je     c0027084 <__divdi3+0x12c>
c002707a:	89 e9                	mov    ecx,ebp
c002707c:	31 f6                	xor    esi,esi
c002707e:	e9 2d ff ff ff       	jmp    c0026fb0 <__divdi3+0x58>
c0027083:	90                   	nop
c0027084:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0027087:	89 f1                	mov    ecx,esi
c0027089:	d3 e7                	shl    edi,cl
c002708b:	39 c7                	cmp    edi,eax
c002708d:	73 eb                	jae    c002707a <__divdi3+0x122>
c002708f:	90                   	nop
c0027090:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0027093:	31 f6                	xor    esi,esi
c0027095:	e9 16 ff ff ff       	jmp    c0026fb0 <__divdi3+0x58>
c002709a:	66 90                	xchg   ax,ax
c002709c:	31 c9                	xor    ecx,ecx
c002709e:	e9 0d ff ff ff       	jmp    c0026fb0 <__divdi3+0x58>
c00270a3:	90                   	nop

c00270a4 <__moddi3>:
c00270a4:	55                   	push   ebp
c00270a5:	57                   	push   edi
c00270a6:	56                   	push   esi
c00270a7:	53                   	push   ebx
c00270a8:	83 ec 2c             	sub    esp,0x2c
c00270ab:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00270af:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00270b3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00270b7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00270bb:	85 db                	test   ebx,ebx
c00270bd:	0f 88 85 00 00 00    	js     c0027148 <__moddi3+0xa4>
c00270c3:	89 de                	mov    esi,ebx
c00270c5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00270cd:	89 d7                	mov    edi,edx
c00270cf:	85 d2                	test   edx,edx
c00270d1:	79 09                	jns    c00270dc <__moddi3+0x38>
c00270d3:	f7 d8                	neg    eax
c00270d5:	83 d2 00             	adc    edx,0x0
c00270d8:	f7 da                	neg    edx
c00270da:	89 d7                	mov    edi,edx
c00270dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00270e0:	89 cd                	mov    ebp,ecx
c00270e2:	85 ff                	test   edi,edi
c00270e4:	75 52                	jne    c0027138 <__moddi3+0x94>
c00270e6:	89 c3                	mov    ebx,eax
c00270e8:	39 f0                	cmp    eax,esi
c00270ea:	76 24                	jbe    c0027110 <__moddi3+0x6c>
c00270ec:	89 c8                	mov    eax,ecx
c00270ee:	89 f2                	mov    edx,esi
c00270f0:	f7 f3                	div    ebx
c00270f2:	89 d6                	mov    esi,edx
c00270f4:	89 f0                	mov    eax,esi
c00270f6:	31 d2                	xor    edx,edx
c00270f8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00270fc:	85 c9                	test   ecx,ecx
c00270fe:	74 07                	je     c0027107 <__moddi3+0x63>
c0027100:	f7 d8                	neg    eax
c0027102:	83 d2 00             	adc    edx,0x0
c0027105:	f7 da                	neg    edx
c0027107:	83 c4 2c             	add    esp,0x2c
c002710a:	5b                   	pop    ebx
c002710b:	5e                   	pop    esi
c002710c:	5f                   	pop    edi
c002710d:	5d                   	pop    ebp
c002710e:	c3                   	ret    
c002710f:	90                   	nop
c0027110:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0027114:	85 db                	test   ebx,ebx
c0027116:	75 0d                	jne    c0027125 <__moddi3+0x81>
c0027118:	b8 01 00 00 00       	mov    eax,0x1
c002711d:	31 d2                	xor    edx,edx
c002711f:	f7 f7                	div    edi
c0027121:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027125:	89 f0                	mov    eax,esi
c0027127:	31 d2                	xor    edx,edx
c0027129:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002712d:	f7 f7                	div    edi
c002712f:	89 e8                	mov    eax,ebp
c0027131:	f7 f7                	div    edi
c0027133:	89 d6                	mov    esi,edx
c0027135:	eb bd                	jmp    c00270f4 <__moddi3+0x50>
c0027137:	90                   	nop
c0027138:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002713c:	39 f7                	cmp    edi,esi
c002713e:	76 20                	jbe    c0027160 <__moddi3+0xbc>
c0027140:	89 c8                	mov    eax,ecx
c0027142:	89 f2                	mov    edx,esi
c0027144:	eb b2                	jmp    c00270f8 <__moddi3+0x54>
c0027146:	66 90                	xchg   ax,ax
c0027148:	f7 d9                	neg    ecx
c002714a:	83 d3 00             	adc    ebx,0x0
c002714d:	f7 db                	neg    ebx
c002714f:	89 de                	mov    esi,ebx
c0027151:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0027159:	e9 6f ff ff ff       	jmp    c00270cd <__moddi3+0x29>
c002715e:	66 90                	xchg   ax,ax
c0027160:	0f bd c7             	bsr    eax,edi
c0027163:	83 f0 1f             	xor    eax,0x1f
c0027166:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002716a:	75 24                	jne    c0027190 <__moddi3+0xec>
c002716c:	39 f7                	cmp    edi,esi
c002716e:	72 06                	jb     c0027176 <__moddi3+0xd2>
c0027170:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0027174:	77 0c                	ja     c0027182 <__moddi3+0xde>
c0027176:	89 e9                	mov    ecx,ebp
c0027178:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002717c:	19 fe                	sbb    esi,edi
c002717e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0027182:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027186:	89 f2                	mov    edx,esi
c0027188:	e9 6b ff ff ff       	jmp    c00270f8 <__moddi3+0x54>
c002718d:	8d 76 00             	lea    esi,[esi+0x0]
c0027190:	b8 20 00 00 00       	mov    eax,0x20
c0027195:	89 c2                	mov    edx,eax
c0027197:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002719b:	29 da                	sub    edx,ebx
c002719d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00271a1:	88 d9                	mov    cl,bl
c00271a3:	d3 e7                	shl    edi,cl
c00271a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00271a9:	88 d1                	mov    cl,dl
c00271ab:	d3 e8                	shr    eax,cl
c00271ad:	09 c7                	or     edi,eax
c00271af:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00271b3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00271b7:	89 d8                	mov    eax,ebx
c00271b9:	88 d9                	mov    cl,bl
c00271bb:	d3 e7                	shl    edi,cl
c00271bd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00271c1:	89 f3                	mov    ebx,esi
c00271c3:	88 d1                	mov    cl,dl
c00271c5:	d3 eb                	shr    ebx,cl
c00271c7:	89 c7                	mov    edi,eax
c00271c9:	88 c1                	mov    cl,al
c00271cb:	d3 e6                	shl    esi,cl
c00271cd:	89 e8                	mov    eax,ebp
c00271cf:	88 d1                	mov    cl,dl
c00271d1:	d3 e8                	shr    eax,cl
c00271d3:	09 f0                	or     eax,esi
c00271d5:	89 f9                	mov    ecx,edi
c00271d7:	d3 e5                	shl    ebp,cl
c00271d9:	89 da                	mov    edx,ebx
c00271db:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00271df:	89 d3                	mov    ebx,edx
c00271e1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00271e5:	89 c6                	mov    esi,eax
c00271e7:	89 d1                	mov    ecx,edx
c00271e9:	39 d3                	cmp    ebx,edx
c00271eb:	72 27                	jb     c0027214 <__moddi3+0x170>
c00271ed:	74 21                	je     c0027210 <__moddi3+0x16c>
c00271ef:	29 f5                	sub    ebp,esi
c00271f1:	19 cb                	sbb    ebx,ecx
c00271f3:	89 de                	mov    esi,ebx
c00271f5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00271f9:	d3 e6                	shl    esi,cl
c00271fb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00271ff:	89 f9                	mov    ecx,edi
c0027201:	d3 ed                	shr    ebp,cl
c0027203:	09 ee                	or     esi,ebp
c0027205:	89 f0                	mov    eax,esi
c0027207:	d3 eb                	shr    ebx,cl
c0027209:	89 da                	mov    edx,ebx
c002720b:	e9 e8 fe ff ff       	jmp    c00270f8 <__moddi3+0x54>
c0027210:	39 c5                	cmp    ebp,eax
c0027212:	73 db                	jae    c00271ef <__moddi3+0x14b>
c0027214:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027218:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002721c:	89 d1                	mov    ecx,edx
c002721e:	89 c6                	mov    esi,eax
c0027220:	eb cd                	jmp    c00271ef <__moddi3+0x14b>
c0027222:	66 90                	xchg   ax,ax

c0027224 <__udivdi3>:
c0027224:	55                   	push   ebp
c0027225:	57                   	push   edi
c0027226:	56                   	push   esi
c0027227:	53                   	push   ebx
c0027228:	83 ec 1c             	sub    esp,0x1c
c002722b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002722f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0027233:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027237:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002723b:	85 d2                	test   edx,edx
c002723d:	75 41                	jne    c0027280 <__udivdi3+0x5c>
c002723f:	39 f7                	cmp    edi,esi
c0027241:	76 15                	jbe    c0027258 <__udivdi3+0x34>
c0027243:	89 e8                	mov    eax,ebp
c0027245:	89 f2                	mov    edx,esi
c0027247:	f7 f7                	div    edi
c0027249:	31 db                	xor    ebx,ebx
c002724b:	89 da                	mov    edx,ebx
c002724d:	83 c4 1c             	add    esp,0x1c
c0027250:	5b                   	pop    ebx
c0027251:	5e                   	pop    esi
c0027252:	5f                   	pop    edi
c0027253:	5d                   	pop    ebp
c0027254:	c3                   	ret    
c0027255:	8d 76 00             	lea    esi,[esi+0x0]
c0027258:	89 f9                	mov    ecx,edi
c002725a:	85 ff                	test   edi,edi
c002725c:	75 0b                	jne    c0027269 <__udivdi3+0x45>
c002725e:	b8 01 00 00 00       	mov    eax,0x1
c0027263:	31 d2                	xor    edx,edx
c0027265:	f7 f7                	div    edi
c0027267:	89 c1                	mov    ecx,eax
c0027269:	31 d2                	xor    edx,edx
c002726b:	89 f0                	mov    eax,esi
c002726d:	f7 f1                	div    ecx
c002726f:	89 c3                	mov    ebx,eax
c0027271:	89 e8                	mov    eax,ebp
c0027273:	f7 f1                	div    ecx
c0027275:	89 da                	mov    edx,ebx
c0027277:	83 c4 1c             	add    esp,0x1c
c002727a:	5b                   	pop    ebx
c002727b:	5e                   	pop    esi
c002727c:	5f                   	pop    edi
c002727d:	5d                   	pop    ebp
c002727e:	c3                   	ret    
c002727f:	90                   	nop
c0027280:	39 f2                	cmp    edx,esi
c0027282:	77 1c                	ja     c00272a0 <__udivdi3+0x7c>
c0027284:	0f bd da             	bsr    ebx,edx
c0027287:	83 f3 1f             	xor    ebx,0x1f
c002728a:	75 24                	jne    c00272b0 <__udivdi3+0x8c>
c002728c:	39 f2                	cmp    edx,esi
c002728e:	72 08                	jb     c0027298 <__udivdi3+0x74>
c0027290:	39 ef                	cmp    edi,ebp
c0027292:	0f 87 84 00 00 00    	ja     c002731c <__udivdi3+0xf8>
c0027298:	b8 01 00 00 00       	mov    eax,0x1
c002729d:	eb ac                	jmp    c002724b <__udivdi3+0x27>
c002729f:	90                   	nop
c00272a0:	31 db                	xor    ebx,ebx
c00272a2:	31 c0                	xor    eax,eax
c00272a4:	89 da                	mov    edx,ebx
c00272a6:	83 c4 1c             	add    esp,0x1c
c00272a9:	5b                   	pop    ebx
c00272aa:	5e                   	pop    esi
c00272ab:	5f                   	pop    edi
c00272ac:	5d                   	pop    ebp
c00272ad:	c3                   	ret    
c00272ae:	66 90                	xchg   ax,ax
c00272b0:	b8 20 00 00 00       	mov    eax,0x20
c00272b5:	29 d8                	sub    eax,ebx
c00272b7:	88 d9                	mov    cl,bl
c00272b9:	d3 e2                	shl    edx,cl
c00272bb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00272bf:	89 fa                	mov    edx,edi
c00272c1:	88 c1                	mov    cl,al
c00272c3:	d3 ea                	shr    edx,cl
c00272c5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00272c9:	09 d1                	or     ecx,edx
c00272cb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00272cf:	88 d9                	mov    cl,bl
c00272d1:	d3 e7                	shl    edi,cl
c00272d3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00272d7:	89 f7                	mov    edi,esi
c00272d9:	88 c1                	mov    cl,al
c00272db:	d3 ef                	shr    edi,cl
c00272dd:	88 d9                	mov    cl,bl
c00272df:	d3 e6                	shl    esi,cl
c00272e1:	89 ea                	mov    edx,ebp
c00272e3:	88 c1                	mov    cl,al
c00272e5:	d3 ea                	shr    edx,cl
c00272e7:	09 d6                	or     esi,edx
c00272e9:	89 f0                	mov    eax,esi
c00272eb:	89 fa                	mov    edx,edi
c00272ed:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00272f1:	89 d7                	mov    edi,edx
c00272f3:	89 c6                	mov    esi,eax
c00272f5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00272f9:	39 d7                	cmp    edi,edx
c00272fb:	72 13                	jb     c0027310 <__udivdi3+0xec>
c00272fd:	74 09                	je     c0027308 <__udivdi3+0xe4>
c00272ff:	89 f0                	mov    eax,esi
c0027301:	31 db                	xor    ebx,ebx
c0027303:	e9 43 ff ff ff       	jmp    c002724b <__udivdi3+0x27>
c0027308:	88 d9                	mov    cl,bl
c002730a:	d3 e5                	shl    ebp,cl
c002730c:	39 c5                	cmp    ebp,eax
c002730e:	73 ef                	jae    c00272ff <__udivdi3+0xdb>
c0027310:	8d 46 ff             	lea    eax,[esi-0x1]
c0027313:	31 db                	xor    ebx,ebx
c0027315:	e9 31 ff ff ff       	jmp    c002724b <__udivdi3+0x27>
c002731a:	66 90                	xchg   ax,ax
c002731c:	31 c0                	xor    eax,eax
c002731e:	e9 28 ff ff ff       	jmp    c002724b <__udivdi3+0x27>
c0027323:	90                   	nop

c0027324 <__umoddi3>:
c0027324:	55                   	push   ebp
c0027325:	57                   	push   edi
c0027326:	56                   	push   esi
c0027327:	53                   	push   ebx
c0027328:	83 ec 1c             	sub    esp,0x1c
c002732b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002732f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027333:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027337:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002733b:	89 da                	mov    edx,ebx
c002733d:	85 c0                	test   eax,eax
c002733f:	75 37                	jne    c0027378 <__umoddi3+0x54>
c0027341:	39 df                	cmp    edi,ebx
c0027343:	76 13                	jbe    c0027358 <__umoddi3+0x34>
c0027345:	89 f0                	mov    eax,esi
c0027347:	f7 f7                	div    edi
c0027349:	89 d0                	mov    eax,edx
c002734b:	31 d2                	xor    edx,edx
c002734d:	83 c4 1c             	add    esp,0x1c
c0027350:	5b                   	pop    ebx
c0027351:	5e                   	pop    esi
c0027352:	5f                   	pop    edi
c0027353:	5d                   	pop    ebp
c0027354:	c3                   	ret    
c0027355:	8d 76 00             	lea    esi,[esi+0x0]
c0027358:	89 fd                	mov    ebp,edi
c002735a:	85 ff                	test   edi,edi
c002735c:	75 0b                	jne    c0027369 <__umoddi3+0x45>
c002735e:	b8 01 00 00 00       	mov    eax,0x1
c0027363:	31 d2                	xor    edx,edx
c0027365:	f7 f7                	div    edi
c0027367:	89 c5                	mov    ebp,eax
c0027369:	89 d8                	mov    eax,ebx
c002736b:	31 d2                	xor    edx,edx
c002736d:	f7 f5                	div    ebp
c002736f:	89 f0                	mov    eax,esi
c0027371:	f7 f5                	div    ebp
c0027373:	89 d0                	mov    eax,edx
c0027375:	eb d4                	jmp    c002734b <__umoddi3+0x27>
c0027377:	90                   	nop
c0027378:	89 f1                	mov    ecx,esi
c002737a:	39 d8                	cmp    eax,ebx
c002737c:	76 0a                	jbe    c0027388 <__umoddi3+0x64>
c002737e:	89 f0                	mov    eax,esi
c0027380:	83 c4 1c             	add    esp,0x1c
c0027383:	5b                   	pop    ebx
c0027384:	5e                   	pop    esi
c0027385:	5f                   	pop    edi
c0027386:	5d                   	pop    ebp
c0027387:	c3                   	ret    
c0027388:	0f bd e8             	bsr    ebp,eax
c002738b:	83 f5 1f             	xor    ebp,0x1f
c002738e:	75 1c                	jne    c00273ac <__umoddi3+0x88>
c0027390:	39 d8                	cmp    eax,ebx
c0027392:	72 04                	jb     c0027398 <__umoddi3+0x74>
c0027394:	39 f7                	cmp    edi,esi
c0027396:	77 08                	ja     c00273a0 <__umoddi3+0x7c>
c0027398:	89 da                	mov    edx,ebx
c002739a:	29 fe                	sub    esi,edi
c002739c:	19 c2                	sbb    edx,eax
c002739e:	89 f1                	mov    ecx,esi
c00273a0:	89 c8                	mov    eax,ecx
c00273a2:	83 c4 1c             	add    esp,0x1c
c00273a5:	5b                   	pop    ebx
c00273a6:	5e                   	pop    esi
c00273a7:	5f                   	pop    edi
c00273a8:	5d                   	pop    ebp
c00273a9:	c3                   	ret    
c00273aa:	66 90                	xchg   ax,ax
c00273ac:	ba 20 00 00 00       	mov    edx,0x20
c00273b1:	29 ea                	sub    edx,ebp
c00273b3:	89 e9                	mov    ecx,ebp
c00273b5:	d3 e0                	shl    eax,cl
c00273b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00273bb:	89 f8                	mov    eax,edi
c00273bd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00273c1:	88 d1                	mov    cl,dl
c00273c3:	d3 e8                	shr    eax,cl
c00273c5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00273c9:	09 c1                	or     ecx,eax
c00273cb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00273cf:	89 e9                	mov    ecx,ebp
c00273d1:	d3 e7                	shl    edi,cl
c00273d3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00273d7:	89 d8                	mov    eax,ebx
c00273d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00273dd:	88 d1                	mov    cl,dl
c00273df:	d3 e8                	shr    eax,cl
c00273e1:	89 c7                	mov    edi,eax
c00273e3:	89 e9                	mov    ecx,ebp
c00273e5:	d3 e3                	shl    ebx,cl
c00273e7:	89 f0                	mov    eax,esi
c00273e9:	88 d1                	mov    cl,dl
c00273eb:	d3 e8                	shr    eax,cl
c00273ed:	09 d8                	or     eax,ebx
c00273ef:	89 e9                	mov    ecx,ebp
c00273f1:	d3 e6                	shl    esi,cl
c00273f3:	89 f3                	mov    ebx,esi
c00273f5:	89 fa                	mov    edx,edi
c00273f7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00273fb:	89 d1                	mov    ecx,edx
c00273fd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027401:	89 c6                	mov    esi,eax
c0027403:	89 d7                	mov    edi,edx
c0027405:	39 d1                	cmp    ecx,edx
c0027407:	72 27                	jb     c0027430 <__umoddi3+0x10c>
c0027409:	74 21                	je     c002742c <__umoddi3+0x108>
c002740b:	89 ca                	mov    edx,ecx
c002740d:	29 f3                	sub    ebx,esi
c002740f:	19 fa                	sbb    edx,edi
c0027411:	89 d0                	mov    eax,edx
c0027413:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0027417:	d3 e0                	shl    eax,cl
c0027419:	89 e9                	mov    ecx,ebp
c002741b:	d3 eb                	shr    ebx,cl
c002741d:	09 d8                	or     eax,ebx
c002741f:	d3 ea                	shr    edx,cl
c0027421:	83 c4 1c             	add    esp,0x1c
c0027424:	5b                   	pop    ebx
c0027425:	5e                   	pop    esi
c0027426:	5f                   	pop    edi
c0027427:	5d                   	pop    ebp
c0027428:	c3                   	ret    
c0027429:	8d 76 00             	lea    esi,[esi+0x0]
c002742c:	39 c3                	cmp    ebx,eax
c002742e:	73 db                	jae    c002740b <__umoddi3+0xe7>
c0027430:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027434:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0027438:	89 d7                	mov    edi,edx
c002743a:	89 c6                	mov    esi,eax
c002743c:	eb cd                	jmp    c002740b <__umoddi3+0xe7>

c002743e <__addsf3>:
c002743e:	55                   	push   ebp
c002743f:	89 e5                	mov    ebp,esp
c0027441:	57                   	push   edi
c0027442:	56                   	push   esi
c0027443:	53                   	push   ebx
c0027444:	83 ec 08             	sub    esp,0x8
c0027447:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002744a:	89 fa                	mov    edx,edi
c002744c:	89 f8                	mov    eax,edi
c002744e:	c1 f8 17             	sar    eax,0x17
c0027451:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027454:	c1 e2 08             	shl    edx,0x8
c0027457:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002745d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027460:	89 de                	mov    esi,ebx
c0027462:	c1 fe 17             	sar    esi,0x17
c0027465:	c1 e3 08             	shl    ebx,0x8
c0027468:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002746e:	31 f0                	xor    eax,esi
c0027470:	0f 88 3b 01 00 00    	js     c00275b1 <__addsf3+0x173>
c0027476:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0027479:	29 f1                	sub    ecx,esi
c002747b:	85 c9                	test   ecx,ecx
c002747d:	7e 54                	jle    c00274d3 <__addsf3+0x95>
c002747f:	89 f0                	mov    eax,esi
c0027481:	84 c0                	test   al,al
c0027483:	75 10                	jne    c0027495 <__addsf3+0x57>
c0027485:	85 db                	test   ebx,ebx
c0027487:	0f 84 aa 02 00 00    	je     c0027737 <__addsf3+0x2f9>
c002748d:	49                   	dec    ecx
c002748e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027491:	74 38                	je     c00274cb <__addsf3+0x8d>
c0027493:	eb 13                	jmp    c00274a8 <__addsf3+0x6a>
c0027495:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027498:	f7 d0                	not    eax
c002749a:	84 c0                	test   al,al
c002749c:	0f 84 95 02 00 00    	je     c0027737 <__addsf3+0x2f9>
c00274a2:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00274a8:	83 f9 1f             	cmp    ecx,0x1f
c00274ab:	0f 8f 86 02 00 00    	jg     c0027737 <__addsf3+0x2f9>
c00274b1:	89 de                	mov    esi,ebx
c00274b3:	d3 ee                	shr    esi,cl
c00274b5:	b8 20 00 00 00       	mov    eax,0x20
c00274ba:	29 c8                	sub    eax,ecx
c00274bc:	89 c1                	mov    ecx,eax
c00274be:	d3 e3                	shl    ebx,cl
c00274c0:	31 c0                	xor    eax,eax
c00274c2:	85 db                	test   ebx,ebx
c00274c4:	0f 95 c0             	setne  al
c00274c7:	09 f0                	or     eax,esi
c00274c9:	01 d0                	add    eax,edx
c00274cb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00274ce:	e9 b6 00 00 00       	jmp    c0027589 <__addsf3+0x14b>
c00274d3:	74 5c                	je     c0027531 <__addsf3+0xf3>
c00274d5:	89 f1                	mov    ecx,esi
c00274d7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00274da:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00274dd:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00274e1:	75 14                	jne    c00274f7 <__addsf3+0xb9>
c00274e3:	85 d2                	test   edx,edx
c00274e5:	0f 84 4c 02 00 00    	je     c0027737 <__addsf3+0x2f9>
c00274eb:	49                   	dec    ecx
c00274ec:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00274ef:	0f 84 94 00 00 00    	je     c0027589 <__addsf3+0x14b>
c00274f5:	eb 12                	jmp    c0027509 <__addsf3+0xcb>
c00274f7:	89 f0                	mov    eax,esi
c00274f9:	f7 d0                	not    eax
c00274fb:	84 c0                	test   al,al
c00274fd:	0f 84 34 02 00 00    	je     c0027737 <__addsf3+0x2f9>
c0027503:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027509:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002750c:	83 f9 1f             	cmp    ecx,0x1f
c002750f:	0f 8f 22 02 00 00    	jg     c0027737 <__addsf3+0x2f9>
c0027515:	89 d7                	mov    edi,edx
c0027517:	d3 ef                	shr    edi,cl
c0027519:	b8 20 00 00 00       	mov    eax,0x20
c002751e:	29 c8                	sub    eax,ecx
c0027520:	89 c1                	mov    ecx,eax
c0027522:	d3 e2                	shl    edx,cl
c0027524:	31 c0                	xor    eax,eax
c0027526:	85 d2                	test   edx,edx
c0027528:	0f 95 c0             	setne  al
c002752b:	09 f8                	or     eax,edi
c002752d:	01 d8                	add    eax,ebx
c002752f:	eb 58                	jmp    c0027589 <__addsf3+0x14b>
c0027531:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027534:	8d 70 01             	lea    esi,[eax+0x1]
c0027537:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002753d:	75 32                	jne    c0027571 <__addsf3+0x133>
c002753f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027543:	75 1f                	jne    c0027564 <__addsf3+0x126>
c0027545:	85 d2                	test   edx,edx
c0027547:	0f 84 e0 01 00 00    	je     c002772d <__addsf3+0x2ef>
c002754d:	85 db                	test   ebx,ebx
c002754f:	0f 84 e2 01 00 00    	je     c0027737 <__addsf3+0x2f9>
c0027555:	89 d0                	mov    eax,edx
c0027557:	01 d8                	add    eax,ebx
c0027559:	0f 89 a9 01 00 00    	jns    c0027708 <__addsf3+0x2ca>
c002755f:	e9 9d 01 00 00       	jmp    c0027701 <__addsf3+0x2c3>
c0027564:	85 d2                	test   edx,edx
c0027566:	0f 85 cb 01 00 00    	jne    c0027737 <__addsf3+0x2f9>
c002756c:	e9 bc 01 00 00       	jmp    c002772d <__addsf3+0x2ef>
c0027571:	31 c0                	xor    eax,eax
c0027573:	89 f1                	mov    ecx,esi
c0027575:	f7 d1                	not    ecx
c0027577:	84 c9                	test   cl,cl
c0027579:	0f 84 90 01 00 00    	je     c002770f <__addsf3+0x2d1>
c002757f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027582:	d1 e8                	shr    eax,1
c0027584:	e9 86 01 00 00       	jmp    c002770f <__addsf3+0x2d1>
c0027589:	85 c0                	test   eax,eax
c002758b:	0f 89 7e 01 00 00    	jns    c002770f <__addsf3+0x2d1>
c0027591:	46                   	inc    esi
c0027592:	89 f2                	mov    edx,esi
c0027594:	f7 d2                	not    edx
c0027596:	84 d2                	test   dl,dl
c0027598:	0f 84 6f 01 00 00    	je     c002770d <__addsf3+0x2cf>
c002759e:	89 c2                	mov    edx,eax
c00275a0:	83 e2 01             	and    edx,0x1
c00275a3:	d1 e8                	shr    eax,1
c00275a5:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00275aa:	09 d0                	or     eax,edx
c00275ac:	e9 5e 01 00 00       	jmp    c002770f <__addsf3+0x2d1>
c00275b1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00275b5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00275b8:	89 f0                	mov    eax,esi
c00275ba:	0f b6 c0             	movzx  eax,al
c00275bd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00275c0:	29 c1                	sub    ecx,eax
c00275c2:	85 c9                	test   ecx,ecx
c00275c4:	7e 55                	jle    c002761b <__addsf3+0x1dd>
c00275c6:	85 c0                	test   eax,eax
c00275c8:	75 11                	jne    c00275db <__addsf3+0x19d>
c00275ca:	85 db                	test   ebx,ebx
c00275cc:	0f 84 65 01 00 00    	je     c0027737 <__addsf3+0x2f9>
c00275d2:	49                   	dec    ecx
c00275d3:	75 19                	jne    c00275ee <__addsf3+0x1b0>
c00275d5:	89 d0                	mov    eax,edx
c00275d7:	29 d8                	sub    eax,ebx
c00275d9:	eb 38                	jmp    c0027613 <__addsf3+0x1d5>
c00275db:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00275de:	f7 d0                	not    eax
c00275e0:	84 c0                	test   al,al
c00275e2:	0f 84 4f 01 00 00    	je     c0027737 <__addsf3+0x2f9>
c00275e8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00275ee:	83 f9 1f             	cmp    ecx,0x1f
c00275f1:	0f 8f 40 01 00 00    	jg     c0027737 <__addsf3+0x2f9>
c00275f7:	89 de                	mov    esi,ebx
c00275f9:	d3 ee                	shr    esi,cl
c00275fb:	b8 20 00 00 00       	mov    eax,0x20
c0027600:	29 c8                	sub    eax,ecx
c0027602:	89 c1                	mov    ecx,eax
c0027604:	d3 e3                	shl    ebx,cl
c0027606:	31 c0                	xor    eax,eax
c0027608:	85 db                	test   ebx,ebx
c002760a:	0f 95 c0             	setne  al
c002760d:	09 f0                	or     eax,esi
c002760f:	29 c2                	sub    edx,eax
c0027611:	89 d0                	mov    eax,edx
c0027613:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027616:	e9 af 00 00 00       	jmp    c00276ca <__addsf3+0x28c>
c002761b:	74 5c                	je     c0027679 <__addsf3+0x23b>
c002761d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0027620:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027623:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027627:	75 14                	jne    c002763d <__addsf3+0x1ff>
c0027629:	85 d2                	test   edx,edx
c002762b:	0f 84 06 01 00 00    	je     c0027737 <__addsf3+0x2f9>
c0027631:	48                   	dec    eax
c0027632:	75 1b                	jne    c002764f <__addsf3+0x211>
c0027634:	89 d8                	mov    eax,ebx
c0027636:	29 d0                	sub    eax,edx
c0027638:	e9 8d 00 00 00       	jmp    c00276ca <__addsf3+0x28c>
c002763d:	89 f1                	mov    ecx,esi
c002763f:	f7 d1                	not    ecx
c0027641:	84 c9                	test   cl,cl
c0027643:	0f 84 ee 00 00 00    	je     c0027737 <__addsf3+0x2f9>
c0027649:	81 ca 00 00 00 80    	or     edx,0x80000000
c002764f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027652:	83 f8 1f             	cmp    eax,0x1f
c0027655:	0f 8f dc 00 00 00    	jg     c0027737 <__addsf3+0x2f9>
c002765b:	89 d7                	mov    edi,edx
c002765d:	88 c1                	mov    cl,al
c002765f:	d3 ef                	shr    edi,cl
c0027661:	b9 20 00 00 00       	mov    ecx,0x20
c0027666:	29 c1                	sub    ecx,eax
c0027668:	d3 e2                	shl    edx,cl
c002766a:	31 c0                	xor    eax,eax
c002766c:	85 d2                	test   edx,edx
c002766e:	0f 95 c0             	setne  al
c0027671:	09 f8                	or     eax,edi
c0027673:	29 c3                	sub    ebx,eax
c0027675:	89 d8                	mov    eax,ebx
c0027677:	eb 51                	jmp    c00276ca <__addsf3+0x28c>
c0027679:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002767c:	40                   	inc    eax
c002767d:	a8 fe                	test   al,0xfe
c002767f:	75 3d                	jne    c00276be <__addsf3+0x280>
c0027681:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027685:	0f 85 a7 00 00 00    	jne    c0027732 <__addsf3+0x2f4>
c002768b:	85 d2                	test   edx,edx
c002768d:	75 12                	jne    c00276a1 <__addsf3+0x263>
c002768f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027692:	85 db                	test   ebx,ebx
c0027694:	0f 85 9d 00 00 00    	jne    c0027737 <__addsf3+0x2f9>
c002769a:	31 ff                	xor    edi,edi
c002769c:	e9 96 00 00 00       	jmp    c0027737 <__addsf3+0x2f9>
c00276a1:	85 db                	test   ebx,ebx
c00276a3:	0f 84 8e 00 00 00    	je     c0027737 <__addsf3+0x2f9>
c00276a9:	89 d0                	mov    eax,edx
c00276ab:	29 d8                	sub    eax,ebx
c00276ad:	79 06                	jns    c00276b5 <__addsf3+0x277>
c00276af:	89 d8                	mov    eax,ebx
c00276b1:	29 d0                	sub    eax,edx
c00276b3:	eb 5a                	jmp    c002770f <__addsf3+0x2d1>
c00276b5:	bf 00 00 00 00       	mov    edi,0x0
c00276ba:	74 7b                	je     c0027737 <__addsf3+0x2f9>
c00276bc:	eb 4a                	jmp    c0027708 <__addsf3+0x2ca>
c00276be:	89 d0                	mov    eax,edx
c00276c0:	29 d8                	sub    eax,ebx
c00276c2:	79 12                	jns    c00276d6 <__addsf3+0x298>
c00276c4:	89 d8                	mov    eax,ebx
c00276c6:	29 d0                	sub    eax,edx
c00276c8:	eb 09                	jmp    c00276d3 <__addsf3+0x295>
c00276ca:	85 c0                	test   eax,eax
c00276cc:	79 41                	jns    c002770f <__addsf3+0x2d1>
c00276ce:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276d3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00276d6:	31 f6                	xor    esi,esi
c00276d8:	85 c0                	test   eax,eax
c00276da:	74 33                	je     c002770f <__addsf3+0x2d1>
c00276dc:	0f bd c8             	bsr    ecx,eax
c00276df:	83 f1 1f             	xor    ecx,0x1f
c00276e2:	d3 e0                	shl    eax,cl
c00276e4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c00276e8:	39 ca                	cmp    edx,ecx
c00276ea:	7f 10                	jg     c00276fc <__addsf3+0x2be>
c00276ec:	29 d1                	sub    ecx,edx
c00276ee:	41                   	inc    ecx
c00276ef:	d3 e8                	shr    eax,cl
c00276f1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00276f4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c00276fa:	eb 13                	jmp    c002770f <__addsf3+0x2d1>
c00276fc:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00276ff:	29 ce                	sub    esi,ecx
c0027701:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027706:	eb 07                	jmp    c002770f <__addsf3+0x2d1>
c0027708:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002770b:	eb 02                	jmp    c002770f <__addsf3+0x2d1>
c002770d:	31 c0                	xor    eax,eax
c002770f:	89 c2                	mov    edx,eax
c0027711:	c1 ea 08             	shr    edx,0x8
c0027714:	a8 7f                	test   al,0x7f
c0027716:	0f 95 c1             	setne  cl
c0027719:	09 d1                	or     ecx,edx
c002771b:	83 e1 01             	and    ecx,0x1
c002771e:	c1 e8 07             	shr    eax,0x7
c0027721:	21 c8                	and    eax,ecx
c0027723:	c1 e6 17             	shl    esi,0x17
c0027726:	09 d6                	or     esi,edx
c0027728:	8d 3c 30             	lea    edi,[eax+esi*1]
c002772b:	eb 0a                	jmp    c0027737 <__addsf3+0x2f9>
c002772d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027730:	eb 05                	jmp    c0027737 <__addsf3+0x2f9>
c0027732:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027737:	89 f8                	mov    eax,edi
c0027739:	5a                   	pop    edx
c002773a:	59                   	pop    ecx
c002773b:	5b                   	pop    ebx
c002773c:	5e                   	pop    esi
c002773d:	5f                   	pop    edi
c002773e:	5d                   	pop    ebp
c002773f:	c3                   	ret    

c0027740 <__subsf3>:
c0027740:	55                   	push   ebp
c0027741:	89 e5                	mov    ebp,esp
c0027743:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027746:	05 00 00 00 80       	add    eax,0x80000000
c002774b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002774e:	5d                   	pop    ebp
c002774f:	e9 ea fc ff ff       	jmp    c002743e <__addsf3>

c0027754 <__negsf2>:
c0027754:	55                   	push   ebp
c0027755:	89 e5                	mov    ebp,esp
c0027757:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002775a:	05 00 00 00 80       	add    eax,0x80000000
c002775f:	5d                   	pop    ebp
c0027760:	c3                   	ret    

c0027761 <__mulsf3>:
c0027761:	55                   	push   ebp
c0027762:	89 e5                	mov    ebp,esp
c0027764:	57                   	push   edi
c0027765:	56                   	push   esi
c0027766:	53                   	push   ebx
c0027767:	83 ec 1c             	sub    esp,0x1c
c002776a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002776d:	89 f0                	mov    eax,esi
c002776f:	89 f1                	mov    ecx,esi
c0027771:	c1 f9 17             	sar    ecx,0x17
c0027774:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027777:	c1 e0 08             	shl    eax,0x8
c002777a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002777f:	89 c1                	mov    ecx,eax
c0027781:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027784:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027787:	89 c7                	mov    edi,eax
c0027789:	c1 ff 17             	sar    edi,0x17
c002778c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027790:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027793:	89 f8                	mov    eax,edi
c0027795:	0f b6 c0             	movzx  eax,al
c0027798:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002779b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002779f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00277a2:	42                   	inc    edx
c00277a3:	80 e2 fe             	and    dl,0xfe
c00277a6:	75 7b                	jne    c0027823 <__mulsf3+0xc2>
c00277a8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00277ac:	74 54                	je     c0027802 <__mulsf3+0xa1>
c00277ae:	85 c9                	test   ecx,ecx
c00277b0:	0f 85 64 01 00 00    	jne    c002791a <__mulsf3+0x1b9>
c00277b6:	8d 57 01             	lea    edx,[edi+0x1]
c00277b9:	80 e2 fe             	and    dl,0xfe
c00277bc:	75 1f                	jne    c00277dd <__mulsf3+0x7c>
c00277be:	85 c0                	test   eax,eax
c00277c0:	b8 00 00 00 00       	mov    eax,0x0
c00277c5:	74 29                	je     c00277f0 <__mulsf3+0x8f>
c00277c7:	53                   	push   ebx
c00277c8:	53                   	push   ebx
c00277c9:	50                   	push   eax
c00277ca:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00277cd:	e8 96 05 00 00       	call   c0027d68 <__nesf2>
c00277d2:	83 c4 10             	add    esp,0x10
c00277d5:	85 c0                	test   eax,eax
c00277d7:	0f 85 3a 01 00 00    	jne    c0027917 <__mulsf3+0x1b6>
c00277dd:	85 ff                	test   edi,edi
c00277df:	0f 89 35 01 00 00    	jns    c002791a <__mulsf3+0x1b9>
c00277e5:	81 c6 00 00 00 80    	add    esi,0x80000000
c00277eb:	e9 2a 01 00 00       	jmp    c002791a <__mulsf3+0x1b9>
c00277f0:	51                   	push   ecx
c00277f1:	51                   	push   ecx
c00277f2:	50                   	push   eax
c00277f3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00277f6:	e8 6d 05 00 00       	call   c0027d68 <__nesf2>
c00277fb:	83 c4 10             	add    esp,0x10
c00277fe:	85 c0                	test   eax,eax
c0027800:	eb 15                	jmp    c0027817 <__mulsf3+0xb6>
c0027802:	85 c9                	test   ecx,ecx
c0027804:	74 0b                	je     c0027811 <__mulsf3+0xb0>
c0027806:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027809:	01 c9                	add    ecx,ecx
c002780b:	78 16                	js     c0027823 <__mulsf3+0xc2>
c002780d:	89 d3                	mov    ebx,edx
c002780f:	eb f5                	jmp    c0027806 <__mulsf3+0xa5>
c0027811:	89 f8                	mov    eax,edi
c0027813:	f7 d0                	not    eax
c0027815:	84 c0                	test   al,al
c0027817:	75 c4                	jne    c00277dd <__mulsf3+0x7c>
c0027819:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c002781e:	e9 f7 00 00 00       	jmp    c002791a <__mulsf3+0x1b9>
c0027823:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027826:	c1 e6 08             	shl    esi,0x8
c0027829:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c002782f:	8d 57 01             	lea    edx,[edi+0x1]
c0027832:	80 e2 fe             	and    dl,0xfe
c0027835:	75 63                	jne    c002789a <__mulsf3+0x139>
c0027837:	85 c0                	test   eax,eax
c0027839:	74 2f                	je     c002786a <__mulsf3+0x109>
c002783b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002783f:	0f 89 d2 00 00 00    	jns    c0027917 <__mulsf3+0x1b6>
c0027845:	52                   	push   edx
c0027846:	52                   	push   edx
c0027847:	6a 00                	push   0x0
c0027849:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002784c:	e8 dc 04 00 00       	call   c0027d2d <__eqsf2>
c0027851:	83 c4 10             	add    esp,0x10
c0027854:	85 c0                	test   eax,eax
c0027856:	0f 85 bb 00 00 00    	jne    c0027917 <__mulsf3+0x1b6>
c002785c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002785f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027865:	e9 b0 00 00 00       	jmp    c002791a <__mulsf3+0x1b9>
c002786a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002786d:	50                   	push   eax
c002786e:	50                   	push   eax
c002786f:	6a 00                	push   0x0
c0027871:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027874:	e8 b4 04 00 00       	call   c0027d2d <__eqsf2>
c0027879:	83 c4 10             	add    esp,0x10
c002787c:	85 c0                	test   eax,eax
c002787e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027881:	75 0c                	jne    c002788f <__mulsf3+0x12e>
c0027883:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027887:	0f 89 8a 00 00 00    	jns    c0027917 <__mulsf3+0x1b6>
c002788d:	eb cd                	jmp    c002785c <__mulsf3+0xfb>
c002788f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027892:	01 f6                	add    esi,esi
c0027894:	78 04                	js     c002789a <__mulsf3+0x139>
c0027896:	89 c3                	mov    ebx,eax
c0027898:	eb f5                	jmp    c002788f <__mulsf3+0x12e>
c002789a:	89 c8                	mov    eax,ecx
c002789c:	0d 00 00 00 80       	or     eax,0x80000000
c00278a1:	81 ce 00 00 00 80    	or     esi,0x80000000
c00278a7:	f7 e6                	mul    esi
c00278a9:	85 c0                	test   eax,eax
c00278ab:	0f 95 c0             	setne  al
c00278ae:	0f b6 c0             	movzx  eax,al
c00278b1:	09 c2                	or     edx,eax
c00278b3:	78 03                	js     c00278b8 <__mulsf3+0x157>
c00278b5:	01 d2                	add    edx,edx
c00278b7:	4b                   	dec    ebx
c00278b8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00278be:	7f 22                	jg     c00278e2 <__mulsf3+0x181>
c00278c0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00278c6:	85 db                	test   ebx,ebx
c00278c8:	7f 23                	jg     c00278ed <__mulsf3+0x18c>
c00278ca:	83 fb e9             	cmp    ebx,0xffffffe9
c00278cd:	7c 1a                	jl     c00278e9 <__mulsf3+0x188>
c00278cf:	81 ca 00 00 00 80    	or     edx,0x80000000
c00278d5:	b9 01 00 00 00       	mov    ecx,0x1
c00278da:	29 d9                	sub    ecx,ebx
c00278dc:	d3 ea                	shr    edx,cl
c00278de:	31 db                	xor    ebx,ebx
c00278e0:	eb 0b                	jmp    c00278ed <__mulsf3+0x18c>
c00278e2:	bb ff 00 00 00       	mov    ebx,0xff
c00278e7:	eb 02                	jmp    c00278eb <__mulsf3+0x18a>
c00278e9:	31 db                	xor    ebx,ebx
c00278eb:	31 d2                	xor    edx,edx
c00278ed:	89 d0                	mov    eax,edx
c00278ef:	c1 e8 08             	shr    eax,0x8
c00278f2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00278f5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00278fb:	09 fb                	or     ebx,edi
c00278fd:	c1 e3 17             	shl    ebx,0x17
c0027900:	09 c3                	or     ebx,eax
c0027902:	f6 c2 7f             	test   dl,0x7f
c0027905:	0f 95 c1             	setne  cl
c0027908:	09 c8                	or     eax,ecx
c002790a:	83 e0 01             	and    eax,0x1
c002790d:	c1 ea 07             	shr    edx,0x7
c0027910:	21 c2                	and    edx,eax
c0027912:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027915:	eb 03                	jmp    c002791a <__mulsf3+0x1b9>
c0027917:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002791a:	89 f0                	mov    eax,esi
c002791c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002791f:	5b                   	pop    ebx
c0027920:	5e                   	pop    esi
c0027921:	5f                   	pop    edi
c0027922:	5d                   	pop    ebp
c0027923:	c3                   	ret    

c0027924 <__divsf3>:
c0027924:	55                   	push   ebp
c0027925:	89 e5                	mov    ebp,esp
c0027927:	57                   	push   edi
c0027928:	56                   	push   esi
c0027929:	53                   	push   ebx
c002792a:	83 ec 1c             	sub    esp,0x1c
c002792d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027930:	89 d8                	mov    eax,ebx
c0027932:	89 d9                	mov    ecx,ebx
c0027934:	c1 f9 17             	sar    ecx,0x17
c0027937:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002793a:	c1 e0 08             	shl    eax,0x8
c002793d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027942:	89 c1                	mov    ecx,eax
c0027944:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027947:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002794a:	89 c7                	mov    edi,eax
c002794c:	c1 ff 17             	sar    edi,0x17
c002794f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027953:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027956:	89 f8                	mov    eax,edi
c0027958:	0f b6 c0             	movzx  eax,al
c002795b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002795e:	29 c6                	sub    esi,eax
c0027960:	83 c6 7f             	add    esi,0x7f
c0027963:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027966:	42                   	inc    edx
c0027967:	80 e2 fe             	and    dl,0xfe
c002796a:	0f 85 9c 00 00 00    	jne    c0027a0c <__divsf3+0xe8>
c0027970:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027974:	74 33                	je     c00279a9 <__divsf3+0x85>
c0027976:	85 c9                	test   ecx,ecx
c0027978:	0f 85 c7 01 00 00    	jne    c0027b45 <__divsf3+0x221>
c002797e:	8d 57 01             	lea    edx,[edi+0x1]
c0027981:	80 e2 fe             	and    dl,0xfe
c0027984:	75 2f                	jne    c00279b5 <__divsf3+0x91>
c0027986:	85 c0                	test   eax,eax
c0027988:	74 2b                	je     c00279b5 <__divsf3+0x91>
c002798a:	51                   	push   ecx
c002798b:	51                   	push   ecx
c002798c:	6a 00                	push   0x0
c002798e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027991:	e8 d2 03 00 00       	call   c0027d68 <__nesf2>
c0027996:	83 c4 10             	add    esp,0x10
c0027999:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002799c:	85 c0                	test   eax,eax
c002799e:	0f 85 a1 01 00 00    	jne    c0027b45 <__divsf3+0x221>
c00279a4:	e9 92 01 00 00       	jmp    c0027b3b <__divsf3+0x217>
c00279a9:	85 c9                	test   ecx,ecx
c00279ab:	75 1b                	jne    c00279c8 <__divsf3+0xa4>
c00279ad:	8d 57 01             	lea    edx,[edi+0x1]
c00279b0:	80 e2 fe             	and    dl,0xfe
c00279b3:	74 1e                	je     c00279d3 <__divsf3+0xaf>
c00279b5:	85 ff                	test   edi,edi
c00279b7:	0f 89 88 01 00 00    	jns    c0027b45 <__divsf3+0x221>
c00279bd:	81 c3 00 00 00 80    	add    ebx,0x80000000
c00279c3:	e9 7d 01 00 00       	jmp    c0027b45 <__divsf3+0x221>
c00279c8:	8d 56 ff             	lea    edx,[esi-0x1]
c00279cb:	01 c9                	add    ecx,ecx
c00279cd:	78 3d                	js     c0027a0c <__divsf3+0xe8>
c00279cf:	89 d6                	mov    esi,edx
c00279d1:	eb f5                	jmp    c00279c8 <__divsf3+0xa4>
c00279d3:	85 c0                	test   eax,eax
c00279d5:	b8 00 00 00 00       	mov    eax,0x0
c00279da:	74 18                	je     c00279f4 <__divsf3+0xd0>
c00279dc:	52                   	push   edx
c00279dd:	52                   	push   edx
c00279de:	50                   	push   eax
c00279df:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279e2:	e8 81 03 00 00       	call   c0027d68 <__nesf2>
c00279e7:	83 c4 10             	add    esp,0x10
c00279ea:	85 c0                	test   eax,eax
c00279ec:	0f 85 50 01 00 00    	jne    c0027b42 <__divsf3+0x21e>
c00279f2:	eb c1                	jmp    c00279b5 <__divsf3+0x91>
c00279f4:	56                   	push   esi
c00279f5:	56                   	push   esi
c00279f6:	50                   	push   eax
c00279f7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279fa:	e8 69 03 00 00       	call   c0027d68 <__nesf2>
c00279ff:	83 c4 10             	add    esp,0x10
c0027a02:	85 c0                	test   eax,eax
c0027a04:	0f 84 31 01 00 00    	je     c0027b3b <__divsf3+0x217>
c0027a0a:	eb a9                	jmp    c00279b5 <__divsf3+0x91>
c0027a0c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027a0f:	c1 e3 08             	shl    ebx,0x8
c0027a12:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027a18:	8d 57 01             	lea    edx,[edi+0x1]
c0027a1b:	80 e2 fe             	and    dl,0xfe
c0027a1e:	75 71                	jne    c0027a91 <__divsf3+0x16d>
c0027a20:	85 c0                	test   eax,eax
c0027a22:	ba 00 00 00 00       	mov    edx,0x0
c0027a27:	74 2f                	je     c0027a58 <__divsf3+0x134>
c0027a29:	51                   	push   ecx
c0027a2a:	51                   	push   ecx
c0027a2b:	52                   	push   edx
c0027a2c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a2f:	e8 f9 02 00 00       	call   c0027d2d <__eqsf2>
c0027a34:	83 c4 10             	add    esp,0x10
c0027a37:	85 c0                	test   eax,eax
c0027a39:	0f 85 03 01 00 00    	jne    c0027b42 <__divsf3+0x21e>
c0027a3f:	31 d2                	xor    edx,edx
c0027a41:	89 d3                	mov    ebx,edx
c0027a43:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a46:	31 f8                	xor    eax,edi
c0027a48:	0f 89 f7 00 00 00    	jns    c0027b45 <__divsf3+0x221>
c0027a4e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027a53:	e9 ed 00 00 00       	jmp    c0027b45 <__divsf3+0x221>
c0027a58:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027a5b:	50                   	push   eax
c0027a5c:	50                   	push   eax
c0027a5d:	52                   	push   edx
c0027a5e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a61:	e8 c7 02 00 00       	call   c0027d2d <__eqsf2>
c0027a66:	83 c4 10             	add    esp,0x10
c0027a69:	85 c0                	test   eax,eax
c0027a6b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027a6e:	75 16                	jne    c0027a86 <__divsf3+0x162>
c0027a70:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027a73:	31 fb                	xor    ebx,edi
c0027a75:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027a7b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027a81:	e9 bf 00 00 00       	jmp    c0027b45 <__divsf3+0x221>
c0027a86:	8d 46 01             	lea    eax,[esi+0x1]
c0027a89:	01 db                	add    ebx,ebx
c0027a8b:	78 04                	js     c0027a91 <__divsf3+0x16d>
c0027a8d:	89 c6                	mov    esi,eax
c0027a8f:	eb f5                	jmp    c0027a86 <__divsf3+0x162>
c0027a91:	89 c8                	mov    eax,ecx
c0027a93:	0d 00 00 00 80       	or     eax,0x80000000
c0027a98:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027a9e:	31 d2                	xor    edx,edx
c0027aa0:	39 d8                	cmp    eax,ebx
c0027aa2:	72 07                	jb     c0027aab <__divsf3+0x187>
c0027aa4:	29 d8                	sub    eax,ebx
c0027aa6:	ba 01 00 00 00       	mov    edx,0x1
c0027aab:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027ab2:	01 d2                	add    edx,edx
c0027ab4:	89 c1                	mov    ecx,eax
c0027ab6:	01 c0                	add    eax,eax
c0027ab8:	85 c9                	test   ecx,ecx
c0027aba:	78 04                	js     c0027ac0 <__divsf3+0x19c>
c0027abc:	39 c3                	cmp    ebx,eax
c0027abe:	77 05                	ja     c0027ac5 <__divsf3+0x1a1>
c0027ac0:	29 d8                	sub    eax,ebx
c0027ac2:	83 ca 01             	or     edx,0x1
c0027ac5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027ac8:	75 e8                	jne    c0027ab2 <__divsf3+0x18e>
c0027aca:	85 c0                	test   eax,eax
c0027acc:	0f 95 c0             	setne  al
c0027acf:	0f b6 c0             	movzx  eax,al
c0027ad2:	c1 e2 06             	shl    edx,0x6
c0027ad5:	09 c2                	or     edx,eax
c0027ad7:	78 03                	js     c0027adc <__divsf3+0x1b8>
c0027ad9:	01 d2                	add    edx,edx
c0027adb:	4e                   	dec    esi
c0027adc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027ae2:	7f 22                	jg     c0027b06 <__divsf3+0x1e2>
c0027ae4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027aea:	85 f6                	test   esi,esi
c0027aec:	7f 23                	jg     c0027b11 <__divsf3+0x1ed>
c0027aee:	83 fe e9             	cmp    esi,0xffffffe9
c0027af1:	7c 1a                	jl     c0027b0d <__divsf3+0x1e9>
c0027af3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027af9:	b9 01 00 00 00       	mov    ecx,0x1
c0027afe:	29 f1                	sub    ecx,esi
c0027b00:	d3 ea                	shr    edx,cl
c0027b02:	31 f6                	xor    esi,esi
c0027b04:	eb 0b                	jmp    c0027b11 <__divsf3+0x1ed>
c0027b06:	be ff 00 00 00       	mov    esi,0xff
c0027b0b:	eb 02                	jmp    c0027b0f <__divsf3+0x1eb>
c0027b0d:	31 f6                	xor    esi,esi
c0027b0f:	31 d2                	xor    edx,edx
c0027b11:	89 d0                	mov    eax,edx
c0027b13:	c1 e8 08             	shr    eax,0x8
c0027b16:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027b19:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027b1f:	09 fe                	or     esi,edi
c0027b21:	c1 e6 17             	shl    esi,0x17
c0027b24:	09 c6                	or     esi,eax
c0027b26:	f6 c2 7f             	test   dl,0x7f
c0027b29:	0f 95 c1             	setne  cl
c0027b2c:	09 c8                	or     eax,ecx
c0027b2e:	83 e0 01             	and    eax,0x1
c0027b31:	c1 ea 07             	shr    edx,0x7
c0027b34:	21 c2                	and    edx,eax
c0027b36:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027b39:	eb 0a                	jmp    c0027b45 <__divsf3+0x221>
c0027b3b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027b40:	eb 03                	jmp    c0027b45 <__divsf3+0x221>
c0027b42:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027b45:	89 d8                	mov    eax,ebx
c0027b47:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027b4a:	5b                   	pop    ebx
c0027b4b:	5e                   	pop    esi
c0027b4c:	5f                   	pop    edi
c0027b4d:	5d                   	pop    ebp
c0027b4e:	c3                   	ret    

c0027b4f <__floatsisf>:
c0027b4f:	55                   	push   ebp
c0027b50:	89 e5                	mov    ebp,esp
c0027b52:	53                   	push   ebx
c0027b53:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027b56:	85 d2                	test   edx,edx
c0027b58:	7e 2b                	jle    c0027b85 <__floatsisf+0x36>
c0027b5a:	0f bd ca             	bsr    ecx,edx
c0027b5d:	83 f1 1f             	xor    ecx,0x1f
c0027b60:	d3 e2                	shl    edx,cl
c0027b62:	89 d0                	mov    eax,edx
c0027b64:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b69:	89 c3                	mov    ebx,eax
c0027b6b:	c1 eb 08             	shr    ebx,0x8
c0027b6e:	80 e2 7f             	and    dl,0x7f
c0027b71:	0f 95 c2             	setne  dl
c0027b74:	09 da                	or     edx,ebx
c0027b76:	83 e2 01             	and    edx,0x1
c0027b79:	c1 e8 07             	shr    eax,0x7
c0027b7c:	21 c2                	and    edx,eax
c0027b7e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027b83:	eb 32                	jmp    c0027bb7 <__floatsisf+0x68>
c0027b85:	b8 00 00 00 00       	mov    eax,0x0
c0027b8a:	74 34                	je     c0027bc0 <__floatsisf+0x71>
c0027b8c:	f7 da                	neg    edx
c0027b8e:	0f bd ca             	bsr    ecx,edx
c0027b91:	83 f1 1f             	xor    ecx,0x1f
c0027b94:	d3 e2                	shl    edx,cl
c0027b96:	89 d0                	mov    eax,edx
c0027b98:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b9d:	89 c3                	mov    ebx,eax
c0027b9f:	c1 eb 08             	shr    ebx,0x8
c0027ba2:	80 e2 7f             	and    dl,0x7f
c0027ba5:	0f 95 c2             	setne  dl
c0027ba8:	09 da                	or     edx,ebx
c0027baa:	83 e2 01             	and    edx,0x1
c0027bad:	c1 e8 07             	shr    eax,0x7
c0027bb0:	21 c2                	and    edx,eax
c0027bb2:	b8 9e 01 00 00       	mov    eax,0x19e
c0027bb7:	29 c8                	sub    eax,ecx
c0027bb9:	c1 e0 17             	shl    eax,0x17
c0027bbc:	09 d8                	or     eax,ebx
c0027bbe:	01 d0                	add    eax,edx
c0027bc0:	5b                   	pop    ebx
c0027bc1:	5d                   	pop    ebp
c0027bc2:	c3                   	ret    

c0027bc3 <__floatunsisf>:
c0027bc3:	55                   	push   ebp
c0027bc4:	89 e5                	mov    ebp,esp
c0027bc6:	53                   	push   ebx
c0027bc7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027bca:	31 c0                	xor    eax,eax
c0027bcc:	85 d2                	test   edx,edx
c0027bce:	74 32                	je     c0027c02 <__floatunsisf+0x3f>
c0027bd0:	0f bd ca             	bsr    ecx,edx
c0027bd3:	83 f1 1f             	xor    ecx,0x1f
c0027bd6:	d3 e2                	shl    edx,cl
c0027bd8:	89 d0                	mov    eax,edx
c0027bda:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027bdf:	89 c3                	mov    ebx,eax
c0027be1:	c1 eb 08             	shr    ebx,0x8
c0027be4:	80 e2 7f             	and    dl,0x7f
c0027be7:	0f 95 c2             	setne  dl
c0027bea:	09 da                	or     edx,ebx
c0027bec:	83 e2 01             	and    edx,0x1
c0027bef:	c1 e8 07             	shr    eax,0x7
c0027bf2:	21 c2                	and    edx,eax
c0027bf4:	b8 9e 00 00 00       	mov    eax,0x9e
c0027bf9:	29 c8                	sub    eax,ecx
c0027bfb:	c1 e0 17             	shl    eax,0x17
c0027bfe:	09 d8                	or     eax,ebx
c0027c00:	01 d0                	add    eax,edx
c0027c02:	5b                   	pop    ebx
c0027c03:	5d                   	pop    ebp
c0027c04:	c3                   	ret    

c0027c05 <__fixsfsi>:
c0027c05:	55                   	push   ebp
c0027c06:	89 e5                	mov    ebp,esp
c0027c08:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027c0b:	89 d1                	mov    ecx,edx
c0027c0d:	c1 e1 08             	shl    ecx,0x8
c0027c10:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027c16:	c1 fa 17             	sar    edx,0x17
c0027c19:	78 1c                	js     c0027c37 <__fixsfsi+0x32>
c0027c1b:	83 ea 7f             	sub    edx,0x7f
c0027c1e:	31 c0                	xor    eax,eax
c0027c20:	83 fa 1e             	cmp    edx,0x1e
c0027c23:	77 40                	ja     c0027c65 <__fixsfsi+0x60>
c0027c25:	89 c8                	mov    eax,ecx
c0027c27:	0d 00 00 00 80       	or     eax,0x80000000
c0027c2c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c31:	29 d1                	sub    ecx,edx
c0027c33:	d3 e8                	shr    eax,cl
c0027c35:	eb 2e                	jmp    c0027c65 <__fixsfsi+0x60>
c0027c37:	31 c0                	xor    eax,eax
c0027c39:	81 c2 81 00 00 00    	add    edx,0x81
c0027c3f:	78 24                	js     c0027c65 <__fixsfsi+0x60>
c0027c41:	83 fa 1e             	cmp    edx,0x1e
c0027c44:	7e 09                	jle    c0027c4f <__fixsfsi+0x4a>
c0027c46:	83 fa 1f             	cmp    edx,0x1f
c0027c49:	75 18                	jne    c0027c63 <__fixsfsi+0x5e>
c0027c4b:	85 c9                	test   ecx,ecx
c0027c4d:	75 14                	jne    c0027c63 <__fixsfsi+0x5e>
c0027c4f:	89 c8                	mov    eax,ecx
c0027c51:	0d 00 00 00 80       	or     eax,0x80000000
c0027c56:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c5b:	29 d1                	sub    ecx,edx
c0027c5d:	d3 e8                	shr    eax,cl
c0027c5f:	f7 d8                	neg    eax
c0027c61:	eb 02                	jmp    c0027c65 <__fixsfsi+0x60>
c0027c63:	31 c0                	xor    eax,eax
c0027c65:	5d                   	pop    ebp
c0027c66:	c3                   	ret    

c0027c67 <__fixunssfsi>:
c0027c67:	55                   	push   ebp
c0027c68:	89 e5                	mov    ebp,esp
c0027c6a:	53                   	push   ebx
c0027c6b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027c6e:	89 d3                	mov    ebx,edx
c0027c70:	c1 fb 17             	sar    ebx,0x17
c0027c73:	83 eb 7f             	sub    ebx,0x7f
c0027c76:	31 c0                	xor    eax,eax
c0027c78:	83 fb 1f             	cmp    ebx,0x1f
c0027c7b:	77 18                	ja     c0027c95 <__fixunssfsi+0x2e>
c0027c7d:	89 d0                	mov    eax,edx
c0027c7f:	c1 e0 08             	shl    eax,0x8
c0027c82:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027c87:	0d 00 00 00 80       	or     eax,0x80000000
c0027c8c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c91:	29 d9                	sub    ecx,ebx
c0027c93:	d3 e8                	shr    eax,cl
c0027c95:	5b                   	pop    ebx
c0027c96:	5d                   	pop    ebp
c0027c97:	c3                   	ret    

c0027c98 <__cmpsf2>:
c0027c98:	55                   	push   ebp
c0027c99:	89 e5                	mov    ebp,esp
c0027c9b:	57                   	push   edi
c0027c9c:	56                   	push   esi
c0027c9d:	53                   	push   ebx
c0027c9e:	83 ec 24             	sub    esp,0x24
c0027ca1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027ca4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027ca7:	e8 4f 10 00 00       	call   c0028cfb <__truncdfsf2>
c0027cac:	5a                   	pop    edx
c0027cad:	59                   	pop    ecx
c0027cae:	89 c3                	mov    ebx,eax
c0027cb0:	c1 e8 17             	shr    eax,0x17
c0027cb3:	0f b6 f0             	movzx  esi,al
c0027cb6:	89 d8                	mov    eax,ebx
c0027cb8:	c1 e8 1f             	shr    eax,0x1f
c0027cbb:	31 c6                	xor    esi,eax
c0027cbd:	c1 e3 08             	shl    ebx,0x8
c0027cc0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027cc3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027cc6:	e8 30 10 00 00       	call   c0028cfb <__truncdfsf2>
c0027ccb:	83 c4 10             	add    esp,0x10
c0027cce:	89 c1                	mov    ecx,eax
c0027cd0:	c1 e9 17             	shr    ecx,0x17
c0027cd3:	0f b6 c9             	movzx  ecx,cl
c0027cd6:	89 c7                	mov    edi,eax
c0027cd8:	c1 ef 1f             	shr    edi,0x1f
c0027cdb:	89 ca                	mov    edx,ecx
c0027cdd:	31 fa                	xor    edx,edi
c0027cdf:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027ce2:	c1 e0 08             	shl    eax,0x8
c0027ce5:	89 c2                	mov    edx,eax
c0027ce7:	89 d8                	mov    eax,ebx
c0027ce9:	09 d0                	or     eax,edx
c0027ceb:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027cf0:	09 f0                	or     eax,esi
c0027cf2:	75 08                	jne    c0027cfc <__cmpsf2+0x64>
c0027cf4:	31 c0                	xor    eax,eax
c0027cf6:	39 f9                	cmp    ecx,edi
c0027cf8:	75 0c                	jne    c0027d06 <__cmpsf2+0x6e>
c0027cfa:	eb 29                	jmp    c0027d25 <__cmpsf2+0x8d>
c0027cfc:	b8 01 00 00 00       	mov    eax,0x1
c0027d01:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027d04:	7f 1f                	jg     c0027d25 <__cmpsf2+0x8d>
c0027d06:	83 c8 ff             	or     eax,0xffffffff
c0027d09:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027d0c:	7c 17                	jl     c0027d25 <__cmpsf2+0x8d>
c0027d0e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027d14:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027d1a:	b8 01 00 00 00       	mov    eax,0x1
c0027d1f:	39 d3                	cmp    ebx,edx
c0027d21:	77 02                	ja     c0027d25 <__cmpsf2+0x8d>
c0027d23:	19 c0                	sbb    eax,eax
c0027d25:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027d28:	5b                   	pop    ebx
c0027d29:	5e                   	pop    esi
c0027d2a:	5f                   	pop    edi
c0027d2b:	5d                   	pop    ebp
c0027d2c:	c3                   	ret    

c0027d2d <__eqsf2>:
c0027d2d:	55                   	push   ebp
c0027d2e:	89 e5                	mov    ebp,esp
c0027d30:	83 ec 24             	sub    esp,0x24
c0027d33:	6a 01                	push   0x1
c0027d35:	83 ec 0c             	sub    esp,0xc
c0027d38:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d3b:	e8 df 10 00 00       	call   c0028e1f <__extendsfdf2>
c0027d40:	83 c4 10             	add    esp,0x10
c0027d43:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d46:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d49:	52                   	push   edx
c0027d4a:	50                   	push   eax
c0027d4b:	50                   	push   eax
c0027d4c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d4f:	e8 cb 10 00 00       	call   c0028e1f <__extendsfdf2>
c0027d54:	59                   	pop    ecx
c0027d55:	59                   	pop    ecx
c0027d56:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d59:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d5c:	52                   	push   edx
c0027d5d:	50                   	push   eax
c0027d5e:	e8 35 ff ff ff       	call   c0027c98 <__cmpsf2>
c0027d63:	83 c4 20             	add    esp,0x20
c0027d66:	c9                   	leave  
c0027d67:	c3                   	ret    

c0027d68 <__nesf2>:
c0027d68:	eb c3                	jmp    c0027d2d <__eqsf2>

c0027d6a <__gtsf2>:
c0027d6a:	55                   	push   ebp
c0027d6b:	89 e5                	mov    ebp,esp
c0027d6d:	83 ec 24             	sub    esp,0x24
c0027d70:	6a ff                	push   0xffffffff
c0027d72:	83 ec 0c             	sub    esp,0xc
c0027d75:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d78:	e8 a2 10 00 00       	call   c0028e1f <__extendsfdf2>
c0027d7d:	83 c4 10             	add    esp,0x10
c0027d80:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d83:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d86:	52                   	push   edx
c0027d87:	50                   	push   eax
c0027d88:	50                   	push   eax
c0027d89:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d8c:	e8 8e 10 00 00       	call   c0028e1f <__extendsfdf2>
c0027d91:	59                   	pop    ecx
c0027d92:	59                   	pop    ecx
c0027d93:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d96:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d99:	52                   	push   edx
c0027d9a:	50                   	push   eax
c0027d9b:	e8 f8 fe ff ff       	call   c0027c98 <__cmpsf2>
c0027da0:	83 c4 20             	add    esp,0x20
c0027da3:	c9                   	leave  
c0027da4:	c3                   	ret    

c0027da5 <__gesf2>:
c0027da5:	eb c3                	jmp    c0027d6a <__gtsf2>

c0027da7 <__ltsf2>:
c0027da7:	eb 84                	jmp    c0027d2d <__eqsf2>

c0027da9 <__lesf2>:
c0027da9:	eb 82                	jmp    c0027d2d <__eqsf2>

c0027dab <__adddf3>:
c0027dab:	55                   	push   ebp
c0027dac:	89 e5                	mov    ebp,esp
c0027dae:	57                   	push   edi
c0027daf:	56                   	push   esi
c0027db0:	53                   	push   ebx
c0027db1:	83 ec 24             	sub    esp,0x24
c0027db4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027db7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027dba:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027dbd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027dc0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027dc3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027dc6:	89 c8                	mov    eax,ecx
c0027dc8:	89 ce                	mov    esi,ecx
c0027dca:	c1 fe 14             	sar    esi,0x14
c0027dcd:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027dd0:	89 fb                	mov    ebx,edi
c0027dd2:	89 fa                	mov    edx,edi
c0027dd4:	c1 e2 0b             	shl    edx,0xb
c0027dd7:	c1 e0 0b             	shl    eax,0xb
c0027dda:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027ddf:	c1 eb 15             	shr    ebx,0x15
c0027de2:	09 d8                	or     eax,ebx
c0027de4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027de7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027dea:	c1 fe 14             	sar    esi,0x14
c0027ded:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027df0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027df3:	89 f3                	mov    ebx,esi
c0027df5:	c1 e3 0b             	shl    ebx,0xb
c0027df8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027dfb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027dfe:	c1 e3 0b             	shl    ebx,0xb
c0027e01:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027e07:	c1 ee 15             	shr    esi,0x15
c0027e0a:	09 f3                	or     ebx,esi
c0027e0c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027e0f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027e12:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027e15:	0f 88 5f 02 00 00    	js     c002807a <__adddf3+0x2cf>
c0027e1b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027e1e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027e21:	85 db                	test   ebx,ebx
c0027e23:	0f 8e c7 00 00 00    	jle    c0027ef0 <__adddf3+0x145>
c0027e29:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027e30:	75 1a                	jne    c0027e4c <__adddf3+0xa1>
c0027e32:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027e35:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027e38:	0f 84 b2 05 00 00    	je     c00283f0 <__adddf3+0x645>
c0027e3e:	4b                   	dec    ebx
c0027e3f:	75 23                	jne    c0027e64 <__adddf3+0xb9>
c0027e41:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027e44:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027e47:	e9 99 00 00 00       	jmp    c0027ee5 <__adddf3+0x13a>
c0027e4c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027e4f:	f7 d6                	not    esi
c0027e51:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027e57:	0f 84 93 05 00 00    	je     c00283f0 <__adddf3+0x645>
c0027e5d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027e64:	83 fb 1f             	cmp    ebx,0x1f
c0027e67:	7e 42                	jle    c0027eab <__adddf3+0x100>
c0027e69:	83 fb 3f             	cmp    ebx,0x3f
c0027e6c:	0f 8f 7e 05 00 00    	jg     c00283f0 <__adddf3+0x645>
c0027e72:	83 e3 1f             	and    ebx,0x1f
c0027e75:	89 d9                	mov    ecx,ebx
c0027e77:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027e7a:	d3 ef                	shr    edi,cl
c0027e7c:	31 db                	xor    ebx,ebx
c0027e7e:	85 c9                	test   ecx,ecx
c0027e80:	74 15                	je     c0027e97 <__adddf3+0xec>
c0027e82:	be 20 00 00 00       	mov    esi,0x20
c0027e87:	29 ce                	sub    esi,ecx
c0027e89:	89 f1                	mov    ecx,esi
c0027e8b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e8e:	d3 e6                	shl    esi,cl
c0027e90:	31 db                	xor    ebx,ebx
c0027e92:	85 f6                	test   esi,esi
c0027e94:	0f 95 c3             	setne  bl
c0027e97:	31 c9                	xor    ecx,ecx
c0027e99:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027e9d:	0f 95 c1             	setne  cl
c0027ea0:	09 cf                	or     edi,ecx
c0027ea2:	09 fb                	or     ebx,edi
c0027ea4:	01 da                	add    edx,ebx
c0027ea6:	83 d0 00             	adc    eax,0x0
c0027ea9:	eb 3a                	jmp    c0027ee5 <__adddf3+0x13a>
c0027eab:	bf 20 00 00 00       	mov    edi,0x20
c0027eb0:	29 df                	sub    edi,ebx
c0027eb2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027eb5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027eb8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027ebb:	d3 e6                	shl    esi,cl
c0027ebd:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027ec0:	88 d9                	mov    cl,bl
c0027ec2:	d3 ef                	shr    edi,cl
c0027ec4:	09 fe                	or     esi,edi
c0027ec6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027ec9:	88 d9                	mov    cl,bl
c0027ecb:	d3 ef                	shr    edi,cl
c0027ecd:	89 fb                	mov    ebx,edi
c0027ecf:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027ed2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027ed5:	d3 e7                	shl    edi,cl
c0027ed7:	85 ff                	test   edi,edi
c0027ed9:	0f 95 c1             	setne  cl
c0027edc:	0f b6 c9             	movzx  ecx,cl
c0027edf:	09 ce                	or     esi,ecx
c0027ee1:	01 f2                	add    edx,esi
c0027ee3:	11 d8                	adc    eax,ebx
c0027ee5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ee8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027eeb:	e9 52 01 00 00       	jmp    c0028042 <__adddf3+0x297>
c0027ef0:	0f 84 d5 00 00 00    	je     c0027fcb <__adddf3+0x220>
c0027ef6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027ef9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027efc:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027eff:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027f02:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027f09:	75 20                	jne    c0027f2b <__adddf3+0x180>
c0027f0b:	89 d6                	mov    esi,edx
c0027f0d:	09 c6                	or     esi,eax
c0027f0f:	0f 84 db 04 00 00    	je     c00283f0 <__adddf3+0x645>
c0027f15:	4b                   	dec    ebx
c0027f16:	75 29                	jne    c0027f41 <__adddf3+0x196>
c0027f18:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f1b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027f1e:	01 d1                	add    ecx,edx
c0027f20:	11 c6                	adc    esi,eax
c0027f22:	89 f0                	mov    eax,esi
c0027f24:	89 ca                	mov    edx,ecx
c0027f26:	e9 17 01 00 00       	jmp    c0028042 <__adddf3+0x297>
c0027f2b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027f2e:	f7 d6                	not    esi
c0027f30:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027f36:	0f 84 b4 04 00 00    	je     c00283f0 <__adddf3+0x645>
c0027f3c:	0d 00 00 00 80       	or     eax,0x80000000
c0027f41:	83 fb 1f             	cmp    ebx,0x1f
c0027f44:	7e 48                	jle    c0027f8e <__adddf3+0x1e3>
c0027f46:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027f49:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027f4c:	83 fb 3f             	cmp    ebx,0x3f
c0027f4f:	0f 8f 9b 04 00 00    	jg     c00283f0 <__adddf3+0x645>
c0027f55:	83 e3 1f             	and    ebx,0x1f
c0027f58:	89 d9                	mov    ecx,ebx
c0027f5a:	89 c7                	mov    edi,eax
c0027f5c:	d3 ef                	shr    edi,cl
c0027f5e:	31 db                	xor    ebx,ebx
c0027f60:	85 c9                	test   ecx,ecx
c0027f62:	74 12                	je     c0027f76 <__adddf3+0x1cb>
c0027f64:	be 20 00 00 00       	mov    esi,0x20
c0027f69:	29 ce                	sub    esi,ecx
c0027f6b:	89 f1                	mov    ecx,esi
c0027f6d:	d3 e0                	shl    eax,cl
c0027f6f:	31 db                	xor    ebx,ebx
c0027f71:	85 c0                	test   eax,eax
c0027f73:	0f 95 c3             	setne  bl
c0027f76:	31 c0                	xor    eax,eax
c0027f78:	85 d2                	test   edx,edx
c0027f7a:	0f 95 c0             	setne  al
c0027f7d:	09 c7                	or     edi,eax
c0027f7f:	09 fb                	or     ebx,edi
c0027f81:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f84:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027f87:	01 da                	add    edx,ebx
c0027f89:	83 d6 00             	adc    esi,0x0
c0027f8c:	eb 39                	jmp    c0027fc7 <__adddf3+0x21c>
c0027f8e:	be 20 00 00 00       	mov    esi,0x20
c0027f93:	29 de                	sub    esi,ebx
c0027f95:	89 c7                	mov    edi,eax
c0027f97:	89 f1                	mov    ecx,esi
c0027f99:	d3 e7                	shl    edi,cl
c0027f9b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027f9e:	89 d7                	mov    edi,edx
c0027fa0:	88 d9                	mov    cl,bl
c0027fa2:	d3 ef                	shr    edi,cl
c0027fa4:	89 f9                	mov    ecx,edi
c0027fa6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027fa9:	09 cf                	or     edi,ecx
c0027fab:	88 d9                	mov    cl,bl
c0027fad:	d3 e8                	shr    eax,cl
c0027faf:	89 f1                	mov    ecx,esi
c0027fb1:	d3 e2                	shl    edx,cl
c0027fb3:	85 d2                	test   edx,edx
c0027fb5:	0f 95 c2             	setne  dl
c0027fb8:	0f b6 d2             	movzx  edx,dl
c0027fbb:	09 d7                	or     edi,edx
c0027fbd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027fc0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027fc3:	01 fa                	add    edx,edi
c0027fc5:	11 c6                	adc    esi,eax
c0027fc7:	89 f0                	mov    eax,esi
c0027fc9:	eb 77                	jmp    c0028042 <__adddf3+0x297>
c0027fcb:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027fce:	46                   	inc    esi
c0027fcf:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027fd2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027fd8:	75 41                	jne    c002801b <__adddf3+0x270>
c0027fda:	89 d3                	mov    ebx,edx
c0027fdc:	09 c3                	or     ebx,eax
c0027fde:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027fe5:	75 27                	jne    c002800e <__adddf3+0x263>
c0027fe7:	85 db                	test   ebx,ebx
c0027fe9:	0f 84 fb 03 00 00    	je     c00283ea <__adddf3+0x63f>
c0027fef:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027ff2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027ff5:	0f 84 f5 03 00 00    	je     c00283f0 <__adddf3+0x645>
c0027ffb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027ffe:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028001:	85 c0                	test   eax,eax
c0028003:	0f 89 91 03 00 00    	jns    c002839a <__adddf3+0x5ef>
c0028009:	e9 85 03 00 00       	jmp    c0028393 <__adddf3+0x5e8>
c002800e:	85 db                	test   ebx,ebx
c0028010:	0f 85 da 03 00 00    	jne    c00283f0 <__adddf3+0x645>
c0028016:	e9 cf 03 00 00       	jmp    c00283ea <__adddf3+0x63f>
c002801b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002801e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028021:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028024:	f7 d1                	not    ecx
c0028026:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002802c:	0f 84 70 03 00 00    	je     c00283a2 <__adddf3+0x5f7>
c0028032:	d1 ea                	shr    edx,1
c0028034:	89 c1                	mov    ecx,eax
c0028036:	c1 e1 1f             	shl    ecx,0x1f
c0028039:	09 ca                	or     edx,ecx
c002803b:	d1 e8                	shr    eax,1
c002803d:	e9 6f 03 00 00       	jmp    c00283b1 <__adddf3+0x606>
c0028042:	85 c0                	test   eax,eax
c0028044:	0f 89 67 03 00 00    	jns    c00283b1 <__adddf3+0x606>
c002804a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002804d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028050:	f7 d1                	not    ecx
c0028052:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0028058:	0f 84 44 03 00 00    	je     c00283a2 <__adddf3+0x5f7>
c002805e:	89 d1                	mov    ecx,edx
c0028060:	d1 e9                	shr    ecx,1
c0028062:	83 e2 01             	and    edx,0x1
c0028065:	09 ca                	or     edx,ecx
c0028067:	89 c1                	mov    ecx,eax
c0028069:	c1 e1 1f             	shl    ecx,0x1f
c002806c:	09 ca                	or     edx,ecx
c002806e:	d1 e8                	shr    eax,1
c0028070:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0028075:	e9 37 03 00 00       	jmp    c00283b1 <__adddf3+0x606>
c002807a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002807d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028083:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0028086:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028089:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002808f:	29 de                	sub    esi,ebx
c0028091:	85 f6                	test   esi,esi
c0028093:	0f 8e bd 00 00 00    	jle    c0028156 <__adddf3+0x3ab>
c0028099:	85 db                	test   ebx,ebx
c002809b:	75 17                	jne    c00280b4 <__adddf3+0x309>
c002809d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00280a0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00280a3:	0f 84 47 03 00 00    	je     c00283f0 <__adddf3+0x645>
c00280a9:	4e                   	dec    esi
c00280aa:	75 20                	jne    c00280cc <__adddf3+0x321>
c00280ac:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00280af:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00280b2:	eb 5b                	jmp    c002810f <__adddf3+0x364>
c00280b4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00280b7:	f7 d3                	not    ebx
c00280b9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00280bf:	0f 84 2b 03 00 00    	je     c00283f0 <__adddf3+0x645>
c00280c5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00280cc:	83 fe 1f             	cmp    esi,0x1f
c00280cf:	7e 49                	jle    c002811a <__adddf3+0x36f>
c00280d1:	83 fe 3f             	cmp    esi,0x3f
c00280d4:	0f 8f 16 03 00 00    	jg     c00283f0 <__adddf3+0x645>
c00280da:	83 e6 1f             	and    esi,0x1f
c00280dd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00280e0:	89 f1                	mov    ecx,esi
c00280e2:	d3 ef                	shr    edi,cl
c00280e4:	31 db                	xor    ebx,ebx
c00280e6:	85 f6                	test   esi,esi
c00280e8:	74 13                	je     c00280fd <__adddf3+0x352>
c00280ea:	b9 20 00 00 00       	mov    ecx,0x20
c00280ef:	29 f1                	sub    ecx,esi
c00280f1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280f4:	d3 e6                	shl    esi,cl
c00280f6:	31 db                	xor    ebx,ebx
c00280f8:	85 f6                	test   esi,esi
c00280fa:	0f 95 c3             	setne  bl
c00280fd:	31 c9                	xor    ecx,ecx
c00280ff:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0028103:	0f 95 c1             	setne  cl
c0028106:	09 cf                	or     edi,ecx
c0028108:	09 fb                	or     ebx,edi
c002810a:	29 da                	sub    edx,ebx
c002810c:	83 d8 00             	sbb    eax,0x0
c002810f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028112:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028115:	e9 aa 01 00 00       	jmp    c00282c4 <__adddf3+0x519>
c002811a:	bf 20 00 00 00       	mov    edi,0x20
c002811f:	29 f7                	sub    edi,esi
c0028121:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028124:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028127:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002812a:	d3 e3                	shl    ebx,cl
c002812c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002812f:	89 f1                	mov    ecx,esi
c0028131:	d3 ef                	shr    edi,cl
c0028133:	09 fb                	or     ebx,edi
c0028135:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028138:	89 f1                	mov    ecx,esi
c002813a:	d3 ef                	shr    edi,cl
c002813c:	89 fe                	mov    esi,edi
c002813e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028141:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028144:	d3 e7                	shl    edi,cl
c0028146:	85 ff                	test   edi,edi
c0028148:	0f 95 c1             	setne  cl
c002814b:	0f b6 c9             	movzx  ecx,cl
c002814e:	09 cb                	or     ebx,ecx
c0028150:	29 da                	sub    edx,ebx
c0028152:	19 f0                	sbb    eax,esi
c0028154:	eb b9                	jmp    c002810f <__adddf3+0x364>
c0028156:	0f 84 cd 00 00 00    	je     c0028229 <__adddf3+0x47e>
c002815c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002815f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028162:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028165:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028169:	75 1b                	jne    c0028186 <__adddf3+0x3db>
c002816b:	89 d6                	mov    esi,edx
c002816d:	09 c6                	or     esi,eax
c002816f:	0f 84 7b 02 00 00    	je     c00283f0 <__adddf3+0x645>
c0028175:	4b                   	dec    ebx
c0028176:	75 24                	jne    c002819c <__adddf3+0x3f1>
c0028178:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002817b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002817e:	29 d1                	sub    ecx,edx
c0028180:	19 c6                	sbb    esi,eax
c0028182:	89 ca                	mov    edx,ecx
c0028184:	eb 61                	jmp    c00281e7 <__adddf3+0x43c>
c0028186:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028189:	f7 d6                	not    esi
c002818b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028191:	0f 84 59 02 00 00    	je     c00283f0 <__adddf3+0x645>
c0028197:	0d 00 00 00 80       	or     eax,0x80000000
c002819c:	83 fb 1f             	cmp    ebx,0x1f
c002819f:	7e 4d                	jle    c00281ee <__adddf3+0x443>
c00281a1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00281a4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00281a7:	83 fb 3f             	cmp    ebx,0x3f
c00281aa:	0f 8f 40 02 00 00    	jg     c00283f0 <__adddf3+0x645>
c00281b0:	83 e3 1f             	and    ebx,0x1f
c00281b3:	89 d9                	mov    ecx,ebx
c00281b5:	89 c7                	mov    edi,eax
c00281b7:	d3 ef                	shr    edi,cl
c00281b9:	31 db                	xor    ebx,ebx
c00281bb:	85 c9                	test   ecx,ecx
c00281bd:	74 12                	je     c00281d1 <__adddf3+0x426>
c00281bf:	be 20 00 00 00       	mov    esi,0x20
c00281c4:	29 ce                	sub    esi,ecx
c00281c6:	89 f1                	mov    ecx,esi
c00281c8:	d3 e0                	shl    eax,cl
c00281ca:	31 db                	xor    ebx,ebx
c00281cc:	85 c0                	test   eax,eax
c00281ce:	0f 95 c3             	setne  bl
c00281d1:	31 c0                	xor    eax,eax
c00281d3:	85 d2                	test   edx,edx
c00281d5:	0f 95 c0             	setne  al
c00281d8:	09 c7                	or     edi,eax
c00281da:	09 fb                	or     ebx,edi
c00281dc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281df:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00281e2:	29 da                	sub    edx,ebx
c00281e4:	83 de 00             	sbb    esi,0x0
c00281e7:	89 f0                	mov    eax,esi
c00281e9:	e9 d6 00 00 00       	jmp    c00282c4 <__adddf3+0x519>
c00281ee:	be 20 00 00 00       	mov    esi,0x20
c00281f3:	29 de                	sub    esi,ebx
c00281f5:	89 c7                	mov    edi,eax
c00281f7:	89 f1                	mov    ecx,esi
c00281f9:	d3 e7                	shl    edi,cl
c00281fb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00281fe:	89 d7                	mov    edi,edx
c0028200:	88 d9                	mov    cl,bl
c0028202:	d3 ef                	shr    edi,cl
c0028204:	89 f9                	mov    ecx,edi
c0028206:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028209:	09 cf                	or     edi,ecx
c002820b:	88 d9                	mov    cl,bl
c002820d:	d3 e8                	shr    eax,cl
c002820f:	89 f1                	mov    ecx,esi
c0028211:	d3 e2                	shl    edx,cl
c0028213:	85 d2                	test   edx,edx
c0028215:	0f 95 c2             	setne  dl
c0028218:	0f b6 d2             	movzx  edx,dl
c002821b:	09 d7                	or     edi,edx
c002821d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028220:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028223:	29 fa                	sub    edx,edi
c0028225:	19 c6                	sbb    esi,eax
c0028227:	eb be                	jmp    c00281e7 <__adddf3+0x43c>
c0028229:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002822c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002822f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0028235:	75 6a                	jne    c00282a1 <__adddf3+0x4f6>
c0028237:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002823b:	75 58                	jne    c0028295 <__adddf3+0x4ea>
c002823d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028240:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028243:	89 d6                	mov    esi,edx
c0028245:	09 c6                	or     esi,eax
c0028247:	75 17                	jne    c0028260 <__adddf3+0x4b5>
c0028249:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002824c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002824f:	85 db                	test   ebx,ebx
c0028251:	0f 85 99 01 00 00    	jne    c00283f0 <__adddf3+0x645>
c0028257:	31 ff                	xor    edi,edi
c0028259:	31 c9                	xor    ecx,ecx
c002825b:	e9 90 01 00 00       	jmp    c00283f0 <__adddf3+0x645>
c0028260:	85 db                	test   ebx,ebx
c0028262:	0f 84 88 01 00 00    	je     c00283f0 <__adddf3+0x645>
c0028268:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002826b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002826e:	85 c0                	test   eax,eax
c0028270:	79 10                	jns    c0028282 <__adddf3+0x4d7>
c0028272:	31 c9                	xor    ecx,ecx
c0028274:	f7 da                	neg    edx
c0028276:	0f 95 c1             	setne  cl
c0028279:	01 c8                	add    eax,ecx
c002827b:	f7 d8                	neg    eax
c002827d:	e9 2f 01 00 00       	jmp    c00283b1 <__adddf3+0x606>
c0028282:	31 ff                	xor    edi,edi
c0028284:	31 c9                	xor    ecx,ecx
c0028286:	89 c3                	mov    ebx,eax
c0028288:	09 d3                	or     ebx,edx
c002828a:	0f 84 60 01 00 00    	je     c00283f0 <__adddf3+0x645>
c0028290:	e9 05 01 00 00       	jmp    c002839a <__adddf3+0x5ef>
c0028295:	31 ff                	xor    edi,edi
c0028297:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002829c:	e9 4f 01 00 00       	jmp    c00283f0 <__adddf3+0x645>
c00282a1:	89 c1                	mov    ecx,eax
c00282a3:	89 d0                	mov    eax,edx
c00282a5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00282a8:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00282ab:	89 ca                	mov    edx,ecx
c00282ad:	85 c9                	test   ecx,ecx
c00282af:	79 2c                	jns    c00282dd <__adddf3+0x532>
c00282b1:	31 c9                	xor    ecx,ecx
c00282b3:	f7 d8                	neg    eax
c00282b5:	0f 95 c1             	setne  cl
c00282b8:	01 ca                	add    edx,ecx
c00282ba:	f7 da                	neg    edx
c00282bc:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00282bf:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00282c2:	eb 19                	jmp    c00282dd <__adddf3+0x532>
c00282c4:	85 c0                	test   eax,eax
c00282c6:	0f 89 e5 00 00 00    	jns    c00283b1 <__adddf3+0x606>
c00282cc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00282d1:	89 c1                	mov    ecx,eax
c00282d3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00282d6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00282d9:	89 d0                	mov    eax,edx
c00282db:	89 ca                	mov    edx,ecx
c00282dd:	85 d2                	test   edx,edx
c00282df:	74 59                	je     c002833a <__adddf3+0x58f>
c00282e1:	0f bd da             	bsr    ebx,edx
c00282e4:	83 f3 1f             	xor    ebx,0x1f
c00282e7:	88 d9                	mov    cl,bl
c00282e9:	d3 e2                	shl    edx,cl
c00282eb:	bf 20 00 00 00       	mov    edi,0x20
c00282f0:	89 f9                	mov    ecx,edi
c00282f2:	29 d9                	sub    ecx,ebx
c00282f4:	89 c6                	mov    esi,eax
c00282f6:	d3 ee                	shr    esi,cl
c00282f8:	09 d6                	or     esi,edx
c00282fa:	88 d9                	mov    cl,bl
c00282fc:	d3 e0                	shl    eax,cl
c00282fe:	89 c2                	mov    edx,eax
c0028300:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028303:	25 ff 07 00 00       	and    eax,0x7ff
c0028308:	39 d8                	cmp    eax,ebx
c002830a:	7f 22                	jg     c002832e <__adddf3+0x583>
c002830c:	29 c3                	sub    ebx,eax
c002830e:	43                   	inc    ebx
c002830f:	88 d9                	mov    cl,bl
c0028311:	d3 ea                	shr    edx,cl
c0028313:	29 df                	sub    edi,ebx
c0028315:	89 f9                	mov    ecx,edi
c0028317:	89 f0                	mov    eax,esi
c0028319:	d3 e0                	shl    eax,cl
c002831b:	09 c2                	or     edx,eax
c002831d:	89 f0                	mov    eax,esi
c002831f:	88 d9                	mov    cl,bl
c0028321:	d3 e8                	shr    eax,cl
c0028323:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028326:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002832c:	eb 6f                	jmp    c002839d <__adddf3+0x5f2>
c002832e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028331:	29 d8                	sub    eax,ebx
c0028333:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028336:	89 f0                	mov    eax,esi
c0028338:	eb 59                	jmp    c0028393 <__adddf3+0x5e8>
c002833a:	85 c0                	test   eax,eax
c002833c:	74 6a                	je     c00283a8 <__adddf3+0x5fd>
c002833e:	0f bd c8             	bsr    ecx,eax
c0028341:	83 f1 1f             	xor    ecx,0x1f
c0028344:	d3 e0                	shl    eax,cl
c0028346:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028349:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002834f:	83 c1 20             	add    ecx,0x20
c0028352:	39 cb                	cmp    ebx,ecx
c0028354:	7f 35                	jg     c002838b <__adddf3+0x5e0>
c0028356:	29 d9                	sub    ecx,ebx
c0028358:	8d 71 01             	lea    esi,[ecx+0x1]
c002835b:	83 fe 1f             	cmp    esi,0x1f
c002835e:	7e 09                	jle    c0028369 <__adddf3+0x5be>
c0028360:	83 e9 1f             	sub    ecx,0x1f
c0028363:	d3 e8                	shr    eax,cl
c0028365:	89 c3                	mov    ebx,eax
c0028367:	eb 11                	jmp    c002837a <__adddf3+0x5cf>
c0028369:	b9 20 00 00 00       	mov    ecx,0x20
c002836e:	29 f1                	sub    ecx,esi
c0028370:	89 c3                	mov    ebx,eax
c0028372:	d3 e3                	shl    ebx,cl
c0028374:	89 f1                	mov    ecx,esi
c0028376:	d3 e8                	shr    eax,cl
c0028378:	89 c2                	mov    edx,eax
c002837a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002837d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028382:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028385:	89 d0                	mov    eax,edx
c0028387:	89 da                	mov    edx,ebx
c0028389:	eb 26                	jmp    c00283b1 <__adddf3+0x606>
c002838b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002838e:	29 cf                	sub    edi,ecx
c0028390:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028393:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028398:	eb 17                	jmp    c00283b1 <__adddf3+0x606>
c002839a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002839d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00283a0:	eb 0f                	jmp    c00283b1 <__adddf3+0x606>
c00283a2:	31 d2                	xor    edx,edx
c00283a4:	31 c0                	xor    eax,eax
c00283a6:	eb 09                	jmp    c00283b1 <__adddf3+0x606>
c00283a8:	89 c2                	mov    edx,eax
c00283aa:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00283b1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00283b4:	c1 e1 14             	shl    ecx,0x14
c00283b7:	89 c3                	mov    ebx,eax
c00283b9:	c1 eb 0b             	shr    ebx,0xb
c00283bc:	09 d9                	or     ecx,ebx
c00283be:	89 d3                	mov    ebx,edx
c00283c0:	c1 eb 0b             	shr    ebx,0xb
c00283c3:	c1 e0 15             	shl    eax,0x15
c00283c6:	09 d8                	or     eax,ebx
c00283c8:	89 c7                	mov    edi,eax
c00283ca:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00283d0:	0f 95 c0             	setne  al
c00283d3:	89 c6                	mov    esi,eax
c00283d5:	09 f3                	or     ebx,esi
c00283d7:	83 e3 01             	and    ebx,0x1
c00283da:	c1 ea 0a             	shr    edx,0xa
c00283dd:	21 da                	and    edx,ebx
c00283df:	89 f8                	mov    eax,edi
c00283e1:	01 d0                	add    eax,edx
c00283e3:	83 d1 00             	adc    ecx,0x0
c00283e6:	89 c7                	mov    edi,eax
c00283e8:	eb 06                	jmp    c00283f0 <__adddf3+0x645>
c00283ea:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00283ed:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00283f0:	89 f8                	mov    eax,edi
c00283f2:	89 ca                	mov    edx,ecx
c00283f4:	83 c4 24             	add    esp,0x24
c00283f7:	5b                   	pop    ebx
c00283f8:	5e                   	pop    esi
c00283f9:	5f                   	pop    edi
c00283fa:	5d                   	pop    ebp
c00283fb:	c3                   	ret    

c00283fc <__subdf3>:
c00283fc:	55                   	push   ebp
c00283fd:	89 e5                	mov    ebp,esp
c00283ff:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0028402:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028405:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002840b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002840e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0028411:	5d                   	pop    ebp
c0028412:	e9 94 f9 ff ff       	jmp    c0027dab <__adddf3>

c0028417 <__negdf2>:
c0028417:	55                   	push   ebp
c0028418:	89 e5                	mov    ebp,esp
c002841a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002841d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028420:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028426:	5d                   	pop    ebp
c0028427:	c3                   	ret    

c0028428 <__muldf3>:
c0028428:	55                   	push   ebp
c0028429:	89 e5                	mov    ebp,esp
c002842b:	57                   	push   edi
c002842c:	56                   	push   esi
c002842d:	53                   	push   ebx
c002842e:	83 ec 24             	sub    esp,0x24
c0028431:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028434:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0028437:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002843a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002843d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028440:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0028443:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028446:	89 c8                	mov    eax,ecx
c0028448:	c1 f8 14             	sar    eax,0x14
c002844b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002844e:	89 f8                	mov    eax,edi
c0028450:	89 fb                	mov    ebx,edi
c0028452:	c1 e3 0b             	shl    ebx,0xb
c0028455:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0028458:	c1 e1 0b             	shl    ecx,0xb
c002845b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028461:	c1 e8 15             	shr    eax,0x15
c0028464:	09 c1                	or     ecx,eax
c0028466:	89 d6                	mov    esi,edx
c0028468:	89 d0                	mov    eax,edx
c002846a:	c1 f8 14             	sar    eax,0x14
c002846d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0028470:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0028473:	89 c3                	mov    ebx,eax
c0028475:	c1 e3 0b             	shl    ebx,0xb
c0028478:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002847b:	c1 e6 0b             	shl    esi,0xb
c002847e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028484:	c1 e8 15             	shr    eax,0x15
c0028487:	09 c6                	or     esi,eax
c0028489:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002848c:	25 ff 07 00 00       	and    eax,0x7ff
c0028491:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028494:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028497:	25 ff 07 00 00       	and    eax,0x7ff
c002849c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002849f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00284a2:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00284a5:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00284ac:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00284af:	40                   	inc    eax
c00284b0:	a9 fe 07 00 00       	test   eax,0x7fe
c00284b5:	0f 85 8d 00 00 00    	jne    c0028548 <__muldf3+0x120>
c00284bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00284be:	09 c8                	or     eax,ecx
c00284c0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00284c4:	74 44                	je     c002850a <__muldf3+0xe2>
c00284c6:	85 c0                	test   eax,eax
c00284c8:	0f 85 31 02 00 00    	jne    c00286ff <__muldf3+0x2d7>
c00284ce:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00284d1:	40                   	inc    eax
c00284d2:	a9 fe 07 00 00       	test   eax,0x7fe
c00284d7:	75 13                	jne    c00284ec <__muldf3+0xc4>
c00284d9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00284dc:	09 f1                	or     ecx,esi
c00284de:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00284e2:	74 22                	je     c0028506 <__muldf3+0xde>
c00284e4:	85 c9                	test   ecx,ecx
c00284e6:	0f 85 0d 02 00 00    	jne    c00286f9 <__muldf3+0x2d1>
c00284ec:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00284f0:	0f 89 09 02 00 00    	jns    c00286ff <__muldf3+0x2d7>
c00284f6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00284f9:	05 00 00 00 80       	add    eax,0x80000000
c00284fe:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028501:	e9 f9 01 00 00       	jmp    c00286ff <__muldf3+0x2d7>
c0028506:	85 c9                	test   ecx,ecx
c0028508:	eb 2e                	jmp    c0028538 <__muldf3+0x110>
c002850a:	85 c0                	test   eax,eax
c002850c:	74 20                	je     c002852e <__muldf3+0x106>
c002850e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0028511:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028514:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028517:	c1 ef 1f             	shr    edi,0x1f
c002851a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002851d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0028520:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028523:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028526:	09 f9                	or     ecx,edi
c0028528:	78 1e                	js     c0028548 <__muldf3+0x120>
c002852a:	89 c3                	mov    ebx,eax
c002852c:	eb e0                	jmp    c002850e <__muldf3+0xe6>
c002852e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028531:	f7 d0                	not    eax
c0028533:	a9 ff 07 00 00       	test   eax,0x7ff
c0028538:	75 b2                	jne    c00284ec <__muldf3+0xc4>
c002853a:	31 ff                	xor    edi,edi
c002853c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0028543:	e9 b7 01 00 00       	jmp    c00286ff <__muldf3+0x2d7>
c0028548:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002854b:	40                   	inc    eax
c002854c:	a9 fe 07 00 00       	test   eax,0x7fe
c0028551:	75 57                	jne    c00285aa <__muldf3+0x182>
c0028553:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0028556:	09 f0                	or     eax,esi
c0028558:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002855c:	74 23                	je     c0028581 <__muldf3+0x159>
c002855e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028562:	0f 89 91 01 00 00    	jns    c00286f9 <__muldf3+0x2d1>
c0028568:	85 c0                	test   eax,eax
c002856a:	0f 85 89 01 00 00    	jne    c00286f9 <__muldf3+0x2d1>
c0028570:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028573:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0028579:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002857c:	e9 7e 01 00 00       	jmp    c00286ff <__muldf3+0x2d7>
c0028581:	85 c0                	test   eax,eax
c0028583:	75 0c                	jne    c0028591 <__muldf3+0x169>
c0028585:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028589:	0f 89 6a 01 00 00    	jns    c00286f9 <__muldf3+0x2d1>
c002858f:	eb df                	jmp    c0028570 <__muldf3+0x148>
c0028591:	01 f6                	add    esi,esi
c0028593:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028596:	c1 ea 1f             	shr    edx,0x1f
c0028599:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002859c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002859f:	8d 43 ff             	lea    eax,[ebx-0x1]
c00285a2:	09 d6                	or     esi,edx
c00285a4:	78 04                	js     c00285aa <__muldf3+0x182>
c00285a6:	89 c3                	mov    ebx,eax
c00285a8:	eb e7                	jmp    c0028591 <__muldf3+0x169>
c00285aa:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00285b0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00285b6:	89 c8                	mov    eax,ecx
c00285b8:	f7 e6                	mul    esi
c00285ba:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00285bd:	89 c7                	mov    edi,eax
c00285bf:	89 c8                	mov    eax,ecx
c00285c1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00285c4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00285c7:	89 c1                	mov    ecx,eax
c00285c9:	89 f0                	mov    eax,esi
c00285cb:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00285ce:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00285d1:	89 c6                	mov    esi,eax
c00285d3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00285d6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00285d9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00285dc:	31 c0                	xor    eax,eax
c00285de:	01 f1                	add    ecx,esi
c00285e0:	0f 92 c0             	setb   al
c00285e3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00285e6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00285e9:	83 d6 00             	adc    esi,0x0
c00285ec:	01 c7                	add    edi,eax
c00285ee:	83 d6 00             	adc    esi,0x0
c00285f1:	01 ca                	add    edx,ecx
c00285f3:	0f 92 c1             	setb   cl
c00285f6:	0f b6 c9             	movzx  ecx,cl
c00285f9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00285fc:	83 d6 00             	adc    esi,0x0
c00285ff:	01 cf                	add    edi,ecx
c0028601:	83 d6 00             	adc    esi,0x0
c0028604:	31 c9                	xor    ecx,ecx
c0028606:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0028609:	0f 95 c1             	setne  cl
c002860c:	09 cf                	or     edi,ecx
c002860e:	85 f6                	test   esi,esi
c0028610:	78 0c                	js     c002861e <__muldf3+0x1f6>
c0028612:	01 f6                	add    esi,esi
c0028614:	89 f8                	mov    eax,edi
c0028616:	c1 e8 1f             	shr    eax,0x1f
c0028619:	09 c6                	or     esi,eax
c002861b:	01 ff                	add    edi,edi
c002861d:	4b                   	dec    ebx
c002861e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0028624:	0f 8f 85 00 00 00    	jg     c00286af <__muldf3+0x287>
c002862a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0028630:	85 db                	test   ebx,ebx
c0028632:	0f 8f 84 00 00 00    	jg     c00286bc <__muldf3+0x294>
c0028638:	83 fb cc             	cmp    ebx,0xffffffcc
c002863b:	7c 79                	jl     c00286b6 <__muldf3+0x28e>
c002863d:	ba 01 00 00 00       	mov    edx,0x1
c0028642:	29 da                	sub    edx,ebx
c0028644:	81 ce 00 00 00 80    	or     esi,0x80000000
c002864a:	83 fa 1f             	cmp    edx,0x1f
c002864d:	7e 30                	jle    c002867f <__muldf3+0x257>
c002864f:	83 fa 20             	cmp    edx,0x20
c0028652:	75 0b                	jne    c002865f <__muldf3+0x237>
c0028654:	31 c0                	xor    eax,eax
c0028656:	85 ff                	test   edi,edi
c0028658:	0f 95 c0             	setne  al
c002865b:	89 c7                	mov    edi,eax
c002865d:	eb 1a                	jmp    c0028679 <__muldf3+0x251>
c002865f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0028662:	89 f0                	mov    eax,esi
c0028664:	d3 e0                	shl    eax,cl
c0028666:	09 f8                	or     eax,edi
c0028668:	0f 95 c0             	setne  al
c002866b:	0f b6 c0             	movzx  eax,al
c002866e:	89 c7                	mov    edi,eax
c0028670:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028675:	29 d9                	sub    ecx,ebx
c0028677:	d3 ee                	shr    esi,cl
c0028679:	09 f7                	or     edi,esi
c002867b:	31 db                	xor    ebx,ebx
c002867d:	eb 3b                	jmp    c00286ba <__muldf3+0x292>
c002867f:	83 c3 1f             	add    ebx,0x1f
c0028682:	89 f0                	mov    eax,esi
c0028684:	88 d9                	mov    cl,bl
c0028686:	d3 e0                	shl    eax,cl
c0028688:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002868b:	89 f8                	mov    eax,edi
c002868d:	88 d1                	mov    cl,dl
c002868f:	d3 e8                	shr    eax,cl
c0028691:	89 c1                	mov    ecx,eax
c0028693:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028696:	09 c8                	or     eax,ecx
c0028698:	88 d9                	mov    cl,bl
c002869a:	d3 e7                	shl    edi,cl
c002869c:	31 db                	xor    ebx,ebx
c002869e:	85 ff                	test   edi,edi
c00286a0:	0f 95 c3             	setne  bl
c00286a3:	89 df                	mov    edi,ebx
c00286a5:	09 c7                	or     edi,eax
c00286a7:	88 d1                	mov    cl,dl
c00286a9:	d3 ee                	shr    esi,cl
c00286ab:	31 db                	xor    ebx,ebx
c00286ad:	eb 0d                	jmp    c00286bc <__muldf3+0x294>
c00286af:	bb ff 07 00 00       	mov    ebx,0x7ff
c00286b4:	eb 02                	jmp    c00286b8 <__muldf3+0x290>
c00286b6:	31 db                	xor    ebx,ebx
c00286b8:	31 ff                	xor    edi,edi
c00286ba:	31 f6                	xor    esi,esi
c00286bc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00286bf:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00286c2:	25 00 f8 ff ff       	and    eax,0xfffff800
c00286c7:	09 c3                	or     ebx,eax
c00286c9:	c1 e3 14             	shl    ebx,0x14
c00286cc:	89 f0                	mov    eax,esi
c00286ce:	c1 e8 0b             	shr    eax,0xb
c00286d1:	09 c3                	or     ebx,eax
c00286d3:	89 f8                	mov    eax,edi
c00286d5:	c1 e8 0b             	shr    eax,0xb
c00286d8:	c1 e6 15             	shl    esi,0x15
c00286db:	09 c6                	or     esi,eax
c00286dd:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c00286e3:	0f 95 c1             	setne  cl
c00286e6:	09 c8                	or     eax,ecx
c00286e8:	83 e0 01             	and    eax,0x1
c00286eb:	c1 ef 0a             	shr    edi,0xa
c00286ee:	21 c7                	and    edi,eax
c00286f0:	01 f7                	add    edi,esi
c00286f2:	83 d3 00             	adc    ebx,0x0
c00286f5:	89 da                	mov    edx,ebx
c00286f7:	eb 03                	jmp    c00286fc <__muldf3+0x2d4>
c00286f9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00286fc:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00286ff:	89 f8                	mov    eax,edi
c0028701:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028704:	83 c4 24             	add    esp,0x24
c0028707:	5b                   	pop    ebx
c0028708:	5e                   	pop    esi
c0028709:	5f                   	pop    edi
c002870a:	5d                   	pop    ebp
c002870b:	c3                   	ret    

c002870c <__divdf3>:
c002870c:	55                   	push   ebp
c002870d:	89 e5                	mov    ebp,esp
c002870f:	57                   	push   edi
c0028710:	56                   	push   esi
c0028711:	53                   	push   ebx
c0028712:	83 ec 2c             	sub    esp,0x2c
c0028715:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028718:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002871b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002871e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028721:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028724:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028727:	89 ce                	mov    esi,ecx
c0028729:	89 c8                	mov    eax,ecx
c002872b:	c1 f8 14             	sar    eax,0x14
c002872e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028731:	89 f8                	mov    eax,edi
c0028733:	89 fb                	mov    ebx,edi
c0028735:	c1 e3 0b             	shl    ebx,0xb
c0028738:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002873b:	c1 e6 0b             	shl    esi,0xb
c002873e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028744:	c1 e8 15             	shr    eax,0x15
c0028747:	09 c6                	or     esi,eax
c0028749:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c002874c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002874f:	89 c2                	mov    edx,eax
c0028751:	c1 fa 14             	sar    edx,0x14
c0028754:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028757:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002875a:	89 de                	mov    esi,ebx
c002875c:	c1 e6 0b             	shl    esi,0xb
c002875f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028762:	c1 e0 0b             	shl    eax,0xb
c0028765:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002876a:	c1 eb 15             	shr    ebx,0x15
c002876d:	09 d8                	or     eax,ebx
c002876f:	89 c2                	mov    edx,eax
c0028771:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028774:	25 ff 07 00 00       	and    eax,0x7ff
c0028779:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002877c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002877f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028785:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028788:	29 d8                	sub    eax,ebx
c002878a:	05 ff 03 00 00       	add    eax,0x3ff
c002878f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028792:	46                   	inc    esi
c0028793:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028799:	0f 85 a5 00 00 00    	jne    c0028844 <__divdf3+0x138>
c002879f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00287a2:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00287a5:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00287a9:	74 2a                	je     c00287d5 <__divdf3+0xc9>
c00287ab:	85 f6                	test   esi,esi
c00287ad:	0f 85 cc 02 00 00    	jne    c0028a7f <__divdf3+0x373>
c00287b3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00287b6:	40                   	inc    eax
c00287b7:	a9 fe 07 00 00       	test   eax,0x7fe
c00287bc:	75 26                	jne    c00287e4 <__divdf3+0xd8>
c00287be:	85 db                	test   ebx,ebx
c00287c0:	74 22                	je     c00287e4 <__divdf3+0xd8>
c00287c2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00287c5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00287c8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00287cb:	09 d0                	or     eax,edx
c00287cd:	0f 85 ac 02 00 00    	jne    c0028a7f <__divdf3+0x373>
c00287d3:	eb 63                	jmp    c0028838 <__divdf3+0x12c>
c00287d5:	85 f6                	test   esi,esi
c00287d7:	75 22                	jne    c00287fb <__divdf3+0xef>
c00287d9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00287dc:	40                   	inc    eax
c00287dd:	a9 fe 07 00 00       	test   eax,0x7fe
c00287e2:	74 36                	je     c002881a <__divdf3+0x10e>
c00287e4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00287e8:	0f 89 91 02 00 00    	jns    c0028a7f <__divdf3+0x373>
c00287ee:	89 f8                	mov    eax,edi
c00287f0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00287f6:	e9 80 02 00 00       	jmp    c0028a7b <__divdf3+0x36f>
c00287fb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00287fe:	01 f6                	add    esi,esi
c0028800:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028803:	c1 ef 1f             	shr    edi,0x1f
c0028806:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028809:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c002880c:	8d 48 ff             	lea    ecx,[eax-0x1]
c002880f:	09 f7                	or     edi,esi
c0028811:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028814:	78 2e                	js     c0028844 <__divdf3+0x138>
c0028816:	89 c8                	mov    eax,ecx
c0028818:	eb e1                	jmp    c00287fb <__divdf3+0xef>
c002881a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002881d:	09 d0                	or     eax,edx
c002881f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028823:	74 0f                	je     c0028834 <__divdf3+0x128>
c0028825:	85 c0                	test   eax,eax
c0028827:	74 bb                	je     c00287e4 <__divdf3+0xd8>
c0028829:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002882c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002882f:	e9 4b 02 00 00       	jmp    c0028a7f <__divdf3+0x373>
c0028834:	85 c0                	test   eax,eax
c0028836:	75 ac                	jne    c00287e4 <__divdf3+0xd8>
c0028838:	31 ff                	xor    edi,edi
c002883a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002883f:	e9 3b 02 00 00       	jmp    c0028a7f <__divdf3+0x373>
c0028844:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028847:	8d 4f 01             	lea    ecx,[edi+0x1]
c002884a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028850:	75 6b                	jne    c00288bd <__divdf3+0x1b1>
c0028852:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028855:	09 d6                	or     esi,edx
c0028857:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002885b:	74 28                	je     c0028885 <__divdf3+0x179>
c002885d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028860:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028863:	85 f6                	test   esi,esi
c0028865:	0f 85 14 02 00 00    	jne    c0028a7f <__divdf3+0x373>
c002886b:	31 ff                	xor    edi,edi
c002886d:	31 c9                	xor    ecx,ecx
c002886f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028872:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028875:	0f 89 04 02 00 00    	jns    c0028a7f <__divdf3+0x373>
c002887b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028880:	e9 fa 01 00 00       	jmp    c0028a7f <__divdf3+0x373>
c0028885:	85 f6                	test   esi,esi
c0028887:	75 1b                	jne    c00288a4 <__divdf3+0x198>
c0028889:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002888c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002888f:	25 00 00 00 80       	and    eax,0x80000000
c0028894:	31 c9                	xor    ecx,ecx
c0028896:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002889b:	89 cf                	mov    edi,ecx
c002889d:	89 c1                	mov    ecx,eax
c002889f:	e9 db 01 00 00       	jmp    c0028a7f <__divdf3+0x373>
c00288a4:	01 d2                	add    edx,edx
c00288a6:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00288a9:	c1 eb 1f             	shr    ebx,0x1f
c00288ac:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00288af:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00288b2:	8d 48 01             	lea    ecx,[eax+0x1]
c00288b5:	09 da                	or     edx,ebx
c00288b7:	78 04                	js     c00288bd <__divdf3+0x1b1>
c00288b9:	89 c8                	mov    eax,ecx
c00288bb:	eb e7                	jmp    c00288a4 <__divdf3+0x198>
c00288bd:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00288c0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00288c6:	81 ca 00 00 00 80    	or     edx,0x80000000
c00288cc:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c00288cf:	39 d6                	cmp    esi,edx
c00288d1:	77 0d                	ja     c00288e0 <__divdf3+0x1d4>
c00288d3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00288d6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c00288d9:	72 1b                	jb     c00288f6 <__divdf3+0x1ea>
c00288db:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c00288de:	75 16                	jne    c00288f6 <__divdf3+0x1ea>
c00288e0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00288e3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00288e6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00288e9:	83 de 00             	sbb    esi,0x0
c00288ec:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00288ef:	ba 01 00 00 00       	mov    edx,0x1
c00288f4:	eb 02                	jmp    c00288f8 <__divdf3+0x1ec>
c00288f6:	31 d2                	xor    edx,edx
c00288f8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00288ff:	31 ff                	xor    edi,edi
c0028901:	01 ff                	add    edi,edi
c0028903:	89 d1                	mov    ecx,edx
c0028905:	c1 e9 1f             	shr    ecx,0x1f
c0028908:	09 cf                	or     edi,ecx
c002890a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c002890d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028910:	89 da                	mov    edx,ebx
c0028912:	89 f3                	mov    ebx,esi
c0028914:	8d 34 36             	lea    esi,[esi+esi*1]
c0028917:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002891a:	c1 e9 1f             	shr    ecx,0x1f
c002891d:	09 ce                	or     esi,ecx
c002891f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028922:	01 c9                	add    ecx,ecx
c0028924:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028927:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002892a:	85 db                	test   ebx,ebx
c002892c:	78 29                	js     c0028957 <__divdf3+0x24b>
c002892e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028931:	72 07                	jb     c002893a <__divdf3+0x22e>
c0028933:	75 3c                	jne    c0028971 <__divdf3+0x265>
c0028935:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028938:	77 37                	ja     c0028971 <__divdf3+0x265>
c002893a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002893d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028940:	31 d2                	xor    edx,edx
c0028942:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028945:	0f 97 c2             	seta   dl
c0028948:	29 d6                	sub    esi,edx
c002894a:	89 d9                	mov    ecx,ebx
c002894c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c002894f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028952:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028955:	eb 17                	jmp    c002896e <__divdf3+0x262>
c0028957:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002895a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002895d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028960:	0f 97 c1             	seta   cl
c0028963:	0f b6 c9             	movzx  ecx,cl
c0028966:	29 ce                	sub    esi,ecx
c0028968:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c002896b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c002896e:	83 ca 01             	or     edx,0x1
c0028971:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028974:	75 8b                	jne    c0028901 <__divdf3+0x1f5>
c0028976:	c1 e7 09             	shl    edi,0x9
c0028979:	89 d1                	mov    ecx,edx
c002897b:	c1 e9 17             	shr    ecx,0x17
c002897e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028981:	09 f3                	or     ebx,esi
c0028983:	0f 95 c3             	setne  bl
c0028986:	0f b6 db             	movzx  ebx,bl
c0028989:	c1 e2 09             	shl    edx,0x9
c002898c:	09 d3                	or     ebx,edx
c002898e:	89 ca                	mov    edx,ecx
c0028990:	09 fa                	or     edx,edi
c0028992:	78 0c                	js     c00289a0 <__divdf3+0x294>
c0028994:	01 d2                	add    edx,edx
c0028996:	89 d9                	mov    ecx,ebx
c0028998:	c1 e9 1f             	shr    ecx,0x1f
c002899b:	09 ca                	or     edx,ecx
c002899d:	01 db                	add    ebx,ebx
c002899f:	48                   	dec    eax
c00289a0:	3d fe 07 00 00       	cmp    eax,0x7fe
c00289a5:	0f 8f 83 00 00 00    	jg     c0028a2e <__divdf3+0x322>
c00289ab:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00289b1:	85 c0                	test   eax,eax
c00289b3:	0f 8f 82 00 00 00    	jg     c0028a3b <__divdf3+0x32f>
c00289b9:	83 f8 cc             	cmp    eax,0xffffffcc
c00289bc:	7c 77                	jl     c0028a35 <__divdf3+0x329>
c00289be:	be 01 00 00 00       	mov    esi,0x1
c00289c3:	29 c6                	sub    esi,eax
c00289c5:	81 ca 00 00 00 80    	or     edx,0x80000000
c00289cb:	83 fe 1f             	cmp    esi,0x1f
c00289ce:	7e 2f                	jle    c00289ff <__divdf3+0x2f3>
c00289d0:	83 fe 20             	cmp    esi,0x20
c00289d3:	75 0a                	jne    c00289df <__divdf3+0x2d3>
c00289d5:	85 db                	test   ebx,ebx
c00289d7:	0f 95 c3             	setne  bl
c00289da:	0f b6 db             	movzx  ebx,bl
c00289dd:	eb 1a                	jmp    c00289f9 <__divdf3+0x2ed>
c00289df:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00289e2:	89 d7                	mov    edi,edx
c00289e4:	d3 e7                	shl    edi,cl
c00289e6:	89 f9                	mov    ecx,edi
c00289e8:	09 d9                	or     ecx,ebx
c00289ea:	0f 95 c3             	setne  bl
c00289ed:	0f b6 db             	movzx  ebx,bl
c00289f0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00289f5:	29 c1                	sub    ecx,eax
c00289f7:	d3 ea                	shr    edx,cl
c00289f9:	09 d3                	or     ebx,edx
c00289fb:	31 c0                	xor    eax,eax
c00289fd:	eb 3a                	jmp    c0028a39 <__divdf3+0x32d>
c00289ff:	83 c0 1f             	add    eax,0x1f
c0028a02:	89 d7                	mov    edi,edx
c0028a04:	88 c1                	mov    cl,al
c0028a06:	d3 e7                	shl    edi,cl
c0028a08:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028a0b:	89 df                	mov    edi,ebx
c0028a0d:	89 f1                	mov    ecx,esi
c0028a0f:	d3 ef                	shr    edi,cl
c0028a11:	89 f9                	mov    ecx,edi
c0028a13:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028a16:	09 cf                	or     edi,ecx
c0028a18:	88 c1                	mov    cl,al
c0028a1a:	d3 e3                	shl    ebx,cl
c0028a1c:	85 db                	test   ebx,ebx
c0028a1e:	0f 95 c3             	setne  bl
c0028a21:	0f b6 db             	movzx  ebx,bl
c0028a24:	09 fb                	or     ebx,edi
c0028a26:	89 f1                	mov    ecx,esi
c0028a28:	d3 ea                	shr    edx,cl
c0028a2a:	31 c0                	xor    eax,eax
c0028a2c:	eb 0d                	jmp    c0028a3b <__divdf3+0x32f>
c0028a2e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028a33:	eb 02                	jmp    c0028a37 <__divdf3+0x32b>
c0028a35:	31 c0                	xor    eax,eax
c0028a37:	31 db                	xor    ebx,ebx
c0028a39:	31 d2                	xor    edx,edx
c0028a3b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028a3e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028a41:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028a47:	09 c8                	or     eax,ecx
c0028a49:	c1 e0 14             	shl    eax,0x14
c0028a4c:	89 d1                	mov    ecx,edx
c0028a4e:	c1 e9 0b             	shr    ecx,0xb
c0028a51:	09 c8                	or     eax,ecx
c0028a53:	89 c6                	mov    esi,eax
c0028a55:	89 d9                	mov    ecx,ebx
c0028a57:	c1 e9 0b             	shr    ecx,0xb
c0028a5a:	c1 e2 15             	shl    edx,0x15
c0028a5d:	09 ca                	or     edx,ecx
c0028a5f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028a65:	0f 95 c0             	setne  al
c0028a68:	09 c1                	or     ecx,eax
c0028a6a:	83 e1 01             	and    ecx,0x1
c0028a6d:	c1 eb 0a             	shr    ebx,0xa
c0028a70:	21 cb                	and    ebx,ecx
c0028a72:	01 d3                	add    ebx,edx
c0028a74:	89 d8                	mov    eax,ebx
c0028a76:	83 d6 00             	adc    esi,0x0
c0028a79:	89 f2                	mov    edx,esi
c0028a7b:	89 c7                	mov    edi,eax
c0028a7d:	89 d1                	mov    ecx,edx
c0028a7f:	89 f8                	mov    eax,edi
c0028a81:	89 ca                	mov    edx,ecx
c0028a83:	83 c4 2c             	add    esp,0x2c
c0028a86:	5b                   	pop    ebx
c0028a87:	5e                   	pop    esi
c0028a88:	5f                   	pop    edi
c0028a89:	5d                   	pop    ebp
c0028a8a:	c3                   	ret    

c0028a8b <__floatsidf>:
c0028a8b:	55                   	push   ebp
c0028a8c:	89 e5                	mov    ebp,esp
c0028a8e:	56                   	push   esi
c0028a8f:	53                   	push   ebx
c0028a90:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028a93:	85 db                	test   ebx,ebx
c0028a95:	7e 15                	jle    c0028aac <__floatsidf+0x21>
c0028a97:	0f bd cb             	bsr    ecx,ebx
c0028a9a:	83 f1 1f             	xor    ecx,0x1f
c0028a9d:	d3 e3                	shl    ebx,cl
c0028a9f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028aa5:	b8 1e 04 00 00       	mov    eax,0x41e
c0028aaa:	eb 21                	jmp    c0028acd <__floatsidf+0x42>
c0028aac:	b8 00 00 00 00       	mov    eax,0x0
c0028ab1:	ba 00 00 00 00       	mov    edx,0x0
c0028ab6:	74 2a                	je     c0028ae2 <__floatsidf+0x57>
c0028ab8:	f7 db                	neg    ebx
c0028aba:	0f bd cb             	bsr    ecx,ebx
c0028abd:	83 f1 1f             	xor    ecx,0x1f
c0028ac0:	d3 e3                	shl    ebx,cl
c0028ac2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028ac8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028acd:	29 c8                	sub    eax,ecx
c0028acf:	c1 e0 14             	shl    eax,0x14
c0028ad2:	89 c1                	mov    ecx,eax
c0028ad4:	89 de                	mov    esi,ebx
c0028ad6:	c1 ee 0b             	shr    esi,0xb
c0028ad9:	09 f1                	or     ecx,esi
c0028adb:	89 ca                	mov    edx,ecx
c0028add:	c1 e3 15             	shl    ebx,0x15
c0028ae0:	89 d8                	mov    eax,ebx
c0028ae2:	5b                   	pop    ebx
c0028ae3:	5e                   	pop    esi
c0028ae4:	5d                   	pop    ebp
c0028ae5:	c3                   	ret    

c0028ae6 <__floatunsidf>:
c0028ae6:	55                   	push   ebp
c0028ae7:	89 e5                	mov    ebp,esp
c0028ae9:	56                   	push   esi
c0028aea:	53                   	push   ebx
c0028aeb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028aee:	85 db                	test   ebx,ebx
c0028af0:	74 2a                	je     c0028b1c <__floatunsidf+0x36>
c0028af2:	0f bd cb             	bsr    ecx,ebx
c0028af5:	83 f1 1f             	xor    ecx,0x1f
c0028af8:	d3 e3                	shl    ebx,cl
c0028afa:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028b00:	b8 1e 04 00 00       	mov    eax,0x41e
c0028b05:	29 c8                	sub    eax,ecx
c0028b07:	c1 e0 14             	shl    eax,0x14
c0028b0a:	89 c1                	mov    ecx,eax
c0028b0c:	89 de                	mov    esi,ebx
c0028b0e:	c1 ee 0b             	shr    esi,0xb
c0028b11:	09 f1                	or     ecx,esi
c0028b13:	89 ca                	mov    edx,ecx
c0028b15:	c1 e3 15             	shl    ebx,0x15
c0028b18:	89 d8                	mov    eax,ebx
c0028b1a:	eb 04                	jmp    c0028b20 <__floatunsidf+0x3a>
c0028b1c:	31 c0                	xor    eax,eax
c0028b1e:	31 d2                	xor    edx,edx
c0028b20:	5b                   	pop    ebx
c0028b21:	5e                   	pop    esi
c0028b22:	5d                   	pop    ebp
c0028b23:	c3                   	ret    

c0028b24 <__fixdfsi>:
c0028b24:	55                   	push   ebp
c0028b25:	89 e5                	mov    ebp,esp
c0028b27:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028b2a:	89 d1                	mov    ecx,edx
c0028b2c:	c1 e1 0b             	shl    ecx,0xb
c0028b2f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028b35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028b38:	c1 e8 15             	shr    eax,0x15
c0028b3b:	09 c1                	or     ecx,eax
c0028b3d:	c1 fa 14             	sar    edx,0x14
c0028b40:	78 1f                	js     c0028b61 <__fixdfsi+0x3d>
c0028b42:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028b48:	31 c0                	xor    eax,eax
c0028b4a:	83 fa 1e             	cmp    edx,0x1e
c0028b4d:	77 40                	ja     c0028b8f <__fixdfsi+0x6b>
c0028b4f:	89 c8                	mov    eax,ecx
c0028b51:	0d 00 00 00 80       	or     eax,0x80000000
c0028b56:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b5b:	29 d1                	sub    ecx,edx
c0028b5d:	d3 e8                	shr    eax,cl
c0028b5f:	eb 2e                	jmp    c0028b8f <__fixdfsi+0x6b>
c0028b61:	31 c0                	xor    eax,eax
c0028b63:	81 c2 01 04 00 00    	add    edx,0x401
c0028b69:	78 24                	js     c0028b8f <__fixdfsi+0x6b>
c0028b6b:	83 fa 1e             	cmp    edx,0x1e
c0028b6e:	7e 09                	jle    c0028b79 <__fixdfsi+0x55>
c0028b70:	83 fa 1f             	cmp    edx,0x1f
c0028b73:	75 18                	jne    c0028b8d <__fixdfsi+0x69>
c0028b75:	85 c9                	test   ecx,ecx
c0028b77:	75 14                	jne    c0028b8d <__fixdfsi+0x69>
c0028b79:	89 c8                	mov    eax,ecx
c0028b7b:	0d 00 00 00 80       	or     eax,0x80000000
c0028b80:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b85:	29 d1                	sub    ecx,edx
c0028b87:	d3 e8                	shr    eax,cl
c0028b89:	f7 d8                	neg    eax
c0028b8b:	eb 02                	jmp    c0028b8f <__fixdfsi+0x6b>
c0028b8d:	31 c0                	xor    eax,eax
c0028b8f:	5d                   	pop    ebp
c0028b90:	c3                   	ret    

c0028b91 <__fixunsdfsi>:
c0028b91:	55                   	push   ebp
c0028b92:	89 e5                	mov    ebp,esp
c0028b94:	53                   	push   ebx
c0028b95:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028b98:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028b9b:	89 d3                	mov    ebx,edx
c0028b9d:	c1 fb 14             	sar    ebx,0x14
c0028ba0:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028ba6:	31 c0                	xor    eax,eax
c0028ba8:	83 fb 1f             	cmp    ebx,0x1f
c0028bab:	77 1d                	ja     c0028bca <__fixunsdfsi+0x39>
c0028bad:	89 d0                	mov    eax,edx
c0028baf:	c1 e0 0b             	shl    eax,0xb
c0028bb2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028bb7:	c1 e9 15             	shr    ecx,0x15
c0028bba:	09 c8                	or     eax,ecx
c0028bbc:	0d 00 00 00 80       	or     eax,0x80000000
c0028bc1:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028bc6:	29 d9                	sub    ecx,ebx
c0028bc8:	d3 e8                	shr    eax,cl
c0028bca:	5b                   	pop    ebx
c0028bcb:	5d                   	pop    ebp
c0028bcc:	c3                   	ret    

c0028bcd <__cmpdf2>:
c0028bcd:	55                   	push   ebp
c0028bce:	89 e5                	mov    ebp,esp
c0028bd0:	57                   	push   edi
c0028bd1:	56                   	push   esi
c0028bd2:	53                   	push   ebx
c0028bd3:	83 ec 0c             	sub    esp,0xc
c0028bd6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028bd9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028bdc:	89 ca                	mov    edx,ecx
c0028bde:	c1 ea 14             	shr    edx,0x14
c0028be1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028be7:	89 cb                	mov    ebx,ecx
c0028be9:	c1 fb 1f             	sar    ebx,0x1f
c0028bec:	31 da                	xor    edx,ebx
c0028bee:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028bf1:	89 df                	mov    edi,ebx
c0028bf3:	c1 e7 0b             	shl    edi,0xb
c0028bf6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028bf9:	c1 e1 0b             	shl    ecx,0xb
c0028bfc:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028c02:	c1 eb 15             	shr    ebx,0x15
c0028c05:	09 d9                	or     ecx,ebx
c0028c07:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028c0a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028c0d:	89 ce                	mov    esi,ecx
c0028c0f:	c1 ee 14             	shr    esi,0x14
c0028c12:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028c18:	89 cb                	mov    ebx,ecx
c0028c1a:	c1 fb 1f             	sar    ebx,0x1f
c0028c1d:	31 de                	xor    esi,ebx
c0028c1f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028c22:	89 df                	mov    edi,ebx
c0028c24:	c1 e7 0b             	shl    edi,0xb
c0028c27:	c1 e1 0b             	shl    ecx,0xb
c0028c2a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028c30:	c1 eb 15             	shr    ebx,0x15
c0028c33:	09 d9                	or     ecx,ebx
c0028c35:	89 d3                	mov    ebx,edx
c0028c37:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028c3d:	43                   	inc    ebx
c0028c3e:	83 fb 01             	cmp    ebx,0x1
c0028c41:	77 08                	ja     c0028c4b <__cmpdf2+0x7e>
c0028c43:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028c46:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028c49:	75 68                	jne    c0028cb3 <__cmpdf2+0xe6>
c0028c4b:	89 f3                	mov    ebx,esi
c0028c4d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028c53:	43                   	inc    ebx
c0028c54:	83 fb 01             	cmp    ebx,0x1
c0028c57:	77 06                	ja     c0028c5f <__cmpdf2+0x92>
c0028c59:	89 fb                	mov    ebx,edi
c0028c5b:	09 cb                	or     ebx,ecx
c0028c5d:	75 54                	jne    c0028cb3 <__cmpdf2+0xe6>
c0028c5f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028c62:	09 f8                	or     eax,edi
c0028c64:	09 c8                	or     eax,ecx
c0028c66:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028c69:	75 12                	jne    c0028c7d <__cmpdf2+0xb0>
c0028c6b:	8d 42 01             	lea    eax,[edx+0x1]
c0028c6e:	83 f8 01             	cmp    eax,0x1
c0028c71:	77 0a                	ja     c0028c7d <__cmpdf2+0xb0>
c0028c73:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028c76:	31 c0                	xor    eax,eax
c0028c78:	83 fb 01             	cmp    ebx,0x1
c0028c7b:	76 36                	jbe    c0028cb3 <__cmpdf2+0xe6>
c0028c7d:	b8 01 00 00 00       	mov    eax,0x1
c0028c82:	39 f2                	cmp    edx,esi
c0028c84:	7f 2d                	jg     c0028cb3 <__cmpdf2+0xe6>
c0028c86:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028c8b:	7c 26                	jl     c0028cb3 <__cmpdf2+0xe6>
c0028c8d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028c90:	77 07                	ja     c0028c99 <__cmpdf2+0xcc>
c0028c92:	72 16                	jb     c0028caa <__cmpdf2+0xdd>
c0028c94:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028c97:	76 0a                	jbe    c0028ca3 <__cmpdf2+0xd6>
c0028c99:	89 d0                	mov    eax,edx
c0028c9b:	c1 f8 1f             	sar    eax,0x1f
c0028c9e:	83 c8 01             	or     eax,0x1
c0028ca1:	eb 10                	jmp    c0028cb3 <__cmpdf2+0xe6>
c0028ca3:	b8 00 00 00 00       	mov    eax,0x0
c0028ca8:	73 09                	jae    c0028cb3 <__cmpdf2+0xe6>
c0028caa:	89 d0                	mov    eax,edx
c0028cac:	c1 f8 1f             	sar    eax,0x1f
c0028caf:	83 e0 02             	and    eax,0x2
c0028cb2:	48                   	dec    eax
c0028cb3:	83 c4 0c             	add    esp,0xc
c0028cb6:	5b                   	pop    ebx
c0028cb7:	5e                   	pop    esi
c0028cb8:	5f                   	pop    edi
c0028cb9:	5d                   	pop    ebp
c0028cba:	c3                   	ret    

c0028cbb <__eqdf2>:
c0028cbb:	55                   	push   ebp
c0028cbc:	89 e5                	mov    ebp,esp
c0028cbe:	50                   	push   eax
c0028cbf:	6a 01                	push   0x1
c0028cc1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028cc4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028cc7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028cca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028ccd:	e8 fb fe ff ff       	call   c0028bcd <__cmpdf2>
c0028cd2:	83 c4 18             	add    esp,0x18
c0028cd5:	c9                   	leave  
c0028cd6:	c3                   	ret    

c0028cd7 <__nedf2>:
c0028cd7:	eb e2                	jmp    c0028cbb <__eqdf2>

c0028cd9 <__gtdf2>:
c0028cd9:	55                   	push   ebp
c0028cda:	89 e5                	mov    ebp,esp
c0028cdc:	50                   	push   eax
c0028cdd:	6a ff                	push   0xffffffff
c0028cdf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028ce2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028ce5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028ce8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028ceb:	e8 dd fe ff ff       	call   c0028bcd <__cmpdf2>
c0028cf0:	83 c4 18             	add    esp,0x18
c0028cf3:	c9                   	leave  
c0028cf4:	c3                   	ret    

c0028cf5 <__gedf2>:
c0028cf5:	eb e2                	jmp    c0028cd9 <__gtdf2>

c0028cf7 <__ltdf2>:
c0028cf7:	eb c2                	jmp    c0028cbb <__eqdf2>

c0028cf9 <__ledf2>:
c0028cf9:	eb c0                	jmp    c0028cbb <__eqdf2>

c0028cfb <__truncdfsf2>:
c0028cfb:	55                   	push   ebp
c0028cfc:	89 e5                	mov    ebp,esp
c0028cfe:	57                   	push   edi
c0028cff:	56                   	push   esi
c0028d00:	53                   	push   ebx
c0028d01:	83 ec 0c             	sub    esp,0xc
c0028d04:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028d07:	89 d1                	mov    ecx,edx
c0028d09:	c1 f9 14             	sar    ecx,0x14
c0028d0c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028d0f:	89 df                	mov    edi,ebx
c0028d11:	c1 e7 0b             	shl    edi,0xb
c0028d14:	89 d0                	mov    eax,edx
c0028d16:	c1 e0 0b             	shl    eax,0xb
c0028d19:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028d1e:	c1 eb 15             	shr    ebx,0x15
c0028d21:	09 d8                	or     eax,ebx
c0028d23:	89 cb                	mov    ebx,ecx
c0028d25:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028d2b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028d31:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028d37:	0f 86 9e 00 00 00    	jbe    c0028ddb <__truncdfsf2+0xe0>
c0028d3d:	85 db                	test   ebx,ebx
c0028d3f:	75 0a                	jne    c0028d4b <__truncdfsf2+0x50>
c0028d41:	c1 fa 17             	sar    edx,0x17
c0028d44:	30 d2                	xor    dl,dl
c0028d46:	e9 84 00 00 00       	jmp    c0028dcf <__truncdfsf2+0xd4>
c0028d4b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028d51:	83 fe 83             	cmp    esi,0xffffff83
c0028d54:	7d 4b                	jge    c0028da1 <__truncdfsf2+0xa6>
c0028d56:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028d5b:	29 f1                	sub    ecx,esi
c0028d5d:	83 f9 1f             	cmp    ecx,0x1f
c0028d60:	7f 6b                	jg     c0028dcd <__truncdfsf2+0xd2>
c0028d62:	0d 00 00 00 80       	or     eax,0x80000000
c0028d67:	89 c3                	mov    ebx,eax
c0028d69:	d3 eb                	shr    ebx,cl
c0028d6b:	be 01 00 00 00       	mov    esi,0x1
c0028d70:	d3 e6                	shl    esi,cl
c0028d72:	4e                   	dec    esi
c0028d73:	21 f0                	and    eax,esi
c0028d75:	09 f8                	or     eax,edi
c0028d77:	0f 95 c0             	setne  al
c0028d7a:	0f b6 c0             	movzx  eax,al
c0028d7d:	09 c3                	or     ebx,eax
c0028d7f:	89 d9                	mov    ecx,ebx
c0028d81:	c1 e9 08             	shr    ecx,0x8
c0028d84:	f6 c3 7f             	test   bl,0x7f
c0028d87:	0f 95 c0             	setne  al
c0028d8a:	09 c8                	or     eax,ecx
c0028d8c:	83 e0 01             	and    eax,0x1
c0028d8f:	c1 eb 07             	shr    ebx,0x7
c0028d92:	21 c3                	and    ebx,eax
c0028d94:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028d9a:	09 d1                	or     ecx,edx
c0028d9c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028d9f:	eb 76                	jmp    c0028e17 <__truncdfsf2+0x11c>
c0028da1:	83 c6 80             	add    esi,0xffffff80
c0028da4:	7e 1d                	jle    c0028dc3 <__truncdfsf2+0xc8>
c0028da6:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028dac:	75 0b                	jne    c0028db9 <__truncdfsf2+0xbe>
c0028dae:	09 f8                	or     eax,edi
c0028db0:	74 09                	je     c0028dbb <__truncdfsf2+0xc0>
c0028db2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028db7:	eb 02                	jmp    c0028dbb <__truncdfsf2+0xc0>
c0028db9:	31 c0                	xor    eax,eax
c0028dbb:	c1 fa 17             	sar    edx,0x17
c0028dbe:	80 ca ff             	or     dl,0xff
c0028dc1:	eb 0e                	jmp    c0028dd1 <__truncdfsf2+0xd6>
c0028dc3:	c1 fa 1f             	sar    edx,0x1f
c0028dc6:	c1 e2 08             	shl    edx,0x8
c0028dc9:	09 ca                	or     edx,ecx
c0028dcb:	eb 04                	jmp    c0028dd1 <__truncdfsf2+0xd6>
c0028dcd:	31 d2                	xor    edx,edx
c0028dcf:	31 c0                	xor    eax,eax
c0028dd1:	c1 e2 17             	shl    edx,0x17
c0028dd4:	c1 e8 08             	shr    eax,0x8
c0028dd7:	09 d0                	or     eax,edx
c0028dd9:	eb 3c                	jmp    c0028e17 <__truncdfsf2+0x11c>
c0028ddb:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028de1:	89 ca                	mov    edx,ecx
c0028de3:	c1 fa 0b             	sar    edx,0xb
c0028de6:	c1 e2 08             	shl    edx,0x8
c0028de9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028dec:	31 db                	xor    ebx,ebx
c0028dee:	85 ff                	test   edi,edi
c0028df0:	0f 95 c3             	setne  bl
c0028df3:	09 d8                	or     eax,ebx
c0028df5:	89 c3                	mov    ebx,eax
c0028df7:	c1 eb 08             	shr    ebx,0x8
c0028dfa:	a8 7f                	test   al,0x7f
c0028dfc:	0f 95 c2             	setne  dl
c0028dff:	89 d6                	mov    esi,edx
c0028e01:	09 de                	or     esi,ebx
c0028e03:	83 e6 01             	and    esi,0x1
c0028e06:	c1 e8 07             	shr    eax,0x7
c0028e09:	21 f0                	and    eax,esi
c0028e0b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028e0e:	09 ca                	or     edx,ecx
c0028e10:	c1 e2 17             	shl    edx,0x17
c0028e13:	09 da                	or     edx,ebx
c0028e15:	01 d0                	add    eax,edx
c0028e17:	83 c4 0c             	add    esp,0xc
c0028e1a:	5b                   	pop    ebx
c0028e1b:	5e                   	pop    esi
c0028e1c:	5f                   	pop    edi
c0028e1d:	5d                   	pop    ebp
c0028e1e:	c3                   	ret    

c0028e1f <__extendsfdf2>:
c0028e1f:	55                   	push   ebp
c0028e20:	89 e5                	mov    ebp,esp
c0028e22:	57                   	push   edi
c0028e23:	56                   	push   esi
c0028e24:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028e27:	89 d1                	mov    ecx,edx
c0028e29:	c1 f9 17             	sar    ecx,0x17
c0028e2c:	c1 e2 08             	shl    edx,0x8
c0028e2f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028e35:	89 c8                	mov    eax,ecx
c0028e37:	80 e4 f8             	and    ah,0xf8
c0028e3a:	8d 71 01             	lea    esi,[ecx+0x1]
c0028e3d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028e43:	75 27                	jne    c0028e6c <__extendsfdf2+0x4d>
c0028e45:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028e4b:	75 18                	jne    c0028e65 <__extendsfdf2+0x46>
c0028e4d:	85 d2                	test   edx,edx
c0028e4f:	74 20                	je     c0028e71 <__extendsfdf2+0x52>
c0028e51:	41                   	inc    ecx
c0028e52:	01 d2                	add    edx,edx
c0028e54:	79 fb                	jns    c0028e51 <__extendsfdf2+0x32>
c0028e56:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028e5c:	29 c8                	sub    eax,ecx
c0028e5e:	05 81 03 00 00       	add    eax,0x381
c0028e63:	eb 0c                	jmp    c0028e71 <__extendsfdf2+0x52>
c0028e65:	05 00 07 00 00       	add    eax,0x700
c0028e6a:	eb 05                	jmp    c0028e71 <__extendsfdf2+0x52>
c0028e6c:	05 80 03 00 00       	add    eax,0x380
c0028e71:	c1 e0 14             	shl    eax,0x14
c0028e74:	89 c1                	mov    ecx,eax
c0028e76:	89 d0                	mov    eax,edx
c0028e78:	c1 e8 0b             	shr    eax,0xb
c0028e7b:	09 c1                	or     ecx,eax
c0028e7d:	c1 e2 15             	shl    edx,0x15
c0028e80:	89 d0                	mov    eax,edx
c0028e82:	89 ca                	mov    edx,ecx
c0028e84:	5e                   	pop    esi
c0028e85:	5f                   	pop    edi
c0028e86:	5d                   	pop    ebp
c0028e87:	c3                   	ret    
c0028e88:	66 90                	xchg   ax,ax
c0028e8a:	66 90                	xchg   ax,ax
c0028e8c:	66 90                	xchg   ax,ax
c0028e8e:	66 90                	xchg   ax,ax

c0028e90 <fabs>:
c0028e90:	83 ec 0c             	sub    esp,0xc
c0028e93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e97:	89 04 24             	mov    DWORD PTR [esp],eax
c0028e9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028e9e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028ea3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028ea7:	dd 04 24             	fld    QWORD PTR [esp]
c0028eaa:	83 c4 0c             	add    esp,0xc
c0028ead:	c3                   	ret    
c0028eae:	66 90                	xchg   ax,ax

c0028eb0 <lrint>:
c0028eb0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028eb4:	83 ec 04             	sub    esp,0x4
c0028eb7:	db 1c 24             	fistp  DWORD PTR [esp]
c0028eba:	58                   	pop    eax
c0028ebb:	c3                   	ret    

c0028ebc <lrintf>:
c0028ebc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028ec0:	83 ec 04             	sub    esp,0x4
c0028ec3:	db 1c 24             	fistp  DWORD PTR [esp]
c0028ec6:	58                   	pop    eax
c0028ec7:	c3                   	ret    

Disassembly of section .init:

c0028ec8 <_init>:
c0028ec8:	55                   	push   ebp
c0028ec9:	89 e5                	mov    ebp,esp
c0028ecb:	e8 48 72 fd ff       	call   c0000118 <frame_dummy>
c0028ed0:	e8 5b e0 ff ff       	call   c0026f30 <__do_global_ctors_aux>
c0028ed5:	5d                   	pop    ebp
c0028ed6:	c3                   	ret    

Disassembly of section .fini:

c0028ed7 <_fini>:
c0028ed7:	55                   	push   ebp
c0028ed8:	89 e5                	mov    ebp,esp
c0028eda:	e8 c9 71 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0028edf:	5d                   	pop    ebp
c0028ee0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028ee2 <Computer::~Computer()>:
c0028ee2:	83 ec 0c             	sub    esp,0xc
c0028ee5:	ba 08 ab 02 c0       	mov    edx,0xc002ab08
c0028eea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eee:	89 10                	mov    DWORD PTR [eax],edx
c0028ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef4:	83 ec 0c             	sub    esp,0xc
c0028ef7:	50                   	push   eax
c0028ef8:	e8 01 ad fe ff       	call   c0013bfe <Device::~Device()>
c0028efd:	83 c4 10             	add    esp,0x10
c0028f00:	90                   	nop
c0028f01:	83 c4 0c             	add    esp,0xc
c0028f04:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028f06 <Computer::~Computer()>:
c0028f06:	83 ec 0c             	sub    esp,0xc
c0028f09:	83 ec 0c             	sub    esp,0xc
c0028f0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f10:	e8 cd ff ff ff       	call   c0028ee2 <Computer::~Computer()>
c0028f15:	83 c4 10             	add    esp,0x10
c0028f18:	83 ec 08             	sub    esp,0x8
c0028f1b:	68 ec 01 00 00       	push   0x1ec
c0028f20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f24:	e8 ee 98 fe ff       	call   c0012817 <operator delete(void*, unsigned long)>
c0028f29:	83 c4 10             	add    esp,0x10
c0028f2c:	83 c4 0c             	add    esp,0xc
c0028f2f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028f30 <idleCommon()>:
c0028f30:	83 ec 0c             	sub    esp,0xc
c0028f33:	fa                   	cli    
c0028f34:	ff 05 48 25 03 c0    	inc    DWORD PTR ds:0xc0032548
c0028f3a:	e8 a1 51 ff ff       	call   c001e0e0 <schedule()>
c0028f3f:	a1 48 25 03 c0       	mov    eax,ds:0xc0032548
c0028f44:	48                   	dec    eax
c0028f45:	a3 48 25 03 c0       	mov    ds:0xc0032548,eax
c0028f4a:	75 01                	jne    c0028f4d <idleCommon()+0x1d>
c0028f4c:	fb                   	sti    
c0028f4d:	83 c4 0c             	add    esp,0xc
c0028f50:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028f52 <LinkedList<UnixFile>::~LinkedList()>:
c0028f52:	90                   	nop
c0028f53:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028f54 <LinkedList<UnixFile>::LinkedList()>:
c0028f54:	83 ec 0c             	sub    esp,0xc
c0028f57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f5b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028f61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f65:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f70:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f7b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028f81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f85:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f90:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f97:	83 ec 0c             	sub    esp,0xc
c0028f9a:	68 7a ad 02 c0       	push   0xc002ad7a
c0028f9f:	e8 53 99 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c0028fa4:	83 c4 10             	add    esp,0x10
c0028fa7:	90                   	nop
c0028fa8:	83 c4 0c             	add    esp,0xc
c0028fab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028fac <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028fac:	83 ec 0c             	sub    esp,0xc
c0028faf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028fb4:	75 10                	jne    c0028fc6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028fb6:	83 ec 0c             	sub    esp,0xc
c0028fb9:	68 94 ad 02 c0       	push   0xc002ad94
c0028fbe:	e8 6a 13 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c0028fc3:	83 c4 10             	add    esp,0x10
c0028fc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fca:	8b 00                	mov    eax,DWORD PTR [eax]
c0028fcc:	85 c0                	test   eax,eax
c0028fce:	74 34                	je     c0029004 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028fd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fd7:	85 c0                	test   eax,eax
c0028fd9:	74 29                	je     c0029004 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028fdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fdf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fe2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fe6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028fe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028ff1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028ff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ffb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029002:	eb 65                	jmp    c0029069 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029008:	8b 00                	mov    eax,DWORD PTR [eax]
c002900a:	85 c0                	test   eax,eax
c002900c:	75 4b                	jne    c0029059 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002900e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029012:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029015:	85 c0                	test   eax,eax
c0029017:	75 40                	jne    c0029059 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0029019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002901d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029021:	89 10                	mov    DWORD PTR [eax],edx
c0029023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029027:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002902b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002902e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029032:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029035:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002903c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029040:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029043:	85 c0                	test   eax,eax
c0029045:	74 22                	je     c0029069 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029047:	83 ec 0c             	sub    esp,0xc
c002904a:	68 b6 ad 02 c0       	push   0xc002adb6
c002904f:	e8 d9 12 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c0029054:	83 c4 10             	add    esp,0x10
c0029057:	eb 10                	jmp    c0029069 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029059:	83 ec 0c             	sub    esp,0xc
c002905c:	68 c0 ad 02 c0       	push   0xc002adc0
c0029061:	e8 c7 12 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c0029066:	83 c4 10             	add    esp,0x10
c0029069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002906d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029070:	8d 50 01             	lea    edx,[eax+0x1]
c0029073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029077:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002907a:	90                   	nop
c002907b:	83 c4 0c             	add    esp,0xc
c002907e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0029080 <LinkedList<UnixFile>::getFirstElement()>:
c0029080:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029084:	8b 00                	mov    eax,DWORD PTR [eax]
c0029086:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0029088 <LinkedList<UnixFile>::removeFirst()>:
c0029088:	83 ec 0c             	sub    esp,0xc
c002908b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002908f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029091:	85 c0                	test   eax,eax
c0029093:	75 12                	jne    c00290a7 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0029095:	83 ec 0c             	sub    esp,0xc
c0029098:	68 cc ad 02 c0       	push   0xc002adcc
c002909d:	e8 8b 12 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c00290a2:	83 c4 10             	add    esp,0x10
c00290a5:	eb 7e                	jmp    c0029125 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00290a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00290ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290b1:	85 c0                	test   eax,eax
c00290b3:	74 10                	je     c00290c5 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00290b5:	83 ec 0c             	sub    esp,0xc
c00290b8:	68 17 ae 02 c0       	push   0xc002ae17
c00290bd:	e8 6b 12 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c00290c2:	83 c4 10             	add    esp,0x10
c00290c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00290cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290ce:	85 c0                	test   eax,eax
c00290d0:	75 33                	jne    c0029105 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00290d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00290dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00290e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290ee:	83 f8 01             	cmp    eax,0x1
c00290f1:	74 21                	je     c0029114 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00290f3:	83 ec 0c             	sub    esp,0xc
c00290f6:	68 f0 ad 02 c0       	push   0xc002adf0
c00290fb:	e8 2d 12 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c0029100:	83 c4 10             	add    esp,0x10
c0029103:	eb 0f                	jmp    c0029114 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029109:	8b 00                	mov    eax,DWORD PTR [eax]
c002910b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002910e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029112:	89 10                	mov    DWORD PTR [eax],edx
c0029114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029118:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002911b:	8d 50 ff             	lea    edx,[eax-0x1]
c002911e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029122:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029125:	83 c4 0c             	add    esp,0xc
c0029128:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002912a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002912a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002912e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029131:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0029132 <DriverlessDevice::~DriverlessDevice()>:
c0029132:	ba bc b5 02 c0       	mov    edx,0xc002b5bc
c0029137:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002913b:	89 10                	mov    DWORD PTR [eax],edx
c002913d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029141:	50                   	push   eax
c0029142:	e8 b7 aa fe ff       	call   c0013bfe <Device::~Device()>
c0029147:	83 c4 04             	add    esp,0x4
c002914a:	90                   	nop
c002914b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002914c <DriverlessDevice::~DriverlessDevice()>:
c002914c:	83 ec 0c             	sub    esp,0xc
c002914f:	83 ec 0c             	sub    esp,0xc
c0029152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029156:	e8 d7 ff ff ff       	call   c0029132 <DriverlessDevice::~DriverlessDevice()>
c002915b:	83 c4 10             	add    esp,0x10
c002915e:	83 ec 08             	sub    esp,0x8
c0029161:	68 58 01 00 00       	push   0x158
c0029166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002916a:	e8 a8 96 fe ff       	call   c0012817 <operator delete(void*, unsigned long)>
c002916f:	83 c4 10             	add    esp,0x10
c0029172:	83 c4 0c             	add    esp,0xc
c0029175:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0029176 <LinkedList<Device>::addElement(Device*)>:
c0029176:	83 ec 0c             	sub    esp,0xc
c0029179:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002917e:	75 10                	jne    c0029190 <LinkedList<Device>::addElement(Device*)+0x1a>
c0029180:	83 ec 0c             	sub    esp,0xc
c0029183:	68 94 ad 02 c0       	push   0xc002ad94
c0029188:	e8 a0 11 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c002918d:	83 c4 10             	add    esp,0x10
c0029190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029194:	8b 00                	mov    eax,DWORD PTR [eax]
c0029196:	85 c0                	test   eax,eax
c0029198:	74 3a                	je     c00291d4 <LinkedList<Device>::addElement(Device*)+0x5e>
c002919a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002919e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291a1:	85 c0                	test   eax,eax
c00291a3:	74 2f                	je     c00291d4 <LinkedList<Device>::addElement(Device*)+0x5e>
c00291a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00291b0:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00291b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00291be:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00291c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291c8:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00291d2:	eb 68                	jmp    c002923c <LinkedList<Device>::addElement(Device*)+0xc6>
c00291d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00291da:	85 c0                	test   eax,eax
c00291dc:	75 4e                	jne    c002922c <LinkedList<Device>::addElement(Device*)+0xb6>
c00291de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291e5:	85 c0                	test   eax,eax
c00291e7:	75 43                	jne    c002922c <LinkedList<Device>::addElement(Device*)+0xb6>
c00291e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00291f1:	89 10                	mov    DWORD PTR [eax],edx
c00291f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00291fb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00291fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029202:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029205:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002920f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029213:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029216:	85 c0                	test   eax,eax
c0029218:	74 22                	je     c002923c <LinkedList<Device>::addElement(Device*)+0xc6>
c002921a:	83 ec 0c             	sub    esp,0xc
c002921d:	68 b6 ad 02 c0       	push   0xc002adb6
c0029222:	e8 06 11 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c0029227:	83 c4 10             	add    esp,0x10
c002922a:	eb 10                	jmp    c002923c <LinkedList<Device>::addElement(Device*)+0xc6>
c002922c:	83 ec 0c             	sub    esp,0xc
c002922f:	68 c0 ad 02 c0       	push   0xc002adc0
c0029234:	e8 f4 10 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c0029239:	83 c4 10             	add    esp,0x10
c002923c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029240:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029243:	8d 50 01             	lea    edx,[eax+0x1]
c0029246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002924a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002924d:	90                   	nop
c002924e:	83 c4 0c             	add    esp,0xc
c0029251:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0029252 <LinkedList<Device>::LinkedList()>:
c0029252:	83 ec 0c             	sub    esp,0xc
c0029255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029259:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002925f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029263:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002926a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002926e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029279:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002927f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029283:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002928a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002928e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029295:	83 ec 0c             	sub    esp,0xc
c0029298:	68 7a ad 02 c0       	push   0xc002ad7a
c002929d:	e8 55 96 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c00292a2:	83 c4 10             	add    esp,0x10
c00292a5:	90                   	nop
c00292a6:	83 c4 0c             	add    esp,0xc
c00292a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00292aa <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00292aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00292ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00292b0:	85 c0                	test   eax,eax
c00292b2:	75 0e                	jne    c00292c2 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00292b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00292b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00292bb:	85 c0                	test   eax,eax
c00292bd:	75 03                	jne    c00292c2 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00292bf:	b0 01                	mov    al,0x1
c00292c1:	c3                   	ret    
c00292c2:	b0 00                	mov    al,0x0
c00292c4:	90                   	nop
c00292c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00292c6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00292c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00292ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00292cc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00292ce <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00292ce:	83 ec 0c             	sub    esp,0xc
c00292d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00292d7:	85 c0                	test   eax,eax
c00292d9:	75 15                	jne    c00292f0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00292db:	83 ec 0c             	sub    esp,0xc
c00292de:	68 cc ad 02 c0       	push   0xc002adcc
c00292e3:	e8 45 10 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c00292e8:	83 c4 10             	add    esp,0x10
c00292eb:	e9 88 00 00 00       	jmp    c0029378 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00292f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00292f7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00292fa:	85 c0                	test   eax,eax
c00292fc:	0f 95 c0             	setne  al
c00292ff:	84 c0                	test   al,al
c0029301:	74 10                	je     c0029313 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0029303:	83 ec 0c             	sub    esp,0xc
c0029306:	68 17 ae 02 c0       	push   0xc002ae17
c002930b:	e8 1d 10 ff ff       	call   c001a32d <Krnl::panic(char const*)>
c0029310:	83 c4 10             	add    esp,0x10
c0029313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029317:	8b 00                	mov    eax,DWORD PTR [eax]
c0029319:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002931c:	85 c0                	test   eax,eax
c002931e:	0f 94 c0             	sete   al
c0029321:	84 c0                	test   al,al
c0029323:	74 33                	je     c0029358 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0029325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029329:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002932f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029333:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002933a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002933e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029341:	83 f8 01             	cmp    eax,0x1
c0029344:	74 21                	je     c0029367 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029346:	83 ec 0c             	sub    esp,0xc
c0029349:	68 f0 ad 02 c0       	push   0xc002adf0
c002934e:	e8 da 0f ff ff       	call   c001a32d <Krnl::panic(char const*)>
c0029353:	83 c4 10             	add    esp,0x10
c0029356:	eb 0f                	jmp    c0029367 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002935c:	8b 00                	mov    eax,DWORD PTR [eax]
c002935e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0029361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029365:	89 10                	mov    DWORD PTR [eax],edx
c0029367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002936b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002936e:	8d 50 ff             	lea    edx,[eax-0x1]
c0029371:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029375:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029378:	83 c4 0c             	add    esp,0xc
c002937b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002937c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002937c:	83 ec 0c             	sub    esp,0xc
c002937f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029384:	75 10                	jne    c0029396 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0029386:	83 ec 0c             	sub    esp,0xc
c0029389:	68 94 ad 02 c0       	push   0xc002ad94
c002938e:	e8 9a 0f ff ff       	call   c001a32d <Krnl::panic(char const*)>
c0029393:	83 c4 10             	add    esp,0x10
c0029396:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002939a:	8b 00                	mov    eax,DWORD PTR [eax]
c002939c:	85 c0                	test   eax,eax
c002939e:	74 34                	je     c00293d4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00293a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293a7:	85 c0                	test   eax,eax
c00293a9:	74 29                	je     c00293d4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00293ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293b6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00293b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293c1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00293c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293cb:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00293d2:	eb 65                	jmp    c0029439 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00293d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00293da:	85 c0                	test   eax,eax
c00293dc:	75 4b                	jne    c0029429 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00293de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293e5:	85 c0                	test   eax,eax
c00293e7:	75 40                	jne    c0029429 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00293e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293f1:	89 10                	mov    DWORD PTR [eax],edx
c00293f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293fb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00293fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029402:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029405:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002940c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029410:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029413:	85 c0                	test   eax,eax
c0029415:	74 22                	je     c0029439 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029417:	83 ec 0c             	sub    esp,0xc
c002941a:	68 b6 ad 02 c0       	push   0xc002adb6
c002941f:	e8 09 0f ff ff       	call   c001a32d <Krnl::panic(char const*)>
c0029424:	83 c4 10             	add    esp,0x10
c0029427:	eb 10                	jmp    c0029439 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029429:	83 ec 0c             	sub    esp,0xc
c002942c:	68 c0 ad 02 c0       	push   0xc002adc0
c0029431:	e8 f7 0e ff ff       	call   c001a32d <Krnl::panic(char const*)>
c0029436:	83 c4 10             	add    esp,0x10
c0029439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002943d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029440:	8d 50 01             	lea    edx,[eax+0x1]
c0029443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029447:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002944a:	90                   	nop
c002944b:	83 c4 0c             	add    esp,0xc
c002944e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0029450 <ACPI::~ACPI()>:
c0029450:	83 ec 0c             	sub    esp,0xc
c0029453:	ba 8c bf 02 c0       	mov    edx,0xc002bf8c
c0029458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002945c:	89 10                	mov    DWORD PTR [eax],edx
c002945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029462:	83 ec 0c             	sub    esp,0xc
c0029465:	50                   	push   eax
c0029466:	e8 93 a7 fe ff       	call   c0013bfe <Device::~Device()>
c002946b:	83 c4 10             	add    esp,0x10
c002946e:	90                   	nop
c002946f:	83 c4 0c             	add    esp,0xc
c0029472:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0029474 <ACPI::~ACPI()>:
c0029474:	83 ec 0c             	sub    esp,0xc
c0029477:	83 ec 0c             	sub    esp,0xc
c002947a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002947e:	e8 cd ff ff ff       	call   c0029450 <ACPI::~ACPI()>
c0029483:	83 c4 10             	add    esp,0x10
c0029486:	83 ec 08             	sub    esp,0x8
c0029489:	68 64 12 00 00       	push   0x1264
c002948e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029492:	e8 80 93 fe ff       	call   c0012817 <operator delete(void*, unsigned long)>
c0029497:	83 c4 10             	add    esp,0x10
c002949a:	83 c4 0c             	add    esp,0xc
c002949d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002949e <LinkedList<Device>::~LinkedList()>:
c002949e:	90                   	nop
c002949f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00294a0 <LinkedList<Device>::isEmpty()>:
c00294a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00294a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00294a6:	85 c0                	test   eax,eax
c00294a8:	75 0e                	jne    c00294b8 <LinkedList<Device>::isEmpty()+0x18>
c00294aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00294ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294b1:	85 c0                	test   eax,eax
c00294b3:	75 03                	jne    c00294b8 <LinkedList<Device>::isEmpty()+0x18>
c00294b5:	b0 01                	mov    al,0x1
c00294b7:	c3                   	ret    
c00294b8:	b0 00                	mov    al,0x0
c00294ba:	90                   	nop
c00294bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00294bc <LinkedList<Device>::getFirstElement()>:
c00294bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00294c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00294c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00294c4 <LinkedList<Device>::removeFirst()>:
c00294c4:	83 ec 0c             	sub    esp,0xc
c00294c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00294cd:	85 c0                	test   eax,eax
c00294cf:	75 15                	jne    c00294e6 <LinkedList<Device>::removeFirst()+0x22>
c00294d1:	83 ec 0c             	sub    esp,0xc
c00294d4:	68 cc ad 02 c0       	push   0xc002adcc
c00294d9:	e8 4f 0e ff ff       	call   c001a32d <Krnl::panic(char const*)>
c00294de:	83 c4 10             	add    esp,0x10
c00294e1:	e9 87 00 00 00       	jmp    c002956d <LinkedList<Device>::removeFirst()+0xa9>
c00294e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294ed:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00294f3:	85 c0                	test   eax,eax
c00294f5:	74 10                	je     c0029507 <LinkedList<Device>::removeFirst()+0x43>
c00294f7:	83 ec 0c             	sub    esp,0xc
c00294fa:	68 17 ae 02 c0       	push   0xc002ae17
c00294ff:	e8 29 0e ff ff       	call   c001a32d <Krnl::panic(char const*)>
c0029504:	83 c4 10             	add    esp,0x10
c0029507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002950b:	8b 00                	mov    eax,DWORD PTR [eax]
c002950d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029513:	85 c0                	test   eax,eax
c0029515:	75 33                	jne    c002954a <LinkedList<Device>::removeFirst()+0x86>
c0029517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002951b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029525:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002952c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029530:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029533:	83 f8 01             	cmp    eax,0x1
c0029536:	74 24                	je     c002955c <LinkedList<Device>::removeFirst()+0x98>
c0029538:	83 ec 0c             	sub    esp,0xc
c002953b:	68 f0 ad 02 c0       	push   0xc002adf0
c0029540:	e8 e8 0d ff ff       	call   c001a32d <Krnl::panic(char const*)>
c0029545:	83 c4 10             	add    esp,0x10
c0029548:	eb 12                	jmp    c002955c <LinkedList<Device>::removeFirst()+0x98>
c002954a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002954e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029550:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0029556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002955a:	89 10                	mov    DWORD PTR [eax],edx
c002955c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029560:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029563:	8d 50 ff             	lea    edx,[eax-0x1]
c0029566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002956a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002956d:	83 c4 0c             	add    esp,0xc
c0029570:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029572 <CPU::~CPU()>:
c0029572:	83 ec 0c             	sub    esp,0xc
c0029575:	ba 7c c3 02 c0       	mov    edx,0xc002c37c
c002957a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002957e:	89 10                	mov    DWORD PTR [eax],edx
c0029580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029584:	83 ec 0c             	sub    esp,0xc
c0029587:	50                   	push   eax
c0029588:	e8 71 a6 fe ff       	call   c0013bfe <Device::~Device()>
c002958d:	83 c4 10             	add    esp,0x10
c0029590:	90                   	nop
c0029591:	83 c4 0c             	add    esp,0xc
c0029594:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029596 <CPU::~CPU()>:
c0029596:	83 ec 0c             	sub    esp,0xc
c0029599:	83 ec 0c             	sub    esp,0xc
c002959c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295a0:	e8 cd ff ff ff       	call   c0029572 <CPU::~CPU()>
c00295a5:	83 c4 10             	add    esp,0x10
c00295a8:	83 ec 08             	sub    esp,0x8
c00295ab:	68 98 11 00 00       	push   0x1198
c00295b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00295b4:	e8 5e 92 fe ff       	call   c0012817 <operator delete(void*, unsigned long)>
c00295b9:	83 c4 10             	add    esp,0x10
c00295bc:	83 c4 0c             	add    esp,0xc
c00295bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00295c0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00295c0:	90                   	nop
c00295c1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00295c2 <ThreadControlBlock::ThreadControlBlock()>:
c00295c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295c6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00295cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295d1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00295d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295dc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00295e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295e7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00295ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295f2:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00295f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295fd:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029601:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029605:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0029609:	90                   	nop
c002960a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002960c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002960c:	83 ec 0c             	sub    esp,0xc
c002960f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029613:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002961d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029628:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002962f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029633:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002963d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029648:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002964f:	83 ec 0c             	sub    esp,0xc
c0029652:	68 7a ad 02 c0       	push   0xc002ad7a
c0029657:	e8 9b 92 fe ff       	call   c00128f7 <Dbg::kprintf(char const*, ...)>
c002965c:	83 c4 10             	add    esp,0x10
c002965f:	90                   	nop
c0029660:	83 c4 0c             	add    esp,0xc
c0029663:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029664 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029664:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029668:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002966b:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c002966c <Vm::_FPUState::_FPUState()>:
c002966c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029670:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0029677:	90                   	nop
c0029678:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002967a <PCI::~PCI()>:
c002967a:	83 ec 0c             	sub    esp,0xc
c002967d:	ba 10 d5 02 c0       	mov    edx,0xc002d510
c0029682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029686:	89 10                	mov    DWORD PTR [eax],edx
c0029688:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002968c:	83 ec 0c             	sub    esp,0xc
c002968f:	50                   	push   eax
c0029690:	e8 39 9f fe ff       	call   c00135ce <Bus::~Bus()>
c0029695:	83 c4 10             	add    esp,0x10
c0029698:	90                   	nop
c0029699:	83 c4 0c             	add    esp,0xc
c002969c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002969e <PCI::~PCI()>:
c002969e:	83 ec 0c             	sub    esp,0xc
c00296a1:	83 ec 0c             	sub    esp,0xc
c00296a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296a8:	e8 cd ff ff ff       	call   c002967a <PCI::~PCI()>
c00296ad:	83 c4 10             	add    esp,0x10
c00296b0:	83 ec 08             	sub    esp,0x8
c00296b3:	68 5c 01 00 00       	push   0x15c
c00296b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296bc:	e8 56 91 fe ff       	call   c0012817 <operator delete(void*, unsigned long)>
c00296c1:	83 c4 10             	add    esp,0x10
c00296c4:	83 c4 0c             	add    esp,0xc
c00296c7:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00296c8 <IDE::~IDE()>:
c00296c8:	83 ec 0c             	sub    esp,0xc
c00296cb:	ba 74 d7 02 c0       	mov    edx,0xc002d774
c00296d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296d4:	89 10                	mov    DWORD PTR [eax],edx
c00296d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296da:	83 ec 0c             	sub    esp,0xc
c00296dd:	50                   	push   eax
c00296de:	e8 31 aa fe ff       	call   c0014114 <HardDiskController::~HardDiskController()>
c00296e3:	83 c4 10             	add    esp,0x10
c00296e6:	90                   	nop
c00296e7:	83 c4 0c             	add    esp,0xc
c00296ea:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00296ec <IDE::~IDE()>:
c00296ec:	83 ec 0c             	sub    esp,0xc
c00296ef:	83 ec 0c             	sub    esp,0xc
c00296f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296f6:	e8 cd ff ff ff       	call   c00296c8 <IDE::~IDE()>
c00296fb:	83 c4 10             	add    esp,0x10
c00296fe:	83 ec 08             	sub    esp,0x8
c0029701:	68 70 02 00 00       	push   0x270
c0029706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002970a:	e8 08 91 fe ff       	call   c0012817 <operator delete(void*, unsigned long)>
c002970f:	83 c4 10             	add    esp,0x10
c0029712:	83 c4 0c             	add    esp,0xc
c0029715:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029716 <SATABus::~SATABus()>:
c0029716:	83 ec 0c             	sub    esp,0xc
c0029719:	ba 54 d8 02 c0       	mov    edx,0xc002d854
c002971e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029722:	89 10                	mov    DWORD PTR [eax],edx
c0029724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029728:	83 ec 0c             	sub    esp,0xc
c002972b:	50                   	push   eax
c002972c:	e8 e3 a9 fe ff       	call   c0014114 <HardDiskController::~HardDiskController()>
c0029731:	83 c4 10             	add    esp,0x10
c0029734:	90                   	nop
c0029735:	83 c4 0c             	add    esp,0xc
c0029738:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002973a <SATABus::~SATABus()>:
c002973a:	83 ec 0c             	sub    esp,0xc
c002973d:	83 ec 0c             	sub    esp,0xc
c0029740:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029744:	e8 cd ff ff ff       	call   c0029716 <SATABus::~SATABus()>
c0029749:	83 c4 10             	add    esp,0x10
c002974c:	83 ec 08             	sub    esp,0x8
c002974f:	68 64 01 00 00       	push   0x164
c0029754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029758:	e8 ba 90 fe ff       	call   c0012817 <operator delete(void*, unsigned long)>
c002975d:	83 c4 10             	add    esp,0x10
c0029760:	83 c4 0c             	add    esp,0xc
c0029763:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029764 <ATA::~ATA()>:
c0029764:	83 ec 0c             	sub    esp,0xc
c0029767:	ba a0 d8 02 c0       	mov    edx,0xc002d8a0
c002976c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029770:	89 10                	mov    DWORD PTR [eax],edx
c0029772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029776:	83 ec 0c             	sub    esp,0xc
c0029779:	50                   	push   eax
c002977a:	e8 87 aa fe ff       	call   c0014206 <PhysicalDisk::~PhysicalDisk()>
c002977f:	83 c4 10             	add    esp,0x10
c0029782:	90                   	nop
c0029783:	83 c4 0c             	add    esp,0xc
c0029786:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029788 <ATA::~ATA()>:
c0029788:	83 ec 0c             	sub    esp,0xc
c002978b:	83 ec 0c             	sub    esp,0xc
c002978e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029792:	e8 cd ff ff ff       	call   c0029764 <ATA::~ATA()>
c0029797:	83 c4 10             	add    esp,0x10
c002979a:	83 ec 08             	sub    esp,0x8
c002979d:	68 7c 01 00 00       	push   0x17c
c00297a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297a6:	e8 6c 90 fe ff       	call   c0012817 <operator delete(void*, unsigned long)>
c00297ab:	83 c4 10             	add    esp,0x10
c00297ae:	83 c4 0c             	add    esp,0xc
c00297b1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00297b2 <ATAPI::~ATAPI()>:
c00297b2:	83 ec 0c             	sub    esp,0xc
c00297b5:	ba d8 d8 02 c0       	mov    edx,0xc002d8d8
c00297ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297be:	89 10                	mov    DWORD PTR [eax],edx
c00297c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297c4:	83 ec 0c             	sub    esp,0xc
c00297c7:	50                   	push   eax
c00297c8:	e8 39 aa fe ff       	call   c0014206 <PhysicalDisk::~PhysicalDisk()>
c00297cd:	83 c4 10             	add    esp,0x10
c00297d0:	90                   	nop
c00297d1:	83 c4 0c             	add    esp,0xc
c00297d4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00297d6 <ATAPI::~ATAPI()>:
c00297d6:	83 ec 0c             	sub    esp,0xc
c00297d9:	83 ec 0c             	sub    esp,0xc
c00297dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297e0:	e8 cd ff ff ff       	call   c00297b2 <ATAPI::~ATAPI()>
c00297e5:	83 c4 10             	add    esp,0x10
c00297e8:	83 ec 08             	sub    esp,0x8
c00297eb:	68 80 01 00 00       	push   0x180
c00297f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297f4:	e8 1e 90 fe ff       	call   c0012817 <operator delete(void*, unsigned long)>
c00297f9:	83 c4 10             	add    esp,0x10
c00297fc:	83 c4 0c             	add    esp,0xc
c00297ff:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0029800 <SATA::~SATA()>:
c0029800:	83 ec 0c             	sub    esp,0xc
c0029803:	ba 8c d9 02 c0       	mov    edx,0xc002d98c
c0029808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002980c:	89 10                	mov    DWORD PTR [eax],edx
c002980e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029812:	83 ec 0c             	sub    esp,0xc
c0029815:	50                   	push   eax
c0029816:	e8 eb a9 fe ff       	call   c0014206 <PhysicalDisk::~PhysicalDisk()>
c002981b:	83 c4 10             	add    esp,0x10
c002981e:	90                   	nop
c002981f:	83 c4 0c             	add    esp,0xc
c0029822:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029824 <SATA::~SATA()>:
c0029824:	83 ec 0c             	sub    esp,0xc
c0029827:	83 ec 0c             	sub    esp,0xc
c002982a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002982e:	e8 cd ff ff ff       	call   c0029800 <SATA::~SATA()>
c0029833:	83 c4 10             	add    esp,0x10
c0029836:	83 ec 08             	sub    esp,0x8
c0029839:	68 7c 01 00 00       	push   0x17c
c002983e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029842:	e8 d0 8f fe ff       	call   c0012817 <operator delete(void*, unsigned long)>
c0029847:	83 c4 10             	add    esp,0x10
c002984a:	83 c4 0c             	add    esp,0xc
c002984d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002984e <SATAPI::~SATAPI()>:
c002984e:	83 ec 0c             	sub    esp,0xc
c0029851:	ba 68 da 02 c0       	mov    edx,0xc002da68
c0029856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002985a:	89 10                	mov    DWORD PTR [eax],edx
c002985c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029860:	83 ec 0c             	sub    esp,0xc
c0029863:	50                   	push   eax
c0029864:	e8 9d a9 fe ff       	call   c0014206 <PhysicalDisk::~PhysicalDisk()>
c0029869:	83 c4 10             	add    esp,0x10
c002986c:	90                   	nop
c002986d:	83 c4 0c             	add    esp,0xc
c0029870:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029872 <SATAPI::~SATAPI()>:
c0029872:	83 ec 0c             	sub    esp,0xc
c0029875:	83 ec 0c             	sub    esp,0xc
c0029878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002987c:	e8 cd ff ff ff       	call   c002984e <SATAPI::~SATAPI()>
c0029881:	83 c4 10             	add    esp,0x10
c0029884:	83 ec 08             	sub    esp,0x8
c0029887:	68 80 01 00 00       	push   0x180
c002988c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029890:	e8 82 8f fe ff       	call   c0012817 <operator delete(void*, unsigned long)>
c0029895:	83 c4 10             	add    esp,0x10
c0029898:	83 c4 0c             	add    esp,0xc
c002989b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c002989c <AVX::~AVX()>:
c002989c:	83 ec 0c             	sub    esp,0xc
c002989f:	ba a8 da 02 c0       	mov    edx,0xc002daa8
c00298a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298a8:	89 10                	mov    DWORD PTR [eax],edx
c00298aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298ae:	83 ec 0c             	sub    esp,0xc
c00298b1:	50                   	push   eax
c00298b2:	e8 d3 a9 fe ff       	call   c001428a <FPU::~FPU()>
c00298b7:	83 c4 10             	add    esp,0x10
c00298ba:	90                   	nop
c00298bb:	83 c4 0c             	add    esp,0xc
c00298be:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00298c0 <AVX::~AVX()>:
c00298c0:	83 ec 0c             	sub    esp,0xc
c00298c3:	83 ec 0c             	sub    esp,0xc
c00298c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298ca:	e8 cd ff ff ff       	call   c002989c <AVX::~AVX()>
c00298cf:	83 c4 10             	add    esp,0x10
c00298d2:	83 ec 08             	sub    esp,0x8
c00298d5:	68 58 01 00 00       	push   0x158
c00298da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298de:	e8 34 8f fe ff       	call   c0012817 <operator delete(void*, unsigned long)>
c00298e3:	83 c4 10             	add    esp,0x10
c00298e6:	83 c4 0c             	add    esp,0xc
c00298e9:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c00298ea <MMX::~MMX()>:
c00298ea:	83 ec 0c             	sub    esp,0xc
c00298ed:	ba e8 da 02 c0       	mov    edx,0xc002dae8
c00298f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298f6:	89 10                	mov    DWORD PTR [eax],edx
c00298f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298fc:	83 ec 0c             	sub    esp,0xc
c00298ff:	50                   	push   eax
c0029900:	e8 85 a9 fe ff       	call   c001428a <FPU::~FPU()>
c0029905:	83 c4 10             	add    esp,0x10
c0029908:	90                   	nop
c0029909:	83 c4 0c             	add    esp,0xc
c002990c:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002990e <MMX::~MMX()>:
c002990e:	83 ec 0c             	sub    esp,0xc
c0029911:	83 ec 0c             	sub    esp,0xc
c0029914:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029918:	e8 cd ff ff ff       	call   c00298ea <MMX::~MMX()>
c002991d:	83 c4 10             	add    esp,0x10
c0029920:	83 ec 08             	sub    esp,0x8
c0029923:	68 58 01 00 00       	push   0x158
c0029928:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002992c:	e8 e6 8e fe ff       	call   c0012817 <operator delete(void*, unsigned long)>
c0029931:	83 c4 10             	add    esp,0x10
c0029934:	83 c4 0c             	add    esp,0xc
c0029937:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029938 <SSE::~SSE()>:
c0029938:	83 ec 0c             	sub    esp,0xc
c002993b:	ba 28 db 02 c0       	mov    edx,0xc002db28
c0029940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029944:	89 10                	mov    DWORD PTR [eax],edx
c0029946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002994a:	83 ec 0c             	sub    esp,0xc
c002994d:	50                   	push   eax
c002994e:	e8 37 a9 fe ff       	call   c001428a <FPU::~FPU()>
c0029953:	83 c4 10             	add    esp,0x10
c0029956:	90                   	nop
c0029957:	83 c4 0c             	add    esp,0xc
c002995a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002995c <SSE::~SSE()>:
c002995c:	83 ec 0c             	sub    esp,0xc
c002995f:	83 ec 0c             	sub    esp,0xc
c0029962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029966:	e8 cd ff ff ff       	call   c0029938 <SSE::~SSE()>
c002996b:	83 c4 10             	add    esp,0x10
c002996e:	83 ec 08             	sub    esp,0x8
c0029971:	68 58 01 00 00       	push   0x158
c0029976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002997a:	e8 98 8e fe ff       	call   c0012817 <operator delete(void*, unsigned long)>
c002997f:	83 c4 10             	add    esp,0x10
c0029982:	83 c4 0c             	add    esp,0xc
c0029985:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029986 <x87::~x87()>:
c0029986:	83 ec 0c             	sub    esp,0xc
c0029989:	ba 68 db 02 c0       	mov    edx,0xc002db68
c002998e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029992:	89 10                	mov    DWORD PTR [eax],edx
c0029994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029998:	83 ec 0c             	sub    esp,0xc
c002999b:	50                   	push   eax
c002999c:	e8 e9 a8 fe ff       	call   c001428a <FPU::~FPU()>
c00299a1:	83 c4 10             	add    esp,0x10
c00299a4:	90                   	nop
c00299a5:	83 c4 0c             	add    esp,0xc
c00299a8:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00299aa <x87::~x87()>:
c00299aa:	83 ec 0c             	sub    esp,0xc
c00299ad:	83 ec 0c             	sub    esp,0xc
c00299b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299b4:	e8 cd ff ff ff       	call   c0029986 <x87::~x87()>
c00299b9:	83 c4 10             	add    esp,0x10
c00299bc:	83 ec 08             	sub    esp,0x8
c00299bf:	68 58 01 00 00       	push   0x158
c00299c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299c8:	e8 4a 8e fe ff       	call   c0012817 <operator delete(void*, unsigned long)>
c00299cd:	83 c4 10             	add    esp,0x10
c00299d0:	83 c4 0c             	add    esp,0xc
c00299d3:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00299d4 <IOAPIC::~IOAPIC()>:
c00299d4:	83 ec 0c             	sub    esp,0xc
c00299d7:	ba c0 dc 02 c0       	mov    edx,0xc002dcc0
c00299dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299e0:	89 10                	mov    DWORD PTR [eax],edx
c00299e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299e6:	83 ec 0c             	sub    esp,0xc
c00299e9:	50                   	push   eax
c00299ea:	e8 0f a2 fe ff       	call   c0013bfe <Device::~Device()>
c00299ef:	83 c4 10             	add    esp,0x10
c00299f2:	90                   	nop
c00299f3:	83 c4 0c             	add    esp,0xc
c00299f6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00299f8 <IOAPIC::~IOAPIC()>:
c00299f8:	83 ec 0c             	sub    esp,0xc
c00299fb:	83 ec 0c             	sub    esp,0xc
c00299fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a02:	e8 cd ff ff ff       	call   c00299d4 <IOAPIC::~IOAPIC()>
c0029a07:	83 c4 10             	add    esp,0x10
c0029a0a:	83 ec 08             	sub    esp,0x8
c0029a0d:	68 68 01 00 00       	push   0x168
c0029a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a16:	e8 fc 8d fe ff       	call   c0012817 <operator delete(void*, unsigned long)>
c0029a1b:	83 c4 10             	add    esp,0x10
c0029a1e:	83 c4 0c             	add    esp,0xc
c0029a21:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029a22 <APIC::~APIC()>:
c0029a22:	83 ec 0c             	sub    esp,0xc
c0029a25:	ba 78 dc 02 c0       	mov    edx,0xc002dc78
c0029a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a2e:	89 10                	mov    DWORD PTR [eax],edx
c0029a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a34:	83 ec 0c             	sub    esp,0xc
c0029a37:	50                   	push   eax
c0029a38:	e8 17 ad fe ff       	call   c0014754 <InterruptController::~InterruptController()>
c0029a3d:	83 c4 10             	add    esp,0x10
c0029a40:	90                   	nop
c0029a41:	83 c4 0c             	add    esp,0xc
c0029a44:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029a46 <APIC::~APIC()>:
c0029a46:	83 ec 0c             	sub    esp,0xc
c0029a49:	83 ec 0c             	sub    esp,0xc
c0029a4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a50:	e8 cd ff ff ff       	call   c0029a22 <APIC::~APIC()>
c0029a55:	83 c4 10             	add    esp,0x10
c0029a58:	83 ec 08             	sub    esp,0x8
c0029a5b:	68 58 21 00 00       	push   0x2158
c0029a60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a64:	e8 ae 8d fe ff       	call   c0012817 <operator delete(void*, unsigned long)>
c0029a69:	83 c4 10             	add    esp,0x10
c0029a6c:	83 c4 0c             	add    esp,0xc
c0029a6f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029a70 <PIC::~PIC()>:
c0029a70:	83 ec 0c             	sub    esp,0xc
c0029a73:	ba 10 dd 02 c0       	mov    edx,0xc002dd10
c0029a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a7c:	89 10                	mov    DWORD PTR [eax],edx
c0029a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a82:	83 ec 0c             	sub    esp,0xc
c0029a85:	50                   	push   eax
c0029a86:	e8 c9 ac fe ff       	call   c0014754 <InterruptController::~InterruptController()>
c0029a8b:	83 c4 10             	add    esp,0x10
c0029a8e:	90                   	nop
c0029a8f:	83 c4 0c             	add    esp,0xc
c0029a92:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029a94 <PIC::~PIC()>:
c0029a94:	83 ec 0c             	sub    esp,0xc
c0029a97:	83 ec 0c             	sub    esp,0xc
c0029a9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a9e:	e8 cd ff ff ff       	call   c0029a70 <PIC::~PIC()>
c0029aa3:	83 c4 10             	add    esp,0x10
c0029aa6:	83 ec 08             	sub    esp,0x8
c0029aa9:	68 58 21 00 00       	push   0x2158
c0029aae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ab2:	e8 60 8d fe ff       	call   c0012817 <operator delete(void*, unsigned long)>
c0029ab7:	83 c4 10             	add    esp,0x10
c0029aba:	83 c4 0c             	add    esp,0xc
c0029abd:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029abe <APICTimer::~APICTimer()>:
c0029abe:	83 ec 0c             	sub    esp,0xc
c0029ac1:	ba 64 dd 02 c0       	mov    edx,0xc002dd64
c0029ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aca:	89 10                	mov    DWORD PTR [eax],edx
c0029acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ad0:	83 ec 0c             	sub    esp,0xc
c0029ad3:	50                   	push   eax
c0029ad4:	e8 0b cd fe ff       	call   c00167e4 <Timer::~Timer()>
c0029ad9:	83 c4 10             	add    esp,0x10
c0029adc:	90                   	nop
c0029add:	83 c4 0c             	add    esp,0xc
c0029ae0:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029ae2 <APICTimer::~APICTimer()>:
c0029ae2:	83 ec 0c             	sub    esp,0xc
c0029ae5:	83 ec 0c             	sub    esp,0xc
c0029ae8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029aec:	e8 cd ff ff ff       	call   c0029abe <APICTimer::~APICTimer()>
c0029af1:	83 c4 10             	add    esp,0x10
c0029af4:	83 ec 08             	sub    esp,0x8
c0029af7:	68 60 01 00 00       	push   0x160
c0029afc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b00:	e8 12 8d fe ff       	call   c0012817 <operator delete(void*, unsigned long)>
c0029b05:	83 c4 10             	add    esp,0x10
c0029b08:	83 c4 0c             	add    esp,0xc
c0029b0b:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029b0c <PIT::~PIT()>:
c0029b0c:	83 ec 0c             	sub    esp,0xc
c0029b0f:	ba b4 dd 02 c0       	mov    edx,0xc002ddb4
c0029b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b18:	89 10                	mov    DWORD PTR [eax],edx
c0029b1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b1e:	83 ec 0c             	sub    esp,0xc
c0029b21:	50                   	push   eax
c0029b22:	e8 bd cc fe ff       	call   c00167e4 <Timer::~Timer()>
c0029b27:	83 c4 10             	add    esp,0x10
c0029b2a:	90                   	nop
c0029b2b:	83 c4 0c             	add    esp,0xc
c0029b2e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029b30 <PIT::~PIT()>:
c0029b30:	83 ec 0c             	sub    esp,0xc
c0029b33:	83 ec 0c             	sub    esp,0xc
c0029b36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b3a:	e8 cd ff ff ff       	call   c0029b0c <PIT::~PIT()>
c0029b3f:	83 c4 10             	add    esp,0x10
c0029b42:	83 ec 08             	sub    esp,0x8
c0029b45:	68 5c 01 00 00       	push   0x15c
c0029b4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b4e:	e8 c4 8c fe ff       	call   c0012817 <operator delete(void*, unsigned long)>
c0029b53:	83 c4 10             	add    esp,0x10
c0029b56:	83 c4 0c             	add    esp,0xc
c0029b59:	c3                   	ret    
