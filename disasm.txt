
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 de fb 00 00       	call   c000fbfe <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 23 7f 02 00       	call   c0027f48 <_init>
c0000025:	c3                   	ret    
c0000026:	bb f2 8a 02 c0       	mov    ebx,0xc0028af2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 00 8b 02 c0    	cmp    ebx,0xc0028b00
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 d1 02 c0       	mov    eax,0xc002d118
c0000049:	3d 18 d1 02 c0       	cmp    eax,0xc002d118
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 d1 02 c0       	push   0xc002d118
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 d1 02 c0       	mov    eax,0xc002d118
c0000075:	2d 18 d1 02 c0       	sub    eax,0xc002d118
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 d1 02 c0       	push   0xc002d118
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 48 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d748,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 08 8b 02 c0       	mov    ebx,0xc0028b08
c00000bb:	81 eb 04 8b 02 c0    	sub    ebx,0xc0028b04
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 04 8b 02 c0       	mov    esi,0xc0028b04
c00000ca:	a1 4c d7 02 c0       	mov    eax,ds:0xc002d74c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 4c d7 02 c0       	mov    ds:0xc002d74c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 4c d7 02 c0       	mov    eax,ds:0xc002d74c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 d1 02 c0       	push   0xc002d118
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 48 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d748,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 50 d7 02 c0       	push   0xc002d750
c000012c:	68 18 d1 02 c0       	push   0xc002d118
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 f7 ce 01 00       	call   c001d292 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 40 25 01 00       	call   c00128f3 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 d5 ce 01 00       	call   c001d292 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 23 d3 01 00       	call   c001d6ff <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 d1 d8 01 00       	call   c001dcb6 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 90 db 02 c0 	lgdtd  ds:0xc002db90
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 1e 42 01 00       	call   c00147f7 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 68 d7 02 c0       	mov    ds:0xc002d768,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 68 d7 02 c0    	mov    DWORD PTR ds:0xc002d768,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 68 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d768
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 20 8b 02 c0 02 	test   BYTE PTR [edx-0x3ffd74e0],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 20 8b 02 c0 01 	test   BYTE PTR [edx-0x3ffd74e0],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 20 8b 02 c0 08 	test   BYTE PTR [edx-0x3ffd74e0],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 20 8b 02 c0 04 	test   BYTE PTR [ebx-0x3ffd74e0],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 20 8b 02 c0 01 	test   BYTE PTR [edx-0x3ffd74e0],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 80 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d780
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 80 d7 02 c0    	mov    DWORD PTR ds:0xc002d780,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 84 d7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd287c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 84 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd287c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 80 d7 02 c0    	mov    DWORD PTR ds:0xc002d780,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 ac d7 02 c0    	cmp    DWORD PTR ds:0xc002d7ac,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d bc d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d7bc
c0000e60:	c7 42 0c b4 d7 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d7b4
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 bc d7 02 c0    	mov    DWORD PTR ds:0xc002d7bc,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 ac d7 02 c0    	mov    DWORD PTR ds:0xc002d7ac,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 80 d7 02 c0 02 	test   BYTE PTR ds:0xc002d780,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 5c e7 00 00       	call   c000f69d <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 9e e6 00 00       	call   c000f69d <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 88 e6 00 00       	call   c000f69d <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 64 e6 00 00       	call   c000f69d <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 80 d7 02 c0    	mov    edi,DWORD PTR ds:0xc002d780
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 84 d7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd287c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 84 d7 02 c0 	mov    DWORD PTR [edx*4-0x3ffd287c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 b4 d7 02 c0 	lea    edx,[eax*8-0x3ffd284c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d c0 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d7c0
c00011e2:	81 fb b4 d7 02 c0    	cmp    ebx,0xc002d7b4
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d b4 d7 02 c0       	cmp    eax,0xc002d7b4
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d b0 d7 02 c0    	cmp    DWORD PTR ds:0xc002d7b0,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 bc d7 02 c0       	mov    ds:0xc002d7bc,eax
c000121e:	a3 c0 d7 02 c0       	mov    ds:0xc002d7c0,eax
c0001223:	a3 b0 d7 02 c0       	mov    ds:0xc002d7b0,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 b4 d7 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d7b4
c0001231:	c7 40 0c b4 d7 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d7b4
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 c0 d7 02 c0       	mov    ds:0xc002d7c0,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 b4 d7 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d7b4
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 78 d7 02 c0 	lea    ebp,[edx*4-0x3ffd2888]
c0001282:	8b 14 95 80 d7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2880]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 80 d7 02 c0 	lea    ecx,[edx*4-0x3ffd2880]
c000129d:	8b 14 95 80 d7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2880]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd b4 da 02 c0 	or     DWORD PTR [edi*4-0x3ffd254c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 b4 d7 02 c0 	lea    eax,[eax*8-0x3ffd284c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d bc d7 02 c0    	mov    DWORD PTR ds:0xc002d7bc,ecx
c0001357:	89 0d c0 d7 02 c0    	mov    DWORD PTR ds:0xc002d7c0,ecx
c000135d:	c7 41 08 b4 d7 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d7b4
c0001364:	c7 41 0c b4 d7 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d7b4
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd ac d7 02 c0 	lea    edx,[ecx*8-0x3ffd2854]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d b4 da 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd254c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d b4 da 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd254c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 ac d7 02 c0 	lea    edx,[eax*4-0x3ffd2854]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d b4 da 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd254c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d bc d7 02 c0    	mov    DWORD PTR ds:0xc002d7bc,edi
c000142a:	89 3d c0 d7 02 c0    	mov    DWORD PTR ds:0xc002d7c0,edi
c0001430:	c7 47 08 b4 d7 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d7b4
c0001437:	c7 47 0c b4 d7 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d7b4
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d b0 d7 02 c0    	mov    DWORD PTR ds:0xc002d7b0,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 ac d7 02 c0       	mov    eax,ds:0xc002d7ac
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d ac d7 02 c0    	mov    DWORD PTR ds:0xc002d7ac,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 80 d7 02 c0       	mov    edx,0xc002d780
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 80 d7 02 c0 00 	cmp    DWORD PTR ds:0xc002d780,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d d4 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dad4
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 d4 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dad4,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d d4 da 02 c0    	mov    DWORD PTR ds:0xc002dad4,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 ac d7 02 c0    	cmp    DWORD PTR ds:0xc002d7ac,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d ac d7 02 c0    	mov    DWORD PTR ds:0xc002d7ac,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 80 d7 02 c0 00 	cmp    DWORD PTR ds:0xc002d780,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 dc da 02 c0    	push   DWORD PTR ds:0xc002dadc
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 80 d7 02 c0 00 	cmp    DWORD PTR ds:0xc002d780,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 dc da 02 c0       	mov    eax,ds:0xc002dadc
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d ac d7 02 c0 00 	cmp    DWORD PTR ds:0xc002d7ac,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 ac d7 02 c0       	mov    eax,ds:0xc002d7ac
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 84 d7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd287c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 b4 d7 02 c0       	mov    eax,0xc002d7b4
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d ac da 02 c0       	cmp    eax,0xc002daac
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 e8 da 02 c0       	mov    eax,ds:0xc002dae8
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 d0 da 02 c0    	mov    esi,DWORD PTR ds:0xc002dad0
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 e4 da 02 c0    	mov    esi,DWORD PTR ds:0xc002dae4
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 f4 da 02 c0    	mov    esi,DWORD PTR ds:0xc002daf4
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 24 8c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd73dc]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 80 d7 02 c0       	mov    eax,ds:0xc002d780
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 80 d7 02 c0       	mov    ds:0xc002d780,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d c4 da 02 c0    	mov    DWORD PTR ds:0xc002dac4,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d c8 da 02 c0    	mov    DWORD PTR ds:0xc002dac8,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d cc da 02 c0    	mov    DWORD PTR ds:0xc002dacc,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 d4 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dad4,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 60 12 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffceda0]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 82 ea 01 00       	jmp    c00206ae <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 60 12 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffceda0]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 b3 ea 01 00       	jmp    c00206f5 <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 60 12 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffceda0]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 db ea 01 00       	jmp    c002073c <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 68 43 02 00       	call   c00262ac <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 40 8d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd72c0]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 40 8d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd72c0]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 40 8c 02 c0       	mov    edx,0xc0028c40
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 60 8d 02 c0       	mov    edx,0xc0028d60
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 94 bf 02 c0       	mov    edx,0xc002bf94
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 6c 8d 02 c0       	mov    edx,0xc0028d6c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 50 8d 02 c0       	mov    edx,0xc0028d50
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 20 db 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd24e0]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 00 db 02 c0    	mov    ax,ds:0xc002db00
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 00 db 02 c0    	mov    ds:0xc002db00,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 65 31 02 00       	call   c00262ac <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 72 8d 02 c0       	mov    eax,0xc0028d72
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad c0 8c 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd7340]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 7b 8d 02 c0       	mov    eax,0xc0028d7b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 40 8d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd72c0]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 30 1b 02 00       	call   c00262ac <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 50 8d 02 c0       	mov    edx,0xc0028d50
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 40 8c 02 c0       	mov    edx,0xc0028c40
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 50 8c 02 c0       	mov    edx,0xc0028c50
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 20 db 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd24e0]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 20 db 02 c0 	mov    DWORD PTR [edx*4-0x3ffd24e0],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 f7 04 02 00       	call   c00262ac <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 dd 04 02 00       	call   c00262ac <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 97 8c 02 c0       	mov    eax,0xc0028c97
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 90 8c 02 c0       	mov    eax,0xc0028c90
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 20 db 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd24e0]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 80 8c 02 c0       	mov    esi,0xc0028c80
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 20 ec 01 00       	call   c00262ac <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 60 8d 02 c0       	mov    edx,0xc0028d60
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 60 8c 02 c0       	mov    edx,0xc0028c60
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 70 8c 02 c0       	mov    edx,0xc0028c70
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 82 8d 02 c0       	mov    edx,0xc0028d82
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 8e 8d 02 c0       	mov    edx,0xc0028d8e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba a2 8d 02 c0       	mov    edx,0xc0028da2
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 a3 73 00 00       	call   c000f846 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 9d 73 00 00       	call   c000f856 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c c0 90 02 c0 	mov    DWORD PTR [esp+0xc],0xc00290c0
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 c0 90 02 c0 	mov    DWORD PTR [esp+0x10],0xc00290c0
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 c0 8e 02 c0       	mov    eax,0xc0028ec0
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 00 8e 02 c0       	mov    eax,0xc0028e00
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 c0 8d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7240]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 e2 70 00 00       	call   c000f856 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 cc 70 00 00       	call   c000f856 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 74 f5 01 00       	call   c0027d7f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 37 f5 01 00       	call   c0027d61 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 0b f5 01 00       	call   c0027d7f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 be eb 01 00       	call   c0027484 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 38 f6 01 00       	call   c0027f10 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 85 f4 01 00       	call   c0027d7f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 c7 f3 01 00       	call   c0027d7f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 94 f3 01 00       	call   c0027d61 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 81 f2 01 00       	call   c0027d7f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 49 f2 01 00       	call   c0027d61 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 ab 6c 00 00       	call   c000f876 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 46 6c 00 00       	call   c000f856 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 c0 91 02 c0       	mov    eax,0xc00291c0
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 55 f0 01 00       	call   c0027d7f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 1a f0 01 00       	call   c0027d61 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 20 96 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd69e0]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 2a ed 01 00       	call   c0027b13 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 a8 e6 01 00       	call   c00274b0 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 64 ef 01 00       	call   c0027d83 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 52 f0 01 00       	call   c0027ea7 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 3c e6 01 00       	call   c00274b0 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 e7 ee 01 00       	call   c0027d7d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 c8 ee 01 00       	call   c0027d81 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 56 f0 01 00       	call   c0027f30 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 08 ec 01 00       	call   c0027b13 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 86 e5 01 00       	call   c00274b0 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 42 ee 01 00       	call   c0027d83 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 30 ef 01 00       	call   c0027ea7 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 1a e5 01 00       	call   c00274b0 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 c5 ed 01 00       	call   c0027d7d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 a5 ed 01 00       	call   c0027d81 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 32 ef 01 00       	call   c0027f30 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 e0 ec 01 00       	call   c0027d7f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 9e ec 01 00       	call   c0027d61 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 86 ec 01 00       	call   c0027d7f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 f8 e9 01 00       	call   c0027b13 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 fa dc 01 00       	call   c0026e33 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 5d e3 01 00       	call   c00274b0 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 af e9 01 00       	call   c0027b13 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 b5 dc 01 00       	call   c0026e33 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 84 e9 01 00       	call   c0027b13 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 d4 eb 01 00       	call   c0027d7d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 b1 e2 01 00       	call   c0027484 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 2b ed 01 00       	call   c0027f10 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 5a eb 01 00       	call   c0027d61 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 55 e2 01 00       	call   c0027484 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 d3 e8 01 00       	call   c0027b13 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 56 e2 01 00       	call   c00274b0 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 a8 e8 01 00       	call   c0027b13 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 0f e5 01 00       	call   c0027794 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 8e db 01 00       	call   c0026e33 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 ee d4 01 00       	call   c00267c8 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 c5 eb 01 00       	call   c0027ea7 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 ae e1 01 00       	call   c00274b0 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 95 eb 01 00       	call   c0027ea7 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 07 db 01 00       	call   c0026e33 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 40 ea 01 00       	call   c0027d83 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 28 e4 01 00       	call   c0027794 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 ae da 01 00       	call   c0026e33 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 94 eb 01 00       	call   c0027f30 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 6e e7 01 00       	call   c0027b13 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 c5 e0 01 00       	call   c0027484 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 a4 e9 01 00       	call   c0027d7f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 3d da 01 00       	call   c0026e33 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 69 e0 01 00       	call   c0027484 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 03 eb 01 00       	call   c0027f30 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 bc e6 01 00       	call   c0027b13 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 39 e0 01 00       	call   c00274b0 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 8c e6 01 00       	call   c0027b13 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 92 d9 01 00       	call   c0026e33 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 62 e6 01 00       	call   c0027b13 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 b4 e8 01 00       	call   c0027d7f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 8b df 01 00       	call   c0027484 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 05 ea 01 00       	call   c0027f10 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 34 e8 01 00       	call   c0027d61 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 2e df 01 00       	call   c0027484 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 ac e5 01 00       	call   c0027b13 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 2f df 01 00       	call   c00274b0 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 81 e5 01 00       	call   c0027b13 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 e8 e1 01 00       	call   c0027794 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 67 d8 01 00       	call   c0026e33 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 b7 d1 01 00       	call   c00267c8 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 8e e8 01 00       	call   c0027ea7 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 77 de 01 00       	call   c00274b0 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 5e e8 01 00       	call   c0027ea7 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 d0 d7 01 00       	call   c0026e33 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 09 e7 01 00       	call   c0027d83 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 f0 e0 01 00       	call   c0027794 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 6f d7 01 00       	call   c0026e33 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 55 e8 01 00       	call   c0027f30 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 2f e4 01 00       	call   c0027b13 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 86 dd 01 00       	call   c0027484 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 65 e6 01 00       	call   c0027d7f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 fe d6 01 00       	call   c0026e33 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 2a dd 01 00       	call   c0027484 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 9f e3 01 00       	call   c0027b13 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 a5 d6 01 00       	call   c0026e33 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 80 96 02 c0       	mov    eax,0xc0029680
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 94 96 02 c0       	mov    eax,0xc0029694
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 df 5f 00 00       	call   c000f856 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 e1 5f 00 00       	call   c000f876 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 1a e2 01 00       	call   c0027b13 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 98 db 01 00       	call   c00274b0 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 2a ce 01 00       	call   c00267c8 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 01 e5 01 00       	call   c0027ea7 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 ea da 01 00       	call   c00274b0 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 cd e4 01 00       	call   c0027ea7 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 3f d4 01 00       	call   c0026e33 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 9f e4 01 00       	call   c0027ea7 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 8e da 01 00       	call   c00274b0 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 f7 d3 01 00       	call   c0026e33 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 18 cd 01 00       	call   c00267c8 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 ef e3 01 00       	call   c0027ea7 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 d8 d9 01 00       	call   c00274b0 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 bb e3 01 00       	call   c0027ea7 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 2d d3 01 00       	call   c0026e33 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 8d e3 01 00       	call   c0027ea7 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 7c d9 01 00       	call   c00274b0 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 e5 d2 01 00       	call   c0026e33 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 c3 d2 01 00       	call   c0026e33 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 9f cb 01 00       	call   c00267c8 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 76 e2 01 00       	call   c0027ea7 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 5f d8 01 00       	call   c00274b0 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 42 e2 01 00       	call   c0027ea7 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 b4 d1 01 00       	call   c0026e33 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 14 e2 01 00       	call   c0027ea7 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 fd d7 01 00       	call   c00274b0 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 66 d1 01 00       	call   c0026e33 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 c6 e1 01 00       	call   c0027ea7 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 af d7 01 00       	call   c00274b0 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 18 d1 01 00       	call   c0026e33 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 2d ca 01 00       	call   c00267c8 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 04 e1 01 00       	call   c0027ea7 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 ed d6 01 00       	call   c00274b0 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 d4 e0 01 00       	call   c0027ea7 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 46 d0 01 00       	call   c0026e33 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 a6 e0 01 00       	call   c0027ea7 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 8f d6 01 00       	call   c00274b0 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 f8 cf 01 00       	call   c0026e33 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 58 e0 01 00       	call   c0027ea7 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 41 d6 01 00       	call   c00274b0 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 aa cf 01 00       	call   c0026e33 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 7e cf 01 00       	call   c0026e33 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 db d5 01 00       	call   c00274b0 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 97 de 01 00       	call   c0027d83 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 26 cf 01 00       	call   c0026e33 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 83 d5 01 00       	call   c00274b0 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 3f de 01 00       	call   c0027d83 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 b9 c7 01 00       	call   c00267c8 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 90 de 01 00       	call   c0027ea7 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 79 d4 01 00       	call   c00274b0 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 5c de 01 00       	call   c0027ea7 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 ce cd 01 00       	call   c0026e33 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 2e de 01 00       	call   c0027ea7 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 17 d4 01 00       	call   c00274b0 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 80 cd 01 00       	call   c0026e33 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 e0 dd 01 00       	call   c0027ea7 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 c9 d3 01 00       	call   c00274b0 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 32 cd 01 00       	call   c0026e33 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 92 dd 01 00       	call   c0027ea7 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 7b d3 01 00       	call   c00274b0 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 e4 cc 01 00       	call   c0026e33 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 44 dd 01 00       	call   c0027ea7 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 2d d3 01 00       	call   c00274b0 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 96 cc 01 00       	call   c0026e33 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 98 c5 01 00       	call   c00267c8 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 6f dc 01 00       	call   c0027ea7 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 58 d2 01 00       	call   c00274b0 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 3f dc 01 00       	call   c0027ea7 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 b1 cb 01 00       	call   c0026e33 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 11 dc 01 00       	call   c0027ea7 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 fa d1 01 00       	call   c00274b0 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 63 cb 01 00       	call   c0026e33 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 c3 db 01 00       	call   c0027ea7 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 ac d1 01 00       	call   c00274b0 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 15 cb 01 00       	call   c0026e33 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 75 db 01 00       	call   c0027ea7 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 5e d1 01 00       	call   c00274b0 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 c7 ca 01 00       	call   c0026e33 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 27 db 01 00       	call   c0027ea7 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 10 d1 01 00       	call   c00274b0 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 79 ca 01 00       	call   c0026e33 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 4d ca 01 00       	call   c0026e33 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 aa d0 01 00       	call   c00274b0 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 66 d9 01 00       	call   c0027d83 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 f5 c9 01 00       	call   c0026e33 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 52 d0 01 00       	call   c00274b0 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 0e d9 01 00       	call   c0027d83 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 9c c9 01 00       	call   c0026e33 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 f9 cf 01 00       	call   c00274b0 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 b5 d8 01 00       	call   c0027d83 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 43 c9 01 00       	call   c0026e33 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 a0 cf 01 00       	call   c00274b0 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 5c d8 01 00       	call   c0027d83 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 ba c1 01 00       	call   c00267c8 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 91 d8 01 00       	call   c0027ea7 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 7a ce 01 00       	call   c00274b0 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 5d d8 01 00       	call   c0027ea7 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 cf c7 01 00       	call   c0026e33 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 2f d8 01 00       	call   c0027ea7 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 18 ce 01 00       	call   c00274b0 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 81 c7 01 00       	call   c0026e33 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 e1 d7 01 00       	call   c0027ea7 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 ca cd 01 00       	call   c00274b0 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 33 c7 01 00       	call   c0026e33 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 93 d7 01 00       	call   c0027ea7 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 7c cd 01 00       	call   c00274b0 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 e5 c6 01 00       	call   c0026e33 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 45 d7 01 00       	call   c0027ea7 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 2e cd 01 00       	call   c00274b0 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 97 c6 01 00       	call   c0026e33 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 f7 d6 01 00       	call   c0027ea7 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 e0 cc 01 00       	call   c00274b0 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 46 c6 01 00       	call   c0026e33 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 a6 d6 01 00       	call   c0027ea7 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 8f cc 01 00       	call   c00274b0 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 f8 c5 01 00       	call   c0026e33 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 f2 be 01 00       	call   c00267c8 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 c9 d5 01 00       	call   c0027ea7 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 b2 cb 01 00       	call   c00274b0 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 92 d5 01 00       	call   c0027ea7 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 04 c5 01 00       	call   c0026e33 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 64 d5 01 00       	call   c0027ea7 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 4d cb 01 00       	call   c00274b0 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 b6 c4 01 00       	call   c0026e33 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 16 d5 01 00       	call   c0027ea7 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 ff ca 01 00       	call   c00274b0 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 68 c4 01 00       	call   c0026e33 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 c8 d4 01 00       	call   c0027ea7 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 b1 ca 01 00       	call   c00274b0 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 1a c4 01 00       	call   c0026e33 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 7a d4 01 00       	call   c0027ea7 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 63 ca 01 00       	call   c00274b0 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 cc c3 01 00       	call   c0026e33 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 2c d4 01 00       	call   c0027ea7 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 15 ca 01 00       	call   c00274b0 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 7b c3 01 00       	call   c0026e33 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 db d3 01 00       	call   c0027ea7 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 c4 c9 01 00       	call   c00274b0 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 33 c3 01 00       	call   c0026e33 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 0c c3 01 00       	call   c0026e33 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 6a c9 01 00       	call   c00274b0 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 26 d2 01 00       	call   c0027d83 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 b5 c2 01 00       	call   c0026e33 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 13 c9 01 00       	call   c00274b0 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 cf d1 01 00       	call   c0027d83 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 5d c2 01 00       	call   c0026e33 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 bb c8 01 00       	call   c00274b0 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 77 d1 01 00       	call   c0027d83 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 05 c2 01 00       	call   c0026e33 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 63 c8 01 00       	call   c00274b0 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 1f d1 01 00       	call   c0027d83 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 ad c1 01 00       	call   c0026e33 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 0b c8 01 00       	call   c00274b0 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 c7 d0 01 00       	call   c0027d83 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 5b c1 01 00       	call   c0026e33 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 b9 c7 01 00       	call   c00274b0 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 75 d0 01 00       	call   c0027d83 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 89 b9 01 00       	call   c00267c8 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 60 d0 01 00       	call   c0027ea7 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 49 c6 01 00       	call   c00274b0 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 30 d0 01 00       	call   c0027ea7 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 a2 bf 01 00       	call   c0026e33 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 c4 96 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd693c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 d6 cf 01 00       	call   c0027ea7 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 bf c5 01 00       	call   c00274b0 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 2a bf 01 00       	call   c0026e33 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 77 cf 01 00       	call   c0027ea7 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 60 c5 01 00       	call   c00274b0 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 cb be 01 00       	call   c0026e33 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 18 cf 01 00       	call   c0027ea7 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 01 c5 01 00       	call   c00274b0 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 6c be 01 00       	call   c0026e33 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 b9 ce 01 00       	call   c0027ea7 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 a2 c4 01 00       	call   c00274b0 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 0d be 01 00       	call   c0026e33 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 5a ce 01 00       	call   c0027ea7 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 43 c4 01 00       	call   c00274b0 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 ae bd 01 00       	call   c0026e33 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 fb cd 01 00       	call   c0027ea7 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 e4 c3 01 00       	call   c00274b0 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 4f bd 01 00       	call   c0026e33 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 9c cd 01 00       	call   c0027ea7 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 85 c3 01 00       	call   c00274b0 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 f0 bc 01 00       	call   c0026e33 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 3d cd 01 00       	call   c0027ea7 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 26 c3 01 00       	call   c00274b0 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 91 bc 01 00       	call   c0026e33 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 9b b5 01 00       	call   c00267c8 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 72 cc 01 00       	call   c0027ea7 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 5b c2 01 00       	call   c00274b0 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 42 cc 01 00       	call   c0027ea7 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 b4 bb 01 00       	call   c0026e33 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 e0 96 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6920]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 e7 cb 01 00       	call   c0027ea7 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 d0 c1 01 00       	call   c00274b0 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 3b bb 01 00       	call   c0026e33 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 87 cb 01 00       	call   c0027ea7 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 70 c1 01 00       	call   c00274b0 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 db ba 01 00       	call   c0026e33 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 27 cb 01 00       	call   c0027ea7 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 10 c1 01 00       	call   c00274b0 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 7b ba 01 00       	call   c0026e33 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 c7 ca 01 00       	call   c0027ea7 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 b0 c0 01 00       	call   c00274b0 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 1b ba 01 00       	call   c0026e33 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 67 ca 01 00       	call   c0027ea7 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 50 c0 01 00       	call   c00274b0 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 bb b9 01 00       	call   c0026e33 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 07 ca 01 00       	call   c0027ea7 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 f0 bf 01 00       	call   c00274b0 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 5b b9 01 00       	call   c0026e33 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 a7 c9 01 00       	call   c0027ea7 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 90 bf 01 00       	call   c00274b0 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 fb b8 01 00       	call   c0026e33 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 47 c9 01 00       	call   c0027ea7 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 30 bf 01 00       	call   c00274b0 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 9b b8 01 00       	call   c0026e33 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 fc 96 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6904]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 40 b8 01 00       	call   c0026e33 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 9d be 01 00       	call   c00274b0 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 59 c7 01 00       	call   c0027d83 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 e3 b7 01 00       	call   c0026e33 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 40 be 01 00       	call   c00274b0 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 fc c6 01 00       	call   c0027d83 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 86 b7 01 00       	call   c0026e33 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 e3 bd 01 00       	call   c00274b0 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 9f c6 01 00       	call   c0027d83 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 29 b7 01 00       	call   c0026e33 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 86 bd 01 00       	call   c00274b0 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 42 c6 01 00       	call   c0027d83 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 cc b6 01 00       	call   c0026e33 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 29 bd 01 00       	call   c00274b0 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 e5 c5 01 00       	call   c0027d83 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 6f b6 01 00       	call   c0026e33 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 cc bc 01 00       	call   c00274b0 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 88 c5 01 00       	call   c0027d83 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 12 b6 01 00       	call   c0026e33 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 6f bc 01 00       	call   c00274b0 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 2b c5 01 00       	call   c0027d83 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 b5 b5 01 00       	call   c0026e33 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 12 bc 01 00       	call   c00274b0 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 ce c4 01 00       	call   c0027d83 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 ca bb 01 00       	call   c00274b0 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 3a c6 01 00       	jmp    c0027f30 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 ac c2 01 00       	call   c0027d7f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 6a c2 01 00       	call   c0027d61 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 01 c0 01 00       	call   c0027b13 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 02 b3 01 00       	call   c0026e33 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 d1 bf 01 00       	call   c0027b13 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 38 bc 01 00       	call   c0027794 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 d7 c1 01 00       	call   c0027d61 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 da c1 01 00       	call   c0027d7f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 ad c1 01 00       	call   c0027d7f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 a6 bb 01 00       	call   c0027794 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 28 c3 01 00       	call   c0027f30 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 03 c3 01 00       	call   c0027f30 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 dd be 01 00       	call   c0027b13 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 34 b8 01 00       	call   c0027484 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 13 c1 01 00       	call   c0027d7f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 ac b1 01 00       	call   c0026e33 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 d0 b7 01 00       	call   c0027484 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 6a c2 01 00       	call   c0027f30 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 aa ba 01 00       	call   c0027794 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 27 b1 01 00       	call   c0026e33 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 53 bd 01 00       	call   c0027b13 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 53 b0 01 00       	call   c0026e33 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 33 b0 01 00       	call   c0026e33 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 03 bd 01 00       	call   c0027b13 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 53 bf 01 00       	call   c0027d7d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 32 b6 01 00       	call   c0027484 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 ac c0 01 00       	call   c0027f10 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 db be 01 00       	call   c0027d61 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 d9 b5 01 00       	call   c0027484 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 57 bc 01 00       	call   c0027b13 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 da b5 01 00       	call   c00274b0 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 2c bc 01 00       	call   c0027b13 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 93 b8 01 00       	call   c0027794 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 12 af 01 00       	call   c0026e33 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 dc bb 01 00       	call   c0027b13 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 28 be 01 00       	call   c0027d7f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 1d b5 01 00       	call   c00274b0 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 ef b4 01 00       	call   c00274b0 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 28 bb 01 00       	call   c0027b13 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 8c b7 01 00       	call   c0027794 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 54 b7 01 00       	call   c0027794 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 d3 ad 01 00       	call   c0026e33 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 b8 be 01 00       	call   c0027f30 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 92 ba 01 00       	call   c0027b13 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 e9 b3 01 00       	call   c0027484 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 c8 bc 01 00       	call   c0027d7f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 60 ad 01 00       	call   c0026e33 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 84 b3 01 00       	call   c0027484 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 1e be 01 00       	call   c0027f30 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 e7 bb 01 00       	call   c0027d7f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 a5 bb 01 00       	call   c0027d61 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 3c b9 01 00       	call   c0027b13 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 3d ac 01 00       	call   c0026e33 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 0c b9 01 00       	call   c0027b13 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 73 b5 01 00       	call   c0027794 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 12 bb 01 00       	call   c0027d61 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 15 bb 01 00       	call   c0027d7f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 e8 ba 01 00       	call   c0027d7f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 e1 b4 01 00       	call   c0027794 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 63 bc 01 00       	call   c0027f30 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 3e bc 01 00       	call   c0027f30 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 18 b8 01 00       	call   c0027b13 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 6f b1 01 00       	call   c0027484 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 4e ba 01 00       	call   c0027d7f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 e7 aa 01 00       	call   c0026e33 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 0b b1 01 00       	call   c0027484 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 a5 bb 01 00       	call   c0027f30 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 e5 b3 01 00       	call   c0027794 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 62 aa 01 00       	call   c0026e33 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 8d b6 01 00       	call   c0027b13 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 8d a9 01 00       	call   c0026e33 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 6d a9 01 00       	call   c0026e33 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 3d b6 01 00       	call   c0027b13 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 8d b8 01 00       	call   c0027d7d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 6b af 01 00       	call   c0027484 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 e5 b9 01 00       	call   c0027f10 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 14 b8 01 00       	call   c0027d61 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 11 af 01 00       	call   c0027484 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 8f b5 01 00       	call   c0027b13 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 12 af 01 00       	call   c00274b0 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 64 b5 01 00       	call   c0027b13 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 cb b1 01 00       	call   c0027794 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 4a a8 01 00       	call   c0026e33 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 14 b5 01 00       	call   c0027b13 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 60 b7 01 00       	call   c0027d7f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 55 ae 01 00       	call   c00274b0 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 27 ae 01 00       	call   c00274b0 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 5e b4 01 00       	call   c0027b13 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 c2 b0 01 00       	call   c0027794 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 8f b0 01 00       	call   c0027794 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 0e a7 01 00       	call   c0026e33 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 f3 b7 01 00       	call   c0027f30 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 cd b3 01 00       	call   c0027b13 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 24 ad 01 00       	call   c0027484 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 03 b6 01 00       	call   c0027d7f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 9b a6 01 00       	call   c0026e33 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 bf ac 01 00       	call   c0027484 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 59 b7 01 00       	call   c0027f30 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 22 b5 01 00       	call   c0027d7f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 e0 b4 01 00       	call   c0027d61 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 77 b2 01 00       	call   c0027b13 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 78 a5 01 00       	call   c0026e33 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 47 b2 01 00       	call   c0027b13 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 ae ae 01 00       	call   c0027794 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 4d b4 01 00       	call   c0027d61 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 50 b4 01 00       	call   c0027d7f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 23 b4 01 00       	call   c0027d7f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 1c ae 01 00       	call   c0027794 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 9e b5 01 00       	call   c0027f30 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 79 b5 01 00       	call   c0027f30 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 53 b1 01 00       	call   c0027b13 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 aa aa 01 00       	call   c0027484 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 89 b3 01 00       	call   c0027d7f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 22 a4 01 00       	call   c0026e33 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 46 aa 01 00       	call   c0027484 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 e0 b4 01 00       	call   c0027f30 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 20 ad 01 00       	call   c0027794 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 9d a3 01 00       	call   c0026e33 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 c8 af 01 00       	call   c0027b13 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 c8 a2 01 00       	call   c0026e33 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 a8 a2 01 00       	call   c0026e33 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 78 af 01 00       	call   c0027b13 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 c8 b1 01 00       	call   c0027d7d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 a6 a8 01 00       	call   c0027484 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 20 b3 01 00       	call   c0027f10 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 4f b1 01 00       	call   c0027d61 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 4c a8 01 00       	call   c0027484 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 ca ae 01 00       	call   c0027b13 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 4d a8 01 00       	call   c00274b0 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 9f ae 01 00       	call   c0027b13 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 06 ab 01 00       	call   c0027794 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 85 a1 01 00       	call   c0026e33 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 4f ae 01 00       	call   c0027b13 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 9b b0 01 00       	call   c0027d7f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 90 a7 01 00       	call   c00274b0 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 62 a7 01 00       	call   c00274b0 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 99 ad 01 00       	call   c0027b13 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 fd a9 01 00       	call   c0027794 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 ca a9 01 00       	call   c0027794 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 49 a0 01 00       	call   c0026e33 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 2e b1 01 00       	call   c0027f30 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 08 ad 01 00       	call   c0027b13 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 5f a6 01 00       	call   c0027484 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 3e af 01 00       	call   c0027d7f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 d6 9f 01 00       	call   c0026e33 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 fa a5 01 00       	call   c0027484 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 94 b0 01 00       	call   c0027f30 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 5d ae 01 00       	call   c0027d7f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 1b ae 01 00       	call   c0027d61 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 b2 ab 01 00       	call   c0027b13 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 b3 9e 01 00       	call   c0026e33 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 82 ab 01 00       	call   c0027b13 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 e9 a7 01 00       	call   c0027794 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 88 ad 01 00       	call   c0027d61 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 8b ad 01 00       	call   c0027d7f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 5e ad 01 00       	call   c0027d7f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 57 a7 01 00       	call   c0027794 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 d9 ae 01 00       	call   c0027f30 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 b4 ae 01 00       	call   c0027f30 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 8e aa 01 00       	call   c0027b13 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 e5 a3 01 00       	call   c0027484 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 c4 ac 01 00       	call   c0027d7f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 5d 9d 01 00       	call   c0026e33 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 81 a3 01 00       	call   c0027484 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 1b ae 01 00       	call   c0027f30 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 5b a6 01 00       	call   c0027794 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 d8 9c 01 00       	call   c0026e33 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 03 a9 01 00       	call   c0027b13 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 03 9c 01 00       	call   c0026e33 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 e3 9b 01 00       	call   c0026e33 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 b3 a8 01 00       	call   c0027b13 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 03 ab 01 00       	call   c0027d7d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 e1 a1 01 00       	call   c0027484 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 5b ac 01 00       	call   c0027f10 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 8a aa 01 00       	call   c0027d61 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 87 a1 01 00       	call   c0027484 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 05 a8 01 00       	call   c0027b13 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 88 a1 01 00       	call   c00274b0 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 da a7 01 00       	call   c0027b13 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 41 a4 01 00       	call   c0027794 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 c0 9a 01 00       	call   c0026e33 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 8a a7 01 00       	call   c0027b13 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 d6 a9 01 00       	call   c0027d7f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 cb a0 01 00       	call   c00274b0 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 9d a0 01 00       	call   c00274b0 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 d4 a6 01 00       	call   c0027b13 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 38 a3 01 00       	call   c0027794 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 05 a3 01 00       	call   c0027794 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 84 99 01 00       	call   c0026e33 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 69 aa 01 00       	call   c0027f30 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 43 a6 01 00       	call   c0027b13 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 9a 9f 01 00       	call   c0027484 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 79 a8 01 00       	call   c0027d7f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 11 99 01 00       	call   c0026e33 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 35 9f 01 00       	call   c0027484 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 cf a9 01 00       	call   c0027f30 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 95 a7 01 00       	call   c0027d7f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 53 a7 01 00       	call   c0027d61 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 ea a4 01 00       	call   c0027b13 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 eb 97 01 00       	call   c0026e33 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 ba a4 01 00       	call   c0027b13 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 21 a1 01 00       	call   c0027794 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 c0 a6 01 00       	call   c0027d61 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 c3 a6 01 00       	call   c0027d7f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 96 a6 01 00       	call   c0027d7f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 8f a0 01 00       	call   c0027794 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 11 a8 01 00       	call   c0027f30 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 e8 a7 01 00       	call   c0027f30 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 c2 a3 01 00       	call   c0027b13 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 19 9d 01 00       	call   c0027484 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 f8 a5 01 00       	call   c0027d7f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 91 96 01 00       	call   c0026e33 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 b9 9c 01 00       	call   c0027484 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 53 a7 01 00       	call   c0027f30 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 94 9f 01 00       	call   c0027794 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 11 96 01 00       	call   c0026e33 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 3d a2 01 00       	call   c0027b13 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 3d 95 01 00       	call   c0026e33 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 1d 95 01 00       	call   c0026e33 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 ed a1 01 00       	call   c0027b13 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 21 a4 01 00       	call   c0027d61 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 18 9b 01 00       	call   c0027484 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 92 a5 01 00       	call   c0027f10 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 c1 a3 01 00       	call   c0027d61 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 bb 9a 01 00       	call   c0027484 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 39 a1 01 00       	call   c0027b13 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 bc 9a 01 00       	call   c00274b0 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 0e a1 01 00       	call   c0027b13 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 75 9d 01 00       	call   c0027794 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 f4 93 01 00       	call   c0026e33 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 be a0 01 00       	call   c0027b13 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 0a a3 01 00       	call   c0027d7f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 ff 99 01 00       	call   c00274b0 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 d1 99 01 00       	call   c00274b0 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 15 a0 01 00       	call   c0027b13 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 7c 9c 01 00       	call   c0027794 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 65 99 01 00       	call   c00274b0 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 21 a2 01 00       	call   c0027d83 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 14 9c 01 00       	call   c0027794 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 93 92 01 00       	call   c0026e33 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 78 a3 01 00       	call   c0027f30 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 52 9f 01 00       	call   c0027b13 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 a9 98 01 00       	call   c0027484 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 88 a1 01 00       	call   c0027d7f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 20 92 01 00       	call   c0026e33 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 48 98 01 00       	call   c0027484 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 e2 a2 01 00       	call   c0027f30 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 24 97 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd68dc]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 18 97 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd68e8]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 a5 1b 00 00       	call   c000f856 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 9d 9f 01 00       	call   c0027d7f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 5b 9f 01 00       	call   c0027d61 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 47 9f 01 00       	call   c0027d7f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 b9 9c 01 00       	call   c0027b13 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 37 96 01 00       	call   c00274b0 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 89 9c 01 00       	call   c0027b13 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 8f 8f 01 00       	call   c0026e33 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 5e 9c 01 00       	call   c0027b13 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 ae 9e 01 00       	call   c0027d7d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 8f 95 01 00       	call   c0027484 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 09 a0 01 00       	call   c0027f10 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 38 9e 01 00       	call   c0027d61 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 37 95 01 00       	call   c0027484 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 b5 9b 01 00       	call   c0027b13 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 38 95 01 00       	call   c00274b0 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 8a 9b 01 00       	call   c0027b13 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 f1 97 01 00       	call   c0027794 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 70 8e 01 00       	call   c0026e33 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 98 97 01 00       	call   c0027794 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 1e 8e 01 00       	call   c0026e33 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 04 9f 01 00       	call   c0027f30 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 de 9a 01 00       	call   c0027b13 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 35 94 01 00       	call   c0027484 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 14 9d 01 00       	call   c0027d7f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 ad 8d 01 00       	call   c0026e33 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 d9 93 01 00       	call   c0027484 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 73 9e 01 00       	call   c0027f30 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 28 9a 01 00       	call   c0027b13 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 a5 93 01 00       	call   c00274b0 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 f6 99 01 00       	call   c0027b13 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 fc 8c 01 00       	call   c0026e33 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 cc 99 01 00       	call   c0027b13 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 20 9c 01 00       	call   c0027d81 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 f9 92 01 00       	call   c0027484 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 73 9d 01 00       	call   c0027f10 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 a2 9b 01 00       	call   c0027d61 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 a0 92 01 00       	call   c0027484 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 1e 99 01 00       	call   c0027b13 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 a1 92 01 00       	call   c00274b0 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 f3 98 01 00       	call   c0027b13 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 5a 95 01 00       	call   c0027794 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 d9 8b 01 00       	call   c0026e33 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 f5 94 01 00       	call   c0027794 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 74 8b 01 00       	call   c0026e33 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 5a 9c 01 00       	call   c0027f30 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 34 98 01 00       	call   c0027b13 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 8b 91 01 00       	call   c0027484 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 6a 9a 01 00       	call   c0027d7f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 03 8b 01 00       	call   c0026e33 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 2f 91 01 00       	call   c0027484 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 a0 97 01 00       	call   c0027b13 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 a6 8a 01 00       	call   c0026e33 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 3e 98 02 c0       	mov    eax,0xc002983e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 4f 98 02 c0       	mov    eax,0xc002984f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e7 13 00 00       	call   c000f856 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e9 13 00 00       	call   c000f876 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 58 13 00 00       	call   c000f846 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 86 98 02 c0       	push   0xc0029886
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 88 db 02 c0       	mov    eax,0xc002db88
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 8f 98 02 c0       	push   0xc002988f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 ac 62 02 c0       	mov    eax,0xc00262ac
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 99 98 02 c0       	push   0xc0029899
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 e0 5f 02 c0       	mov    eax,0xc0025fe0
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 a2 98 02 c0       	push   0xc00298a2
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 ac 63 02 c0       	mov    eax,0xc00263ac
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 ac 98 02 c0       	push   0xc00298ac
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 2c 61 02 c0       	mov    eax,0xc002612c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 b5 98 02 c0       	push   0xc00298b5
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 8c db 02 c0       	mov    eax,0xc002db8c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 c2 98 02 c0       	push   0xc00298c2
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 8d db 02 c0       	mov    eax,0xc002db8d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 8f 5a 00 00       	call   c00140b2 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 ed 11 00 00       	call   c000f846 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 f4 10 03 c0    	push   DWORD PTR ds:0xc00310f4
c000e668:	68 cf 98 02 c0       	push   0xc00298cf
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 8b ee 00 00       	call   c001d500 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 db f1 00 c0       	push   0xc000f1db
c000e684:	53                   	push   ebx
c000e685:	e8 74 f1 00 00       	call   c001d7fe <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 5c e0 01 c0       	push   0xc001e05c
c000e693:	ff 35 f4 10 03 c0    	push   DWORD PTR ds:0xc00310f4
c000e699:	e8 60 f1 00 00       	call   c001d7fe <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 a8 10 03 c0       	mov    ds:0xc00310a8,eax
c000e6a6:	c6 05 8d db 02 c0 01 	mov    BYTE PTR ds:0xc002db8d,0x1
c000e6ad:	e8 2b fd 00 00       	call   c001e3dd <Vm::initialise8086()>
c000e6b2:	e8 e3 47 00 00       	call   c0012e9a <Fs::initVFS()>
c000e6b7:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 e7 d7 00 00       	call   c001beba <Sys::loadSyscalls()>
c000e6d3:	e8 2c b8 00 00       	call   c0019f04 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 dc 98 02 c0       	push   0xc00298dc
c000e6e2:	68 e5 98 02 c0       	push   0xc00298e5
c000e6e7:	e8 3e c5 00 00       	call   c001ac2a <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 8e 52 00 00       	call   c0013982 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 81 59 00 00       	call   c0014086 <Device::loadDriversForAll()>
c000e705:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000e70c:	e8 14 b3 00 00       	call   c0019a25 <Krnl::startCPU(int)>
c000e711:	5a                   	pop    edx
c000e712:	8b 1d 88 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db88
c000e718:	59                   	pop    ecx
c000e719:	6a 01                	push   0x1
c000e71b:	68 ed 98 02 c0       	push   0xc00298ed
c000e720:	e8 00 e9 00 00       	call   c001d025 <Thr::loadDLL(char const*, bool)>
c000e725:	5a                   	pop    edx
c000e726:	59                   	pop    ecx
c000e727:	53                   	push   ebx
c000e728:	50                   	push   eax
c000e729:	e8 2b eb 00 00       	call   c001d259 <Thr::executeDLL(unsigned long, void*)>
c000e72e:	83 c4 10             	add    esp,0x10
c000e731:	83 ec 0c             	sub    esp,0xc
c000e734:	6a 02                	push   0x2
c000e736:	e8 27 f4 00 00       	call   c001db62 <blockTask(TaskState)>
c000e73b:	83 c4 10             	add    esp,0x10
c000e73e:	eb f1                	jmp    c000e731 <Krnl::firstTask()+0xe7>

c000e740 <Computer::Computer()>:
c000e740:	83 ec 0c             	sub    esp,0xc
c000e743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e747:	83 ec 08             	sub    esp,0x8
c000e74a:	68 09 99 02 c0       	push   0xc0029909
c000e74f:	50                   	push   eax
c000e750:	e8 d7 59 00 00       	call   c001412c <Device::Device(char const*)>
c000e755:	83 c4 10             	add    esp,0x10
c000e758:	ba a8 9a 02 c0       	mov    edx,0xc0029aa8
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	89 10                	mov    DWORD PTR [eax],edx
c000e763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e767:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e775:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e77f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e783:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e789:	83 ca 04             	or     edx,0x4
c000e78c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e796:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e79c:	0f b6 d0             	movzx  edx,al
c000e79f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a3:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ae:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7b4:	0f b6 d0             	movzx  edx,al
c000e7b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7bb:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ca:	8d 50 01             	lea    edx,[eax+0x1]
c000e7cd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7d1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d7:	0f b6 d0             	movzx  edx,al
c000e7da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7de:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7e2:	83 e1 3f             	and    ecx,0x3f
c000e7e5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7f3:	0f b6 d0             	movzx  edx,al
c000e7f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fa:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e801:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e805:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e80b:	0f b6 d0             	movzx  edx,al
c000e80e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e812:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e821:	8d 50 01             	lea    edx,[eax+0x1]
c000e824:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e828:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e82e:	0f b6 d0             	movzx  edx,al
c000e831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e835:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e839:	83 e1 3f             	and    ecx,0x3f
c000e83c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e862:	0f b6 d0             	movzx  edx,al
c000e865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e869:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e86e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e872:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e878:	8d 50 01             	lea    edx,[eax+0x1]
c000e87b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e87f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e885:	0f b6 d0             	movzx  edx,al
c000e888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e88c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e890:	83 e1 3f             	and    ecx,0x3f
c000e893:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e897:	90                   	nop
c000e898:	83 c4 0c             	add    esp,0xc
c000e89b:	c3                   	ret    

c000e89c <Computer::setBootMessage(char const*)>:
c000e89c:	c3                   	ret    
c000e89d:	90                   	nop

c000e89e <Computer::detectFeatures()>:
c000e89e:	55                   	push   ebp
c000e89f:	57                   	push   edi
c000e8a0:	56                   	push   esi
c000e8a1:	53                   	push   ebx
c000e8a2:	83 ec 1c             	sub    esp,0x1c
c000e8a5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a9:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8b3:	e8 2c 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b8:	85 c0                	test   eax,eax
c000e8ba:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8c0:	0f 95 c2             	setne  dl
c000e8c3:	83 e0 fd             	and    eax,0xfffffffd
c000e8c6:	d1 e2                	shl    edx,1
c000e8c8:	09 d0                	or     eax,edx
c000e8ca:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8d0:	a8 02                	test   al,0x2
c000e8d2:	75 46                	jne    c000e91a <Computer::detectFeatures()+0x7c>
c000e8d4:	f6 05 a1 db 02 c0 04 	test   BYTE PTR ds:0xc002dba1,0x4
c000e8db:	74 07                	je     c000e8e4 <Computer::detectFeatures()+0x46>
c000e8dd:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8e4:	e8 8d 76 01 00       	call   c0025f76 <x87Detect>
c000e8e9:	83 e0 01             	and    eax,0x1
c000e8ec:	c1 e0 04             	shl    eax,0x4
c000e8ef:	88 c2                	mov    dl,al
c000e8f1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f7:	83 e0 ef             	and    eax,0xffffffef
c000e8fa:	09 d0                	or     eax,edx
c000e8fc:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e902:	a8 10                	test   al,0x10
c000e904:	0f 85 2a 01 00 00    	jne    c000ea34 <Computer::detectFeatures()+0x196>
c000e90a:	84 c0                	test   al,al
c000e90c:	0f 88 45 01 00 00    	js     c000ea57 <Computer::detectFeatures()+0x1b9>
c000e912:	83 c4 1c             	add    esp,0x1c
c000e915:	5b                   	pop    ebx
c000e916:	5e                   	pop    esi
c000e917:	5f                   	pop    edi
c000e918:	5d                   	pop    ebp
c000e919:	c3                   	ret    
c000e91a:	83 ec 0c             	sub    esp,0xc
c000e91d:	6a 20                	push   0x20
c000e91f:	e8 5e 9f 00 00       	call   c0018882 <CPU::cpuidCheckEDX(unsigned int)>
c000e924:	83 e0 01             	and    eax,0x1
c000e927:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e92e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e934:	83 e0 f7             	and    eax,0xfffffff7
c000e937:	09 d0                	or     eax,edx
c000e939:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e93f:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e946:	e8 37 9f 00 00       	call   c0018882 <CPU::cpuidCheckEDX(unsigned int)>
c000e94b:	83 e0 01             	and    eax,0x1
c000e94e:	88 c2                	mov    dl,al
c000e950:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e956:	83 e0 fe             	and    eax,0xfffffffe
c000e959:	09 d0                	or     eax,edx
c000e95b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e961:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e968:	e8 15 9f 00 00       	call   c0018882 <CPU::cpuidCheckEDX(unsigned int)>
c000e96d:	c1 e0 07             	shl    eax,0x7
c000e970:	88 c2                	mov    dl,al
c000e972:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e978:	83 e0 7f             	and    eax,0x7f
c000e97b:	09 d0                	or     eax,edx
c000e97d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e983:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e98a:	e8 f3 9e 00 00       	call   c0018882 <CPU::cpuidCheckEDX(unsigned int)>
c000e98f:	83 c4 10             	add    esp,0x10
c000e992:	83 e0 01             	and    eax,0x1
c000e995:	c1 e0 05             	shl    eax,0x5
c000e998:	88 c2                	mov    dl,al
c000e99a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9a0:	83 e0 df             	and    eax,0xffffffdf
c000e9a3:	09 d0                	or     eax,edx
c000e9a5:	f7 05 a0 db 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002dba0,0x401
c000e9af:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9b5:	0f 84 c2 00 00 00    	je     c000ea7d <Computer::detectFeatures()+0x1df>
c000e9bb:	83 e0 fe             	and    eax,0xfffffffe
c000e9be:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	88 c2                	mov    dl,al
c000e9cc:	83 e2 09             	and    edx,0x9
c000e9cf:	fe ca                	dec    dl
c000e9d1:	75 09                	jne    c000e9dc <Computer::detectFeatures()+0x13e>
c000e9d3:	83 e0 fe             	and    eax,0xfffffffe
c000e9d6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9dc:	83 ec 0c             	sub    esp,0xc
c000e9df:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9e3:	50                   	push   eax
c000e9e4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e8:	55                   	push   ebp
c000e9e9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9ed:	57                   	push   edi
c000e9ee:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9f2:	56                   	push   esi
c000e9f3:	68 00 00 00 80       	push   0x80000000
c000e9f8:	e8 01 9e 00 00       	call   c00187fe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9fd:	83 c4 20             	add    esp,0x20
c000ea00:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea07:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea0b:	0f 86 c3 fe ff ff    	jbe    c000e8d4 <Computer::detectFeatures()+0x36>
c000ea11:	83 ec 0c             	sub    esp,0xc
c000ea14:	50                   	push   eax
c000ea15:	55                   	push   ebp
c000ea16:	57                   	push   edi
c000ea17:	56                   	push   esi
c000ea18:	68 01 00 00 80       	push   0x80000001
c000ea1d:	e8 dc 9d 00 00       	call   c00187fe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea22:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea2c:	83 c4 20             	add    esp,0x20
c000ea2f:	e9 a0 fe ff ff       	jmp    c000e8d4 <Computer::detectFeatures()+0x36>
c000ea34:	e8 f7 74 01 00       	call   c0025f30 <absolutelyNoChanceInHell>
c000ea39:	88 c2                	mov    dl,al
c000ea3b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea41:	c1 e2 07             	shl    edx,0x7
c000ea44:	83 e0 7f             	and    eax,0x7f
c000ea47:	09 d0                	or     eax,edx
c000ea49:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4f:	84 c0                	test   al,al
c000ea51:	0f 89 bb fe ff ff    	jns    c000e912 <Computer::detectFeatures()+0x74>
c000ea57:	e8 b4 74 01 00       	call   c0025f10 <avxDetect>
c000ea5c:	83 e0 01             	and    eax,0x1
c000ea5f:	c1 e0 05             	shl    eax,0x5
c000ea62:	88 c2                	mov    dl,al
c000ea64:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea6a:	83 e0 df             	and    eax,0xffffffdf
c000ea6d:	09 d0                	or     eax,edx
c000ea6f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea75:	83 c4 1c             	add    esp,0x1c
c000ea78:	5b                   	pop    ebx
c000ea79:	5e                   	pop    esi
c000ea7a:	5f                   	pop    edi
c000ea7b:	5d                   	pop    ebp
c000ea7c:	c3                   	ret    
c000ea7d:	83 ec 0c             	sub    esp,0xc
c000ea80:	68 00 02 00 00       	push   0x200
c000ea85:	e8 f8 9d 00 00       	call   c0018882 <CPU::cpuidCheckEDX(unsigned int)>
c000ea8a:	83 c4 10             	add    esp,0x10
c000ea8d:	83 e0 01             	and    eax,0x1
c000ea90:	88 c2                	mov    dl,al
c000ea92:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea98:	83 e0 fe             	and    eax,0xfffffffe
c000ea9b:	09 d0                	or     eax,edx
c000ea9d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eaa3:	e9 1c ff ff ff       	jmp    c000e9c4 <Computer::detectFeatures()+0x126>

c000eaa8 <Computer::displayFeatures()>:
c000eaa8:	53                   	push   ebx
c000eaa9:	83 ec 14             	sub    esp,0x14
c000eaac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eab0:	68 19 99 02 c0       	push   0xc0029919
c000eab5:	e8 5b 40 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000eaba:	83 c4 10             	add    esp,0x10
c000eabd:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eac4:	0f 85 73 02 00 00    	jne    c000ed3d <Computer::displayFeatures()+0x295>
c000eaca:	b8 16 99 02 c0       	mov    eax,0xc0029916
c000eacf:	83 ec 08             	sub    esp,0x8
c000ead2:	50                   	push   eax
c000ead3:	68 2c 99 02 c0       	push   0xc002992c
c000ead8:	e8 38 40 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000eadd:	83 c4 10             	add    esp,0x10
c000eae0:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae7:	0f 85 8c 02 00 00    	jne    c000ed79 <Computer::displayFeatures()+0x2d1>
c000eaed:	b8 16 99 02 c0       	mov    eax,0xc0029916
c000eaf2:	83 ec 08             	sub    esp,0x8
c000eaf5:	50                   	push   eax
c000eaf6:	68 3d 99 02 c0       	push   0xc002993d
c000eafb:	e8 15 40 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000eb00:	83 c4 10             	add    esp,0x10
c000eb03:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb0a:	0f 85 5f 02 00 00    	jne    c000ed6f <Computer::displayFeatures()+0x2c7>
c000eb10:	b8 16 99 02 c0       	mov    eax,0xc0029916
c000eb15:	83 ec 08             	sub    esp,0x8
c000eb18:	50                   	push   eax
c000eb19:	68 4e 99 02 c0       	push   0xc002994e
c000eb1e:	e8 f2 3f 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000eb23:	83 c4 10             	add    esp,0x10
c000eb26:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb2d:	0f 85 32 02 00 00    	jne    c000ed65 <Computer::displayFeatures()+0x2bd>
c000eb33:	b8 16 99 02 c0       	mov    eax,0xc0029916
c000eb38:	83 ec 08             	sub    esp,0x8
c000eb3b:	50                   	push   eax
c000eb3c:	68 5f 99 02 c0       	push   0xc002995f
c000eb41:	e8 cf 3f 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000eb46:	83 c4 10             	add    esp,0x10
c000eb49:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb50:	0f 85 05 02 00 00    	jne    c000ed5b <Computer::displayFeatures()+0x2b3>
c000eb56:	b8 16 99 02 c0       	mov    eax,0xc0029916
c000eb5b:	83 ec 08             	sub    esp,0x8
c000eb5e:	50                   	push   eax
c000eb5f:	68 70 99 02 c0       	push   0xc0029970
c000eb64:	e8 ac 3f 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000eb69:	83 c4 10             	add    esp,0x10
c000eb6c:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb73:	0f 85 d8 01 00 00    	jne    c000ed51 <Computer::displayFeatures()+0x2a9>
c000eb79:	b8 16 99 02 c0       	mov    eax,0xc0029916
c000eb7e:	83 ec 08             	sub    esp,0x8
c000eb81:	50                   	push   eax
c000eb82:	68 81 99 02 c0       	push   0xc0029981
c000eb87:	e8 89 3f 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000eb8c:	83 c4 10             	add    esp,0x10
c000eb8f:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb96:	0f 85 ab 01 00 00    	jne    c000ed47 <Computer::displayFeatures()+0x29f>
c000eb9c:	b8 16 99 02 c0       	mov    eax,0xc0029916
c000eba1:	83 ec 08             	sub    esp,0x8
c000eba4:	50                   	push   eax
c000eba5:	68 92 99 02 c0       	push   0xc0029992
c000ebaa:	e8 66 3f 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000ebaf:	83 c4 10             	add    esp,0x10
c000ebb2:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb9:	0f 88 1b 02 00 00    	js     c000edda <Computer::displayFeatures()+0x332>
c000ebbf:	b8 16 99 02 c0       	mov    eax,0xc0029916
c000ebc4:	83 ec 08             	sub    esp,0x8
c000ebc7:	50                   	push   eax
c000ebc8:	68 a3 99 02 c0       	push   0xc00299a3
c000ebcd:	e8 43 3f 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000ebd2:	83 c4 10             	add    esp,0x10
c000ebd5:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebdc:	0f 85 a1 01 00 00    	jne    c000ed83 <Computer::displayFeatures()+0x2db>
c000ebe2:	b8 16 99 02 c0       	mov    eax,0xc0029916
c000ebe7:	83 ec 08             	sub    esp,0x8
c000ebea:	50                   	push   eax
c000ebeb:	68 b4 99 02 c0       	push   0xc00299b4
c000ebf0:	e8 20 3f 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000ebf5:	83 c4 10             	add    esp,0x10
c000ebf8:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebff:	0f 85 cb 01 00 00    	jne    c000edd0 <Computer::displayFeatures()+0x328>
c000ec05:	b8 16 99 02 c0       	mov    eax,0xc0029916
c000ec0a:	83 ec 08             	sub    esp,0x8
c000ec0d:	50                   	push   eax
c000ec0e:	68 c5 99 02 c0       	push   0xc00299c5
c000ec13:	e8 fd 3e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000ec18:	83 c4 10             	add    esp,0x10
c000ec1b:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec22:	0f 85 9e 01 00 00    	jne    c000edc6 <Computer::displayFeatures()+0x31e>
c000ec28:	b8 16 99 02 c0       	mov    eax,0xc0029916
c000ec2d:	83 ec 08             	sub    esp,0x8
c000ec30:	50                   	push   eax
c000ec31:	68 d6 99 02 c0       	push   0xc00299d6
c000ec36:	e8 da 3e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000ec3b:	83 c4 10             	add    esp,0x10
c000ec3e:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec45:	0f 85 71 01 00 00    	jne    c000edbc <Computer::displayFeatures()+0x314>
c000ec4b:	b8 16 99 02 c0       	mov    eax,0xc0029916
c000ec50:	83 ec 08             	sub    esp,0x8
c000ec53:	50                   	push   eax
c000ec54:	68 e7 99 02 c0       	push   0xc00299e7
c000ec59:	e8 b7 3e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000ec5e:	83 c4 10             	add    esp,0x10
c000ec61:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec68:	0f 85 44 01 00 00    	jne    c000edb2 <Computer::displayFeatures()+0x30a>
c000ec6e:	b8 16 99 02 c0       	mov    eax,0xc0029916
c000ec73:	83 ec 08             	sub    esp,0x8
c000ec76:	50                   	push   eax
c000ec77:	68 f8 99 02 c0       	push   0xc00299f8
c000ec7c:	e8 94 3e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000ec81:	83 c4 10             	add    esp,0x10
c000ec84:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec8b:	0f 85 17 01 00 00    	jne    c000eda8 <Computer::displayFeatures()+0x300>
c000ec91:	b8 16 99 02 c0       	mov    eax,0xc0029916
c000ec96:	83 ec 08             	sub    esp,0x8
c000ec99:	50                   	push   eax
c000ec9a:	68 09 9a 02 c0       	push   0xc0029a09
c000ec9f:	e8 71 3e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000eca4:	83 c4 10             	add    esp,0x10
c000eca7:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ecae:	0f 85 ea 00 00 00    	jne    c000ed9e <Computer::displayFeatures()+0x2f6>
c000ecb4:	b8 16 99 02 c0       	mov    eax,0xc0029916
c000ecb9:	83 ec 08             	sub    esp,0x8
c000ecbc:	50                   	push   eax
c000ecbd:	68 1a 9a 02 c0       	push   0xc0029a1a
c000ecc2:	e8 4e 3e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000ecc7:	83 c4 10             	add    esp,0x10
c000ecca:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ecd1:	0f 88 0d 01 00 00    	js     c000ede4 <Computer::displayFeatures()+0x33c>
c000ecd7:	b8 16 99 02 c0       	mov    eax,0xc0029916
c000ecdc:	83 ec 08             	sub    esp,0x8
c000ecdf:	50                   	push   eax
c000ece0:	68 2b 9a 02 c0       	push   0xc0029a2b
c000ece5:	e8 2b 3e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000ecea:	83 c4 10             	add    esp,0x10
c000eced:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecf4:	0f 85 9a 00 00 00    	jne    c000ed94 <Computer::displayFeatures()+0x2ec>
c000ecfa:	b8 16 99 02 c0       	mov    eax,0xc0029916
c000ecff:	83 ec 08             	sub    esp,0x8
c000ed02:	50                   	push   eax
c000ed03:	68 3c 9a 02 c0       	push   0xc0029a3c
c000ed08:	e8 08 3e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000ed0d:	83 c4 10             	add    esp,0x10
c000ed10:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed17:	75 74                	jne    c000ed8d <Computer::displayFeatures()+0x2e5>
c000ed19:	b8 16 99 02 c0       	mov    eax,0xc0029916
c000ed1e:	83 ec 08             	sub    esp,0x8
c000ed21:	50                   	push   eax
c000ed22:	68 4d 9a 02 c0       	push   0xc0029a4d
c000ed27:	e8 e9 3d 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000ed2c:	c7 44 24 20 30 b3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b330
c000ed34:	83 c4 18             	add    esp,0x18
c000ed37:	5b                   	pop    ebx
c000ed38:	e9 d8 3d 00 00       	jmp    c0012b15 <Dbg::kprintf(char const*, ...)>
c000ed3d:	b8 12 99 02 c0       	mov    eax,0xc0029912
c000ed42:	e9 88 fd ff ff       	jmp    c000eacf <Computer::displayFeatures()+0x27>
c000ed47:	b8 12 99 02 c0       	mov    eax,0xc0029912
c000ed4c:	e9 50 fe ff ff       	jmp    c000eba1 <Computer::displayFeatures()+0xf9>
c000ed51:	b8 12 99 02 c0       	mov    eax,0xc0029912
c000ed56:	e9 23 fe ff ff       	jmp    c000eb7e <Computer::displayFeatures()+0xd6>
c000ed5b:	b8 12 99 02 c0       	mov    eax,0xc0029912
c000ed60:	e9 f6 fd ff ff       	jmp    c000eb5b <Computer::displayFeatures()+0xb3>
c000ed65:	b8 12 99 02 c0       	mov    eax,0xc0029912
c000ed6a:	e9 c9 fd ff ff       	jmp    c000eb38 <Computer::displayFeatures()+0x90>
c000ed6f:	b8 12 99 02 c0       	mov    eax,0xc0029912
c000ed74:	e9 9c fd ff ff       	jmp    c000eb15 <Computer::displayFeatures()+0x6d>
c000ed79:	b8 12 99 02 c0       	mov    eax,0xc0029912
c000ed7e:	e9 6f fd ff ff       	jmp    c000eaf2 <Computer::displayFeatures()+0x4a>
c000ed83:	b8 12 99 02 c0       	mov    eax,0xc0029912
c000ed88:	e9 5a fe ff ff       	jmp    c000ebe7 <Computer::displayFeatures()+0x13f>
c000ed8d:	b8 12 99 02 c0       	mov    eax,0xc0029912
c000ed92:	eb 8a                	jmp    c000ed1e <Computer::displayFeatures()+0x276>
c000ed94:	b8 12 99 02 c0       	mov    eax,0xc0029912
c000ed99:	e9 61 ff ff ff       	jmp    c000ecff <Computer::displayFeatures()+0x257>
c000ed9e:	b8 12 99 02 c0       	mov    eax,0xc0029912
c000eda3:	e9 11 ff ff ff       	jmp    c000ecb9 <Computer::displayFeatures()+0x211>
c000eda8:	b8 12 99 02 c0       	mov    eax,0xc0029912
c000edad:	e9 e4 fe ff ff       	jmp    c000ec96 <Computer::displayFeatures()+0x1ee>
c000edb2:	b8 12 99 02 c0       	mov    eax,0xc0029912
c000edb7:	e9 b7 fe ff ff       	jmp    c000ec73 <Computer::displayFeatures()+0x1cb>
c000edbc:	b8 12 99 02 c0       	mov    eax,0xc0029912
c000edc1:	e9 8a fe ff ff       	jmp    c000ec50 <Computer::displayFeatures()+0x1a8>
c000edc6:	b8 12 99 02 c0       	mov    eax,0xc0029912
c000edcb:	e9 5d fe ff ff       	jmp    c000ec2d <Computer::displayFeatures()+0x185>
c000edd0:	b8 12 99 02 c0       	mov    eax,0xc0029912
c000edd5:	e9 30 fe ff ff       	jmp    c000ec0a <Computer::displayFeatures()+0x162>
c000edda:	b8 12 99 02 c0       	mov    eax,0xc0029912
c000eddf:	e9 e0 fd ff ff       	jmp    c000ebc4 <Computer::displayFeatures()+0x11c>
c000ede4:	b8 12 99 02 c0       	mov    eax,0xc0029912
c000ede9:	e9 ee fe ff ff       	jmp    c000ecdc <Computer::displayFeatures()+0x234>

c000edee <Computer::rdmsr(unsigned int)>:
c000edee:	83 ec 0c             	sub    esp,0xc
c000edf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edf5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edfc:	74 0a                	je     c000ee08 <Computer::rdmsr(unsigned int)+0x1a>
c000edfe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee02:	0f 32                	rdmsr  
c000ee04:	83 c4 0c             	add    esp,0xc
c000ee07:	c3                   	ret    
c000ee08:	83 ec 0c             	sub    esp,0xc
c000ee0b:	68 5e 9a 02 c0       	push   0xc0029a5e
c000ee10:	e8 28 b2 00 00       	call   c001a03d <Krnl::panic(char const*)>
c000ee15:	83 c4 10             	add    esp,0x10
c000ee18:	eb e4                	jmp    c000edfe <Computer::rdmsr(unsigned int)+0x10>

c000ee1a <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee1a:	57                   	push   edi
c000ee1b:	56                   	push   esi
c000ee1c:	52                   	push   edx
c000ee1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee21:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee25:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee29:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee30:	74 0e                	je     c000ee40 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee32:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee36:	89 f0                	mov    eax,esi
c000ee38:	89 fa                	mov    edx,edi
c000ee3a:	0f 30                	wrmsr  
c000ee3c:	58                   	pop    eax
c000ee3d:	5e                   	pop    esi
c000ee3e:	5f                   	pop    edi
c000ee3f:	c3                   	ret    
c000ee40:	83 ec 0c             	sub    esp,0xc
c000ee43:	68 64 9a 02 c0       	push   0xc0029a64
c000ee48:	e8 f0 b1 00 00       	call   c001a03d <Krnl::panic(char const*)>
c000ee4d:	83 c4 10             	add    esp,0x10
c000ee50:	eb e0                	jmp    c000ee32 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee52 <Computer::nmiEnabled()>:
c000ee52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee56:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee5c:	c3                   	ret    
c000ee5d:	90                   	nop

c000ee5e <Computer::readCMOS(unsigned char)>:
c000ee5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee62:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee69:	19 c0                	sbb    eax,eax
c000ee6b:	83 e0 80             	and    eax,0xffffff80
c000ee6e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee72:	e6 70                	out    0x70,al
c000ee74:	e4 71                	in     al,0x71
c000ee76:	c3                   	ret    
c000ee77:	90                   	nop

c000ee78 <Computer::enableNMI(bool)>:
c000ee78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee80:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee86:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee8e:	eb ce                	jmp    c000ee5e <Computer::readCMOS(unsigned char)>

c000ee90 <Computer::open(int, int, void*)>:
c000ee90:	56                   	push   esi
c000ee91:	53                   	push   ebx
c000ee92:	83 ec 10             	sub    esp,0x10
c000ee95:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee99:	f6 05 a0 db 02 c0 04 	test   BYTE PTR ds:0xc002dba0,0x4
c000eea0:	68 68 12 00 00       	push   0x1268
c000eea5:	0f 94 05 c4 ca 02 c0 	sete   BYTE PTR ds:0xc002cac4
c000eeac:	e8 95 09 00 00       	call   c000f846 <malloc>
c000eeb1:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeb4:	89 c6                	mov    esi,eax
c000eeb6:	e8 97 8e 00 00       	call   c0017d52 <ACPI::ACPI()>
c000eebb:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eec1:	58                   	pop    eax
c000eec2:	5a                   	pop    edx
c000eec3:	56                   	push   esi
c000eec4:	53                   	push   ebx
c000eec5:	e8 72 50 00 00       	call   c0013f3c <Device::addChild(Device*)>
c000eeca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecd:	e8 cc f9 ff ff       	call   c000e89e <Computer::detectFeatures()>
c000eed2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eed5:	e8 ce fb ff ff       	call   c000eaa8 <Computer::displayFeatures()>
c000eeda:	59                   	pop    ecx
c000eedb:	5e                   	pop    esi
c000eedc:	6a 01                	push   0x1
c000eede:	53                   	push   ebx
c000eedf:	e8 94 ff ff ff       	call   c000ee78 <Computer::enableNMI(bool)>
c000eee4:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eeeb:	e8 56 09 00 00       	call   c000f846 <malloc>
c000eef0:	89 04 24             	mov    DWORD PTR [esp],eax
c000eef3:	89 c6                	mov    esi,eax
c000eef5:	e8 40 9a 00 00       	call   c001893a <CPU::CPU()>
c000eefa:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef00:	58                   	pop    eax
c000ef01:	5a                   	pop    edx
c000ef02:	56                   	push   esi
c000ef03:	53                   	push   ebx
c000ef04:	e8 33 50 00 00       	call   c0013f3c <Device::addChild(Device*)>
c000ef09:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef0f:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef15:	6a 00                	push   0x0
c000ef17:	6a 00                	push   0x0
c000ef19:	50                   	push   eax
c000ef1a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef1d:	83 c4 20             	add    esp,0x20
c000ef20:	e8 9d 55 00 00       	call   c00144c2 <setupFPU()>
c000ef25:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef2b:	85 c0                	test   eax,eax
c000ef2d:	74 1f                	je     c000ef4e <Computer::open(int, int, void*)+0xbe>
c000ef2f:	83 ec 08             	sub    esp,0x8
c000ef32:	50                   	push   eax
c000ef33:	53                   	push   ebx
c000ef34:	e8 03 50 00 00       	call   c0013f3c <Device::addChild(Device*)>
c000ef39:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef3f:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef41:	6a 00                	push   0x0
c000ef43:	6a 00                	push   0x0
c000ef45:	6a 00                	push   0x0
c000ef47:	50                   	push   eax
c000ef48:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef4b:	83 c4 20             	add    esp,0x20
c000ef4e:	83 ec 0c             	sub    esp,0xc
c000ef51:	68 4a e6 00 c0       	push   0xc000e64a
c000ef56:	e8 a3 e9 00 00       	call   c001d8fe <setupMultitasking(void (*)())>
c000ef5b:	83 c4 14             	add    esp,0x14
c000ef5e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef63:	5b                   	pop    ebx
c000ef64:	5e                   	pop    esi
c000ef65:	c3                   	ret    

c000ef66 <Computer::disableNMI()>:
c000ef66:	6a 00                	push   0x0
c000ef68:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef6c:	e8 07 ff ff ff       	call   c000ee78 <Computer::enableNMI(bool)>
c000ef71:	58                   	pop    eax
c000ef72:	5a                   	pop    edx
c000ef73:	c3                   	ret    

c000ef74 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef78:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef7f:	19 c0                	sbb    eax,eax
c000ef81:	83 e0 80             	and    eax,0xffffff80
c000ef84:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef88:	e6 70                	out    0x70,al
c000ef8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef8e:	e6 71                	out    0x71,al
c000ef90:	c3                   	ret    
c000ef91:	90                   	nop

c000ef92 <Computer::handleNMI()>:
c000ef92:	56                   	push   esi
c000ef93:	53                   	push   ebx
c000ef94:	83 ec 10             	sub    esp,0x10
c000ef97:	e4 92                	in     al,0x92
c000ef99:	89 c6                	mov    esi,eax
c000ef9b:	e4 61                	in     al,0x61
c000ef9d:	68 6a 9a 02 c0       	push   0xc0029a6a
c000efa2:	88 c3                	mov    bl,al
c000efa4:	e8 6c 3b 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000efa9:	83 c4 10             	add    esp,0x10
c000efac:	83 e6 10             	and    esi,0x10
c000efaf:	75 0d                	jne    c000efbe <Computer::handleNMI()+0x2c>
c000efb1:	f6 c3 40             	test   bl,0x40
c000efb4:	75 1d                	jne    c000efd3 <Computer::handleNMI()+0x41>
c000efb6:	84 db                	test   bl,bl
c000efb8:	78 2d                	js     c000efe7 <Computer::handleNMI()+0x55>
c000efba:	58                   	pop    eax
c000efbb:	5b                   	pop    ebx
c000efbc:	5e                   	pop    esi
c000efbd:	c3                   	ret    
c000efbe:	83 ec 0c             	sub    esp,0xc
c000efc1:	68 7b 9a 02 c0       	push   0xc0029a7b
c000efc6:	e8 72 b0 00 00       	call   c001a03d <Krnl::panic(char const*)>
c000efcb:	83 c4 10             	add    esp,0x10
c000efce:	f6 c3 40             	test   bl,0x40
c000efd1:	74 e3                	je     c000efb6 <Computer::handleNMI()+0x24>
c000efd3:	83 ec 0c             	sub    esp,0xc
c000efd6:	68 88 9a 02 c0       	push   0xc0029a88
c000efdb:	e8 5d b0 00 00       	call   c001a03d <Krnl::panic(char const*)>
c000efe0:	83 c4 10             	add    esp,0x10
c000efe3:	84 db                	test   bl,bl
c000efe5:	79 d3                	jns    c000efba <Computer::handleNMI()+0x28>
c000efe7:	c7 44 24 10 92 9a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029a92
c000efef:	5a                   	pop    edx
c000eff0:	5b                   	pop    ebx
c000eff1:	5e                   	pop    esi
c000eff2:	e9 46 b0 00 00       	jmp    c001a03d <Krnl::panic(char const*)>
c000eff7:	90                   	nop

c000eff8 <Computer::setDiskActivityLight(int, bool)>:
c000eff8:	56                   	push   esi
c000eff9:	53                   	push   ebx
c000effa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000effe:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f003:	77 1b                	ja     c000f020 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f005:	e4 92                	in     al,0x92
c000f007:	bb 40 00 00 00       	mov    ebx,0x40
c000f00c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f010:	89 da                	mov    edx,ebx
c000f012:	d3 e2                	shl    edx,cl
c000f014:	89 f1                	mov    ecx,esi
c000f016:	f7 d2                	not    edx
c000f018:	d3 e3                	shl    ebx,cl
c000f01a:	21 d0                	and    eax,edx
c000f01c:	09 d8                	or     eax,ebx
c000f01e:	e6 92                	out    0x92,al
c000f020:	5b                   	pop    ebx
c000f021:	5e                   	pop    esi
c000f022:	c3                   	ret    
c000f023:	90                   	nop

c000f024 <GDTEntry::setBase(unsigned int)>:
c000f024:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f028:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f02c:	89 c1                	mov    ecx,eax
c000f02e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f032:	c1 e9 10             	shr    ecx,0x10
c000f035:	c1 e8 18             	shr    eax,0x18
c000f038:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f03b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f03e:	c3                   	ret    
c000f03f:	90                   	nop

c000f040 <GDTEntry::setLimit(unsigned int)>:
c000f040:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f044:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f048:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f04b:	66 89 01             	mov    WORD PTR [ecx],ax
c000f04e:	83 e2 f0             	and    edx,0xfffffff0
c000f051:	c1 e8 10             	shr    eax,0x10
c000f054:	83 e0 0f             	and    eax,0xf
c000f057:	09 d0                	or     eax,edx
c000f059:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f05c:	c3                   	ret    
c000f05d:	90                   	nop

c000f05e <GDT::GDT()>:
c000f05e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f062:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f06c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f072:	90                   	nop
c000f073:	c3                   	ret    

c000f074 <GDT::addEntry(GDTEntry)>:
c000f074:	53                   	push   ebx
c000f075:	83 ec 0c             	sub    esp,0xc
c000f078:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f07c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f07e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f085:	52                   	push   edx
c000f086:	50                   	push   eax
c000f087:	68 cc 9a 02 c0       	push   0xc0029acc
c000f08c:	e8 84 3a 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000f091:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f093:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f097:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f09b:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f09f:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f0a3:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a6:	c1 e0 03             	shl    eax,0x3
c000f0a9:	89 13                	mov    DWORD PTR [ebx],edx
c000f0ab:	83 c4 18             	add    esp,0x18
c000f0ae:	5b                   	pop    ebx
c000f0af:	c3                   	ret    

c000f0b0 <GDT::getNumberOfEntries()>:
c000f0b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b6:	c3                   	ret    
c000f0b7:	90                   	nop

c000f0b8 <GDT::flush()>:
c000f0b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0bc:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0be:	83 c0 04             	add    eax,0x4
c000f0c1:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c8:	a3 92 db 02 c0       	mov    ds:0xc002db92,eax
c000f0cd:	66 89 15 90 db 02 c0 	mov    WORD PTR ds:0xc002db90,dx
c000f0d4:	e9 6f 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d9:	90                   	nop

c000f0da <GDT::setup()>:
c000f0da:	55                   	push   ebp
c000f0db:	57                   	push   edi
c000f0dc:	56                   	push   esi
c000f0dd:	53                   	push   ebx
c000f0de:	83 ec 3c             	sub    esp,0x3c
c000f0e1:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0e5:	6a 00                	push   0x0
c000f0e7:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0eb:	53                   	push   ebx
c000f0ec:	e8 33 ff ff ff       	call   c000f024 <GDTEntry::setBase(unsigned int)>
c000f0f1:	6a 00                	push   0x0
c000f0f3:	53                   	push   ebx
c000f0f4:	e8 47 ff ff ff       	call   c000f040 <GDTEntry::setLimit(unsigned int)>
c000f0f9:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f101:	6a 00                	push   0x0
c000f103:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f107:	53                   	push   ebx
c000f108:	e8 17 ff ff ff       	call   c000f024 <GDTEntry::setBase(unsigned int)>
c000f10d:	68 ff ff ff 00       	push   0xffffff
c000f112:	53                   	push   ebx
c000f113:	e8 28 ff ff ff       	call   c000f040 <GDTEntry::setLimit(unsigned int)>
c000f118:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f11c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f121:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f126:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f12a:	83 c4 20             	add    esp,0x20
c000f12d:	6a 00                	push   0x0
c000f12f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f133:	53                   	push   ebx
c000f134:	e8 eb fe ff ff       	call   c000f024 <GDTEntry::setBase(unsigned int)>
c000f139:	68 ff ff ff 00       	push   0xffffff
c000f13e:	53                   	push   ebx
c000f13f:	e8 fc fe ff ff       	call   c000f040 <GDTEntry::setLimit(unsigned int)>
c000f144:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f148:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f14c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f150:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f154:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f158:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f15d:	0d 00 92 c0 00       	or     eax,0xc09200
c000f162:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f166:	89 d8                	mov    eax,ebx
c000f168:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f16c:	80 cc 60             	or     ah,0x60
c000f16f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f173:	83 c4 0c             	add    esp,0xc
c000f176:	89 f8                	mov    eax,edi
c000f178:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17c:	80 cc 60             	or     ah,0x60
c000f17f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f183:	89 c7                	mov    edi,eax
c000f185:	55                   	push   ebp
c000f186:	e8 e9 fe ff ff       	call   c000f074 <GDT::addEntry(GDTEntry)>
c000f18b:	83 c4 0c             	add    esp,0xc
c000f18e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f192:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f196:	55                   	push   ebp
c000f197:	e8 d8 fe ff ff       	call   c000f074 <GDT::addEntry(GDTEntry)>
c000f19c:	83 c4 0c             	add    esp,0xc
c000f19f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a7:	55                   	push   ebp
c000f1a8:	e8 c7 fe ff ff       	call   c000f074 <GDT::addEntry(GDTEntry)>
c000f1ad:	83 c4 0c             	add    esp,0xc
c000f1b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b8:	53                   	push   ebx
c000f1b9:	51                   	push   ecx
c000f1ba:	55                   	push   ebp
c000f1bb:	e8 b4 fe ff ff       	call   c000f074 <GDT::addEntry(GDTEntry)>
c000f1c0:	83 c4 0c             	add    esp,0xc
c000f1c3:	57                   	push   edi
c000f1c4:	56                   	push   esi
c000f1c5:	55                   	push   ebp
c000f1c6:	e8 a9 fe ff ff       	call   c000f074 <GDT::addEntry(GDTEntry)>
c000f1cb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1ce:	e8 e5 fe ff ff       	call   c000f0b8 <GDT::flush()>
c000f1d3:	83 c4 4c             	add    esp,0x4c
c000f1d6:	5b                   	pop    ebx
c000f1d7:	5e                   	pop    esi
c000f1d8:	5f                   	pop    edi
c000f1d9:	5d                   	pop    ebp
c000f1da:	c3                   	ret    

c000f1db <idleFunction(void*)>:
c000f1db:	53                   	push   ebx
c000f1dc:	83 ec 08             	sub    esp,0x8
c000f1df:	e8 ea e4 00 00       	call   c001d6ce <unlockScheduler()>
c000f1e4:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c000f1e9:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1ef:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f6:	74 3c                	je     c000f234 <idleFunction(void*)+0x59>
c000f1f8:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1ff:	74 33                	je     c000f234 <idleFunction(void*)+0x59>
c000f201:	31 db                	xor    ebx,ebx
c000f203:	52                   	push   edx
c000f204:	52                   	push   edx
c000f205:	68 e1 00 00 00       	push   0xe1
c000f20a:	50                   	push   eax
c000f20b:	e8 de fb ff ff       	call   c000edee <Computer::rdmsr(unsigned int)>
c000f210:	53                   	push   ebx
c000f211:	83 e0 02             	and    eax,0x2
c000f214:	50                   	push   eax
c000f215:	68 e1 00 00 00       	push   0xe1
c000f21a:	ff 35 88 db 02 c0    	push   DWORD PTR ds:0xc002db88
c000f220:	e8 f5 fb ff ff       	call   c000ee1a <Computer::wrmsr(unsigned int, unsigned long long)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	e8 52 10 ff ff       	call   c000027f <doTPAUSE>
c000f22d:	e8 7e 8d 01 00       	call   c0027fb0 <idleCommon()>
c000f232:	eb f4                	jmp    c000f228 <idleFunction(void*)+0x4d>
c000f234:	fb                   	sti    
c000f235:	f4                   	hlt    
c000f236:	e8 75 8d 01 00       	call   c0027fb0 <idleCommon()>
c000f23b:	eb f7                	jmp    c000f234 <idleFunction(void*)+0x59>
c000f23d:	90                   	nop

c000f23e <IDTEntry::IDTEntry(bool)>:
c000f23e:	83 ec 04             	sub    esp,0x4
c000f241:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f245:	88 04 24             	mov    BYTE PTR [esp],al
c000f248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f24c:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f252:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f256:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f25a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f25e:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f261:	83 e2 f0             	and    edx,0xfffffff0
c000f264:	83 ca 0e             	or     edx,0xe
c000f267:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f26a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f26e:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f271:	83 e2 ef             	and    edx,0xffffffef
c000f274:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f277:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f27b:	74 04                	je     c000f281 <IDTEntry::IDTEntry(bool)+0x43>
c000f27d:	b2 03                	mov    dl,0x3
c000f27f:	eb 02                	jmp    c000f283 <IDTEntry::IDTEntry(bool)+0x45>
c000f281:	b2 00                	mov    dl,0x0
c000f283:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f287:	83 e2 03             	and    edx,0x3
c000f28a:	88 d1                	mov    cl,dl
c000f28c:	c1 e1 05             	shl    ecx,0x5
c000f28f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f292:	83 e2 9f             	and    edx,0xffffff9f
c000f295:	09 ca                	or     edx,ecx
c000f297:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f29a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f29e:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2a1:	83 ca 80             	or     edx,0xffffff80
c000f2a4:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a7:	90                   	nop
c000f2a8:	83 c4 04             	add    esp,0x4
c000f2ab:	c3                   	ret    

c000f2ac <IDTEntry::setOffset(unsigned int)>:
c000f2ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2b4:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b7:	c1 e8 10             	shr    eax,0x10
c000f2ba:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2be:	c3                   	ret    
c000f2bf:	90                   	nop

c000f2c0 <IDT::IDT()>:
c000f2c0:	90                   	nop
c000f2c1:	c3                   	ret    

c000f2c2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c6:	83 c0 30             	add    eax,0x30
c000f2c9:	c3                   	ret    

c000f2ca <IDT::addEntry(IDTEntry, int)>:
c000f2ca:	53                   	push   ebx
c000f2cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2db:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2de:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2e2:	5b                   	pop    ebx
c000f2e3:	c3                   	ret    

c000f2e4 <IDT::addEntry(int, void (*)(), bool)>:
c000f2e4:	53                   	push   ebx
c000f2e5:	83 ec 10             	sub    esp,0x10
c000f2e8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2ed:	50                   	push   eax
c000f2ee:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2f2:	53                   	push   ebx
c000f2f3:	e8 46 ff ff ff       	call   c000f23e <IDTEntry::IDTEntry(bool)>
c000f2f8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2fc:	53                   	push   ebx
c000f2fd:	e8 aa ff ff ff       	call   c000f2ac <IDTEntry::setOffset(unsigned int)>
c000f302:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f306:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f30a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f30e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f312:	e8 b3 ff ff ff       	call   c000f2ca <IDT::addEntry(IDTEntry, int)>
c000f317:	83 c4 30             	add    esp,0x30
c000f31a:	5b                   	pop    ebx
c000f31b:	c3                   	ret    

c000f31c <IDT::flush()>:
c000f31c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f320:	66 c7 05 98 db 02 c0 ff 07 	mov    WORD PTR ds:0xc002db98,0x7ff
c000f329:	a3 9a db 02 c0       	mov    ds:0xc002db9a,eax
c000f32e:	0f 01 1d 98 db 02 c0 	lidtd  ds:0xc002db98
c000f335:	c3                   	ret    

c000f336 <IDT::setup()>:
c000f336:	57                   	push   edi
c000f337:	56                   	push   esi
c000f338:	53                   	push   ebx
c000f339:	83 ec 10             	sub    esp,0x10
c000f33c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f340:	6a 00                	push   0x0
c000f342:	68 68 04 00 c0       	push   0xc0000468
c000f347:	6a 00                	push   0x0
c000f349:	53                   	push   ebx
c000f34a:	e8 95 ff ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f34f:	6a 00                	push   0x0
c000f351:	68 78 04 00 c0       	push   0xc0000478
c000f356:	6a 01                	push   0x1
c000f358:	53                   	push   ebx
c000f359:	e8 86 ff ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f35e:	83 c4 20             	add    esp,0x20
c000f361:	6a 00                	push   0x0
c000f363:	68 82 04 00 c0       	push   0xc0000482
c000f368:	6a 02                	push   0x2
c000f36a:	53                   	push   ebx
c000f36b:	e8 74 ff ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f370:	6a 00                	push   0x0
c000f372:	68 8c 04 00 c0       	push   0xc000048c
c000f377:	6a 03                	push   0x3
c000f379:	53                   	push   ebx
c000f37a:	e8 65 ff ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f37f:	83 c4 20             	add    esp,0x20
c000f382:	6a 00                	push   0x0
c000f384:	68 96 04 00 c0       	push   0xc0000496
c000f389:	6a 04                	push   0x4
c000f38b:	53                   	push   ebx
c000f38c:	e8 53 ff ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f391:	6a 00                	push   0x0
c000f393:	68 a0 04 00 c0       	push   0xc00004a0
c000f398:	6a 05                	push   0x5
c000f39a:	53                   	push   ebx
c000f39b:	e8 44 ff ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f3a0:	83 c4 20             	add    esp,0x20
c000f3a3:	6a 00                	push   0x0
c000f3a5:	68 aa 04 00 c0       	push   0xc00004aa
c000f3aa:	6a 06                	push   0x6
c000f3ac:	53                   	push   ebx
c000f3ad:	e8 32 ff ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f3b2:	6a 00                	push   0x0
c000f3b4:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b9:	6a 07                	push   0x7
c000f3bb:	53                   	push   ebx
c000f3bc:	e8 23 ff ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f3c1:	83 c4 20             	add    esp,0x20
c000f3c4:	6a 00                	push   0x0
c000f3c6:	68 be 04 00 c0       	push   0xc00004be
c000f3cb:	6a 08                	push   0x8
c000f3cd:	53                   	push   ebx
c000f3ce:	e8 11 ff ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f3d3:	6a 00                	push   0x0
c000f3d5:	68 c6 04 00 c0       	push   0xc00004c6
c000f3da:	6a 09                	push   0x9
c000f3dc:	53                   	push   ebx
c000f3dd:	e8 02 ff ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f3e2:	83 c4 20             	add    esp,0x20
c000f3e5:	6a 00                	push   0x0
c000f3e7:	68 d0 04 00 c0       	push   0xc00004d0
c000f3ec:	6a 0a                	push   0xa
c000f3ee:	53                   	push   ebx
c000f3ef:	e8 f0 fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f3f4:	6a 00                	push   0x0
c000f3f6:	68 d8 04 00 c0       	push   0xc00004d8
c000f3fb:	6a 0b                	push   0xb
c000f3fd:	53                   	push   ebx
c000f3fe:	e8 e1 fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f403:	83 c4 20             	add    esp,0x20
c000f406:	6a 00                	push   0x0
c000f408:	68 e0 04 00 c0       	push   0xc00004e0
c000f40d:	6a 0c                	push   0xc
c000f40f:	53                   	push   ebx
c000f410:	e8 cf fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f415:	6a 00                	push   0x0
c000f417:	68 e8 04 00 c0       	push   0xc00004e8
c000f41c:	6a 0d                	push   0xd
c000f41e:	53                   	push   ebx
c000f41f:	e8 c0 fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f424:	83 c4 20             	add    esp,0x20
c000f427:	6a 00                	push   0x0
c000f429:	68 f0 04 00 c0       	push   0xc00004f0
c000f42e:	6a 0e                	push   0xe
c000f430:	53                   	push   ebx
c000f431:	e8 ae fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f436:	6a 00                	push   0x0
c000f438:	68 f8 04 00 c0       	push   0xc00004f8
c000f43d:	6a 0f                	push   0xf
c000f43f:	53                   	push   ebx
c000f440:	e8 9f fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f445:	83 c4 20             	add    esp,0x20
c000f448:	6a 00                	push   0x0
c000f44a:	68 02 05 00 c0       	push   0xc0000502
c000f44f:	6a 10                	push   0x10
c000f451:	53                   	push   ebx
c000f452:	e8 8d fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f457:	6a 00                	push   0x0
c000f459:	68 0c 05 00 c0       	push   0xc000050c
c000f45e:	6a 11                	push   0x11
c000f460:	53                   	push   ebx
c000f461:	e8 7e fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f466:	83 c4 20             	add    esp,0x20
c000f469:	6a 00                	push   0x0
c000f46b:	68 16 05 00 c0       	push   0xc0000516
c000f470:	6a 12                	push   0x12
c000f472:	53                   	push   ebx
c000f473:	e8 6c fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f478:	6a 01                	push   0x1
c000f47a:	68 b0 05 00 c0       	push   0xc00005b0
c000f47f:	6a 60                	push   0x60
c000f481:	53                   	push   ebx
c000f482:	e8 5d fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f487:	83 c4 20             	add    esp,0x20
c000f48a:	6a 00                	push   0x0
c000f48c:	68 b7 05 00 c0       	push   0xc00005b7
c000f491:	6a 20                	push   0x20
c000f493:	53                   	push   ebx
c000f494:	e8 4b fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f499:	6a 00                	push   0x0
c000f49b:	68 a2 05 00 c0       	push   0xc00005a2
c000f4a0:	6a 21                	push   0x21
c000f4a2:	53                   	push   ebx
c000f4a3:	e8 3c fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f4a8:	83 c4 20             	add    esp,0x20
c000f4ab:	6a 00                	push   0x0
c000f4ad:	68 a9 05 00 c0       	push   0xc00005a9
c000f4b2:	6a 22                	push   0x22
c000f4b4:	53                   	push   ebx
c000f4b5:	e8 2a fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f4ba:	6a 00                	push   0x0
c000f4bc:	68 20 05 00 c0       	push   0xc0000520
c000f4c1:	6a 23                	push   0x23
c000f4c3:	53                   	push   ebx
c000f4c4:	e8 1b fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f4c9:	83 c4 20             	add    esp,0x20
c000f4cc:	6a 00                	push   0x0
c000f4ce:	68 2a 05 00 c0       	push   0xc000052a
c000f4d3:	6a 24                	push   0x24
c000f4d5:	53                   	push   ebx
c000f4d6:	e8 09 fe ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f4db:	6a 00                	push   0x0
c000f4dd:	68 34 05 00 c0       	push   0xc0000534
c000f4e2:	6a 25                	push   0x25
c000f4e4:	53                   	push   ebx
c000f4e5:	e8 fa fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f4ea:	83 c4 20             	add    esp,0x20
c000f4ed:	6a 00                	push   0x0
c000f4ef:	68 3e 05 00 c0       	push   0xc000053e
c000f4f4:	6a 26                	push   0x26
c000f4f6:	53                   	push   ebx
c000f4f7:	e8 e8 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f4fc:	6a 00                	push   0x0
c000f4fe:	68 48 05 00 c0       	push   0xc0000548
c000f503:	6a 27                	push   0x27
c000f505:	53                   	push   ebx
c000f506:	e8 d9 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f50b:	83 c4 20             	add    esp,0x20
c000f50e:	6a 00                	push   0x0
c000f510:	68 52 05 00 c0       	push   0xc0000552
c000f515:	6a 28                	push   0x28
c000f517:	53                   	push   ebx
c000f518:	e8 c7 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f51d:	6a 00                	push   0x0
c000f51f:	68 5c 05 00 c0       	push   0xc000055c
c000f524:	6a 29                	push   0x29
c000f526:	53                   	push   ebx
c000f527:	e8 b8 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f52c:	83 c4 20             	add    esp,0x20
c000f52f:	6a 00                	push   0x0
c000f531:	68 66 05 00 c0       	push   0xc0000566
c000f536:	6a 2a                	push   0x2a
c000f538:	53                   	push   ebx
c000f539:	e8 a6 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f53e:	6a 00                	push   0x0
c000f540:	68 70 05 00 c0       	push   0xc0000570
c000f545:	6a 2b                	push   0x2b
c000f547:	53                   	push   ebx
c000f548:	e8 97 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f54d:	83 c4 20             	add    esp,0x20
c000f550:	6a 00                	push   0x0
c000f552:	68 7a 05 00 c0       	push   0xc000057a
c000f557:	6a 2c                	push   0x2c
c000f559:	53                   	push   ebx
c000f55a:	e8 85 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f55f:	6a 00                	push   0x0
c000f561:	68 84 05 00 c0       	push   0xc0000584
c000f566:	6a 2d                	push   0x2d
c000f568:	53                   	push   ebx
c000f569:	e8 76 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f56e:	83 c4 20             	add    esp,0x20
c000f571:	6a 00                	push   0x0
c000f573:	68 8e 05 00 c0       	push   0xc000058e
c000f578:	6a 2e                	push   0x2e
c000f57a:	53                   	push   ebx
c000f57b:	e8 64 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f580:	6a 00                	push   0x0
c000f582:	68 98 05 00 c0       	push   0xc0000598
c000f587:	6a 2f                	push   0x2f
c000f589:	53                   	push   ebx
c000f58a:	e8 55 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f58f:	83 c4 20             	add    esp,0x20
c000f592:	6a 00                	push   0x0
c000f594:	68 ed 05 00 c0       	push   0xc00005ed
c000f599:	6a 30                	push   0x30
c000f59b:	53                   	push   ebx
c000f59c:	e8 43 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f5a1:	6a 00                	push   0x0
c000f5a3:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a8:	6a 31                	push   0x31
c000f5aa:	53                   	push   ebx
c000f5ab:	e8 34 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f5b0:	83 c4 20             	add    esp,0x20
c000f5b3:	6a 00                	push   0x0
c000f5b5:	68 01 06 00 c0       	push   0xc0000601
c000f5ba:	6a 32                	push   0x32
c000f5bc:	53                   	push   ebx
c000f5bd:	e8 22 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f5c2:	6a 00                	push   0x0
c000f5c4:	68 0b 06 00 c0       	push   0xc000060b
c000f5c9:	6a 33                	push   0x33
c000f5cb:	53                   	push   ebx
c000f5cc:	e8 13 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f5d1:	83 c4 20             	add    esp,0x20
c000f5d4:	6a 00                	push   0x0
c000f5d6:	68 15 06 00 c0       	push   0xc0000615
c000f5db:	6a 34                	push   0x34
c000f5dd:	53                   	push   ebx
c000f5de:	e8 01 fd ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f5e3:	6a 00                	push   0x0
c000f5e5:	68 1f 06 00 c0       	push   0xc000061f
c000f5ea:	6a 35                	push   0x35
c000f5ec:	53                   	push   ebx
c000f5ed:	e8 f2 fc ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f5f2:	83 c4 20             	add    esp,0x20
c000f5f5:	6a 00                	push   0x0
c000f5f7:	68 29 06 00 c0       	push   0xc0000629
c000f5fc:	6a 36                	push   0x36
c000f5fe:	53                   	push   ebx
c000f5ff:	e8 e0 fc ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f604:	6a 00                	push   0x0
c000f606:	68 33 06 00 c0       	push   0xc0000633
c000f60b:	6a 37                	push   0x37
c000f60d:	53                   	push   ebx
c000f60e:	e8 d1 fc ff ff       	call   c000f2e4 <IDT::addEntry(int, void (*)(), bool)>
c000f613:	83 c4 20             	add    esp,0x20
c000f616:	e8 9a 26 00 00       	call   c0011cb5 <Virt::getAKernelVAS()>
c000f61b:	52                   	push   edx
c000f61c:	6a 03                	push   0x3
c000f61e:	6a 02                	push   0x2
c000f620:	50                   	push   eax
c000f621:	e8 ca 2c 00 00       	call   c00122f0 <VAS::allocatePages(int, int)>
c000f626:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f62d:	89 c6                	mov    esi,eax
c000f62f:	e8 12 02 00 00       	call   c000f846 <malloc>
c000f634:	81 c6 00 20 00 00    	add    esi,0x2000
c000f63a:	89 04 24             	mov    DWORD PTR [esp],eax
c000f63d:	89 c7                	mov    edi,eax
c000f63f:	e8 12 1e 00 00       	call   c0011456 <TSS::TSS()>
c000f644:	83 c4 0c             	add    esp,0xc
c000f647:	68 be 04 00 c0       	push   0xc00004be
c000f64c:	56                   	push   esi
c000f64d:	57                   	push   edi
c000f64e:	e8 43 1e 00 00       	call   c0011496 <TSS::setup(unsigned long, unsigned long)>
c000f653:	59                   	pop    ecx
c000f654:	89 c6                	mov    esi,eax
c000f656:	5f                   	pop    edi
c000f657:	6a 00                	push   0x0
c000f659:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f65d:	50                   	push   eax
c000f65e:	e8 db fb ff ff       	call   c000f23e <IDTEntry::IDTEntry(bool)>
c000f663:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f667:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f66c:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f673:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f679:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f67d:	80 ce 05             	or     dh,0x5
c000f680:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f683:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f687:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f68b:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f68e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f691:	e8 86 fc ff ff       	call   c000f31c <IDT::flush()>
c000f696:	83 c4 20             	add    esp,0x20
c000f699:	5b                   	pop    ebx
c000f69a:	5e                   	pop    esi
c000f69b:	5f                   	pop    edi
c000f69c:	c3                   	ret    

c000f69d <sbrk>:
c000f69d:	55                   	push   ebp
c000f69e:	57                   	push   edi
c000f69f:	56                   	push   esi
c000f6a0:	53                   	push   ebx
c000f6a1:	83 ec 1c             	sub    esp,0x1c
c000f6a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a8:	85 c0                	test   eax,eax
c000f6aa:	74 3e                	je     c000f6ea <sbrk+0x4d>
c000f6ac:	78 43                	js     c000f6f1 <sbrk+0x54>
c000f6ae:	8b 15 88 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db88
c000f6b4:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6ba:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6c0:	83 e2 01             	and    edx,0x1
c000f6c3:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c7:	8b 0d a8 ca 02 c0    	mov    ecx,DWORD PTR ds:0xc002caa8
c000f6cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6d1:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d6:	89 c2                	mov    edx,eax
c000f6d8:	78 2f                	js     c000f709 <sbrk+0x6c>
c000f6da:	c1 fa 0c             	sar    edx,0xc
c000f6dd:	89 d7                	mov    edi,edx
c000f6df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6e3:	be 00 00 00 00       	mov    esi,0x0
c000f6e8:	eb 36                	jmp    c000f720 <sbrk+0x83>
c000f6ea:	a1 a8 ca 02 c0       	mov    eax,ds:0xc002caa8
c000f6ef:	eb 74                	jmp    c000f765 <sbrk+0xc8>
c000f6f1:	83 ec 08             	sub    esp,0x8
c000f6f4:	50                   	push   eax
c000f6f5:	68 e8 9a 02 c0       	push   0xc0029ae8
c000f6fa:	e8 16 34 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000f6ff:	83 c4 10             	add    esp,0x10
c000f702:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f707:	eb 5c                	jmp    c000f765 <sbrk+0xc8>
c000f709:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f70f:	eb c9                	jmp    c000f6da <sbrk+0x3d>
c000f711:	81 05 a8 ca 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002caa8,0x1000
c000f71b:	46                   	inc    esi
c000f71c:	39 f7                	cmp    edi,esi
c000f71e:	74 34                	je     c000f754 <sbrk+0xb7>
c000f720:	e8 90 25 00 00       	call   c0011cb5 <Virt::getAKernelVAS()>
c000f725:	89 c3                	mov    ebx,eax
c000f727:	8b 2d a8 ca 02 c0    	mov    ebp,DWORD PTR ds:0xc002caa8
c000f72d:	e8 b1 07 00 00       	call   c000fee3 <Phys::allocatePage()>
c000f732:	68 01 04 00 00       	push   0x401
c000f737:	55                   	push   ebp
c000f738:	50                   	push   eax
c000f739:	53                   	push   ebx
c000f73a:	e8 b1 2a 00 00       	call   c00121f0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f73f:	83 c4 10             	add    esp,0x10
c000f742:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f747:	74 c8                	je     c000f711 <sbrk+0x74>
c000f749:	8b 1d a8 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002caa8
c000f74f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f752:	eb bd                	jmp    c000f711 <sbrk+0x74>
c000f754:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f759:	75 12                	jne    c000f76d <sbrk+0xd0>
c000f75b:	0f 20 d8             	mov    eax,cr3
c000f75e:	0f 22 d8             	mov    cr3,eax
c000f761:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f765:	83 c4 1c             	add    esp,0x1c
c000f768:	5b                   	pop    ebx
c000f769:	5e                   	pop    esi
c000f76a:	5f                   	pop    edi
c000f76b:	5d                   	pop    ebp
c000f76c:	c3                   	ret    
c000f76d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f771:	89 cb                	mov    ebx,ecx
c000f773:	c1 eb 0a             	shr    ebx,0xa
c000f776:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f77c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f786:	c1 e0 0c             	shl    eax,0xc
c000f789:	01 c8                	add    eax,ecx
c000f78b:	c1 e8 0a             	shr    eax,0xa
c000f78e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f793:	2d 00 00 40 00       	sub    eax,0x400000
c000f798:	39 c3                	cmp    ebx,eax
c000f79a:	77 c5                	ja     c000f761 <sbrk+0xc4>
c000f79c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f79f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7a5:	39 d8                	cmp    eax,ebx
c000f7a7:	73 f3                	jae    c000f79c <sbrk+0xff>
c000f7a9:	eb b6                	jmp    c000f761 <sbrk+0xc4>

c000f7ab <mmap>:
c000f7ab:	83 ec 18             	sub    esp,0x18
c000f7ae:	68 18 9b 02 c0       	push   0xc0029b18
c000f7b3:	e8 85 a8 00 00       	call   c001a03d <Krnl::panic(char const*)>
c000f7b8:	b8 00 00 00 00       	mov    eax,0x0
c000f7bd:	83 c4 1c             	add    esp,0x1c
c000f7c0:	c3                   	ret    

c000f7c1 <munmap>:
c000f7c1:	83 ec 18             	sub    esp,0x18
c000f7c4:	68 1d 9b 02 c0       	push   0xc0029b1d
c000f7c9:	e8 6f a8 00 00       	call   c001a03d <Krnl::panic(char const*)>
c000f7ce:	b8 00 00 00 00       	mov    eax,0x0
c000f7d3:	83 c4 1c             	add    esp,0x1c
c000f7d6:	c3                   	ret    

c000f7d7 <liballoc_lock()>:
c000f7d7:	83 ec 0c             	sub    esp,0xc
c000f7da:	e8 ed de 00 00       	call   c001d6cc <lockScheduler()>
c000f7df:	b8 00 00 00 00       	mov    eax,0x0
c000f7e4:	83 c4 0c             	add    esp,0xc
c000f7e7:	c3                   	ret    

c000f7e8 <liballoc_unlock()>:
c000f7e8:	83 ec 0c             	sub    esp,0xc
c000f7eb:	e8 de de 00 00       	call   c001d6ce <unlockScheduler()>
c000f7f0:	b8 00 00 00 00       	mov    eax,0x0
c000f7f5:	83 c4 0c             	add    esp,0xc
c000f7f8:	c3                   	ret    

c000f7f9 <liballoc_alloc(int)>:
c000f7f9:	83 ec 0c             	sub    esp,0xc
c000f7fc:	e8 b4 24 00 00       	call   c0011cb5 <Virt::getAKernelVAS()>
c000f801:	83 ec 04             	sub    esp,0x4
c000f804:	6a 01                	push   0x1
c000f806:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f80a:	50                   	push   eax
c000f80b:	e8 e0 2a 00 00       	call   c00122f0 <VAS::allocatePages(int, int)>
c000f810:	83 c4 1c             	add    esp,0x1c
c000f813:	c3                   	ret    

c000f814 <liballoc_free(void*, int)>:
c000f814:	83 ec 0c             	sub    esp,0xc
c000f817:	e8 99 24 00 00       	call   c0011cb5 <Virt::getAKernelVAS()>
c000f81c:	83 ec 08             	sub    esp,0x8
c000f81f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f823:	50                   	push   eax
c000f824:	e8 83 27 00 00       	call   c0011fac <VAS::freeAllocatedPages(unsigned long)>
c000f829:	b8 00 00 00 00       	mov    eax,0x0
c000f82e:	83 c4 1c             	add    esp,0x1c
c000f831:	c3                   	ret    

c000f832 <realloc>:
c000f832:	83 ec 14             	sub    esp,0x14
c000f835:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f839:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83d:	e8 12 1e ff ff       	call   c0001654 <dlrealloc>
c000f842:	83 c4 1c             	add    esp,0x1c
c000f845:	c3                   	ret    

c000f846 <malloc>:
c000f846:	83 ec 18             	sub    esp,0x18
c000f849:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f84d:	e8 c5 18 ff ff       	call   c0001117 <dlmalloc>
c000f852:	83 c4 1c             	add    esp,0x1c
c000f855:	c3                   	ret    

c000f856 <free>:
c000f856:	83 ec 18             	sub    esp,0x18
c000f859:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f85d:	e8 5a 15 ff ff       	call   c0000dbc <dlfree>
c000f862:	83 c4 1c             	add    esp,0x1c
c000f865:	c3                   	ret    

c000f866 <rfree>:
c000f866:	83 ec 18             	sub    esp,0x18
c000f869:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f86d:	e8 4a 15 ff ff       	call   c0000dbc <dlfree>
c000f872:	83 c4 1c             	add    esp,0x1c
c000f875:	c3                   	ret    

c000f876 <calloc>:
c000f876:	56                   	push   esi
c000f877:	53                   	push   ebx
c000f878:	83 ec 10             	sub    esp,0x10
c000f87b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f87f:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f884:	53                   	push   ebx
c000f885:	e8 bc ff ff ff       	call   c000f846 <malloc>
c000f88a:	89 c6                	mov    esi,eax
c000f88c:	83 c4 0c             	add    esp,0xc
c000f88f:	53                   	push   ebx
c000f890:	6a 00                	push   0x0
c000f892:	50                   	push   eax
c000f893:	e8 e0 0e ff ff       	call   c0000778 <memset>
c000f898:	89 f0                	mov    eax,esi
c000f89a:	83 c4 14             	add    esp,0x14
c000f89d:	5b                   	pop    ebx
c000f89e:	5e                   	pop    esi
c000f89f:	c3                   	ret    

c000f8a0 <hwTextMode_loadInData(VgaText*)>:
c000f8a0:	55                   	push   ebp
c000f8a1:	a1 c0 ca 02 c0       	mov    eax,ds:0xc002cac0
c000f8a6:	57                   	push   edi
c000f8a7:	56                   	push   esi
c000f8a8:	53                   	push   ebx
c000f8a9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8ad:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8b3:	85 d2                	test   edx,edx
c000f8b5:	7e 2f                	jle    c000f8e6 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b7:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8bd:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8c0:	31 f6                	xor    esi,esi
c000f8c2:	29 fd                	sub    ebp,edi
c000f8c4:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c7:	31 c0                	xor    eax,eax
c000f8c9:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8cd:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8d1:	40                   	inc    eax
c000f8d2:	83 f8 50             	cmp    eax,0x50
c000f8d5:	75 f2                	jne    c000f8c9 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d7:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8dd:	46                   	inc    esi
c000f8de:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8e4:	7f de                	jg     c000f8c4 <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e6:	5b                   	pop    ebx
c000f8e7:	5e                   	pop    esi
c000f8e8:	5f                   	pop    edi
c000f8e9:	5d                   	pop    ebp
c000f8ea:	c3                   	ret    

c000f8eb <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8eb:	55                   	push   ebp
c000f8ec:	80 3d 20 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc20,0x0
c000f8f3:	57                   	push   edi
c000f8f4:	56                   	push   esi
c000f8f5:	53                   	push   ebx
c000f8f6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8fa:	75 50                	jne    c000f94c <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8fc:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f902:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f908:	8b 15 c0 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002cac0
c000f90e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f912:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f918:	eb 0e                	jmp    c000f928 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f91a:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f920:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f926:	89 da                	mov    edx,ebx
c000f928:	83 e5 0f             	and    ebp,0xf
c000f92b:	c1 e0 04             	shl    eax,0x4
c000f92e:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f931:	0f b6 c0             	movzx  eax,al
c000f934:	41                   	inc    ecx
c000f935:	09 e8                	or     eax,ebp
c000f937:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f93b:	c1 e0 08             	shl    eax,0x8
c000f93e:	09 e8                	or     eax,ebp
c000f940:	39 fb                	cmp    ebx,edi
c000f942:	66 89 02             	mov    WORD PTR [edx],ax
c000f945:	75 d3                	jne    c000f91a <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f947:	5b                   	pop    ebx
c000f948:	5e                   	pop    esi
c000f949:	5f                   	pop    edi
c000f94a:	5d                   	pop    ebp
c000f94b:	c3                   	ret    
c000f94c:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f956:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f960:	31 c0                	xor    eax,eax
c000f962:	bd 02 00 00 00       	mov    ebp,0x2
c000f967:	eb 9f                	jmp    c000f908 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f969 <hwTextMode_showCursor(VgaText*, bool)>:
c000f969:	56                   	push   esi
c000f96a:	80 3d 20 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc20,0x0
c000f971:	53                   	push   ebx
c000f972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f976:	75 39                	jne    c000f9b1 <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f978:	84 c0                	test   al,al
c000f97a:	74 38                	je     c000f9b4 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f97c:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f981:	b0 0a                	mov    al,0xa
c000f983:	89 da                	mov    edx,ebx
c000f985:	ee                   	out    dx,al
c000f986:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f98b:	89 ca                	mov    edx,ecx
c000f98d:	ec                   	in     al,dx
c000f98e:	b2 0f                	mov    dl,0xf
c000f990:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f994:	83 e0 c0             	and    eax,0xffffffc0
c000f997:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f99d:	09 d0                	or     eax,edx
c000f99f:	89 ca                	mov    edx,ecx
c000f9a1:	ee                   	out    dx,al
c000f9a2:	b0 0b                	mov    al,0xb
c000f9a4:	89 da                	mov    edx,ebx
c000f9a6:	ee                   	out    dx,al
c000f9a7:	89 ca                	mov    edx,ecx
c000f9a9:	ec                   	in     al,dx
c000f9aa:	83 e0 e0             	and    eax,0xffffffe0
c000f9ad:	83 c8 0f             	or     eax,0xf
c000f9b0:	ee                   	out    dx,al
c000f9b1:	5b                   	pop    ebx
c000f9b2:	5e                   	pop    esi
c000f9b3:	c3                   	ret    
c000f9b4:	b0 0a                	mov    al,0xa
c000f9b6:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9bb:	ee                   	out    dx,al
c000f9bc:	b0 20                	mov    al,0x20
c000f9be:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9c3:	ee                   	out    dx,al
c000f9c4:	5b                   	pop    ebx
c000f9c5:	5e                   	pop    esi
c000f9c6:	c3                   	ret    

c000f9c7 <hwTextMode_update(VgaText*)>:
c000f9c7:	c3                   	ret    

c000f9c8 <hwTextMode_updateCursor(VgaText*)>:
c000f9c8:	56                   	push   esi
c000f9c9:	80 3d 20 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc20,0x0
c000f9d0:	53                   	push   ebx
c000f9d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9d5:	75 3f                	jne    c000fa16 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d7:	be d4 03 00 00       	mov    esi,0x3d4
c000f9dc:	b9 19 00 00 00       	mov    ecx,0x19
c000f9e1:	89 f2                	mov    edx,esi
c000f9e3:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e9:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9ef:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9f2:	c1 e1 04             	shl    ecx,0x4
c000f9f5:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9fb:	b0 0f                	mov    al,0xf
c000f9fd:	ee                   	out    dx,al
c000f9fe:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa03:	88 c8                	mov    al,cl
c000fa05:	89 da                	mov    edx,ebx
c000fa07:	ee                   	out    dx,al
c000fa08:	b0 0e                	mov    al,0xe
c000fa0a:	89 f2                	mov    edx,esi
c000fa0c:	ee                   	out    dx,al
c000fa0d:	89 c8                	mov    eax,ecx
c000fa0f:	89 da                	mov    edx,ebx
c000fa11:	66 c1 e8 08          	shr    ax,0x8
c000fa15:	ee                   	out    dx,al
c000fa16:	5b                   	pop    ebx
c000fa17:	5e                   	pop    esi
c000fa18:	c3                   	ret    

c000fa19 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa1d:	80 3d 20 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc20,0x0
c000fa24:	75 38                	jne    c000fa5e <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa26:	ba da 03 00 00       	mov    edx,0x3da
c000fa2b:	84 c0                	test   al,al
c000fa2d:	75 18                	jne    c000fa47 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa2f:	ec                   	in     al,dx
c000fa30:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa35:	b0 30                	mov    al,0x30
c000fa37:	89 ca                	mov    edx,ecx
c000fa39:	ee                   	out    dx,al
c000fa3a:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa3f:	ec                   	in     al,dx
c000fa40:	83 c8 08             	or     eax,0x8
c000fa43:	89 ca                	mov    edx,ecx
c000fa45:	ee                   	out    dx,al
c000fa46:	c3                   	ret    
c000fa47:	ec                   	in     al,dx
c000fa48:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa4d:	b0 30                	mov    al,0x30
c000fa4f:	89 ca                	mov    edx,ecx
c000fa51:	ee                   	out    dx,al
c000fa52:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa57:	ec                   	in     al,dx
c000fa58:	83 e0 f7             	and    eax,0xfffffff7
c000fa5b:	89 ca                	mov    edx,ecx
c000fa5d:	ee                   	out    dx,al
c000fa5e:	c3                   	ret    

c000fa5f <hwTextMode_scrollScreen(VgaText*)>:
c000fa5f:	55                   	push   ebp
c000fa60:	57                   	push   edi
c000fa61:	56                   	push   esi
c000fa62:	53                   	push   ebx
c000fa63:	83 ec 1c             	sub    esp,0x1c
c000fa66:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa6a:	80 3d 20 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc20,0x0
c000fa71:	74 14                	je     c000fa87 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa73:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa7d:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa87:	a1 c0 ca 02 c0       	mov    eax,ds:0xc002cac0
c000fa8c:	bd 02 00 00 00       	mov    ebp,0x2
c000fa91:	05 a0 00 00 00       	add    eax,0xa0
c000fa96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa9a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa9e:	31 c0                	xor    eax,eax
c000faa0:	eb 0b                	jmp    c000faad <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000faa2:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa8:	74 57                	je     c000fb01 <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faaa:	43                   	inc    ebx
c000faab:	89 f0                	mov    eax,esi
c000faad:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fab3:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab9:	88 13                	mov    BYTE PTR [ebx],dl
c000fabb:	8d 70 01             	lea    esi,[eax+0x1]
c000fabe:	83 fd 18             	cmp    ebp,0x18
c000fac1:	75 df                	jne    c000faa2 <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fac3:	a8 01                	test   al,0x1
c000fac5:	75 13                	jne    c000fada <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac7:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000faca:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fad0:	75 d8                	jne    c000faaa <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000fad2:	83 c4 1c             	add    esp,0x1c
c000fad5:	5b                   	pop    ebx
c000fad6:	5e                   	pop    esi
c000fad7:	5f                   	pop    edi
c000fad8:	5d                   	pop    ebp
c000fad9:	c3                   	ret    
c000fada:	83 ec 08             	sub    esp,0x8
c000fadd:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fae4:	50                   	push   eax
c000fae5:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae9:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faf0:	50                   	push   eax
c000faf1:	e8 32 0c 00 00       	call   c0010728 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf6:	83 c4 10             	add    esp,0x10
c000faf9:	88 07                	mov    BYTE PTR [edi],al
c000fafb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faff:	eb c9                	jmp    c000faca <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fb01:	45                   	inc    ebp
c000fb02:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb0a:	eb 8e                	jmp    c000fa9a <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb0c <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb0c:	57                   	push   edi
c000fb0d:	80 3d 20 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc20,0x0
c000fb14:	56                   	push   esi
c000fb15:	53                   	push   ebx
c000fb16:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb1a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb1e:	75 65                	jne    c000fb85 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb20:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb25:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb2a:	83 ec 08             	sub    esp,0x8
c000fb2d:	52                   	push   edx
c000fb2e:	50                   	push   eax
c000fb2f:	e8 f4 0b 00 00       	call   c0010728 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb34:	5a                   	pop    edx
c000fb35:	0f b6 c0             	movzx  eax,al
c000fb38:	59                   	pop    ecx
c000fb39:	50                   	push   eax
c000fb3a:	0f be c3             	movsx  eax,bl
c000fb3d:	50                   	push   eax
c000fb3e:	e8 8b 0c 00 00       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c000fb43:	83 c4 10             	add    esp,0x10
c000fb46:	8b 35 c0 ca 02 c0    	mov    esi,DWORD PTR ds:0xc002cac0
c000fb4c:	80 3d 20 dc 02 c0 00 	cmp    BYTE PTR ds:0xc002dc20,0x0
c000fb53:	74 07                	je     c000fb5c <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb55:	66 0f be c3          	movsx  ax,bl
c000fb59:	80 cc 02             	or     ah,0x2
c000fb5c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb60:	ba 19 00 00 00       	mov    edx,0x19
c000fb65:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb6b:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb6e:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb71:	c1 e1 04             	shl    ecx,0x4
c000fb74:	c1 e2 04             	shl    edx,0x4
c000fb77:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb7b:	01 ca                	add    edx,ecx
c000fb7d:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb81:	5b                   	pop    ebx
c000fb82:	5e                   	pop    esi
c000fb83:	5f                   	pop    edi
c000fb84:	c3                   	ret    
c000fb85:	b8 02 00 00 00       	mov    eax,0x2
c000fb8a:	31 d2                	xor    edx,edx
c000fb8c:	eb 9c                	jmp    c000fb2a <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb8e <setupTextMode()>:
c000fb8e:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb93:	83 e0 30             	and    eax,0x30
c000fb96:	66 83 f8 30          	cmp    ax,0x30
c000fb9a:	75 11                	jne    c000fbad <setupTextMode()+0x1f>
c000fb9c:	81 2d c0 ca 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002cac0,0x8000
c000fba6:	c6 05 20 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dc20,0x1
c000fbad:	c7 05 58 dc 02 c0 19 fa 00 c0 	mov    DWORD PTR ds:0xc002dc58,0xc000fa19
c000fbb7:	c7 05 44 dc 02 c0 a0 f8 00 c0 	mov    DWORD PTR ds:0xc002dc44,0xc000f8a0
c000fbc1:	c7 05 40 dc 02 c0 eb f8 00 c0 	mov    DWORD PTR ds:0xc002dc40,0xc000f8eb
c000fbcb:	c7 05 4c dc 02 c0 5f fa 00 c0 	mov    DWORD PTR ds:0xc002dc4c,0xc000fa5f
c000fbd5:	c7 05 54 dc 02 c0 69 f9 00 c0 	mov    DWORD PTR ds:0xc002dc54,0xc000f969
c000fbdf:	c7 05 48 dc 02 c0 c7 f9 00 c0 	mov    DWORD PTR ds:0xc002dc48,0xc000f9c7
c000fbe9:	c7 05 50 dc 02 c0 c8 f9 00 c0 	mov    DWORD PTR ds:0xc002dc50,0xc000f9c8
c000fbf3:	c7 05 5c dc 02 c0 0c fb 00 c0 	mov    DWORD PTR ds:0xc002dc5c,0xc000fb0c
c000fbfd:	c3                   	ret    

c000fbfe <kernel_main>:
c000fbfe:	57                   	push   edi
c000fbff:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc04:	56                   	push   esi
c000fc05:	31 f6                	xor    esi,esi
c000fc07:	53                   	push   ebx
c000fc08:	83 ec 10             	sub    esp,0x10
c000fc0b:	e8 72 09 00 00       	call   c0010582 <installVgaTextImplementation()>
c000fc10:	e8 79 ff ff ff       	call   c000fb8e <setupTextMode()>
c000fc15:	89 f0                	mov    eax,esi
c000fc17:	89 fa                	mov    edx,edi
c000fc19:	ee                   	out    dx,al
c000fc1a:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc1f:	b0 80                	mov    al,0x80
c000fc21:	89 da                	mov    edx,ebx
c000fc23:	ee                   	out    dx,al
c000fc24:	b1 03                	mov    cl,0x3
c000fc26:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc2b:	88 c8                	mov    al,cl
c000fc2d:	ee                   	out    dx,al
c000fc2e:	89 f0                	mov    eax,esi
c000fc30:	89 fa                	mov    edx,edi
c000fc32:	ee                   	out    dx,al
c000fc33:	88 c8                	mov    al,cl
c000fc35:	89 da                	mov    edx,ebx
c000fc37:	ee                   	out    dx,al
c000fc38:	b0 c7                	mov    al,0xc7
c000fc3a:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc3f:	ee                   	out    dx,al
c000fc40:	b0 0b                	mov    al,0xb
c000fc42:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc47:	ee                   	out    dx,al
c000fc48:	83 ec 0c             	sub    esp,0xc
c000fc4b:	68 24 9b 02 c0       	push   0xc0029b24
c000fc50:	e8 c0 2e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000fc55:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc5a:	05 ff 0f 00 00       	add    eax,0xfff
c000fc5f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc64:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc67:	e8 d1 03 00 00       	call   c001003d <Phys::physicalMemorySetup(unsigned int)>
c000fc6c:	e8 c5 1f 00 00       	call   c0011c36 <Virt::virtualMemorySetup()>
c000fc71:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc77:	83 c4 10             	add    esp,0x10
c000fc7a:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc80:	75 0e                	jne    c000fc90 <kernel_main+0x92>
c000fc82:	89 d8                	mov    eax,ebx
c000fc84:	25 48 03 00 00       	and    eax,0x348
c000fc89:	3d 00 03 00 00       	cmp    eax,0x300
c000fc8e:	74 10                	je     c000fca0 <kernel_main+0xa2>
c000fc90:	83 ec 0c             	sub    esp,0xc
c000fc93:	68 31 b3 02 c0       	push   0xc002b331
c000fc98:	e8 a0 a3 00 00       	call   c001a03d <Krnl::panic(char const*)>
c000fc9d:	83 c4 10             	add    esp,0x10
c000fca0:	83 ec 0c             	sub    esp,0xc
c000fca3:	89 1d a0 db 02 c0    	mov    DWORD PTR ds:0xc002dba0,ebx
c000fca9:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fcad:	53                   	push   ebx
c000fcae:	e8 37 21 00 00       	call   c0011dea <VAS::VAS()>
c000fcb3:	89 1d 04 dd 02 c0    	mov    DWORD PTR ds:0xc002dd04,ebx
c000fcb9:	e8 62 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcbe:	c7 04 24 3b 9b 02 c0 	mov    DWORD PTR [esp],0xc0029b3b
c000fcc5:	e8 4b 2e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000fcca:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd1:	e8 70 fb ff ff       	call   c000f846 <malloc>
c000fcd6:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd9:	89 c6                	mov    esi,eax
c000fcdb:	e8 60 ea ff ff       	call   c000e740 <Computer::Computer()>
c000fce0:	58                   	pop    eax
c000fce1:	89 35 88 db 02 c0    	mov    DWORD PTR ds:0xc002db88,esi
c000fce7:	5a                   	pop    edx
c000fce8:	56                   	push   esi
c000fce9:	68 58 9b 02 c0       	push   0xc0029b58
c000fcee:	e8 22 2e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000fcf3:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c000fcf8:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcfa:	6a 00                	push   0x0
c000fcfc:	6a 00                	push   0x0
c000fcfe:	6a 00                	push   0x0
c000fd00:	50                   	push   eax
c000fd01:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd04:	83 c4 14             	add    esp,0x14
c000fd07:	53                   	push   ebx
c000fd08:	e8 77 23 00 00       	call   c0012084 <VAS::~VAS()>
c000fd0d:	c7 04 24 6b 9b 02 c0 	mov    DWORD PTR [esp],0xc0029b6b
c000fd14:	e8 24 a3 00 00       	call   c001a03d <Krnl::panic(char const*)>
c000fd19:	83 c4 20             	add    esp,0x20
c000fd1c:	5b                   	pop    ebx
c000fd1d:	5e                   	pop    esi
c000fd1e:	5f                   	pop    edi
c000fd1f:	c3                   	ret    

c000fd20 <Phys::allocateDMA(unsigned long)>:
c000fd20:	55                   	push   ebp
c000fd21:	31 d2                	xor    edx,edx
c000fd23:	57                   	push   edi
c000fd24:	31 ed                	xor    ebp,ebp
c000fd26:	56                   	push   esi
c000fd27:	31 c9                	xor    ecx,ecx
c000fd29:	53                   	push   ebx
c000fd2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2e:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd34:	31 c0                	xor    eax,eax
c000fd36:	c1 ee 0c             	shr    esi,0xc
c000fd39:	eb 17                	jmp    c000fd52 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3b:	85 c9                	test   ecx,ecx
c000fd3d:	75 04                	jne    c000fd43 <Phys::allocateDMA(unsigned long)+0x23>
c000fd3f:	89 d5                	mov    ebp,edx
c000fd41:	89 d0                	mov    eax,edx
c000fd43:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd46:	39 de                	cmp    esi,ebx
c000fd48:	74 20                	je     c000fd6a <Phys::allocateDMA(unsigned long)+0x4a>
c000fd4a:	42                   	inc    edx
c000fd4b:	89 d9                	mov    ecx,ebx
c000fd4d:	83 fa 2f             	cmp    edx,0x2f
c000fd50:	7f 11                	jg     c000fd63 <Phys::allocateDMA(unsigned long)+0x43>
c000fd52:	80 ba e0 db 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd2420],0x0
c000fd59:	74 e0                	je     c000fd3b <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5b:	31 c9                	xor    ecx,ecx
c000fd5d:	42                   	inc    edx
c000fd5e:	83 fa 2f             	cmp    edx,0x2f
c000fd61:	7e ef                	jle    c000fd52 <Phys::allocateDMA(unsigned long)+0x32>
c000fd63:	5b                   	pop    ebx
c000fd64:	31 c0                	xor    eax,eax
c000fd66:	5e                   	pop    esi
c000fd67:	5f                   	pop    edi
c000fd68:	5d                   	pop    ebp
c000fd69:	c3                   	ret    
c000fd6a:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6d:	89 d7                	mov    edi,edx
c000fd6f:	4f                   	dec    edi
c000fd70:	79 03                	jns    c000fd75 <Phys::allocateDMA(unsigned long)+0x55>
c000fd72:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd75:	c1 ff 04             	sar    edi,0x4
c000fd78:	89 c2                	mov    edx,eax
c000fd7a:	c1 fa 04             	sar    edx,0x4
c000fd7d:	39 fa                	cmp    edx,edi
c000fd7f:	75 2f                	jne    c000fdb0 <Phys::allocateDMA(unsigned long)+0x90>
c000fd81:	85 db                	test   ebx,ebx
c000fd83:	74 1a                	je     c000fd9f <Phys::allocateDMA(unsigned long)+0x7f>
c000fd85:	be e0 db 02 c0       	mov    esi,0xc002dbe0
c000fd8a:	8d 90 e0 db 02 c0    	lea    edx,[eax-0x3ffd2420]
c000fd90:	f7 d6                	not    esi
c000fd92:	29 c6                	sub    esi,eax
c000fd94:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd97:	42                   	inc    edx
c000fd98:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9b:	39 d9                	cmp    ecx,ebx
c000fd9d:	7f f5                	jg     c000fd94 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9f:	85 ff                	test   edi,edi
c000fda1:	74 13                	je     c000fdb6 <Phys::allocateDMA(unsigned long)+0x96>
c000fda3:	5b                   	pop    ebx
c000fda4:	05 50 20 0c 00       	add    eax,0xc2050
c000fda9:	5e                   	pop    esi
c000fdaa:	c1 e0 0c             	shl    eax,0xc
c000fdad:	5f                   	pop    edi
c000fdae:	5d                   	pop    ebp
c000fdaf:	c3                   	ret    
c000fdb0:	89 ea                	mov    edx,ebp
c000fdb2:	31 c9                	xor    ecx,ecx
c000fdb4:	eb a7                	jmp    c000fd5d <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb6:	5b                   	pop    ebx
c000fdb7:	c1 e0 0c             	shl    eax,0xc
c000fdba:	5e                   	pop    esi
c000fdbb:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdc0:	5f                   	pop    edi
c000fdc1:	5d                   	pop    ebp
c000fdc2:	c3                   	ret    

c000fdc3 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdcb:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd1:	c1 e9 0c             	shr    ecx,0xc
c000fdd4:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd9:	76 25                	jbe    c000fe00 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fddb:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fde0:	c1 e8 0c             	shr    eax,0xc
c000fde3:	8d 50 10             	lea    edx,[eax+0x10]
c000fde6:	85 c9                	test   ecx,ecx
c000fde8:	74 15                	je     c000fdff <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fdea:	8d 82 e0 db 02 c0    	lea    eax,[edx-0x3ffd2420]
c000fdf0:	8d 94 11 e0 db 02 c0 	lea    edx,[ecx+edx*1-0x3ffd2420]
c000fdf7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdfa:	40                   	inc    eax
c000fdfb:	39 d0                	cmp    eax,edx
c000fdfd:	75 f8                	jne    c000fdf7 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdff:	c3                   	ret    
c000fe00:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe06:	c1 ea 0c             	shr    edx,0xc
c000fe09:	eb db                	jmp    c000fde6 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0b <Phys::setPageState(unsigned long, bool)>:
c000fe0b:	56                   	push   esi
c000fe0c:	ba 01 00 00 00       	mov    edx,0x1
c000fe11:	53                   	push   ebx
c000fe12:	8b 35 ac ca 02 c0    	mov    esi,DWORD PTR ds:0xc002caac
c000fe18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe20:	89 c8                	mov    eax,ecx
c000fe22:	83 e1 07             	and    ecx,0x7
c000fe25:	c1 e8 03             	shr    eax,0x3
c000fe28:	d3 e3                	shl    ebx,cl
c000fe2a:	01 c6                	add    esi,eax
c000fe2c:	d3 e2                	shl    edx,cl
c000fe2e:	f7 d2                	not    edx
c000fe30:	20 16                	and    BYTE PTR [esi],dl
c000fe32:	03 05 ac ca 02 c0    	add    eax,DWORD PTR ds:0xc002caac
c000fe38:	08 18                	or     BYTE PTR [eax],bl
c000fe3a:	5b                   	pop    ebx
c000fe3b:	5e                   	pop    esi
c000fe3c:	c3                   	ret    

c000fe3d <Phys::getPageState(unsigned long)>:
c000fe3d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe41:	8b 15 ac ca 02 c0    	mov    edx,DWORD PTR ds:0xc002caac
c000fe47:	89 c8                	mov    eax,ecx
c000fe49:	83 e1 07             	and    ecx,0x7
c000fe4c:	c1 e8 03             	shr    eax,0x3
c000fe4f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe53:	d3 f8                	sar    eax,cl
c000fe55:	83 e0 01             	and    eax,0x1
c000fe58:	c3                   	ret    

c000fe59 <Phys::freePage(unsigned long)>:
c000fe59:	53                   	push   ebx
c000fe5a:	83 ec 08             	sub    esp,0x8
c000fe5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe61:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe67:	76 57                	jbe    c000fec0 <Phys::freePage(unsigned long)+0x67>
c000fe69:	c1 eb 0c             	shr    ebx,0xc
c000fe6c:	53                   	push   ebx
c000fe6d:	e8 cb ff ff ff       	call   c000fe3d <Phys::getPageState(unsigned long)>
c000fe72:	5a                   	pop    edx
c000fe73:	84 c0                	test   al,al
c000fe75:	74 5b                	je     c000fed2 <Phys::freePage(unsigned long)+0x79>
c000fe77:	a1 cc db 02 c0       	mov    eax,ds:0xc002dbcc
c000fe7c:	48                   	dec    eax
c000fe7d:	a3 cc db 02 c0       	mov    ds:0xc002dbcc,eax
c000fe82:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe85:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe88:	c1 e0 02             	shl    eax,0x2
c000fe8b:	99                   	cdq    
c000fe8c:	f7 3d d0 db 02 c0    	idiv   DWORD PTR ds:0xc002dbd0
c000fe92:	39 05 c8 db 02 c0    	cmp    DWORD PTR ds:0xc002dbc8,eax
c000fe98:	75 13                	jne    c000fead <Phys::freePage(unsigned long)+0x54>
c000fe9a:	83 ec 08             	sub    esp,0x8
c000fe9d:	6a 00                	push   0x0
c000fe9f:	53                   	push   ebx
c000fea0:	e8 66 ff ff ff       	call   c000fe0b <Phys::setPageState(unsigned long, bool)>
c000fea5:	83 c4 10             	add    esp,0x10
c000fea8:	83 c4 08             	add    esp,0x8
c000feab:	5b                   	pop    ebx
c000feac:	c3                   	ret    
c000fead:	83 ec 0c             	sub    esp,0xc
c000feb0:	a3 c8 db 02 c0       	mov    ds:0xc002dbc8,eax
c000feb5:	50                   	push   eax
c000feb6:	e8 5b 0a 00 00       	call   c0010916 <VgaText::updateRAMUsageDisplay(int)>
c000febb:	83 c4 10             	add    esp,0x10
c000febe:	eb da                	jmp    c000fe9a <Phys::freePage(unsigned long)+0x41>
c000fec0:	68 00 10 00 00       	push   0x1000
c000fec5:	53                   	push   ebx
c000fec6:	e8 f8 fe ff ff       	call   c000fdc3 <Phys::freeDMA(unsigned long, unsigned long)>
c000fecb:	59                   	pop    ecx
c000fecc:	5b                   	pop    ebx
c000fecd:	83 c4 08             	add    esp,0x8
c000fed0:	5b                   	pop    ebx
c000fed1:	c3                   	ret    
c000fed2:	c7 44 24 10 86 9b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029b86
c000feda:	83 c4 08             	add    esp,0x8
c000fedd:	5b                   	pop    ebx
c000fede:	e9 5a a1 00 00       	jmp    c001a03d <Krnl::panic(char const*)>

c000fee3 <Phys::allocatePage()>:
c000fee3:	56                   	push   esi
c000fee4:	53                   	push   ebx
c000fee5:	51                   	push   ecx
c000fee6:	8b 35 c0 db 02 c0    	mov    esi,DWORD PTR ds:0xc002dbc0
c000feec:	89 f3                	mov    ebx,esi
c000feee:	eb 0a                	jmp    c000fefa <Phys::allocatePage()+0x17>
c000fef0:	89 1d c0 db 02 c0    	mov    DWORD PTR ds:0xc002dbc0,ebx
c000fef6:	39 de                	cmp    esi,ebx
c000fef8:	74 24                	je     c000ff1e <Phys::allocatePage()+0x3b>
c000fefa:	53                   	push   ebx
c000fefb:	e8 3d ff ff ff       	call   c000fe3d <Phys::getPageState(unsigned long)>
c000ff00:	5a                   	pop    edx
c000ff01:	84 c0                	test   al,al
c000ff03:	74 5a                	je     c000ff5f <Phys::allocatePage()+0x7c>
c000ff05:	43                   	inc    ebx
c000ff06:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff0c:	75 e2                	jne    c000fef0 <Phys::allocatePage()+0xd>
c000ff0e:	31 db                	xor    ebx,ebx
c000ff10:	c7 05 c0 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dbc0,0x0
c000ff1a:	39 de                	cmp    esi,ebx
c000ff1c:	75 dc                	jne    c000fefa <Phys::allocatePage()+0x17>
c000ff1e:	83 ec 0c             	sub    esp,0xc
c000ff21:	68 9c 9b 02 c0       	push   0xc0029b9c
c000ff26:	e8 ea 2b 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c000ff2b:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff32:	e8 e9 fd ff ff       	call   c000fd20 <Phys::allocateDMA(unsigned long)>
c000ff37:	83 c4 10             	add    esp,0x10
c000ff3a:	85 c0                	test   eax,eax
c000ff3c:	75 56                	jne    c000ff94 <Phys::allocatePage()+0xb1>
c000ff3e:	83 ec 0c             	sub    esp,0xc
c000ff41:	68 ad 9b 02 c0       	push   0xc0029bad
c000ff46:	e8 f2 a0 00 00       	call   c001a03d <Krnl::panic(char const*)>
c000ff4b:	83 c4 10             	add    esp,0x10
c000ff4e:	8b 1d c0 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002dbc0
c000ff54:	53                   	push   ebx
c000ff55:	e8 e3 fe ff ff       	call   c000fe3d <Phys::getPageState(unsigned long)>
c000ff5a:	5a                   	pop    edx
c000ff5b:	84 c0                	test   al,al
c000ff5d:	75 a6                	jne    c000ff05 <Phys::allocatePage()+0x22>
c000ff5f:	6a 01                	push   0x1
c000ff61:	53                   	push   ebx
c000ff62:	e8 a4 fe ff ff       	call   c000fe0b <Phys::setPageState(unsigned long, bool)>
c000ff67:	a1 cc db 02 c0       	mov    eax,ds:0xc002dbcc
c000ff6c:	59                   	pop    ecx
c000ff6d:	40                   	inc    eax
c000ff6e:	5b                   	pop    ebx
c000ff6f:	a3 cc db 02 c0       	mov    ds:0xc002dbcc,eax
c000ff74:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff77:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7a:	c1 e0 02             	shl    eax,0x2
c000ff7d:	99                   	cdq    
c000ff7e:	f7 3d d0 db 02 c0    	idiv   DWORD PTR ds:0xc002dbd0
c000ff84:	39 05 c8 db 02 c0    	cmp    DWORD PTR ds:0xc002dbc8,eax
c000ff8a:	75 0c                	jne    c000ff98 <Phys::allocatePage()+0xb5>
c000ff8c:	a1 c0 db 02 c0       	mov    eax,ds:0xc002dbc0
c000ff91:	c1 e0 0c             	shl    eax,0xc
c000ff94:	5a                   	pop    edx
c000ff95:	5b                   	pop    ebx
c000ff96:	5e                   	pop    esi
c000ff97:	c3                   	ret    
c000ff98:	83 ec 0c             	sub    esp,0xc
c000ff9b:	a3 c8 db 02 c0       	mov    ds:0xc002dbc8,eax
c000ffa0:	50                   	push   eax
c000ffa1:	e8 70 09 00 00       	call   c0010916 <VgaText::updateRAMUsageDisplay(int)>
c000ffa6:	83 c4 10             	add    esp,0x10
c000ffa9:	eb e1                	jmp    c000ff8c <Phys::allocatePage()+0xa9>

c000ffab <Phys::allocateContiguousPages(int)>:
c000ffab:	57                   	push   edi
c000ffac:	56                   	push   esi
c000ffad:	53                   	push   ebx
c000ffae:	31 db                	xor    ebx,ebx
c000ffb0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ffb4:	e8 13 d7 00 00       	call   c001d6cc <lockScheduler()>
c000ffb9:	85 db                	test   ebx,ebx
c000ffbb:	75 11                	jne    c000ffce <Phys::allocateContiguousPages(int)+0x23>
c000ffbd:	e8 21 ff ff ff       	call   c000fee3 <Phys::allocatePage()>
c000ffc2:	83 ff 01             	cmp    edi,0x1
c000ffc5:	89 c6                	mov    esi,eax
c000ffc7:	74 21                	je     c000ffea <Phys::allocateContiguousPages(int)+0x3f>
c000ffc9:	bb 01 00 00 00       	mov    ebx,0x1
c000ffce:	e8 10 ff ff ff       	call   c000fee3 <Phys::allocatePage()>
c000ffd3:	89 da                	mov    edx,ebx
c000ffd5:	c1 e2 0c             	shl    edx,0xc
c000ffd8:	01 f2                	add    edx,esi
c000ffda:	39 c2                	cmp    edx,eax
c000ffdc:	74 17                	je     c000fff5 <Phys::allocateContiguousPages(int)+0x4a>
c000ffde:	bb 01 00 00 00       	mov    ebx,0x1
c000ffe3:	89 c6                	mov    esi,eax
c000ffe5:	83 ff 01             	cmp    edi,0x1
c000ffe8:	75 e4                	jne    c000ffce <Phys::allocateContiguousPages(int)+0x23>
c000ffea:	e8 df d6 00 00       	call   c001d6ce <unlockScheduler()>
c000ffef:	89 f0                	mov    eax,esi
c000fff1:	5b                   	pop    ebx
c000fff2:	5e                   	pop    esi
c000fff3:	5f                   	pop    edi
c000fff4:	c3                   	ret    
c000fff5:	43                   	inc    ebx
c000fff6:	39 fb                	cmp    ebx,edi
c000fff8:	75 bf                	jne    c000ffb9 <Phys::allocateContiguousPages(int)+0xe>
c000fffa:	e8 cf d6 00 00       	call   c001d6ce <unlockScheduler()>
c000ffff:	89 f0                	mov    eax,esi
c0010001:	5b                   	pop    ebx
c0010002:	5e                   	pop    esi
c0010003:	5f                   	pop    edi
c0010004:	c3                   	ret    

c0010005 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010005:	56                   	push   esi
c0010006:	53                   	push   ebx
c0010007:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001000b:	39 1d c4 db 02 c0    	cmp    DWORD PTR ds:0xc002dbc4,ebx
c0010011:	73 06                	jae    c0010019 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010013:	89 1d c4 db 02 c0    	mov    DWORD PTR ds:0xc002dbc4,ebx
c0010019:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001001d:	c1 eb 0c             	shr    ebx,0xc
c0010020:	c1 e8 0c             	shr    eax,0xc
c0010023:	39 d8                	cmp    eax,ebx
c0010025:	73 13                	jae    c001003a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010027:	6a 00                	push   0x0
c0010029:	8d 70 01             	lea    esi,[eax+0x1]
c001002c:	50                   	push   eax
c001002d:	e8 d9 fd ff ff       	call   c000fe0b <Phys::setPageState(unsigned long, bool)>
c0010032:	5a                   	pop    edx
c0010033:	89 f0                	mov    eax,esi
c0010035:	59                   	pop    ecx
c0010036:	39 f3                	cmp    ebx,esi
c0010038:	75 ed                	jne    c0010027 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001003a:	5b                   	pop    ebx
c001003b:	5e                   	pop    esi
c001003c:	c3                   	ret    

c001003d <Phys::physicalMemorySetup(unsigned int)>:
c001003d:	55                   	push   ebp
c001003e:	57                   	push   edi
c001003f:	56                   	push   esi
c0010040:	53                   	push   ebx
c0010041:	31 db                	xor    ebx,ebx
c0010043:	83 ec 40             	sub    esp,0x40
c0010046:	6a 30                	push   0x30
c0010048:	6a 00                	push   0x0
c001004a:	68 e0 db 02 c0       	push   0xc002dbe0
c001004f:	e8 24 07 ff ff       	call   c0000778 <memset>
c0010054:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010058:	25 00 f0 ff ff       	and    eax,0xfffff000
c001005d:	05 00 10 00 00       	add    eax,0x1000
c0010062:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010066:	83 c4 10             	add    esp,0x10
c0010069:	83 ec 08             	sub    esp,0x8
c001006c:	6a 01                	push   0x1
c001006e:	53                   	push   ebx
c001006f:	43                   	inc    ebx
c0010070:	e8 96 fd ff ff       	call   c000fe0b <Phys::setPageState(unsigned long, bool)>
c0010075:	83 c4 10             	add    esp,0x10
c0010078:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001007e:	75 e9                	jne    c0010069 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c0010080:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010087:	66 85 c0             	test   ax,ax
c001008a:	0f 84 8e 01 00 00    	je     c001021e <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c0010090:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010094:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001009c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100a0:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100a9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100b1:	eb 15                	jmp    c00100c8 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c00100b3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00100b7:	83 c3 18             	add    ebx,0x18
c00100ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100be:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00100c2:	0f 84 66 01 00 00    	je     c001022e <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00100c8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00100cb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00100ce:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00100d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00100d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00100d9:	8b 33                	mov    esi,DWORD PTR [ebx]
c00100db:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00100de:	01 f0                	add    eax,esi
c00100e0:	55                   	push   ebp
c00100e1:	11 fa                	adc    edx,edi
c00100e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100e7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00100eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00100ef:	56                   	push   esi
c00100f0:	68 e8 9b 02 c0       	push   0xc0029be8
c00100f5:	e8 1b 2a 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00100fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100fe:	83 c4 10             	add    esp,0x10
c0010101:	09 f8                	or     eax,edi
c0010103:	0f 85 25 01 00 00    	jne    c001022e <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010109:	4d                   	dec    ebp
c001010a:	75 a7                	jne    c00100b3 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001010c:	ba 00 00 08 00       	mov    edx,0x80000
c0010111:	89 c1                	mov    ecx,eax
c0010113:	39 f2                	cmp    edx,esi
c0010115:	19 f9                	sbb    ecx,edi
c0010117:	0f 82 a7 00 00 00    	jb     c00101c4 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001011d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010121:	89 c1                	mov    ecx,eax
c0010123:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010127:	0f 83 97 00 00 00    	jae    c00101c4 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001012d:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010132:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010136:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001013a:	39 fa                	cmp    edx,edi
c001013c:	19 e8                	sbb    eax,ebp
c001013e:	0f 82 14 01 00 00    	jb     c0010258 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010144:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010148:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001014c:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010152:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010157:	83 d5 ff             	adc    ebp,0xffffffff
c001015a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001015e:	31 c0                	xor    eax,eax
c0010160:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010164:	39 fa                	cmp    edx,edi
c0010166:	89 c1                	mov    ecx,eax
c0010168:	19 e9                	sbb    ecx,ebp
c001016a:	0f 83 43 ff ff ff    	jae    c00100b3 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010170:	be 00 00 08 00       	mov    esi,0x80000
c0010175:	50                   	push   eax
c0010176:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001017a:	57                   	push   edi
c001017b:	56                   	push   esi
c001017c:	68 0c 9c 02 c0       	push   0xc0029c0c
c0010181:	e8 8f 29 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0010186:	5a                   	pop    edx
c0010187:	59                   	pop    ecx
c0010188:	57                   	push   edi
c0010189:	56                   	push   esi
c001018a:	e8 76 fe ff ff       	call   c0010005 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c001018f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010193:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010197:	83 c4 0c             	add    esp,0xc
c001019a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001019e:	03 05 d0 db 02 c0    	add    eax,DWORD PTR ds:0xc002dbd0
c00101a4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101ab:	a3 d0 db 02 c0       	mov    ds:0xc002dbd0,eax
c00101b0:	52                   	push   edx
c00101b1:	50                   	push   eax
c00101b2:	68 c9 9b 02 c0       	push   0xc0029bc9
c00101b7:	e8 59 29 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00101bc:	83 c4 10             	add    esp,0x10
c00101bf:	e9 ef fe ff ff       	jmp    c00100b3 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101c4:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00101c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101d0:	39 ea                	cmp    edx,ebp
c00101d2:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00101d6:	0f 82 d7 fe ff ff    	jb     c00100b3 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101dc:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101e1:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00101e5:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00101e9:	0f 83 c4 fe ff ff    	jae    c00100b3 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101ef:	39 ee                	cmp    esi,ebp
c00101f1:	89 f8                	mov    eax,edi
c00101f3:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00101f7:	0f 83 78 ff ff ff    	jae    c0010175 <Phys::physicalMemorySetup(unsigned int)+0x138>
c00101fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010201:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010205:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010209:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001020d:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010211:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010215:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010219:	e9 57 ff ff ff       	jmp    c0010175 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001021e:	83 ec 0c             	sub    esp,0xc
c0010221:	68 bb 9b 02 c0       	push   0xc0029bbb
c0010226:	e8 12 9e 00 00       	call   c001a03d <Krnl::panic(char const*)>
c001022b:	83 c4 10             	add    esp,0x10
c001022e:	bb 40 01 00 00       	mov    ebx,0x140
c0010233:	83 ec 08             	sub    esp,0x8
c0010236:	6a 00                	push   0x0
c0010238:	53                   	push   ebx
c0010239:	43                   	inc    ebx
c001023a:	e8 cc fb ff ff       	call   c000fe0b <Phys::setPageState(unsigned long, bool)>
c001023f:	ff 05 d0 db 02 c0    	inc    DWORD PTR ds:0xc002dbd0
c0010245:	83 c4 10             	add    esp,0x10
c0010248:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001024e:	75 e3                	jne    c0010233 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010250:	83 c4 3c             	add    esp,0x3c
c0010253:	5b                   	pop    ebx
c0010254:	5e                   	pop    esi
c0010255:	5f                   	pop    edi
c0010256:	5d                   	pop    ebp
c0010257:	c3                   	ret    
c0010258:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010260:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010268:	e9 d7 fe ff ff       	jmp    c0010144 <Phys::physicalMemorySetup(unsigned int)+0x107>
c001026d:	90                   	nop

c001026e <Pipe::isAtty()>:
c001026e:	31 c0                	xor    eax,eax
c0010270:	c3                   	ret    
c0010271:	90                   	nop

c0010272 <Pipe::~Pipe()>:
c0010272:	83 ec 0c             	sub    esp,0xc
c0010275:	ba 78 9c 02 c0       	mov    edx,0xc0029c78
c001027a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001027e:	89 10                	mov    DWORD PTR [eax],edx
c0010280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010284:	83 ec 0c             	sub    esp,0xc
c0010287:	50                   	push   eax
c0010288:	e8 37 16 00 00       	call   c00118c4 <UnixFile::~UnixFile()>
c001028d:	83 c4 10             	add    esp,0x10
c0010290:	90                   	nop
c0010291:	83 c4 0c             	add    esp,0xc
c0010294:	c3                   	ret    
c0010295:	90                   	nop

c0010296 <Pipe::~Pipe()>:
c0010296:	83 ec 0c             	sub    esp,0xc
c0010299:	83 ec 0c             	sub    esp,0xc
c001029c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102a0:	e8 cd ff ff ff       	call   c0010272 <Pipe::~Pipe()>
c00102a5:	83 c4 10             	add    esp,0x10
c00102a8:	83 ec 08             	sub    esp,0x8
c00102ab:	6a 20                	push   0x20
c00102ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102b1:	e8 7f 27 00 00       	call   c0012a35 <operator delete(void*, unsigned long)>
c00102b6:	83 c4 10             	add    esp,0x10
c00102b9:	83 c4 0c             	add    esp,0xc
c00102bc:	c3                   	ret    
c00102bd:	90                   	nop

c00102be <Pipe::read(unsigned long long, void*, int*)>:
c00102be:	55                   	push   ebp
c00102bf:	57                   	push   edi
c00102c0:	56                   	push   esi
c00102c1:	53                   	push   ebx
c00102c2:	83 ec 1c             	sub    esp,0x1c
c00102c5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00102c9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00102cd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00102d1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00102d4:	89 c8                	mov    eax,ecx
c00102d6:	99                   	cdq    
c00102d7:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00102db:	74 19                	je     c00102f6 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102dd:	39 f9                	cmp    ecx,edi
c00102df:	89 d1                	mov    ecx,edx
c00102e1:	19 f1                	sbb    ecx,esi
c00102e3:	73 11                	jae    c00102f6 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00102e5:	e8 e2 d3 00 00       	call   c001d6cc <lockScheduler()>
c00102ea:	e8 19 d7 00 00       	call   c001da08 <schedule()>
c00102ef:	e8 da d3 00 00       	call   c001d6ce <unlockScheduler()>
c00102f4:	eb db                	jmp    c00102d1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00102f6:	39 f8                	cmp    eax,edi
c00102f8:	89 d1                	mov    ecx,edx
c00102fa:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00102fe:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010302:	19 f1                	sbb    ecx,esi
c0010304:	73 08                	jae    c001030e <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010306:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001030a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001030e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010311:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010314:	29 c6                	sub    esi,eax
c0010316:	89 f1                	mov    ecx,esi
c0010318:	c1 f9 1f             	sar    ecx,0x1f
c001031b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001031f:	89 ca                	mov    edx,ecx
c0010321:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010325:	19 d1                	sbb    ecx,edx
c0010327:	73 04                	jae    c001032d <Pipe::read(unsigned long long, void*, int*)+0x6f>
c0010329:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001032d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010331:	89 fd                	mov    ebp,edi
c0010333:	29 f5                	sub    ebp,esi
c0010335:	85 f6                	test   esi,esi
c0010337:	74 12                	je     c001034b <Pipe::read(unsigned long long, void*, int*)+0x8d>
c0010339:	52                   	push   edx
c001033a:	56                   	push   esi
c001033b:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c001033e:	50                   	push   eax
c001033f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010343:	e8 fc 03 ff ff       	call   c0000744 <memcpy>
c0010348:	83 c4 10             	add    esp,0x10
c001034b:	85 ed                	test   ebp,ebp
c001034d:	74 12                	je     c0010361 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c001034f:	50                   	push   eax
c0010350:	55                   	push   ebp
c0010351:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010354:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010358:	56                   	push   esi
c0010359:	e8 e6 03 ff ff       	call   c0000744 <memcpy>
c001035e:	83 c4 10             	add    esp,0x10
c0010361:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010364:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010367:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001036a:	99                   	cdq    
c001036b:	89 f7                	mov    edi,esi
c001036d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010371:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010375:	c1 ff 1f             	sar    edi,0x1f
c0010378:	57                   	push   edi
c0010379:	56                   	push   esi
c001037a:	52                   	push   edx
c001037b:	50                   	push   eax
c001037c:	e8 2b 60 01 00       	call   c00263ac <__umoddi3>
c0010381:	83 c4 10             	add    esp,0x10
c0010384:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010387:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001038c:	75 10                	jne    c001039e <Pipe::read(unsigned long long, void*, int*)+0xe0>
c001038e:	83 ec 0c             	sub    esp,0xc
c0010391:	68 35 9c 02 c0       	push   0xc0029c35
c0010396:	e8 a2 9c 00 00       	call   c001a03d <Krnl::panic(char const*)>
c001039b:	83 c4 10             	add    esp,0x10
c001039e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103a6:	89 10                	mov    DWORD PTR [eax],edx
c00103a8:	83 c4 1c             	add    esp,0x1c
c00103ab:	31 c0                	xor    eax,eax
c00103ad:	5b                   	pop    ebx
c00103ae:	5e                   	pop    esi
c00103af:	5f                   	pop    edi
c00103b0:	5d                   	pop    ebp
c00103b1:	c3                   	ret    

c00103b2 <Pipe::write(unsigned long long, void*, int*)>:
c00103b2:	55                   	push   ebp
c00103b3:	57                   	push   edi
c00103b4:	56                   	push   esi
c00103b5:	53                   	push   ebx
c00103b6:	83 ec 1c             	sub    esp,0x1c
c00103b9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00103bd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00103c1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00103c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00103c8:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00103cb:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00103ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103d2:	89 de                	mov    esi,ebx
c00103d4:	89 df                	mov    edi,ebx
c00103d6:	c1 ff 1f             	sar    edi,0x1f
c00103d9:	01 c6                	add    esi,eax
c00103db:	89 c8                	mov    eax,ecx
c00103dd:	11 d7                	adc    edi,edx
c00103df:	99                   	cdq    
c00103e0:	39 f1                	cmp    ecx,esi
c00103e2:	89 d0                	mov    eax,edx
c00103e4:	19 f8                	sbb    eax,edi
c00103e6:	b8 01 00 00 00       	mov    eax,0x1
c00103eb:	0f 82 80 00 00 00    	jb     c0010471 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00103f1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00103f4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00103f7:	01 d8                	add    eax,ebx
c00103f9:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00103fd:	99                   	cdq    
c00103fe:	f7 f9                	idiv   ecx
c0010400:	29 d1                	sub    ecx,edx
c0010402:	89 d7                	mov    edi,edx
c0010404:	89 c8                	mov    eax,ecx
c0010406:	99                   	cdq    
c0010407:	39 ce                	cmp    esi,ecx
c0010409:	19 d3                	sbb    ebx,edx
c001040b:	bb 00 00 00 00       	mov    ebx,0x0
c0010410:	72 04                	jb     c0010416 <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010412:	89 f3                	mov    ebx,esi
c0010414:	29 cb                	sub    ebx,ecx
c0010416:	89 f1                	mov    ecx,esi
c0010418:	29 d9                	sub    ecx,ebx
c001041a:	74 1a                	je     c0010436 <Pipe::write(unsigned long long, void*, int*)+0x84>
c001041c:	52                   	push   edx
c001041d:	51                   	push   ecx
c001041e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010422:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010426:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010429:	57                   	push   edi
c001042a:	e8 15 03 ff ff       	call   c0000744 <memcpy>
c001042f:	83 c4 10             	add    esp,0x10
c0010432:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010436:	85 db                	test   ebx,ebx
c0010438:	74 12                	je     c001044c <Pipe::write(unsigned long long, void*, int*)+0x9a>
c001043a:	50                   	push   eax
c001043b:	53                   	push   ebx
c001043c:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010440:	51                   	push   ecx
c0010441:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010444:	e8 fb 02 ff ff       	call   c0000744 <memcpy>
c0010449:	83 c4 10             	add    esp,0x10
c001044c:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c001044f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010454:	75 10                	jne    c0010466 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010456:	83 ec 0c             	sub    esp,0xc
c0010459:	68 51 9c 02 c0       	push   0xc0029c51
c001045e:	e8 da 9b 00 00       	call   c001a03d <Krnl::panic(char const*)>
c0010463:	83 c4 10             	add    esp,0x10
c0010466:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001046a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001046d:	89 38                	mov    DWORD PTR [eax],edi
c001046f:	31 c0                	xor    eax,eax
c0010471:	83 c4 1c             	add    esp,0x1c
c0010474:	5b                   	pop    ebx
c0010475:	5e                   	pop    esi
c0010476:	5f                   	pop    edi
c0010477:	5d                   	pop    ebp
c0010478:	c3                   	ret    
c0010479:	90                   	nop

c001047a <Pipe::Pipe(int)>:
c001047a:	83 ec 0c             	sub    esp,0xc
c001047d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010481:	83 ec 08             	sub    esp,0x8
c0010484:	6a 00                	push   0x0
c0010486:	50                   	push   eax
c0010487:	e8 56 12 00 00       	call   c00116e2 <UnixFile::UnixFile(int)>
c001048c:	83 c4 10             	add    esp,0x10
c001048f:	ba 78 9c 02 c0       	mov    edx,0xc0029c78
c0010494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010498:	89 10                	mov    DWORD PTR [eax],edx
c001049a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001049e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104a2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a9:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104b4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104bf:	83 ec 0c             	sub    esp,0xc
c00104c2:	50                   	push   eax
c00104c3:	e8 7e f3 ff ff       	call   c000f846 <malloc>
c00104c8:	83 c4 10             	add    esp,0x10
c00104cb:	89 c2                	mov    edx,eax
c00104cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00104d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00104dc:	90                   	nop
c00104dd:	83 c4 0c             	add    esp,0xc
c00104e0:	c3                   	ret    
c00104e1:	90                   	nop

c00104e2 <VgaText::isAtty()>:
c00104e2:	b0 01                	mov    al,0x1
c00104e4:	c3                   	ret    
c00104e5:	90                   	nop

c00104e6 <VgaText::~VgaText()>:
c00104e6:	83 ec 0c             	sub    esp,0xc
c00104e9:	ba 34 9d 02 c0       	mov    edx,0xc0029d34
c00104ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f2:	89 10                	mov    DWORD PTR [eax],edx
c00104f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f8:	83 ec 0c             	sub    esp,0xc
c00104fb:	50                   	push   eax
c00104fc:	e8 c3 13 00 00       	call   c00118c4 <UnixFile::~UnixFile()>
c0010501:	83 c4 10             	add    esp,0x10
c0010504:	90                   	nop
c0010505:	83 c4 0c             	add    esp,0xc
c0010508:	c3                   	ret    
c0010509:	90                   	nop

c001050a <VgaText::~VgaText()>:
c001050a:	83 ec 0c             	sub    esp,0xc
c001050d:	83 ec 0c             	sub    esp,0xc
c0010510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010514:	e8 cd ff ff ff       	call   c00104e6 <VgaText::~VgaText()>
c0010519:	83 c4 10             	add    esp,0x10
c001051c:	83 ec 08             	sub    esp,0x8
c001051f:	68 60 12 00 00       	push   0x1260
c0010524:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010528:	e8 08 25 00 00       	call   c0012a35 <operator delete(void*, unsigned long)>
c001052d:	83 c4 10             	add    esp,0x10
c0010530:	83 c4 0c             	add    esp,0xc
c0010533:	c3                   	ret    

c0010534 <VgaText::read(unsigned long long, void*, int*)>:
c0010534:	83 ec 10             	sub    esp,0x10
c0010537:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001053b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001053f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010543:	e8 1d 59 00 00       	call   c0015e65 <readKeyboard(VgaText*, char*, unsigned long)>
c0010548:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001054c:	89 02                	mov    DWORD PTR [edx],eax
c001054e:	31 c0                	xor    eax,eax
c0010550:	83 c4 1c             	add    esp,0x1c
c0010553:	c3                   	ret    

c0010554 <setTerminalScrollLock(bool)>:
c0010554:	c3                   	ret    

c0010555 <addToTerminalCycle(VgaText*)>:
c0010555:	8b 15 60 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dc60
c001055b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001055f:	85 d2                	test   edx,edx
c0010561:	75 0c                	jne    c001056f <addToTerminalCycle(VgaText*)+0x1a>
c0010563:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010569:	a3 60 dc 02 c0       	mov    ds:0xc002dc60,eax
c001056e:	c3                   	ret    
c001056f:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010575:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c001057b:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c0010581:	c3                   	ret    

c0010582 <installVgaTextImplementation()>:
c0010582:	83 ec 10             	sub    esp,0x10
c0010585:	6a 20                	push   0x20
c0010587:	6a 00                	push   0x0
c0010589:	68 40 dc 02 c0       	push   0xc002dc40
c001058e:	e8 e5 01 ff ff       	call   c0000778 <memset>
c0010593:	83 c4 1c             	add    esp,0x1c
c0010596:	c3                   	ret    

c0010597 <scrollTerminalScrollLock(int)>:
c0010597:	c3                   	ret    

c0010598 <VgaText::load()>:
c0010598:	53                   	push   ebx
c0010599:	31 c0                	xor    eax,eax
c001059b:	83 ec 58             	sub    esp,0x58
c001059e:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105a2:	89 e2                	mov    edx,esp
c00105a4:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105a8:	40                   	inc    eax
c00105a9:	83 f8 50             	cmp    eax,0x50
c00105ac:	75 f6                	jne    c00105a4 <VgaText::load()+0xc>
c00105ae:	31 c0                	xor    eax,eax
c00105b0:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00105b7:	84 c9                	test   cl,cl
c00105b9:	74 06                	je     c00105c1 <VgaText::load()+0x29>
c00105bb:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105be:	40                   	inc    eax
c00105bf:	eb ef                	jmp    c00105b0 <VgaText::load()+0x18>
c00105c1:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00105c7:	85 c0                	test   eax,eax
c00105c9:	74 09                	je     c00105d4 <VgaText::load()+0x3c>
c00105cb:	51                   	push   ecx
c00105cc:	51                   	push   ecx
c00105cd:	52                   	push   edx
c00105ce:	53                   	push   ebx
c00105cf:	ff d0                	call   eax
c00105d1:	83 c4 10             	add    esp,0x10
c00105d4:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00105da:	85 c0                	test   eax,eax
c00105dc:	74 09                	je     c00105e7 <VgaText::load()+0x4f>
c00105de:	83 ec 0c             	sub    esp,0xc
c00105e1:	53                   	push   ebx
c00105e2:	ff d0                	call   eax
c00105e4:	83 c4 10             	add    esp,0x10
c00105e7:	83 c4 58             	add    esp,0x58
c00105ea:	5b                   	pop    ebx
c00105eb:	c3                   	ret    

c00105ec <VgaText::updateCursor()>:
c00105ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105f0:	39 05 64 dc 02 c0    	cmp    DWORD PTR ds:0xc002dc64,eax
c00105f6:	75 0c                	jne    c0010604 <VgaText::updateCursor()+0x18>
c00105f8:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c00105fe:	85 c0                	test   eax,eax
c0010600:	74 02                	je     c0010604 <VgaText::updateCursor()+0x18>
c0010602:	ff e0                	jmp    eax
c0010604:	c3                   	ret    
c0010605:	90                   	nop

c0010606 <VgaText::showCursor(bool)>:
c0010606:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001060a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001060e:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010614:	c3                   	ret    
c0010615:	90                   	nop

c0010616 <VgaText::disableBlink(bool)>:
c0010616:	56                   	push   esi
c0010617:	53                   	push   ebx
c0010618:	51                   	push   ecx
c0010619:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001061d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010621:	39 1d 64 dc 02 c0    	cmp    DWORD PTR ds:0xc002dc64,ebx
c0010627:	75 18                	jne    c0010641 <VgaText::disableBlink(bool)+0x2b>
c0010629:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c001062f:	85 c0                	test   eax,eax
c0010631:	74 0e                	je     c0010641 <VgaText::disableBlink(bool)+0x2b>
c0010633:	89 f1                	mov    ecx,esi
c0010635:	52                   	push   edx
c0010636:	52                   	push   edx
c0010637:	0f b6 d1             	movzx  edx,cl
c001063a:	52                   	push   edx
c001063b:	53                   	push   ebx
c001063c:	ff d0                	call   eax
c001063e:	83 c4 10             	add    esp,0x10
c0010641:	89 f0                	mov    eax,esi
c0010643:	83 f0 01             	xor    eax,0x1
c0010646:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c001064c:	58                   	pop    eax
c001064d:	5b                   	pop    ebx
c001064e:	5e                   	pop    esi
c001064f:	c3                   	ret    

c0010650 <VgaText::doANSI_SGR(int)>:
c0010650:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010654:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010658:	85 d2                	test   edx,edx
c001065a:	75 14                	jne    c0010670 <VgaText::doANSI_SGR(int)+0x20>
c001065c:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010662:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010668:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c001066e:	eb 65                	jmp    c00106d5 <VgaText::doANSI_SGR(int)+0x85>
c0010670:	83 fa 07             	cmp    edx,0x7
c0010673:	75 14                	jne    c0010689 <VgaText::doANSI_SGR(int)+0x39>
c0010675:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c001067b:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c0010681:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010687:	eb 4c                	jmp    c00106d5 <VgaText::doANSI_SGR(int)+0x85>
c0010689:	83 fa 1b             	cmp    edx,0x1b
c001068c:	74 ce                	je     c001065c <VgaText::doANSI_SGR(int)+0xc>
c001068e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010691:	83 f9 07             	cmp    ecx,0x7
c0010694:	77 09                	ja     c001069f <VgaText::doANSI_SGR(int)+0x4f>
c0010696:	8b 14 8d e0 ca 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3520]
c001069d:	eb 20                	jmp    c00106bf <VgaText::doANSI_SGR(int)+0x6f>
c001069f:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106a2:	83 f9 07             	cmp    ecx,0x7
c00106a5:	77 09                	ja     c00106b0 <VgaText::doANSI_SGR(int)+0x60>
c00106a7:	8b 14 8d e0 ca 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3520]
c00106ae:	eb 25                	jmp    c00106d5 <VgaText::doANSI_SGR(int)+0x85>
c00106b0:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106b3:	83 f9 07             	cmp    ecx,0x7
c00106b6:	77 0e                	ja     c00106c6 <VgaText::doANSI_SGR(int)+0x76>
c00106b8:	8b 14 95 98 c9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3668]
c00106bf:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106c5:	c3                   	ret    
c00106c6:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106c9:	83 f9 07             	cmp    ecx,0x7
c00106cc:	77 0d                	ja     c00106db <VgaText::doANSI_SGR(int)+0x8b>
c00106ce:	8b 14 95 70 c9 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3690]
c00106d5:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00106db:	c3                   	ret    

c00106dc <VgaText::setDefaultBgColour(VgaColour)>:
c00106dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106e4:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00106ea:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00106f0:	c3                   	ret    
c00106f1:	90                   	nop

c00106f2 <VgaText::setDefaultFgColour(VgaColour)>:
c00106f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106fa:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010700:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010706:	c3                   	ret    
c0010707:	90                   	nop

c0010708 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010708:	53                   	push   ebx
c0010709:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001070d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010711:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010715:	51                   	push   ecx
c0010716:	e8 c1 ff ff ff       	call   c00106dc <VgaText::setDefaultBgColour(VgaColour)>
c001071b:	58                   	pop    eax
c001071c:	5a                   	pop    edx
c001071d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010721:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010725:	5b                   	pop    ebx
c0010726:	eb ca                	jmp    c00106f2 <VgaText::setDefaultFgColour(VgaColour)>

c0010728 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010728:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001072c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010731:	83 e0 0f             	and    eax,0xf
c0010734:	c1 e2 04             	shl    edx,0x4
c0010737:	09 d0                	or     eax,edx
c0010739:	c3                   	ret    

c001073a <VgaText::scrollScreen()>:
c001073a:	57                   	push   edi
c001073b:	56                   	push   esi
c001073c:	be 01 00 00 00       	mov    esi,0x1
c0010741:	53                   	push   ebx
c0010742:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010746:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001074c:	31 ff                	xor    edi,edi
c001074e:	01 d9                	add    ecx,ebx
c0010750:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010753:	83 fe 17             	cmp    esi,0x17
c0010756:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c001075c:	75 28                	jne    c0010786 <VgaText::scrollScreen()+0x4c>
c001075e:	f7 c7 01 00 00 00    	test   edi,0x1
c0010764:	74 1c                	je     c0010782 <VgaText::scrollScreen()+0x48>
c0010766:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c001076d:	50                   	push   eax
c001076e:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010775:	50                   	push   eax
c0010776:	e8 ad ff ff ff       	call   c0010728 <VgaText::combineColours(unsigned char, unsigned char)>
c001077b:	5a                   	pop    edx
c001077c:	5a                   	pop    edx
c001077d:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c0010780:	eb 04                	jmp    c0010786 <VgaText::scrollScreen()+0x4c>
c0010782:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010786:	47                   	inc    edi
c0010787:	41                   	inc    ecx
c0010788:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001078e:	75 c0                	jne    c0010750 <VgaText::scrollScreen()+0x16>
c0010790:	46                   	inc    esi
c0010791:	83 fe 18             	cmp    esi,0x18
c0010794:	75 b0                	jne    c0010746 <VgaText::scrollScreen()+0xc>
c0010796:	39 1d 64 dc 02 c0    	cmp    DWORD PTR ds:0xc002dc64,ebx
c001079c:	75 24                	jne    c00107c2 <VgaText::scrollScreen()+0x88>
c001079e:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00107a5:	74 08                	je     c00107af <VgaText::scrollScreen()+0x75>
c00107a7:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00107ad:	eb 13                	jmp    c00107c2 <VgaText::scrollScreen()+0x88>
c00107af:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00107b5:	85 c0                	test   eax,eax
c00107b7:	74 09                	je     c00107c2 <VgaText::scrollScreen()+0x88>
c00107b9:	83 ec 0c             	sub    esp,0xc
c00107bc:	53                   	push   ebx
c00107bd:	ff d0                	call   eax
c00107bf:	83 c4 10             	add    esp,0x10
c00107c2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00107c6:	5b                   	pop    ebx
c00107c7:	5e                   	pop    esi
c00107c8:	5f                   	pop    edi
c00107c9:	e9 1e fe ff ff       	jmp    c00105ec <VgaText::updateCursor()>

c00107ce <VgaText::combineCharAndColour(char, unsigned char)>:
c00107ce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107d3:	c1 e0 08             	shl    eax,0x8
c00107d6:	89 c2                	mov    edx,eax
c00107d8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00107dd:	09 d0                	or     eax,edx
c00107df:	c3                   	ret    

c00107e0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00107e0:	53                   	push   ebx
c00107e1:	83 ec 08             	sub    esp,0x8
c00107e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107e8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107ed:	50                   	push   eax
c00107ee:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107f3:	50                   	push   eax
c00107f4:	e8 2f ff ff ff       	call   c0010728 <VgaText::combineColours(unsigned char, unsigned char)>
c00107f9:	5a                   	pop    edx
c00107fa:	0f b6 c0             	movzx  eax,al
c00107fd:	5b                   	pop    ebx
c00107fe:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010803:	50                   	push   eax
c0010804:	53                   	push   ebx
c0010805:	e8 c4 ff ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c001080a:	5a                   	pop    edx
c001080b:	5a                   	pop    edx
c001080c:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010812:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010816:	0f b7 d2             	movzx  edx,dx
c0010819:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c001081e:	39 0d 64 dc 02 c0    	cmp    DWORD PTR ds:0xc002dc64,ecx
c0010824:	75 14                	jne    c001083a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010826:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c001082c:	85 c0                	test   eax,eax
c001082e:	74 0a                	je     c001083a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010830:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010834:	83 c4 08             	add    esp,0x8
c0010837:	5b                   	pop    ebx
c0010838:	ff e0                	jmp    eax
c001083a:	83 c4 08             	add    esp,0x8
c001083d:	5b                   	pop    ebx
c001083e:	c3                   	ret    
c001083f:	90                   	nop

c0010840 <VgaText::getCursorX()>:
c0010840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010844:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c001084a:	c3                   	ret    
c001084b:	90                   	nop

c001084c <VgaText::getCursorY()>:
c001084c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010850:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010856:	c3                   	ret    
c0010857:	90                   	nop

c0010858 <VgaText::setCursor(int, int)>:
c0010858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001085c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010860:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010866:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001086a:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010870:	e9 77 fd ff ff       	jmp    c00105ec <VgaText::updateCursor()>
c0010875:	90                   	nop

c0010876 <VgaText::setCursorX(int)>:
c0010876:	83 ec 10             	sub    esp,0x10
c0010879:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001087d:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010883:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010887:	50                   	push   eax
c0010888:	e8 cb ff ff ff       	call   c0010858 <VgaText::setCursor(int, int)>
c001088d:	83 c4 1c             	add    esp,0x1c
c0010890:	c3                   	ret    
c0010891:	90                   	nop

c0010892 <VgaText::setCursorY(int)>:
c0010892:	83 ec 10             	sub    esp,0x10
c0010895:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010899:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001089d:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00108a3:	50                   	push   eax
c00108a4:	e8 af ff ff ff       	call   c0010858 <VgaText::setCursor(int, int)>
c00108a9:	83 c4 1c             	add    esp,0x1c
c00108ac:	c3                   	ret    
c00108ad:	90                   	nop

c00108ae <VgaText::incrementCursor(bool)>:
c00108ae:	56                   	push   esi
c00108af:	53                   	push   ebx
c00108b0:	51                   	push   ecx
c00108b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108b5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108b9:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00108bf:	40                   	inc    eax
c00108c0:	83 f8 50             	cmp    eax,0x50
c00108c3:	74 08                	je     c00108cd <VgaText::incrementCursor(bool)+0x1f>
c00108c5:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00108cb:	eb 33                	jmp    c0010900 <VgaText::incrementCursor(bool)+0x52>
c00108cd:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00108d3:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00108dd:	8d 50 01             	lea    edx,[eax+0x1]
c00108e0:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00108e6:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00108ec:	75 12                	jne    c0010900 <VgaText::incrementCursor(bool)+0x52>
c00108ee:	83 ec 0c             	sub    esp,0xc
c00108f1:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00108f7:	53                   	push   ebx
c00108f8:	e8 3d fe ff ff       	call   c001073a <VgaText::scrollScreen()>
c00108fd:	83 c4 10             	add    esp,0x10
c0010900:	89 f0                	mov    eax,esi
c0010902:	84 c0                	test   al,al
c0010904:	74 0c                	je     c0010912 <VgaText::incrementCursor(bool)+0x64>
c0010906:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001090a:	5a                   	pop    edx
c001090b:	5b                   	pop    ebx
c001090c:	5e                   	pop    esi
c001090d:	e9 da fc ff ff       	jmp    c00105ec <VgaText::updateCursor()>
c0010912:	58                   	pop    eax
c0010913:	5b                   	pop    ebx
c0010914:	5e                   	pop    esi
c0010915:	c3                   	ret    

c0010916 <VgaText::updateRAMUsageDisplay(int)>:
c0010916:	56                   	push   esi
c0010917:	8b 35 c0 ca 02 c0    	mov    esi,DWORD PTR ds:0xc002cac0
c001091d:	53                   	push   ebx
c001091e:	bb 0a 00 00 00       	mov    ebx,0xa
c0010923:	6a 0f                	push   0xf
c0010925:	6a 00                	push   0x0
c0010927:	e8 fc fd ff ff       	call   c0010728 <VgaText::combineColours(unsigned char, unsigned char)>
c001092c:	5a                   	pop    edx
c001092d:	59                   	pop    ecx
c001092e:	0f b6 c8             	movzx  ecx,al
c0010931:	51                   	push   ecx
c0010932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010936:	99                   	cdq    
c0010937:	f7 fb                	idiv   ebx
c0010939:	89 d3                	mov    ebx,edx
c001093b:	83 c0 30             	add    eax,0x30
c001093e:	83 c3 30             	add    ebx,0x30
c0010941:	0f be c0             	movsx  eax,al
c0010944:	0f b6 db             	movzx  ebx,bl
c0010947:	50                   	push   eax
c0010948:	e8 81 fe ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c001094d:	5a                   	pop    edx
c001094e:	5a                   	pop    edx
c001094f:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010956:	51                   	push   ecx
c0010957:	53                   	push   ebx
c0010958:	e8 71 fe ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c001095d:	5b                   	pop    ebx
c001095e:	5a                   	pop    edx
c001095f:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010966:	51                   	push   ecx
c0010967:	6a 25                	push   0x25
c0010969:	e8 60 fe ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c001096e:	59                   	pop    ecx
c001096f:	5b                   	pop    ebx
c0010970:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010977:	5b                   	pop    ebx
c0010978:	5e                   	pop    esi
c0010979:	c3                   	ret    

c001097a <VgaText::updateDiskUsage()>:
c001097a:	55                   	push   ebp
c001097b:	bd 10 27 00 00       	mov    ebp,0x2710
c0010980:	57                   	push   edi
c0010981:	8b 3d c0 ca 02 c0    	mov    edi,DWORD PTR ds:0xc002cac0
c0010987:	56                   	push   esi
c0010988:	53                   	push   ebx
c0010989:	6a 0f                	push   0xf
c001098b:	6a 00                	push   0x0
c001098d:	e8 96 fd ff ff       	call   c0010728 <VgaText::combineColours(unsigned char, unsigned char)>
c0010992:	5a                   	pop    edx
c0010993:	0f b6 d8             	movzx  ebx,al
c0010996:	59                   	pop    ecx
c0010997:	8b 35 e8 1e 03 c0    	mov    esi,DWORD PTR ds:0xc0031ee8
c001099d:	53                   	push   ebx
c001099e:	b9 0a 00 00 00       	mov    ecx,0xa
c00109a3:	89 f0                	mov    eax,esi
c00109a5:	99                   	cdq    
c00109a6:	f7 fd                	idiv   ebp
c00109a8:	99                   	cdq    
c00109a9:	f7 f9                	idiv   ecx
c00109ab:	8d 42 30             	lea    eax,[edx+0x30]
c00109ae:	0f b6 c0             	movzx  eax,al
c00109b1:	50                   	push   eax
c00109b2:	e8 17 fe ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c00109b7:	5d                   	pop    ebp
c00109b8:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109bd:	5a                   	pop    edx
c00109be:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109c2:	53                   	push   ebx
c00109c3:	89 f0                	mov    eax,esi
c00109c5:	99                   	cdq    
c00109c6:	f7 fd                	idiv   ebp
c00109c8:	99                   	cdq    
c00109c9:	f7 f9                	idiv   ecx
c00109cb:	8d 42 30             	lea    eax,[edx+0x30]
c00109ce:	0f b6 c0             	movzx  eax,al
c00109d1:	50                   	push   eax
c00109d2:	e8 f7 fd ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c00109d7:	5d                   	pop    ebp
c00109d8:	bd 64 00 00 00       	mov    ebp,0x64
c00109dd:	5a                   	pop    edx
c00109de:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00109e5:	53                   	push   ebx
c00109e6:	89 f0                	mov    eax,esi
c00109e8:	99                   	cdq    
c00109e9:	f7 fd                	idiv   ebp
c00109eb:	99                   	cdq    
c00109ec:	f7 f9                	idiv   ecx
c00109ee:	8d 42 30             	lea    eax,[edx+0x30]
c00109f1:	0f b6 c0             	movzx  eax,al
c00109f4:	50                   	push   eax
c00109f5:	e8 d4 fd ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c00109fa:	5d                   	pop    ebp
c00109fb:	5a                   	pop    edx
c00109fc:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a03:	53                   	push   ebx
c0010a04:	89 f0                	mov    eax,esi
c0010a06:	99                   	cdq    
c0010a07:	f7 f9                	idiv   ecx
c0010a09:	89 d6                	mov    esi,edx
c0010a0b:	99                   	cdq    
c0010a0c:	f7 f9                	idiv   ecx
c0010a0e:	8d 42 30             	lea    eax,[edx+0x30]
c0010a11:	0f b6 c0             	movzx  eax,al
c0010a14:	50                   	push   eax
c0010a15:	e8 b4 fd ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c0010a1a:	5d                   	pop    ebp
c0010a1b:	5a                   	pop    edx
c0010a1c:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a23:	53                   	push   ebx
c0010a24:	8d 46 30             	lea    eax,[esi+0x30]
c0010a27:	0f b6 f0             	movzx  esi,al
c0010a2a:	56                   	push   esi
c0010a2b:	e8 9e fd ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c0010a30:	5e                   	pop    esi
c0010a31:	8b 35 e4 1e 03 c0    	mov    esi,DWORD PTR ds:0xc0031ee4
c0010a37:	5d                   	pop    ebp
c0010a38:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a3f:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a44:	53                   	push   ebx
c0010a45:	89 f0                	mov    eax,esi
c0010a47:	99                   	cdq    
c0010a48:	f7 fd                	idiv   ebp
c0010a4a:	99                   	cdq    
c0010a4b:	f7 f9                	idiv   ecx
c0010a4d:	8d 42 30             	lea    eax,[edx+0x30]
c0010a50:	0f b6 c0             	movzx  eax,al
c0010a53:	50                   	push   eax
c0010a54:	e8 75 fd ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c0010a59:	5a                   	pop    edx
c0010a5a:	5d                   	pop    ebp
c0010a5b:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a62:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a67:	53                   	push   ebx
c0010a68:	89 f0                	mov    eax,esi
c0010a6a:	99                   	cdq    
c0010a6b:	f7 fd                	idiv   ebp
c0010a6d:	99                   	cdq    
c0010a6e:	f7 f9                	idiv   ecx
c0010a70:	8d 42 30             	lea    eax,[edx+0x30]
c0010a73:	0f b6 c0             	movzx  eax,al
c0010a76:	50                   	push   eax
c0010a77:	e8 52 fd ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c0010a7c:	5a                   	pop    edx
c0010a7d:	5d                   	pop    ebp
c0010a7e:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a85:	bd 64 00 00 00       	mov    ebp,0x64
c0010a8a:	53                   	push   ebx
c0010a8b:	89 f0                	mov    eax,esi
c0010a8d:	99                   	cdq    
c0010a8e:	f7 fd                	idiv   ebp
c0010a90:	99                   	cdq    
c0010a91:	f7 f9                	idiv   ecx
c0010a93:	83 c2 30             	add    edx,0x30
c0010a96:	0f b6 d2             	movzx  edx,dl
c0010a99:	52                   	push   edx
c0010a9a:	e8 2f fd ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c0010a9f:	5a                   	pop    edx
c0010aa0:	5d                   	pop    ebp
c0010aa1:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010aa8:	53                   	push   ebx
c0010aa9:	89 f0                	mov    eax,esi
c0010aab:	99                   	cdq    
c0010aac:	f7 f9                	idiv   ecx
c0010aae:	89 d6                	mov    esi,edx
c0010ab0:	99                   	cdq    
c0010ab1:	f7 f9                	idiv   ecx
c0010ab3:	8d 42 30             	lea    eax,[edx+0x30]
c0010ab6:	0f b6 c0             	movzx  eax,al
c0010ab9:	50                   	push   eax
c0010aba:	e8 0f fd ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c0010abf:	5a                   	pop    edx
c0010ac0:	59                   	pop    ecx
c0010ac1:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010ac8:	53                   	push   ebx
c0010ac9:	8d 46 30             	lea    eax,[esi+0x30]
c0010acc:	0f b6 f0             	movzx  esi,al
c0010acf:	56                   	push   esi
c0010ad0:	e8 f9 fc ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad5:	5b                   	pop    ebx
c0010ad6:	5e                   	pop    esi
c0010ad7:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010ade:	5b                   	pop    ebx
c0010adf:	5e                   	pop    esi
c0010ae0:	5f                   	pop    edi
c0010ae1:	5d                   	pop    ebp
c0010ae2:	c3                   	ret    
c0010ae3:	90                   	nop

c0010ae4 <VgaText::updateTitle()>:
c0010ae4:	53                   	push   ebx
c0010ae5:	31 c0                	xor    eax,eax
c0010ae7:	83 ec 58             	sub    esp,0x58
c0010aea:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010aee:	89 e1                	mov    ecx,esp
c0010af0:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010af4:	40                   	inc    eax
c0010af5:	83 f8 50             	cmp    eax,0x50
c0010af8:	75 f6                	jne    c0010af0 <VgaText::updateTitle()+0xc>
c0010afa:	31 c0                	xor    eax,eax
c0010afc:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b03:	84 db                	test   bl,bl
c0010b05:	74 06                	je     c0010b0d <VgaText::updateTitle()+0x29>
c0010b07:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b0a:	40                   	inc    eax
c0010b0b:	eb ef                	jmp    c0010afc <VgaText::updateTitle()+0x18>
c0010b0d:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b13:	85 c0                	test   eax,eax
c0010b15:	74 09                	je     c0010b20 <VgaText::updateTitle()+0x3c>
c0010b17:	53                   	push   ebx
c0010b18:	53                   	push   ebx
c0010b19:	51                   	push   ecx
c0010b1a:	52                   	push   edx
c0010b1b:	ff d0                	call   eax
c0010b1d:	83 c4 10             	add    esp,0x10
c0010b20:	e8 55 fe ff ff       	call   c001097a <VgaText::updateDiskUsage()>
c0010b25:	83 c4 58             	add    esp,0x58
c0010b28:	5b                   	pop    ebx
c0010b29:	c3                   	ret    

c0010b2a <VgaText::setTitleTextColour(VgaColour)>:
c0010b2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b32:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b38:	eb aa                	jmp    c0010ae4 <VgaText::updateTitle()>

c0010b3a <VgaText::setTitleColour(VgaColour)>:
c0010b3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b42:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010b48:	eb 9a                	jmp    c0010ae4 <VgaText::updateTitle()>

c0010b4a <VgaText::setTitle(char*)>:
c0010b4a:	53                   	push   ebx
c0010b4b:	83 ec 10             	sub    esp,0x10
c0010b4e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b56:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010b5c:	50                   	push   eax
c0010b5d:	e8 d2 fc fe ff       	call   c0000834 <strcpy>
c0010b62:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b66:	83 c4 18             	add    esp,0x18
c0010b69:	5b                   	pop    ebx
c0010b6a:	e9 75 ff ff ff       	jmp    c0010ae4 <VgaText::updateTitle()>
c0010b6f:	90                   	nop

c0010b70 <VgaText::decrementCursor(bool)>:
c0010b70:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b74:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b78:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010b7e:	85 c0                	test   eax,eax
c0010b80:	74 07                	je     c0010b89 <VgaText::decrementCursor(bool)+0x19>
c0010b82:	48                   	dec    eax
c0010b83:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010b89:	84 c9                	test   cl,cl
c0010b8b:	74 09                	je     c0010b96 <VgaText::decrementCursor(bool)+0x26>
c0010b8d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b91:	e9 56 fa ff ff       	jmp    c00105ec <VgaText::updateCursor()>
c0010b96:	c3                   	ret    
c0010b97:	90                   	nop

c0010b98 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010b98:	53                   	push   ebx
c0010b99:	83 ec 08             	sub    esp,0x8
c0010b9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010ba0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ba4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010ba8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010bac:	3c 07                	cmp    al,0x7
c0010bae:	75 2a                	jne    c0010bda <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010bb0:	a1 0c dd 02 c0       	mov    eax,ds:0xc002dd0c
c0010bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010bbd:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010bc5:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010bcd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010bd1:	83 c4 08             	add    esp,0x8
c0010bd4:	5b                   	pop    ebx
c0010bd5:	e9 3a 2d 00 00       	jmp    c0013914 <Buzzer::beep(int, int, bool)>
c0010bda:	3c 0d                	cmp    al,0xd
c0010bdc:	75 0c                	jne    c0010bea <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010bde:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010be8:	eb 3b                	jmp    c0010c25 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010bea:	3c 0a                	cmp    al,0xa
c0010bec:	75 40                	jne    c0010c2e <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010bee:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010bf4:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010bfe:	8d 50 01             	lea    edx,[eax+0x1]
c0010c01:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c07:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c0d:	75 12                	jne    c0010c21 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c0f:	83 ec 0c             	sub    esp,0xc
c0010c12:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c18:	53                   	push   ebx
c0010c19:	e8 1c fb ff ff       	call   c001073a <VgaText::scrollScreen()>
c0010c1e:	83 c4 10             	add    esp,0x10
c0010c21:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c25:	83 c4 08             	add    esp,0x8
c0010c28:	5b                   	pop    ebx
c0010c29:	e9 be f9 ff ff       	jmp    c00105ec <VgaText::updateCursor()>
c0010c2e:	3c 08                	cmp    al,0x8
c0010c30:	75 31                	jne    c0010c63 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c32:	50                   	push   eax
c0010c33:	50                   	push   eax
c0010c34:	6a 01                	push   0x1
c0010c36:	53                   	push   ebx
c0010c37:	e8 34 ff ff ff       	call   c0010b70 <VgaText::decrementCursor(bool)>
c0010c3c:	5a                   	pop    edx
c0010c3d:	59                   	pop    ecx
c0010c3e:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c44:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c4a:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c50:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c56:	6a 20                	push   0x20
c0010c58:	53                   	push   ebx
c0010c59:	e8 82 fb ff ff       	call   c00107e0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c5e:	83 c4 28             	add    esp,0x28
c0010c61:	5b                   	pop    ebx
c0010c62:	c3                   	ret    
c0010c63:	83 ec 08             	sub    esp,0x8
c0010c66:	0f be c0             	movsx  eax,al
c0010c69:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c6f:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c75:	51                   	push   ecx
c0010c76:	52                   	push   edx
c0010c77:	50                   	push   eax
c0010c78:	53                   	push   ebx
c0010c79:	e8 62 fb ff ff       	call   c00107e0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c7e:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c82:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010c8a:	83 c4 28             	add    esp,0x28
c0010c8d:	5b                   	pop    ebx
c0010c8e:	e9 1b fc ff ff       	jmp    c00108ae <VgaText::incrementCursor(bool)>
c0010c93:	90                   	nop

c0010c94 <VgaText::isShowingCursor()>:
c0010c94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c98:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010c9e:	c3                   	ret    
c0010c9f:	90                   	nop

c0010ca0 <VgaText::isBlinkDisabled()>:
c0010ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ca4:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010caa:	83 f0 01             	xor    eax,0x1
c0010cad:	c3                   	ret    

c0010cae <VgaText::setCursorHeight(int)>:
c0010cae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cb2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cb6:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010cbc:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010cc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010cc7:	e9 3a f9 ff ff       	jmp    c0010606 <VgaText::showCursor(bool)>

c0010ccc <VgaText::getCursorHeight()>:
c0010ccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cd0:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010cd6:	c3                   	ret    

c0010cd7 <setActiveTerminal(VgaText*)>:
c0010cd7:	53                   	push   ebx
c0010cd8:	83 ec 08             	sub    esp,0x8
c0010cdb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cdf:	85 db                	test   ebx,ebx
c0010ce1:	75 11                	jne    c0010cf4 <setActiveTerminal(VgaText*)+0x1d>
c0010ce3:	c7 44 24 10 8c 9c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029c8c
c0010ceb:	83 c4 08             	add    esp,0x8
c0010cee:	5b                   	pop    ebx
c0010cef:	e9 49 93 00 00       	jmp    c001a03d <Krnl::panic(char const*)>
c0010cf4:	50                   	push   eax
c0010cf5:	50                   	push   eax
c0010cf6:	53                   	push   ebx
c0010cf7:	68 9a 9c 02 c0       	push   0xc0029c9a
c0010cfc:	e8 14 1e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0010d01:	a1 64 dc 02 c0       	mov    eax,ds:0xc002dc64
c0010d06:	83 c4 10             	add    esp,0x10
c0010d09:	85 c0                	test   eax,eax
c0010d0b:	74 0c                	je     c0010d19 <setActiveTerminal(VgaText*)+0x42>
c0010d0d:	83 ec 0c             	sub    esp,0xc
c0010d10:	50                   	push   eax
c0010d11:	e8 d6 f8 ff ff       	call   c00105ec <VgaText::updateCursor()>
c0010d16:	83 c4 10             	add    esp,0x10
c0010d19:	89 1d 64 dc 02 c0    	mov    DWORD PTR ds:0xc002dc64,ebx
c0010d1f:	51                   	push   ecx
c0010d20:	51                   	push   ecx
c0010d21:	53                   	push   ebx
c0010d22:	68 b2 9c 02 c0       	push   0xc0029cb2
c0010d27:	e8 e9 1d 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0010d2c:	83 c4 0c             	add    esp,0xc
c0010d2f:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d35:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d3b:	53                   	push   ebx
c0010d3c:	e8 17 fb ff ff       	call   c0010858 <VgaText::setCursor(int, int)>
c0010d41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d44:	e8 57 ff ff ff       	call   c0010ca0 <VgaText::isBlinkDisabled()>
c0010d49:	5a                   	pop    edx
c0010d4a:	0f b6 c0             	movzx  eax,al
c0010d4d:	59                   	pop    ecx
c0010d4e:	50                   	push   eax
c0010d4f:	53                   	push   ebx
c0010d50:	e8 c1 f8 ff ff       	call   c0010616 <VgaText::disableBlink(bool)>
c0010d55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d58:	e8 6f ff ff ff       	call   c0010ccc <VgaText::getCursorHeight()>
c0010d5d:	5a                   	pop    edx
c0010d5e:	59                   	pop    ecx
c0010d5f:	50                   	push   eax
c0010d60:	53                   	push   ebx
c0010d61:	e8 48 ff ff ff       	call   c0010cae <VgaText::setCursorHeight(int)>
c0010d66:	83 c4 10             	add    esp,0x10
c0010d69:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010d70:	75 0a                	jne    c0010d7c <setActiveTerminal(VgaText*)+0xa5>
c0010d72:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010d7c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d80:	83 c4 08             	add    esp,0x8
c0010d83:	5b                   	pop    ebx
c0010d84:	e9 0f f8 ff ff       	jmp    c0010598 <VgaText::load()>

c0010d89 <doTerminalCycle()>:
c0010d89:	83 ec 18             	sub    esp,0x18
c0010d8c:	a1 60 dc 02 c0       	mov    eax,ds:0xc002dc60
c0010d91:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010d97:	50                   	push   eax
c0010d98:	a3 60 dc 02 c0       	mov    ds:0xc002dc60,eax
c0010d9d:	e8 35 ff ff ff       	call   c0010cd7 <setActiveTerminal(VgaText*)>
c0010da2:	83 c4 1c             	add    esp,0x1c
c0010da5:	c3                   	ret    

c0010da6 <VgaText::doUpdate()>:
c0010da6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010daa:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010db0:	85 c0                	test   eax,eax
c0010db2:	74 02                	je     c0010db6 <VgaText::doUpdate()+0x10>
c0010db4:	ff e0                	jmp    eax
c0010db6:	c3                   	ret    
c0010db7:	90                   	nop

c0010db8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010db8:	55                   	push   ebp
c0010db9:	57                   	push   edi
c0010dba:	56                   	push   esi
c0010dbb:	53                   	push   ebx
c0010dbc:	83 ec 1c             	sub    esp,0x1c
c0010dbf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010dc3:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dc8:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010dcf:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010dd2:	50                   	push   eax
c0010dd3:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010dd8:	50                   	push   eax
c0010dd9:	e8 4a f9 ff ff       	call   c0010728 <VgaText::combineColours(unsigned char, unsigned char)>
c0010dde:	59                   	pop    ecx
c0010ddf:	0f b6 c0             	movzx  eax,al
c0010de2:	5b                   	pop    ebx
c0010de3:	31 c9                	xor    ecx,ecx
c0010de5:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ded:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010df1:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010df7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010dfb:	0f b7 db             	movzx  ebx,bx
c0010dfe:	01 db                	add    ebx,ebx
c0010e00:	01 fb                	add    ebx,edi
c0010e02:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e05:	84 c0                	test   al,al
c0010e07:	0f 84 38 01 00 00    	je     c0010f45 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e0d:	3c 0d                	cmp    al,0xd
c0010e0f:	75 0f                	jne    c0010e20 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e11:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e1b:	e9 1f 01 00 00       	jmp    c0010f3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e20:	3c 0a                	cmp    al,0xa
c0010e22:	75 5b                	jne    c0010e7f <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e24:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e2a:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e34:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e37:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e3d:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e43:	75 12                	jne    c0010e57 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e45:	83 ec 0c             	sub    esp,0xc
c0010e48:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010e4e:	55                   	push   ebp
c0010e4f:	e8 e6 f8 ff ff       	call   c001073a <VgaText::scrollScreen()>
c0010e54:	83 c4 10             	add    esp,0x10
c0010e57:	83 ec 0c             	sub    esp,0xc
c0010e5a:	55                   	push   ebp
c0010e5b:	e8 8c f7 ff ff       	call   c00105ec <VgaText::updateCursor()>
c0010e60:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e68:	83 c4 10             	add    esp,0x10
c0010e6b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e71:	31 c9                	xor    ecx,ecx
c0010e73:	0f b7 db             	movzx  ebx,bx
c0010e76:	01 db                	add    ebx,ebx
c0010e78:	01 fb                	add    ebx,edi
c0010e7a:	e9 c0 00 00 00       	jmp    c0010f3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e7f:	3c 08                	cmp    al,0x8
c0010e81:	75 4e                	jne    c0010ed1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010e83:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010e87:	53                   	push   ebx
c0010e88:	53                   	push   ebx
c0010e89:	6a 01                	push   0x1
c0010e8b:	55                   	push   ebp
c0010e8c:	e8 df fc ff ff       	call   c0010b70 <VgaText::decrementCursor(bool)>
c0010e91:	58                   	pop    eax
c0010e92:	5a                   	pop    edx
c0010e93:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010e99:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010e9f:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010ea5:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010eab:	6a 20                	push   0x20
c0010ead:	55                   	push   ebp
c0010eae:	e8 2d f9 ff ff       	call   c00107e0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010eb3:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ebb:	83 c4 20             	add    esp,0x20
c0010ebe:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ec4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010ec8:	0f b7 db             	movzx  ebx,bx
c0010ecb:	01 db                	add    ebx,ebx
c0010ecd:	01 fb                	add    ebx,edi
c0010ecf:	eb 6e                	jmp    c0010f3f <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ed1:	51                   	push   ecx
c0010ed2:	51                   	push   ecx
c0010ed3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010ed7:	50                   	push   eax
c0010ed8:	e8 f1 f8 ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c0010edd:	83 c4 10             	add    esp,0x10
c0010ee0:	66 89 03             	mov    WORD PTR [ebx],ax
c0010ee3:	39 2d 64 dc 02 c0    	cmp    DWORD PTR ds:0xc002dc64,ebp
c0010ee9:	75 2a                	jne    c0010f15 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010eeb:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010ef1:	85 c0                	test   eax,eax
c0010ef3:	74 20                	je     c0010f15 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010ef5:	52                   	push   edx
c0010ef6:	52                   	push   edx
c0010ef7:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010efd:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f0b:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f0e:	51                   	push   ecx
c0010f0f:	55                   	push   ebp
c0010f10:	ff d0                	call   eax
c0010f12:	83 c4 20             	add    esp,0x20
c0010f15:	83 c3 02             	add    ebx,0x2
c0010f18:	50                   	push   eax
c0010f19:	50                   	push   eax
c0010f1a:	6a 00                	push   0x0
c0010f1c:	55                   	push   ebp
c0010f1d:	e8 8c f9 ff ff       	call   c00108ae <VgaText::incrementCursor(bool)>
c0010f22:	83 c4 10             	add    esp,0x10
c0010f25:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f2c:	75 0f                	jne    c0010f3d <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f2e:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f36:	0f b7 db             	movzx  ebx,bx
c0010f39:	01 db                	add    ebx,ebx
c0010f3b:	01 fb                	add    ebx,edi
c0010f3d:	b1 01                	mov    cl,0x1
c0010f3f:	46                   	inc    esi
c0010f40:	e9 bd fe ff ff       	jmp    c0010e02 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f45:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010f49:	83 ec 0c             	sub    esp,0xc
c0010f4c:	55                   	push   ebp
c0010f4d:	e8 9a f6 ff ff       	call   c00105ec <VgaText::updateCursor()>
c0010f52:	83 c4 10             	add    esp,0x10
c0010f55:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010f59:	84 c9                	test   cl,cl
c0010f5b:	74 0c                	je     c0010f69 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010f5d:	83 ec 0c             	sub    esp,0xc
c0010f60:	55                   	push   ebp
c0010f61:	e8 40 fe ff ff       	call   c0010da6 <VgaText::doUpdate()>
c0010f66:	83 c4 10             	add    esp,0x10
c0010f69:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010f70:	83 c4 1c             	add    esp,0x1c
c0010f73:	5b                   	pop    ebx
c0010f74:	5e                   	pop    esi
c0010f75:	5f                   	pop    edi
c0010f76:	5d                   	pop    ebp
c0010f77:	c3                   	ret    

c0010f78 <VgaText::clearScreen()>:
c0010f78:	57                   	push   edi
c0010f79:	56                   	push   esi
c0010f7a:	31 f6                	xor    esi,esi
c0010f7c:	53                   	push   ebx
c0010f7d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f81:	52                   	push   edx
c0010f82:	6a 00                	push   0x0
c0010f84:	6a 00                	push   0x0
c0010f86:	53                   	push   ebx
c0010f87:	e8 cc f8 ff ff       	call   c0010858 <VgaText::setCursor(int, int)>
c0010f8c:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010f93:	83 c4 10             	add    esp,0x10
c0010f96:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010f9c:	7e 26                	jle    c0010fc4 <VgaText::clearScreen()+0x4c>
c0010f9e:	31 ff                	xor    edi,edi
c0010fa0:	50                   	push   eax
c0010fa1:	50                   	push   eax
c0010fa2:	56                   	push   esi
c0010fa3:	57                   	push   edi
c0010fa4:	47                   	inc    edi
c0010fa5:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010fab:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010fb1:	6a 20                	push   0x20
c0010fb3:	53                   	push   ebx
c0010fb4:	e8 27 f8 ff ff       	call   c00107e0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010fb9:	83 c4 20             	add    esp,0x20
c0010fbc:	83 ff 50             	cmp    edi,0x50
c0010fbf:	75 df                	jne    c0010fa0 <VgaText::clearScreen()+0x28>
c0010fc1:	46                   	inc    esi
c0010fc2:	eb d2                	jmp    c0010f96 <VgaText::clearScreen()+0x1e>
c0010fc4:	83 ec 0c             	sub    esp,0xc
c0010fc7:	53                   	push   ebx
c0010fc8:	e8 d9 fd ff ff       	call   c0010da6 <VgaText::doUpdate()>
c0010fcd:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010fd4:	83 c4 10             	add    esp,0x10
c0010fd7:	5b                   	pop    ebx
c0010fd8:	5e                   	pop    esi
c0010fd9:	5f                   	pop    edi
c0010fda:	c3                   	ret    
c0010fdb:	90                   	nop

c0010fdc <VgaText::putchar(char)>:
c0010fdc:	56                   	push   esi
c0010fdd:	53                   	push   ebx
c0010fde:	83 ec 14             	sub    esp,0x14
c0010fe1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010fe5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010fe9:	3c 5b                	cmp    al,0x5b
c0010feb:	75 21                	jne    c001100e <VgaText::putchar(char)+0x32>
c0010fed:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010ff4:	74 28                	je     c001101e <VgaText::putchar(char)+0x42>
c0010ff6:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010fff:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0011009:	e9 e2 00 00 00       	jmp    c00110f0 <VgaText::putchar(char)+0x114>
c001100e:	3c 1b                	cmp    al,0x1b
c0011010:	75 0c                	jne    c001101e <VgaText::putchar(char)+0x42>
c0011012:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0011019:	e9 d2 00 00 00       	jmp    c00110f0 <VgaText::putchar(char)+0x114>
c001101e:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0011024:	84 c9                	test   cl,cl
c0011026:	0f 84 ab 00 00 00    	je     c00110d7 <VgaText::putchar(char)+0xfb>
c001102c:	8d 50 c0             	lea    edx,[eax-0x40]
c001102f:	80 fa 3e             	cmp    dl,0x3e
c0011032:	0f 87 82 00 00 00    	ja     c00110ba <VgaText::putchar(char)+0xde>
c0011038:	3c 6d                	cmp    al,0x6d
c001103a:	75 4d                	jne    c0011089 <VgaText::putchar(char)+0xad>
c001103c:	31 f6                	xor    esi,esi
c001103e:	31 d2                	xor    edx,edx
c0011040:	31 c0                	xor    eax,eax
c0011042:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0011048:	7e 30                	jle    c001107a <VgaText::putchar(char)+0x9e>
c001104a:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0011052:	80 fa 3b             	cmp    dl,0x3b
c0011055:	75 17                	jne    c001106e <VgaText::putchar(char)+0x92>
c0011057:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001105b:	50                   	push   eax
c001105c:	53                   	push   ebx
c001105d:	e8 ee f5 ff ff       	call   c0010650 <VgaText::doANSI_SGR(int)>
c0011062:	59                   	pop    ecx
c0011063:	31 d2                	xor    edx,edx
c0011065:	58                   	pop    eax
c0011066:	31 c0                	xor    eax,eax
c0011068:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001106c:	eb 09                	jmp    c0011077 <VgaText::putchar(char)+0x9b>
c001106e:	6b c0 0a             	imul   eax,eax,0xa
c0011071:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0011075:	88 ca                	mov    dl,cl
c0011077:	46                   	inc    esi
c0011078:	eb c8                	jmp    c0011042 <VgaText::putchar(char)+0x66>
c001107a:	84 d2                	test   dl,dl
c001107c:	74 31                	je     c00110af <VgaText::putchar(char)+0xd3>
c001107e:	50                   	push   eax
c001107f:	53                   	push   ebx
c0011080:	e8 cb f5 ff ff       	call   c0010650 <VgaText::doANSI_SGR(int)>
c0011085:	58                   	pop    eax
c0011086:	5a                   	pop    edx
c0011087:	eb 26                	jmp    c00110af <VgaText::putchar(char)+0xd3>
c0011089:	3c 4a                	cmp    al,0x4a
c001108b:	75 22                	jne    c00110af <VgaText::putchar(char)+0xd3>
c001108d:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0011094:	75 19                	jne    c00110af <VgaText::putchar(char)+0xd3>
c0011096:	83 ec 0c             	sub    esp,0xc
c0011099:	53                   	push   ebx
c001109a:	e8 d9 fe ff ff       	call   c0010f78 <VgaText::clearScreen()>
c001109f:	83 c4 0c             	add    esp,0xc
c00110a2:	6a 00                	push   0x0
c00110a4:	6a 00                	push   0x0
c00110a6:	53                   	push   ebx
c00110a7:	e8 ac f7 ff ff       	call   c0010858 <VgaText::setCursor(int, int)>
c00110ac:	83 c4 10             	add    esp,0x10
c00110af:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c00110b8:	eb 36                	jmp    c00110f0 <VgaText::putchar(char)+0x114>
c00110ba:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c00110c0:	83 fa 0e             	cmp    edx,0xe
c00110c3:	7f 2b                	jg     c00110f0 <VgaText::putchar(char)+0x114>
c00110c5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00110c8:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c00110ce:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c00110d5:	eb 19                	jmp    c00110f0 <VgaText::putchar(char)+0x114>
c00110d7:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00110dd:	0f be c0             	movsx  eax,al
c00110e0:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00110e6:	50                   	push   eax
c00110e7:	53                   	push   ebx
c00110e8:	e8 ab fa ff ff       	call   c0010b98 <VgaText::putchar(char, VgaColour, VgaColour)>
c00110ed:	83 c4 10             	add    esp,0x10
c00110f0:	83 c4 14             	add    esp,0x14
c00110f3:	5b                   	pop    ebx
c00110f4:	5e                   	pop    esi
c00110f5:	c3                   	ret    

c00110f6 <VgaText::puts(char const*)>:
c00110f6:	53                   	push   ebx
c00110f7:	83 ec 08             	sub    esp,0x8
c00110fa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00110fe:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011101:	84 c0                	test   al,al
c0011103:	74 12                	je     c0011117 <VgaText::puts(char const*)+0x21>
c0011105:	43                   	inc    ebx
c0011106:	51                   	push   ecx
c0011107:	51                   	push   ecx
c0011108:	50                   	push   eax
c0011109:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001110d:	e8 ca fe ff ff       	call   c0010fdc <VgaText::putchar(char)>
c0011112:	83 c4 10             	add    esp,0x10
c0011115:	eb e7                	jmp    c00110fe <VgaText::puts(char const*)+0x8>
c0011117:	83 c4 08             	add    esp,0x8
c001111a:	5b                   	pop    ebx
c001111b:	c3                   	ret    

c001111c <VgaText::putx(unsigned int)>:
c001111c:	57                   	push   edi
c001111d:	b9 11 00 00 00       	mov    ecx,0x11
c0011122:	56                   	push   esi
c0011123:	be ce 9c 02 c0       	mov    esi,0xc0029cce
c0011128:	53                   	push   ebx
c0011129:	83 ec 20             	sub    esp,0x20
c001112c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011130:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011134:	fc                   	cld    
c0011135:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011137:	be 08 00 00 00       	mov    esi,0x8
c001113c:	50                   	push   eax
c001113d:	50                   	push   eax
c001113e:	89 d8                	mov    eax,ebx
c0011140:	c1 e3 04             	shl    ebx,0x4
c0011143:	c1 e8 1c             	shr    eax,0x1c
c0011146:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001114b:	50                   	push   eax
c001114c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011150:	e8 87 fe ff ff       	call   c0010fdc <VgaText::putchar(char)>
c0011155:	83 c4 10             	add    esp,0x10
c0011158:	4e                   	dec    esi
c0011159:	75 e1                	jne    c001113c <VgaText::putx(unsigned int)+0x20>
c001115b:	83 c4 20             	add    esp,0x20
c001115e:	5b                   	pop    ebx
c001115f:	5e                   	pop    esi
c0011160:	5f                   	pop    edi
c0011161:	c3                   	ret    

c0011162 <VgaText::VgaText(char const*)>:
c0011162:	57                   	push   edi
c0011163:	56                   	push   esi
c0011164:	53                   	push   ebx
c0011165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011169:	83 ec 08             	sub    esp,0x8
c001116c:	6a 00                	push   0x0
c001116e:	50                   	push   eax
c001116f:	e8 6e 05 00 00       	call   c00116e2 <UnixFile::UnixFile(int)>
c0011174:	83 c4 10             	add    esp,0x10
c0011177:	ba 34 9d 02 c0       	mov    edx,0xc0029d34
c001117c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011180:	89 10                	mov    DWORD PTR [eax],edx
c0011182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011186:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0011190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011194:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c001119e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111a2:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00111a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ad:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c00111b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111b8:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c00111c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c6:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c00111d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d4:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c00111db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111df:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c00111e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ea:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c00111f0:	bb 40 dc 02 c0       	mov    ebx,0xc002dc40
c00111f5:	b8 08 00 00 00       	mov    eax,0x8
c00111fa:	fc                   	cld    
c00111fb:	89 d7                	mov    edi,edx
c00111fd:	89 de                	mov    esi,ebx
c00111ff:	89 c1                	mov    ecx,eax
c0011201:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011207:	05 1e 10 00 00       	add    eax,0x101e
c001120c:	83 ec 08             	sub    esp,0x8
c001120f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011213:	50                   	push   eax
c0011214:	e8 1b f6 fe ff       	call   c0000834 <strcpy>
c0011219:	83 c4 10             	add    esp,0x10
c001121c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011220:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c001122a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122e:	83 c0 0c             	add    eax,0xc
c0011231:	83 ec 04             	sub    esp,0x4
c0011234:	68 00 0f 00 00       	push   0xf00
c0011239:	6a 00                	push   0x0
c001123b:	50                   	push   eax
c001123c:	e8 37 f5 fe ff       	call   c0000778 <memset>
c0011241:	83 c4 10             	add    esp,0x10
c0011244:	83 ec 04             	sub    esp,0x4
c0011247:	6a 00                	push   0x0
c0011249:	6a 07                	push   0x7
c001124b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001124f:	e8 b4 f4 ff ff       	call   c0010708 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011254:	83 c4 10             	add    esp,0x10
c0011257:	83 ec 08             	sub    esp,0x8
c001125a:	6a 02                	push   0x2
c001125c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011260:	e8 49 fa ff ff       	call   c0010cae <VgaText::setCursorHeight(int)>
c0011265:	83 c4 10             	add    esp,0x10
c0011268:	83 ec 04             	sub    esp,0x4
c001126b:	6a 00                	push   0x0
c001126d:	6a 00                	push   0x0
c001126f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011273:	e8 e0 f5 ff ff       	call   c0010858 <VgaText::setCursor(int, int)>
c0011278:	83 c4 10             	add    esp,0x10
c001127b:	83 ec 08             	sub    esp,0x8
c001127e:	6a 01                	push   0x1
c0011280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011284:	e8 7d f3 ff ff       	call   c0010606 <VgaText::showCursor(bool)>
c0011289:	83 c4 10             	add    esp,0x10
c001128c:	83 ec 08             	sub    esp,0x8
c001128f:	6a 01                	push   0x1
c0011291:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011295:	e8 7c f3 ff ff       	call   c0010616 <VgaText::disableBlink(bool)>
c001129a:	83 c4 10             	add    esp,0x10
c001129d:	83 ec 0c             	sub    esp,0xc
c00112a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112a4:	e8 cf fc ff ff       	call   c0010f78 <VgaText::clearScreen()>
c00112a9:	83 c4 10             	add    esp,0x10
c00112ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112b0:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c00112b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112bb:	05 9e 10 00 00       	add    eax,0x109e
c00112c0:	83 ec 04             	sub    esp,0x4
c00112c3:	68 96 00 00 00       	push   0x96
c00112c8:	6a 00                	push   0x0
c00112ca:	50                   	push   eax
c00112cb:	e8 a8 f4 fe ff       	call   c0000778 <memset>
c00112d0:	83 c4 10             	add    esp,0x10
c00112d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112d7:	05 34 11 00 00       	add    eax,0x1134
c00112dc:	83 ec 04             	sub    esp,0x4
c00112df:	68 2c 01 00 00       	push   0x12c
c00112e4:	6a 00                	push   0x0
c00112e6:	50                   	push   eax
c00112e7:	e8 8c f4 fe ff       	call   c0000778 <memset>
c00112ec:	83 c4 10             	add    esp,0x10
c00112ef:	90                   	nop
c00112f0:	5b                   	pop    ebx
c00112f1:	5e                   	pop    esi
c00112f2:	5f                   	pop    edi
c00112f3:	c3                   	ret    

c00112f4 <VgaText::receiveKey(unsigned char)>:
c00112f4:	55                   	push   ebp
c00112f5:	57                   	push   edi
c00112f6:	56                   	push   esi
c00112f7:	53                   	push   ebx
c00112f8:	83 ec 1c             	sub    esp,0x1c
c00112fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00112ff:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011303:	84 db                	test   bl,bl
c0011305:	0f 84 c9 00 00 00    	je     c00113d4 <VgaText::receiveKey(unsigned char)+0xe0>
c001130b:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011311:	80 fb 08             	cmp    bl,0x8
c0011314:	75 2c                	jne    c0011342 <VgaText::receiveKey(unsigned char)+0x4e>
c0011316:	83 ec 0c             	sub    esp,0xc
c0011319:	57                   	push   edi
c001131a:	e8 75 f4 fe ff       	call   c0000794 <strlen>
c001131f:	83 c4 10             	add    esp,0x10
c0011322:	85 c0                	test   eax,eax
c0011324:	74 41                	je     c0011367 <VgaText::receiveKey(unsigned char)+0x73>
c0011326:	50                   	push   eax
c0011327:	50                   	push   eax
c0011328:	6a 08                	push   0x8
c001132a:	56                   	push   esi
c001132b:	e8 ac fc ff ff       	call   c0010fdc <VgaText::putchar(char)>
c0011330:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011333:	e8 5c f4 fe ff       	call   c0000794 <strlen>
c0011338:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0011340:	eb 22                	jmp    c0011364 <VgaText::receiveKey(unsigned char)+0x70>
c0011342:	0f be c3             	movsx  eax,bl
c0011345:	52                   	push   edx
c0011346:	52                   	push   edx
c0011347:	50                   	push   eax
c0011348:	56                   	push   esi
c0011349:	e8 8e fc ff ff       	call   c0010fdc <VgaText::putchar(char)>
c001134e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011352:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011357:	59                   	pop    ecx
c0011358:	5d                   	pop    ebp
c0011359:	8d 44 24 16          	lea    eax,[esp+0x16]
c001135d:	50                   	push   eax
c001135e:	57                   	push   edi
c001135f:	e8 10 f6 fe ff       	call   c0000974 <strcat>
c0011364:	83 c4 10             	add    esp,0x10
c0011367:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c001136e:	75 05                	jne    c0011375 <VgaText::receiveKey(unsigned char)+0x81>
c0011370:	80 fb 0a             	cmp    bl,0xa
c0011373:	75 53                	jne    c00113c8 <VgaText::receiveKey(unsigned char)+0xd4>
c0011375:	83 ec 0c             	sub    esp,0xc
c0011378:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c001137e:	53                   	push   ebx
c001137f:	e8 10 f4 fe ff       	call   c0000794 <strlen>
c0011384:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011387:	89 c5                	mov    ebp,eax
c0011389:	e8 06 f4 fe ff       	call   c0000794 <strlen>
c001138e:	83 c4 10             	add    esp,0x10
c0011391:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011395:	3d 2c 01 00 00       	cmp    eax,0x12c
c001139a:	76 10                	jbe    c00113ac <VgaText::receiveKey(unsigned char)+0xb8>
c001139c:	83 ec 0c             	sub    esp,0xc
c001139f:	68 df 9c 02 c0       	push   0xc0029cdf
c00113a4:	e8 94 8c 00 00       	call   c001a03d <Krnl::panic(char const*)>
c00113a9:	83 c4 10             	add    esp,0x10
c00113ac:	50                   	push   eax
c00113ad:	50                   	push   eax
c00113ae:	57                   	push   edi
c00113af:	53                   	push   ebx
c00113b0:	e8 bf f5 fe ff       	call   c0000974 <strcat>
c00113b5:	83 c4 0c             	add    esp,0xc
c00113b8:	68 96 00 00 00       	push   0x96
c00113bd:	6a 00                	push   0x0
c00113bf:	57                   	push   edi
c00113c0:	e8 b3 f3 fe ff       	call   c0000778 <memset>
c00113c5:	83 c4 10             	add    esp,0x10
c00113c8:	83 ec 0c             	sub    esp,0xc
c00113cb:	56                   	push   esi
c00113cc:	e8 d5 f9 ff ff       	call   c0010da6 <VgaText::doUpdate()>
c00113d1:	83 c4 10             	add    esp,0x10
c00113d4:	83 c4 1c             	add    esp,0x1c
c00113d7:	5b                   	pop    ebx
c00113d8:	5e                   	pop    esi
c00113d9:	5f                   	pop    edi
c00113da:	5d                   	pop    ebp
c00113db:	c3                   	ret    

c00113dc <VgaText::write(unsigned long long, void*, int*)>:
c00113dc:	55                   	push   ebp
c00113dd:	57                   	push   edi
c00113de:	56                   	push   esi
c00113df:	53                   	push   ebx
c00113e0:	83 ec 0c             	sub    esp,0xc
c00113e3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00113e7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00113eb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00113ef:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c00113f6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00113f9:	39 eb                	cmp    ebx,ebp
c00113fb:	74 13                	je     c0011410 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00113fd:	43                   	inc    ebx
c00113fe:	50                   	push   eax
c00113ff:	50                   	push   eax
c0011400:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011404:	50                   	push   eax
c0011405:	56                   	push   esi
c0011406:	e8 d1 fb ff ff       	call   c0010fdc <VgaText::putchar(char)>
c001140b:	83 c4 10             	add    esp,0x10
c001140e:	eb e9                	jmp    c00113f9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011410:	83 ec 0c             	sub    esp,0xc
c0011413:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c001141a:	56                   	push   esi
c001141b:	e8 86 f9 ff ff       	call   c0010da6 <VgaText::doUpdate()>
c0011420:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011424:	89 38                	mov    DWORD PTR [eax],edi
c0011426:	83 c4 1c             	add    esp,0x1c
c0011429:	31 c0                	xor    eax,eax
c001142b:	5b                   	pop    ebx
c001142c:	5e                   	pop    esi
c001142d:	5f                   	pop    edi
c001142e:	5d                   	pop    ebp
c001142f:	c3                   	ret    

c0011430 <newTerminal(char*)>:
c0011430:	83 ec 28             	sub    esp,0x28
c0011433:	68 60 12 00 00       	push   0x1260
c0011438:	e8 09 e4 ff ff       	call   c000f846 <malloc>
c001143d:	5a                   	pop    edx
c001143e:	59                   	pop    ecx
c001143f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011443:	50                   	push   eax
c0011444:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011448:	e8 15 fd ff ff       	call   c0011162 <VgaText::VgaText(char const*)>
c001144d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011451:	83 c4 2c             	add    esp,0x2c
c0011454:	c3                   	ret    
c0011455:	90                   	nop

c0011456 <TSS::TSS()>:
c0011456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001145a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011461:	90                   	nop
c0011462:	c3                   	ret    
c0011463:	90                   	nop

c0011464 <TSS::setESP(unsigned long)>:
c0011464:	55                   	push   ebp
c0011465:	89 e5                	mov    ebp,esp
c0011467:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001146a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001146d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011470:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011473:	90                   	nop
c0011474:	5d                   	pop    ebp
c0011475:	c3                   	ret    

c0011476 <TSS::flush()>:
c0011476:	55                   	push   ebp
c0011477:	89 e5                	mov    ebp,esp
c0011479:	83 ec 10             	sub    esp,0x10
c001147c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001147f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011481:	83 c8 03             	or     eax,0x3
c0011484:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011488:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001148c:	66 89 d0             	mov    ax,dx
c001148f:	0f 00 d8             	ltr    ax
c0011492:	90                   	nop
c0011493:	c9                   	leave  
c0011494:	c3                   	ret    
c0011495:	90                   	nop

c0011496 <TSS::setup(unsigned long, unsigned long)>:
c0011496:	55                   	push   ebp
c0011497:	89 e5                	mov    ebp,esp
c0011499:	83 ec 18             	sub    esp,0x18
c001149c:	83 ec 0c             	sub    esp,0xc
c001149f:	6a 68                	push   0x68
c00114a1:	e8 a0 e3 ff ff       	call   c000f846 <malloc>
c00114a6:	83 c4 10             	add    esp,0x10
c00114a9:	89 c2                	mov    edx,eax
c00114ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ae:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114b7:	83 ec 04             	sub    esp,0x4
c00114ba:	6a 68                	push   0x68
c00114bc:	6a 00                	push   0x0
c00114be:	50                   	push   eax
c00114bf:	e8 b4 f2 fe ff       	call   c0000778 <memset>
c00114c4:	83 c4 10             	add    esp,0x10
c00114c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114cd:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00114d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114d9:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00114df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114e5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114e8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114f1:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00114f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114fd:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011503:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011506:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011509:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001150f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011512:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011515:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001151b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001151e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011521:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001152d:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011533:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011536:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011539:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001153c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001153f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011542:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011545:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011548:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001154b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001154e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011551:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001155b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001155e:	0f 20 da             	mov    edx,cr3
c0011561:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011564:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011567:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001156a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011570:	83 ec 08             	sub    esp,0x8
c0011573:	50                   	push   eax
c0011574:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011577:	50                   	push   eax
c0011578:	e8 a7 da ff ff       	call   c000f024 <GDTEntry::setBase(unsigned int)>
c001157d:	83 c4 10             	add    esp,0x10
c0011580:	83 ec 08             	sub    esp,0x8
c0011583:	6a 68                	push   0x68
c0011585:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011588:	50                   	push   eax
c0011589:	e8 b2 da ff ff       	call   c000f040 <GDTEntry::setLimit(unsigned int)>
c001158e:	83 c4 10             	add    esp,0x10
c0011591:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011595:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011598:	83 e0 0f             	and    eax,0xf
c001159b:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001159e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115a1:	83 c8 40             	or     eax,0x40
c00115a4:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115a7:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c00115ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115b2:	05 78 01 00 00       	add    eax,0x178
c00115b7:	83 ec 04             	sub    esp,0x4
c00115ba:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00115bd:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00115c0:	50                   	push   eax
c00115c1:	e8 ae da ff ff       	call   c000f074 <GDT::addEntry(GDTEntry)>
c00115c6:	83 c4 10             	add    esp,0x10
c00115c9:	89 c2                	mov    edx,eax
c00115cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ce:	89 10                	mov    DWORD PTR [eax],edx
c00115d0:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c00115d5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115db:	05 78 01 00 00       	add    eax,0x178
c00115e0:	83 ec 0c             	sub    esp,0xc
c00115e3:	50                   	push   eax
c00115e4:	e8 cf da ff ff       	call   c000f0b8 <GDT::flush()>
c00115e9:	83 c4 10             	add    esp,0x10
c00115ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00115f1:	83 ec 08             	sub    esp,0x8
c00115f4:	50                   	push   eax
c00115f5:	68 48 9d 02 c0       	push   0xc0029d48
c00115fa:	e8 16 15 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00115ff:	83 c4 10             	add    esp,0x10
c0011602:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011605:	8b 00                	mov    eax,DWORD PTR [eax]
c0011607:	c9                   	leave  
c0011608:	c3                   	ret    
c0011609:	90                   	nop

c001160a <ReservedFilename::read(unsigned long long, void*, int*)>:
c001160a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001160e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011612:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011615:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001161a:	75 08                	jne    c0011624 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001161c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011622:	eb 38                	jmp    c001165c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011624:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011629:	75 17                	jne    c0011642 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001162b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011630:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011633:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011639:	8b 10                	mov    edx,DWORD PTR [eax]
c001163b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001163f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011642:	89 c1                	mov    ecx,eax
c0011644:	83 e1 fd             	and    ecx,0xfffffffd
c0011647:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001164d:	74 cd                	je     c001161c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001164f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011654:	83 e0 ef             	and    eax,0xffffffef
c0011657:	83 f8 08             	cmp    eax,0x8
c001165a:	76 c0                	jbe    c001161c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001165c:	31 c0                	xor    eax,eax
c001165e:	c3                   	ret    
c001165f:	90                   	nop

c0011660 <ReservedFilename::isAtty()>:
c0011660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011664:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011667:	31 c0                	xor    eax,eax
c0011669:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001166f:	74 09                	je     c001167a <ReservedFilename::isAtty()+0x1a>
c0011671:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011677:	0f 94 c0             	sete   al
c001167a:	c3                   	ret    
c001167b:	90                   	nop

c001167c <ReservedFilename::write(unsigned long long, void*, int*)>:
c001167c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011680:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011684:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011687:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001168b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011690:	75 08                	jne    c001169a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011692:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011698:	eb 3d                	jmp    c00116d7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001169a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001169f:	75 17                	jne    c00116b8 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00116a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116a9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116af:	8b 10                	mov    edx,DWORD PTR [eax]
c00116b1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116b5:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00116b8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00116bd:	75 04                	jne    c00116c3 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00116bf:	89 0a                	mov    DWORD PTR [edx],ecx
c00116c1:	eb 14                	jmp    c00116d7 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116c3:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00116c8:	74 c8                	je     c0011692 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116ca:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116cf:	83 e0 ef             	and    eax,0xffffffef
c00116d2:	83 f8 08             	cmp    eax,0x8
c00116d5:	76 bb                	jbe    c0011692 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00116d7:	31 c0                	xor    eax,eax
c00116d9:	c3                   	ret    

c00116da <UnixFile::getFileDescriptor()>:
c00116da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116e1:	c3                   	ret    

c00116e2 <UnixFile::UnixFile(int)>:
c00116e2:	53                   	push   ebx
c00116e3:	83 ec 28             	sub    esp,0x28
c00116e6:	ba 34 9e 02 c0       	mov    edx,0xc0029e34
c00116eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116ef:	89 10                	mov    DWORD PTR [eax],edx
c00116f1:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00116f9:	0f 8f 8c 01 00 00    	jg     c001188b <UnixFile::UnixFile(int)+0x1a9>
c00116ff:	a1 20 cb 02 c0       	mov    eax,ds:0xc002cb20
c0011704:	8d 50 01             	lea    edx,[eax+0x1]
c0011707:	89 15 20 cb 02 c0    	mov    DWORD PTR ds:0xc002cb20,edx
c001170d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011711:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011714:	83 ec 08             	sub    esp,0x8
c0011717:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001171b:	68 f8 dc 02 c0       	push   0xc002dcf8
c0011720:	e8 fb 68 01 00       	call   c0028020 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011725:	83 c4 10             	add    esp,0x10
c0011728:	a0 f4 dc 02 c0       	mov    al,ds:0xc002dcf4
c001172d:	83 f0 01             	xor    eax,0x1
c0011730:	84 c0                	test   al,al
c0011732:	0f 84 54 01 00 00    	je     c001188c <UnixFile::UnixFile(int)+0x1aa>
c0011738:	c6 05 f4 dc 02 c0 01 	mov    BYTE PTR ds:0xc002dcf4,0x1
c001173f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011747:	83 ec 0c             	sub    esp,0xc
c001174a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001174e:	e8 f3 e0 ff ff       	call   c000f846 <malloc>
c0011753:	83 c4 10             	add    esp,0x10
c0011756:	89 c3                	mov    ebx,eax
c0011758:	83 ec 08             	sub    esp,0x8
c001175b:	68 03 ff ff 0f       	push   0xfffff03
c0011760:	53                   	push   ebx
c0011761:	e8 2c 01 00 00       	call   c0011892 <ReservedFilename::ReservedFilename(int)>
c0011766:	83 c4 10             	add    esp,0x10
c0011769:	89 1d ec dc 02 c0    	mov    DWORD PTR ds:0xc002dcec,ebx
c001176f:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011777:	83 ec 0c             	sub    esp,0xc
c001177a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001177e:	e8 c3 e0 ff ff       	call   c000f846 <malloc>
c0011783:	83 c4 10             	add    esp,0x10
c0011786:	89 c3                	mov    ebx,eax
c0011788:	83 ec 08             	sub    esp,0x8
c001178b:	68 01 ff ff 0f       	push   0xfffff01
c0011790:	53                   	push   ebx
c0011791:	e8 fc 00 00 00       	call   c0011892 <ReservedFilename::ReservedFilename(int)>
c0011796:	83 c4 10             	add    esp,0x10
c0011799:	89 1d f0 dc 02 c0    	mov    DWORD PTR ds:0xc002dcf0,ebx
c001179f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00117a7:	83 ec 0c             	sub    esp,0xc
c00117aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00117ae:	e8 93 e0 ff ff       	call   c000f846 <malloc>
c00117b3:	83 c4 10             	add    esp,0x10
c00117b6:	89 c3                	mov    ebx,eax
c00117b8:	83 ec 08             	sub    esp,0x8
c00117bb:	68 00 ff ff 0f       	push   0xfffff00
c00117c0:	53                   	push   ebx
c00117c1:	e8 cc 00 00 00       	call   c0011892 <ReservedFilename::ReservedFilename(int)>
c00117c6:	83 c4 10             	add    esp,0x10
c00117c9:	89 1d e4 dc 02 c0    	mov    DWORD PTR ds:0xc002dce4,ebx
c00117cf:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00117d7:	83 ec 0c             	sub    esp,0xc
c00117da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00117de:	e8 63 e0 ff ff       	call   c000f846 <malloc>
c00117e3:	83 c4 10             	add    esp,0x10
c00117e6:	89 c3                	mov    ebx,eax
c00117e8:	83 ec 08             	sub    esp,0x8
c00117eb:	68 02 ff ff 0f       	push   0xfffff02
c00117f0:	53                   	push   ebx
c00117f1:	e8 9c 00 00 00       	call   c0011892 <ReservedFilename::ReservedFilename(int)>
c00117f6:	83 c4 10             	add    esp,0x10
c00117f9:	89 1d e8 dc 02 c0    	mov    DWORD PTR ds:0xc002dce8,ebx
c00117ff:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011807:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001180c:	7f 7e                	jg     c001188c <UnixFile::UnixFile(int)+0x1aa>
c001180e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011816:	83 ec 0c             	sub    esp,0xc
c0011819:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001181d:	e8 24 e0 ff ff       	call   c000f846 <malloc>
c0011822:	83 c4 10             	add    esp,0x10
c0011825:	89 c3                	mov    ebx,eax
c0011827:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001182b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011830:	83 ec 08             	sub    esp,0x8
c0011833:	50                   	push   eax
c0011834:	53                   	push   ebx
c0011835:	e8 58 00 00 00       	call   c0011892 <ReservedFilename::ReservedFilename(int)>
c001183a:	83 c4 10             	add    esp,0x10
c001183d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011841:	89 1c 85 c0 dc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2340],ebx
c0011848:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011850:	83 ec 0c             	sub    esp,0xc
c0011853:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011857:	e8 ea df ff ff       	call   c000f846 <malloc>
c001185c:	83 c4 10             	add    esp,0x10
c001185f:	89 c3                	mov    ebx,eax
c0011861:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011865:	05 20 ff ff 0f       	add    eax,0xfffff20
c001186a:	83 ec 08             	sub    esp,0x8
c001186d:	50                   	push   eax
c001186e:	53                   	push   ebx
c001186f:	e8 1e 00 00 00       	call   c0011892 <ReservedFilename::ReservedFilename(int)>
c0011874:	83 c4 10             	add    esp,0x10
c0011877:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001187b:	89 1c 85 80 dc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2380],ebx
c0011882:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011886:	e9 7c ff ff ff       	jmp    c0011807 <UnixFile::UnixFile(int)+0x125>
c001188b:	90                   	nop
c001188c:	83 c4 28             	add    esp,0x28
c001188f:	5b                   	pop    ebx
c0011890:	c3                   	ret    
c0011891:	90                   	nop

c0011892 <ReservedFilename::ReservedFilename(int)>:
c0011892:	83 ec 0c             	sub    esp,0xc
c0011895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011899:	83 ec 08             	sub    esp,0x8
c001189c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118a0:	50                   	push   eax
c00118a1:	e8 3c fe ff ff       	call   c00116e2 <UnixFile::UnixFile(int)>
c00118a6:	83 c4 10             	add    esp,0x10
c00118a9:	ba 50 9e 02 c0       	mov    edx,0xc0029e50
c00118ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b2:	89 10                	mov    DWORD PTR [eax],edx
c00118b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00118bc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00118bf:	90                   	nop
c00118c0:	83 c4 0c             	add    esp,0xc
c00118c3:	c3                   	ret    

c00118c4 <UnixFile::~UnixFile()>:
c00118c4:	83 ec 1c             	sub    esp,0x1c
c00118c7:	ba 34 9e 02 c0       	mov    edx,0xc0029e34
c00118cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118d0:	89 10                	mov    DWORD PTR [eax],edx
c00118d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00118d9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00118de:	7f 73                	jg     c0011953 <UnixFile::~UnixFile()+0x8f>
c00118e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00118e8:	83 ec 0c             	sub    esp,0xc
c00118eb:	68 f8 dc 02 c0       	push   0xc002dcf8
c00118f0:	e8 ff 67 01 00       	call   c00280f4 <LinkedList<UnixFile>::getFirstElement()>
c00118f5:	83 c4 10             	add    esp,0x10
c00118f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118fc:	83 ec 0c             	sub    esp,0xc
c00118ff:	68 f8 dc 02 c0       	push   0xc002dcf8
c0011904:	e8 f3 67 01 00       	call   c00280fc <LinkedList<UnixFile>::removeFirst()>
c0011909:	83 c4 10             	add    esp,0x10
c001190c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011910:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011914:	74 40                	je     c0011956 <UnixFile::~UnixFile()+0x92>
c0011916:	83 ec 08             	sub    esp,0x8
c0011919:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001191d:	68 f8 dc 02 c0       	push   0xc002dcf8
c0011922:	e8 f9 66 01 00       	call   c0028020 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011927:	83 c4 10             	add    esp,0x10
c001192a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001192e:	8d 50 01             	lea    edx,[eax+0x1]
c0011931:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011935:	3d 88 13 00 00       	cmp    eax,0x1388
c001193a:	0f 94 c0             	sete   al
c001193d:	84 c0                	test   al,al
c001193f:	74 a7                	je     c00118e8 <UnixFile::~UnixFile()+0x24>
c0011941:	83 ec 0c             	sub    esp,0xc
c0011944:	68 0c 9e 02 c0       	push   0xc0029e0c
c0011949:	e8 ef 86 00 00       	call   c001a03d <Krnl::panic(char const*)>
c001194e:	83 c4 10             	add    esp,0x10
c0011951:	eb 95                	jmp    c00118e8 <UnixFile::~UnixFile()+0x24>
c0011953:	90                   	nop
c0011954:	eb 01                	jmp    c0011957 <UnixFile::~UnixFile()+0x93>
c0011956:	90                   	nop
c0011957:	90                   	nop
c0011958:	83 c4 1c             	add    esp,0x1c
c001195b:	c3                   	ret    

c001195c <UnixFile::~UnixFile()>:
c001195c:	83 ec 0c             	sub    esp,0xc
c001195f:	83 ec 0c             	sub    esp,0xc
c0011962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011966:	e8 59 ff ff ff       	call   c00118c4 <UnixFile::~UnixFile()>
c001196b:	83 c4 10             	add    esp,0x10
c001196e:	83 ec 08             	sub    esp,0x8
c0011971:	6a 0c                	push   0xc
c0011973:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011977:	e8 b9 10 00 00       	call   c0012a35 <operator delete(void*, unsigned long)>
c001197c:	83 c4 10             	add    esp,0x10
c001197f:	83 c4 0c             	add    esp,0xc
c0011982:	c3                   	ret    
c0011983:	90                   	nop

c0011984 <ReservedFilename::~ReservedFilename()>:
c0011984:	83 ec 0c             	sub    esp,0xc
c0011987:	ba 50 9e 02 c0       	mov    edx,0xc0029e50
c001198c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011990:	89 10                	mov    DWORD PTR [eax],edx
c0011992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011996:	83 ec 0c             	sub    esp,0xc
c0011999:	50                   	push   eax
c001199a:	e8 25 ff ff ff       	call   c00118c4 <UnixFile::~UnixFile()>
c001199f:	83 c4 10             	add    esp,0x10
c00119a2:	90                   	nop
c00119a3:	83 c4 0c             	add    esp,0xc
c00119a6:	c3                   	ret    
c00119a7:	90                   	nop

c00119a8 <ReservedFilename::~ReservedFilename()>:
c00119a8:	83 ec 0c             	sub    esp,0xc
c00119ab:	83 ec 0c             	sub    esp,0xc
c00119ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119b2:	e8 cd ff ff ff       	call   c0011984 <ReservedFilename::~ReservedFilename()>
c00119b7:	83 c4 10             	add    esp,0x10
c00119ba:	83 ec 08             	sub    esp,0x8
c00119bd:	6a 0c                	push   0xc
c00119bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119c3:	e8 6d 10 00 00       	call   c0012a35 <operator delete(void*, unsigned long)>
c00119c8:	83 c4 10             	add    esp,0x10
c00119cb:	83 c4 0c             	add    esp,0xc
c00119ce:	c3                   	ret    

c00119cf <getFromFileDescriptor(int)>:
c00119cf:	53                   	push   ebx
c00119d0:	83 ec 08             	sub    esp,0x8
c00119d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00119d7:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00119dd:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00119e3:	7f 2c                	jg     c0011a11 <getFromFileDescriptor(int)+0x42>
c00119e5:	83 ec 0c             	sub    esp,0xc
c00119e8:	68 f8 dc 02 c0       	push   0xc002dcf8
c00119ed:	e8 02 67 01 00       	call   c00280f4 <LinkedList<UnixFile>::getFirstElement()>
c00119f2:	83 c4 10             	add    esp,0x10
c00119f5:	85 c0                	test   eax,eax
c00119f7:	75 04                	jne    c00119fd <getFromFileDescriptor(int)+0x2e>
c00119f9:	31 c0                	xor    eax,eax
c00119fb:	eb 6e                	jmp    c0011a6b <getFromFileDescriptor(int)+0x9c>
c00119fd:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a00:	74 69                	je     c0011a6b <getFromFileDescriptor(int)+0x9c>
c0011a02:	52                   	push   edx
c0011a03:	52                   	push   edx
c0011a04:	50                   	push   eax
c0011a05:	68 f8 dc 02 c0       	push   0xc002dcf8
c0011a0a:	e8 8f 67 01 00       	call   c002819e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a0f:	eb e1                	jmp    c00119f2 <getFromFileDescriptor(int)+0x23>
c0011a11:	a1 ec dc 02 c0       	mov    eax,ds:0xc002dcec
c0011a16:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a1c:	74 4d                	je     c0011a6b <getFromFileDescriptor(int)+0x9c>
c0011a1e:	a1 f0 dc 02 c0       	mov    eax,ds:0xc002dcf0
c0011a23:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a29:	74 40                	je     c0011a6b <getFromFileDescriptor(int)+0x9c>
c0011a2b:	a1 e8 dc 02 c0       	mov    eax,ds:0xc002dce8
c0011a30:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a36:	74 33                	je     c0011a6b <getFromFileDescriptor(int)+0x9c>
c0011a38:	a1 e4 dc 02 c0       	mov    eax,ds:0xc002dce4
c0011a3d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a43:	74 26                	je     c0011a6b <getFromFileDescriptor(int)+0x9c>
c0011a45:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011a4b:	83 f8 08             	cmp    eax,0x8
c0011a4e:	77 09                	ja     c0011a59 <getFromFileDescriptor(int)+0x8a>
c0011a50:	8b 04 85 c0 dc 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2340]
c0011a57:	eb 12                	jmp    c0011a6b <getFromFileDescriptor(int)+0x9c>
c0011a59:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011a5f:	83 fb 08             	cmp    ebx,0x8
c0011a62:	77 95                	ja     c00119f9 <getFromFileDescriptor(int)+0x2a>
c0011a64:	8b 04 9d 80 dc 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2380]
c0011a6b:	83 c4 08             	add    esp,0x8
c0011a6e:	5b                   	pop    ebx
c0011a6f:	c3                   	ret    

c0011a70 <__static_initialization_and_destruction_0(int, int)>:
c0011a70:	83 ec 0c             	sub    esp,0xc
c0011a73:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011a78:	75 34                	jne    c0011aae <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a7a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011a82:	75 2a                	jne    c0011aae <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a84:	83 ec 0c             	sub    esp,0xc
c0011a87:	68 f8 dc 02 c0       	push   0xc002dcf8
c0011a8c:	e8 37 65 01 00       	call   c0027fc8 <LinkedList<UnixFile>::LinkedList()>
c0011a91:	83 c4 10             	add    esp,0x10
c0011a94:	83 ec 04             	sub    esp,0x4
c0011a97:	68 a4 ca 02 c0       	push   0xc002caa4
c0011a9c:	68 f8 dc 02 c0       	push   0xc002dcf8
c0011aa1:	68 c6 7f 02 c0       	push   0xc0027fc6
c0011aa6:	e8 04 0f 00 00       	call   c00129af <__cxa_atexit>
c0011aab:	83 c4 10             	add    esp,0x10
c0011aae:	90                   	nop
c0011aaf:	83 c4 0c             	add    esp,0xc
c0011ab2:	c3                   	ret    

c0011ab3 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011ab3:	83 ec 0c             	sub    esp,0xc
c0011ab6:	83 ec 08             	sub    esp,0x8
c0011ab9:	68 ff ff 00 00       	push   0xffff
c0011abe:	6a 01                	push   0x1
c0011ac0:	e8 ab ff ff ff       	call   c0011a70 <__static_initialization_and_destruction_0(int, int)>
c0011ac5:	83 c4 10             	add    esp,0x10
c0011ac8:	83 c4 0c             	add    esp,0xc
c0011acb:	c3                   	ret    

c0011acc <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011acc:	53                   	push   ebx
c0011acd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011ad1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ad5:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011adb:	89 c8                	mov    eax,ecx
c0011add:	d1 e8                	shr    eax,1
c0011adf:	03 05 28 cb 02 c0    	add    eax,DWORD PTR ds:0xc002cb28
c0011ae5:	83 e1 01             	and    ecx,0x1
c0011ae8:	8a 10                	mov    dl,BYTE PTR [eax]
c0011aea:	75 09                	jne    c0011af5 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011aec:	83 e2 f0             	and    edx,0xfffffff0
c0011aef:	09 da                	or     edx,ebx
c0011af1:	88 10                	mov    BYTE PTR [eax],dl
c0011af3:	5b                   	pop    ebx
c0011af4:	c3                   	ret    
c0011af5:	c1 e3 04             	shl    ebx,0x4
c0011af8:	83 e2 0f             	and    edx,0xf
c0011afb:	09 da                	or     edx,ebx
c0011afd:	88 10                	mov    BYTE PTR [eax],dl
c0011aff:	5b                   	pop    ebx
c0011b00:	c3                   	ret    

c0011b01 <Virt::getPageState(unsigned long)>:
c0011b01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b05:	8b 0d 28 cb 02 c0    	mov    ecx,DWORD PTR ds:0xc002cb28
c0011b0b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b11:	89 d0                	mov    eax,edx
c0011b13:	d1 e8                	shr    eax,1
c0011b15:	83 e2 01             	and    edx,0x1
c0011b18:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b1b:	75 04                	jne    c0011b21 <Virt::getPageState(unsigned long)+0x20>
c0011b1d:	83 e0 0f             	and    eax,0xf
c0011b20:	c3                   	ret    
c0011b21:	c0 e8 04             	shr    al,0x4
c0011b24:	c3                   	ret    

c0011b25 <Virt::allocateKernelVirtualPages(int)>:
c0011b25:	55                   	push   ebp
c0011b26:	31 ed                	xor    ebp,ebp
c0011b28:	57                   	push   edi
c0011b29:	56                   	push   esi
c0011b2a:	53                   	push   ebx
c0011b2b:	31 db                	xor    ebx,ebx
c0011b2d:	83 ec 1c             	sub    esp,0x1c
c0011b30:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b34:	8b 3d 24 cb 02 c0    	mov    edi,DWORD PTR ds:0xc002cb24
c0011b3a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b3f:	57                   	push   edi
c0011b40:	e8 bc ff ff ff       	call   c0011b01 <Virt::getPageState(unsigned long)>
c0011b45:	5a                   	pop    edx
c0011b46:	84 c0                	test   al,al
c0011b48:	75 3a                	jne    c0011b84 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011b4a:	85 db                	test   ebx,ebx
c0011b4c:	75 02                	jne    c0011b50 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011b4e:	89 fd                	mov    ebp,edi
c0011b50:	43                   	inc    ebx
c0011b51:	39 f3                	cmp    ebx,esi
c0011b53:	74 5a                	je     c0011baf <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011b55:	47                   	inc    edi
c0011b56:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b5c:	76 31                	jbe    c0011b8f <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011b5e:	c7 05 24 cb 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002cb24,0xc8000
c0011b68:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011b6d:	75 28                	jne    c0011b97 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011b6f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011b74:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011b79:	57                   	push   edi
c0011b7a:	e8 82 ff ff ff       	call   c0011b01 <Virt::getPageState(unsigned long)>
c0011b7f:	5a                   	pop    edx
c0011b80:	84 c0                	test   al,al
c0011b82:	74 c6                	je     c0011b4a <Virt::allocateKernelVirtualPages(int)+0x25>
c0011b84:	31 db                	xor    ebx,ebx
c0011b86:	47                   	inc    edi
c0011b87:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b8d:	77 cf                	ja     c0011b5e <Virt::allocateKernelVirtualPages(int)+0x39>
c0011b8f:	89 3d 24 cb 02 c0    	mov    DWORD PTR ds:0xc002cb24,edi
c0011b95:	eb a8                	jmp    c0011b3f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011b97:	83 ec 0c             	sub    esp,0xc
c0011b9a:	68 64 9e 02 c0       	push   0xc0029e64
c0011b9f:	e8 99 84 00 00       	call   c001a03d <Krnl::panic(char const*)>
c0011ba4:	8b 3d 24 cb 02 c0    	mov    edi,DWORD PTR ds:0xc002cb24
c0011baa:	83 c4 10             	add    esp,0x10
c0011bad:	eb 90                	jmp    c0011b3f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011baf:	89 2d 24 cb 02 c0    	mov    DWORD PTR ds:0xc002cb24,ebp
c0011bb5:	4b                   	dec    ebx
c0011bb6:	74 5f                	je     c0011c17 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011bb8:	85 f6                	test   esi,esi
c0011bba:	74 3d                	je     c0011bf9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bbc:	89 e8                	mov    eax,ebp
c0011bbe:	31 db                	xor    ebx,ebx
c0011bc0:	8d 7e ff             	lea    edi,[esi-0x1]
c0011bc3:	eb 14                	jmp    c0011bd9 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011bc5:	6a 01                	push   0x1
c0011bc7:	43                   	inc    ebx
c0011bc8:	50                   	push   eax
c0011bc9:	e8 fe fe ff ff       	call   c0011acc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bce:	58                   	pop    eax
c0011bcf:	39 f3                	cmp    ebx,esi
c0011bd1:	5a                   	pop    edx
c0011bd2:	74 25                	je     c0011bf9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011bd4:	a1 24 cb 02 c0       	mov    eax,ds:0xc002cb24
c0011bd9:	8d 50 01             	lea    edx,[eax+0x1]
c0011bdc:	85 db                	test   ebx,ebx
c0011bde:	89 15 24 cb 02 c0    	mov    DWORD PTR ds:0xc002cb24,edx
c0011be4:	74 20                	je     c0011c06 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011be6:	39 df                	cmp    edi,ebx
c0011be8:	75 db                	jne    c0011bc5 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011bea:	6a 03                	push   0x3
c0011bec:	43                   	inc    ebx
c0011bed:	50                   	push   eax
c0011bee:	e8 d9 fe ff ff       	call   c0011acc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bf3:	59                   	pop    ecx
c0011bf4:	39 f3                	cmp    ebx,esi
c0011bf6:	58                   	pop    eax
c0011bf7:	75 db                	jne    c0011bd4 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011bf9:	83 c4 1c             	add    esp,0x1c
c0011bfc:	89 e8                	mov    eax,ebp
c0011bfe:	5b                   	pop    ebx
c0011bff:	c1 e0 0c             	shl    eax,0xc
c0011c02:	5e                   	pop    esi
c0011c03:	5f                   	pop    edi
c0011c04:	5d                   	pop    ebp
c0011c05:	c3                   	ret    
c0011c06:	6a 02                	push   0x2
c0011c08:	bb 01 00 00 00       	mov    ebx,0x1
c0011c0d:	50                   	push   eax
c0011c0e:	e8 b9 fe ff ff       	call   c0011acc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c13:	58                   	pop    eax
c0011c14:	5a                   	pop    edx
c0011c15:	eb bd                	jmp    c0011bd4 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c17:	6a 04                	push   0x4
c0011c19:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c1c:	55                   	push   ebp
c0011c1d:	a3 24 cb 02 c0       	mov    ds:0xc002cb24,eax
c0011c22:	e8 a5 fe ff ff       	call   c0011acc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c27:	59                   	pop    ecx
c0011c28:	89 e8                	mov    eax,ebp
c0011c2a:	5b                   	pop    ebx
c0011c2b:	c1 e0 0c             	shl    eax,0xc
c0011c2e:	83 c4 1c             	add    esp,0x1c
c0011c31:	5b                   	pop    ebx
c0011c32:	5e                   	pop    esi
c0011c33:	5f                   	pop    edi
c0011c34:	5d                   	pop    ebp
c0011c35:	c3                   	ret    

c0011c36 <Virt::virtualMemorySetup()>:
c0011c36:	53                   	push   ebx
c0011c37:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c3c:	83 ec 08             	sub    esp,0x8
c0011c3f:	6a 0f                	push   0xf
c0011c41:	53                   	push   ebx
c0011c42:	43                   	inc    ebx
c0011c43:	e8 84 fe ff ff       	call   c0011acc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c48:	59                   	pop    ecx
c0011c49:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c4f:	58                   	pop    eax
c0011c50:	75 ed                	jne    c0011c3f <Virt::virtualMemorySetup()+0x9>
c0011c52:	83 ec 08             	sub    esp,0x8
c0011c55:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c5a:	68 00 00 00 c8       	push   0xc8000000
c0011c5f:	68 eb 9f 02 c0       	push   0xc0029feb
c0011c64:	e8 ac 0e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0011c69:	58                   	pop    eax
c0011c6a:	5a                   	pop    edx
c0011c6b:	68 00 f0 ff ef       	push   0xeffff000
c0011c70:	68 ff 9f 02 c0       	push   0xc0029fff
c0011c75:	e8 9b 0e 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0011c7a:	83 c4 10             	add    esp,0x10
c0011c7d:	83 ec 08             	sub    esp,0x8
c0011c80:	6a 00                	push   0x0
c0011c82:	53                   	push   ebx
c0011c83:	43                   	inc    ebx
c0011c84:	e8 43 fe ff ff       	call   c0011acc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c89:	83 c4 10             	add    esp,0x10
c0011c8c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c92:	75 e9                	jne    c0011c7d <Virt::virtualMemorySetup()+0x47>
c0011c94:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011c99:	83 ec 08             	sub    esp,0x8
c0011c9c:	6a 0f                	push   0xf
c0011c9e:	53                   	push   ebx
c0011c9f:	43                   	inc    ebx
c0011ca0:	e8 27 fe ff ff       	call   c0011acc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ca5:	83 c4 10             	add    esp,0x10
c0011ca8:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011cae:	75 e9                	jne    c0011c99 <Virt::virtualMemorySetup()+0x63>
c0011cb0:	83 c4 08             	add    esp,0x8
c0011cb3:	5b                   	pop    ebx
c0011cb4:	c3                   	ret    

c0011cb5 <Virt::getAKernelVAS()>:
c0011cb5:	a1 04 dd 02 c0       	mov    eax,ds:0xc002dd04
c0011cba:	c3                   	ret    

c0011cbb <Virt::setupPageSwapping(int)>:
c0011cbb:	57                   	push   edi
c0011cbc:	56                   	push   esi
c0011cbd:	53                   	push   ebx
c0011cbe:	83 ec 1c             	sub    esp,0x1c
c0011cc1:	68 14 01 00 00       	push   0x114
c0011cc6:	e8 7b db ff ff       	call   c000f846 <malloc>
c0011ccb:	83 c4 0c             	add    esp,0xc
c0011cce:	89 c6                	mov    esi,eax
c0011cd0:	ff 35 f4 10 03 c0    	push   DWORD PTR ds:0xc00310f4
c0011cd6:	68 13 a0 02 c0       	push   0xc002a013
c0011cdb:	50                   	push   eax
c0011cdc:	e8 8d 13 00 00       	call   c001306e <File::File(char const*, Process*)>
c0011ce1:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ce4:	e8 61 15 00 00       	call   c001324a <File::unlink()>
c0011ce9:	58                   	pop    eax
c0011cea:	5a                   	pop    edx
c0011ceb:	6a 12                	push   0x12
c0011ced:	56                   	push   esi
c0011cee:	e8 df 13 00 00       	call   c00130d2 <File::open(FileOpenMode)>
c0011cf3:	83 c4 10             	add    esp,0x10
c0011cf6:	85 c0                	test   eax,eax
c0011cf8:	0f 85 ca 00 00 00    	jne    c0011dc8 <Virt::setupPageSwapping(int)+0x10d>
c0011cfe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d02:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d0a:	c1 e3 08             	shl    ebx,0x8
c0011d0d:	83 ec 0c             	sub    esp,0xc
c0011d10:	68 00 00 01 00       	push   0x10000
c0011d15:	e8 2c db ff ff       	call   c000f846 <malloc>
c0011d1a:	83 c4 0c             	add    esp,0xc
c0011d1d:	89 c7                	mov    edi,eax
c0011d1f:	68 00 00 01 00       	push   0x10000
c0011d24:	6a 00                	push   0x0
c0011d26:	50                   	push   eax
c0011d27:	e8 4c ea fe ff       	call   c0000778 <memset>
c0011d2c:	83 c4 10             	add    esp,0x10
c0011d2f:	85 db                	test   ebx,ebx
c0011d31:	79 03                	jns    c0011d36 <Virt::setupPageSwapping(int)+0x7b>
c0011d33:	83 c3 0f             	add    ebx,0xf
c0011d36:	c1 fb 04             	sar    ebx,0x4
c0011d39:	4b                   	dec    ebx
c0011d3a:	83 fb ff             	cmp    ebx,0xffffffff
c0011d3d:	74 4b                	je     c0011d8a <Virt::setupPageSwapping(int)+0xcf>
c0011d3f:	83 ec 0c             	sub    esp,0xc
c0011d42:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d44:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d48:	52                   	push   edx
c0011d49:	57                   	push   edi
c0011d4a:	6a 00                	push   0x0
c0011d4c:	68 00 00 01 00       	push   0x10000
c0011d51:	56                   	push   esi
c0011d52:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d55:	83 c4 20             	add    esp,0x20
c0011d58:	85 c0                	test   eax,eax
c0011d5a:	75 59                	jne    c0011db5 <Virt::setupPageSwapping(int)+0xfa>
c0011d5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d60:	3d 00 00 01 00       	cmp    eax,0x10000
c0011d65:	74 d2                	je     c0011d39 <Virt::setupPageSwapping(int)+0x7e>
c0011d67:	83 ec 08             	sub    esp,0x8
c0011d6a:	4b                   	dec    ebx
c0011d6b:	50                   	push   eax
c0011d6c:	68 66 a0 02 c0       	push   0xc002a066
c0011d71:	e8 9f 0d 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0011d76:	c7 04 24 6f a0 02 c0 	mov    DWORD PTR [esp],0xc002a06f
c0011d7d:	e8 bb 82 00 00       	call   c001a03d <Krnl::panic(char const*)>
c0011d82:	83 c4 10             	add    esp,0x10
c0011d85:	83 fb ff             	cmp    ebx,0xffffffff
c0011d88:	75 b5                	jne    c0011d3f <Virt::setupPageSwapping(int)+0x84>
c0011d8a:	83 ec 0c             	sub    esp,0xc
c0011d8d:	56                   	push   esi
c0011d8e:	e8 9d 13 00 00       	call   c0013130 <File::close()>
c0011d93:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d96:	e8 cb da ff ff       	call   c000f866 <rfree>
c0011d9b:	83 c4 10             	add    esp,0x10
c0011d9e:	85 f6                	test   esi,esi
c0011da0:	74 0c                	je     c0011dae <Virt::setupPageSwapping(int)+0xf3>
c0011da2:	83 ec 0c             	sub    esp,0xc
c0011da5:	8b 06                	mov    eax,DWORD PTR [esi]
c0011da7:	56                   	push   esi
c0011da8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011dab:	83 c4 10             	add    esp,0x10
c0011dae:	83 c4 10             	add    esp,0x10
c0011db1:	5b                   	pop    ebx
c0011db2:	5e                   	pop    esi
c0011db3:	5f                   	pop    edi
c0011db4:	c3                   	ret    
c0011db5:	83 ec 08             	sub    esp,0x8
c0011db8:	50                   	push   eax
c0011db9:	68 4e a0 02 c0       	push   0xc002a04e
c0011dbe:	e8 52 0d 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0011dc3:	83 c4 10             	add    esp,0x10
c0011dc6:	eb 94                	jmp    c0011d5c <Virt::setupPageSwapping(int)+0xa1>
c0011dc8:	83 ec 08             	sub    esp,0x8
c0011dcb:	50                   	push   eax
c0011dcc:	68 2a a0 02 c0       	push   0xc002a02a
c0011dd1:	e8 3f 0d 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0011dd6:	c7 04 24 33 a0 02 c0 	mov    DWORD PTR [esp],0xc002a033
c0011ddd:	e8 5b 82 00 00       	call   c001a03d <Krnl::panic(char const*)>
c0011de2:	83 c4 10             	add    esp,0x10
c0011de5:	e9 14 ff ff ff       	jmp    c0011cfe <Virt::setupPageSwapping(int)+0x43>

c0011dea <VAS::VAS()>:
c0011dea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011dee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011df5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011df9:	a3 04 dd 02 c0       	mov    ds:0xc002dd04,eax
c0011dfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e02:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e0a:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e11:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011e18:	90                   	nop
c0011e19:	c3                   	ret    

c0011e1a <VAS::VAS(VAS*)>:
c0011e1a:	83 ec 0c             	sub    esp,0xc
c0011e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e21:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e28:	83 ec 0c             	sub    esp,0xc
c0011e2b:	68 84 9e 02 c0       	push   0xc0029e84
c0011e30:	e8 08 82 00 00       	call   c001a03d <Krnl::panic(char const*)>
c0011e35:	83 c4 10             	add    esp,0x10
c0011e38:	90                   	nop
c0011e39:	83 c4 0c             	add    esp,0xc
c0011e3c:	c3                   	ret    
c0011e3d:	90                   	nop

c0011e3e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011e3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e42:	89 c2                	mov    edx,eax
c0011e44:	c1 e8 0a             	shr    eax,0xa
c0011e47:	c1 ea 16             	shr    edx,0x16
c0011e4a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e4f:	19 c9                	sbb    ecx,ecx
c0011e51:	c1 e2 0c             	shl    edx,0xc
c0011e54:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011e5a:	25 fc 0f 00 00       	and    eax,0xffc
c0011e5f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011e66:	01 d0                	add    eax,edx
c0011e68:	c3                   	ret    
c0011e69:	90                   	nop

c0011e6a <VAS::getPageTableEntry(unsigned long)>:
c0011e6a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011e6e:	89 ca                	mov    edx,ecx
c0011e70:	c1 e9 0a             	shr    ecx,0xa
c0011e73:	c1 ea 16             	shr    edx,0x16
c0011e76:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011e7c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011e82:	c1 e0 0c             	shl    eax,0xc
c0011e85:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011e88:	c3                   	ret    

c0011e89 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011e89:	57                   	push   edi
c0011e8a:	56                   	push   esi
c0011e8b:	be 01 00 00 00       	mov    esi,0x1
c0011e90:	53                   	push   ebx
c0011e91:	83 ec 10             	sub    esp,0x10
c0011e94:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e98:	c1 eb 0c             	shr    ebx,0xc
c0011e9b:	eb 3f                	jmp    c0011edc <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011e9d:	e8 13 fe ff ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c0011ea2:	83 ec 08             	sub    esp,0x8
c0011ea5:	57                   	push   edi
c0011ea6:	50                   	push   eax
c0011ea7:	e8 be ff ff ff       	call   c0011e6a <VAS::getPageTableEntry(unsigned long)>
c0011eac:	83 c4 10             	add    esp,0x10
c0011eaf:	8b 00                	mov    eax,DWORD PTR [eax]
c0011eb1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011eb5:	f6 c4 04             	test   ah,0x4
c0011eb8:	75 5f                	jne    c0011f19 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011eba:	80 fa 04             	cmp    dl,0x4
c0011ebd:	74 78                	je     c0011f37 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011ebf:	80 fa 02             	cmp    dl,0x2
c0011ec2:	0f 84 88 00 00 00    	je     c0011f50 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011ec8:	80 fa 03             	cmp    dl,0x3
c0011ecb:	0f 84 ad 00 00 00    	je     c0011f7e <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011ed1:	fe ca                	dec    dl
c0011ed3:	0f 84 92 00 00 00    	je     c0011f6b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011ed9:	43                   	inc    ebx
c0011eda:	31 f6                	xor    esi,esi
c0011edc:	53                   	push   ebx
c0011edd:	e8 1f fc ff ff       	call   c0011b01 <Virt::getPageState(unsigned long)>
c0011ee2:	5f                   	pop    edi
c0011ee3:	89 df                	mov    edi,ebx
c0011ee5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011ee9:	c1 e7 0c             	shl    edi,0xc
c0011eec:	84 c0                	test   al,al
c0011eee:	75 ad                	jne    c0011e9d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011ef0:	83 ec 0c             	sub    esp,0xc
c0011ef3:	68 75 a0 02 c0       	push   0xc002a075
c0011ef8:	e8 40 81 00 00       	call   c001a03d <Krnl::panic(char const*)>
c0011efd:	e8 b3 fd ff ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c0011f02:	5a                   	pop    edx
c0011f03:	59                   	pop    ecx
c0011f04:	57                   	push   edi
c0011f05:	50                   	push   eax
c0011f06:	e8 5f ff ff ff       	call   c0011e6a <VAS::getPageTableEntry(unsigned long)>
c0011f0b:	83 c4 10             	add    esp,0x10
c0011f0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f10:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f14:	f6 c4 04             	test   ah,0x4
c0011f17:	74 c0                	je     c0011ed9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f19:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011f1d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f22:	83 ec 0c             	sub    esp,0xc
c0011f25:	50                   	push   eax
c0011f26:	e8 2e df ff ff       	call   c000fe59 <Phys::freePage(unsigned long)>
c0011f2b:	83 c4 10             	add    esp,0x10
c0011f2e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f32:	80 fa 04             	cmp    dl,0x4
c0011f35:	75 88                	jne    c0011ebf <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011f37:	89 f0                	mov    eax,esi
c0011f39:	84 c0                	test   al,al
c0011f3b:	75 47                	jne    c0011f84 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011f3d:	c7 44 24 20 a8 9e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0029ea8
c0011f45:	83 c4 10             	add    esp,0x10
c0011f48:	5b                   	pop    ebx
c0011f49:	5e                   	pop    esi
c0011f4a:	5f                   	pop    edi
c0011f4b:	e9 ed 80 00 00       	jmp    c001a03d <Krnl::panic(char const*)>
c0011f50:	89 f0                	mov    eax,esi
c0011f52:	84 c0                	test   al,al
c0011f54:	75 15                	jne    c0011f6b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f56:	83 ec 0c             	sub    esp,0xc
c0011f59:	68 91 a0 02 c0       	push   0xc002a091
c0011f5e:	e8 da 80 00 00       	call   c001a03d <Krnl::panic(char const*)>
c0011f63:	83 c4 10             	add    esp,0x10
c0011f66:	e9 6e ff ff ff       	jmp    c0011ed9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f6b:	83 ec 08             	sub    esp,0x8
c0011f6e:	6a 00                	push   0x0
c0011f70:	53                   	push   ebx
c0011f71:	e8 56 fb ff ff       	call   c0011acc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011f76:	83 c4 10             	add    esp,0x10
c0011f79:	e9 5b ff ff ff       	jmp    c0011ed9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f7e:	89 f0                	mov    eax,esi
c0011f80:	84 c0                	test   al,al
c0011f82:	75 15                	jne    c0011f99 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011f84:	83 ec 08             	sub    esp,0x8
c0011f87:	6a 00                	push   0x0
c0011f89:	53                   	push   ebx
c0011f8a:	e8 3d fb ff ff       	call   c0011acc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011f8f:	83 c4 10             	add    esp,0x10
c0011f92:	83 c4 10             	add    esp,0x10
c0011f95:	5b                   	pop    ebx
c0011f96:	5e                   	pop    esi
c0011f97:	5f                   	pop    edi
c0011f98:	c3                   	ret    
c0011f99:	c7 44 24 20 ad a0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a0ad
c0011fa1:	83 c4 10             	add    esp,0x10
c0011fa4:	5b                   	pop    ebx
c0011fa5:	5e                   	pop    esi
c0011fa6:	5f                   	pop    edi
c0011fa7:	e9 91 80 00 00       	jmp    c001a03d <Krnl::panic(char const*)>

c0011fac <VAS::freeAllocatedPages(unsigned long)>:
c0011fac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011fb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011fb4:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011fb8:	74 09                	je     c0011fc3 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011fba:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011fbe:	e9 c6 fe ff ff       	jmp    c0011e89 <Virt::freeKernelVirtualPages(unsigned long)>
c0011fc3:	c7 44 24 04 cc 9e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029ecc
c0011fcb:	e9 45 0b 00 00       	jmp    c0012b15 <Dbg::kprintf(char const*, ...)>

c0011fd0 <VAS::virtualToPhysical(unsigned long)>:
c0011fd0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011fd4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011fd8:	e8 8d fe ff ff       	call   c0011e6a <VAS::getPageTableEntry(unsigned long)>
c0011fdd:	5a                   	pop    edx
c0011fde:	8b 00                	mov    eax,DWORD PTR [eax]
c0011fe0:	59                   	pop    ecx
c0011fe1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fe6:	c3                   	ret    
c0011fe7:	90                   	nop

c0011fe8 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011fe8:	55                   	push   ebp
c0011fe9:	57                   	push   edi
c0011fea:	56                   	push   esi
c0011feb:	53                   	push   ebx
c0011fec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011ff0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011ff4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011ff8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011ffc:	85 db                	test   ebx,ebx
c0011ffe:	7e 22                	jle    c0012022 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012000:	c1 e3 0c             	shl    ebx,0xc
c0012003:	01 f3                	add    ebx,esi
c0012005:	56                   	push   esi
c0012006:	81 c6 00 10 00 00    	add    esi,0x1000
c001200c:	55                   	push   ebp
c001200d:	e8 58 fe ff ff       	call   c0011e6a <VAS::getPageTableEntry(unsigned long)>
c0012012:	5a                   	pop    edx
c0012013:	59                   	pop    ecx
c0012014:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012016:	21 f9                	and    ecx,edi
c0012018:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001201c:	39 f3                	cmp    ebx,esi
c001201e:	89 08                	mov    DWORD PTR [eax],ecx
c0012020:	75 e3                	jne    c0012005 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012022:	5b                   	pop    ebx
c0012023:	5e                   	pop    esi
c0012024:	5f                   	pop    edi
c0012025:	5d                   	pop    ebp
c0012026:	c3                   	ret    
c0012027:	90                   	nop

c0012028 <VAS::setToWriteCombining(unsigned long, int)>:
c0012028:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c001202d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012033:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c001203a:	75 01                	jne    c001203d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001203c:	c3                   	ret    
c001203d:	68 80 00 00 00       	push   0x80
c0012042:	6a ff                	push   0xffffffff
c0012044:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012048:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001204c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012050:	e8 93 ff ff ff       	call   c0011fe8 <VAS::reflagRange(unsigned long, int, int, int)>
c0012055:	83 c4 14             	add    esp,0x14
c0012058:	c3                   	ret    
c0012059:	90                   	nop

c001205a <VAS::mapOtherVASIn(bool, VAS*)>:
c001205a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001205f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012063:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001206a:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c001206d:	19 c0                	sbb    eax,eax
c001206f:	83 ca 03             	or     edx,0x3
c0012072:	83 e0 fc             	and    eax,0xfffffffc
c0012075:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c001207c:	0f 20 d8             	mov    eax,cr3
c001207f:	0f 22 d8             	mov    cr3,eax
c0012082:	c3                   	ret    
c0012083:	90                   	nop

c0012084 <VAS::~VAS()>:
c0012084:	83 ec 2c             	sub    esp,0x2c
c0012087:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001208f:	e8 38 b6 00 00       	call   c001d6cc <lockScheduler()>
c0012094:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012099:	8b 00                	mov    eax,DWORD PTR [eax]
c001209b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001209e:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00120a4:	83 ec 04             	sub    esp,0x4
c00120a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00120ab:	6a 01                	push   0x1
c00120ad:	50                   	push   eax
c00120ae:	e8 a7 ff ff ff       	call   c001205a <VAS::mapOtherVASIn(bool, VAS*)>
c00120b3:	83 c4 10             	add    esp,0x10
c00120b6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00120be:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00120c6:	0f 8f d7 00 00 00    	jg     c00121a3 <VAS::~VAS()+0x11f>
c00120cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00120d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00120d7:	c1 e2 02             	shl    edx,0x2
c00120da:	01 d0                	add    eax,edx
c00120dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00120de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120e6:	83 e0 01             	and    eax,0x1
c00120e9:	0f 84 ab 00 00 00    	je     c001219a <VAS::~VAS()+0x116>
c00120ef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00120f7:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00120ff:	7f 75                	jg     c0012176 <VAS::~VAS()+0xf2>
c0012101:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012105:	c1 e0 0a             	shl    eax,0xa
c0012108:	89 c2                	mov    edx,eax
c001210a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001210e:	01 d0                	add    eax,edx
c0012110:	c1 e0 0c             	shl    eax,0xc
c0012113:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012117:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001211c:	8b 00                	mov    eax,DWORD PTR [eax]
c001211e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012121:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012127:	83 ec 04             	sub    esp,0x4
c001212a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001212e:	6a 01                	push   0x1
c0012130:	50                   	push   eax
c0012131:	e8 08 fd ff ff       	call   c0011e3e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012136:	83 c4 10             	add    esp,0x10
c0012139:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001213d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012141:	8b 00                	mov    eax,DWORD PTR [eax]
c0012143:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012147:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001214b:	25 01 04 00 00       	and    eax,0x401
c0012150:	3d 01 04 00 00       	cmp    eax,0x401
c0012155:	75 19                	jne    c0012170 <VAS::~VAS()+0xec>
c0012157:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001215b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012160:	83 ec 0c             	sub    esp,0xc
c0012163:	50                   	push   eax
c0012164:	e8 f0 dc ff ff       	call   c000fe59 <Phys::freePage(unsigned long)>
c0012169:	83 c4 10             	add    esp,0x10
c001216c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012170:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0012174:	eb 81                	jmp    c00120f7 <VAS::~VAS()+0x73>
c0012176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001217a:	25 00 04 00 00       	and    eax,0x400
c001217f:	74 19                	je     c001219a <VAS::~VAS()+0x116>
c0012181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012185:	25 00 f0 ff ff       	and    eax,0xfffff000
c001218a:	83 ec 0c             	sub    esp,0xc
c001218d:	50                   	push   eax
c001218e:	e8 c6 dc ff ff       	call   c000fe59 <Phys::freePage(unsigned long)>
c0012193:	83 c4 10             	add    esp,0x10
c0012196:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001219a:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001219e:	e9 1b ff ff ff       	jmp    c00120be <VAS::~VAS()+0x3a>
c00121a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00121aa:	83 ec 0c             	sub    esp,0xc
c00121ad:	50                   	push   eax
c00121ae:	e8 d6 fc ff ff       	call   c0011e89 <Virt::freeKernelVirtualPages(unsigned long)>
c00121b3:	83 c4 10             	add    esp,0x10
c00121b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121ba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121bd:	83 ec 0c             	sub    esp,0xc
c00121c0:	50                   	push   eax
c00121c1:	e8 93 dc ff ff       	call   c000fe59 <Phys::freePage(unsigned long)>
c00121c6:	83 c4 10             	add    esp,0x10
c00121c9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00121d1:	c1 e0 02             	shl    eax,0x2
c00121d4:	83 ec 08             	sub    esp,0x8
c00121d7:	50                   	push   eax
c00121d8:	68 f0 9e 02 c0       	push   0xc0029ef0
c00121dd:	e8 33 09 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00121e2:	83 c4 10             	add    esp,0x10
c00121e5:	e8 e4 b4 00 00       	call   c001d6ce <unlockScheduler()>
c00121ea:	90                   	nop
c00121eb:	83 c4 2c             	add    esp,0x2c
c00121ee:	c3                   	ret    
c00121ef:	90                   	nop

c00121f0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00121f0:	55                   	push   ebp
c00121f1:	57                   	push   edi
c00121f2:	56                   	push   esi
c00121f3:	53                   	push   ebx
c00121f4:	83 ec 1c             	sub    esp,0x1c
c00121f7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00121fb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00121ff:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012205:	77 08                	ja     c001220f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012207:	0f 20 d8             	mov    eax,cr3
c001220a:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c001220d:	75 47                	jne    c0012256 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001220f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012213:	09 d8                	or     eax,ebx
c0012215:	a9 ff 0f 00 00       	test   eax,0xfff
c001221a:	75 57                	jne    c0012273 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001221c:	89 de                	mov    esi,ebx
c001221e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012221:	c1 ee 16             	shr    esi,0x16
c0012224:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001222b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001222f:	74 54                	je     c0012285 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012231:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012235:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001223b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001223f:	c1 e6 0c             	shl    esi,0xc
c0012242:	c1 eb 0a             	shr    ebx,0xa
c0012245:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001224b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001224e:	83 c4 1c             	add    esp,0x1c
c0012251:	5b                   	pop    ebx
c0012252:	5e                   	pop    esi
c0012253:	5f                   	pop    edi
c0012254:	5d                   	pop    ebp
c0012255:	c3                   	ret    
c0012256:	83 ec 0c             	sub    esp,0xc
c0012259:	68 10 9f 02 c0       	push   0xc0029f10
c001225e:	e8 b2 08 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0012263:	83 c4 10             	add    esp,0x10
c0012266:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001226a:	09 d8                	or     eax,ebx
c001226c:	a9 ff 0f 00 00       	test   eax,0xfff
c0012271:	74 a9                	je     c001221c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012273:	83 ec 0c             	sub    esp,0xc
c0012276:	68 78 9f 02 c0       	push   0xc0029f78
c001227b:	e8 bd 7d 00 00       	call   c001a03d <Krnl::panic(char const*)>
c0012280:	83 c4 10             	add    esp,0x10
c0012283:	eb 97                	jmp    c001221c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012285:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012289:	e8 55 dc ff ff       	call   c000fee3 <Phys::allocatePage()>
c001228e:	89 c5                	mov    ebp,eax
c0012290:	e8 20 fa ff ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c0012295:	83 ec 0c             	sub    esp,0xc
c0012298:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001229c:	6a 01                	push   0x1
c001229e:	e8 82 f8 ff ff       	call   c0011b25 <Virt::allocateKernelVirtualPages(int)>
c00122a3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00122aa:	6a 01                	push   0x1
c00122ac:	50                   	push   eax
c00122ad:	55                   	push   ebp
c00122ae:	81 cd 07 04 00 00    	or     ebp,0x407
c00122b4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00122b8:	51                   	push   ecx
c00122b9:	e8 26 02 00 00       	call   c00124e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00122be:	83 c4 1c             	add    esp,0x1c
c00122c1:	68 00 10 00 00       	push   0x1000
c00122c6:	6a 00                	push   0x0
c00122c8:	50                   	push   eax
c00122c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122cd:	e8 a6 e4 fe ff       	call   c0000778 <memset>
c00122d2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00122d6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00122d9:	e8 ab fb ff ff       	call   c0011e89 <Virt::freeKernelVirtualPages(unsigned long)>
c00122de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00122e2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00122e5:	83 c4 10             	add    esp,0x10
c00122e8:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00122eb:	e9 41 ff ff ff       	jmp    c0012231 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00122f0 <VAS::allocatePages(int, int)>:
c00122f0:	55                   	push   ebp
c00122f1:	57                   	push   edi
c00122f2:	56                   	push   esi
c00122f3:	53                   	push   ebx
c00122f4:	83 ec 1c             	sub    esp,0x1c
c00122f7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00122fb:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c0012300:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012306:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001230c:	83 e0 01             	and    eax,0x1
c001230f:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012313:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012317:	0f 85 cc 00 00 00    	jne    c00123e9 <VAS::allocatePages(int, int)+0xf9>
c001231d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012320:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012324:	85 c0                	test   eax,eax
c0012326:	0f 84 a1 00 00 00    	je     c00123cd <VAS::allocatePages(int, int)+0xdd>
c001232c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012330:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012334:	c1 e6 0c             	shl    esi,0xc
c0012337:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001233b:	85 c0                	test   eax,eax
c001233d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012340:	7e 33                	jle    c0012375 <VAS::allocatePages(int, int)+0x85>
c0012342:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012346:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001234a:	81 cd 00 04 00 00    	or     ebp,0x400
c0012350:	e8 8e db ff ff       	call   c000fee3 <Phys::allocatePage()>
c0012355:	55                   	push   ebp
c0012356:	53                   	push   ebx
c0012357:	50                   	push   eax
c0012358:	57                   	push   edi
c0012359:	e8 92 fe ff ff       	call   c00121f0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001235e:	83 c4 10             	add    esp,0x10
c0012361:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012366:	74 03                	je     c001236b <VAS::allocatePages(int, int)+0x7b>
c0012368:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001236b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012371:	39 de                	cmp    esi,ebx
c0012373:	75 db                	jne    c0012350 <VAS::allocatePages(int, int)+0x60>
c0012375:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001237a:	75 12                	jne    c001238e <VAS::allocatePages(int, int)+0x9e>
c001237c:	0f 20 d8             	mov    eax,cr3
c001237f:	0f 22 d8             	mov    cr3,eax
c0012382:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012386:	83 c4 1c             	add    esp,0x1c
c0012389:	5b                   	pop    ebx
c001238a:	5e                   	pop    esi
c001238b:	5f                   	pop    edi
c001238c:	5d                   	pop    ebp
c001238d:	c3                   	ret    
c001238e:	c1 ee 0a             	shr    esi,0xa
c0012391:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012395:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001239b:	c1 eb 0a             	shr    ebx,0xa
c001239e:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00123a4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00123aa:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00123b0:	39 c3                	cmp    ebx,eax
c00123b2:	77 ce                	ja     c0012382 <VAS::allocatePages(int, int)+0x92>
c00123b4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123b7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123bd:	39 d8                	cmp    eax,ebx
c00123bf:	73 f3                	jae    c00123b4 <VAS::allocatePages(int, int)+0xc4>
c00123c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123c5:	83 c4 1c             	add    esp,0x1c
c00123c8:	5b                   	pop    ebx
c00123c9:	5e                   	pop    esi
c00123ca:	5f                   	pop    edi
c00123cb:	5d                   	pop    ebp
c00123cc:	c3                   	ret    
c00123cd:	83 ec 0c             	sub    esp,0xc
c00123d0:	68 9c 9f 02 c0       	push   0xc0029f9c
c00123d5:	e8 63 7c 00 00       	call   c001a03d <Krnl::panic(char const*)>
c00123da:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00123dd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00123e1:	83 c4 10             	add    esp,0x10
c00123e4:	e9 43 ff ff ff       	jmp    c001232c <VAS::allocatePages(int, int)+0x3c>
c00123e9:	83 ec 0c             	sub    esp,0xc
c00123ec:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00123f0:	e8 30 f7 ff ff       	call   c0011b25 <Virt::allocateKernelVirtualPages(int)>
c00123f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00123f9:	83 c4 10             	add    esp,0x10
c00123fc:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012401:	0f 87 9b 00 00 00    	ja     c00124a2 <VAS::allocatePages(int, int)+0x1b2>
c0012407:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001240b:	85 d2                	test   edx,edx
c001240d:	7e 3c                	jle    c001244b <VAS::allocatePages(int, int)+0x15b>
c001240f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012413:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012417:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001241b:	c1 e5 0c             	shl    ebp,0xc
c001241e:	81 ce 00 04 00 00    	or     esi,0x400
c0012424:	01 dd                	add    ebp,ebx
c0012426:	e8 b8 da ff ff       	call   c000fee3 <Phys::allocatePage()>
c001242b:	56                   	push   esi
c001242c:	53                   	push   ebx
c001242d:	50                   	push   eax
c001242e:	57                   	push   edi
c001242f:	e8 bc fd ff ff       	call   c00121f0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012434:	83 c4 10             	add    esp,0x10
c0012437:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001243c:	74 03                	je     c0012441 <VAS::allocatePages(int, int)+0x151>
c001243e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012441:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012447:	39 dd                	cmp    ebp,ebx
c0012449:	75 db                	jne    c0012426 <VAS::allocatePages(int, int)+0x136>
c001244b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012450:	0f 84 26 ff ff ff    	je     c001237c <VAS::allocatePages(int, int)+0x8c>
c0012456:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001245a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001245e:	89 d3                	mov    ebx,edx
c0012460:	c1 e0 0c             	shl    eax,0xc
c0012463:	c1 eb 0a             	shr    ebx,0xa
c0012466:	01 d0                	add    eax,edx
c0012468:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001246e:	c1 e8 0a             	shr    eax,0xa
c0012471:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012477:	25 00 f0 ff ff       	and    eax,0xfffff000
c001247c:	2d 00 00 40 00       	sub    eax,0x400000
c0012481:	39 c3                	cmp    ebx,eax
c0012483:	0f 87 f9 fe ff ff    	ja     c0012382 <VAS::allocatePages(int, int)+0x92>
c0012489:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001248c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012492:	39 d8                	cmp    eax,ebx
c0012494:	73 f3                	jae    c0012489 <VAS::allocatePages(int, int)+0x199>
c0012496:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001249a:	83 c4 1c             	add    esp,0x1c
c001249d:	5b                   	pop    ebx
c001249e:	5e                   	pop    esi
c001249f:	5f                   	pop    edi
c00124a0:	5d                   	pop    ebp
c00124a1:	c3                   	ret    
c00124a2:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c00124a7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124ad:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00124b4:	0f 84 4d ff ff ff    	je     c0012407 <VAS::allocatePages(int, int)+0x117>
c00124ba:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00124c2:	e9 40 ff ff ff       	jmp    c0012407 <VAS::allocatePages(int, int)+0x117>
c00124c7:	90                   	nop

c00124c8 <VAS::setCPUSpecific(unsigned long)>:
c00124c8:	83 ec 0c             	sub    esp,0xc
c00124cb:	6a 05                	push   0x5
c00124cd:	68 00 00 40 c2       	push   0xc2400000
c00124d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124da:	e8 11 fd ff ff       	call   c00121f0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124df:	83 c4 1c             	add    esp,0x1c
c00124e2:	c3                   	ret    
c00124e3:	90                   	nop

c00124e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00124e4:	55                   	push   ebp
c00124e5:	57                   	push   edi
c00124e6:	56                   	push   esi
c00124e7:	53                   	push   ebx
c00124e8:	83 ec 1c             	sub    esp,0x1c
c00124eb:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c00124f0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00124f4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124fa:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00124fe:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012504:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012508:	83 e0 01             	and    eax,0x1
c001250b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001250f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012513:	85 c0                	test   eax,eax
c0012515:	7e 39                	jle    c0012550 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012517:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001251b:	89 f3                	mov    ebx,esi
c001251d:	c1 e0 0c             	shl    eax,0xc
c0012520:	01 f0                	add    eax,esi
c0012522:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012526:	55                   	push   ebp
c0012527:	53                   	push   ebx
c0012528:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001252c:	29 f0                	sub    eax,esi
c001252e:	01 d8                	add    eax,ebx
c0012530:	50                   	push   eax
c0012531:	57                   	push   edi
c0012532:	e8 b9 fc ff ff       	call   c00121f0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012537:	83 c4 10             	add    esp,0x10
c001253a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001253f:	74 03                	je     c0012544 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012541:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012544:	81 c3 00 10 00 00    	add    ebx,0x1000
c001254a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001254e:	75 d6                	jne    c0012526 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012550:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012555:	75 10                	jne    c0012567 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012557:	0f 20 d8             	mov    eax,cr3
c001255a:	0f 22 d8             	mov    cr3,eax
c001255d:	83 c4 1c             	add    esp,0x1c
c0012560:	89 f0                	mov    eax,esi
c0012562:	5b                   	pop    ebx
c0012563:	5e                   	pop    esi
c0012564:	5f                   	pop    edi
c0012565:	5d                   	pop    ebp
c0012566:	c3                   	ret    
c0012567:	89 f3                	mov    ebx,esi
c0012569:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001256d:	c1 eb 0a             	shr    ebx,0xa
c0012570:	c1 e0 0c             	shl    eax,0xc
c0012573:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012579:	01 f0                	add    eax,esi
c001257b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012581:	c1 e8 0a             	shr    eax,0xa
c0012584:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012589:	2d 00 00 40 00       	sub    eax,0x400000
c001258e:	39 c3                	cmp    ebx,eax
c0012590:	77 cb                	ja     c001255d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012592:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012595:	81 c3 00 10 00 00    	add    ebx,0x1000
c001259b:	39 d8                	cmp    eax,ebx
c001259d:	73 f3                	jae    c0012592 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001259f:	83 c4 1c             	add    esp,0x1c
c00125a2:	89 f0                	mov    eax,esi
c00125a4:	5b                   	pop    ebx
c00125a5:	5e                   	pop    esi
c00125a6:	5f                   	pop    edi
c00125a7:	5d                   	pop    ebp
c00125a8:	c3                   	ret    
c00125a9:	90                   	nop

c00125aa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00125aa:	55                   	push   ebp
c00125ab:	57                   	push   edi
c00125ac:	56                   	push   esi
c00125ad:	53                   	push   ebx
c00125ae:	83 ec 1c             	sub    esp,0x1c
c00125b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125b5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00125b9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00125bd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00125c1:	a9 ff 0f 00 00       	test   eax,0xfff
c00125c6:	75 4a                	jne    c0012612 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00125c8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00125cc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00125cf:	c1 eb 16             	shr    ebx,0x16
c00125d2:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00125d9:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00125dd:	74 4d                	je     c001262c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00125df:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00125e3:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00125e7:	c1 e8 0a             	shr    eax,0xa
c00125ea:	80 fa 01             	cmp    dl,0x1
c00125ed:	19 d2                	sbb    edx,edx
c00125ef:	c1 e3 0c             	shl    ebx,0xc
c00125f2:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00125f6:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00125fc:	25 fc 0f 00 00       	and    eax,0xffc
c0012601:	01 d8                	add    eax,ebx
c0012603:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001260a:	83 c4 1c             	add    esp,0x1c
c001260d:	5b                   	pop    ebx
c001260e:	5e                   	pop    esi
c001260f:	5f                   	pop    edi
c0012610:	5d                   	pop    ebp
c0012611:	c3                   	ret    
c0012612:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012616:	83 ec 0c             	sub    esp,0xc
c0012619:	68 c8 9f 02 c0       	push   0xc0029fc8
c001261e:	e8 1a 7a 00 00       	call   c001a03d <Krnl::panic(char const*)>
c0012623:	83 c4 10             	add    esp,0x10
c0012626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001262a:	eb 9c                	jmp    c00125c8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001262c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012630:	e8 ae d8 ff ff       	call   c000fee3 <Phys::allocatePage()>
c0012635:	89 c5                	mov    ebp,eax
c0012637:	e8 79 f6 ff ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c001263c:	83 ec 0c             	sub    esp,0xc
c001263f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012643:	6a 01                	push   0x1
c0012645:	e8 db f4 ff ff       	call   c0011b25 <Virt::allocateKernelVirtualPages(int)>
c001264a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012651:	6a 01                	push   0x1
c0012653:	50                   	push   eax
c0012654:	55                   	push   ebp
c0012655:	81 cd 07 04 00 00    	or     ebp,0x407
c001265b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001265f:	51                   	push   ecx
c0012660:	e8 7f fe ff ff       	call   c00124e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012665:	83 c4 1c             	add    esp,0x1c
c0012668:	68 00 10 00 00       	push   0x1000
c001266d:	6a 00                	push   0x0
c001266f:	50                   	push   eax
c0012670:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012674:	e8 ff e0 fe ff       	call   c0000778 <memset>
c0012679:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001267d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012680:	e8 04 f8 ff ff       	call   c0011e89 <Virt::freeKernelVirtualPages(unsigned long)>
c0012685:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012688:	83 c4 10             	add    esp,0x10
c001268b:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001268e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012692:	e9 48 ff ff ff       	jmp    c00125df <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012697:	90                   	nop

c0012698 <VAS::VAS(bool)>:
c0012698:	53                   	push   ebx
c0012699:	83 ec 28             	sub    esp,0x28
c001269c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126a0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00126a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126a8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00126af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126b3:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00126b7:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00126ba:	e8 24 d8 ff ff       	call   c000fee3 <Phys::allocatePage()>
c00126bf:	89 c2                	mov    edx,eax
c00126c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126c5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00126c8:	e8 e8 f5 ff ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c00126cd:	89 c3                	mov    ebx,eax
c00126cf:	83 ec 0c             	sub    esp,0xc
c00126d2:	6a 01                	push   0x1
c00126d4:	e8 4c f4 ff ff       	call   c0011b25 <Virt::allocateKernelVirtualPages(int)>
c00126d9:	83 c4 10             	add    esp,0x10
c00126dc:	89 c2                	mov    edx,eax
c00126de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126e2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00126e5:	83 ec 0c             	sub    esp,0xc
c00126e8:	6a 03                	push   0x3
c00126ea:	6a 01                	push   0x1
c00126ec:	52                   	push   edx
c00126ed:	50                   	push   eax
c00126ee:	53                   	push   ebx
c00126ef:	e8 f0 fd ff ff       	call   c00124e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126f4:	83 c4 20             	add    esp,0x20
c00126f7:	89 c2                	mov    edx,eax
c00126f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126fd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012700:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012708:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012710:	7f 1c                	jg     c001272e <VAS::VAS(bool)+0x96>
c0012712:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012716:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012719:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001271d:	c1 e2 02             	shl    edx,0x2
c0012720:	01 d0                	add    eax,edx
c0012722:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012728:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001272c:	eb da                	jmp    c0012708 <VAS::VAS(bool)+0x70>
c001272e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012736:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001273e:	7f 7a                	jg     c00127ba <VAS::VAS(bool)+0x122>
c0012740:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012744:	2d 00 02 00 00       	sub    eax,0x200
c0012749:	c1 e0 0c             	shl    eax,0xc
c001274c:	83 c8 03             	or     eax,0x3
c001274f:	89 c2                	mov    edx,eax
c0012751:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c0012756:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001275c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012762:	83 e0 10             	and    eax,0x10
c0012765:	84 c0                	test   al,al
c0012767:	74 07                	je     c0012770 <VAS::VAS(bool)+0xd8>
c0012769:	b8 00 01 00 00       	mov    eax,0x100
c001276e:	eb 05                	jmp    c0012775 <VAS::VAS(bool)+0xdd>
c0012770:	b8 00 00 00 00       	mov    eax,0x0
c0012775:	09 d0                	or     eax,edx
c0012777:	89 c1                	mov    ecx,eax
c0012779:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001277d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012780:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012784:	c1 e2 02             	shl    edx,0x2
c0012787:	01 d0                	add    eax,edx
c0012789:	89 ca                	mov    edx,ecx
c001278b:	89 10                	mov    DWORD PTR [eax],edx
c001278d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012791:	2d 40 03 00 00       	sub    eax,0x340
c0012796:	83 f8 7f             	cmp    eax,0x7f
c0012799:	77 16                	ja     c00127b1 <VAS::VAS(bool)+0x119>
c001279b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001279f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00127a2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127a6:	c1 e2 02             	shl    edx,0x2
c00127a9:	01 d0                	add    eax,edx
c00127ab:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127b1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00127b5:	e9 7c ff ff ff       	jmp    c0012736 <VAS::VAS(bool)+0x9e>
c00127ba:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c00127bf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127c5:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00127cb:	83 e0 10             	and    eax,0x10
c00127ce:	84 c0                	test   al,al
c00127d0:	74 07                	je     c00127d9 <VAS::VAS(bool)+0x141>
c00127d2:	b8 03 41 00 00       	mov    eax,0x4103
c00127d7:	eb 05                	jmp    c00127de <VAS::VAS(bool)+0x146>
c00127d9:	b8 03 40 00 00       	mov    eax,0x4003
c00127de:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00127e2:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00127e5:	81 c2 20 0c 00 00    	add    edx,0xc20
c00127eb:	89 02                	mov    DWORD PTR [edx],eax
c00127ed:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c00127f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127f8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00127fe:	83 ec 08             	sub    esp,0x8
c0012801:	50                   	push   eax
c0012802:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012806:	e8 bd fc ff ff       	call   c00124c8 <VAS::setCPUSpecific(unsigned long)>
c001280b:	83 c4 10             	add    esp,0x10
c001280e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012812:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012815:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c001281a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012820:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012826:	83 e0 10             	and    eax,0x10
c0012829:	84 c0                	test   al,al
c001282b:	74 07                	je     c0012834 <VAS::VAS(bool)+0x19c>
c001282d:	b8 00 01 00 00       	mov    eax,0x100
c0012832:	eb 05                	jmp    c0012839 <VAS::VAS(bool)+0x1a1>
c0012834:	b8 00 00 00 00       	mov    eax,0x0
c0012839:	09 c2                	or     edx,eax
c001283b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001283f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012842:	05 fc 0f 00 00       	add    eax,0xffc
c0012847:	83 ca 03             	or     edx,0x3
c001284a:	89 10                	mov    DWORD PTR [eax],edx
c001284c:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c0012851:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012857:	83 ec 0c             	sub    esp,0xc
c001285a:	50                   	push   eax
c001285b:	e8 c8 19 00 00       	call   c0014228 <Device::getName()>
c0012860:	83 c4 10             	add    esp,0x10
c0012863:	83 ec 08             	sub    esp,0x8
c0012866:	68 c7 a0 02 c0       	push   0xc002a0c7
c001286b:	50                   	push   eax
c001286c:	e8 4f e0 fe ff       	call   c00008c0 <strcmp>
c0012871:	83 c4 10             	add    esp,0x10
c0012874:	85 c0                	test   eax,eax
c0012876:	0f 94 c0             	sete   al
c0012879:	84 c0                	test   al,al
c001287b:	74 70                	je     c00128ed <VAS::VAS(bool)+0x255>
c001287d:	e8 2d ae 00 00       	call   c001d6af <disableIRQs()>
c0012882:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c0012887:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001288d:	05 7c 09 00 00       	add    eax,0x97c
c0012892:	83 ec 0c             	sub    esp,0xc
c0012895:	50                   	push   eax
c0012896:	e8 27 ca ff ff       	call   c000f2c2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001289b:	83 c4 10             	add    esp,0x10
c001289e:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128a3:	89 c3                	mov    ebx,eax
c00128a5:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c00128aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128b0:	05 7c 09 00 00       	add    eax,0x97c
c00128b5:	83 ec 0c             	sub    esp,0xc
c00128b8:	50                   	push   eax
c00128b9:	e8 04 ca ff ff       	call   c000f2c2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128be:	83 c4 10             	add    esp,0x10
c00128c1:	83 ec 08             	sub    esp,0x8
c00128c4:	50                   	push   eax
c00128c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128c9:	e8 9c f5 ff ff       	call   c0011e6a <VAS::getPageTableEntry(unsigned long)>
c00128ce:	83 c4 10             	add    esp,0x10
c00128d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00128d3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128d8:	6a 11                	push   0x11
c00128da:	53                   	push   ebx
c00128db:	50                   	push   eax
c00128dc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128e0:	e8 0b f9 ff ff       	call   c00121f0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00128e5:	83 c4 10             	add    esp,0x10
c00128e8:	e8 d0 ad 00 00       	call   c001d6bd <enableIRQs()>
c00128ed:	90                   	nop
c00128ee:	83 c4 28             	add    esp,0x28
c00128f1:	5b                   	pop    ebx
c00128f2:	c3                   	ret    

c00128f3 <mapVASFirstTime>:
c00128f3:	55                   	push   ebp
c00128f4:	57                   	push   edi
c00128f5:	56                   	push   esi
c00128f6:	53                   	push   ebx
c00128f7:	83 ec 0c             	sub    esp,0xc
c00128fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00128ff:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012902:	4a                   	dec    edx
c0012903:	0f 84 8e 00 00 00    	je     c0012997 <mapVASFirstTime+0xa4>
c0012909:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001290c:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001290f:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012914:	c1 e5 15             	shl    ebp,0x15
c0012917:	be 00 90 e7 01       	mov    esi,0x1e79000
c001291c:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012922:	29 eb                	sub    ebx,ebp
c0012924:	29 ee                	sub    esi,ebp
c0012926:	e8 b8 d5 ff ff       	call   c000fee3 <Phys::allocatePage()>
c001292b:	83 ec 0c             	sub    esp,0xc
c001292e:	68 03 04 00 00       	push   0x403
c0012933:	6a 01                	push   0x1
c0012935:	53                   	push   ebx
c0012936:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001293c:	50                   	push   eax
c001293d:	57                   	push   edi
c001293e:	e8 a1 fb ff ff       	call   c00124e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012943:	83 c4 20             	add    esp,0x20
c0012946:	39 f3                	cmp    ebx,esi
c0012948:	75 dc                	jne    c0012926 <mapVASFirstTime+0x33>
c001294a:	be 00 f0 ff 01       	mov    esi,0x1fff000
c001294f:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012954:	29 ee                	sub    esi,ebp
c0012956:	29 e8                	sub    eax,ebp
c0012958:	89 c5                	mov    ebp,eax
c001295a:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001295e:	19 db                	sbb    ebx,ebx
c0012960:	e8 7e d5 ff ff       	call   c000fee3 <Phys::allocatePage()>
c0012965:	83 e3 04             	and    ebx,0x4
c0012968:	83 ec 0c             	sub    esp,0xc
c001296b:	81 c3 03 04 00 00    	add    ebx,0x403
c0012971:	53                   	push   ebx
c0012972:	6a 01                	push   0x1
c0012974:	56                   	push   esi
c0012975:	81 ee 00 10 00 00    	sub    esi,0x1000
c001297b:	50                   	push   eax
c001297c:	57                   	push   edi
c001297d:	e8 62 fb ff ff       	call   c00124e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012982:	83 c4 20             	add    esp,0x20
c0012985:	39 f5                	cmp    ebp,esi
c0012987:	75 d1                	jne    c001295a <mapVASFirstTime+0x67>
c0012989:	0f 20 d8             	mov    eax,cr3
c001298c:	0f 22 d8             	mov    cr3,eax
c001298f:	83 c4 0c             	add    esp,0xc
c0012992:	5b                   	pop    ebx
c0012993:	5e                   	pop    esi
c0012994:	5f                   	pop    edi
c0012995:	5d                   	pop    ebp
c0012996:	c3                   	ret    
c0012997:	83 ec 0c             	sub    esp,0xc
c001299a:	68 d5 a0 02 c0       	push   0xc002a0d5
c001299f:	e8 71 01 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00129a4:	83 c4 10             	add    esp,0x10
c00129a7:	83 c4 0c             	add    esp,0xc
c00129aa:	5b                   	pop    ebx
c00129ab:	5e                   	pop    esi
c00129ac:	5f                   	pop    edi
c00129ad:	5d                   	pop    ebp
c00129ae:	c3                   	ret    

c00129af <__cxa_atexit>:
c00129af:	31 c0                	xor    eax,eax
c00129b1:	c3                   	ret    

c00129b2 <__cxa_finalize>:
c00129b2:	c3                   	ret    

c00129b3 <__stack_chk_fail>:
c00129b3:	55                   	push   ebp
c00129b4:	89 e5                	mov    ebp,esp
c00129b6:	83 ec 14             	sub    esp,0x14
c00129b9:	68 ee a0 02 c0       	push   0xc002a0ee
c00129be:	e8 52 01 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00129c3:	58                   	pop    eax
c00129c4:	5a                   	pop    edx
c00129c5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00129c8:	68 3e a1 02 c0       	push   0xc002a13e
c00129cd:	e8 43 01 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00129d2:	59                   	pop    ecx
c00129d3:	58                   	pop    eax
c00129d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00129d7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00129da:	68 3e a1 02 c0       	push   0xc002a13e
c00129df:	e8 31 01 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00129e4:	5a                   	pop    edx
c00129e5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00129e8:	59                   	pop    ecx
c00129e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00129eb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00129ee:	68 3e a1 02 c0       	push   0xc002a13e
c00129f3:	e8 1d 01 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00129f8:	5a                   	pop    edx
c00129f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00129fc:	59                   	pop    ecx
c00129fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00129ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a01:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012a04:	68 3e a1 02 c0       	push   0xc002a13e
c0012a09:	e8 07 01 00 00       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0012a0e:	c7 04 24 46 a1 02 c0 	mov    DWORD PTR [esp],0xc002a146
c0012a15:	e8 23 76 00 00       	call   c001a03d <Krnl::panic(char const*)>
c0012a1a:	83 c4 10             	add    esp,0x10
c0012a1d:	c9                   	leave  
c0012a1e:	c3                   	ret    

c0012a1f <__cxa_pure_virtual>:
c0012a1f:	83 ec 18             	sub    esp,0x18
c0012a22:	68 5e a1 02 c0       	push   0xc002a15e
c0012a27:	e8 11 76 00 00       	call   c001a03d <Krnl::panic(char const*)>
c0012a2c:	83 c4 1c             	add    esp,0x1c
c0012a2f:	c3                   	ret    

c0012a30 <operator new[](unsigned long)>:
c0012a30:	e9 11 ce ff ff       	jmp    c000f846 <malloc>

c0012a35 <operator delete(void*, unsigned long)>:
c0012a35:	e9 2c ce ff ff       	jmp    c000f866 <rfree>

c0012a3a <operator delete[](void*)>:
c0012a3a:	e9 27 ce ff ff       	jmp    c000f866 <rfree>

c0012a3f <operator delete[](void*, unsigned long)>:
c0012a3f:	e9 22 ce ff ff       	jmp    c000f866 <rfree>

c0012a44 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012a44:	57                   	push   edi
c0012a45:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012a4a:	56                   	push   esi
c0012a4b:	be 74 a1 02 c0       	mov    esi,0xc002a174
c0012a50:	53                   	push   ebx
c0012a51:	83 ec 40             	sub    esp,0x40
c0012a54:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012a58:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012a5c:	fc                   	cld    
c0012a5d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012a5f:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012a63:	83 f9 3e             	cmp    ecx,0x3e
c0012a66:	7e 05                	jle    c0012a6d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012a68:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012a6d:	89 df                	mov    edi,ebx
c0012a6f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012a73:	eb 02                	jmp    c0012a77 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012a75:	89 c7                	mov    edi,eax
c0012a77:	31 d2                	xor    edx,edx
c0012a79:	46                   	inc    esi
c0012a7a:	89 f8                	mov    eax,edi
c0012a7c:	f7 f1                	div    ecx
c0012a7e:	39 cf                	cmp    edi,ecx
c0012a80:	73 f3                	jae    c0012a75 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012a82:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012a85:	eb 02                	jmp    c0012a89 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012a87:	89 c3                	mov    ebx,eax
c0012a89:	31 d2                	xor    edx,edx
c0012a8b:	4e                   	dec    esi
c0012a8c:	89 d8                	mov    eax,ebx
c0012a8e:	f7 f1                	div    ecx
c0012a90:	39 cb                	cmp    ebx,ecx
c0012a92:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012a96:	88 16                	mov    BYTE PTR [esi],dl
c0012a98:	73 ed                	jae    c0012a87 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012a9a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012a9e:	83 c4 40             	add    esp,0x40
c0012aa1:	5b                   	pop    ebx
c0012aa2:	5e                   	pop    esi
c0012aa3:	5f                   	pop    edi
c0012aa4:	c3                   	ret    

c0012aa5 <Dbg::logc(char)>:
c0012aa5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012aa9:	ba fd 03 00 00       	mov    edx,0x3fd
c0012aae:	ec                   	in     al,dx
c0012aaf:	a8 20                	test   al,0x20
c0012ab1:	74 fb                	je     c0012aae <Dbg::logc(char)+0x9>
c0012ab3:	ba f8 03 00 00       	mov    edx,0x3f8
c0012ab8:	88 c8                	mov    al,cl
c0012aba:	ee                   	out    dx,al
c0012abb:	c3                   	ret    

c0012abc <Dbg::logs(char*)>:
c0012abc:	53                   	push   ebx
c0012abd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012ac1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012ac4:	84 c0                	test   al,al
c0012ac6:	74 0f                	je     c0012ad7 <Dbg::logs(char*)+0x1b>
c0012ac8:	50                   	push   eax
c0012ac9:	43                   	inc    ebx
c0012aca:	e8 d6 ff ff ff       	call   c0012aa5 <Dbg::logc(char)>
c0012acf:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012ad2:	5a                   	pop    edx
c0012ad3:	84 c0                	test   al,al
c0012ad5:	75 f1                	jne    c0012ac8 <Dbg::logs(char*)+0xc>
c0012ad7:	5b                   	pop    ebx
c0012ad8:	c3                   	ret    

c0012ad9 <Dbg::logWriteInt(unsigned int)>:
c0012ad9:	83 ec 10             	sub    esp,0x10
c0012adc:	6a 0a                	push   0xa
c0012ade:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012ae2:	50                   	push   eax
c0012ae3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ae7:	e8 58 ff ff ff       	call   c0012a44 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012aec:	50                   	push   eax
c0012aed:	e8 ca ff ff ff       	call   c0012abc <Dbg::logs(char*)>
c0012af2:	83 c4 20             	add    esp,0x20
c0012af5:	c3                   	ret    

c0012af6 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012af6:	83 ec 10             	sub    esp,0x10
c0012af9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012afd:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012b01:	50                   	push   eax
c0012b02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b06:	e8 39 ff ff ff       	call   c0012a44 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012b0b:	50                   	push   eax
c0012b0c:	e8 ab ff ff ff       	call   c0012abc <Dbg::logs(char*)>
c0012b11:	83 c4 20             	add    esp,0x20
c0012b14:	c3                   	ret    

c0012b15 <Dbg::kprintf(char const*, ...)>:
c0012b15:	55                   	push   ebp
c0012b16:	57                   	push   edi
c0012b17:	56                   	push   esi
c0012b18:	53                   	push   ebx
c0012b19:	83 ec 0c             	sub    esp,0xc
c0012b1c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012b20:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012b24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b28:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012b2b:	84 c0                	test   al,al
c0012b2d:	74 4a                	je     c0012b79 <Dbg::kprintf(char const*, ...)+0x64>
c0012b2f:	31 db                	xor    ebx,ebx
c0012b31:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012b34:	3c 25                	cmp    al,0x25
c0012b36:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012b39:	0f 85 e4 00 00 00    	jne    c0012c23 <Dbg::kprintf(char const*, ...)+0x10e>
c0012b3f:	83 c3 02             	add    ebx,0x2
c0012b42:	8a 07                	mov    al,BYTE PTR [edi]
c0012b44:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012b47:	83 e8 25             	sub    eax,0x25
c0012b4a:	3c 53                	cmp    al,0x53
c0012b4c:	0f 87 ba 00 00 00    	ja     c0012c0c <Dbg::kprintf(char const*, ...)+0xf7>
c0012b52:	0f b6 c0             	movzx  eax,al
c0012b55:	ff 24 85 b4 a1 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5e4c]
c0012b5c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b60:	89 c8                	mov    eax,ecx
c0012b62:	83 c1 04             	add    ecx,0x4
c0012b65:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012b69:	ff 30                	push   DWORD PTR [eax]
c0012b6b:	e8 4c ff ff ff       	call   c0012abc <Dbg::logs(char*)>
c0012b70:	58                   	pop    eax
c0012b71:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012b75:	84 c0                	test   al,al
c0012b77:	75 b8                	jne    c0012b31 <Dbg::kprintf(char const*, ...)+0x1c>
c0012b79:	83 c4 0c             	add    esp,0xc
c0012b7c:	5b                   	pop    ebx
c0012b7d:	5e                   	pop    esi
c0012b7e:	5f                   	pop    edi
c0012b7f:	5d                   	pop    ebp
c0012b80:	c3                   	ret    
c0012b81:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012b85:	89 d0                	mov    eax,edx
c0012b87:	83 c2 04             	add    edx,0x4
c0012b8a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012b8e:	ff 30                	push   DWORD PTR [eax]
c0012b90:	e8 44 ff ff ff       	call   c0012ad9 <Dbg::logWriteInt(unsigned int)>
c0012b95:	58                   	pop    eax
c0012b96:	eb d9                	jmp    c0012b71 <Dbg::kprintf(char const*, ...)+0x5c>
c0012b98:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012b9c:	89 d0                	mov    eax,edx
c0012b9e:	83 c2 04             	add    edx,0x4
c0012ba1:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012ba4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ba8:	50                   	push   eax
c0012ba9:	e8 f7 fe ff ff       	call   c0012aa5 <Dbg::logc(char)>
c0012bae:	58                   	pop    eax
c0012baf:	eb c0                	jmp    c0012b71 <Dbg::kprintf(char const*, ...)+0x5c>
c0012bb1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012bb5:	89 c8                	mov    eax,ecx
c0012bb7:	83 c1 04             	add    ecx,0x4
c0012bba:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012bbe:	ff 30                	push   DWORD PTR [eax]
c0012bc0:	e8 14 ff ff ff       	call   c0012ad9 <Dbg::logWriteInt(unsigned int)>
c0012bc5:	5f                   	pop    edi
c0012bc6:	eb a9                	jmp    c0012b71 <Dbg::kprintf(char const*, ...)+0x5c>
c0012bc8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012bcc:	89 c8                	mov    eax,ecx
c0012bce:	83 c1 04             	add    ecx,0x4
c0012bd1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012bd5:	6a 10                	push   0x10
c0012bd7:	ff 30                	push   DWORD PTR [eax]
c0012bd9:	e8 18 ff ff ff       	call   c0012af6 <Dbg::logWriteIntBase(unsigned int, int)>
c0012bde:	59                   	pop    ecx
c0012bdf:	5f                   	pop    edi
c0012be0:	eb 8f                	jmp    c0012b71 <Dbg::kprintf(char const*, ...)+0x5c>
c0012be2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012be6:	89 d0                	mov    eax,edx
c0012be8:	83 c2 08             	add    edx,0x8
c0012beb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012bef:	6a 10                	push   0x10
c0012bf1:	ff 30                	push   DWORD PTR [eax]
c0012bf3:	e8 fe fe ff ff       	call   c0012af6 <Dbg::logWriteIntBase(unsigned int, int)>
c0012bf8:	58                   	pop    eax
c0012bf9:	5a                   	pop    edx
c0012bfa:	e9 72 ff ff ff       	jmp    c0012b71 <Dbg::kprintf(char const*, ...)+0x5c>
c0012bff:	6a 25                	push   0x25
c0012c01:	e8 9f fe ff ff       	call   c0012aa5 <Dbg::logc(char)>
c0012c06:	58                   	pop    eax
c0012c07:	e9 65 ff ff ff       	jmp    c0012b71 <Dbg::kprintf(char const*, ...)+0x5c>
c0012c0c:	6a 25                	push   0x25
c0012c0e:	e8 92 fe ff ff       	call   c0012aa5 <Dbg::logc(char)>
c0012c13:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012c16:	50                   	push   eax
c0012c17:	e8 89 fe ff ff       	call   c0012aa5 <Dbg::logc(char)>
c0012c1c:	5a                   	pop    edx
c0012c1d:	59                   	pop    ecx
c0012c1e:	e9 4e ff ff ff       	jmp    c0012b71 <Dbg::kprintf(char const*, ...)+0x5c>
c0012c23:	50                   	push   eax
c0012c24:	89 eb                	mov    ebx,ebp
c0012c26:	e8 7a fe ff ff       	call   c0012aa5 <Dbg::logc(char)>
c0012c2b:	89 fd                	mov    ebp,edi
c0012c2d:	58                   	pop    eax
c0012c2e:	e9 3e ff ff ff       	jmp    c0012b71 <Dbg::kprintf(char const*, ...)+0x5c>
c0012c33:	90                   	nop

c0012c34 <File::read(unsigned long long, void*, int*)>:
c0012c34:	53                   	push   ebx
c0012c35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012c3d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012c44:	3c 19                	cmp    al,0x19
c0012c46:	77 35                	ja     c0012c7d <File::read(unsigned long long, void*, int*)+0x49>
c0012c48:	8b 04 85 a0 e1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1e60]
c0012c4f:	85 c0                	test   eax,eax
c0012c51:	74 2a                	je     c0012c7d <File::read(unsigned long long, void*, int*)+0x49>
c0012c53:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012c59:	85 c0                	test   eax,eax
c0012c5b:	74 20                	je     c0012c7d <File::read(unsigned long long, void*, int*)+0x49>
c0012c5d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012c61:	74 21                	je     c0012c84 <File::read(unsigned long long, void*, int*)+0x50>
c0012c63:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012c65:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012c69:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012c6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012c73:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c77:	5b                   	pop    ebx
c0012c78:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012c7b:	ff e0                	jmp    eax
c0012c7d:	b8 0b 00 00 00       	mov    eax,0xb
c0012c82:	eb 05                	jmp    c0012c89 <File::read(unsigned long long, void*, int*)+0x55>
c0012c84:	b8 05 00 00 00       	mov    eax,0x5
c0012c89:	5b                   	pop    ebx
c0012c8a:	c3                   	ret    
c0012c8b:	90                   	nop

c0012c8c <File::write(unsigned long long, void*, int*)>:
c0012c8c:	53                   	push   ebx
c0012c8d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c91:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012c95:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012c9c:	3c 19                	cmp    al,0x19
c0012c9e:	77 35                	ja     c0012cd5 <File::write(unsigned long long, void*, int*)+0x49>
c0012ca0:	8b 04 85 a0 e1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1e60]
c0012ca7:	85 c0                	test   eax,eax
c0012ca9:	74 2a                	je     c0012cd5 <File::write(unsigned long long, void*, int*)+0x49>
c0012cab:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012cb1:	85 c0                	test   eax,eax
c0012cb3:	74 20                	je     c0012cd5 <File::write(unsigned long long, void*, int*)+0x49>
c0012cb5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012cb9:	74 21                	je     c0012cdc <File::write(unsigned long long, void*, int*)+0x50>
c0012cbb:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012cbd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012cc1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012cc7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012ccb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012ccf:	5b                   	pop    ebx
c0012cd0:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012cd3:	ff e0                	jmp    eax
c0012cd5:	b8 0b 00 00 00       	mov    eax,0xb
c0012cda:	eb 05                	jmp    c0012ce1 <File::write(unsigned long long, void*, int*)+0x55>
c0012cdc:	b8 05 00 00 00       	mov    eax,0x5
c0012ce1:	5b                   	pop    ebx
c0012ce2:	c3                   	ret    
c0012ce3:	90                   	nop

c0012ce4 <Directory::read(unsigned long long, void*, int*)>:
c0012ce4:	53                   	push   ebx
c0012ce5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ce9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012ced:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012cf4:	3c 19                	cmp    al,0x19
c0012cf6:	77 35                	ja     c0012d2d <Directory::read(unsigned long long, void*, int*)+0x49>
c0012cf8:	8b 04 85 a0 e1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1e60]
c0012cff:	85 c0                	test   eax,eax
c0012d01:	74 2a                	je     c0012d2d <Directory::read(unsigned long long, void*, int*)+0x49>
c0012d03:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d09:	85 c0                	test   eax,eax
c0012d0b:	74 20                	je     c0012d2d <Directory::read(unsigned long long, void*, int*)+0x49>
c0012d0d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d11:	74 21                	je     c0012d34 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012d13:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012d15:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012d19:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012d1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012d23:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012d27:	5b                   	pop    ebx
c0012d28:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012d2b:	ff e0                	jmp    eax
c0012d2d:	b8 0b 00 00 00       	mov    eax,0xb
c0012d32:	eb 05                	jmp    c0012d39 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012d34:	b8 05 00 00 00       	mov    eax,0x5
c0012d39:	5b                   	pop    ebx
c0012d3a:	c3                   	ret    
c0012d3b:	90                   	nop

c0012d3c <Directory::write(unsigned long long, void*, int*)>:
c0012d3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d40:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012d47:	b8 0b 00 00 00       	mov    eax,0xb
c0012d4c:	80 fa 19             	cmp    dl,0x19
c0012d4f:	77 18                	ja     c0012d69 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012d51:	8b 14 95 a0 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e60]
c0012d58:	85 d2                	test   edx,edx
c0012d5a:	74 0d                	je     c0012d69 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012d5c:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012d63:	19 c0                	sbb    eax,eax
c0012d65:	83 e0 0a             	and    eax,0xa
c0012d68:	40                   	inc    eax
c0012d69:	c3                   	ret    

c0012d6a <File::isAtty()>:
c0012d6a:	31 c0                	xor    eax,eax
c0012d6c:	c3                   	ret    
c0012d6d:	90                   	nop

c0012d6e <Directory::isAtty()>:
c0012d6e:	31 c0                	xor    eax,eax
c0012d70:	c3                   	ret    
c0012d71:	90                   	nop

c0012d72 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012d72:	b8 0a 00 00 00       	mov    eax,0xa
c0012d77:	c3                   	ret    

c0012d78 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012d78:	b8 0a 00 00 00       	mov    eax,0xa
c0012d7d:	c3                   	ret    

c0012d7e <File::~File()>:
c0012d7e:	83 ec 0c             	sub    esp,0xc
c0012d81:	ba 70 a3 02 c0       	mov    edx,0xc002a370
c0012d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d8a:	89 10                	mov    DWORD PTR [eax],edx
c0012d8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d90:	83 ec 0c             	sub    esp,0xc
c0012d93:	50                   	push   eax
c0012d94:	e8 2b eb ff ff       	call   c00118c4 <UnixFile::~UnixFile()>
c0012d99:	83 c4 10             	add    esp,0x10
c0012d9c:	90                   	nop
c0012d9d:	83 c4 0c             	add    esp,0xc
c0012da0:	c3                   	ret    
c0012da1:	90                   	nop

c0012da2 <File::~File()>:
c0012da2:	83 ec 0c             	sub    esp,0xc
c0012da5:	83 ec 0c             	sub    esp,0xc
c0012da8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dac:	e8 cd ff ff ff       	call   c0012d7e <File::~File()>
c0012db1:	83 c4 10             	add    esp,0x10
c0012db4:	83 ec 08             	sub    esp,0x8
c0012db7:	68 14 01 00 00       	push   0x114
c0012dbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dc0:	e8 70 fc ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0012dc5:	83 c4 10             	add    esp,0x10
c0012dc8:	83 c4 0c             	add    esp,0xc
c0012dcb:	c3                   	ret    

c0012dcc <Directory::~Directory()>:
c0012dcc:	83 ec 0c             	sub    esp,0xc
c0012dcf:	ba 8c a3 02 c0       	mov    edx,0xc002a38c
c0012dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dd8:	89 10                	mov    DWORD PTR [eax],edx
c0012dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dde:	83 ec 0c             	sub    esp,0xc
c0012de1:	50                   	push   eax
c0012de2:	e8 dd ea ff ff       	call   c00118c4 <UnixFile::~UnixFile()>
c0012de7:	83 c4 10             	add    esp,0x10
c0012dea:	90                   	nop
c0012deb:	83 c4 0c             	add    esp,0xc
c0012dee:	c3                   	ret    
c0012def:	90                   	nop

c0012df0 <Directory::~Directory()>:
c0012df0:	83 ec 0c             	sub    esp,0xc
c0012df3:	83 ec 0c             	sub    esp,0xc
c0012df6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dfa:	e8 cd ff ff ff       	call   c0012dcc <Directory::~Directory()>
c0012dff:	83 c4 10             	add    esp,0x10
c0012e02:	83 ec 08             	sub    esp,0x8
c0012e05:	68 14 01 00 00       	push   0x114
c0012e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e0e:	e8 22 fc ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0012e13:	83 c4 10             	add    esp,0x10
c0012e16:	83 c4 0c             	add    esp,0xc
c0012e19:	c3                   	ret    

c0012e1a <Filesystem::Filesystem()>:
c0012e1a:	ba 0c a3 02 c0       	mov    edx,0xc002a30c
c0012e1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e23:	89 10                	mov    DWORD PTR [eax],edx
c0012e25:	8b 15 08 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd08
c0012e2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e2f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012e32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e36:	a3 08 dd 02 c0       	mov    ds:0xc002dd08,eax
c0012e3b:	90                   	nop
c0012e3c:	c3                   	ret    
c0012e3d:	90                   	nop

c0012e3e <Filesystem::~Filesystem()>:
c0012e3e:	ba 0c a3 02 c0       	mov    edx,0xc002a30c
c0012e43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e47:	89 10                	mov    DWORD PTR [eax],edx
c0012e49:	90                   	nop
c0012e4a:	c3                   	ret    
c0012e4b:	90                   	nop

c0012e4c <Filesystem::~Filesystem()>:
c0012e4c:	83 ec 0c             	sub    esp,0xc
c0012e4f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012e53:	e8 e6 ff ff ff       	call   c0012e3e <Filesystem::~Filesystem()>
c0012e58:	83 c4 04             	add    esp,0x4
c0012e5b:	83 ec 08             	sub    esp,0x8
c0012e5e:	6a 08                	push   0x8
c0012e60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e64:	e8 cc fb ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0012e69:	83 c4 10             	add    esp,0x10
c0012e6c:	83 c4 0c             	add    esp,0xc
c0012e6f:	c3                   	ret    

c0012e70 <Fs::getcwd(Process*, char*, int)>:
c0012e70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012e74:	31 c0                	xor    eax,eax
c0012e76:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012e79:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012e7d:	7d 15                	jge    c0012e94 <Fs::getcwd(Process*, char*, int)+0x24>
c0012e7f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e83:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012e8a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012e8d:	84 c9                	test   cl,cl
c0012e8f:	74 06                	je     c0012e97 <Fs::getcwd(Process*, char*, int)+0x27>
c0012e91:	40                   	inc    eax
c0012e92:	eb e2                	jmp    c0012e76 <Fs::getcwd(Process*, char*, int)+0x6>
c0012e94:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012e97:	31 c0                	xor    eax,eax
c0012e99:	c3                   	ret    

c0012e9a <Fs::initVFS()>:
c0012e9a:	83 ec 18             	sub    esp,0x18
c0012e9d:	6a 08                	push   0x8
c0012e9f:	e8 a2 c9 ff ff       	call   c000f846 <malloc>
c0012ea4:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ea7:	e8 94 d9 00 00       	call   c0020840 <FAT::FAT()>
c0012eac:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012eb3:	e8 8e c9 ff ff       	call   c000f846 <malloc>
c0012eb8:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ebb:	e8 d8 eb 00 00       	call   c0021a98 <ISO9660::ISO9660()>
c0012ec0:	83 c4 1c             	add    esp,0x1c
c0012ec3:	c3                   	ret    

c0012ec4 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012ec4:	55                   	push   ebp
c0012ec5:	57                   	push   edi
c0012ec6:	56                   	push   esi
c0012ec7:	53                   	push   ebx
c0012ec8:	81 ec 10 04 00 00    	sub    esp,0x410
c0012ece:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012ed5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012edc:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012ee3:	68 00 04 00 00       	push   0x400
c0012ee8:	6a 00                	push   0x0
c0012eea:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012eee:	56                   	push   esi
c0012eef:	e8 84 d8 fe ff       	call   c0000778 <memset>
c0012ef4:	83 c4 10             	add    esp,0x10
c0012ef7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012efb:	75 0b                	jne    c0012f08 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012efd:	50                   	push   eax
c0012efe:	50                   	push   eax
c0012eff:	57                   	push   edi
c0012f00:	56                   	push   esi
c0012f01:	e8 2e d9 fe ff       	call   c0000834 <strcpy>
c0012f06:	eb 41                	jmp    c0012f49 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012f08:	8a 07                	mov    al,BYTE PTR [edi]
c0012f0a:	3c 5c                	cmp    al,0x5c
c0012f0c:	74 04                	je     c0012f12 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012f0e:	3c 2f                	cmp    al,0x2f
c0012f10:	75 18                	jne    c0012f2a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012f12:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012f15:	3c 60                	cmp    al,0x60
c0012f17:	7e 03                	jle    c0012f1c <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012f19:	83 e8 20             	sub    eax,0x20
c0012f1c:	88 04 24             	mov    BYTE PTR [esp],al
c0012f1f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012f26:	50                   	push   eax
c0012f27:	50                   	push   eax
c0012f28:	eb 18                	jmp    c0012f42 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012f2a:	50                   	push   eax
c0012f2b:	50                   	push   eax
c0012f2c:	55                   	push   ebp
c0012f2d:	56                   	push   esi
c0012f2e:	e8 01 d9 fe ff       	call   c0000834 <strcpy>
c0012f33:	5a                   	pop    edx
c0012f34:	59                   	pop    ecx
c0012f35:	68 6b b9 02 c0       	push   0xc002b96b
c0012f3a:	56                   	push   esi
c0012f3b:	e8 34 da fe ff       	call   c0000974 <strcat>
c0012f40:	5d                   	pop    ebp
c0012f41:	58                   	pop    eax
c0012f42:	57                   	push   edi
c0012f43:	56                   	push   esi
c0012f44:	e8 2b da fe ff       	call   c0000974 <strcat>
c0012f49:	83 c4 10             	add    esp,0x10
c0012f4c:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012f4f:	3c 60                	cmp    al,0x60
c0012f51:	7e 03                	jle    c0012f56 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012f53:	83 e8 20             	sub    eax,0x20
c0012f56:	88 04 24             	mov    BYTE PTR [esp],al
c0012f59:	88 03                	mov    BYTE PTR [ebx],al
c0012f5b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012f62:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012f68:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012f6c:	bf 03 00 00 00       	mov    edi,0x3
c0012f71:	b8 03 00 00 00       	mov    eax,0x3
c0012f76:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012f79:	84 d2                	test   dl,dl
c0012f7b:	0f 84 91 00 00 00    	je     c0013012 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012f81:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012f84:	80 fa 5c             	cmp    dl,0x5c
c0012f87:	74 05                	je     c0012f8e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012f89:	80 fa 2f             	cmp    dl,0x2f
c0012f8c:	75 12                	jne    c0012fa0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012f8e:	89 c5                	mov    ebp,eax
c0012f90:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012f95:	74 09                	je     c0012fa0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012f97:	40                   	inc    eax
c0012f98:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012f9c:	89 cf                	mov    edi,ecx
c0012f9e:	eb d6                	jmp    c0012f76 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012fa0:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012fa5:	75 5b                	jne    c0013002 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012fa7:	80 fa 2e             	cmp    dl,0x2e
c0012faa:	75 56                	jne    c0013002 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012fac:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012fb0:	74 19                	je     c0012fcb <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012fb2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012fb7:	74 53                	je     c001300c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012fb9:	89 f9                	mov    ecx,edi
c0012fbb:	41                   	inc    ecx
c0012fbc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012fbf:	80 fa 2f             	cmp    dl,0x2f
c0012fc2:	74 f7                	je     c0012fbb <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012fc4:	80 fa 5c             	cmp    dl,0x5c
c0012fc7:	74 f2                	je     c0012fbb <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012fc9:	eb d1                	jmp    c0012f9c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012fcb:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012fd0:	74 3a                	je     c001300c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012fd2:	83 f8 03             	cmp    eax,0x3
c0012fd5:	74 c5                	je     c0012f9c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012fd7:	41                   	inc    ecx
c0012fd8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012fdb:	80 fa 2f             	cmp    dl,0x2f
c0012fde:	74 f7                	je     c0012fd7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012fe0:	80 fa 5c             	cmp    dl,0x5c
c0012fe3:	74 f2                	je     c0012fd7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012fe5:	48                   	dec    eax
c0012fe6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012fea:	75 06                	jne    c0012ff2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012fec:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ff0:	eb f3                	jmp    c0012fe5 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012ff2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012ff6:	74 07                	je     c0012fff <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012ff8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ffc:	48                   	dec    eax
c0012ffd:	eb f3                	jmp    c0012ff2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012fff:	40                   	inc    eax
c0013000:	eb 9a                	jmp    c0012f9c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013002:	80 fa 2f             	cmp    dl,0x2f
c0013005:	74 95                	je     c0012f9c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013007:	80 fa 5c             	cmp    dl,0x5c
c001300a:	74 90                	je     c0012f9c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001300c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c001300f:	40                   	inc    eax
c0013010:	eb 8a                	jmp    c0012f9c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013012:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013016:	83 ec 0c             	sub    esp,0xc
c0013019:	53                   	push   ebx
c001301a:	e8 75 d7 fe ff       	call   c0000794 <strlen>
c001301f:	83 c4 10             	add    esp,0x10
c0013022:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0013027:	75 26                	jne    c001304f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013029:	83 ec 0c             	sub    esp,0xc
c001302c:	53                   	push   ebx
c001302d:	e8 62 d7 fe ff       	call   c0000794 <strlen>
c0013032:	83 c4 10             	add    esp,0x10
c0013035:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001303a:	74 26                	je     c0013062 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c001303c:	83 ec 0c             	sub    esp,0xc
c001303f:	53                   	push   ebx
c0013040:	e8 4f d7 fe ff       	call   c0000794 <strlen>
c0013045:	83 c4 10             	add    esp,0x10
c0013048:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001304d:	eb c7                	jmp    c0013016 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c001304f:	83 ec 0c             	sub    esp,0xc
c0013052:	53                   	push   ebx
c0013053:	e8 3c d7 fe ff       	call   c0000794 <strlen>
c0013058:	83 c4 10             	add    esp,0x10
c001305b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013060:	74 c7                	je     c0013029 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013062:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013068:	5b                   	pop    ebx
c0013069:	5e                   	pop    esi
c001306a:	5f                   	pop    edi
c001306b:	5d                   	pop    ebp
c001306c:	c3                   	ret    
c001306d:	90                   	nop

c001306e <File::File(char const*, Process*)>:
c001306e:	83 ec 0c             	sub    esp,0xc
c0013071:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013075:	83 ec 08             	sub    esp,0x8
c0013078:	6a 00                	push   0x0
c001307a:	50                   	push   eax
c001307b:	e8 62 e6 ff ff       	call   c00116e2 <UnixFile::UnixFile(int)>
c0013080:	83 c4 10             	add    esp,0x10
c0013083:	ba 70 a3 02 c0       	mov    edx,0xc002a370
c0013088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001308c:	89 10                	mov    DWORD PTR [eax],edx
c001308e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013092:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001309c:	83 c0 0d             	add    eax,0xd
c001309f:	83 ec 04             	sub    esp,0x4
c00130a2:	52                   	push   edx
c00130a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130a7:	50                   	push   eax
c00130a8:	e8 17 fe ff ff       	call   c0012ec4 <Fs::standardiseFiles(char*, char const*, char const*)>
c00130ad:	83 c4 10             	add    esp,0x10
c00130b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130b4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00130b7:	8d 50 bf             	lea    edx,[eax-0x41]
c00130ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130be:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00130c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130c8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00130cc:	90                   	nop
c00130cd:	83 c4 0c             	add    esp,0xc
c00130d0:	c3                   	ret    
c00130d1:	90                   	nop

c00130d2 <File::open(FileOpenMode)>:
c00130d2:	53                   	push   ebx
c00130d3:	b8 0b 00 00 00       	mov    eax,0xb
c00130d8:	83 ec 08             	sub    esp,0x8
c00130db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00130df:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00130e6:	80 fa 19             	cmp    dl,0x19
c00130e9:	77 40                	ja     c001312b <File::open(FileOpenMode)+0x59>
c00130eb:	8b 14 95 a0 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e60]
c00130f2:	85 d2                	test   edx,edx
c00130f4:	74 35                	je     c001312b <File::open(FileOpenMode)+0x59>
c00130f6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00130fc:	85 d2                	test   edx,edx
c00130fe:	74 2b                	je     c001312b <File::open(FileOpenMode)+0x59>
c0013100:	b8 06 00 00 00       	mov    eax,0x6
c0013105:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013109:	75 20                	jne    c001312b <File::open(FileOpenMode)+0x59>
c001310b:	8b 02                	mov    eax,DWORD PTR [edx]
c001310d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013113:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013117:	51                   	push   ecx
c0013118:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001311b:	51                   	push   ecx
c001311c:	52                   	push   edx
c001311d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013120:	83 c4 10             	add    esp,0x10
c0013123:	85 c0                	test   eax,eax
c0013125:	75 04                	jne    c001312b <File::open(FileOpenMode)+0x59>
c0013127:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001312b:	83 c4 08             	add    esp,0x8
c001312e:	5b                   	pop    ebx
c001312f:	c3                   	ret    

c0013130 <File::close()>:
c0013130:	53                   	push   ebx
c0013131:	b8 0b 00 00 00       	mov    eax,0xb
c0013136:	83 ec 08             	sub    esp,0x8
c0013139:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001313d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013144:	80 fa 19             	cmp    dl,0x19
c0013147:	77 41                	ja     c001318a <File::close()+0x5a>
c0013149:	8b 1c 95 a0 e1 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1e60]
c0013150:	85 db                	test   ebx,ebx
c0013152:	74 36                	je     c001318a <File::close()+0x5a>
c0013154:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001315b:	74 2d                	je     c001318a <File::close()+0x5a>
c001315d:	b8 05 00 00 00       	mov    eax,0x5
c0013162:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013166:	74 22                	je     c001318a <File::close()+0x5a>
c0013168:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001316c:	8b 04 95 a0 e1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1e60]
c0013173:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013179:	53                   	push   ebx
c001317a:	53                   	push   ebx
c001317b:	8b 10                	mov    edx,DWORD PTR [eax]
c001317d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013183:	50                   	push   eax
c0013184:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013187:	83 c4 10             	add    esp,0x10
c001318a:	83 c4 08             	add    esp,0x8
c001318d:	5b                   	pop    ebx
c001318e:	c3                   	ret    
c001318f:	90                   	nop

c0013190 <File::seek(unsigned long long)>:
c0013190:	56                   	push   esi
c0013191:	53                   	push   ebx
c0013192:	b8 0b 00 00 00       	mov    eax,0xb
c0013197:	51                   	push   ecx
c0013198:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001319c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00131a0:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00131a7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00131ab:	80 fa 19             	cmp    dl,0x19
c00131ae:	77 31                	ja     c00131e1 <File::seek(unsigned long long)+0x51>
c00131b0:	8b 14 95 a0 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e60]
c00131b7:	85 d2                	test   edx,edx
c00131b9:	74 26                	je     c00131e1 <File::seek(unsigned long long)+0x51>
c00131bb:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00131c1:	85 d2                	test   edx,edx
c00131c3:	74 1c                	je     c00131e1 <File::seek(unsigned long long)+0x51>
c00131c5:	b8 05 00 00 00       	mov    eax,0x5
c00131ca:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00131ce:	74 11                	je     c00131e1 <File::seek(unsigned long long)+0x51>
c00131d0:	8b 02                	mov    eax,DWORD PTR [edx]
c00131d2:	53                   	push   ebx
c00131d3:	51                   	push   ecx
c00131d4:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00131da:	52                   	push   edx
c00131db:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00131de:	83 c4 10             	add    esp,0x10
c00131e1:	5a                   	pop    edx
c00131e2:	5b                   	pop    ebx
c00131e3:	5e                   	pop    esi
c00131e4:	c3                   	ret    
c00131e5:	90                   	nop

c00131e6 <File::tell(unsigned long long*)>:
c00131e6:	83 ec 0c             	sub    esp,0xc
c00131e9:	b8 0b 00 00 00       	mov    eax,0xb
c00131ee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00131f2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00131f9:	80 fa 19             	cmp    dl,0x19
c00131fc:	77 34                	ja     c0013232 <File::tell(unsigned long long*)+0x4c>
c00131fe:	8b 14 95 a0 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e60]
c0013205:	85 d2                	test   edx,edx
c0013207:	74 29                	je     c0013232 <File::tell(unsigned long long*)+0x4c>
c0013209:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001320f:	85 d2                	test   edx,edx
c0013211:	74 1f                	je     c0013232 <File::tell(unsigned long long*)+0x4c>
c0013213:	b8 05 00 00 00       	mov    eax,0x5
c0013218:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001321c:	74 14                	je     c0013232 <File::tell(unsigned long long*)+0x4c>
c001321e:	50                   	push   eax
c001321f:	8b 02                	mov    eax,DWORD PTR [edx]
c0013221:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013225:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001322b:	52                   	push   edx
c001322c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001322f:	83 c4 10             	add    esp,0x10
c0013232:	83 c4 0c             	add    esp,0xc
c0013235:	c3                   	ret    

c0013236 <File::rewind()>:
c0013236:	83 ec 10             	sub    esp,0x10
c0013239:	6a 00                	push   0x0
c001323b:	6a 00                	push   0x0
c001323d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013241:	e8 4a ff ff ff       	call   c0013190 <File::seek(unsigned long long)>
c0013246:	83 c4 1c             	add    esp,0x1c
c0013249:	c3                   	ret    

c001324a <File::unlink()>:
c001324a:	83 ec 0c             	sub    esp,0xc
c001324d:	b8 0b 00 00 00       	mov    eax,0xb
c0013252:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013256:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001325d:	80 f9 19             	cmp    cl,0x19
c0013260:	77 2f                	ja     c0013291 <File::unlink()+0x47>
c0013262:	8b 0c 8d a0 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1e60]
c0013269:	85 c9                	test   ecx,ecx
c001326b:	74 24                	je     c0013291 <File::unlink()+0x47>
c001326d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013273:	85 c9                	test   ecx,ecx
c0013275:	74 1a                	je     c0013291 <File::unlink()+0x47>
c0013277:	b8 06 00 00 00       	mov    eax,0x6
c001327c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013280:	75 0f                	jne    c0013291 <File::unlink()+0x47>
c0013282:	83 c2 0d             	add    edx,0xd
c0013285:	50                   	push   eax
c0013286:	50                   	push   eax
c0013287:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013289:	52                   	push   edx
c001328a:	51                   	push   ecx
c001328b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001328e:	83 c4 10             	add    esp,0x10
c0013291:	83 c4 0c             	add    esp,0xc
c0013294:	c3                   	ret    
c0013295:	90                   	nop

c0013296 <File::rename(char const*)>:
c0013296:	83 ec 0c             	sub    esp,0xc
c0013299:	b8 0b 00 00 00       	mov    eax,0xb
c001329e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132a2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132a9:	80 f9 19             	cmp    cl,0x19
c00132ac:	77 32                	ja     c00132e0 <File::rename(char const*)+0x4a>
c00132ae:	8b 0c 8d a0 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1e60]
c00132b5:	85 c9                	test   ecx,ecx
c00132b7:	74 27                	je     c00132e0 <File::rename(char const*)+0x4a>
c00132b9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132bf:	85 c9                	test   ecx,ecx
c00132c1:	74 1d                	je     c00132e0 <File::rename(char const*)+0x4a>
c00132c3:	b8 06 00 00 00       	mov    eax,0x6
c00132c8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132cc:	75 12                	jne    c00132e0 <File::rename(char const*)+0x4a>
c00132ce:	83 c2 0d             	add    edx,0xd
c00132d1:	50                   	push   eax
c00132d2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00132d8:	52                   	push   edx
c00132d9:	51                   	push   ecx
c00132da:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00132dd:	83 c4 10             	add    esp,0x10
c00132e0:	83 c4 0c             	add    esp,0xc
c00132e3:	c3                   	ret    

c00132e4 <File::chfatattr(unsigned char, unsigned char)>:
c00132e4:	57                   	push   edi
c00132e5:	b8 0b 00 00 00       	mov    eax,0xb
c00132ea:	56                   	push   esi
c00132eb:	53                   	push   ebx
c00132ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132f0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00132f4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132fb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00132ff:	80 f9 19             	cmp    cl,0x19
c0013302:	77 37                	ja     c001333b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013304:	8b 0c 8d a0 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1e60]
c001330b:	85 c9                	test   ecx,ecx
c001330d:	74 2c                	je     c001333b <File::chfatattr(unsigned char, unsigned char)+0x57>
c001330f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013315:	85 c9                	test   ecx,ecx
c0013317:	74 22                	je     c001333b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013319:	b8 06 00 00 00       	mov    eax,0x6
c001331e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013322:	75 17                	jne    c001333b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013324:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013326:	89 f0                	mov    eax,esi
c0013328:	83 c2 0d             	add    edx,0xd
c001332b:	0f b6 f0             	movzx  esi,al
c001332e:	0f b6 db             	movzx  ebx,bl
c0013331:	56                   	push   esi
c0013332:	53                   	push   ebx
c0013333:	52                   	push   edx
c0013334:	51                   	push   ecx
c0013335:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013338:	83 c4 10             	add    esp,0x10
c001333b:	5b                   	pop    ebx
c001333c:	5e                   	pop    esi
c001333d:	5f                   	pop    edi
c001333e:	c3                   	ret    
c001333f:	90                   	nop

c0013340 <File::exists()>:
c0013340:	83 ec 0c             	sub    esp,0xc
c0013343:	31 c0                	xor    eax,eax
c0013345:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013349:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013350:	80 f9 19             	cmp    cl,0x19
c0013353:	77 24                	ja     c0013379 <File::exists()+0x39>
c0013355:	8b 0c 8d a0 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1e60]
c001335c:	85 c9                	test   ecx,ecx
c001335e:	74 19                	je     c0013379 <File::exists()+0x39>
c0013360:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013366:	85 c9                	test   ecx,ecx
c0013368:	74 0f                	je     c0013379 <File::exists()+0x39>
c001336a:	83 c2 0d             	add    edx,0xd
c001336d:	50                   	push   eax
c001336e:	50                   	push   eax
c001336f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013371:	52                   	push   edx
c0013372:	51                   	push   ecx
c0013373:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013376:	83 c4 10             	add    esp,0x10
c0013379:	83 c4 0c             	add    esp,0xc
c001337c:	c3                   	ret    
c001337d:	90                   	nop

c001337e <File::stat(unsigned long long*, bool*)>:
c001337e:	56                   	push   esi
c001337f:	53                   	push   ebx
c0013380:	50                   	push   eax
c0013381:	b8 0b 00 00 00       	mov    eax,0xb
c0013386:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001338a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001338e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013395:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013399:	80 f9 19             	cmp    cl,0x19
c001339c:	77 3d                	ja     c00133db <File::stat(unsigned long long*, bool*)+0x5d>
c001339e:	8b 0c 8d a0 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1e60]
c00133a5:	85 c9                	test   ecx,ecx
c00133a7:	74 32                	je     c00133db <File::stat(unsigned long long*, bool*)+0x5d>
c00133a9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133af:	85 c9                	test   ecx,ecx
c00133b1:	74 28                	je     c00133db <File::stat(unsigned long long*, bool*)+0x5d>
c00133b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133b5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00133b9:	74 13                	je     c00133ce <File::stat(unsigned long long*, bool*)+0x50>
c00133bb:	83 ec 04             	sub    esp,0x4
c00133be:	56                   	push   esi
c00133bf:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00133c5:	51                   	push   ecx
c00133c6:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00133c9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00133cc:	eb 0a                	jmp    c00133d8 <File::stat(unsigned long long*, bool*)+0x5a>
c00133ce:	53                   	push   ebx
c00133cf:	83 c2 0d             	add    edx,0xd
c00133d2:	56                   	push   esi
c00133d3:	52                   	push   edx
c00133d4:	51                   	push   ecx
c00133d5:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00133d8:	83 c4 10             	add    esp,0x10
c00133db:	5a                   	pop    edx
c00133dc:	5b                   	pop    ebx
c00133dd:	5e                   	pop    esi
c00133de:	c3                   	ret    

c00133df <Fs::setcwd(Process*, char*)>:
c00133df:	55                   	push   ebp
c00133e0:	57                   	push   edi
c00133e1:	56                   	push   esi
c00133e2:	53                   	push   ebx
c00133e3:	81 ec 20 02 00 00    	sub    esp,0x220
c00133e9:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00133f0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00133f6:	57                   	push   edi
c00133f7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00133fe:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013402:	56                   	push   esi
c0013403:	e8 bc fa ff ff       	call   c0012ec4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013408:	89 34 24             	mov    DWORD PTR [esp],esi
c001340b:	e8 84 d3 fe ff       	call   c0000794 <strlen>
c0013410:	83 c4 10             	add    esp,0x10
c0013413:	83 f8 02             	cmp    eax,0x2
c0013416:	77 17                	ja     c001342f <Fs::setcwd(Process*, char*)+0x50>
c0013418:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c001341d:	83 e8 41             	sub    eax,0x41
c0013420:	83 f8 19             	cmp    eax,0x19
c0013423:	76 24                	jbe    c0013449 <Fs::setcwd(Process*, char*)+0x6a>
c0013425:	b8 03 00 00 00       	mov    eax,0x3
c001342a:	e9 e0 00 00 00       	jmp    c001350f <Fs::setcwd(Process*, char*)+0x130>
c001342f:	83 ec 0c             	sub    esp,0xc
c0013432:	56                   	push   esi
c0013433:	e8 5c d3 fe ff       	call   c0000794 <strlen>
c0013438:	83 c4 10             	add    esp,0x10
c001343b:	83 f8 03             	cmp    eax,0x3
c001343e:	75 34                	jne    c0013474 <Fs::setcwd(Process*, char*)+0x95>
c0013440:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013445:	75 2d                	jne    c0013474 <Fs::setcwd(Process*, char*)+0x95>
c0013447:	eb cf                	jmp    c0013418 <Fs::setcwd(Process*, char*)+0x39>
c0013449:	8b 14 85 a0 e1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1e60]
c0013450:	b8 05 00 00 00       	mov    eax,0x5
c0013455:	85 d2                	test   edx,edx
c0013457:	0f 84 b2 00 00 00    	je     c001350f <Fs::setcwd(Process*, char*)+0x130>
c001345d:	b8 06 00 00 00       	mov    eax,0x6
c0013462:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013469:	0f 85 92 00 00 00    	jne    c0013501 <Fs::setcwd(Process*, char*)+0x122>
c001346f:	e9 9b 00 00 00       	jmp    c001350f <Fs::setcwd(Process*, char*)+0x130>
c0013474:	83 ec 0c             	sub    esp,0xc
c0013477:	68 14 01 00 00       	push   0x114
c001347c:	e8 c5 c3 ff ff       	call   c000f846 <malloc>
c0013481:	83 c4 0c             	add    esp,0xc
c0013484:	89 c3                	mov    ebx,eax
c0013486:	55                   	push   ebp
c0013487:	56                   	push   esi
c0013488:	50                   	push   eax
c0013489:	e8 e0 fb ff ff       	call   c001306e <File::File(char const*, Process*)>
c001348e:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013493:	83 c4 0c             	add    esp,0xc
c0013496:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001349a:	50                   	push   eax
c001349b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001349f:	50                   	push   eax
c00134a0:	53                   	push   ebx
c00134a1:	e8 d8 fe ff ff       	call   c001337e <File::stat(unsigned long long*, bool*)>
c00134a6:	83 c4 10             	add    esp,0x10
c00134a9:	83 f8 02             	cmp    eax,0x2
c00134ac:	74 04                	je     c00134b2 <Fs::setcwd(Process*, char*)+0xd3>
c00134ae:	85 c0                	test   eax,eax
c00134b0:	74 1c                	je     c00134ce <Fs::setcwd(Process*, char*)+0xef>
c00134b2:	b8 01 00 00 00       	mov    eax,0x1
c00134b7:	85 db                	test   ebx,ebx
c00134b9:	74 54                	je     c001350f <Fs::setcwd(Process*, char*)+0x130>
c00134bb:	83 ec 0c             	sub    esp,0xc
c00134be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134c0:	53                   	push   ebx
c00134c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134c4:	83 c4 10             	add    esp,0x10
c00134c7:	b8 01 00 00 00       	mov    eax,0x1
c00134cc:	eb 41                	jmp    c001350f <Fs::setcwd(Process*, char*)+0x130>
c00134ce:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00134d3:	75 1c                	jne    c00134f1 <Fs::setcwd(Process*, char*)+0x112>
c00134d5:	b8 02 00 00 00       	mov    eax,0x2
c00134da:	85 db                	test   ebx,ebx
c00134dc:	74 31                	je     c001350f <Fs::setcwd(Process*, char*)+0x130>
c00134de:	83 ec 0c             	sub    esp,0xc
c00134e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134e3:	53                   	push   ebx
c00134e4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134e7:	83 c4 10             	add    esp,0x10
c00134ea:	b8 02 00 00 00       	mov    eax,0x2
c00134ef:	eb 1e                	jmp    c001350f <Fs::setcwd(Process*, char*)+0x130>
c00134f1:	85 db                	test   ebx,ebx
c00134f3:	74 0c                	je     c0013501 <Fs::setcwd(Process*, char*)+0x122>
c00134f5:	83 ec 0c             	sub    esp,0xc
c00134f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134fa:	53                   	push   ebx
c00134fb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00134fe:	83 c4 10             	add    esp,0x10
c0013501:	50                   	push   eax
c0013502:	50                   	push   eax
c0013503:	56                   	push   esi
c0013504:	57                   	push   edi
c0013505:	e8 2a d3 fe ff       	call   c0000834 <strcpy>
c001350a:	83 c4 10             	add    esp,0x10
c001350d:	31 c0                	xor    eax,eax
c001350f:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013515:	5b                   	pop    ebx
c0013516:	5e                   	pop    esi
c0013517:	5f                   	pop    edi
c0013518:	5d                   	pop    ebp
c0013519:	c3                   	ret    

c001351a <Directory::Directory(char const*, Process*)>:
c001351a:	83 ec 0c             	sub    esp,0xc
c001351d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013521:	83 ec 08             	sub    esp,0x8
c0013524:	6a 00                	push   0x0
c0013526:	50                   	push   eax
c0013527:	e8 b6 e1 ff ff       	call   c00116e2 <UnixFile::UnixFile(int)>
c001352c:	83 c4 10             	add    esp,0x10
c001352f:	ba 8c a3 02 c0       	mov    edx,0xc002a38c
c0013534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013538:	89 10                	mov    DWORD PTR [eax],edx
c001353a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001353e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013548:	83 c0 0d             	add    eax,0xd
c001354b:	83 ec 04             	sub    esp,0x4
c001354e:	52                   	push   edx
c001354f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013553:	50                   	push   eax
c0013554:	e8 6b f9 ff ff       	call   c0012ec4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013559:	83 c4 10             	add    esp,0x10
c001355c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013560:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013563:	8d 50 bf             	lea    edx,[eax-0x41]
c0013566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001356a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013574:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013578:	90                   	nop
c0013579:	83 c4 0c             	add    esp,0xc
c001357c:	c3                   	ret    
c001357d:	90                   	nop

c001357e <Directory::open()>:
c001357e:	53                   	push   ebx
c001357f:	b8 0b 00 00 00       	mov    eax,0xb
c0013584:	83 ec 08             	sub    esp,0x8
c0013587:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001358b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013592:	80 fa 19             	cmp    dl,0x19
c0013595:	77 3d                	ja     c00135d4 <Directory::open()+0x56>
c0013597:	8b 14 95 a0 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e60]
c001359e:	85 d2                	test   edx,edx
c00135a0:	74 32                	je     c00135d4 <Directory::open()+0x56>
c00135a2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135a8:	85 d2                	test   edx,edx
c00135aa:	74 28                	je     c00135d4 <Directory::open()+0x56>
c00135ac:	b8 06 00 00 00       	mov    eax,0x6
c00135b1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00135b5:	75 1d                	jne    c00135d4 <Directory::open()+0x56>
c00135b7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00135bd:	50                   	push   eax
c00135be:	8b 02                	mov    eax,DWORD PTR [edx]
c00135c0:	51                   	push   ecx
c00135c1:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00135c4:	51                   	push   ecx
c00135c5:	52                   	push   edx
c00135c6:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00135c9:	83 c4 10             	add    esp,0x10
c00135cc:	85 c0                	test   eax,eax
c00135ce:	75 04                	jne    c00135d4 <Directory::open()+0x56>
c00135d0:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00135d4:	83 c4 08             	add    esp,0x8
c00135d7:	5b                   	pop    ebx
c00135d8:	c3                   	ret    
c00135d9:	90                   	nop

c00135da <Directory::close()>:
c00135da:	53                   	push   ebx
c00135db:	b8 0b 00 00 00       	mov    eax,0xb
c00135e0:	83 ec 08             	sub    esp,0x8
c00135e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135e7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135ee:	80 fa 19             	cmp    dl,0x19
c00135f1:	77 41                	ja     c0013634 <Directory::close()+0x5a>
c00135f3:	8b 1c 95 a0 e1 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1e60]
c00135fa:	85 db                	test   ebx,ebx
c00135fc:	74 36                	je     c0013634 <Directory::close()+0x5a>
c00135fe:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013605:	74 2d                	je     c0013634 <Directory::close()+0x5a>
c0013607:	b8 05 00 00 00       	mov    eax,0x5
c001360c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013610:	74 22                	je     c0013634 <Directory::close()+0x5a>
c0013612:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013616:	8b 04 95 a0 e1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1e60]
c001361d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013623:	53                   	push   ebx
c0013624:	53                   	push   ebx
c0013625:	8b 10                	mov    edx,DWORD PTR [eax]
c0013627:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001362d:	50                   	push   eax
c001362e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013631:	83 c4 10             	add    esp,0x10
c0013634:	83 c4 08             	add    esp,0x8
c0013637:	5b                   	pop    ebx
c0013638:	c3                   	ret    
c0013639:	90                   	nop

c001363a <Directory::unlink()>:
c001363a:	83 ec 0c             	sub    esp,0xc
c001363d:	b8 0b 00 00 00       	mov    eax,0xb
c0013642:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013646:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001364d:	80 f9 19             	cmp    cl,0x19
c0013650:	77 2f                	ja     c0013681 <Directory::unlink()+0x47>
c0013652:	8b 0c 8d a0 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1e60]
c0013659:	85 c9                	test   ecx,ecx
c001365b:	74 24                	je     c0013681 <Directory::unlink()+0x47>
c001365d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013663:	85 c9                	test   ecx,ecx
c0013665:	74 1a                	je     c0013681 <Directory::unlink()+0x47>
c0013667:	b8 06 00 00 00       	mov    eax,0x6
c001366c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013670:	75 0f                	jne    c0013681 <Directory::unlink()+0x47>
c0013672:	83 c2 0d             	add    edx,0xd
c0013675:	50                   	push   eax
c0013676:	50                   	push   eax
c0013677:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013679:	52                   	push   edx
c001367a:	51                   	push   ecx
c001367b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001367e:	83 c4 10             	add    esp,0x10
c0013681:	83 c4 0c             	add    esp,0xc
c0013684:	c3                   	ret    
c0013685:	90                   	nop

c0013686 <Directory::rename(char const*)>:
c0013686:	83 ec 0c             	sub    esp,0xc
c0013689:	b8 0b 00 00 00       	mov    eax,0xb
c001368e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013692:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013699:	80 f9 19             	cmp    cl,0x19
c001369c:	77 32                	ja     c00136d0 <Directory::rename(char const*)+0x4a>
c001369e:	8b 0c 8d a0 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1e60]
c00136a5:	85 c9                	test   ecx,ecx
c00136a7:	74 27                	je     c00136d0 <Directory::rename(char const*)+0x4a>
c00136a9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136af:	85 c9                	test   ecx,ecx
c00136b1:	74 1d                	je     c00136d0 <Directory::rename(char const*)+0x4a>
c00136b3:	b8 06 00 00 00       	mov    eax,0x6
c00136b8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136bc:	75 12                	jne    c00136d0 <Directory::rename(char const*)+0x4a>
c00136be:	83 c2 0d             	add    edx,0xd
c00136c1:	50                   	push   eax
c00136c2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136c8:	52                   	push   edx
c00136c9:	51                   	push   ecx
c00136ca:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00136cd:	83 c4 10             	add    esp,0x10
c00136d0:	83 c4 0c             	add    esp,0xc
c00136d3:	c3                   	ret    

c00136d4 <Directory::exists()>:
c00136d4:	83 ec 0c             	sub    esp,0xc
c00136d7:	31 c0                	xor    eax,eax
c00136d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136dd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136e4:	80 f9 19             	cmp    cl,0x19
c00136e7:	77 24                	ja     c001370d <Directory::exists()+0x39>
c00136e9:	8b 0c 8d a0 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1e60]
c00136f0:	85 c9                	test   ecx,ecx
c00136f2:	74 19                	je     c001370d <Directory::exists()+0x39>
c00136f4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136fa:	85 c9                	test   ecx,ecx
c00136fc:	74 0f                	je     c001370d <Directory::exists()+0x39>
c00136fe:	83 c2 0d             	add    edx,0xd
c0013701:	50                   	push   eax
c0013702:	50                   	push   eax
c0013703:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013705:	52                   	push   edx
c0013706:	51                   	push   ecx
c0013707:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001370a:	83 c4 10             	add    esp,0x10
c001370d:	83 c4 0c             	add    esp,0xc
c0013710:	c3                   	ret    
c0013711:	90                   	nop

c0013712 <Directory::read(dirent*)>:
c0013712:	83 ec 1c             	sub    esp,0x1c
c0013715:	b8 0b 00 00 00       	mov    eax,0xb
c001371a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001371e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013725:	80 fa 19             	cmp    dl,0x19
c0013728:	77 30                	ja     c001375a <Directory::read(dirent*)+0x48>
c001372a:	8b 14 95 a0 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1e60]
c0013731:	85 d2                	test   edx,edx
c0013733:	74 25                	je     c001375a <Directory::read(dirent*)+0x48>
c0013735:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001373c:	74 1c                	je     c001375a <Directory::read(dirent*)+0x48>
c001373e:	83 ec 0c             	sub    esp,0xc
c0013741:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013743:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013747:	52                   	push   edx
c0013748:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001374c:	6a 00                	push   0x0
c001374e:	68 10 01 00 00       	push   0x110
c0013753:	51                   	push   ecx
c0013754:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013757:	83 c4 20             	add    esp,0x20
c001375a:	83 c4 1c             	add    esp,0x1c
c001375d:	c3                   	ret    

c001375e <Directory::create()>:
c001375e:	83 ec 0c             	sub    esp,0xc
c0013761:	b8 0b 00 00 00       	mov    eax,0xb
c0013766:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001376a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013771:	80 f9 19             	cmp    cl,0x19
c0013774:	77 2f                	ja     c00137a5 <Directory::create()+0x47>
c0013776:	8b 0c 8d a0 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1e60]
c001377d:	85 c9                	test   ecx,ecx
c001377f:	74 24                	je     c00137a5 <Directory::create()+0x47>
c0013781:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013787:	85 c9                	test   ecx,ecx
c0013789:	74 1a                	je     c00137a5 <Directory::create()+0x47>
c001378b:	b8 06 00 00 00       	mov    eax,0x6
c0013790:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013794:	75 0f                	jne    c00137a5 <Directory::create()+0x47>
c0013796:	83 c2 0d             	add    edx,0xd
c0013799:	50                   	push   eax
c001379a:	50                   	push   eax
c001379b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001379d:	52                   	push   edx
c001379e:	51                   	push   ecx
c001379f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00137a2:	83 c4 10             	add    esp,0x10
c00137a5:	83 c4 0c             	add    esp,0xc
c00137a8:	c3                   	ret    
c00137a9:	90                   	nop

c00137aa <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00137aa:	b8 0a 00 00 00       	mov    eax,0xa
c00137af:	c3                   	ret    

c00137b0 <Bus::Bus(char const*)>:
c00137b0:	83 ec 0c             	sub    esp,0xc
c00137b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137b7:	83 ec 08             	sub    esp,0x8
c00137ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137be:	50                   	push   eax
c00137bf:	e8 68 09 00 00       	call   c001412c <Device::Device(char const*)>
c00137c4:	83 c4 10             	add    esp,0x10
c00137c7:	ba a8 a3 02 c0       	mov    edx,0xc002a3a8
c00137cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d0:	89 10                	mov    DWORD PTR [eax],edx
c00137d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00137e0:	90                   	nop
c00137e1:	83 c4 0c             	add    esp,0xc
c00137e4:	c3                   	ret    
c00137e5:	90                   	nop

c00137e6 <Bus::~Bus()>:
c00137e6:	83 ec 0c             	sub    esp,0xc
c00137e9:	ba a8 a3 02 c0       	mov    edx,0xc002a3a8
c00137ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137f2:	89 10                	mov    DWORD PTR [eax],edx
c00137f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137f8:	83 ec 0c             	sub    esp,0xc
c00137fb:	50                   	push   eax
c00137fc:	e8 0d 06 00 00       	call   c0013e0e <Device::~Device()>
c0013801:	83 c4 10             	add    esp,0x10
c0013804:	90                   	nop
c0013805:	83 c4 0c             	add    esp,0xc
c0013808:	c3                   	ret    
c0013809:	90                   	nop

c001380a <Bus::~Bus()>:
c001380a:	83 ec 0c             	sub    esp,0xc
c001380d:	83 ec 0c             	sub    esp,0xc
c0013810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013814:	e8 cd ff ff ff       	call   c00137e6 <Bus::~Bus()>
c0013819:	83 c4 10             	add    esp,0x10
c001381c:	83 ec 08             	sub    esp,0x8
c001381f:	68 58 01 00 00       	push   0x158
c0013824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013828:	e8 08 f2 ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c001382d:	83 c4 10             	add    esp,0x10
c0013830:	83 c4 0c             	add    esp,0xc
c0013833:	c3                   	ret    

c0013834 <Buzzer::Buzzer(char const*)>:
c0013834:	83 ec 0c             	sub    esp,0xc
c0013837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001383b:	83 ec 08             	sub    esp,0x8
c001383e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013842:	50                   	push   eax
c0013843:	e8 e4 08 00 00       	call   c001412c <Device::Device(char const*)>
c0013848:	83 c4 10             	add    esp,0x10
c001384b:	ba d4 a3 02 c0       	mov    edx,0xc002a3d4
c0013850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013854:	89 10                	mov    DWORD PTR [eax],edx
c0013856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001385a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013868:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013872:	90                   	nop
c0013873:	83 c4 0c             	add    esp,0xc
c0013876:	c3                   	ret    
c0013877:	90                   	nop

c0013878 <Buzzer::~Buzzer()>:
c0013878:	83 ec 0c             	sub    esp,0xc
c001387b:	ba d4 a3 02 c0       	mov    edx,0xc002a3d4
c0013880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013884:	89 10                	mov    DWORD PTR [eax],edx
c0013886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001388a:	83 ec 0c             	sub    esp,0xc
c001388d:	50                   	push   eax
c001388e:	e8 7b 05 00 00       	call   c0013e0e <Device::~Device()>
c0013893:	83 c4 10             	add    esp,0x10
c0013896:	90                   	nop
c0013897:	83 c4 0c             	add    esp,0xc
c001389a:	c3                   	ret    
c001389b:	90                   	nop

c001389c <Buzzer::~Buzzer()>:
c001389c:	83 ec 0c             	sub    esp,0xc
c001389f:	83 ec 0c             	sub    esp,0xc
c00138a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138a6:	e8 cd ff ff ff       	call   c0013878 <Buzzer::~Buzzer()>
c00138ab:	83 c4 10             	add    esp,0x10
c00138ae:	83 ec 08             	sub    esp,0x8
c00138b1:	68 5c 01 00 00       	push   0x15c
c00138b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138ba:	e8 76 f1 ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c00138bf:	83 c4 10             	add    esp,0x10
c00138c2:	83 c4 0c             	add    esp,0xc
c00138c5:	c3                   	ret    

c00138c6 <Buzzer::stop()>:
c00138c6:	83 ec 14             	sub    esp,0x14
c00138c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00138cd:	8b 10                	mov    edx,DWORD PTR [eax]
c00138cf:	6a 00                	push   0x0
c00138d1:	50                   	push   eax
c00138d2:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00138d5:	83 c4 1c             	add    esp,0x1c
c00138d8:	c3                   	ret    

c00138d9 <beepThread(void*)>:
c00138d9:	53                   	push   ebx
c00138da:	83 ec 08             	sub    esp,0x8
c00138dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138e1:	e8 e8 9d 00 00       	call   c001d6ce <unlockScheduler()>
c00138e6:	b8 40 42 0f 00       	mov    eax,0xf4240
c00138eb:	52                   	push   edx
c00138ec:	52                   	push   edx
c00138ed:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00138f3:	52                   	push   edx
c00138f4:	50                   	push   eax
c00138f5:	e8 22 a3 00 00       	call   c001dc1c <nanoSleep(unsigned long long)>
c00138fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138fd:	e8 c4 ff ff ff       	call   c00138c6 <Buzzer::stop()>
c0013902:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001390a:	83 c4 18             	add    esp,0x18
c001390d:	5b                   	pop    ebx
c001390e:	e9 4f a2 00 00       	jmp    c001db62 <blockTask(TaskState)>
c0013913:	90                   	nop

c0013914 <Buzzer::beep(int, int, bool)>:
c0013914:	57                   	push   edi
c0013915:	56                   	push   esi
c0013916:	53                   	push   ebx
c0013917:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001391b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001391f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013923:	52                   	push   edx
c0013924:	52                   	push   edx
c0013925:	8b 06                	mov    eax,DWORD PTR [esi]
c0013927:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001392b:	56                   	push   esi
c001392c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001392f:	83 c4 10             	add    esp,0x10
c0013932:	89 f8                	mov    eax,edi
c0013934:	84 c0                	test   al,al
c0013936:	74 1f                	je     c0013957 <Buzzer::beep(int, int, bool)+0x43>
c0013938:	50                   	push   eax
c0013939:	50                   	push   eax
c001393a:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013940:	99                   	cdq    
c0013941:	52                   	push   edx
c0013942:	50                   	push   eax
c0013943:	e8 d4 a2 00 00       	call   c001dc1c <nanoSleep(unsigned long long)>
c0013948:	83 c4 10             	add    esp,0x10
c001394b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001394f:	5b                   	pop    ebx
c0013950:	5e                   	pop    esi
c0013951:	5f                   	pop    edi
c0013952:	e9 6f ff ff ff       	jmp    c00138c6 <Buzzer::stop()>
c0013957:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001395d:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0013962:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001396a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001396e:	c7 44 24 14 d9 38 01 c0 	mov    DWORD PTR [esp+0x14],0xc00138d9
c0013976:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001397a:	5b                   	pop    ebx
c001397b:	5e                   	pop    esi
c001397c:	5f                   	pop    edi
c001397d:	e9 7c 9e 00 00       	jmp    c001d7fe <Process::createThread(void (*)(void*), void*, int)>

c0013982 <User::loadClockSettings(int)>:
c0013982:	53                   	push   ebx
c0013983:	83 ec 14             	sub    esp,0x14
c0013986:	68 14 01 00 00       	push   0x114
c001398b:	e8 b6 be ff ff       	call   c000f846 <malloc>
c0013990:	83 c4 0c             	add    esp,0xc
c0013993:	89 c3                	mov    ebx,eax
c0013995:	ff 35 f4 10 03 c0    	push   DWORD PTR ds:0xc00310f4
c001399b:	68 fc a3 02 c0       	push   0xc002a3fc
c00139a0:	50                   	push   eax
c00139a1:	e8 c8 f6 ff ff       	call   c001306e <File::File(char const*, Process*)>
c00139a6:	58                   	pop    eax
c00139a7:	5a                   	pop    edx
c00139a8:	6a 01                	push   0x1
c00139aa:	53                   	push   ebx
c00139ab:	e8 22 f7 ff ff       	call   c00130d2 <File::open(FileOpenMode)>
c00139b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00139b3:	e8 78 f7 ff ff       	call   c0013130 <File::close()>
c00139b8:	83 c4 10             	add    esp,0x10
c00139bb:	85 db                	test   ebx,ebx
c00139bd:	74 0f                	je     c00139ce <User::loadClockSettings(int)+0x4c>
c00139bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139c1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00139c5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00139c8:	83 c4 08             	add    esp,0x8
c00139cb:	5b                   	pop    ebx
c00139cc:	ff e0                	jmp    eax
c00139ce:	83 c4 08             	add    esp,0x8
c00139d1:	5b                   	pop    ebx
c00139d2:	c3                   	ret    
c00139d3:	90                   	nop

c00139d4 <Clock::Clock(char const*)>:
c00139d4:	83 ec 0c             	sub    esp,0xc
c00139d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139db:	83 ec 08             	sub    esp,0x8
c00139de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139e2:	50                   	push   eax
c00139e3:	e8 44 07 00 00       	call   c001412c <Device::Device(char const*)>
c00139e8:	83 c4 10             	add    esp,0x10
c00139eb:	ba 24 a4 02 c0       	mov    edx,0xc002a424
c00139f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139f4:	89 10                	mov    DWORD PTR [eax],edx
c00139f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139fa:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013a04:	90                   	nop
c0013a05:	83 c4 0c             	add    esp,0xc
c0013a08:	c3                   	ret    
c0013a09:	90                   	nop

c0013a0a <Clock::~Clock()>:
c0013a0a:	83 ec 0c             	sub    esp,0xc
c0013a0d:	ba 24 a4 02 c0       	mov    edx,0xc002a424
c0013a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a16:	89 10                	mov    DWORD PTR [eax],edx
c0013a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a1c:	83 ec 0c             	sub    esp,0xc
c0013a1f:	50                   	push   eax
c0013a20:	e8 e9 03 00 00       	call   c0013e0e <Device::~Device()>
c0013a25:	83 c4 10             	add    esp,0x10
c0013a28:	90                   	nop
c0013a29:	83 c4 0c             	add    esp,0xc
c0013a2c:	c3                   	ret    
c0013a2d:	90                   	nop

c0013a2e <Clock::~Clock()>:
c0013a2e:	83 ec 0c             	sub    esp,0xc
c0013a31:	83 ec 0c             	sub    esp,0xc
c0013a34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a38:	e8 cd ff ff ff       	call   c0013a0a <Clock::~Clock()>
c0013a3d:	83 c4 10             	add    esp,0x10
c0013a40:	83 ec 08             	sub    esp,0x8
c0013a43:	68 58 01 00 00       	push   0x158
c0013a48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a4c:	e8 e4 ef ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0013a51:	83 c4 10             	add    esp,0x10
c0013a54:	83 c4 0c             	add    esp,0xc
c0013a57:	c3                   	ret    

c0013a58 <Clock::timeInSecondsLocal()>:
c0013a58:	53                   	push   ebx
c0013a59:	83 ec 14             	sub    esp,0x14
c0013a5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a60:	8b 10                	mov    edx,DWORD PTR [eax]
c0013a62:	50                   	push   eax
c0013a63:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013a66:	0f b6 0d 10 dd 02 c0 	movzx  ecx,BYTE PTR ds:0xc002dd10
c0013a6d:	03 0d 14 dd 02 c0    	add    ecx,DWORD PTR ds:0xc002dd14
c0013a73:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a79:	89 cb                	mov    ebx,ecx
c0013a7b:	c1 fb 1f             	sar    ebx,0x1f
c0013a7e:	01 c8                	add    eax,ecx
c0013a80:	11 da                	adc    edx,ebx
c0013a82:	83 c4 10             	add    esp,0x10
c0013a85:	31 c9                	xor    ecx,ecx
c0013a87:	80 3d 11 dd 02 c0 00 	cmp    BYTE PTR ds:0xc002dd11,0x0
c0013a8e:	74 05                	je     c0013a95 <Clock::timeInSecondsLocal()+0x3d>
c0013a90:	b9 08 07 00 00       	mov    ecx,0x708
c0013a95:	31 db                	xor    ebx,ebx
c0013a97:	01 c8                	add    eax,ecx
c0013a99:	11 da                	adc    edx,ebx
c0013a9b:	83 c4 08             	add    esp,0x8
c0013a9e:	5b                   	pop    ebx
c0013a9f:	c3                   	ret    

c0013aa0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013aa0:	57                   	push   edi
c0013aa1:	56                   	push   esi
c0013aa2:	53                   	push   ebx
c0013aa3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013aa7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013aab:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013aad:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ab1:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013ab4:	0f b6 05 10 dd 02 c0 	movzx  eax,BYTE PTR ds:0xc002dd10
c0013abb:	03 05 14 dd 02 c0    	add    eax,DWORD PTR ds:0xc002dd14
c0013ac1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013ac7:	99                   	cdq    
c0013ac8:	29 c6                	sub    esi,eax
c0013aca:	19 d7                	sbb    edi,edx
c0013acc:	89 f0                	mov    eax,esi
c0013ace:	89 fa                	mov    edx,edi
c0013ad0:	31 f6                	xor    esi,esi
c0013ad2:	80 3d 11 dd 02 c0 00 	cmp    BYTE PTR ds:0xc002dd11,0x0
c0013ad9:	74 05                	je     c0013ae0 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013adb:	be 08 07 00 00       	mov    esi,0x708
c0013ae0:	31 ff                	xor    edi,edi
c0013ae2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013ae6:	29 f0                	sub    eax,esi
c0013ae8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013aec:	19 fa                	sbb    edx,edi
c0013aee:	89 d8                	mov    eax,ebx
c0013af0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013af4:	5b                   	pop    ebx
c0013af5:	5e                   	pop    esi
c0013af6:	5f                   	pop    edi
c0013af7:	ff e0                	jmp    eax

c0013af9 <datetimeToSeconds(datetime_t)>:
c0013af9:	55                   	push   ebp
c0013afa:	57                   	push   edi
c0013afb:	56                   	push   esi
c0013afc:	53                   	push   ebx
c0013afd:	83 ec 14             	sub    esp,0x14
c0013b00:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013b04:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013b08:	89 d3                	mov    ebx,edx
c0013b0a:	0f b6 c6             	movzx  eax,dh
c0013b0d:	c1 eb 10             	shr    ebx,0x10
c0013b10:	48                   	dec    eax
c0013b11:	66 81 eb 6c 07       	sub    bx,0x76c
c0013b16:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013b1a:	0f b6 f5             	movzx  esi,ch
c0013b1d:	89 cf                	mov    edi,ecx
c0013b1f:	6b f6 3c             	imul   esi,esi,0x3c
c0013b22:	c1 ef 10             	shr    edi,0x10
c0013b25:	0f b6 c9             	movzx  ecx,cl
c0013b28:	89 f8                	mov    eax,edi
c0013b2a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013b30:	0f b6 f8             	movzx  edi,al
c0013b33:	0f b6 d2             	movzx  edx,dl
c0013b36:	01 fe                	add    esi,edi
c0013b38:	01 f1                	add    ecx,esi
c0013b3a:	0f b7 f3             	movzx  esi,bx
c0013b3d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013b41:	c1 f9 1f             	sar    ecx,0x1f
c0013b44:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013b49:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013b4d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013b52:	8b 0c 8d 60 a4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5ba0]
c0013b59:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013b5d:	76 29                	jbe    c0013b88 <datetimeToSeconds(datetime_t)+0x8f>
c0013b5f:	f6 c3 03             	test   bl,0x3
c0013b62:	75 24                	jne    c0013b88 <datetimeToSeconds(datetime_t)+0x8f>
c0013b64:	31 d2                	xor    edx,edx
c0013b66:	bf 64 00 00 00       	mov    edi,0x64
c0013b6b:	89 d8                	mov    eax,ebx
c0013b6d:	66 f7 f7             	div    di
c0013b70:	66 85 d2             	test   dx,dx
c0013b73:	75 12                	jne    c0013b87 <datetimeToSeconds(datetime_t)+0x8e>
c0013b75:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013b7b:	bf 90 01 00 00       	mov    edi,0x190
c0013b80:	99                   	cdq    
c0013b81:	f7 ff                	idiv   edi
c0013b83:	85 d2                	test   edx,edx
c0013b85:	75 01                	jne    c0013b88 <datetimeToSeconds(datetime_t)+0x8f>
c0013b87:	41                   	inc    ecx
c0013b88:	66 83 fb 46          	cmp    bx,0x46
c0013b8c:	76 45                	jbe    c0013bd3 <datetimeToSeconds(datetime_t)+0xda>
c0013b8e:	bb 46 00 00 00       	mov    ebx,0x46
c0013b93:	bf 64 00 00 00       	mov    edi,0x64
c0013b98:	bd 90 01 00 00       	mov    ebp,0x190
c0013b9d:	b8 6d 01 00 00       	mov    eax,0x16d
c0013ba2:	f6 c3 03             	test   bl,0x3
c0013ba5:	75 23                	jne    c0013bca <datetimeToSeconds(datetime_t)+0xd1>
c0013ba7:	89 d8                	mov    eax,ebx
c0013ba9:	99                   	cdq    
c0013baa:	f7 ff                	idiv   edi
c0013bac:	b8 6e 01 00 00       	mov    eax,0x16e
c0013bb1:	85 d2                	test   edx,edx
c0013bb3:	75 15                	jne    c0013bca <datetimeToSeconds(datetime_t)+0xd1>
c0013bb5:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013bbb:	99                   	cdq    
c0013bbc:	f7 fd                	idiv   ebp
c0013bbe:	83 fa 01             	cmp    edx,0x1
c0013bc1:	19 c0                	sbb    eax,eax
c0013bc3:	f7 d0                	not    eax
c0013bc5:	05 6e 01 00 00       	add    eax,0x16e
c0013bca:	01 c1                	add    ecx,eax
c0013bcc:	43                   	inc    ebx
c0013bcd:	39 f3                	cmp    ebx,esi
c0013bcf:	7c cc                	jl     c0013b9d <datetimeToSeconds(datetime_t)+0xa4>
c0013bd1:	eb 35                	jmp    c0013c08 <datetimeToSeconds(datetime_t)+0x10f>
c0013bd3:	74 33                	je     c0013c08 <datetimeToSeconds(datetime_t)+0x10f>
c0013bd5:	b8 45 00 00 00       	mov    eax,0x45
c0013bda:	89 c2                	mov    edx,eax
c0013bdc:	83 e2 03             	and    edx,0x3
c0013bdf:	39 f0                	cmp    eax,esi
c0013be1:	7e 0f                	jle    c0013bf2 <datetimeToSeconds(datetime_t)+0xf9>
c0013be3:	83 fa 01             	cmp    edx,0x1
c0013be6:	19 d2                	sbb    edx,edx
c0013be8:	48                   	dec    eax
c0013be9:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013bf0:	eb e8                	jmp    c0013bda <datetimeToSeconds(datetime_t)+0xe1>
c0013bf2:	b8 6d 01 00 00       	mov    eax,0x16d
c0013bf7:	85 d2                	test   edx,edx
c0013bf9:	75 0b                	jne    c0013c06 <datetimeToSeconds(datetime_t)+0x10d>
c0013bfb:	66 83 fb 01          	cmp    bx,0x1
c0013bff:	19 c0                	sbb    eax,eax
c0013c01:	05 6e 01 00 00       	add    eax,0x16e
c0013c06:	29 c1                	sub    ecx,eax
c0013c08:	b8 80 51 01 00       	mov    eax,0x15180
c0013c0d:	f7 e9                	imul   ecx
c0013c0f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013c13:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013c17:	83 c4 14             	add    esp,0x14
c0013c1a:	5b                   	pop    ebx
c0013c1b:	5e                   	pop    esi
c0013c1c:	5f                   	pop    edi
c0013c1d:	5d                   	pop    ebp
c0013c1e:	c3                   	ret    
c0013c1f:	90                   	nop

c0013c20 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013c20:	57                   	push   edi
c0013c21:	56                   	push   esi
c0013c22:	53                   	push   ebx
c0013c23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c27:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c29:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013c2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c30:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c34:	e8 c0 fe ff ff       	call   c0013af9 <datetimeToSeconds(datetime_t)>
c0013c39:	59                   	pop    ecx
c0013c3a:	0f b6 0d 10 dd 02 c0 	movzx  ecx,BYTE PTR ds:0xc002dd10
c0013c41:	5b                   	pop    ebx
c0013c42:	03 0d 14 dd 02 c0    	add    ecx,DWORD PTR ds:0xc002dd14
c0013c48:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013c4e:	89 cb                	mov    ebx,ecx
c0013c50:	c1 fb 1f             	sar    ebx,0x1f
c0013c53:	29 c8                	sub    eax,ecx
c0013c55:	19 da                	sbb    edx,ebx
c0013c57:	31 c9                	xor    ecx,ecx
c0013c59:	80 3d 11 dd 02 c0 00 	cmp    BYTE PTR ds:0xc002dd11,0x0
c0013c60:	74 05                	je     c0013c67 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013c62:	b9 08 07 00 00       	mov    ecx,0x708
c0013c67:	31 db                	xor    ebx,ebx
c0013c69:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013c6d:	29 c8                	sub    eax,ecx
c0013c6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c73:	19 da                	sbb    edx,ebx
c0013c75:	89 f8                	mov    eax,edi
c0013c77:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013c7b:	5b                   	pop    ebx
c0013c7c:	5e                   	pop    esi
c0013c7d:	5f                   	pop    edi
c0013c7e:	ff e0                	jmp    eax

c0013c80 <secondsToDatetime(unsigned long long)>:
c0013c80:	55                   	push   ebp
c0013c81:	57                   	push   edi
c0013c82:	56                   	push   esi
c0013c83:	53                   	push   ebx
c0013c84:	83 ec 1c             	sub    esp,0x1c
c0013c87:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013c8b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013c8f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013c93:	6a 00                	push   0x0
c0013c95:	68 80 51 01 00       	push   0x15180
c0013c9a:	55                   	push   ebp
c0013c9b:	57                   	push   edi
c0013c9c:	e8 0b 26 01 00       	call   c00262ac <__udivdi3>
c0013ca1:	83 c4 10             	add    esp,0x10
c0013ca4:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013caa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013cae:	6a 00                	push   0x0
c0013cb0:	68 80 51 01 00       	push   0x15180
c0013cb5:	55                   	push   ebp
c0013cb6:	57                   	push   edi
c0013cb7:	bf 10 0e 00 00       	mov    edi,0xe10
c0013cbc:	e8 eb 26 01 00       	call   c00263ac <__umoddi3>
c0013cc1:	83 c4 10             	add    esp,0x10
c0013cc4:	99                   	cdq    
c0013cc5:	f7 ff                	idiv   edi
c0013cc7:	bf 3c 00 00 00       	mov    edi,0x3c
c0013ccc:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013ccf:	89 d0                	mov    eax,edx
c0013cd1:	99                   	cdq    
c0013cd2:	f7 ff                	idiv   edi
c0013cd4:	85 db                	test   ebx,ebx
c0013cd6:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013cd9:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013cdc:	79 11                	jns    c0013cef <secondsToDatetime(unsigned long long)+0x6f>
c0013cde:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013ce2:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013ce8:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ced:	eb 07                	jmp    c0013cf6 <secondsToDatetime(unsigned long long)+0x76>
c0013cef:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013cf4:	89 d8                	mov    eax,ebx
c0013cf6:	bf b4 05 00 00       	mov    edi,0x5b4
c0013cfb:	99                   	cdq    
c0013cfc:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013d01:	f7 f9                	idiv   ecx
c0013d03:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013d08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013d0c:	31 d2                	xor    edx,edx
c0013d0e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013d16:	01 c3                	add    ebx,eax
c0013d18:	89 d8                	mov    eax,ebx
c0013d1a:	f7 f1                	div    ecx
c0013d1c:	31 d2                	xor    edx,edx
c0013d1e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013d21:	89 d8                	mov    eax,ebx
c0013d23:	f7 f7                	div    edi
c0013d25:	31 d2                	xor    edx,edx
c0013d27:	29 c1                	sub    ecx,eax
c0013d29:	89 d8                	mov    eax,ebx
c0013d2b:	f7 f5                	div    ebp
c0013d2d:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013d32:	29 c1                	sub    ecx,eax
c0013d34:	31 d2                	xor    edx,edx
c0013d36:	89 c8                	mov    eax,ecx
c0013d38:	f7 f5                	div    ebp
c0013d3a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013d3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013d43:	31 d2                	xor    edx,edx
c0013d45:	89 c8                	mov    eax,ecx
c0013d47:	f7 f5                	div    ebp
c0013d49:	31 d2                	xor    edx,edx
c0013d4b:	01 c3                	add    ebx,eax
c0013d4d:	89 c8                	mov    eax,ecx
c0013d4f:	f7 f7                	div    edi
c0013d51:	bf 99 00 00 00       	mov    edi,0x99
c0013d56:	29 c3                	sub    ebx,eax
c0013d58:	31 d2                	xor    edx,edx
c0013d5a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013d62:	29 c3                	sub    ebx,eax
c0013d64:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013d67:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013d6a:	bb 05 00 00 00       	mov    ebx,0x5
c0013d6f:	83 c1 02             	add    ecx,0x2
c0013d72:	89 c8                	mov    eax,ecx
c0013d74:	f7 f7                	div    edi
c0013d76:	31 d2                	xor    edx,edx
c0013d78:	89 c7                	mov    edi,eax
c0013d7a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013d80:	83 c0 02             	add    eax,0x2
c0013d83:	f7 f3                	div    ebx
c0013d85:	89 eb                	mov    ebx,ebp
c0013d87:	29 c3                	sub    ebx,eax
c0013d89:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013d8f:	88 1e                	mov    BYTE PTR [esi],bl
c0013d91:	19 c0                	sbb    eax,eax
c0013d93:	31 d2                	xor    edx,edx
c0013d95:	83 e0 0c             	and    eax,0xc
c0013d98:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013d9c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013da4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013da8:	83 f9 01             	cmp    ecx,0x1
c0013dab:	0f 96 c2             	setbe  dl
c0013dae:	41                   	inc    ecx
c0013daf:	01 d0                	add    eax,edx
c0013db1:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013db4:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013db8:	83 c4 1c             	add    esp,0x1c
c0013dbb:	89 f0                	mov    eax,esi
c0013dbd:	5b                   	pop    ebx
c0013dbe:	5e                   	pop    esi
c0013dbf:	5f                   	pop    edi
c0013dc0:	5d                   	pop    ebp
c0013dc1:	c2 04 00             	ret    0x4

c0013dc4 <Clock::timeInDatetimeLocal()>:
c0013dc4:	53                   	push   ebx
c0013dc5:	83 ec 14             	sub    esp,0x14
c0013dc8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dcc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013dd0:	e8 83 fc ff ff       	call   c0013a58 <Clock::timeInSecondsLocal()>
c0013dd5:	83 c4 0c             	add    esp,0xc
c0013dd8:	52                   	push   edx
c0013dd9:	50                   	push   eax
c0013dda:	53                   	push   ebx
c0013ddb:	e8 a0 fe ff ff       	call   c0013c80 <secondsToDatetime(unsigned long long)>
c0013de0:	89 d8                	mov    eax,ebx
c0013de2:	83 c4 14             	add    esp,0x14
c0013de5:	5b                   	pop    ebx
c0013de6:	c2 04 00             	ret    0x4
c0013de9:	90                   	nop

c0013dea <Device::hibernate()>:
c0013dea:	c3                   	ret    
c0013deb:	90                   	nop

c0013dec <Device::wake()>:
c0013dec:	c3                   	ret    
c0013ded:	90                   	nop

c0013dee <Device::detect()>:
c0013dee:	c3                   	ret    
c0013def:	90                   	nop

c0013df0 <Device::disableLegacy()>:
c0013df0:	c3                   	ret    
c0013df1:	90                   	nop

c0013df2 <Device::powerSaving(PowerSavingLevel)>:
c0013df2:	c3                   	ret    
c0013df3:	90                   	nop

c0013df4 <DriverlessDevice::close(int, int, void*)>:
c0013df4:	31 c0                	xor    eax,eax
c0013df6:	c3                   	ret    
c0013df7:	90                   	nop

c0013df8 <DriverlessDevice::detect()>:
c0013df8:	c3                   	ret    
c0013df9:	90                   	nop

c0013dfa <DriverlessDevice::open(int, int, void*)>:
c0013dfa:	83 ec 18             	sub    esp,0x18
c0013dfd:	68 90 a4 02 c0       	push   0xc002a490
c0013e02:	e8 36 62 00 00       	call   c001a03d <Krnl::panic(char const*)>
c0013e07:	83 c8 ff             	or     eax,0xffffffff
c0013e0a:	83 c4 1c             	add    esp,0x1c
c0013e0d:	c3                   	ret    

c0013e0e <Device::~Device()>:
c0013e0e:	ba b8 a4 02 c0       	mov    edx,0xc002a4b8
c0013e13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e17:	89 10                	mov    DWORD PTR [eax],edx
c0013e19:	90                   	nop
c0013e1a:	c3                   	ret    
c0013e1b:	90                   	nop

c0013e1c <Device::~Device()>:
c0013e1c:	83 ec 0c             	sub    esp,0xc
c0013e1f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013e23:	e8 e6 ff ff ff       	call   c0013e0e <Device::~Device()>
c0013e28:	83 c4 04             	add    esp,0x4
c0013e2b:	83 ec 08             	sub    esp,0x8
c0013e2e:	68 58 01 00 00       	push   0x158
c0013e33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e37:	e8 f9 eb ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0013e3c:	83 c4 10             	add    esp,0x10
c0013e3f:	83 c4 0c             	add    esp,0xc
c0013e42:	c3                   	ret    
c0013e43:	90                   	nop

c0013e44 <Device::findAndLoadDriver()>:
c0013e44:	c3                   	ret    
c0013e45:	90                   	nop

c0013e46 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013e46:	57                   	push   edi
c0013e47:	b9 09 00 00 00       	mov    ecx,0x9
c0013e4c:	56                   	push   esi
c0013e4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013e51:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013e55:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013e5f:	81 c7 18 01 00 00    	add    edi,0x118
c0013e65:	fc                   	cld    
c0013e66:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013e68:	5e                   	pop    esi
c0013e69:	5f                   	pop    edi
c0013e6a:	c3                   	ret    
c0013e6b:	90                   	nop

c0013e6c <Device::preOpenACPI(void*, char*, char*)>:
c0013e6c:	56                   	push   esi
c0013e6d:	53                   	push   ebx
c0013e6e:	83 ec 08             	sub    esp,0x8
c0013e71:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013e75:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013e79:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013e83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e87:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013e8d:	6a 1e                	push   0x1e
c0013e8f:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013e95:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013e99:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013e9f:	50                   	push   eax
c0013ea0:	e8 9f c8 fe ff       	call   c0000744 <memcpy>
c0013ea5:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013ea9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013ead:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013eb5:	83 c4 14             	add    esp,0x14
c0013eb8:	5b                   	pop    ebx
c0013eb9:	5e                   	pop    esi
c0013eba:	e9 85 c8 fe ff       	jmp    c0000744 <memcpy>
c0013ebf:	90                   	nop

c0013ec0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013ec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ec4:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013ec9:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013ed0:	75 0b                	jne    c0013edd <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013ed2:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ed4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ed8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013edb:	eb 1e                	jmp    c0013efb <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013edd:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c0013ee2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013ee8:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013eee:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013ef0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ef4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ef8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013efb:	ff e0                	jmp    eax
c0013efd:	90                   	nop

c0013efe <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013efe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f02:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013f07:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013f0e:	75 0b                	jne    c0013f1b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013f10:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f12:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013f16:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013f19:	eb 1e                	jmp    c0013f39 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013f1b:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c0013f20:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013f26:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013f2c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013f2e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013f32:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013f36:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013f39:	ff e0                	jmp    eax
c0013f3b:	90                   	nop

c0013f3c <Device::addChild(Device*)>:
c0013f3c:	53                   	push   ebx
c0013f3d:	83 ec 08             	sub    esp,0x8
c0013f40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013f44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f48:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013f4e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013f54:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013f56:	85 d2                	test   edx,edx
c0013f58:	74 04                	je     c0013f5e <Device::addChild(Device*)+0x22>
c0013f5a:	89 d3                	mov    ebx,edx
c0013f5c:	eb f6                	jmp    c0013f54 <Device::addChild(Device*)+0x18>
c0013f5e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013f61:	83 ec 0c             	sub    esp,0xc
c0013f64:	6a 08                	push   0x8
c0013f66:	e8 db b8 ff ff       	call   c000f846 <malloc>
c0013f6b:	89 03                	mov    DWORD PTR [ebx],eax
c0013f6d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f73:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f7a:	83 c4 18             	add    esp,0x18
c0013f7d:	5b                   	pop    ebx
c0013f7e:	c3                   	ret    
c0013f7f:	90                   	nop

c0013f80 <Device::removeAllChildren()>:
c0013f80:	56                   	push   esi
c0013f81:	53                   	push   ebx
c0013f82:	52                   	push   edx
c0013f83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f87:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013f8d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f90:	74 17                	je     c0013fa9 <Device::removeAllChildren()+0x29>
c0013f92:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013f95:	85 c0                	test   eax,eax
c0013f97:	74 0c                	je     c0013fa5 <Device::removeAllChildren()+0x25>
c0013f99:	83 ec 0c             	sub    esp,0xc
c0013f9c:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f9e:	50                   	push   eax
c0013f9f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013fa2:	83 c4 10             	add    esp,0x10
c0013fa5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013fa7:	eb e4                	jmp    c0013f8d <Device::removeAllChildren()+0xd>
c0013fa9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013faf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013fb5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013fbb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fc2:	58                   	pop    eax
c0013fc3:	5b                   	pop    ebx
c0013fc4:	5e                   	pop    esi
c0013fc5:	c3                   	ret    

c0013fc6 <Device::hibernateAll()>:
c0013fc6:	53                   	push   ebx
c0013fc7:	83 ec 14             	sub    esp,0x14
c0013fca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013fce:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fd0:	53                   	push   ebx
c0013fd1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013fd4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013fda:	83 c4 10             	add    esp,0x10
c0013fdd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013fe0:	74 0f                	je     c0013ff1 <Device::hibernateAll()+0x2b>
c0013fe2:	83 ec 0c             	sub    esp,0xc
c0013fe5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013fe8:	e8 d9 ff ff ff       	call   c0013fc6 <Device::hibernateAll()>
c0013fed:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013fef:	eb e9                	jmp    c0013fda <Device::hibernateAll()+0x14>
c0013ff1:	83 c4 08             	add    esp,0x8
c0013ff4:	5b                   	pop    ebx
c0013ff5:	c3                   	ret    

c0013ff6 <Device::wakeAll()>:
c0013ff6:	53                   	push   ebx
c0013ff7:	83 ec 14             	sub    esp,0x14
c0013ffa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ffe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014000:	53                   	push   ebx
c0014001:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014004:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001400a:	83 c4 10             	add    esp,0x10
c001400d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014010:	74 0f                	je     c0014021 <Device::wakeAll()+0x2b>
c0014012:	83 ec 0c             	sub    esp,0xc
c0014015:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014018:	e8 d9 ff ff ff       	call   c0013ff6 <Device::wakeAll()>
c001401d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001401f:	eb e9                	jmp    c001400a <Device::wakeAll()+0x14>
c0014021:	83 c4 08             	add    esp,0x8
c0014024:	5b                   	pop    ebx
c0014025:	c3                   	ret    

c0014026 <Device::detectAll()>:
c0014026:	53                   	push   ebx
c0014027:	83 ec 14             	sub    esp,0x14
c001402a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001402e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014030:	53                   	push   ebx
c0014031:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014034:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001403a:	83 c4 10             	add    esp,0x10
c001403d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014040:	74 0f                	je     c0014051 <Device::detectAll()+0x2b>
c0014042:	83 ec 0c             	sub    esp,0xc
c0014045:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014048:	e8 d9 ff ff ff       	call   c0014026 <Device::detectAll()>
c001404d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001404f:	eb e9                	jmp    c001403a <Device::detectAll()+0x14>
c0014051:	83 c4 08             	add    esp,0x8
c0014054:	5b                   	pop    ebx
c0014055:	c3                   	ret    

c0014056 <Device::disableLegacyAll()>:
c0014056:	53                   	push   ebx
c0014057:	83 ec 14             	sub    esp,0x14
c001405a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001405e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014060:	53                   	push   ebx
c0014061:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014064:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001406a:	83 c4 10             	add    esp,0x10
c001406d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014070:	74 0f                	je     c0014081 <Device::disableLegacyAll()+0x2b>
c0014072:	83 ec 0c             	sub    esp,0xc
c0014075:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014078:	e8 d9 ff ff ff       	call   c0014056 <Device::disableLegacyAll()>
c001407d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001407f:	eb e9                	jmp    c001406a <Device::disableLegacyAll()+0x14>
c0014081:	83 c4 08             	add    esp,0x8
c0014084:	5b                   	pop    ebx
c0014085:	c3                   	ret    

c0014086 <Device::loadDriversForAll()>:
c0014086:	53                   	push   ebx
c0014087:	83 ec 08             	sub    esp,0x8
c001408a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001408e:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014094:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014096:	85 db                	test   ebx,ebx
c0014098:	74 12                	je     c00140ac <Device::loadDriversForAll()+0x26>
c001409a:	83 ec 0c             	sub    esp,0xc
c001409d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00140a0:	e8 e1 ff ff ff       	call   c0014086 <Device::loadDriversForAll()>
c00140a5:	83 c4 10             	add    esp,0x10
c00140a8:	89 d8                	mov    eax,ebx
c00140aa:	eb e8                	jmp    c0014094 <Device::loadDriversForAll()+0xe>
c00140ac:	83 c4 08             	add    esp,0x8
c00140af:	5b                   	pop    ebx
c00140b0:	c3                   	ret    
c00140b1:	90                   	nop

c00140b2 <Device::closeAll()>:
c00140b2:	53                   	push   ebx
c00140b3:	83 ec 08             	sub    esp,0x8
c00140b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00140ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140bc:	6a 00                	push   0x0
c00140be:	6a 00                	push   0x0
c00140c0:	6a 00                	push   0x0
c00140c2:	53                   	push   ebx
c00140c3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00140c6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00140cc:	83 c4 10             	add    esp,0x10
c00140cf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00140d2:	74 0f                	je     c00140e3 <Device::closeAll()+0x31>
c00140d4:	83 ec 0c             	sub    esp,0xc
c00140d7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00140da:	e8 d3 ff ff ff       	call   c00140b2 <Device::closeAll()>
c00140df:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00140e1:	eb e9                	jmp    c00140cc <Device::closeAll()+0x1a>
c00140e3:	83 c4 08             	add    esp,0x8
c00140e6:	5b                   	pop    ebx
c00140e7:	c3                   	ret    

c00140e8 <Device::powerSavingAll(PowerSavingLevel)>:
c00140e8:	56                   	push   esi
c00140e9:	53                   	push   ebx
c00140ea:	83 ec 0c             	sub    esp,0xc
c00140ed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00140f1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00140f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140f7:	56                   	push   esi
c00140f8:	53                   	push   ebx
c00140f9:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00140fc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014102:	83 c4 10             	add    esp,0x10
c0014105:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014108:	74 0f                	je     c0014119 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001410a:	52                   	push   edx
c001410b:	52                   	push   edx
c001410c:	56                   	push   esi
c001410d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014110:	e8 d3 ff ff ff       	call   c00140e8 <Device::powerSavingAll(PowerSavingLevel)>
c0014115:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014117:	eb e9                	jmp    c0014102 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014119:	58                   	pop    eax
c001411a:	5b                   	pop    ebx
c001411b:	5e                   	pop    esi
c001411c:	c3                   	ret    
c001411d:	90                   	nop

c001411e <Device::setName(char const*)>:
c001411e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014126:	e9 09 c7 fe ff       	jmp    c0000834 <strcpy>
c001412b:	90                   	nop

c001412c <Device::Device(char const*)>:
c001412c:	83 ec 1c             	sub    esp,0x1c
c001412f:	ba b8 a4 02 c0       	mov    edx,0xc002a4b8
c0014134:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014138:	89 10                	mov    DWORD PTR [eax],edx
c001413a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001413e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014148:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001414c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014156:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001415a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014164:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014168:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014172:	83 ec 08             	sub    esp,0x8
c0014175:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014179:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001417d:	e8 9c ff ff ff       	call   c001411e <Device::setName(char const*)>
c0014182:	83 c4 10             	add    esp,0x10
c0014185:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001418d:	83 ec 0c             	sub    esp,0xc
c0014190:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014194:	e8 ad b6 ff ff       	call   c000f846 <malloc>
c0014199:	83 c4 10             	add    esp,0x10
c001419c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00141a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00141a9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00141ad:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00141b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141b7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00141bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00141c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141c7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00141cd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00141d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141d8:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00141df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141e3:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00141ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141ee:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00141f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141fc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014206:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001420a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014214:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014218:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014222:	90                   	nop
c0014223:	83 c4 1c             	add    esp,0x1c
c0014226:	c3                   	ret    
c0014227:	90                   	nop

c0014228 <Device::getName()>:
c0014228:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001422c:	05 d0 00 00 00       	add    eax,0xd0
c0014231:	c3                   	ret    

c0014232 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014232:	83 ec 0c             	sub    esp,0xc
c0014235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014239:	83 ec 08             	sub    esp,0x8
c001423c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014240:	50                   	push   eax
c0014241:	e8 e6 fe ff ff       	call   c001412c <Device::Device(char const*)>
c0014246:	83 c4 10             	add    esp,0x10
c0014249:	ba e4 a4 02 c0       	mov    edx,0xc002a4e4
c001424e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014252:	89 10                	mov    DWORD PTR [eax],edx
c0014254:	90                   	nop
c0014255:	83 c4 0c             	add    esp,0xc
c0014258:	c3                   	ret    
c0014259:	90                   	nop

c001425a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001425a:	57                   	push   edi
c001425b:	56                   	push   esi
c001425c:	53                   	push   ebx
c001425d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014261:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014265:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014269:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001426f:	75 0c                	jne    c001427d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014271:	52                   	push   edx
c0014272:	52                   	push   edx
c0014273:	53                   	push   ebx
c0014274:	56                   	push   esi
c0014275:	e8 70 3f 01 00       	call   c00281ea <LinkedList<Device>::addElement(Device*)>
c001427a:	83 c4 10             	add    esp,0x10
c001427d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014283:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014286:	74 12                	je     c001429a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014288:	50                   	push   eax
c0014289:	57                   	push   edi
c001428a:	56                   	push   esi
c001428b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001428e:	e8 c7 ff ff ff       	call   c001425a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014293:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014295:	83 c4 10             	add    esp,0x10
c0014298:	eb e9                	jmp    c0014283 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001429a:	5b                   	pop    ebx
c001429b:	5e                   	pop    esi
c001429c:	5f                   	pop    edi
c001429d:	c3                   	ret    

c001429e <getDevicesOfType(DeviceType)>:
c001429e:	53                   	push   ebx
c001429f:	83 ec 14             	sub    esp,0x14
c00142a2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142a6:	53                   	push   ebx
c00142a7:	e8 1a 40 01 00       	call   c00282c6 <LinkedList<Device>::LinkedList()>
c00142ac:	83 c4 0c             	add    esp,0xc
c00142af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00142b3:	53                   	push   ebx
c00142b4:	ff 35 88 db 02 c0    	push   DWORD PTR ds:0xc002db88
c00142ba:	e8 9b ff ff ff       	call   c001425a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00142bf:	89 d8                	mov    eax,ebx
c00142c1:	83 c4 18             	add    esp,0x18
c00142c4:	5b                   	pop    ebx
c00142c5:	c2 04 00             	ret    0x4

c00142c8 <HardDiskController::HardDiskController(char const*)>:
c00142c8:	83 ec 0c             	sub    esp,0xc
c00142cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142cf:	83 ec 08             	sub    esp,0x8
c00142d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142d6:	50                   	push   eax
c00142d7:	e8 50 fe ff ff       	call   c001412c <Device::Device(char const*)>
c00142dc:	83 c4 10             	add    esp,0x10
c00142df:	ba 10 a5 02 c0       	mov    edx,0xc002a510
c00142e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142e8:	89 10                	mov    DWORD PTR [eax],edx
c00142ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142ee:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00142f8:	90                   	nop
c00142f9:	83 c4 0c             	add    esp,0xc
c00142fc:	c3                   	ret    
c00142fd:	90                   	nop

c00142fe <HardDiskController::~HardDiskController()>:
c00142fe:	83 ec 0c             	sub    esp,0xc
c0014301:	ba 10 a5 02 c0       	mov    edx,0xc002a510
c0014306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001430a:	89 10                	mov    DWORD PTR [eax],edx
c001430c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014310:	83 ec 0c             	sub    esp,0xc
c0014313:	50                   	push   eax
c0014314:	e8 f5 fa ff ff       	call   c0013e0e <Device::~Device()>
c0014319:	83 c4 10             	add    esp,0x10
c001431c:	90                   	nop
c001431d:	83 c4 0c             	add    esp,0xc
c0014320:	c3                   	ret    
c0014321:	90                   	nop

c0014322 <HardDiskController::~HardDiskController()>:
c0014322:	83 ec 0c             	sub    esp,0xc
c0014325:	83 ec 0c             	sub    esp,0xc
c0014328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001432c:	e8 cd ff ff ff       	call   c00142fe <HardDiskController::~HardDiskController()>
c0014331:	83 c4 10             	add    esp,0x10
c0014334:	83 ec 08             	sub    esp,0x8
c0014337:	68 58 01 00 00       	push   0x158
c001433c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014340:	e8 f0 e6 ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0014345:	83 c4 10             	add    esp,0x10
c0014348:	83 c4 0c             	add    esp,0xc
c001434b:	c3                   	ret    

c001434c <PhysicalDisk::eject()>:
c001434c:	83 ec 18             	sub    esp,0x18
c001434f:	68 34 a5 02 c0       	push   0xc002a534
c0014354:	e8 bc e7 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014359:	83 c8 ff             	or     eax,0xffffffff
c001435c:	83 c4 1c             	add    esp,0x1c
c001435f:	c3                   	ret    

c0014360 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014360:	83 ec 0c             	sub    esp,0xc
c0014363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014367:	83 ec 08             	sub    esp,0x8
c001436a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001436e:	50                   	push   eax
c001436f:	e8 b8 fd ff ff       	call   c001412c <Device::Device(char const*)>
c0014374:	83 c4 10             	add    esp,0x10
c0014377:	ba 64 a5 02 c0       	mov    edx,0xc002a564
c001437c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014380:	89 10                	mov    DWORD PTR [eax],edx
c0014382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014386:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001438d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014391:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001439c:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00143a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00143ae:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00143b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143b8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00143c2:	90                   	nop
c00143c3:	83 c4 0c             	add    esp,0xc
c00143c6:	c3                   	ret    
c00143c7:	90                   	nop

c00143c8 <PhysicalDisk::startCache()>:
c00143c8:	56                   	push   esi
c00143c9:	53                   	push   ebx
c00143ca:	83 ec 10             	sub    esp,0x10
c00143cd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143d1:	6a 44                	push   0x44
c00143d3:	e8 6e b4 ff ff       	call   c000f846 <malloc>
c00143d8:	89 c6                	mov    esi,eax
c00143da:	58                   	pop    eax
c00143db:	5a                   	pop    edx
c00143dc:	53                   	push   ebx
c00143dd:	56                   	push   esi
c00143de:	e8 d5 26 00 00       	call   c0016ab8 <VCache::VCache(PhysicalDisk*)>
c00143e3:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00143e9:	83 c4 14             	add    esp,0x14
c00143ec:	5b                   	pop    ebx
c00143ed:	5e                   	pop    esi
c00143ee:	c3                   	ret    
c00143ef:	90                   	nop

c00143f0 <PhysicalDisk::~PhysicalDisk()>:
c00143f0:	83 ec 0c             	sub    esp,0xc
c00143f3:	ba 64 a5 02 c0       	mov    edx,0xc002a564
c00143f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143fc:	89 10                	mov    DWORD PTR [eax],edx
c00143fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014402:	83 ec 0c             	sub    esp,0xc
c0014405:	50                   	push   eax
c0014406:	e8 03 fa ff ff       	call   c0013e0e <Device::~Device()>
c001440b:	83 c4 10             	add    esp,0x10
c001440e:	90                   	nop
c001440f:	83 c4 0c             	add    esp,0xc
c0014412:	c3                   	ret    
c0014413:	90                   	nop

c0014414 <PhysicalDisk::~PhysicalDisk()>:
c0014414:	83 ec 0c             	sub    esp,0xc
c0014417:	83 ec 0c             	sub    esp,0xc
c001441a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001441e:	e8 cd ff ff ff       	call   c00143f0 <PhysicalDisk::~PhysicalDisk()>
c0014423:	83 c4 10             	add    esp,0x10
c0014426:	83 ec 08             	sub    esp,0x8
c0014429:	68 6c 01 00 00       	push   0x16c
c001442e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014432:	e8 fe e5 ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0014437:	83 c4 10             	add    esp,0x10
c001443a:	83 c4 0c             	add    esp,0xc
c001443d:	c3                   	ret    

c001443e <FPU::FPU(char const*)>:
c001443e:	83 ec 0c             	sub    esp,0xc
c0014441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014445:	83 ec 08             	sub    esp,0x8
c0014448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001444c:	50                   	push   eax
c001444d:	e8 da fc ff ff       	call   c001412c <Device::Device(char const*)>
c0014452:	83 c4 10             	add    esp,0x10
c0014455:	ba a8 a5 02 c0       	mov    edx,0xc002a5a8
c001445a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001445e:	89 10                	mov    DWORD PTR [eax],edx
c0014460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014464:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001446e:	90                   	nop
c001446f:	83 c4 0c             	add    esp,0xc
c0014472:	c3                   	ret    
c0014473:	90                   	nop

c0014474 <FPU::~FPU()>:
c0014474:	83 ec 0c             	sub    esp,0xc
c0014477:	ba a8 a5 02 c0       	mov    edx,0xc002a5a8
c001447c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014480:	89 10                	mov    DWORD PTR [eax],edx
c0014482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014486:	83 ec 0c             	sub    esp,0xc
c0014489:	50                   	push   eax
c001448a:	e8 7f f9 ff ff       	call   c0013e0e <Device::~Device()>
c001448f:	83 c4 10             	add    esp,0x10
c0014492:	90                   	nop
c0014493:	83 c4 0c             	add    esp,0xc
c0014496:	c3                   	ret    
c0014497:	90                   	nop

c0014498 <FPU::~FPU()>:
c0014498:	83 ec 0c             	sub    esp,0xc
c001449b:	83 ec 0c             	sub    esp,0xc
c001449e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144a2:	e8 cd ff ff ff       	call   c0014474 <FPU::~FPU()>
c00144a7:	83 c4 10             	add    esp,0x10
c00144aa:	83 ec 08             	sub    esp,0x8
c00144ad:	68 58 01 00 00       	push   0x158
c00144b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144b6:	e8 7a e5 ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c00144bb:	83 c4 10             	add    esp,0x10
c00144be:	83 c4 0c             	add    esp,0xc
c00144c1:	c3                   	ret    

c00144c2 <setupFPU()>:
c00144c2:	53                   	push   ebx
c00144c3:	83 ec 08             	sub    esp,0x8
c00144c6:	8b 15 88 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db88
c00144cc:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00144d3:	74 19                	je     c00144ee <setupFPU()+0x2c>
c00144d5:	83 ec 0c             	sub    esp,0xc
c00144d8:	68 58 01 00 00       	push   0x158
c00144dd:	e8 64 b3 ff ff       	call   c000f846 <malloc>
c00144e2:	89 c3                	mov    ebx,eax
c00144e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00144e7:	e8 46 09 01 00       	call   c0024e32 <AVX::AVX()>
c00144ec:	eb 5b                	jmp    c0014549 <setupFPU()+0x87>
c00144ee:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00144f4:	84 c0                	test   al,al
c00144f6:	79 19                	jns    c0014511 <setupFPU()+0x4f>
c00144f8:	83 ec 0c             	sub    esp,0xc
c00144fb:	68 58 01 00 00       	push   0x158
c0014500:	e8 41 b3 ff ff       	call   c000f846 <malloc>
c0014505:	89 c3                	mov    ebx,eax
c0014507:	89 04 24             	mov    DWORD PTR [esp],eax
c001450a:	e8 49 0a 01 00       	call   c0024f58 <SSE::SSE()>
c001450f:	eb 38                	jmp    c0014549 <setupFPU()+0x87>
c0014511:	a8 20                	test   al,0x20
c0014513:	74 19                	je     c001452e <setupFPU()+0x6c>
c0014515:	83 ec 0c             	sub    esp,0xc
c0014518:	68 58 01 00 00       	push   0x158
c001451d:	e8 24 b3 ff ff       	call   c000f846 <malloc>
c0014522:	89 c3                	mov    ebx,eax
c0014524:	89 04 24             	mov    DWORD PTR [esp],eax
c0014527:	e8 96 09 01 00       	call   c0024ec2 <MMX::MMX()>
c001452c:	eb 1b                	jmp    c0014549 <setupFPU()+0x87>
c001452e:	a8 10                	test   al,0x10
c0014530:	74 1c                	je     c001454e <setupFPU()+0x8c>
c0014532:	83 ec 0c             	sub    esp,0xc
c0014535:	68 58 01 00 00       	push   0x158
c001453a:	e8 07 b3 ff ff       	call   c000f846 <malloc>
c001453f:	89 c3                	mov    ebx,eax
c0014541:	89 04 24             	mov    DWORD PTR [esp],eax
c0014544:	e8 9d 0a 01 00       	call   c0024fe6 <x87::x87()>
c0014549:	83 c4 10             	add    esp,0x10
c001454c:	eb 24                	jmp    c0014572 <setupFPU()+0xb0>
c001454e:	83 e0 ef             	and    eax,0xffffffef
c0014551:	83 ec 0c             	sub    esp,0xc
c0014554:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001455a:	68 94 a5 02 c0       	push   0xc002a594
c001455f:	e8 b1 e5 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014564:	0f 20 c0             	mov    eax,cr0
c0014567:	83 c8 04             	or     eax,0x4
c001456a:	0f 22 c0             	mov    cr0,eax
c001456d:	31 db                	xor    ebx,ebx
c001456f:	83 c4 10             	add    esp,0x10
c0014572:	89 d8                	mov    eax,ebx
c0014574:	83 c4 08             	add    esp,0x8
c0014577:	5b                   	pop    ebx
c0014578:	c3                   	ret    
c0014579:	90                   	nop

c001457a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001457a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001457e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014582:	c1 e0 04             	shl    eax,0x4
c0014585:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014589:	8d 50 10             	lea    edx,[eax+0x10]
c001458c:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014592:	74 08                	je     c001459c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014594:	83 c0 04             	add    eax,0x4
c0014597:	39 d0                	cmp    eax,edx
c0014599:	75 f1                	jne    c001458c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001459b:	c3                   	ret    
c001459c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00145a6:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00145b0:	eb e2                	jmp    c0014594 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00145b2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00145b2:	57                   	push   edi
c00145b3:	31 c0                	xor    eax,eax
c00145b5:	56                   	push   esi
c00145b6:	53                   	push   ebx
c00145b7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00145bb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00145bf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00145c3:	89 da                	mov    edx,ebx
c00145c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00145c9:	c1 e2 04             	shl    edx,0x4
c00145cc:	01 ca                	add    edx,ecx
c00145ce:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00145d6:	74 16                	je     c00145ee <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00145d8:	40                   	inc    eax
c00145d9:	83 f8 04             	cmp    eax,0x4
c00145dc:	75 f0                	jne    c00145ce <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00145de:	c7 44 24 10 d8 a5 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a5d8
c00145e6:	5b                   	pop    ebx
c00145e7:	5e                   	pop    esi
c00145e8:	5f                   	pop    edi
c00145e9:	e9 4f 5a 00 00       	jmp    c001a03d <Krnl::panic(char const*)>
c00145ee:	8d 04 98             	lea    eax,[eax+ebx*4]
c00145f1:	8d 04 81             	lea    eax,[ecx+eax*4]
c00145f4:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00145fa:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014600:	5b                   	pop    ebx
c0014601:	5e                   	pop    esi
c0014602:	5f                   	pop    edi
c0014603:	c3                   	ret    

c0014604 <doubleFault(regs*, void*)>:
c0014604:	55                   	push   ebp
c0014605:	89 e5                	mov    ebp,esp
c0014607:	83 ec 08             	sub    esp,0x8
c001460a:	83 ec 0c             	sub    esp,0xc
c001460d:	68 13 a6 02 c0       	push   0xc002a613
c0014612:	e8 26 5a 00 00       	call   c001a03d <Krnl::panic(char const*)>
c0014617:	83 c4 10             	add    esp,0x10
c001461a:	90                   	nop
c001461b:	c9                   	leave  
c001461c:	c3                   	ret    
c001461d:	90                   	nop

c001461e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001461e:	56                   	push   esi
c001461f:	53                   	push   ebx
c0014620:	50                   	push   eax
c0014621:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014625:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014629:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001462e:	75 35                	jne    c0014665 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014630:	8d 43 20             	lea    eax,[ebx+0x20]
c0014633:	31 d2                	xor    edx,edx
c0014635:	89 c1                	mov    ecx,eax
c0014637:	c1 e1 04             	shl    ecx,0x4
c001463a:	01 f1                	add    ecx,esi
c001463c:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014644:	74 3e                	je     c0014684 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014646:	42                   	inc    edx
c0014647:	83 fa 04             	cmp    edx,0x4
c001464a:	75 f0                	jne    c001463c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001464c:	83 ec 0c             	sub    esp,0xc
c001464f:	68 58 a6 02 c0       	push   0xc002a658
c0014654:	e8 e4 59 00 00       	call   c001a03d <Krnl::panic(char const*)>
c0014659:	83 c4 10             	add    esp,0x10
c001465c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014661:	5a                   	pop    edx
c0014662:	5b                   	pop    ebx
c0014663:	5e                   	pop    esi
c0014664:	c3                   	ret    
c0014665:	83 ec 0c             	sub    esp,0xc
c0014668:	56                   	push   esi
c0014669:	e8 ba fb ff ff       	call   c0014228 <Device::getName()>
c001466e:	83 c4 10             	add    esp,0x10
c0014671:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014674:	75 ba                	jne    c0014630 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014676:	83 fb 0f             	cmp    ebx,0xf
c0014679:	7f 29                	jg     c00146a4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001467b:	0f b6 9b e0 cd 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd3220]
c0014682:	eb ac                	jmp    c0014630 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014684:	8d 04 82             	lea    eax,[edx+eax*4]
c0014687:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001468b:	8d 04 86             	lea    eax,[esi+eax*4]
c001468e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014694:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014698:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001469e:	89 d8                	mov    eax,ebx
c00146a0:	5a                   	pop    edx
c00146a1:	5b                   	pop    ebx
c00146a2:	5e                   	pop    esi
c00146a3:	c3                   	ret    
c00146a4:	83 ec 0c             	sub    esp,0xc
c00146a7:	68 20 a6 02 c0       	push   0xc002a620
c00146ac:	e8 8c 59 00 00       	call   c001a03d <Krnl::panic(char const*)>
c00146b1:	83 c4 10             	add    esp,0x10
c00146b4:	e9 77 ff ff ff       	jmp    c0014630 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00146b9:	90                   	nop

c00146ba <InterruptController::clearAllHandlers(int, bool)>:
c00146ba:	56                   	push   esi
c00146bb:	53                   	push   ebx
c00146bc:	52                   	push   edx
c00146bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00146c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00146c5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00146ca:	75 61                	jne    c001472d <InterruptController::clearAllHandlers(int, bool)+0x73>
c00146cc:	8d 46 20             	lea    eax,[esi+0x20]
c00146cf:	c1 e6 04             	shl    esi,0x4
c00146d2:	c1 e0 04             	shl    eax,0x4
c00146d5:	01 de                	add    esi,ebx
c00146d7:	01 d8                	add    eax,ebx
c00146d9:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00146e3:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00146ed:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00146f7:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014701:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c001470b:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014715:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c001471f:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014729:	58                   	pop    eax
c001472a:	5b                   	pop    ebx
c001472b:	5e                   	pop    esi
c001472c:	c3                   	ret    
c001472d:	83 ec 0c             	sub    esp,0xc
c0014730:	53                   	push   ebx
c0014731:	e8 f2 fa ff ff       	call   c0014228 <Device::getName()>
c0014736:	83 c4 10             	add    esp,0x10
c0014739:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001473c:	75 8e                	jne    c00146cc <InterruptController::clearAllHandlers(int, bool)+0x12>
c001473e:	83 fe 0f             	cmp    esi,0xf
c0014741:	7f 09                	jg     c001474c <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014743:	0f b6 b6 e0 cd 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd3220]
c001474a:	eb 80                	jmp    c00146cc <InterruptController::clearAllHandlers(int, bool)+0x12>
c001474c:	83 ec 0c             	sub    esp,0xc
c001474f:	68 94 a6 02 c0       	push   0xc002a694
c0014754:	e8 e4 58 00 00       	call   c001a03d <Krnl::panic(char const*)>
c0014759:	83 c4 10             	add    esp,0x10
c001475c:	e9 6b ff ff ff       	jmp    c00146cc <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014761:	90                   	nop

c0014762 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014762:	56                   	push   esi
c0014763:	53                   	push   ebx
c0014764:	52                   	push   edx
c0014765:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014769:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001476d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014772:	75 3a                	jne    c00147ae <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014774:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014778:	8d 50 20             	lea    edx,[eax+0x20]
c001477b:	c1 e2 04             	shl    edx,0x4
c001477e:	8d 04 16             	lea    eax,[esi+edx*1]
c0014781:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014785:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c001478b:	74 0b                	je     c0014798 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001478d:	83 c0 04             	add    eax,0x4
c0014790:	39 d0                	cmp    eax,edx
c0014792:	75 f1                	jne    c0014785 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014794:	58                   	pop    eax
c0014795:	5b                   	pop    ebx
c0014796:	5e                   	pop    esi
c0014797:	c3                   	ret    
c0014798:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00147a2:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00147ac:	eb df                	jmp    c001478d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00147ae:	83 ec 0c             	sub    esp,0xc
c00147b1:	56                   	push   esi
c00147b2:	e8 71 fa ff ff       	call   c0014228 <Device::getName()>
c00147b7:	83 c4 10             	add    esp,0x10
c00147ba:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00147bd:	75 b5                	jne    c0014774 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00147bf:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00147c4:	7f 11                	jg     c00147d7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00147c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147ca:	0f b6 80 e0 cd 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd3220]
c00147d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147d5:	eb 9d                	jmp    c0014774 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00147d7:	83 ec 0c             	sub    esp,0xc
c00147da:	68 94 a6 02 c0       	push   0xc002a694
c00147df:	e8 59 58 00 00       	call   c001a03d <Krnl::panic(char const*)>
c00147e4:	83 c4 10             	add    esp,0x10
c00147e7:	eb 8b                	jmp    c0014774 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00147e9 <nmiHandler(regs*, void*)>:
c00147e9:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c00147ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00147f2:	e9 9b a7 ff ff       	jmp    c000ef92 <Computer::handleNMI()>

c00147f7 <int_handler>:
c00147f7:	55                   	push   ebp
c00147f8:	57                   	push   edi
c00147f9:	56                   	push   esi
c00147fa:	53                   	push   ebx
c00147fb:	83 ec 0c             	sub    esp,0xc
c00147fe:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014802:	80 3d e0 06 03 c0 00 	cmp    BYTE PTR ds:0xc00306e0,0x0
c0014809:	74 0b                	je     c0014816 <int_handler+0x1f>
c001480b:	fa                   	cli    
c001480c:	f4                   	hlt    
c001480d:	80 3d e0 06 03 c0 00 	cmp    BYTE PTR ds:0xc00306e0,0x0
c0014814:	75 f5                	jne    c001480b <int_handler+0x14>
c0014816:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c001481b:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c001481e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014824:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c001482a:	8d 43 e0             	lea    eax,[ebx-0x20]
c001482d:	83 f8 17             	cmp    eax,0x17
c0014830:	77 13                	ja     c0014845 <int_handler+0x4e>
c0014832:	83 ec 08             	sub    esp,0x8
c0014835:	8b 17                	mov    edx,DWORD PTR [edi]
c0014837:	8d 43 e0             	lea    eax,[ebx-0x20]
c001483a:	0f b6 c0             	movzx  eax,al
c001483d:	50                   	push   eax
c001483e:	57                   	push   edi
c001483f:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014842:	83 c4 10             	add    esp,0x10
c0014845:	83 c3 15             	add    ebx,0x15
c0014848:	c1 e3 04             	shl    ebx,0x4
c001484b:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001484f:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014856:	31 db                	xor    ebx,ebx
c0014858:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001485c:	85 c0                	test   eax,eax
c001485e:	74 13                	je     c0014873 <int_handler+0x7c>
c0014860:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014863:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014867:	74 1c                	je     c0014885 <int_handler+0x8e>
c0014869:	83 ec 08             	sub    esp,0x8
c001486c:	52                   	push   edx
c001486d:	56                   	push   esi
c001486e:	ff d0                	call   eax
c0014870:	83 c4 10             	add    esp,0x10
c0014873:	43                   	inc    ebx
c0014874:	83 fb 04             	cmp    ebx,0x4
c0014877:	75 df                	jne    c0014858 <int_handler+0x61>
c0014879:	83 c4 0c             	add    esp,0xc
c001487c:	31 c0                	xor    eax,eax
c001487e:	5b                   	pop    ebx
c001487f:	31 d2                	xor    edx,edx
c0014881:	5e                   	pop    esi
c0014882:	5f                   	pop    edi
c0014883:	5d                   	pop    ebp
c0014884:	c3                   	ret    
c0014885:	83 ec 08             	sub    esp,0x8
c0014888:	52                   	push   edx
c0014889:	56                   	push   esi
c001488a:	ff d0                	call   eax
c001488c:	83 c4 10             	add    esp,0x10
c001488f:	83 c4 0c             	add    esp,0xc
c0014892:	5b                   	pop    ebx
c0014893:	5e                   	pop    esi
c0014894:	5f                   	pop    edi
c0014895:	5d                   	pop    ebp
c0014896:	c3                   	ret    
c0014897:	90                   	nop

c0014898 <InterruptController::InterruptController(char const*)>:
c0014898:	83 ec 1c             	sub    esp,0x1c
c001489b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001489f:	83 ec 08             	sub    esp,0x8
c00148a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00148a6:	50                   	push   eax
c00148a7:	e8 80 f8 ff ff       	call   c001412c <Device::Device(char const*)>
c00148ac:	83 c4 10             	add    esp,0x10
c00148af:	ba 30 a9 02 c0       	mov    edx,0xc002a930
c00148b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00148b8:	89 10                	mov    DWORD PTR [eax],edx
c00148ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00148be:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00148c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00148d0:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00148d8:	7f 5e                	jg     c0014938 <InterruptController::InterruptController(char const*)+0xa0>
c00148da:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00148e2:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00148e7:	7f 49                	jg     c0014932 <InterruptController::InterruptController(char const*)+0x9a>
c00148e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00148ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00148f1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00148f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00148fc:	01 ca                	add    edx,ecx
c00148fe:	83 c2 54             	add    edx,0x54
c0014901:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014909:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001490d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014911:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014918:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001491c:	01 ca                	add    edx,ecx
c001491e:	81 c2 54 04 00 00    	add    edx,0x454
c0014924:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001492c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014930:	eb b0                	jmp    c00148e2 <InterruptController::InterruptController(char const*)+0x4a>
c0014932:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014936:	eb 98                	jmp    c00148d0 <InterruptController::InterruptController(char const*)+0x38>
c0014938:	90                   	nop
c0014939:	83 c4 1c             	add    esp,0x1c
c001493c:	c3                   	ret    
c001493d:	90                   	nop

c001493e <InterruptController::~InterruptController()>:
c001493e:	83 ec 0c             	sub    esp,0xc
c0014941:	ba 30 a9 02 c0       	mov    edx,0xc002a930
c0014946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001494a:	89 10                	mov    DWORD PTR [eax],edx
c001494c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014950:	83 ec 0c             	sub    esp,0xc
c0014953:	50                   	push   eax
c0014954:	e8 b5 f4 ff ff       	call   c0013e0e <Device::~Device()>
c0014959:	83 c4 10             	add    esp,0x10
c001495c:	90                   	nop
c001495d:	83 c4 0c             	add    esp,0xc
c0014960:	c3                   	ret    
c0014961:	90                   	nop

c0014962 <InterruptController::~InterruptController()>:
c0014962:	83 ec 0c             	sub    esp,0xc
c0014965:	83 ec 0c             	sub    esp,0xc
c0014968:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001496c:	e8 cd ff ff ff       	call   c001493e <InterruptController::~InterruptController()>
c0014971:	83 c4 10             	add    esp,0x10
c0014974:	83 ec 08             	sub    esp,0x8
c0014977:	68 58 21 00 00       	push   0x2158
c001497c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014980:	e8 b0 e0 ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0014985:	83 c4 10             	add    esp,0x10
c0014988:	83 c4 0c             	add    esp,0xc
c001498b:	c3                   	ret    

c001498c <displayDebugInfo(regs*)>:
c001498c:	55                   	push   ebp
c001498d:	57                   	push   edi
c001498e:	56                   	push   esi
c001498f:	53                   	push   ebx
c0014990:	83 ec 24             	sub    esp,0x24
c0014993:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014997:	0f 20 c2             	mov    edx,cr0
c001499a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001499e:	0f 20 d7             	mov    edi,cr2
c00149a1:	0f 20 de             	mov    esi,cr3
c00149a4:	0f 20 e5             	mov    ebp,cr4
c00149a7:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00149aa:	68 ce a6 02 c0       	push   0xc002a6ce
c00149af:	e8 61 e1 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00149b4:	59                   	pop    ecx
c00149b5:	58                   	pop    eax
c00149b6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00149b9:	68 d9 a6 02 c0       	push   0xc002a6d9
c00149be:	e8 52 e1 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00149c3:	58                   	pop    eax
c00149c4:	5a                   	pop    edx
c00149c5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00149c8:	68 e4 a6 02 c0       	push   0xc002a6e4
c00149cd:	e8 43 e1 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00149d2:	59                   	pop    ecx
c00149d3:	58                   	pop    eax
c00149d4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00149d7:	68 ef a6 02 c0       	push   0xc002a6ef
c00149dc:	e8 34 e1 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00149e1:	58                   	pop    eax
c00149e2:	5a                   	pop    edx
c00149e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00149e6:	68 fa a6 02 c0       	push   0xc002a6fa
c00149eb:	e8 25 e1 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00149f0:	59                   	pop    ecx
c00149f1:	58                   	pop    eax
c00149f2:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00149f5:	68 05 a7 02 c0       	push   0xc002a705
c00149fa:	e8 16 e1 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00149ff:	58                   	pop    eax
c0014a00:	5a                   	pop    edx
c0014a01:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014a04:	68 10 a7 02 c0       	push   0xc002a710
c0014a09:	e8 07 e1 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014a0e:	59                   	pop    ecx
c0014a0f:	58                   	pop    eax
c0014a10:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014a13:	68 1b a7 02 c0       	push   0xc002a71b
c0014a18:	e8 f8 e0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014a1d:	58                   	pop    eax
c0014a1e:	5a                   	pop    edx
c0014a1f:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014a22:	68 26 a7 02 c0       	push   0xc002a726
c0014a27:	e8 e9 e0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014a2c:	59                   	pop    ecx
c0014a2d:	58                   	pop    eax
c0014a2e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014a31:	68 35 a7 02 c0       	push   0xc002a735
c0014a36:	e8 da e0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014a3b:	58                   	pop    eax
c0014a3c:	5a                   	pop    edx
c0014a3d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014a40:	68 40 a7 02 c0       	push   0xc002a740
c0014a45:	e8 cb e0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014a4a:	59                   	pop    ecx
c0014a4b:	58                   	pop    eax
c0014a4c:	57                   	push   edi
c0014a4d:	68 4b a7 02 c0       	push   0xc002a74b
c0014a52:	e8 be e0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014a57:	58                   	pop    eax
c0014a58:	5a                   	pop    edx
c0014a59:	56                   	push   esi
c0014a5a:	68 56 a7 02 c0       	push   0xc002a756
c0014a5f:	e8 b1 e0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014a64:	59                   	pop    ecx
c0014a65:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014a6a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a70:	e8 62 c2 ff ff       	call   c0010cd7 <setActiveTerminal(VgaText*)>
c0014a75:	58                   	pop    eax
c0014a76:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014a79:	5a                   	pop    edx
c0014a7a:	c1 e0 05             	shl    eax,0x5
c0014a7d:	05 40 cb 02 c0       	add    eax,0xc002cb40
c0014a82:	50                   	push   eax
c0014a83:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014a88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a8e:	e8 63 c6 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014a93:	59                   	pop    ecx
c0014a94:	58                   	pop    eax
c0014a95:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014a9a:	68 61 a7 02 c0       	push   0xc002a761
c0014a9f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aa5:	e8 4c c6 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014aaa:	58                   	pop    eax
c0014aab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ab0:	5a                   	pop    edx
c0014ab1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ab4:	83 c0 0c             	add    eax,0xc
c0014ab7:	50                   	push   eax
c0014ab8:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014abd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ac3:	e8 2e c6 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014ac8:	59                   	pop    ecx
c0014ac9:	58                   	pop    eax
c0014aca:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014acf:	68 6a a7 02 c0       	push   0xc002a76a
c0014ad4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ada:	e8 17 c6 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014adf:	58                   	pop    eax
c0014ae0:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014ae5:	5a                   	pop    edx
c0014ae6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ae9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aef:	e8 28 c6 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014af4:	59                   	pop    ecx
c0014af5:	58                   	pop    eax
c0014af6:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014afb:	68 72 a7 02 c0       	push   0xc002a772
c0014b00:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b06:	e8 eb c5 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014b0b:	58                   	pop    eax
c0014b0c:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014b11:	5a                   	pop    edx
c0014b12:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014b15:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b1b:	e8 fc c5 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014b20:	59                   	pop    ecx
c0014b21:	58                   	pop    eax
c0014b22:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014b27:	68 7a a7 02 c0       	push   0xc002a77a
c0014b2c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b32:	e8 bf c5 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014b37:	58                   	pop    eax
c0014b38:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014b3d:	5a                   	pop    edx
c0014b3e:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014b41:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b47:	e8 d0 c5 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014b4c:	59                   	pop    ecx
c0014b4d:	58                   	pop    eax
c0014b4e:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014b53:	68 82 a7 02 c0       	push   0xc002a782
c0014b58:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b5e:	e8 93 c5 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014b63:	58                   	pop    eax
c0014b64:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014b69:	5a                   	pop    edx
c0014b6a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014b6d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b73:	e8 a4 c5 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014b78:	59                   	pop    ecx
c0014b79:	58                   	pop    eax
c0014b7a:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014b7f:	68 8a a7 02 c0       	push   0xc002a78a
c0014b84:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b8a:	e8 67 c5 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014b8f:	58                   	pop    eax
c0014b90:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014b95:	5a                   	pop    edx
c0014b96:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014b99:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b9f:	e8 78 c5 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014ba4:	59                   	pop    ecx
c0014ba5:	58                   	pop    eax
c0014ba6:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014bab:	68 92 a7 02 c0       	push   0xc002a792
c0014bb0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bb6:	e8 3b c5 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014bbb:	58                   	pop    eax
c0014bbc:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014bc1:	5a                   	pop    edx
c0014bc2:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014bc5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bcb:	e8 4c c5 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014bd0:	59                   	pop    ecx
c0014bd1:	58                   	pop    eax
c0014bd2:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014bd7:	68 9a a7 02 c0       	push   0xc002a79a
c0014bdc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014be2:	e8 0f c5 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014be7:	58                   	pop    eax
c0014be8:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014bed:	5a                   	pop    edx
c0014bee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014bf2:	52                   	push   edx
c0014bf3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bf9:	e8 1e c5 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014bfe:	59                   	pop    ecx
c0014bff:	58                   	pop    eax
c0014c00:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014c05:	68 a3 a7 02 c0       	push   0xc002a7a3
c0014c0a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c10:	e8 e1 c4 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014c15:	58                   	pop    eax
c0014c16:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014c1b:	5a                   	pop    edx
c0014c1c:	57                   	push   edi
c0014c1d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c23:	e8 f4 c4 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014c28:	59                   	pop    ecx
c0014c29:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014c2e:	5f                   	pop    edi
c0014c2f:	68 ab a7 02 c0       	push   0xc002a7ab
c0014c34:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c3a:	e8 b7 c4 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014c3f:	58                   	pop    eax
c0014c40:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014c45:	5a                   	pop    edx
c0014c46:	56                   	push   esi
c0014c47:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c4d:	e8 ca c4 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014c52:	59                   	pop    ecx
c0014c53:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014c58:	5e                   	pop    esi
c0014c59:	68 b3 a7 02 c0       	push   0xc002a7b3
c0014c5e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c64:	e8 8d c4 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014c69:	5f                   	pop    edi
c0014c6a:	58                   	pop    eax
c0014c6b:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014c70:	55                   	push   ebp
c0014c71:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c77:	e8 a0 c4 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014c7c:	58                   	pop    eax
c0014c7d:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014c82:	5a                   	pop    edx
c0014c83:	68 bb a7 02 c0       	push   0xc002a7bb
c0014c88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c8e:	e8 63 c4 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014c93:	0f 21 c0             	mov    eax,db0
c0014c96:	59                   	pop    ecx
c0014c97:	5e                   	pop    esi
c0014c98:	50                   	push   eax
c0014c99:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014c9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ca4:	e8 73 c4 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014ca9:	5f                   	pop    edi
c0014caa:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014caf:	5d                   	pop    ebp
c0014cb0:	68 c4 a7 02 c0       	push   0xc002a7c4
c0014cb5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cbb:	e8 36 c4 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014cc0:	0f 21 c8             	mov    eax,db1
c0014cc3:	5a                   	pop    edx
c0014cc4:	59                   	pop    ecx
c0014cc5:	50                   	push   eax
c0014cc6:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014ccb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cd1:	e8 46 c4 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014cd6:	5e                   	pop    esi
c0014cd7:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014cdc:	5f                   	pop    edi
c0014cdd:	68 cc a7 02 c0       	push   0xc002a7cc
c0014ce2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ce8:	e8 09 c4 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014ced:	0f 21 d0             	mov    eax,db2
c0014cf0:	5d                   	pop    ebp
c0014cf1:	5a                   	pop    edx
c0014cf2:	50                   	push   eax
c0014cf3:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014cf8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cfe:	e8 19 c4 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014d03:	59                   	pop    ecx
c0014d04:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014d09:	5e                   	pop    esi
c0014d0a:	68 d4 a7 02 c0       	push   0xc002a7d4
c0014d0f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d15:	e8 dc c3 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014d1a:	0f 21 d8             	mov    eax,db3
c0014d1d:	5f                   	pop    edi
c0014d1e:	5d                   	pop    ebp
c0014d1f:	50                   	push   eax
c0014d20:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014d25:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d2b:	e8 ec c3 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014d30:	58                   	pop    eax
c0014d31:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014d36:	5a                   	pop    edx
c0014d37:	68 dc a7 02 c0       	push   0xc002a7dc
c0014d3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d42:	e8 af c3 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014d47:	0f 21 f0             	mov    eax,db6
c0014d4a:	59                   	pop    ecx
c0014d4b:	5e                   	pop    esi
c0014d4c:	50                   	push   eax
c0014d4d:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014d52:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d58:	e8 bf c3 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014d5d:	5f                   	pop    edi
c0014d5e:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014d63:	5d                   	pop    ebp
c0014d64:	68 e4 a7 02 c0       	push   0xc002a7e4
c0014d69:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d6f:	e8 82 c3 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014d74:	0f 21 f8             	mov    eax,db7
c0014d77:	5a                   	pop    edx
c0014d78:	59                   	pop    ecx
c0014d79:	50                   	push   eax
c0014d7a:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014d7f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d85:	e8 92 c3 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014d8a:	5e                   	pop    esi
c0014d8b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d8e:	e8 41 82 00 00       	call   c001cfd4 <Thr::getDriverNameFromAddress(unsigned long)>
c0014d93:	83 c4 10             	add    esp,0x10
c0014d96:	85 c0                	test   eax,eax
c0014d98:	74 7d                	je     c0014e17 <displayDebugInfo(regs*)+0x48b>
c0014d9a:	89 c6                	mov    esi,eax
c0014d9c:	50                   	push   eax
c0014d9d:	50                   	push   eax
c0014d9e:	56                   	push   esi
c0014d9f:	68 ec a7 02 c0       	push   0xc002a7ec
c0014da4:	e8 6c dd ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014da9:	5a                   	pop    edx
c0014daa:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014daf:	59                   	pop    ecx
c0014db0:	68 fa a7 02 c0       	push   0xc002a7fa
c0014db5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dbb:	e8 36 c3 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014dc0:	5f                   	pop    edi
c0014dc1:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014dc6:	5d                   	pop    ebp
c0014dc7:	56                   	push   esi
c0014dc8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dce:	e8 23 c3 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014dd3:	58                   	pop    eax
c0014dd4:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014dd9:	5a                   	pop    edx
c0014dda:	68 06 a8 02 c0       	push   0xc002a806
c0014ddf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014de5:	e8 0c c3 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c0014dea:	59                   	pop    ecx
c0014deb:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0014df0:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014df6:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014df9:	e8 0d 82 00 00       	call   c001d00b <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014dfe:	5b                   	pop    ebx
c0014dff:	5d                   	pop    ebp
c0014e00:	50                   	push   eax
c0014e01:	57                   	push   edi
c0014e02:	e8 15 c3 ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c0014e07:	58                   	pop    eax
c0014e08:	5a                   	pop    edx
c0014e09:	56                   	push   esi
c0014e0a:	68 12 a8 02 c0       	push   0xc002a812
c0014e0f:	e8 01 dd ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014e14:	83 c4 10             	add    esp,0x10
c0014e17:	fa                   	cli    
c0014e18:	f4                   	hlt    
c0014e19:	eb fe                	jmp    c0014e19 <displayDebugInfo(regs*)+0x48d>

c0014e1b <x87EmulHandler(regs*, void*)>:
c0014e1b:	53                   	push   ebx
c0014e1c:	83 ec 14             	sub    esp,0x14
c0014e1f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014e23:	53                   	push   ebx
c0014e24:	e8 37 a5 00 00       	call   c001f360 <Vm::x87Handler(regs*)>
c0014e29:	83 c4 10             	add    esp,0x10
c0014e2c:	84 c0                	test   al,al
c0014e2e:	74 05                	je     c0014e35 <x87EmulHandler(regs*, void*)+0x1a>
c0014e30:	83 c4 08             	add    esp,0x8
c0014e33:	5b                   	pop    ebx
c0014e34:	c3                   	ret    
c0014e35:	83 ec 0c             	sub    esp,0xc
c0014e38:	68 22 a8 02 c0       	push   0xc002a822
c0014e3d:	e8 d3 dc ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014e42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e45:	e8 42 fb ff ff       	call   c001498c <displayDebugInfo(regs*)>

c0014e4a <gpFault(regs*, void*)>:
c0014e4a:	53                   	push   ebx
c0014e4b:	83 ec 14             	sub    esp,0x14
c0014e4e:	c7 05 30 dd 02 c0 dd e6 01 c0 	mov    DWORD PTR ds:0xc002dd30,0xc001e6dd
c0014e58:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014e5c:	53                   	push   ebx
c0014e5d:	e8 7b 98 00 00       	call   c001e6dd <Vm::faultHandler(regs*)>
c0014e62:	83 c4 10             	add    esp,0x10
c0014e65:	84 c0                	test   al,al
c0014e67:	74 05                	je     c0014e6e <gpFault(regs*, void*)+0x24>
c0014e69:	83 c4 08             	add    esp,0x8
c0014e6c:	5b                   	pop    ebx
c0014e6d:	c3                   	ret    
c0014e6e:	83 ec 0c             	sub    esp,0xc
c0014e71:	68 38 a8 02 c0       	push   0xc002a838
c0014e76:	e8 9a dc ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014e7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e7e:	e8 09 fb ff ff       	call   c001498c <displayDebugInfo(regs*)>

c0014e83 <pgFault(regs*, void*)>:
c0014e83:	83 ec 18             	sub    esp,0x18
c0014e86:	68 53 a8 02 c0       	push   0xc002a853
c0014e8b:	e8 85 dc ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014e90:	58                   	pop    eax
c0014e91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e95:	e8 f2 fa ff ff       	call   c001498c <displayDebugInfo(regs*)>

c0014e9a <otherISRHandler(regs*, void*)>:
c0014e9a:	53                   	push   ebx
c0014e9b:	83 ec 0c             	sub    esp,0xc
c0014e9e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014ea2:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014ea5:	50                   	push   eax
c0014ea6:	50                   	push   eax
c0014ea7:	68 60 a8 02 c0       	push   0xc002a860
c0014eac:	e8 64 dc ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014eb1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014eb4:	e8 d3 fa ff ff       	call   c001498c <displayDebugInfo(regs*)>

c0014eb9 <opcodeFault(regs*, void*)>:
c0014eb9:	55                   	push   ebp
c0014eba:	89 e5                	mov    ebp,esp
c0014ebc:	56                   	push   esi
c0014ebd:	53                   	push   ebx
c0014ebe:	83 ec 40             	sub    esp,0x40
c0014ec1:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c0014ec6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014ecc:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014ed2:	84 c0                	test   al,al
c0014ed4:	74 24                	je     c0014efa <opcodeFault(regs*, void*)+0x41>
c0014ed6:	83 ec 0c             	sub    esp,0xc
c0014ed9:	68 80 a8 02 c0       	push   0xc002a880
c0014ede:	e8 32 dc ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0014ee3:	83 c4 10             	add    esp,0x10
c0014ee6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014eec:	8d 50 19             	lea    edx,[eax+0x19]
c0014eef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ef5:	e9 be 05 00 00       	jmp    c00154b8 <opcodeFault(regs*, void*)+0x5ff>
c0014efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014efd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f00:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014f03:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014f07:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014f0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f0e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f11:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014f14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f17:	8a 00                	mov    al,BYTE PTR [eax]
c0014f19:	3c f0                	cmp    al,0xf0
c0014f1b:	75 17                	jne    c0014f34 <opcodeFault(regs*, void*)+0x7b>
c0014f1d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f23:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f26:	8d 50 01             	lea    edx,[eax+0x1]
c0014f29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f2c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f2f:	e9 da 00 00 00       	jmp    c001500e <opcodeFault(regs*, void*)+0x155>
c0014f34:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f37:	8a 00                	mov    al,BYTE PTR [eax]
c0014f39:	3c f2                	cmp    al,0xf2
c0014f3b:	74 09                	je     c0014f46 <opcodeFault(regs*, void*)+0x8d>
c0014f3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f40:	8a 00                	mov    al,BYTE PTR [eax]
c0014f42:	3c f3                	cmp    al,0xf3
c0014f44:	75 1b                	jne    c0014f61 <opcodeFault(regs*, void*)+0xa8>
c0014f46:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f4a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f50:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f53:	8d 50 01             	lea    edx,[eax+0x1]
c0014f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f59:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f5c:	e9 ad 00 00 00       	jmp    c001500e <opcodeFault(regs*, void*)+0x155>
c0014f61:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f64:	8a 00                	mov    al,BYTE PTR [eax]
c0014f66:	3c 66                	cmp    al,0x66
c0014f68:	75 1f                	jne    c0014f89 <opcodeFault(regs*, void*)+0xd0>
c0014f6a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f6e:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014f72:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f78:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f7b:	8d 50 01             	lea    edx,[eax+0x1]
c0014f7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f81:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f84:	e9 85 00 00 00       	jmp    c001500e <opcodeFault(regs*, void*)+0x155>
c0014f89:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f8c:	8a 00                	mov    al,BYTE PTR [eax]
c0014f8e:	3c 67                	cmp    al,0x67
c0014f90:	75 18                	jne    c0014faa <opcodeFault(regs*, void*)+0xf1>
c0014f92:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f96:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f9c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f9f:	8d 50 01             	lea    edx,[eax+0x1]
c0014fa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fa8:	eb 64                	jmp    c001500e <opcodeFault(regs*, void*)+0x155>
c0014faa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fad:	8a 00                	mov    al,BYTE PTR [eax]
c0014faf:	3c 2e                	cmp    al,0x2e
c0014fb1:	74 09                	je     c0014fbc <opcodeFault(regs*, void*)+0x103>
c0014fb3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fb6:	8a 00                	mov    al,BYTE PTR [eax]
c0014fb8:	3c 3e                	cmp    al,0x3e
c0014fba:	75 18                	jne    c0014fd4 <opcodeFault(regs*, void*)+0x11b>
c0014fbc:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014fc0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014fc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fc9:	8d 50 01             	lea    edx,[eax+0x1]
c0014fcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fcf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fd2:	eb 3a                	jmp    c001500e <opcodeFault(regs*, void*)+0x155>
c0014fd4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fd7:	8a 00                	mov    al,BYTE PTR [eax]
c0014fd9:	3c 36                	cmp    al,0x36
c0014fdb:	74 1b                	je     c0014ff8 <opcodeFault(regs*, void*)+0x13f>
c0014fdd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fe0:	8a 00                	mov    al,BYTE PTR [eax]
c0014fe2:	3c 26                	cmp    al,0x26
c0014fe4:	74 12                	je     c0014ff8 <opcodeFault(regs*, void*)+0x13f>
c0014fe6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fe9:	8a 00                	mov    al,BYTE PTR [eax]
c0014feb:	3c 64                	cmp    al,0x64
c0014fed:	74 09                	je     c0014ff8 <opcodeFault(regs*, void*)+0x13f>
c0014fef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ff2:	8a 00                	mov    al,BYTE PTR [eax]
c0014ff4:	3c 65                	cmp    al,0x65
c0014ff6:	75 16                	jne    c001500e <opcodeFault(regs*, void*)+0x155>
c0014ff8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ffc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014fff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015002:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015005:	8d 50 01             	lea    edx,[eax+0x1]
c0015008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001500b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001500e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015011:	8a 00                	mov    al,BYTE PTR [eax]
c0015013:	3c 0f                	cmp    al,0xf
c0015015:	0f 85 ad 00 00 00    	jne    c00150c8 <opcodeFault(regs*, void*)+0x20f>
c001501b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001501e:	40                   	inc    eax
c001501f:	8a 00                	mov    al,BYTE PTR [eax]
c0015021:	3c c2                	cmp    al,0xc2
c0015023:	74 0e                	je     c0015033 <opcodeFault(regs*, void*)+0x17a>
c0015025:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015028:	40                   	inc    eax
c0015029:	8a 00                	mov    al,BYTE PTR [eax]
c001502b:	3c c3                	cmp    al,0xc3
c001502d:	0f 85 95 00 00 00    	jne    c00150c8 <opcodeFault(regs*, void*)+0x20f>
c0015033:	83 ec 0c             	sub    esp,0xc
c0015036:	68 a3 a8 02 c0       	push   0xc002a8a3
c001503b:	e8 d5 da ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0015040:	83 c4 10             	add    esp,0x10
c0015043:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015046:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015049:	8d 50 01             	lea    edx,[eax+0x1]
c001504c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001504f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015052:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015055:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015058:	8a 00                	mov    al,BYTE PTR [eax]
c001505a:	8d 50 fe             	lea    edx,[eax-0x2]
c001505d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015060:	88 10                	mov    BYTE PTR [eax],dl
c0015062:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015065:	50                   	push   eax
c0015066:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015069:	50                   	push   eax
c001506a:	8d 45 c4             	lea    eax,[ebp-0x3c]
c001506d:	50                   	push   eax
c001506e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015071:	e8 b4 47 00 00       	call   c001982a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015076:	83 c4 10             	add    esp,0x10
c0015079:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001507c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001507f:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015082:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015085:	01 d0                	add    eax,edx
c0015087:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001508a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001508d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015090:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015093:	48                   	dec    eax
c0015094:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001509a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001509d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a3:	83 ec 04             	sub    esp,0x4
c00150a6:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00150a9:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00150ac:	50                   	push   eax
c00150ad:	e8 02 b1 fe ff       	call   c00001b4 <voodooXADD>
c00150b2:	83 c4 10             	add    esp,0x10
c00150b5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00150b8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00150bb:	01 c2                	add    edx,eax
c00150bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150c3:	e9 f0 03 00 00       	jmp    c00154b8 <opcodeFault(regs*, void*)+0x5ff>
c00150c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150cb:	8a 00                	mov    al,BYTE PTR [eax]
c00150cd:	3c 0f                	cmp    al,0xf
c00150cf:	0f 85 8b 01 00 00    	jne    c0015260 <opcodeFault(regs*, void*)+0x3a7>
c00150d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150d8:	40                   	inc    eax
c00150d9:	8a 00                	mov    al,BYTE PTR [eax]
c00150db:	3c c7                	cmp    al,0xc7
c00150dd:	0f 86 7d 01 00 00    	jbe    c0015260 <opcodeFault(regs*, void*)+0x3a7>
c00150e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150e6:	40                   	inc    eax
c00150e7:	8a 00                	mov    al,BYTE PTR [eax]
c00150e9:	3c cf                	cmp    al,0xcf
c00150eb:	0f 87 6f 01 00 00    	ja     c0015260 <opcodeFault(regs*, void*)+0x3a7>
c00150f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150f4:	40                   	inc    eax
c00150f5:	8a 00                	mov    al,BYTE PTR [eax]
c00150f7:	83 c0 38             	add    eax,0x38
c00150fa:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00150fd:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015101:	75 0b                	jne    c001510e <opcodeFault(regs*, void*)+0x255>
c0015103:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015106:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015109:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001510c:	eb 75                	jmp    c0015183 <opcodeFault(regs*, void*)+0x2ca>
c001510e:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015112:	75 0b                	jne    c001511f <opcodeFault(regs*, void*)+0x266>
c0015114:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015117:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001511a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001511d:	eb 64                	jmp    c0015183 <opcodeFault(regs*, void*)+0x2ca>
c001511f:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015123:	75 0b                	jne    c0015130 <opcodeFault(regs*, void*)+0x277>
c0015125:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015128:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001512b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001512e:	eb 53                	jmp    c0015183 <opcodeFault(regs*, void*)+0x2ca>
c0015130:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015134:	75 0b                	jne    c0015141 <opcodeFault(regs*, void*)+0x288>
c0015136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015139:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001513c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001513f:	eb 42                	jmp    c0015183 <opcodeFault(regs*, void*)+0x2ca>
c0015141:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015145:	75 0b                	jne    c0015152 <opcodeFault(regs*, void*)+0x299>
c0015147:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001514a:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001514d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015150:	eb 31                	jmp    c0015183 <opcodeFault(regs*, void*)+0x2ca>
c0015152:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015156:	75 0b                	jne    c0015163 <opcodeFault(regs*, void*)+0x2aa>
c0015158:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001515b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001515e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015161:	eb 20                	jmp    c0015183 <opcodeFault(regs*, void*)+0x2ca>
c0015163:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015167:	75 0b                	jne    c0015174 <opcodeFault(regs*, void*)+0x2bb>
c0015169:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001516c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001516f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015172:	eb 0f                	jmp    c0015183 <opcodeFault(regs*, void*)+0x2ca>
c0015174:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015178:	75 09                	jne    c0015183 <opcodeFault(regs*, void*)+0x2ca>
c001517a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001517d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015180:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015183:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015187:	74 10                	je     c0015199 <opcodeFault(regs*, void*)+0x2e0>
c0015189:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015190:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015197:	eb 2d                	jmp    c00151c6 <opcodeFault(regs*, void*)+0x30d>
c0015199:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001519c:	c1 e0 18             	shl    eax,0x18
c001519f:	89 c2                	mov    edx,eax
c00151a1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00151a4:	c1 e0 08             	shl    eax,0x8
c00151a7:	25 00 00 ff 00       	and    eax,0xff0000
c00151ac:	09 c2                	or     edx,eax
c00151ae:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00151b1:	c1 e8 08             	shr    eax,0x8
c00151b4:	25 00 ff 00 00       	and    eax,0xff00
c00151b9:	09 c2                	or     edx,eax
c00151bb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00151be:	c1 e8 18             	shr    eax,0x18
c00151c1:	09 d0                	or     eax,edx
c00151c3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151c6:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00151ca:	75 0b                	jne    c00151d7 <opcodeFault(regs*, void*)+0x31e>
c00151cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151cf:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151d2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00151d5:	eb 75                	jmp    c001524c <opcodeFault(regs*, void*)+0x393>
c00151d7:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00151db:	75 0b                	jne    c00151e8 <opcodeFault(regs*, void*)+0x32f>
c00151dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151e3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00151e6:	eb 64                	jmp    c001524c <opcodeFault(regs*, void*)+0x393>
c00151e8:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00151ec:	75 0b                	jne    c00151f9 <opcodeFault(regs*, void*)+0x340>
c00151ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00151f4:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00151f7:	eb 53                	jmp    c001524c <opcodeFault(regs*, void*)+0x393>
c00151f9:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00151fd:	75 0b                	jne    c001520a <opcodeFault(regs*, void*)+0x351>
c00151ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015202:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015205:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015208:	eb 42                	jmp    c001524c <opcodeFault(regs*, void*)+0x393>
c001520a:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001520e:	75 0b                	jne    c001521b <opcodeFault(regs*, void*)+0x362>
c0015210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015213:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015216:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015219:	eb 31                	jmp    c001524c <opcodeFault(regs*, void*)+0x393>
c001521b:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001521f:	75 0b                	jne    c001522c <opcodeFault(regs*, void*)+0x373>
c0015221:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015224:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015227:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001522a:	eb 20                	jmp    c001524c <opcodeFault(regs*, void*)+0x393>
c001522c:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015230:	75 0b                	jne    c001523d <opcodeFault(regs*, void*)+0x384>
c0015232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015235:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015238:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001523b:	eb 0f                	jmp    c001524c <opcodeFault(regs*, void*)+0x393>
c001523d:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015241:	75 09                	jne    c001524c <opcodeFault(regs*, void*)+0x393>
c0015243:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015246:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015249:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001524c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001524f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015252:	8d 50 02             	lea    edx,[eax+0x2]
c0015255:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015258:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001525b:	e9 58 02 00 00       	jmp    c00154b8 <opcodeFault(regs*, void*)+0x5ff>
c0015260:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015263:	8a 00                	mov    al,BYTE PTR [eax]
c0015265:	3c 0f                	cmp    al,0xf
c0015267:	0f 85 76 01 00 00    	jne    c00153e3 <opcodeFault(regs*, void*)+0x52a>
c001526d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015270:	40                   	inc    eax
c0015271:	8a 00                	mov    al,BYTE PTR [eax]
c0015273:	3c c7                	cmp    al,0xc7
c0015275:	0f 85 68 01 00 00    	jne    c00153e3 <opcodeFault(regs*, void*)+0x52a>
c001527b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001527e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015281:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015284:	8d 50 01             	lea    edx,[eax+0x1]
c0015287:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001528a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001528d:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015290:	50                   	push   eax
c0015291:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015294:	50                   	push   eax
c0015295:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015298:	50                   	push   eax
c0015299:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001529c:	e8 89 45 00 00       	call   c001982a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00152a1:	83 c4 10             	add    esp,0x10
c00152a4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00152a7:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00152aa:	83 f0 01             	xor    eax,0x1
c00152ad:	84 c0                	test   al,al
c00152af:	0f 84 2e 01 00 00    	je     c00153e3 <opcodeFault(regs*, void*)+0x52a>
c00152b5:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00152b8:	3c 01                	cmp    al,0x1
c00152ba:	0f 85 23 01 00 00    	jne    c00153e3 <opcodeFault(regs*, void*)+0x52a>
c00152c0:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00152c3:	83 f0 01             	xor    eax,0x1
c00152c6:	84 c0                	test   al,al
c00152c8:	0f 84 15 01 00 00    	je     c00153e3 <opcodeFault(regs*, void*)+0x52a>
c00152ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00152d4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00152d7:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00152de:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00152e1:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00152e4:	89 c2                	mov    edx,eax
c00152e6:	b8 00 00 00 00       	mov    eax,0x0
c00152eb:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00152ee:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00152f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f4:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00152f7:	ba 00 00 00 00       	mov    edx,0x0
c00152fc:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00152ff:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015302:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015305:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015308:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001530b:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015312:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015315:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015318:	89 c2                	mov    edx,eax
c001531a:	b8 00 00 00 00       	mov    eax,0x0
c001531f:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015322:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015325:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015328:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001532b:	ba 00 00 00 00       	mov    edx,0x0
c0015330:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015333:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015336:	e8 91 83 00 00       	call   c001d6cc <lockScheduler()>
c001533b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001533e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015341:	8b 00                	mov    eax,DWORD PTR [eax]
c0015343:	89 c1                	mov    ecx,eax
c0015345:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015348:	89 cb                	mov    ebx,ecx
c001534a:	89 d0                	mov    eax,edx
c001534c:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c001534f:	89 c6                	mov    esi,eax
c0015351:	89 f0                	mov    eax,esi
c0015353:	09 d8                	or     eax,ebx
c0015355:	85 c0                	test   eax,eax
c0015357:	75 21                	jne    c001537a <opcodeFault(regs*, void*)+0x4c1>
c0015359:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001535c:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001535f:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015362:	89 01                	mov    DWORD PTR [ecx],eax
c0015364:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015367:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001536d:	83 c8 40             	or     eax,0x40
c0015370:	89 c2                	mov    edx,eax
c0015372:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015375:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015378:	eb 3e                	jmp    c00153b8 <opcodeFault(regs*, void*)+0x4ff>
c001537a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001537d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015380:	8b 00                	mov    eax,DWORD PTR [eax]
c0015382:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015385:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015388:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001538b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015391:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015394:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015397:	89 d0                	mov    eax,edx
c0015399:	31 d2                	xor    edx,edx
c001539b:	89 c3                	mov    ebx,eax
c001539d:	89 d6                	mov    esi,edx
c001539f:	89 da                	mov    edx,ebx
c00153a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a4:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00153a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153aa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00153ad:	83 e0 bf             	and    eax,0xffffffbf
c00153b0:	89 c2                	mov    edx,eax
c00153b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b5:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00153b8:	e8 11 83 00 00       	call   c001d6ce <unlockScheduler()>
c00153bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153c3:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00153c6:	01 c2                	add    edx,eax
c00153c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153cb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153ce:	83 ec 0c             	sub    esp,0xc
c00153d1:	68 b2 a8 02 c0       	push   0xc002a8b2
c00153d6:	e8 3a d7 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00153db:	83 c4 10             	add    esp,0x10
c00153de:	e9 d5 00 00 00       	jmp    c00154b8 <opcodeFault(regs*, void*)+0x5ff>
c00153e3:	83 ec 0c             	sub    esp,0xc
c00153e6:	68 c5 a8 02 c0       	push   0xc002a8c5
c00153eb:	e8 25 d7 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00153f0:	83 c4 10             	add    esp,0x10
c00153f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00153f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153fc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153ff:	c1 e0 04             	shl    eax,0x4
c0015402:	01 d0                	add    eax,edx
c0015404:	83 c0 03             	add    eax,0x3
c0015407:	8a 00                	mov    al,BYTE PTR [eax]
c0015409:	0f b6 d8             	movzx  ebx,al
c001540c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015415:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015418:	c1 e0 04             	shl    eax,0x4
c001541b:	01 d0                	add    eax,edx
c001541d:	83 c0 02             	add    eax,0x2
c0015420:	8a 00                	mov    al,BYTE PTR [eax]
c0015422:	0f b6 c8             	movzx  ecx,al
c0015425:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015428:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001542b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015431:	c1 e0 04             	shl    eax,0x4
c0015434:	01 d0                	add    eax,edx
c0015436:	40                   	inc    eax
c0015437:	8a 00                	mov    al,BYTE PTR [eax]
c0015439:	0f b6 d0             	movzx  edx,al
c001543c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543f:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015445:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015448:	c1 e0 04             	shl    eax,0x4
c001544b:	01 f0                	add    eax,esi
c001544d:	8a 00                	mov    al,BYTE PTR [eax]
c001544f:	0f b6 c0             	movzx  eax,al
c0015452:	83 ec 0c             	sub    esp,0xc
c0015455:	53                   	push   ebx
c0015456:	51                   	push   ecx
c0015457:	52                   	push   edx
c0015458:	50                   	push   eax
c0015459:	68 d8 a8 02 c0       	push   0xc002a8d8
c001545e:	e8 b2 d6 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0015463:	83 c4 20             	add    esp,0x20
c0015466:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015469:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001546c:	83 c0 03             	add    eax,0x3
c001546f:	8a 00                	mov    al,BYTE PTR [eax]
c0015471:	0f b6 d8             	movzx  ebx,al
c0015474:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015477:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001547a:	83 c0 02             	add    eax,0x2
c001547d:	8a 00                	mov    al,BYTE PTR [eax]
c001547f:	0f b6 c8             	movzx  ecx,al
c0015482:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015485:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015488:	40                   	inc    eax
c0015489:	8a 00                	mov    al,BYTE PTR [eax]
c001548b:	0f b6 d0             	movzx  edx,al
c001548e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015491:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015494:	8a 00                	mov    al,BYTE PTR [eax]
c0015496:	0f b6 c0             	movzx  eax,al
c0015499:	83 ec 0c             	sub    esp,0xc
c001549c:	53                   	push   ebx
c001549d:	51                   	push   ecx
c001549e:	52                   	push   edx
c001549f:	50                   	push   eax
c00154a0:	68 00 a9 02 c0       	push   0xc002a900
c00154a5:	e8 6b d6 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00154aa:	83 c4 20             	add    esp,0x20
c00154ad:	83 ec 0c             	sub    esp,0xc
c00154b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154b3:	e8 d4 f4 ff ff       	call   c001498c <displayDebugInfo(regs*)>
c00154b8:	8d 65 f8             	lea    esp,[ebp-0x8]
c00154bb:	5b                   	pop    ebx
c00154bc:	5e                   	pop    esi
c00154bd:	5d                   	pop    ebp
c00154be:	c3                   	ret    

c00154bf <displayProgramFault(char const*)>:
c00154bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00154c7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00154cd:	85 c0                	test   eax,eax
c00154cf:	74 15                	je     c00154e6 <displayProgramFault(char const*)+0x27>
c00154d1:	83 ec 0c             	sub    esp,0xc
c00154d4:	6a 04                	push   0x4
c00154d6:	6a 0f                	push   0xf
c00154d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00154dc:	50                   	push   eax
c00154dd:	e8 d6 b8 ff ff       	call   c0010db8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00154e2:	83 c4 1c             	add    esp,0x1c
c00154e5:	c3                   	ret    
c00154e6:	c3                   	ret    

c00154e7 <setupInterruptController()>:
c00154e7:	55                   	push   ebp
c00154e8:	89 e5                	mov    ebp,esp
c00154ea:	53                   	push   ebx
c00154eb:	83 ec 24             	sub    esp,0x24
c00154ee:	b8 00 00 00 00       	mov    eax,0x0
c00154f3:	85 c0                	test   eax,eax
c00154f5:	0f 95 c0             	setne  al
c00154f8:	84 c0                	test   al,al
c00154fa:	74 5b                	je     c0015557 <setupInterruptController()+0x70>
c00154fc:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015503:	83 ec 0c             	sub    esp,0xc
c0015506:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015509:	e8 38 a3 ff ff       	call   c000f846 <malloc>
c001550e:	83 c4 10             	add    esp,0x10
c0015511:	89 c3                	mov    ebx,eax
c0015513:	83 ec 0c             	sub    esp,0xc
c0015516:	53                   	push   ebx
c0015517:	e8 08 fd 00 00       	call   c0025224 <APIC::APIC()>
c001551c:	83 c4 10             	add    esp,0x10
c001551f:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015522:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015525:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015528:	8b 00                	mov    eax,DWORD PTR [eax]
c001552a:	83 c0 08             	add    eax,0x8
c001552d:	8b 00                	mov    eax,DWORD PTR [eax]
c001552f:	6a 00                	push   0x0
c0015531:	6a 00                	push   0x0
c0015533:	6a 00                	push   0x0
c0015535:	52                   	push   edx
c0015536:	ff d0                	call   eax
c0015538:	83 c4 10             	add    esp,0x10
c001553b:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c0015540:	83 ec 08             	sub    esp,0x8
c0015543:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015546:	50                   	push   eax
c0015547:	e8 f0 e9 ff ff       	call   c0013f3c <Device::addChild(Device*)>
c001554c:	83 c4 10             	add    esp,0x10
c001554f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015552:	e9 52 03 00 00       	jmp    c00158a9 <setupInterruptController()+0x3c2>
c0015557:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c001555c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015562:	83 e0 01             	and    eax,0x1
c0015565:	84 c0                	test   al,al
c0015567:	0f 95 c0             	setne  al
c001556a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001556d:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015574:	83 ec 0c             	sub    esp,0xc
c0015577:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001557a:	e8 c7 a2 ff ff       	call   c000f846 <malloc>
c001557f:	83 c4 10             	add    esp,0x10
c0015582:	89 c3                	mov    ebx,eax
c0015584:	83 ec 0c             	sub    esp,0xc
c0015587:	53                   	push   ebx
c0015588:	e8 ef 01 01 00       	call   c002577c <PIC::PIC()>
c001558d:	83 c4 10             	add    esp,0x10
c0015590:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015593:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015596:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015599:	8b 00                	mov    eax,DWORD PTR [eax]
c001559b:	83 c0 08             	add    eax,0x8
c001559e:	8b 00                	mov    eax,DWORD PTR [eax]
c00155a0:	6a 00                	push   0x0
c00155a2:	6a 00                	push   0x0
c00155a4:	6a 00                	push   0x0
c00155a6:	52                   	push   edx
c00155a7:	ff d0                	call   eax
c00155a9:	83 c4 10             	add    esp,0x10
c00155ac:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00155b0:	74 73                	je     c0015625 <setupInterruptController()+0x13e>
c00155b2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00155b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ba:	83 c0 0c             	add    eax,0xc
c00155bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00155bf:	6a 00                	push   0x0
c00155c1:	6a 00                	push   0x0
c00155c3:	6a 00                	push   0x0
c00155c5:	52                   	push   edx
c00155c6:	ff d0                	call   eax
c00155c8:	83 c4 10             	add    esp,0x10
c00155cb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00155cf:	74 15                	je     c00155e6 <setupInterruptController()+0xff>
c00155d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d6:	83 c0 04             	add    eax,0x4
c00155d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00155db:	83 ec 0c             	sub    esp,0xc
c00155de:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155e1:	ff d0                	call   eax
c00155e3:	83 c4 10             	add    esp,0x10
c00155e6:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00155ed:	83 ec 0c             	sub    esp,0xc
c00155f0:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00155f3:	e8 4e a2 ff ff       	call   c000f846 <malloc>
c00155f8:	83 c4 10             	add    esp,0x10
c00155fb:	89 c3                	mov    ebx,eax
c00155fd:	83 ec 0c             	sub    esp,0xc
c0015600:	53                   	push   ebx
c0015601:	e8 1e fc 00 00       	call   c0025224 <APIC::APIC()>
c0015606:	83 c4 10             	add    esp,0x10
c0015609:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001560c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001560f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015612:	8b 00                	mov    eax,DWORD PTR [eax]
c0015614:	83 c0 08             	add    eax,0x8
c0015617:	8b 00                	mov    eax,DWORD PTR [eax]
c0015619:	6a 00                	push   0x0
c001561b:	6a 00                	push   0x0
c001561d:	6a 00                	push   0x0
c001561f:	52                   	push   edx
c0015620:	ff d0                	call   eax
c0015622:	83 c4 10             	add    esp,0x10
c0015625:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c001562a:	83 ec 08             	sub    esp,0x8
c001562d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015630:	50                   	push   eax
c0015631:	e8 06 e9 ff ff       	call   c0013f3c <Device::addChild(Device*)>
c0015636:	83 c4 10             	add    esp,0x10
c0015639:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001563c:	8b 00                	mov    eax,DWORD PTR [eax]
c001563e:	83 c0 24             	add    eax,0x24
c0015641:	8b 00                	mov    eax,DWORD PTR [eax]
c0015643:	6a 00                	push   0x0
c0015645:	68 9a 4e 01 c0       	push   0xc0014e9a
c001564a:	6a 00                	push   0x0
c001564c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001564f:	ff d0                	call   eax
c0015651:	83 c4 10             	add    esp,0x10
c0015654:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015657:	8b 00                	mov    eax,DWORD PTR [eax]
c0015659:	83 c0 24             	add    eax,0x24
c001565c:	8b 00                	mov    eax,DWORD PTR [eax]
c001565e:	6a 00                	push   0x0
c0015660:	68 9a 4e 01 c0       	push   0xc0014e9a
c0015665:	6a 01                	push   0x1
c0015667:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001566a:	ff d0                	call   eax
c001566c:	83 c4 10             	add    esp,0x10
c001566f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015672:	8b 00                	mov    eax,DWORD PTR [eax]
c0015674:	83 c0 24             	add    eax,0x24
c0015677:	8b 00                	mov    eax,DWORD PTR [eax]
c0015679:	6a 00                	push   0x0
c001567b:	68 e9 47 01 c0       	push   0xc00147e9
c0015680:	6a 02                	push   0x2
c0015682:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015685:	ff d0                	call   eax
c0015687:	83 c4 10             	add    esp,0x10
c001568a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001568d:	8b 00                	mov    eax,DWORD PTR [eax]
c001568f:	83 c0 24             	add    eax,0x24
c0015692:	8b 00                	mov    eax,DWORD PTR [eax]
c0015694:	6a 00                	push   0x0
c0015696:	68 9a 4e 01 c0       	push   0xc0014e9a
c001569b:	6a 03                	push   0x3
c001569d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156a0:	ff d0                	call   eax
c00156a2:	83 c4 10             	add    esp,0x10
c00156a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00156aa:	83 c0 24             	add    eax,0x24
c00156ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00156af:	6a 00                	push   0x0
c00156b1:	68 9a 4e 01 c0       	push   0xc0014e9a
c00156b6:	6a 04                	push   0x4
c00156b8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156bb:	ff d0                	call   eax
c00156bd:	83 c4 10             	add    esp,0x10
c00156c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00156c5:	83 c0 24             	add    eax,0x24
c00156c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ca:	6a 00                	push   0x0
c00156cc:	68 9a 4e 01 c0       	push   0xc0014e9a
c00156d1:	6a 05                	push   0x5
c00156d3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156d6:	ff d0                	call   eax
c00156d8:	83 c4 10             	add    esp,0x10
c00156db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156de:	8b 00                	mov    eax,DWORD PTR [eax]
c00156e0:	83 c0 24             	add    eax,0x24
c00156e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00156e5:	6a 00                	push   0x0
c00156e7:	68 b9 4e 01 c0       	push   0xc0014eb9
c00156ec:	6a 06                	push   0x6
c00156ee:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156f1:	ff d0                	call   eax
c00156f3:	83 c4 10             	add    esp,0x10
c00156f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00156fb:	83 c0 24             	add    eax,0x24
c00156fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015700:	6a 00                	push   0x0
c0015702:	68 1b 4e 01 c0       	push   0xc0014e1b
c0015707:	6a 07                	push   0x7
c0015709:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001570c:	ff d0                	call   eax
c001570e:	83 c4 10             	add    esp,0x10
c0015711:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015714:	8b 00                	mov    eax,DWORD PTR [eax]
c0015716:	83 c0 24             	add    eax,0x24
c0015719:	8b 00                	mov    eax,DWORD PTR [eax]
c001571b:	6a 00                	push   0x0
c001571d:	68 04 46 01 c0       	push   0xc0014604
c0015722:	6a 08                	push   0x8
c0015724:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015727:	ff d0                	call   eax
c0015729:	83 c4 10             	add    esp,0x10
c001572c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001572f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015731:	83 c0 24             	add    eax,0x24
c0015734:	8b 00                	mov    eax,DWORD PTR [eax]
c0015736:	6a 00                	push   0x0
c0015738:	68 9a 4e 01 c0       	push   0xc0014e9a
c001573d:	6a 09                	push   0x9
c001573f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015742:	ff d0                	call   eax
c0015744:	83 c4 10             	add    esp,0x10
c0015747:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001574a:	8b 00                	mov    eax,DWORD PTR [eax]
c001574c:	83 c0 24             	add    eax,0x24
c001574f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015751:	6a 00                	push   0x0
c0015753:	68 9a 4e 01 c0       	push   0xc0014e9a
c0015758:	6a 0a                	push   0xa
c001575a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001575d:	ff d0                	call   eax
c001575f:	83 c4 10             	add    esp,0x10
c0015762:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015765:	8b 00                	mov    eax,DWORD PTR [eax]
c0015767:	83 c0 24             	add    eax,0x24
c001576a:	8b 00                	mov    eax,DWORD PTR [eax]
c001576c:	6a 00                	push   0x0
c001576e:	68 9a 4e 01 c0       	push   0xc0014e9a
c0015773:	6a 0b                	push   0xb
c0015775:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015778:	ff d0                	call   eax
c001577a:	83 c4 10             	add    esp,0x10
c001577d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015780:	8b 00                	mov    eax,DWORD PTR [eax]
c0015782:	83 c0 24             	add    eax,0x24
c0015785:	8b 00                	mov    eax,DWORD PTR [eax]
c0015787:	6a 00                	push   0x0
c0015789:	68 9a 4e 01 c0       	push   0xc0014e9a
c001578e:	6a 0c                	push   0xc
c0015790:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015793:	ff d0                	call   eax
c0015795:	83 c4 10             	add    esp,0x10
c0015798:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001579b:	8b 00                	mov    eax,DWORD PTR [eax]
c001579d:	83 c0 24             	add    eax,0x24
c00157a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00157a2:	6a 00                	push   0x0
c00157a4:	68 4a 4e 01 c0       	push   0xc0014e4a
c00157a9:	6a 0d                	push   0xd
c00157ab:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157ae:	ff d0                	call   eax
c00157b0:	83 c4 10             	add    esp,0x10
c00157b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00157b8:	83 c0 24             	add    eax,0x24
c00157bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00157bd:	6a 00                	push   0x0
c00157bf:	68 83 4e 01 c0       	push   0xc0014e83
c00157c4:	6a 0e                	push   0xe
c00157c6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157c9:	ff d0                	call   eax
c00157cb:	83 c4 10             	add    esp,0x10
c00157ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00157d3:	83 c0 24             	add    eax,0x24
c00157d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00157d8:	6a 00                	push   0x0
c00157da:	68 9a 4e 01 c0       	push   0xc0014e9a
c00157df:	6a 0f                	push   0xf
c00157e1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157e4:	ff d0                	call   eax
c00157e6:	83 c4 10             	add    esp,0x10
c00157e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00157ee:	83 c0 24             	add    eax,0x24
c00157f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00157f3:	6a 00                	push   0x0
c00157f5:	68 9a 4e 01 c0       	push   0xc0014e9a
c00157fa:	6a 10                	push   0x10
c00157fc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157ff:	ff d0                	call   eax
c0015801:	83 c4 10             	add    esp,0x10
c0015804:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015807:	8b 00                	mov    eax,DWORD PTR [eax]
c0015809:	83 c0 24             	add    eax,0x24
c001580c:	8b 00                	mov    eax,DWORD PTR [eax]
c001580e:	6a 00                	push   0x0
c0015810:	68 9a 4e 01 c0       	push   0xc0014e9a
c0015815:	6a 11                	push   0x11
c0015817:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001581a:	ff d0                	call   eax
c001581c:	83 c4 10             	add    esp,0x10
c001581f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015822:	8b 00                	mov    eax,DWORD PTR [eax]
c0015824:	83 c0 24             	add    eax,0x24
c0015827:	8b 00                	mov    eax,DWORD PTR [eax]
c0015829:	6a 00                	push   0x0
c001582b:	68 9a 4e 01 c0       	push   0xc0014e9a
c0015830:	6a 12                	push   0x12
c0015832:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015835:	ff d0                	call   eax
c0015837:	83 c4 10             	add    esp,0x10
c001583a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001583d:	8b 00                	mov    eax,DWORD PTR [eax]
c001583f:	83 c0 24             	add    eax,0x24
c0015842:	8b 00                	mov    eax,DWORD PTR [eax]
c0015844:	6a 00                	push   0x0
c0015846:	68 9a 4e 01 c0       	push   0xc0014e9a
c001584b:	6a 13                	push   0x13
c001584d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015850:	ff d0                	call   eax
c0015852:	83 c4 10             	add    esp,0x10
c0015855:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015858:	8b 00                	mov    eax,DWORD PTR [eax]
c001585a:	83 c0 24             	add    eax,0x24
c001585d:	8b 00                	mov    eax,DWORD PTR [eax]
c001585f:	6a 00                	push   0x0
c0015861:	68 9a 4e 01 c0       	push   0xc0014e9a
c0015866:	6a 14                	push   0x14
c0015868:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001586b:	ff d0                	call   eax
c001586d:	83 c4 10             	add    esp,0x10
c0015870:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015873:	8b 00                	mov    eax,DWORD PTR [eax]
c0015875:	83 c0 24             	add    eax,0x24
c0015878:	8b 00                	mov    eax,DWORD PTR [eax]
c001587a:	6a 00                	push   0x0
c001587c:	68 9a 4e 01 c0       	push   0xc0014e9a
c0015881:	6a 1e                	push   0x1e
c0015883:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015886:	ff d0                	call   eax
c0015888:	83 c4 10             	add    esp,0x10
c001588b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001588e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015890:	83 c0 24             	add    eax,0x24
c0015893:	8b 00                	mov    eax,DWORD PTR [eax]
c0015895:	6a 00                	push   0x0
c0015897:	68 91 c0 01 c0       	push   0xc001c091
c001589c:	6a 60                	push   0x60
c001589e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158a1:	ff d0                	call   eax
c00158a3:	83 c4 10             	add    esp,0x10
c00158a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158a9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00158ac:	c9                   	leave  
c00158ad:	c3                   	ret    

c00158ae <InterruptController::convertLegacyIRQNumber(int)>:
c00158ae:	55                   	push   ebp
c00158af:	89 e5                	mov    ebp,esp
c00158b1:	83 ec 08             	sub    esp,0x8
c00158b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b7:	83 ec 0c             	sub    esp,0xc
c00158ba:	50                   	push   eax
c00158bb:	e8 68 e9 ff ff       	call   c0014228 <Device::getName()>
c00158c0:	83 c4 10             	add    esp,0x10
c00158c3:	8a 00                	mov    al,BYTE PTR [eax]
c00158c5:	3c 41                	cmp    al,0x41
c00158c7:	0f 94 c0             	sete   al
c00158ca:	84 c0                	test   al,al
c00158cc:	74 28                	je     c00158f6 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00158ce:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00158d2:	7f 12                	jg     c00158e6 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00158d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00158d7:	05 e0 cd 02 c0       	add    eax,0xc002cde0
c00158dc:	8a 00                	mov    al,BYTE PTR [eax]
c00158de:	0f b6 c0             	movzx  eax,al
c00158e1:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00158e4:	eb 10                	jmp    c00158f6 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00158e6:	83 ec 0c             	sub    esp,0xc
c00158e9:	68 20 a6 02 c0       	push   0xc002a620
c00158ee:	e8 4a 47 00 00       	call   c001a03d <Krnl::panic(char const*)>
c00158f3:	83 c4 10             	add    esp,0x10
c00158f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00158f9:	c9                   	leave  
c00158fa:	c3                   	ret    
c00158fb:	90                   	nop

c00158fc <startGUI(void*)>:
c00158fc:	55                   	push   ebp
c00158fd:	89 e5                	mov    ebp,esp
c00158ff:	53                   	push   ebx
c0015900:	83 ec 04             	sub    esp,0x4
c0015903:	e8 c6 7d 00 00       	call   c001d6ce <unlockScheduler()>
c0015908:	8b 1d 88 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db88
c001590e:	83 ec 08             	sub    esp,0x8
c0015911:	6a 01                	push   0x1
c0015913:	68 70 a9 02 c0       	push   0xc002a970
c0015918:	e8 08 77 00 00       	call   c001d025 <Thr::loadDLL(char const*, bool)>
c001591d:	83 c4 10             	add    esp,0x10
c0015920:	83 ec 08             	sub    esp,0x8
c0015923:	53                   	push   ebx
c0015924:	50                   	push   eax
c0015925:	e8 2f 79 00 00       	call   c001d259 <Thr::executeDLL(unsigned long, void*)>
c001592a:	83 c4 10             	add    esp,0x10
c001592d:	8b 1d 88 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db88
c0015933:	83 ec 08             	sub    esp,0x8
c0015936:	6a 01                	push   0x1
c0015938:	68 8a a9 02 c0       	push   0xc002a98a
c001593d:	e8 e3 76 00 00       	call   c001d025 <Thr::loadDLL(char const*, bool)>
c0015942:	83 c4 10             	add    esp,0x10
c0015945:	83 ec 08             	sub    esp,0x8
c0015948:	53                   	push   ebx
c0015949:	50                   	push   eax
c001594a:	e8 0a 79 00 00       	call   c001d259 <Thr::executeDLL(unsigned long, void*)>
c001594f:	83 c4 10             	add    esp,0x10
c0015952:	90                   	nop
c0015953:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015956:	c9                   	leave  
c0015957:	c3                   	ret    

c0015958 <startGUIVESA(void*)>:
c0015958:	55                   	push   ebp
c0015959:	89 e5                	mov    ebp,esp
c001595b:	53                   	push   ebx
c001595c:	83 ec 04             	sub    esp,0x4
c001595f:	e8 6a 7d 00 00       	call   c001d6ce <unlockScheduler()>
c0015964:	8b 1d 88 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db88
c001596a:	83 ec 08             	sub    esp,0x8
c001596d:	6a 01                	push   0x1
c001596f:	68 a4 a9 02 c0       	push   0xc002a9a4
c0015974:	e8 ac 76 00 00       	call   c001d025 <Thr::loadDLL(char const*, bool)>
c0015979:	83 c4 10             	add    esp,0x10
c001597c:	83 ec 08             	sub    esp,0x8
c001597f:	53                   	push   ebx
c0015980:	50                   	push   eax
c0015981:	e8 d3 78 00 00       	call   c001d259 <Thr::executeDLL(unsigned long, void*)>
c0015986:	83 c4 10             	add    esp,0x10
c0015989:	8b 1d 88 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db88
c001598f:	83 ec 08             	sub    esp,0x8
c0015992:	6a 01                	push   0x1
c0015994:	68 8a a9 02 c0       	push   0xc002a98a
c0015999:	e8 87 76 00 00       	call   c001d025 <Thr::loadDLL(char const*, bool)>
c001599e:	83 c4 10             	add    esp,0x10
c00159a1:	83 ec 08             	sub    esp,0x8
c00159a4:	53                   	push   ebx
c00159a5:	50                   	push   eax
c00159a6:	e8 ae 78 00 00       	call   c001d259 <Thr::executeDLL(unsigned long, void*)>
c00159ab:	83 c4 10             	add    esp,0x10
c00159ae:	90                   	nop
c00159af:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00159b2:	c9                   	leave  
c00159b3:	c3                   	ret    

c00159b4 <sendKeyToTerminal(unsigned char)>:
c00159b4:	55                   	push   ebp
c00159b5:	89 e5                	mov    ebp,esp
c00159b7:	83 ec 28             	sub    esp,0x28
c00159ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159bd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00159c0:	a1 64 dc 02 c0       	mov    eax,ds:0xc002dc64
c00159c5:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00159c9:	83 ec 08             	sub    esp,0x8
c00159cc:	52                   	push   edx
c00159cd:	50                   	push   eax
c00159ce:	e8 21 b9 ff ff       	call   c00112f4 <VgaText::receiveKey(unsigned char)>
c00159d3:	83 c4 10             	add    esp,0x10
c00159d6:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00159da:	75 41                	jne    c0015a1d <sendKeyToTerminal(unsigned char)+0x69>
c00159dc:	e8 12 7d 00 00       	call   c001d6f3 <lockStuff()>
c00159e1:	a1 40 dd 02 c0       	mov    eax,ds:0xc002dd40
c00159e6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00159e9:	c7 05 40 dd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dd40,0x0
c00159f3:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159f7:	74 1f                	je     c0015a18 <sendKeyToTerminal(unsigned char)+0x64>
c00159f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159fc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00159ff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a02:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015a05:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015a08:	83 ec 0c             	sub    esp,0xc
c0015a0b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015a0e:	e8 d1 82 00 00       	call   c001dce4 <unblockTask(ThreadControlBlock*)>
c0015a13:	83 c4 10             	add    esp,0x10
c0015a16:	eb db                	jmp    c00159f3 <sendKeyToTerminal(unsigned char)+0x3f>
c0015a18:	e8 70 80 00 00       	call   c001da8d <unlockStuff()>
c0015a1d:	90                   	nop
c0015a1e:	c9                   	leave  
c0015a1f:	c3                   	ret    

c0015a20 <sendKeyboardToken(KeyboardToken)>:
c0015a20:	55                   	push   ebp
c0015a21:	89 e5                	mov    ebp,esp
c0015a23:	83 ec 18             	sub    esp,0x18
c0015a26:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015a29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a2c:	0f b7 c0             	movzx  eax,ax
c0015a2f:	83 f2 01             	xor    edx,0x1
c0015a32:	88 90 60 dd 02 c0    	mov    BYTE PTR [eax-0x3ffd22a0],dl
c0015a38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a3b:	66 3d 03 02          	cmp    ax,0x203
c0015a3f:	75 07                	jne    c0015a48 <sendKeyboardToken(KeyboardToken)+0x28>
c0015a41:	a0 60 de 02 c0       	mov    al,ds:0xc002de60
c0015a46:	84 c0                	test   al,al
c0015a48:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015a4c:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015a4f:	a0 68 e1 02 c0       	mov    al,ds:0xc002e168
c0015a54:	38 c2                	cmp    dl,al
c0015a56:	74 1c                	je     c0015a74 <sendKeyboardToken(KeyboardToken)+0x54>
c0015a58:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015a5b:	a2 68 e1 02 c0       	mov    ds:0xc002e168,al
c0015a60:	a0 68 e1 02 c0       	mov    al,ds:0xc002e168
c0015a65:	0f b6 c0             	movzx  eax,al
c0015a68:	83 ec 0c             	sub    esp,0xc
c0015a6b:	50                   	push   eax
c0015a6c:	e8 e3 aa ff ff       	call   c0010554 <setTerminalScrollLock(bool)>
c0015a71:	83 c4 10             	add    esp,0x10
c0015a74:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015a77:	84 c0                	test   al,al
c0015a79:	0f 84 ae 00 00 00    	je     c0015b2d <sendKeyboardToken(KeyboardToken)+0x10d>
c0015a7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a82:	66 3d 10 03          	cmp    ax,0x310
c0015a86:	75 06                	jne    c0015a8e <sendKeyboardToken(KeyboardToken)+0x6e>
c0015a88:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015a8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a91:	66 3d 11 03          	cmp    ax,0x311
c0015a95:	75 06                	jne    c0015a9d <sendKeyboardToken(KeyboardToken)+0x7d>
c0015a97:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015a9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aa0:	66 3d 12 03          	cmp    ax,0x312
c0015aa4:	75 06                	jne    c0015aac <sendKeyboardToken(KeyboardToken)+0x8c>
c0015aa6:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015aac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aaf:	66 3d 13 03          	cmp    ax,0x313
c0015ab3:	75 06                	jne    c0015abb <sendKeyboardToken(KeyboardToken)+0x9b>
c0015ab5:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015abe:	66 3d 14 03          	cmp    ax,0x314
c0015ac2:	75 06                	jne    c0015aca <sendKeyboardToken(KeyboardToken)+0xaa>
c0015ac4:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015aca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015acd:	66 3d 15 03          	cmp    ax,0x315
c0015ad1:	75 06                	jne    c0015ad9 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015ad3:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015ad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015adc:	66 3d 16 03          	cmp    ax,0x316
c0015ae0:	75 06                	jne    c0015ae8 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015ae2:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015ae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aeb:	66 3d 17 03          	cmp    ax,0x317
c0015aef:	75 06                	jne    c0015af7 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015af1:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015af7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015afa:	66 3d 18 03          	cmp    ax,0x318
c0015afe:	75 06                	jne    c0015b06 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015b00:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015b06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b09:	66 3d 19 03          	cmp    ax,0x319
c0015b0d:	75 06                	jne    c0015b15 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015b0f:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015b15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b18:	66 3d 1a 03          	cmp    ax,0x31a
c0015b1c:	0f 85 c9 00 00 00    	jne    c0015beb <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015b22:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015b28:	e9 be 00 00 00       	jmp    c0015beb <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015b2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b30:	66 3d 10 03          	cmp    ax,0x310
c0015b34:	75 0a                	jne    c0015b40 <sendKeyboardToken(KeyboardToken)+0x120>
c0015b36:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015b3c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b43:	66 3d 11 03          	cmp    ax,0x311
c0015b47:	75 0a                	jne    c0015b53 <sendKeyboardToken(KeyboardToken)+0x133>
c0015b49:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015b4f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b56:	66 3d 12 03          	cmp    ax,0x312
c0015b5a:	75 0a                	jne    c0015b66 <sendKeyboardToken(KeyboardToken)+0x146>
c0015b5c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015b62:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b69:	66 3d 13 03          	cmp    ax,0x313
c0015b6d:	75 0a                	jne    c0015b79 <sendKeyboardToken(KeyboardToken)+0x159>
c0015b6f:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015b75:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b7c:	66 3d 14 03          	cmp    ax,0x314
c0015b80:	75 0a                	jne    c0015b8c <sendKeyboardToken(KeyboardToken)+0x16c>
c0015b82:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015b88:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b8f:	66 3d 15 03          	cmp    ax,0x315
c0015b93:	75 0a                	jne    c0015b9f <sendKeyboardToken(KeyboardToken)+0x17f>
c0015b95:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015b9b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ba2:	66 3d 16 03          	cmp    ax,0x316
c0015ba6:	75 0a                	jne    c0015bb2 <sendKeyboardToken(KeyboardToken)+0x192>
c0015ba8:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015bae:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bb5:	66 3d 17 03          	cmp    ax,0x317
c0015bb9:	75 0a                	jne    c0015bc5 <sendKeyboardToken(KeyboardToken)+0x1a5>
c0015bbb:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015bc1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bc8:	66 3d 18 03          	cmp    ax,0x318
c0015bcc:	75 0a                	jne    c0015bd8 <sendKeyboardToken(KeyboardToken)+0x1b8>
c0015bce:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015bd4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bdb:	66 3d 19 03          	cmp    ax,0x319
c0015bdf:	75 0a                	jne    c0015beb <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015be1:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015be7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015beb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bee:	66 3d 00 02          	cmp    ax,0x200
c0015bf2:	75 2c                	jne    c0015c20 <sendKeyboardToken(KeyboardToken)+0x200>
c0015bf4:	a0 60 e1 02 c0       	mov    al,ds:0xc002e160
c0015bf9:	83 f0 01             	xor    eax,0x1
c0015bfc:	84 c0                	test   al,al
c0015bfe:	74 20                	je     c0015c20 <sendKeyboardToken(KeyboardToken)+0x200>
c0015c00:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0015c05:	6a 01                	push   0x1
c0015c07:	6a 00                	push   0x0
c0015c09:	68 fc 58 01 c0       	push   0xc00158fc
c0015c0e:	50                   	push   eax
c0015c0f:	e8 ea 7b 00 00       	call   c001d7fe <Process::createThread(void (*)(void*), void*, int)>
c0015c14:	83 c4 10             	add    esp,0x10
c0015c17:	c6 05 60 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e160,0x1
c0015c1e:	eb 33                	jmp    c0015c53 <sendKeyboardToken(KeyboardToken)+0x233>
c0015c20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c23:	66 3d 01 02          	cmp    ax,0x201
c0015c27:	75 2a                	jne    c0015c53 <sendKeyboardToken(KeyboardToken)+0x233>
c0015c29:	a0 60 e1 02 c0       	mov    al,ds:0xc002e160
c0015c2e:	83 f0 01             	xor    eax,0x1
c0015c31:	84 c0                	test   al,al
c0015c33:	74 1e                	je     c0015c53 <sendKeyboardToken(KeyboardToken)+0x233>
c0015c35:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0015c3a:	6a 01                	push   0x1
c0015c3c:	6a 00                	push   0x0
c0015c3e:	68 58 59 01 c0       	push   0xc0015958
c0015c43:	50                   	push   eax
c0015c44:	e8 b5 7b 00 00       	call   c001d7fe <Process::createThread(void (*)(void*), void*, int)>
c0015c49:	83 c4 10             	add    esp,0x10
c0015c4c:	c6 05 60 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e160,0x1
c0015c53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c56:	66 3d 1d 03          	cmp    ax,0x31d
c0015c5a:	75 06                	jne    c0015c62 <sendKeyboardToken(KeyboardToken)+0x242>
c0015c5c:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015c62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c65:	66 3d 1c 03          	cmp    ax,0x31c
c0015c69:	75 06                	jne    c0015c71 <sendKeyboardToken(KeyboardToken)+0x251>
c0015c6b:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015c71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c74:	66 3d 1b 03          	cmp    ax,0x31b
c0015c78:	75 06                	jne    c0015c80 <sendKeyboardToken(KeyboardToken)+0x260>
c0015c7a:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015c80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c83:	66 3d 1e 03          	cmp    ax,0x31e
c0015c87:	75 06                	jne    c0015c8f <sendKeyboardToken(KeyboardToken)+0x26f>
c0015c89:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015c8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c92:	66 3d 1f 03          	cmp    ax,0x31f
c0015c96:	75 06                	jne    c0015c9e <sendKeyboardToken(KeyboardToken)+0x27e>
c0015c98:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015c9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ca1:	66 3d 1a 03          	cmp    ax,0x31a
c0015ca5:	75 06                	jne    c0015cad <sendKeyboardToken(KeyboardToken)+0x28d>
c0015ca7:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015cad:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015cb1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015cb4:	83 f0 01             	xor    eax,0x1
c0015cb7:	84 c0                	test   al,al
c0015cb9:	74 77                	je     c0015d32 <sendKeyboardToken(KeyboardToken)+0x312>
c0015cbb:	a0 61 de 02 c0       	mov    al,ds:0xc002de61
c0015cc0:	84 c0                	test   al,al
c0015cc2:	74 41                	je     c0015d05 <sendKeyboardToken(KeyboardToken)+0x2e5>
c0015cc4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015cc8:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015ccc:	74 2b                	je     c0015cf9 <sendKeyboardToken(KeyboardToken)+0x2d9>
c0015cce:	8b 15 64 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e164
c0015cd4:	89 d0                	mov    eax,edx
c0015cd6:	c1 e0 02             	shl    eax,0x2
c0015cd9:	01 d0                	add    eax,edx
c0015cdb:	01 c0                	add    eax,eax
c0015cdd:	a3 64 e1 02 c0       	mov    ds:0xc002e164,eax
c0015ce2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ce5:	0f b7 c0             	movzx  eax,ax
c0015ce8:	8d 50 d0             	lea    edx,[eax-0x30]
c0015ceb:	a1 64 e1 02 c0       	mov    eax,ds:0xc002e164
c0015cf0:	01 d0                	add    eax,edx
c0015cf2:	a3 64 e1 02 c0       	mov    ds:0xc002e164,eax
c0015cf7:	eb 6d                	jmp    c0015d66 <sendKeyboardToken(KeyboardToken)+0x346>
c0015cf9:	c7 05 64 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e164,0x0
c0015d03:	eb 61                	jmp    c0015d66 <sendKeyboardToken(KeyboardToken)+0x346>
c0015d05:	a1 64 e1 02 c0       	mov    eax,ds:0xc002e164
c0015d0a:	85 c0                	test   eax,eax
c0015d0c:	74 18                	je     c0015d26 <sendKeyboardToken(KeyboardToken)+0x306>
c0015d0e:	a1 64 e1 02 c0       	mov    eax,ds:0xc002e164
c0015d13:	0f b6 c0             	movzx  eax,al
c0015d16:	83 ec 0c             	sub    esp,0xc
c0015d19:	50                   	push   eax
c0015d1a:	e8 95 fc ff ff       	call   c00159b4 <sendKeyToTerminal(unsigned char)>
c0015d1f:	83 c4 10             	add    esp,0x10
c0015d22:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015d26:	c7 05 64 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e164,0x0
c0015d30:	eb 34                	jmp    c0015d66 <sendKeyboardToken(KeyboardToken)+0x346>
c0015d32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d35:	66 3d 01 01          	cmp    ax,0x101
c0015d39:	75 2b                	jne    c0015d66 <sendKeyboardToken(KeyboardToken)+0x346>
c0015d3b:	a1 64 e1 02 c0       	mov    eax,ds:0xc002e164
c0015d40:	85 c0                	test   eax,eax
c0015d42:	74 18                	je     c0015d5c <sendKeyboardToken(KeyboardToken)+0x33c>
c0015d44:	a1 64 e1 02 c0       	mov    eax,ds:0xc002e164
c0015d49:	0f b6 c0             	movzx  eax,al
c0015d4c:	83 ec 0c             	sub    esp,0xc
c0015d4f:	50                   	push   eax
c0015d50:	e8 5f fc ff ff       	call   c00159b4 <sendKeyToTerminal(unsigned char)>
c0015d55:	83 c4 10             	add    esp,0x10
c0015d58:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015d5c:	c7 05 64 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e164,0x0
c0015d66:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015d69:	83 f0 01             	xor    eax,0x1
c0015d6c:	84 c0                	test   al,al
c0015d6e:	74 4c                	je     c0015dbc <sendKeyboardToken(KeyboardToken)+0x39c>
c0015d70:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d73:	83 f0 01             	xor    eax,0x1
c0015d76:	84 c0                	test   al,al
c0015d78:	74 42                	je     c0015dbc <sendKeyboardToken(KeyboardToken)+0x39c>
c0015d7a:	a0 60 de 02 c0       	mov    al,ds:0xc002de60
c0015d7f:	83 f0 01             	xor    eax,0x1
c0015d82:	84 c0                	test   al,al
c0015d84:	74 36                	je     c0015dbc <sendKeyboardToken(KeyboardToken)+0x39c>
c0015d86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d89:	66 83 f8 1f          	cmp    ax,0x1f
c0015d8d:	76 09                	jbe    c0015d98 <sendKeyboardToken(KeyboardToken)+0x378>
c0015d8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d92:	66 83 f8 7e          	cmp    ax,0x7e
c0015d96:	76 12                	jbe    c0015daa <sendKeyboardToken(KeyboardToken)+0x38a>
c0015d98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d9b:	66 83 f8 0a          	cmp    ax,0xa
c0015d9f:	74 09                	je     c0015daa <sendKeyboardToken(KeyboardToken)+0x38a>
c0015da1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015da4:	66 83 f8 08          	cmp    ax,0x8
c0015da8:	75 12                	jne    c0015dbc <sendKeyboardToken(KeyboardToken)+0x39c>
c0015daa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dad:	0f b6 c0             	movzx  eax,al
c0015db0:	83 ec 0c             	sub    esp,0xc
c0015db3:	50                   	push   eax
c0015db4:	e8 fb fb ff ff       	call   c00159b4 <sendKeyToTerminal(unsigned char)>
c0015db9:	83 c4 10             	add    esp,0x10
c0015dbc:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015dbf:	83 f0 01             	xor    eax,0x1
c0015dc2:	84 c0                	test   al,al
c0015dc4:	74 4f                	je     c0015e15 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015dc6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015dc9:	83 f0 01             	xor    eax,0x1
c0015dcc:	84 c0                	test   al,al
c0015dce:	74 45                	je     c0015e15 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015dd0:	a0 60 de 02 c0       	mov    al,ds:0xc002de60
c0015dd5:	84 c0                	test   al,al
c0015dd7:	74 3c                	je     c0015e15 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015dd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ddc:	66 83 f8 3f          	cmp    ax,0x3f
c0015de0:	76 33                	jbe    c0015e15 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015de2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015de5:	66 83 f8 7f          	cmp    ax,0x7f
c0015de9:	77 2a                	ja     c0015e15 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015deb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dee:	88 c2                	mov    dl,al
c0015df0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015df3:	66 83 f8 5f          	cmp    ax,0x5f
c0015df7:	76 04                	jbe    c0015dfd <sendKeyboardToken(KeyboardToken)+0x3dd>
c0015df9:	b0 20                	mov    al,0x20
c0015dfb:	eb 02                	jmp    c0015dff <sendKeyboardToken(KeyboardToken)+0x3df>
c0015dfd:	b0 00                	mov    al,0x0
c0015dff:	29 c2                	sub    edx,eax
c0015e01:	88 d0                	mov    al,dl
c0015e03:	83 e8 40             	sub    eax,0x40
c0015e06:	0f b6 c0             	movzx  eax,al
c0015e09:	83 ec 0c             	sub    esp,0xc
c0015e0c:	50                   	push   eax
c0015e0d:	e8 a2 fb ff ff       	call   c00159b4 <sendKeyToTerminal(unsigned char)>
c0015e12:	83 c4 10             	add    esp,0x10
c0015e15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e18:	66 3d 00 03          	cmp    ax,0x300
c0015e1c:	75 0f                	jne    c0015e2d <sendKeyboardToken(KeyboardToken)+0x40d>
c0015e1e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015e21:	83 f0 01             	xor    eax,0x1
c0015e24:	84 c0                	test   al,al
c0015e26:	74 05                	je     c0015e2d <sendKeyboardToken(KeyboardToken)+0x40d>
c0015e28:	e8 5c af ff ff       	call   c0010d89 <doTerminalCycle()>
c0015e2d:	90                   	nop
c0015e2e:	c9                   	leave  
c0015e2f:	c3                   	ret    

c0015e30 <clearInternalKeybuffer(VgaText*)>:
c0015e30:	55                   	push   ebp
c0015e31:	89 e5                	mov    ebp,esp
c0015e33:	83 ec 08             	sub    esp,0x8
c0015e36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e39:	05 34 11 00 00       	add    eax,0x1134
c0015e3e:	83 ec 0c             	sub    esp,0xc
c0015e41:	50                   	push   eax
c0015e42:	e8 4d a9 fe ff       	call   c0000794 <strlen>
c0015e47:	83 c4 10             	add    esp,0x10
c0015e4a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e4d:	81 c2 34 11 00 00    	add    edx,0x1134
c0015e53:	83 ec 04             	sub    esp,0x4
c0015e56:	50                   	push   eax
c0015e57:	6a 00                	push   0x0
c0015e59:	52                   	push   edx
c0015e5a:	e8 19 a9 fe ff       	call   c0000778 <memset>
c0015e5f:	83 c4 10             	add    esp,0x10
c0015e62:	90                   	nop
c0015e63:	c9                   	leave  
c0015e64:	c3                   	ret    

c0015e65 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015e65:	55                   	push   ebp
c0015e66:	89 e5                	mov    ebp,esp
c0015e68:	83 ec 18             	sub    esp,0x18
c0015e6b:	fb                   	sti    
c0015e6c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015e73:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015e77:	0f 84 8a 00 00 00    	je     c0015f07 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015e7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e80:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015e86:	84 c0                	test   al,al
c0015e88:	75 11                	jne    c0015e9b <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015e8a:	e8 3d 78 00 00       	call   c001d6cc <lockScheduler()>
c0015e8f:	e8 74 7b 00 00       	call   c001da08 <schedule()>
c0015e94:	e8 35 78 00 00       	call   c001d6ce <unlockScheduler()>
c0015e99:	eb e2                	jmp    c0015e7d <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015e9b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e9e:	8d 50 01             	lea    edx,[eax+0x1]
c0015ea1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015ea4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ea7:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015ead:	88 10                	mov    BYTE PTR [eax],dl
c0015eaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eb2:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015eb8:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015ebb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ebe:	05 34 11 00 00       	add    eax,0x1134
c0015ec3:	83 ec 0c             	sub    esp,0xc
c0015ec6:	50                   	push   eax
c0015ec7:	e8 c8 a8 fe ff       	call   c0000794 <strlen>
c0015ecc:	83 c4 10             	add    esp,0x10
c0015ecf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ed2:	81 c2 34 11 00 00    	add    edx,0x1134
c0015ed8:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015edb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ede:	81 c2 34 11 00 00    	add    edx,0x1134
c0015ee4:	83 ec 04             	sub    esp,0x4
c0015ee7:	50                   	push   eax
c0015ee8:	51                   	push   ecx
c0015ee9:	52                   	push   edx
c0015eea:	e8 8d a7 fe ff       	call   c000067c <memmove>
c0015eef:	83 c4 10             	add    esp,0x10
c0015ef2:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015ef5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015ef8:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015efc:	0f 85 71 ff ff ff    	jne    c0015e73 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015f02:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f05:	eb 03                	jmp    c0015f0a <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015f07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f0a:	c9                   	leave  
c0015f0b:	c3                   	ret    

c0015f0c <Keyboard::Keyboard(char const*)>:
c0015f0c:	83 ec 0c             	sub    esp,0xc
c0015f0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f13:	83 ec 08             	sub    esp,0x8
c0015f16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f1a:	50                   	push   eax
c0015f1b:	e8 0c e2 ff ff       	call   c001412c <Device::Device(char const*)>
c0015f20:	83 c4 10             	add    esp,0x10
c0015f23:	ba c8 a9 02 c0       	mov    edx,0xc002a9c8
c0015f28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f2c:	89 10                	mov    DWORD PTR [eax],edx
c0015f2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f32:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015f3c:	c6 05 44 dd 02 c0 01 	mov    BYTE PTR ds:0xc002dd44,0x1
c0015f43:	90                   	nop
c0015f44:	83 c4 0c             	add    esp,0xc
c0015f47:	c3                   	ret    

c0015f48 <Keyboard::~Keyboard()>:
c0015f48:	83 ec 0c             	sub    esp,0xc
c0015f4b:	ba c8 a9 02 c0       	mov    edx,0xc002a9c8
c0015f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f54:	89 10                	mov    DWORD PTR [eax],edx
c0015f56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f5a:	83 ec 0c             	sub    esp,0xc
c0015f5d:	50                   	push   eax
c0015f5e:	e8 ab de ff ff       	call   c0013e0e <Device::~Device()>
c0015f63:	83 c4 10             	add    esp,0x10
c0015f66:	90                   	nop
c0015f67:	83 c4 0c             	add    esp,0xc
c0015f6a:	c3                   	ret    
c0015f6b:	90                   	nop

c0015f6c <Keyboard::~Keyboard()>:
c0015f6c:	83 ec 0c             	sub    esp,0xc
c0015f6f:	83 ec 0c             	sub    esp,0xc
c0015f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f76:	e8 cd ff ff ff       	call   c0015f48 <Keyboard::~Keyboard()>
c0015f7b:	83 c4 10             	add    esp,0x10
c0015f7e:	83 ec 08             	sub    esp,0x8
c0015f81:	68 5c 01 00 00       	push   0x15c
c0015f86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f8a:	e8 a6 ca ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0015f8f:	83 c4 10             	add    esp,0x10
c0015f92:	83 c4 0c             	add    esp,0xc
c0015f95:	c3                   	ret    

c0015f96 <LogicalDisk::close(int, int, void*)>:
c0015f96:	83 c8 ff             	or     eax,0xffffffff
c0015f99:	c3                   	ret    

c0015f9a <LogicalDisk::~LogicalDisk()>:
c0015f9a:	83 ec 0c             	sub    esp,0xc
c0015f9d:	ba 78 aa 02 c0       	mov    edx,0xc002aa78
c0015fa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fa6:	89 10                	mov    DWORD PTR [eax],edx
c0015fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fac:	83 ec 0c             	sub    esp,0xc
c0015faf:	50                   	push   eax
c0015fb0:	e8 59 de ff ff       	call   c0013e0e <Device::~Device()>
c0015fb5:	83 c4 10             	add    esp,0x10
c0015fb8:	90                   	nop
c0015fb9:	83 c4 0c             	add    esp,0xc
c0015fbc:	c3                   	ret    
c0015fbd:	90                   	nop

c0015fbe <LogicalDisk::~LogicalDisk()>:
c0015fbe:	83 ec 0c             	sub    esp,0xc
c0015fc1:	83 ec 0c             	sub    esp,0xc
c0015fc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fc8:	e8 cd ff ff ff       	call   c0015f9a <LogicalDisk::~LogicalDisk()>
c0015fcd:	83 c4 10             	add    esp,0x10
c0015fd0:	83 ec 08             	sub    esp,0x8
c0015fd3:	68 74 01 00 00       	push   0x174
c0015fd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fdc:	e8 54 ca ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0015fe1:	83 c4 10             	add    esp,0x10
c0015fe4:	83 c4 0c             	add    esp,0xc
c0015fe7:	c3                   	ret    

c0015fe8 <LogicalDisk::open(int, int, void*)>:
c0015fe8:	83 ec 18             	sub    esp,0x18
c0015feb:	68 f4 a9 02 c0       	push   0xc002a9f4
c0015ff0:	e8 48 40 00 00       	call   c001a03d <Krnl::panic(char const*)>
c0015ff5:	83 c8 ff             	or     eax,0xffffffff
c0015ff8:	83 c4 1c             	add    esp,0x1c
c0015ffb:	c3                   	ret    

c0015ffc <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015ffc:	53                   	push   ebx
c0015ffd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016001:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016009:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001600f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016015:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001601b:	77 10                	ja     c001602d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001601d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016023:	89 d3                	mov    ebx,edx
c0016025:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001602b:	72 05                	jb     c0016032 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001602d:	83 c8 ff             	or     eax,0xffffffff
c0016030:	89 c2                	mov    edx,eax
c0016032:	5b                   	pop    ebx
c0016033:	c3                   	ret    

c0016034 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016034:	56                   	push   esi
c0016035:	83 c8 ff             	or     eax,0xffffffff
c0016038:	53                   	push   ebx
c0016039:	89 c2                	mov    edx,eax
c001603b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001603f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016043:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016047:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001604d:	77 27                	ja     c0016076 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001604f:	89 d8                	mov    eax,ebx
c0016051:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016057:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001605d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016062:	89 c2                	mov    edx,eax
c0016064:	73 10                	jae    c0016076 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016066:	89 c8                	mov    eax,ecx
c0016068:	89 da                	mov    edx,ebx
c001606a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016070:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016076:	5b                   	pop    ebx
c0016077:	5e                   	pop    esi
c0016078:	c3                   	ret    
c0016079:	90                   	nop

c001607a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001607a:	83 ec 1c             	sub    esp,0x1c
c001607d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016081:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016085:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016089:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001608d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016091:	89 04 24             	mov    DWORD PTR [esp],eax
c0016094:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016098:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001609c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160a0:	83 ec 08             	sub    esp,0x8
c00160a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00160a7:	50                   	push   eax
c00160a8:	e8 7f e0 ff ff       	call   c001412c <Device::Device(char const*)>
c00160ad:	83 c4 10             	add    esp,0x10
c00160b0:	ba 78 aa 02 c0       	mov    edx,0xc002aa78
c00160b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160b9:	89 10                	mov    DWORD PTR [eax],edx
c00160bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160bf:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00160c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160ca:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00160d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00160d5:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00160df:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00160e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00160e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00160eb:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00160f1:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00160f7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00160fb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00160fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016102:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016108:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001610e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016112:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016116:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001611c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016120:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001612a:	90                   	nop
c001612b:	83 c4 1c             	add    esp,0x1c
c001612e:	c3                   	ret    
c001612f:	90                   	nop

c0016130 <LogicalDisk::assignDriveLetter()>:
c0016130:	55                   	push   ebp
c0016131:	57                   	push   edi
c0016132:	56                   	push   esi
c0016133:	53                   	push   ebx
c0016134:	83 ec 14             	sub    esp,0x14
c0016137:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001613b:	8b 3d 80 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e180
c0016141:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016147:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001614b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016151:	8b 3d 84 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e184
c0016157:	3c 01                	cmp    al,0x1
c0016159:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001615d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016161:	19 c0                	sbb    eax,eax
c0016163:	83 e0 02             	and    eax,0x2
c0016166:	83 c0 41             	add    eax,0x41
c0016169:	0f be e8             	movsx  ebp,al
c001616c:	3c 43                	cmp    al,0x43
c001616e:	75 10                	jne    c0016180 <LogicalDisk::assignDriveLetter()+0x50>
c0016170:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016177:	75 5d                	jne    c00161d6 <LogicalDisk::assignDriveLetter()+0xa6>
c0016179:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001617e:	75 56                	jne    c00161d6 <LogicalDisk::assignDriveLetter()+0xa6>
c0016180:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016183:	ba 01 00 00 00       	mov    edx,0x1
c0016188:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001618c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016190:	d3 e2                	shl    edx,cl
c0016192:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016196:	89 d7                	mov    edi,edx
c0016198:	89 d6                	mov    esi,edx
c001619a:	c1 ff 1f             	sar    edi,0x1f
c001619d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00161a1:	21 f9                	and    ecx,edi
c00161a3:	09 d1                	or     ecx,edx
c00161a5:	75 2f                	jne    c00161d6 <LogicalDisk::assignDriveLetter()+0xa6>
c00161a7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00161ab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00161af:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00161b5:	09 f2                	or     edx,esi
c00161b7:	89 15 80 e1 02 c0    	mov    DWORD PTR ds:0xc002e180,edx
c00161bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00161c1:	09 fa                	or     edx,edi
c00161c3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00161c7:	89 15 84 e1 02 c0    	mov    DWORD PTR ds:0xc002e184,edx
c00161cd:	89 1c bd a0 e1 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1e60],ebx
c00161d4:	eb 08                	jmp    c00161de <LogicalDisk::assignDriveLetter()+0xae>
c00161d6:	45                   	inc    ebp
c00161d7:	40                   	inc    eax
c00161d8:	3c 5b                	cmp    al,0x5b
c00161da:	75 90                	jne    c001616c <LogicalDisk::assignDriveLetter()+0x3c>
c00161dc:	31 c0                	xor    eax,eax
c00161de:	83 c4 14             	add    esp,0x14
c00161e1:	5b                   	pop    ebx
c00161e2:	5e                   	pop    esi
c00161e3:	5f                   	pop    edi
c00161e4:	5d                   	pop    ebp
c00161e5:	c3                   	ret    

c00161e6 <LogicalDisk::mount()>:
c00161e6:	56                   	push   esi
c00161e7:	53                   	push   ebx
c00161e8:	51                   	push   ecx
c00161e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00161ed:	8b 1d 08 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd08
c00161f3:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00161fd:	85 db                	test   ebx,ebx
c00161ff:	74 50                	je     c0016251 <LogicalDisk::mount()+0x6b>
c0016201:	e8 b1 74 00 00       	call   c001d6b7 <getIRQNestingLevel()>
c0016206:	52                   	push   edx
c0016207:	52                   	push   edx
c0016208:	50                   	push   eax
c0016209:	68 18 aa 02 c0       	push   0xc002aa18
c001620e:	e8 02 c9 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0016213:	83 c4 0c             	add    esp,0xc
c0016216:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001621d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001621f:	83 e8 41             	sub    eax,0x41
c0016222:	50                   	push   eax
c0016223:	56                   	push   esi
c0016224:	53                   	push   ebx
c0016225:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016228:	83 c4 10             	add    esp,0x10
c001622b:	84 c0                	test   al,al
c001622d:	74 08                	je     c0016237 <LogicalDisk::mount()+0x51>
c001622f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016235:	eb 1c                	jmp    c0016253 <LogicalDisk::mount()+0x6d>
c0016237:	e8 7b 74 00 00       	call   c001d6b7 <getIRQNestingLevel()>
c001623c:	51                   	push   ecx
c001623d:	51                   	push   ecx
c001623e:	50                   	push   eax
c001623f:	68 33 aa 02 c0       	push   0xc002aa33
c0016244:	e8 cc c8 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0016249:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001624c:	83 c4 10             	add    esp,0x10
c001624f:	eb ac                	jmp    c00161fd <LogicalDisk::mount()+0x17>
c0016251:	31 c0                	xor    eax,eax
c0016253:	5a                   	pop    edx
c0016254:	5b                   	pop    ebx
c0016255:	5e                   	pop    esi
c0016256:	c3                   	ret    
c0016257:	90                   	nop

c0016258 <LogicalDisk::unmount()>:
c0016258:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001625c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016266:	c3                   	ret    
c0016267:	90                   	nop

c0016268 <LogicalDisk::eject()>:
c0016268:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001626c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016272:	8b 10                	mov    edx,DWORD PTR [eax]
c0016274:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016278:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001627b:	90                   	nop

c001627c <LogicalDisk::unassignDriveLetter()>:
c001627c:	57                   	push   edi
c001627d:	56                   	push   esi
c001627e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016282:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016289:	84 c9                	test   cl,cl
c001628b:	75 0f                	jne    c001629c <LogicalDisk::unassignDriveLetter()+0x20>
c001628d:	c7 44 24 0c 4e aa 02 c0 	mov    DWORD PTR [esp+0xc],0xc002aa4e
c0016295:	5e                   	pop    esi
c0016296:	5f                   	pop    edi
c0016297:	e9 a1 3d 00 00       	jmp    c001a03d <Krnl::panic(char const*)>
c001629c:	83 e9 41             	sub    ecx,0x41
c001629f:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00162a6:	b8 01 00 00 00       	mov    eax,0x1
c00162ab:	c7 04 8d a0 e1 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1e60],0x0
c00162b6:	d3 e0                	shl    eax,cl
c00162b8:	89 c7                	mov    edi,eax
c00162ba:	f7 d0                	not    eax
c00162bc:	c1 ff 1f             	sar    edi,0x1f
c00162bf:	21 05 80 e1 02 c0    	and    DWORD PTR ds:0xc002e180,eax
c00162c5:	89 fe                	mov    esi,edi
c00162c7:	f7 d6                	not    esi
c00162c9:	21 35 84 e1 02 c0    	and    DWORD PTR ds:0xc002e184,esi
c00162cf:	5e                   	pop    esi
c00162d0:	5f                   	pop    edi
c00162d1:	c3                   	ret    

c00162d2 <LogicalDisk::read(unsigned long long, int, void*)>:
c00162d2:	57                   	push   edi
c00162d3:	56                   	push   esi
c00162d4:	53                   	push   ebx
c00162d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00162d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162dd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00162e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162e5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00162eb:	77 41                	ja     c001632e <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00162ed:	99                   	cdq    
c00162ee:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00162f4:	01 c8                	add    eax,ecx
c00162f6:	11 da                	adc    edx,ebx
c00162f8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00162fe:	19 d7                	sbb    edi,edx
c0016300:	72 33                	jb     c0016335 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016302:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016308:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001630e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016312:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016316:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001631c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016322:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016326:	5b                   	pop    ebx
c0016327:	5e                   	pop    esi
c0016328:	5f                   	pop    edi
c0016329:	e9 b0 0a 00 00       	jmp    c0016dde <VCache::read(unsigned long long, int, void*)>
c001632e:	b8 05 00 00 00       	mov    eax,0x5
c0016333:	eb 05                	jmp    c001633a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016335:	b8 07 00 00 00       	mov    eax,0x7
c001633a:	5b                   	pop    ebx
c001633b:	5e                   	pop    esi
c001633c:	5f                   	pop    edi
c001633d:	c3                   	ret    

c001633e <LogicalDisk::write(unsigned long long, int, void*)>:
c001633e:	57                   	push   edi
c001633f:	56                   	push   esi
c0016340:	53                   	push   ebx
c0016341:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016345:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016349:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001634d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016351:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016357:	77 41                	ja     c001639a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016359:	99                   	cdq    
c001635a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016360:	01 c8                	add    eax,ecx
c0016362:	11 da                	adc    edx,ebx
c0016364:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001636a:	19 d7                	sbb    edi,edx
c001636c:	72 33                	jb     c00163a1 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001636e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016374:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001637a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001637e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016382:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016388:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001638e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016392:	5b                   	pop    ebx
c0016393:	5e                   	pop    esi
c0016394:	5f                   	pop    edi
c0016395:	e9 4e 09 00 00       	jmp    c0016ce8 <VCache::write(unsigned long long, int, void*)>
c001639a:	b8 05 00 00 00       	mov    eax,0x5
c001639f:	eb 05                	jmp    c00163a6 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00163a1:	b8 07 00 00 00       	mov    eax,0x7
c00163a6:	5b                   	pop    ebx
c00163a7:	5e                   	pop    esi
c00163a8:	5f                   	pop    edi
c00163a9:	c3                   	ret    

c00163aa <Mouse::Mouse(char const*)>:
c00163aa:	83 ec 0c             	sub    esp,0xc
c00163ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163b1:	83 ec 08             	sub    esp,0x8
c00163b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163b8:	50                   	push   eax
c00163b9:	e8 6e dd ff ff       	call   c001412c <Device::Device(char const*)>
c00163be:	83 c4 10             	add    esp,0x10
c00163c1:	ba a4 aa 02 c0       	mov    edx,0xc002aaa4
c00163c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ca:	89 10                	mov    DWORD PTR [eax],edx
c00163cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163d0:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00163da:	90                   	nop
c00163db:	83 c4 0c             	add    esp,0xc
c00163de:	c3                   	ret    
c00163df:	90                   	nop

c00163e0 <Mouse::~Mouse()>:
c00163e0:	83 ec 0c             	sub    esp,0xc
c00163e3:	ba a4 aa 02 c0       	mov    edx,0xc002aaa4
c00163e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163ec:	89 10                	mov    DWORD PTR [eax],edx
c00163ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f2:	83 ec 0c             	sub    esp,0xc
c00163f5:	50                   	push   eax
c00163f6:	e8 13 da ff ff       	call   c0013e0e <Device::~Device()>
c00163fb:	83 c4 10             	add    esp,0x10
c00163fe:	90                   	nop
c00163ff:	83 c4 0c             	add    esp,0xc
c0016402:	c3                   	ret    
c0016403:	90                   	nop

c0016404 <Mouse::~Mouse()>:
c0016404:	83 ec 0c             	sub    esp,0xc
c0016407:	83 ec 0c             	sub    esp,0xc
c001640a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001640e:	e8 cd ff ff ff       	call   c00163e0 <Mouse::~Mouse()>
c0016413:	83 c4 10             	add    esp,0x10
c0016416:	83 ec 08             	sub    esp,0x8
c0016419:	68 58 01 00 00       	push   0x158
c001641e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016422:	e8 0e c6 ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0016427:	83 c4 10             	add    esp,0x10
c001642a:	83 c4 0c             	add    esp,0xc
c001642d:	c3                   	ret    

c001642e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001642e:	55                   	push   ebp
c001642f:	57                   	push   edi
c0016430:	56                   	push   esi
c0016431:	53                   	push   ebx
c0016432:	81 ec 28 01 00 00    	sub    esp,0x128
c0016438:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001643f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016446:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001644d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016454:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016458:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001645c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016463:	e8 c0 dd ff ff       	call   c0014228 <Device::getName()>
c0016468:	5a                   	pop    edx
c0016469:	59                   	pop    ecx
c001646a:	50                   	push   eax
c001646b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001646f:	55                   	push   ebp
c0016470:	e8 bf a3 fe ff       	call   c0000834 <strcpy>
c0016475:	5b                   	pop    ebx
c0016476:	58                   	pop    eax
c0016477:	68 c8 aa 02 c0       	push   0xc002aac8
c001647c:	55                   	push   ebp
c001647d:	e8 f2 a4 fe ff       	call   c0000974 <strcat>
c0016482:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016489:	e8 b8 93 ff ff       	call   c000f846 <malloc>
c001648e:	83 c4 0c             	add    esp,0xc
c0016491:	89 c3                	mov    ebx,eax
c0016493:	57                   	push   edi
c0016494:	56                   	push   esi
c0016495:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016499:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001649d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00164a4:	55                   	push   ebp
c00164a5:	50                   	push   eax
c00164a6:	e8 cf fb ff ff       	call   c001607a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00164ab:	83 c4 14             	add    esp,0x14
c00164ae:	53                   	push   ebx
c00164af:	e8 7c fc ff ff       	call   c0016130 <LogicalDisk::assignDriveLetter()>
c00164b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164b7:	89 c6                	mov    esi,eax
c00164b9:	e8 28 fd ff ff       	call   c00161e6 <LogicalDisk::mount()>
c00164be:	58                   	pop    eax
c00164bf:	5a                   	pop    edx
c00164c0:	53                   	push   ebx
c00164c1:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00164c8:	e8 6f da ff ff       	call   c0013f3c <Device::addChild(Device*)>
c00164cd:	59                   	pop    ecx
c00164ce:	89 f0                	mov    eax,esi
c00164d0:	5b                   	pop    ebx
c00164d1:	0f be f0             	movsx  esi,al
c00164d4:	56                   	push   esi
c00164d5:	68 d3 aa 02 c0       	push   0xc002aad3
c00164da:	e8 36 c6 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00164df:	81 c4 2c 01 00 00    	add    esp,0x12c
c00164e5:	5b                   	pop    ebx
c00164e6:	5e                   	pop    esi
c00164e7:	5f                   	pop    edi
c00164e8:	5d                   	pop    ebp
c00164e9:	c3                   	ret    

c00164ea <createPartitionsForDisk(PhysicalDisk*)>:
c00164ea:	55                   	push   ebp
c00164eb:	57                   	push   edi
c00164ec:	56                   	push   esi
c00164ed:	53                   	push   ebx
c00164ee:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00164f4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00164fb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016501:	3d 00 02 00 00       	cmp    eax,0x200
c0016506:	74 27                	je     c001652f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016508:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001650e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016514:	83 ec 10             	sub    esp,0x10
c0016517:	0f a4 f7 0a          	shld   edi,esi,0xa
c001651b:	99                   	cdq    
c001651c:	c1 e6 0a             	shl    esi,0xa
c001651f:	52                   	push   edx
c0016520:	89 fd                	mov    ebp,edi
c0016522:	50                   	push   eax
c0016523:	55                   	push   ebp
c0016524:	56                   	push   esi
c0016525:	e8 82 fd 00 00       	call   c00262ac <__udivdi3>
c001652a:	e9 b1 00 00 00       	jmp    c00165e0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001652f:	83 ec 0c             	sub    esp,0xc
c0016532:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016534:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016538:	56                   	push   esi
c0016539:	6a 01                	push   0x1
c001653b:	6a 00                	push   0x0
c001653d:	6a 00                	push   0x0
c001653f:	53                   	push   ebx
c0016540:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016543:	83 c4 20             	add    esp,0x20
c0016546:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001654e:	75 0a                	jne    c001655a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016550:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016558:	74 2c                	je     c0016586 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001655a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016560:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016566:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001656c:	83 ec 10             	sub    esp,0x10
c001656f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016573:	89 f7                	mov    edi,esi
c0016575:	c1 e0 0a             	shl    eax,0xa
c0016578:	c1 ff 1f             	sar    edi,0x1f
c001657b:	57                   	push   edi
c001657c:	56                   	push   esi
c001657d:	52                   	push   edx
c001657e:	50                   	push   eax
c001657f:	e8 28 fd 00 00       	call   c00262ac <__udivdi3>
c0016584:	eb 5a                	jmp    c00165e0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016586:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001658d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016594:	83 e1 7f             	and    ecx,0x7f
c0016597:	83 e0 7f             	and    eax,0x7f
c001659a:	01 c1                	add    ecx,eax
c001659c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00165a3:	83 e0 7f             	and    eax,0x7f
c00165a6:	01 c1                	add    ecx,eax
c00165a8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00165af:	83 e0 7f             	and    eax,0x7f
c00165b2:	00 c1                	add    cl,al
c00165b4:	74 41                	je     c00165f7 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00165b6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00165bc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00165c2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00165c8:	83 ec 10             	sub    esp,0x10
c00165cb:	0f a4 c2 0a          	shld   edx,eax,0xa
c00165cf:	89 f7                	mov    edi,esi
c00165d1:	c1 e0 0a             	shl    eax,0xa
c00165d4:	c1 ff 1f             	sar    edi,0x1f
c00165d7:	57                   	push   edi
c00165d8:	56                   	push   esi
c00165d9:	52                   	push   edx
c00165da:	50                   	push   eax
c00165db:	e8 cc fc 00 00       	call   c00262ac <__udivdi3>
c00165e0:	83 c4 14             	add    esp,0x14
c00165e3:	52                   	push   edx
c00165e4:	50                   	push   eax
c00165e5:	6a 00                	push   0x0
c00165e7:	6a 00                	push   0x0
c00165e9:	53                   	push   ebx
c00165ea:	e8 3f fe ff ff       	call   c001642e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00165ef:	83 c4 20             	add    esp,0x20
c00165f2:	e9 79 01 00 00       	jmp    c0016770 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00165f7:	89 f0                	mov    eax,esi
c00165f9:	31 f6                	xor    esi,esi
c00165fb:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016602:	75 02                	jne    c0016606 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016604:	89 f1                	mov    ecx,esi
c0016606:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001660d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016614:	c1 e2 08             	shl    edx,0x8
c0016617:	c1 e7 10             	shl    edi,0x10
c001661a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016622:	09 fa                	or     edx,edi
c0016624:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001662c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016633:	83 c0 10             	add    eax,0x10
c0016636:	09 fa                	or     edx,edi
c0016638:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001663f:	c1 e7 18             	shl    edi,0x18
c0016642:	09 fa                	or     edx,edi
c0016644:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001664b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001664f:	c1 e7 10             	shl    edi,0x10
c0016652:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016659:	c1 e2 08             	shl    edx,0x8
c001665c:	09 fa                	or     edx,edi
c001665e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016665:	09 fa                	or     edx,edi
c0016667:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001666e:	c1 e7 18             	shl    edi,0x18
c0016671:	09 fa                	or     edx,edi
c0016673:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016677:	46                   	inc    esi
c0016678:	83 fe 04             	cmp    esi,0x4
c001667b:	0f 85 7a ff ff ff    	jne    c00165fb <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016685:	83 f0 01             	xor    eax,0x1
c0016688:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001668c:	75 57                	jne    c00166e5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001668e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016692:	83 f0 01             	xor    eax,0x1
c0016695:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016699:	75 4a                	jne    c00166e5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001669b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001669f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00166a7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00166af:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00166b5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00166bb:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00166c1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00166c5:	89 f7                	mov    edi,esi
c00166c7:	c1 e0 0a             	shl    eax,0xa
c00166ca:	c1 ff 1f             	sar    edi,0x1f
c00166cd:	57                   	push   edi
c00166ce:	56                   	push   esi
c00166cf:	52                   	push   edx
c00166d0:	50                   	push   eax
c00166d1:	e8 d6 fb 00 00       	call   c00262ac <__udivdi3>
c00166d6:	83 c4 10             	add    esp,0x10
c00166d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00166dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00166e1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00166e5:	84 c9                	test   cl,cl
c00166e7:	74 53                	je     c001673c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00166e9:	0f b6 c9             	movzx  ecx,cl
c00166ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00166f4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00166f8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00166fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016700:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016704:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016708:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001670c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016710:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016714:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016718:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001671c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016720:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016724:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016728:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001672c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016730:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016734:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016738:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001673c:	31 ed                	xor    ebp,ebp
c001673e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016742:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016746:	89 f8                	mov    eax,edi
c0016748:	09 f0                	or     eax,esi
c001674a:	74 1e                	je     c001676a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001674c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016750:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016754:	89 d1                	mov    ecx,edx
c0016756:	09 c1                	or     ecx,eax
c0016758:	74 10                	je     c001676a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001675a:	83 ec 0c             	sub    esp,0xc
c001675d:	57                   	push   edi
c001675e:	56                   	push   esi
c001675f:	52                   	push   edx
c0016760:	50                   	push   eax
c0016761:	53                   	push   ebx
c0016762:	e8 c7 fc ff ff       	call   c001642e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016767:	83 c4 20             	add    esp,0x20
c001676a:	45                   	inc    ebp
c001676b:	83 fd 04             	cmp    ebp,0x4
c001676e:	75 ce                	jne    c001673e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016770:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016776:	5b                   	pop    ebx
c0016777:	5e                   	pop    esi
c0016778:	5f                   	pop    edi
c0016779:	5d                   	pop    ebp
c001677a:	c3                   	ret    
c001677b:	90                   	nop

c001677c <Serial::Serial(char const*)>:
c001677c:	83 ec 0c             	sub    esp,0xc
c001677f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016783:	83 ec 08             	sub    esp,0x8
c0016786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001678a:	50                   	push   eax
c001678b:	e8 9c d9 ff ff       	call   c001412c <Device::Device(char const*)>
c0016790:	83 c4 10             	add    esp,0x10
c0016793:	ba 00 ab 02 c0       	mov    edx,0xc002ab00
c0016798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001679c:	89 10                	mov    DWORD PTR [eax],edx
c001679e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167a2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00167ac:	90                   	nop
c00167ad:	83 c4 0c             	add    esp,0xc
c00167b0:	c3                   	ret    
c00167b1:	90                   	nop

c00167b2 <Serial::~Serial()>:
c00167b2:	83 ec 0c             	sub    esp,0xc
c00167b5:	ba 00 ab 02 c0       	mov    edx,0xc002ab00
c00167ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167be:	89 10                	mov    DWORD PTR [eax],edx
c00167c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167c4:	83 ec 0c             	sub    esp,0xc
c00167c7:	50                   	push   eax
c00167c8:	e8 41 d6 ff ff       	call   c0013e0e <Device::~Device()>
c00167cd:	83 c4 10             	add    esp,0x10
c00167d0:	90                   	nop
c00167d1:	83 c4 0c             	add    esp,0xc
c00167d4:	c3                   	ret    
c00167d5:	90                   	nop

c00167d6 <Serial::~Serial()>:
c00167d6:	83 ec 0c             	sub    esp,0xc
c00167d9:	83 ec 0c             	sub    esp,0xc
c00167dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167e0:	e8 cd ff ff ff       	call   c00167b2 <Serial::~Serial()>
c00167e5:	83 c4 10             	add    esp,0x10
c00167e8:	83 ec 08             	sub    esp,0x8
c00167eb:	68 58 01 00 00       	push   0x158
c00167f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167f4:	e8 3c c2 ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c00167f9:	83 c4 10             	add    esp,0x10
c00167fc:	83 c4 0c             	add    esp,0xc
c00167ff:	c3                   	ret    

c0016800 <Timer::Timer(char const*)>:
c0016800:	83 ec 0c             	sub    esp,0xc
c0016803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016807:	83 ec 08             	sub    esp,0x8
c001680a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001680e:	50                   	push   eax
c001680f:	e8 18 d9 ff ff       	call   c001412c <Device::Device(char const*)>
c0016814:	83 c4 10             	add    esp,0x10
c0016817:	ba 44 ab 02 c0       	mov    edx,0xc002ab44
c001681c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016820:	89 10                	mov    DWORD PTR [eax],edx
c0016822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016826:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016830:	90                   	nop
c0016831:	83 c4 0c             	add    esp,0xc
c0016834:	c3                   	ret    
c0016835:	90                   	nop

c0016836 <Timer::~Timer()>:
c0016836:	83 ec 0c             	sub    esp,0xc
c0016839:	ba 44 ab 02 c0       	mov    edx,0xc002ab44
c001683e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016842:	89 10                	mov    DWORD PTR [eax],edx
c0016844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016848:	83 ec 0c             	sub    esp,0xc
c001684b:	50                   	push   eax
c001684c:	e8 bd d5 ff ff       	call   c0013e0e <Device::~Device()>
c0016851:	83 c4 10             	add    esp,0x10
c0016854:	90                   	nop
c0016855:	83 c4 0c             	add    esp,0xc
c0016858:	c3                   	ret    
c0016859:	90                   	nop

c001685a <Timer::~Timer()>:
c001685a:	83 ec 0c             	sub    esp,0xc
c001685d:	83 ec 0c             	sub    esp,0xc
c0016860:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016864:	e8 cd ff ff ff       	call   c0016836 <Timer::~Timer()>
c0016869:	83 c4 10             	add    esp,0x10
c001686c:	83 ec 08             	sub    esp,0x8
c001686f:	68 5c 01 00 00       	push   0x15c
c0016874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016878:	e8 b8 c1 ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c001687d:	83 c4 10             	add    esp,0x10
c0016880:	83 c4 0c             	add    esp,0xc
c0016883:	c3                   	ret    

c0016884 <Timer::read()>:
c0016884:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016888:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001688e:	c3                   	ret    

c001688f <timerHandler(unsigned long long)>:
c001688f:	55                   	push   ebp
c0016890:	57                   	push   edi
c0016891:	56                   	push   esi
c0016892:	53                   	push   ebx
c0016893:	83 ec 0c             	sub    esp,0xc
c0016896:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001689a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001689e:	01 35 10 e2 02 c0    	add    DWORD PTR ds:0xc002e210,esi
c00168a4:	11 3d 14 e2 02 c0    	adc    DWORD PTR ds:0xc002e214,edi
c00168aa:	80 3d 8d db 02 c0 00 	cmp    BYTE PTR ds:0xc002db8d,0x0
c00168b1:	0f 84 07 01 00 00    	je     c00169be <timerHandler(unsigned long long)+0x12f>
c00168b7:	e8 37 6e 00 00       	call   c001d6f3 <lockStuff()>
c00168bc:	83 ec 0c             	sub    esp,0xc
c00168bf:	68 dc 10 03 c0       	push   0xc00310dc
c00168c4:	e8 55 1a 01 00       	call   c002831e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168c9:	c7 04 24 dc 10 03 c0 	mov    DWORD PTR [esp],0xc00310dc
c00168d0:	89 c3                	mov    ebx,eax
c00168d2:	e8 4f 1a 01 00       	call   c0028326 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00168d7:	83 c4 10             	add    esp,0x10
c00168da:	84 c0                	test   al,al
c00168dc:	74 60                	je     c001693e <timerHandler(unsigned long long)+0xaf>
c00168de:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00168e4:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00168e7:	85 c0                	test   eax,eax
c00168e9:	0f 85 91 00 00 00    	jne    c0016980 <timerHandler(unsigned long long)+0xf1>
c00168ef:	e9 be 00 00 00       	jmp    c00169b2 <timerHandler(unsigned long long)+0x123>
c00168f4:	83 ec 0c             	sub    esp,0xc
c00168f7:	55                   	push   ebp
c00168f8:	e8 e7 73 00 00       	call   c001dce4 <unblockTask(ThreadControlBlock*)>
c00168fd:	83 c4 10             	add    esp,0x10
c0016900:	39 eb                	cmp    ebx,ebp
c0016902:	75 12                	jne    c0016916 <timerHandler(unsigned long long)+0x87>
c0016904:	83 ec 0c             	sub    esp,0xc
c0016907:	68 dc 10 03 c0       	push   0xc00310dc
c001690c:	e8 0d 1a 01 00       	call   c002831e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016911:	89 c3                	mov    ebx,eax
c0016913:	83 c4 10             	add    esp,0x10
c0016916:	83 ec 0c             	sub    esp,0xc
c0016919:	68 dc 10 03 c0       	push   0xc00310dc
c001691e:	e8 03 1a 01 00       	call   c0028326 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016923:	83 c4 10             	add    esp,0x10
c0016926:	84 c0                	test   al,al
c0016928:	75 b4                	jne    c00168de <timerHandler(unsigned long long)+0x4f>
c001692a:	83 ec 0c             	sub    esp,0xc
c001692d:	68 dc 10 03 c0       	push   0xc00310dc
c0016932:	e8 e7 19 01 00       	call   c002831e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016937:	83 c4 10             	add    esp,0x10
c001693a:	39 d8                	cmp    eax,ebx
c001693c:	74 a0                	je     c00168de <timerHandler(unsigned long long)+0x4f>
c001693e:	83 ec 0c             	sub    esp,0xc
c0016941:	68 dc 10 03 c0       	push   0xc00310dc
c0016946:	e8 d3 19 01 00       	call   c002831e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001694b:	c7 04 24 dc 10 03 c0 	mov    DWORD PTR [esp],0xc00310dc
c0016952:	89 c5                	mov    ebp,eax
c0016954:	e8 e9 19 01 00       	call   c0028342 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016959:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001695c:	83 c4 10             	add    esp,0x10
c001695f:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016962:	39 15 10 e2 02 c0    	cmp    DWORD PTR ds:0xc002e210,edx
c0016968:	a1 14 e2 02 c0       	mov    eax,ds:0xc002e214
c001696d:	19 c8                	sbb    eax,ecx
c001696f:	73 83                	jae    c00168f4 <timerHandler(unsigned long long)+0x65>
c0016971:	50                   	push   eax
c0016972:	50                   	push   eax
c0016973:	55                   	push   ebp
c0016974:	68 dc 10 03 c0       	push   0xc00310dc
c0016979:	e8 72 1a 01 00       	call   c00283f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001697e:	eb 93                	jmp    c0016913 <timerHandler(unsigned long long)+0x84>
c0016980:	80 3d 8c db 02 c0 00 	cmp    BYTE PTR ds:0xc002db8c,0x0
c0016987:	74 29                	je     c00169b2 <timerHandler(unsigned long long)+0x123>
c0016989:	39 c6                	cmp    esi,eax
c001698b:	bb 00 00 00 00       	mov    ebx,0x0
c0016990:	19 df                	sbb    edi,ebx
c0016992:	72 19                	jb     c00169ad <timerHandler(unsigned long long)+0x11e>
c0016994:	e8 33 6d 00 00       	call   c001d6cc <lockScheduler()>
c0016999:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001699e:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00169a1:	e8 62 70 00 00       	call   c001da08 <schedule()>
c00169a6:	e8 23 6d 00 00       	call   c001d6ce <unlockScheduler()>
c00169ab:	eb 05                	jmp    c00169b2 <timerHandler(unsigned long long)+0x123>
c00169ad:	29 f0                	sub    eax,esi
c00169af:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00169b2:	83 c4 0c             	add    esp,0xc
c00169b5:	5b                   	pop    ebx
c00169b6:	5e                   	pop    esi
c00169b7:	5f                   	pop    edi
c00169b8:	5d                   	pop    ebp
c00169b9:	e9 cf 70 00 00       	jmp    c001da8d <unlockStuff()>
c00169be:	83 c4 0c             	add    esp,0xc
c00169c1:	5b                   	pop    ebx
c00169c2:	5e                   	pop    esi
c00169c3:	5f                   	pop    edi
c00169c4:	5d                   	pop    ebp
c00169c5:	c3                   	ret    

c00169c6 <setupTimer(int)>:
c00169c6:	57                   	push   edi
c00169c7:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c00169cc:	56                   	push   esi
c00169cd:	53                   	push   ebx
c00169ce:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00169d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00169d8:	83 ec 0c             	sub    esp,0xc
c00169db:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00169e1:	e8 42 d8 ff ff       	call   c0014228 <Device::getName()>
c00169e6:	83 c4 10             	add    esp,0x10
c00169e9:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00169ec:	0f 85 8d 00 00 00    	jne    c0016a7f <setupTimer(int)+0xb9>
c00169f2:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c00169f7:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00169fe:	74 7f                	je     c0016a7f <setupTimer(int)+0xb9>
c0016a00:	83 ec 0c             	sub    esp,0xc
c0016a03:	68 5c 01 00 00       	push   0x15c
c0016a08:	e8 39 8e ff ff       	call   c000f846 <malloc>
c0016a0d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a10:	89 c3                	mov    ebx,eax
c0016a12:	e8 6f f4 00 00       	call   c0025e86 <PIT::PIT()>
c0016a17:	59                   	pop    ecx
c0016a18:	5f                   	pop    edi
c0016a19:	53                   	push   ebx
c0016a1a:	ff 35 88 db 02 c0    	push   DWORD PTR ds:0xc002db88
c0016a20:	e8 17 d5 ff ff       	call   c0013f3c <Device::addChild(Device*)>
c0016a25:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a27:	6a 00                	push   0x0
c0016a29:	6a 00                	push   0x0
c0016a2b:	56                   	push   esi
c0016a2c:	53                   	push   ebx
c0016a2d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a30:	83 c4 14             	add    esp,0x14
c0016a33:	68 60 01 00 00       	push   0x160
c0016a38:	e8 09 8e ff ff       	call   c000f846 <malloc>
c0016a3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a40:	89 c7                	mov    edi,eax
c0016a42:	e8 ef f2 00 00       	call   c0025d36 <APICTimer::APICTimer()>
c0016a47:	6a 00                	push   0x0
c0016a49:	6a 00                	push   0x0
c0016a4b:	56                   	push   esi
c0016a4c:	57                   	push   edi
c0016a4d:	e8 e6 f1 00 00       	call   c0025c38 <APICTimer::open(int, int, void*)>
c0016a52:	83 c4 20             	add    esp,0x20
c0016a55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a57:	6a 00                	push   0x0
c0016a59:	6a 00                	push   0x0
c0016a5b:	6a 00                	push   0x0
c0016a5d:	53                   	push   ebx
c0016a5e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016a61:	58                   	pop    eax
c0016a62:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c0016a67:	5a                   	pop    edx
c0016a68:	57                   	push   edi
c0016a69:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016a6f:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016a75:	e8 c2 d4 ff ff       	call   c0013f3c <Device::addChild(Device*)>
c0016a7a:	83 c4 10             	add    esp,0x10
c0016a7d:	eb 33                	jmp    c0016ab2 <setupTimer(int)+0xec>
c0016a7f:	83 ec 0c             	sub    esp,0xc
c0016a82:	68 5c 01 00 00       	push   0x15c
c0016a87:	e8 ba 8d ff ff       	call   c000f846 <malloc>
c0016a8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a8f:	89 c3                	mov    ebx,eax
c0016a91:	e8 f0 f3 00 00       	call   c0025e86 <PIT::PIT()>
c0016a96:	58                   	pop    eax
c0016a97:	5a                   	pop    edx
c0016a98:	53                   	push   ebx
c0016a99:	ff 35 88 db 02 c0    	push   DWORD PTR ds:0xc002db88
c0016a9f:	e8 98 d4 ff ff       	call   c0013f3c <Device::addChild(Device*)>
c0016aa4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016aa6:	6a 00                	push   0x0
c0016aa8:	6a 00                	push   0x0
c0016aaa:	56                   	push   esi
c0016aab:	53                   	push   ebx
c0016aac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016aaf:	83 c4 20             	add    esp,0x20
c0016ab2:	89 d8                	mov    eax,ebx
c0016ab4:	5b                   	pop    ebx
c0016ab5:	5e                   	pop    esi
c0016ab6:	5f                   	pop    edi
c0016ab7:	c3                   	ret    

c0016ab8 <VCache::VCache(PhysicalDisk*)>:
c0016ab8:	53                   	push   ebx
c0016ab9:	83 ec 18             	sub    esp,0x18
c0016abc:	ba 74 ab 02 c0       	mov    edx,0xc002ab74
c0016ac1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ac5:	89 10                	mov    DWORD PTR [eax],edx
c0016ac7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016acb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016ad2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ad6:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016add:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ae1:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016ae8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016aef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016af3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016afa:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016b01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b05:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016b0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b10:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016b14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b18:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016b1f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016b26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b2a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016b2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b32:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016b36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b3a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016b3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b42:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016b49:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016b51:	83 ec 0c             	sub    esp,0xc
c0016b54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b58:	e8 e9 8c ff ff       	call   c000f846 <malloc>
c0016b5d:	83 c4 10             	add    esp,0x10
c0016b60:	89 c3                	mov    ebx,eax
c0016b62:	83 ec 0c             	sub    esp,0xc
c0016b65:	53                   	push   ebx
c0016b66:	e8 81 6c 00 00       	call   c001d7ec <Mutex::Mutex()>
c0016b6b:	83 c4 10             	add    esp,0x10
c0016b6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b72:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016b75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b79:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016b7d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b84:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016b8b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b8f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016b95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b99:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016b9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ba0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016ba6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016bac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016bb0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016bb3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016bb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bba:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016bbe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016bc2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016bc8:	05 00 01 00 00       	add    eax,0x100
c0016bcd:	c1 e0 04             	shl    eax,0x4
c0016bd0:	83 ec 0c             	sub    esp,0xc
c0016bd3:	50                   	push   eax
c0016bd4:	e8 6d 8c ff ff       	call   c000f846 <malloc>
c0016bd9:	83 c4 10             	add    esp,0x10
c0016bdc:	89 c2                	mov    edx,eax
c0016bde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016be2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016be5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016be9:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016bf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bf4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016bf8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016bfc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016c02:	c1 e0 07             	shl    eax,0x7
c0016c05:	83 ec 0c             	sub    esp,0xc
c0016c08:	50                   	push   eax
c0016c09:	e8 38 8c ff ff       	call   c000f846 <malloc>
c0016c0e:	83 c4 10             	add    esp,0x10
c0016c11:	89 c2                	mov    edx,eax
c0016c13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c17:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016c1a:	90                   	nop
c0016c1b:	83 c4 18             	add    esp,0x18
c0016c1e:	5b                   	pop    ebx
c0016c1f:	c3                   	ret    

c0016c20 <VCache::invalidateReadBuffer()>:
c0016c20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c24:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016c2a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016c2e:	c3                   	ret    
c0016c2f:	90                   	nop

c0016c30 <VCache::writeWriteBuffer()>:
c0016c30:	53                   	push   ebx
c0016c31:	83 ec 14             	sub    esp,0x14
c0016c34:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016c38:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016c3b:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c3d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016c40:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016c43:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016c46:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016c49:	50                   	push   eax
c0016c4a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016c4d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016c54:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016c5b:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016c5f:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016c66:	83 c4 28             	add    esp,0x28
c0016c69:	5b                   	pop    ebx
c0016c6a:	c3                   	ret    
c0016c6b:	90                   	nop

c0016c6c <VCache::~VCache()>:
c0016c6c:	83 ec 0c             	sub    esp,0xc
c0016c6f:	ba 74 ab 02 c0       	mov    edx,0xc002ab74
c0016c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c78:	89 10                	mov    DWORD PTR [eax],edx
c0016c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c7e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016c81:	84 c0                	test   al,al
c0016c83:	74 0f                	je     c0016c94 <VCache::~VCache()+0x28>
c0016c85:	83 ec 0c             	sub    esp,0xc
c0016c88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c8c:	e8 9f ff ff ff       	call   c0016c30 <VCache::writeWriteBuffer()>
c0016c91:	83 c4 10             	add    esp,0x10
c0016c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c98:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016c9b:	83 ec 0c             	sub    esp,0xc
c0016c9e:	50                   	push   eax
c0016c9f:	e8 b2 8b ff ff       	call   c000f856 <free>
c0016ca4:	83 c4 10             	add    esp,0x10
c0016ca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cab:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016cae:	83 ec 0c             	sub    esp,0xc
c0016cb1:	50                   	push   eax
c0016cb2:	e8 9f 8b ff ff       	call   c000f856 <free>
c0016cb7:	83 c4 10             	add    esp,0x10
c0016cba:	90                   	nop
c0016cbb:	83 c4 0c             	add    esp,0xc
c0016cbe:	c3                   	ret    
c0016cbf:	90                   	nop

c0016cc0 <VCache::~VCache()>:
c0016cc0:	83 ec 0c             	sub    esp,0xc
c0016cc3:	83 ec 0c             	sub    esp,0xc
c0016cc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cca:	e8 9d ff ff ff       	call   c0016c6c <VCache::~VCache()>
c0016ccf:	83 c4 10             	add    esp,0x10
c0016cd2:	83 ec 08             	sub    esp,0x8
c0016cd5:	6a 44                	push   0x44
c0016cd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cdb:	e8 55 bd ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0016ce0:	83 c4 10             	add    esp,0x10
c0016ce3:	83 c4 0c             	add    esp,0xc
c0016ce6:	c3                   	ret    
c0016ce7:	90                   	nop

c0016ce8 <VCache::write(unsigned long long, int, void*)>:
c0016ce8:	55                   	push   ebp
c0016ce9:	57                   	push   edi
c0016cea:	56                   	push   esi
c0016ceb:	53                   	push   ebx
c0016cec:	83 ec 28             	sub    esp,0x28
c0016cef:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016cf3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016cf7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016cfb:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016cff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d02:	e8 47 6f 00 00       	call   c001dc4e <Semaphore::acquire()>
c0016d07:	83 c4 10             	add    esp,0x10
c0016d0a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016d0e:	74 0c                	je     c0016d1c <VCache::write(unsigned long long, int, void*)+0x34>
c0016d10:	83 ec 0c             	sub    esp,0xc
c0016d13:	53                   	push   ebx
c0016d14:	e8 07 ff ff ff       	call   c0016c20 <VCache::invalidateReadBuffer()>
c0016d19:	83 c4 10             	add    esp,0x10
c0016d1c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016d20:	74 66                	je     c0016d88 <VCache::write(unsigned long long, int, void*)+0xa0>
c0016d22:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016d25:	99                   	cdq    
c0016d26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d2a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016d2d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016d30:	89 c1                	mov    ecx,eax
c0016d32:	89 d0                	mov    eax,edx
c0016d34:	31 f1                	xor    ecx,esi
c0016d36:	31 f8                	xor    eax,edi
c0016d38:	89 ca                	mov    edx,ecx
c0016d3a:	09 c2                	or     edx,eax
c0016d3c:	75 3e                	jne    c0016d7c <VCache::write(unsigned long long, int, void*)+0x94>
c0016d3e:	83 fd 01             	cmp    ebp,0x1
c0016d41:	75 39                	jne    c0016d7c <VCache::write(unsigned long long, int, void*)+0x94>
c0016d43:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d46:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016d4c:	51                   	push   ecx
c0016d4d:	50                   	push   eax
c0016d4e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016d52:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016d56:	0f af c8             	imul   ecx,eax
c0016d59:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016d5c:	51                   	push   ecx
c0016d5d:	e8 e2 99 fe ff       	call   c0000744 <memcpy>
c0016d62:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016d65:	83 c4 10             	add    esp,0x10
c0016d68:	40                   	inc    eax
c0016d69:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016d6c:	83 c0 80             	add    eax,0xffffff80
c0016d6f:	75 57                	jne    c0016dc8 <VCache::write(unsigned long long, int, void*)+0xe0>
c0016d71:	83 ec 0c             	sub    esp,0xc
c0016d74:	53                   	push   ebx
c0016d75:	e8 b6 fe ff ff       	call   c0016c30 <VCache::writeWriteBuffer()>
c0016d7a:	eb 34                	jmp    c0016db0 <VCache::write(unsigned long long, int, void*)+0xc8>
c0016d7c:	83 ec 0c             	sub    esp,0xc
c0016d7f:	53                   	push   ebx
c0016d80:	e8 ab fe ff ff       	call   c0016c30 <VCache::writeWriteBuffer()>
c0016d85:	83 c4 10             	add    esp,0x10
c0016d88:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d8b:	83 fd 7f             	cmp    ebp,0x7f
c0016d8e:	7f 25                	jg     c0016db5 <VCache::write(unsigned long long, int, void*)+0xcd>
c0016d90:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016d93:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016d96:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016d99:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016d9d:	52                   	push   edx
c0016d9e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016da4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016da8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016dab:	e8 94 99 fe ff       	call   c0000744 <memcpy>
c0016db0:	83 c4 10             	add    esp,0x10
c0016db3:	eb 13                	jmp    c0016dc8 <VCache::write(unsigned long long, int, void*)+0xe0>
c0016db5:	83 ec 0c             	sub    esp,0xc
c0016db8:	8b 10                	mov    edx,DWORD PTR [eax]
c0016dba:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016dbe:	55                   	push   ebp
c0016dbf:	57                   	push   edi
c0016dc0:	56                   	push   esi
c0016dc1:	50                   	push   eax
c0016dc2:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016dc5:	83 c4 20             	add    esp,0x20
c0016dc8:	83 ec 0c             	sub    esp,0xc
c0016dcb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016dce:	e8 29 74 00 00       	call   c001e1fc <Semaphore::release()>
c0016dd3:	83 c4 2c             	add    esp,0x2c
c0016dd6:	31 c0                	xor    eax,eax
c0016dd8:	5b                   	pop    ebx
c0016dd9:	5e                   	pop    esi
c0016dda:	5f                   	pop    edi
c0016ddb:	5d                   	pop    ebp
c0016ddc:	c3                   	ret    
c0016ddd:	90                   	nop

c0016dde <VCache::read(unsigned long long, int, void*)>:
c0016dde:	55                   	push   ebp
c0016ddf:	57                   	push   edi
c0016de0:	56                   	push   esi
c0016de1:	53                   	push   ebx
c0016de2:	83 ec 28             	sub    esp,0x28
c0016de5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016de9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016ded:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016df1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016df5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016df9:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016dfd:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016e01:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016e04:	e8 45 6e 00 00       	call   c001dc4e <Semaphore::acquire()>
c0016e09:	83 c4 10             	add    esp,0x10
c0016e0c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016e10:	74 0c                	je     c0016e1e <VCache::read(unsigned long long, int, void*)+0x40>
c0016e12:	83 ec 0c             	sub    esp,0xc
c0016e15:	53                   	push   ebx
c0016e16:	e8 15 fe ff ff       	call   c0016c30 <VCache::writeWriteBuffer()>
c0016e1b:	83 c4 10             	add    esp,0x10
c0016e1e:	83 fe 01             	cmp    esi,0x1
c0016e21:	0f 85 80 00 00 00    	jne    c0016ea7 <VCache::read(unsigned long long, int, void*)+0xc9>
c0016e27:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e2a:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016e31:	75 74                	jne    c0016ea7 <VCache::read(unsigned long long, int, void*)+0xc9>
c0016e33:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016e36:	89 d1                	mov    ecx,edx
c0016e38:	f7 d9                	neg    ecx
c0016e3a:	89 cf                	mov    edi,ecx
c0016e3c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016e40:	c1 ff 1f             	sar    edi,0x1f
c0016e43:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0016e46:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016e4a:	89 ce                	mov    esi,ecx
c0016e4c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016e50:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0016e54:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016e58:	89 cf                	mov    edi,ecx
c0016e5a:	74 0a                	je     c0016e66 <VCache::read(unsigned long long, int, void*)+0x88>
c0016e5c:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016e5f:	75 05                	jne    c0016e66 <VCache::read(unsigned long long, int, void*)+0x88>
c0016e61:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0016e64:	74 1c                	je     c0016e82 <VCache::read(unsigned long long, int, void*)+0xa4>
c0016e66:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016e6a:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0016e6d:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0016e70:	83 ec 0c             	sub    esp,0xc
c0016e73:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016e75:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016e78:	52                   	push   edx
c0016e79:	57                   	push   edi
c0016e7a:	56                   	push   esi
c0016e7b:	50                   	push   eax
c0016e7c:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016e7f:	83 c4 20             	add    esp,0x20
c0016e82:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e85:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016e8b:	50                   	push   eax
c0016e8c:	52                   	push   edx
c0016e8d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016e90:	48                   	dec    eax
c0016e91:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0016e95:	0f af c2             	imul   eax,edx
c0016e98:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0016e9b:	50                   	push   eax
c0016e9c:	55                   	push   ebp
c0016e9d:	e8 a2 98 fe ff       	call   c0000744 <memcpy>
c0016ea2:	83 c4 10             	add    esp,0x10
c0016ea5:	eb 21                	jmp    c0016ec8 <VCache::read(unsigned long long, int, void*)+0xea>
c0016ea7:	83 ec 0c             	sub    esp,0xc
c0016eaa:	53                   	push   ebx
c0016eab:	e8 70 fd ff ff       	call   c0016c20 <VCache::invalidateReadBuffer()>
c0016eb0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016eb3:	8b 10                	mov    edx,DWORD PTR [eax]
c0016eb5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016eb8:	56                   	push   esi
c0016eb9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ebd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ec1:	50                   	push   eax
c0016ec2:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016ec5:	83 c4 20             	add    esp,0x20
c0016ec8:	83 ec 0c             	sub    esp,0xc
c0016ecb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016ece:	e8 29 73 00 00       	call   c001e1fc <Semaphore::release()>
c0016ed3:	83 c4 2c             	add    esp,0x2c
c0016ed6:	31 c0                	xor    eax,eax
c0016ed8:	5b                   	pop    ebx
c0016ed9:	5e                   	pop    esi
c0016eda:	5f                   	pop    edi
c0016edb:	5d                   	pop    ebp
c0016edc:	c3                   	ret    
c0016edd:	90                   	nop

c0016ede <Video::putrect(int, int, int, int, unsigned int)>:
c0016ede:	55                   	push   ebp
c0016edf:	57                   	push   edi
c0016ee0:	56                   	push   esi
c0016ee1:	53                   	push   ebx
c0016ee2:	83 ec 1c             	sub    esp,0x1c
c0016ee5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016ee9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016eed:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016ef1:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016ef5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016ef9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016efd:	01 df                	add    edi,ebx
c0016eff:	39 fb                	cmp    ebx,edi
c0016f01:	7d 1f                	jge    c0016f22 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016f03:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016f07:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016f0b:	7d 12                	jge    c0016f1f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016f0d:	8b 16                	mov    edx,DWORD PTR [esi]
c0016f0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016f13:	53                   	push   ebx
c0016f14:	55                   	push   ebp
c0016f15:	45                   	inc    ebp
c0016f16:	56                   	push   esi
c0016f17:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016f1a:	83 c4 10             	add    esp,0x10
c0016f1d:	eb e8                	jmp    c0016f07 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016f1f:	43                   	inc    ebx
c0016f20:	eb dd                	jmp    c0016eff <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016f22:	83 c4 1c             	add    esp,0x1c
c0016f25:	5b                   	pop    ebx
c0016f26:	5e                   	pop    esi
c0016f27:	5f                   	pop    edi
c0016f28:	5d                   	pop    ebp
c0016f29:	c3                   	ret    

c0016f2a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016f2a:	55                   	push   ebp
c0016f2b:	57                   	push   edi
c0016f2c:	31 ff                	xor    edi,edi
c0016f2e:	56                   	push   esi
c0016f2f:	53                   	push   ebx
c0016f30:	83 ec 1c             	sub    esp,0x1c
c0016f33:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016f37:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016f3b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016f42:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016f47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f4b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016f4f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f53:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016f56:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016f5a:	01 f9                	add    ecx,edi
c0016f5c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016f60:	7d 2f                	jge    c0016f91 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016f62:	31 f6                	xor    esi,esi
c0016f64:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016f68:	01 f2                	add    edx,esi
c0016f6a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016f6e:	7d 1a                	jge    c0016f8a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016f70:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016f73:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016f76:	46                   	inc    esi
c0016f77:	51                   	push   ecx
c0016f78:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016f7c:	52                   	push   edx
c0016f7d:	55                   	push   ebp
c0016f7e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f81:	83 c4 10             	add    esp,0x10
c0016f84:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f88:	eb da                	jmp    c0016f64 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016f8a:	47                   	inc    edi
c0016f8b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016f8f:	eb c5                	jmp    c0016f56 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016f91:	83 c4 1c             	add    esp,0x1c
c0016f94:	5b                   	pop    ebx
c0016f95:	5e                   	pop    esi
c0016f96:	5f                   	pop    edi
c0016f97:	5d                   	pop    ebp
c0016f98:	c3                   	ret    
c0016f99:	90                   	nop

c0016f9a <Video::blit(unsigned int*, int, int, int, int)>:
c0016f9a:	55                   	push   ebp
c0016f9b:	57                   	push   edi
c0016f9c:	56                   	push   esi
c0016f9d:	53                   	push   ebx
c0016f9e:	83 ec 1c             	sub    esp,0x1c
c0016fa1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016fa5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016fa9:	85 c0                	test   eax,eax
c0016fab:	79 02                	jns    c0016faf <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016fad:	31 c0                	xor    eax,eax
c0016faf:	c1 e0 02             	shl    eax,0x2
c0016fb2:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016fb6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016fbe:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016fc2:	39 d8                	cmp    eax,ebx
c0016fc4:	7e 49                	jle    c001700f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016fc6:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016fcc:	7c 41                	jl     c001700f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016fce:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016fd2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016fd6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016fda:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016fde:	39 f9                	cmp    ecx,edi
c0016fe0:	7e 22                	jle    c0017004 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016fe2:	83 c5 04             	add    ebp,0x4
c0016fe5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016feb:	7c 14                	jl     c0017001 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016fed:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016fef:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016ff2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016ff6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016ffa:	56                   	push   esi
c0016ffb:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016ffe:	83 c4 10             	add    esp,0x10
c0017001:	47                   	inc    edi
c0017002:	eb d2                	jmp    c0016fd6 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017004:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017008:	43                   	inc    ebx
c0017009:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001700d:	eb ab                	jmp    c0016fba <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001700f:	83 c4 1c             	add    esp,0x1c
c0017012:	5b                   	pop    ebx
c0017013:	5e                   	pop    esi
c0017014:	5f                   	pop    edi
c0017015:	5d                   	pop    ebp
c0017016:	c3                   	ret    
c0017017:	90                   	nop

c0017018 <Video::clearScreen(unsigned int)>:
c0017018:	57                   	push   edi
c0017019:	56                   	push   esi
c001701a:	53                   	push   ebx
c001701b:	31 db                	xor    ebx,ebx
c001701d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017021:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017027:	7e 1f                	jle    c0017048 <Video::clearScreen(unsigned int)+0x30>
c0017029:	31 ff                	xor    edi,edi
c001702b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017031:	7e 12                	jle    c0017045 <Video::clearScreen(unsigned int)+0x2d>
c0017033:	8b 06                	mov    eax,DWORD PTR [esi]
c0017035:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017039:	53                   	push   ebx
c001703a:	57                   	push   edi
c001703b:	47                   	inc    edi
c001703c:	56                   	push   esi
c001703d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017040:	83 c4 10             	add    esp,0x10
c0017043:	eb e6                	jmp    c001702b <Video::clearScreen(unsigned int)+0x13>
c0017045:	43                   	inc    ebx
c0017046:	eb d9                	jmp    c0017021 <Video::clearScreen(unsigned int)+0x9>
c0017048:	5b                   	pop    ebx
c0017049:	5e                   	pop    esi
c001704a:	5f                   	pop    edi
c001704b:	c3                   	ret    

c001704c <Video::putpixel(int, int, unsigned int)>:
c001704c:	c7 44 24 04 7c ab 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ab7c
c0017054:	e9 e4 2f 00 00       	jmp    c001a03d <Krnl::panic(char const*)>
c0017059:	90                   	nop

c001705a <Video::Video(char const*)>:
c001705a:	83 ec 0c             	sub    esp,0xc
c001705d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017061:	83 ec 08             	sub    esp,0x8
c0017064:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017068:	50                   	push   eax
c0017069:	e8 be d0 ff ff       	call   c001412c <Device::Device(char const*)>
c001706e:	83 c4 10             	add    esp,0x10
c0017071:	ba 00 ac 02 c0       	mov    edx,0xc002ac00
c0017076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001707a:	89 10                	mov    DWORD PTR [eax],edx
c001707c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017080:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001708a:	90                   	nop
c001708b:	83 c4 0c             	add    esp,0xc
c001708e:	c3                   	ret    
c001708f:	90                   	nop

c0017090 <Video::~Video()>:
c0017090:	83 ec 0c             	sub    esp,0xc
c0017093:	ba 00 ac 02 c0       	mov    edx,0xc002ac00
c0017098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001709c:	89 10                	mov    DWORD PTR [eax],edx
c001709e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170a2:	83 ec 0c             	sub    esp,0xc
c00170a5:	50                   	push   eax
c00170a6:	e8 63 cd ff ff       	call   c0013e0e <Device::~Device()>
c00170ab:	83 c4 10             	add    esp,0x10
c00170ae:	90                   	nop
c00170af:	83 c4 0c             	add    esp,0xc
c00170b2:	c3                   	ret    
c00170b3:	90                   	nop

c00170b4 <Video::~Video()>:
c00170b4:	83 ec 0c             	sub    esp,0xc
c00170b7:	83 ec 0c             	sub    esp,0xc
c00170ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170be:	e8 cd ff ff ff       	call   c0017090 <Video::~Video()>
c00170c3:	83 c4 10             	add    esp,0x10
c00170c6:	83 ec 08             	sub    esp,0x8
c00170c9:	68 64 01 00 00       	push   0x164
c00170ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170d2:	e8 5e b9 ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c00170d7:	83 c4 10             	add    esp,0x10
c00170da:	83 c4 0c             	add    esp,0xc
c00170dd:	c3                   	ret    

c00170de <Video::isMonochrome()>:
c00170de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170e2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00170e8:	c3                   	ret    
c00170e9:	90                   	nop

c00170ea <Video::getWidth()>:
c00170ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170ee:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00170f4:	c3                   	ret    
c00170f5:	90                   	nop

c00170f6 <Video::getHeight()>:
c00170f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170fa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017100:	c3                   	ret    
c0017101:	90                   	nop

c0017102 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017102:	55                   	push   ebp
c0017103:	57                   	push   edi
c0017104:	56                   	push   esi
c0017105:	53                   	push   ebx
c0017106:	83 ec 2c             	sub    esp,0x2c
c0017109:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001710d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017111:	83 f8 01             	cmp    eax,0x1
c0017114:	19 c9                	sbb    ecx,ecx
c0017116:	31 db                	xor    ebx,ebx
c0017118:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001711c:	89 cd                	mov    ebp,ecx
c001711e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017126:	f7 d5                	not    ebp
c0017128:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001712e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017132:	01 d8                	add    eax,ebx
c0017134:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017138:	56                   	push   esi
c0017139:	e8 b8 ff ff ff       	call   c00170f6 <Video::getHeight()>
c001713e:	59                   	pop    ecx
c001713f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017143:	7e 70                	jle    c00171b5 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017145:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017149:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001714d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017150:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017154:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017158:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001715f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017163:	89 f8                	mov    eax,edi
c0017165:	83 c0 20             	add    eax,0x20
c0017168:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001716c:	56                   	push   esi
c001716d:	e8 78 ff ff ff       	call   c00170ea <Video::getWidth()>
c0017172:	5a                   	pop    edx
c0017173:	39 c7                	cmp    edi,eax
c0017175:	7d 34                	jge    c00171ab <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017177:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001717c:	74 05                	je     c0017183 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001717e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017180:	55                   	push   ebp
c0017181:	eb 0d                	jmp    c0017190 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017183:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017188:	74 12                	je     c001719c <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001718a:	8b 06                	mov    eax,DWORD PTR [esi]
c001718c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017190:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017194:	57                   	push   edi
c0017195:	56                   	push   esi
c0017196:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017199:	83 c4 10             	add    esp,0x10
c001719c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00171a0:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00171a4:	47                   	inc    edi
c00171a5:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00171a9:	75 c1                	jne    c001716c <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00171ab:	43                   	inc    ebx
c00171ac:	83 fb 20             	cmp    ebx,0x20
c00171af:	0f 85 79 ff ff ff    	jne    c001712e <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00171b5:	83 c4 2c             	add    esp,0x2c
c00171b8:	5b                   	pop    ebx
c00171b9:	5e                   	pop    esi
c00171ba:	5f                   	pop    edi
c00171bb:	5d                   	pop    ebp
c00171bc:	c3                   	ret    
c00171bd:	90                   	nop

c00171be <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00171be:	55                   	push   ebp
c00171bf:	57                   	push   edi
c00171c0:	56                   	push   esi
c00171c1:	53                   	push   ebx
c00171c2:	83 ec 28             	sub    esp,0x28
c00171c5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00171c9:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00171cd:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00171d1:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00171d5:	c1 e7 08             	shl    edi,0x8
c00171d8:	01 c7                	add    edi,eax
c00171da:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00171de:	c1 e0 08             	shl    eax,0x8
c00171e1:	01 d0                	add    eax,edx
c00171e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171eb:	0f af c7             	imul   eax,edi
c00171ee:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00171f5:	50                   	push   eax
c00171f6:	e8 4b 86 ff ff       	call   c000f846 <malloc>
c00171fb:	83 c4 10             	add    esp,0x10
c00171fe:	89 c5                	mov    ebp,eax
c0017200:	85 c0                	test   eax,eax
c0017202:	75 15                	jne    c0017219 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017204:	83 ec 0c             	sub    esp,0xc
c0017207:	68 9d ab 02 c0       	push   0xc002ab9d
c001720c:	e8 04 b9 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0017211:	83 c4 10             	add    esp,0x10
c0017214:	e9 1c 01 00 00       	jmp    c0017335 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017219:	be 12 00 00 00       	mov    esi,0x12
c001721e:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017222:	74 11                	je     c0017235 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017224:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017228:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c001722c:	c1 fe 03             	sar    esi,0x3
c001722f:	0f af f0             	imul   esi,eax
c0017232:	83 c6 12             	add    esi,0x12
c0017235:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017239:	74 04                	je     c001723f <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001723b:	85 ff                	test   edi,edi
c001723d:	75 12                	jne    c0017251 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c001723f:	83 ec 0c             	sub    esp,0xc
c0017242:	68 b4 ab 02 c0       	push   0xc002abb4
c0017247:	e8 c9 b8 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001724c:	e9 ce 00 00 00       	jmp    c001731f <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017251:	52                   	push   edx
c0017252:	52                   	push   edx
c0017253:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017257:	50                   	push   eax
c0017258:	68 c9 ab 02 c0       	push   0xc002abc9
c001725d:	e8 b3 b8 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0017262:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017266:	83 c4 10             	add    esp,0x10
c0017269:	80 fa 02             	cmp    dl,0x2
c001726c:	0f 85 98 00 00 00    	jne    c001730a <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017272:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017277:	75 10                	jne    c0017289 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017279:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001727d:	75 0a                	jne    c0017289 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001727f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017282:	83 e8 18             	sub    eax,0x18
c0017285:	a8 f7                	test   al,0xf7
c0017287:	74 0a                	je     c0017293 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017289:	83 ec 0c             	sub    esp,0xc
c001728c:	68 d6 ab 02 c0       	push   0xc002abd6
c0017291:	eb 7f                	jmp    c0017312 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017293:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001729b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00172a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00172a7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00172af:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00172b3:	75 0c                	jne    c00172c1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00172b5:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00172ba:	c1 e0 18             	shl    eax,0x18
c00172bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00172c1:	41                   	inc    ecx
c00172c2:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00172c7:	c1 e2 10             	shl    edx,0x10
c00172ca:	89 d0                	mov    eax,edx
c00172cc:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00172d1:	c1 e2 08             	shl    edx,0x8
c00172d4:	09 c2                	or     edx,eax
c00172d6:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00172da:	09 c2                	or     edx,eax
c00172dc:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00172e0:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00172e4:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00172e8:	c1 f8 03             	sar    eax,0x3
c00172eb:	01 c6                	add    esi,eax
c00172ed:	89 c8                	mov    eax,ecx
c00172ef:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00172f3:	39 c7                	cmp    edi,eax
c00172f5:	7f b0                	jg     c00172a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00172f7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00172fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00172ff:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017302:	7e 22                	jle    c0017326 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017304:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017308:	eb 99                	jmp    c00172a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001730a:	50                   	push   eax
c001730b:	50                   	push   eax
c001730c:	52                   	push   edx
c001730d:	68 e4 ab 02 c0       	push   0xc002abe4
c0017312:	e8 fe b7 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0017317:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001731a:	e8 37 85 ff ff       	call   c000f856 <free>
c001731f:	83 c4 10             	add    esp,0x10
c0017322:	31 ed                	xor    ebp,ebp
c0017324:	eb 0f                	jmp    c0017335 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017326:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001732a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001732d:	89 38                	mov    DWORD PTR [eax],edi
c001732f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017333:	89 08                	mov    DWORD PTR [eax],ecx
c0017335:	83 c4 1c             	add    esp,0x1c
c0017338:	89 e8                	mov    eax,ebp
c001733a:	5b                   	pop    ebx
c001733b:	5e                   	pop    esi
c001733c:	5f                   	pop    edi
c001733d:	5d                   	pop    ebp
c001733e:	c3                   	ret    
c001733f:	90                   	nop

c0017340 <Video::putTGA(int, int, unsigned char*, int)>:
c0017340:	55                   	push   ebp
c0017341:	57                   	push   edi
c0017342:	56                   	push   esi
c0017343:	53                   	push   ebx
c0017344:	83 ec 28             	sub    esp,0x28
c0017347:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001734b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001734f:	50                   	push   eax
c0017350:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017354:	50                   	push   eax
c0017355:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017359:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001735d:	56                   	push   esi
c001735e:	e8 5b fe ff ff       	call   c00171be <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017363:	83 c4 20             	add    esp,0x20
c0017366:	85 c0                	test   eax,eax
c0017368:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001736c:	74 35                	je     c00173a3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001736e:	89 c7                	mov    edi,eax
c0017370:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017374:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017378:	39 d8                	cmp    eax,ebx
c001737a:	7e 27                	jle    c00173a3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001737c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017380:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017384:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017388:	39 e8                	cmp    eax,ebp
c001738a:	7e 14                	jle    c00173a0 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001738c:	8b 06                	mov    eax,DWORD PTR [esi]
c001738e:	83 c7 04             	add    edi,0x4
c0017391:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017394:	53                   	push   ebx
c0017395:	55                   	push   ebp
c0017396:	45                   	inc    ebp
c0017397:	56                   	push   esi
c0017398:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001739b:	83 c4 10             	add    esp,0x10
c001739e:	eb e0                	jmp    c0017380 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00173a0:	43                   	inc    ebx
c00173a1:	eb cd                	jmp    c0017370 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00173a3:	83 c4 1c             	add    esp,0x1c
c00173a6:	5b                   	pop    ebx
c00173a7:	5e                   	pop    esi
c00173a8:	5f                   	pop    edi
c00173a9:	5d                   	pop    ebp
c00173aa:	c3                   	ret    
c00173ab:	90                   	nop

c00173ac <ACPI::close(int, int, void*)>:
c00173ac:	83 ec 1c             	sub    esp,0x1c
c00173af:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00173b7:	74 0a                	je     c00173c3 <ACPI::close(int, int, void*)+0x17>
c00173b9:	b8 00 00 00 00       	mov    eax,0x0
c00173be:	e9 9a 00 00 00       	jmp    c001745d <ACPI::close(int, int, void*)+0xb1>
c00173c3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00173c8:	75 37                	jne    c0017401 <ACPI::close(int, int, void*)+0x55>
c00173ca:	83 ec 0c             	sub    esp,0xc
c00173cd:	68 40 ac 02 c0       	push   0xc002ac40
c00173d2:	e8 3e b7 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00173d7:	83 c4 10             	add    esp,0x10
c00173da:	a1 48 02 03 c0       	mov    eax,ds:0xc0030248
c00173df:	85 c0                	test   eax,eax
c00173e1:	74 07                	je     c00173ea <ACPI::close(int, int, void*)+0x3e>
c00173e3:	a1 48 02 03 c0       	mov    eax,ds:0xc0030248
c00173e8:	ff d0                	call   eax
c00173ea:	83 ec 0c             	sub    esp,0xc
c00173ed:	68 64 ad 02 c0       	push   0xc002ad64
c00173f2:	e8 46 2c 00 00       	call   c001a03d <Krnl::panic(char const*)>
c00173f7:	83 c4 10             	add    esp,0x10
c00173fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00173ff:	eb 5c                	jmp    c001745d <ACPI::close(int, int, void*)+0xb1>
c0017401:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017406:	75 50                	jne    c0017458 <ACPI::close(int, int, void*)+0xac>
c0017408:	a1 44 02 03 c0       	mov    eax,ds:0xc0030244
c001740d:	85 c0                	test   eax,eax
c001740f:	74 07                	je     c0017418 <ACPI::close(int, int, void*)+0x6c>
c0017411:	a1 44 02 03 c0       	mov    eax,ds:0xc0030244
c0017416:	ff d0                	call   eax
c0017418:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001741d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017422:	83 e0 02             	and    eax,0x2
c0017425:	74 1c                	je     c0017443 <ACPI::close(int, int, void*)+0x97>
c0017427:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001742e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017432:	89 c2                	mov    edx,eax
c0017434:	ec                   	in     al,dx
c0017435:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017439:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001743d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017441:	eb da                	jmp    c001741d <ACPI::close(int, int, void*)+0x71>
c0017443:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001744a:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001744f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017453:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017457:	ee                   	out    dx,al
c0017458:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001745d:	83 c4 1c             	add    esp,0x1c
c0017460:	c3                   	ret    

c0017461 <findRSDP()>:
c0017461:	83 ec 1c             	sub    esp,0x1c
c0017464:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c0017469:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001746f:	83 e0 04             	and    eax,0x4
c0017472:	84 c0                	test   al,al
c0017474:	75 07                	jne    c001747d <findRSDP()+0x1c>
c0017476:	b8 00 00 00 00       	mov    eax,0x0
c001747b:	eb 6a                	jmp    c00174e7 <findRSDP()+0x86>
c001747d:	a1 d0 db 02 c0       	mov    eax,ds:0xc002dbd0
c0017482:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017487:	7f 1b                	jg     c00174a4 <findRSDP()+0x43>
c0017489:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c001748e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017494:	83 e2 fb             	and    edx,0xfffffffb
c0017497:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001749d:	b8 00 00 00 00       	mov    eax,0x0
c00174a2:	eb 43                	jmp    c00174e7 <findRSDP()+0x86>
c00174a4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00174ac:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00174b4:	77 2c                	ja     c00174e2 <findRSDP()+0x81>
c00174b6:	83 ec 04             	sub    esp,0x4
c00174b9:	6a 08                	push   0x8
c00174bb:	68 4d ac 02 c0       	push   0xc002ac4d
c00174c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00174c4:	e8 77 91 fe ff       	call   c0000640 <memcmp>
c00174c9:	83 c4 10             	add    esp,0x10
c00174cc:	85 c0                	test   eax,eax
c00174ce:	0f 94 c0             	sete   al
c00174d1:	84 c0                	test   al,al
c00174d3:	74 06                	je     c00174db <findRSDP()+0x7a>
c00174d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174d9:	eb 0c                	jmp    c00174e7 <findRSDP()+0x86>
c00174db:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00174e0:	eb ca                	jmp    c00174ac <findRSDP()+0x4b>
c00174e2:	b8 00 00 00 00       	mov    eax,0x0
c00174e7:	83 c4 1c             	add    esp,0x1c
c00174ea:	c3                   	ret    

c00174eb <loadACPITables(unsigned char*)>:
c00174eb:	56                   	push   esi
c00174ec:	53                   	push   ebx
c00174ed:	83 ec 44             	sub    esp,0x44
c00174f0:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c00174f5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00174fb:	83 e0 04             	and    eax,0x4
c00174fe:	84 c0                	test   al,al
c0017500:	0f 84 05 02 00 00    	je     c001770b <loadACPITables(unsigned char*)+0x220>
c0017506:	a0 60 04 03 c0       	mov    al,ds:0xc0030460
c001750b:	84 c0                	test   al,al
c001750d:	74 75                	je     c0017584 <loadACPITables(unsigned char*)+0x99>
c001750f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017513:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017517:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001751b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001751e:	83 e8 24             	sub    eax,0x24
c0017521:	c1 e8 03             	shr    eax,0x3
c0017524:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017528:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017530:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017534:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017538:	0f 8d b2 00 00 00    	jge    c00175f0 <loadACPITables(unsigned char*)+0x105>
c001753e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017542:	83 c0 24             	add    eax,0x24
c0017545:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017549:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001754d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017551:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017555:	c1 e0 03             	shl    eax,0x3
c0017558:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c001755c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017560:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017563:	8b 00                	mov    eax,DWORD PTR [eax]
c0017565:	89 c1                	mov    ecx,eax
c0017567:	a1 4c 02 03 c0       	mov    eax,ds:0xc003024c
c001756c:	8d 50 01             	lea    edx,[eax+0x1]
c001756f:	89 15 4c 02 03 c0    	mov    DWORD PTR ds:0xc003024c,edx
c0017575:	89 ca                	mov    edx,ecx
c0017577:	89 14 c5 64 02 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfd9c],edx
c001757e:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017582:	eb ac                	jmp    c0017530 <loadACPITables(unsigned char*)+0x45>
c0017584:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017588:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001758c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017590:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017593:	83 e8 24             	sub    eax,0x24
c0017596:	c1 e8 02             	shr    eax,0x2
c0017599:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001759d:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00175a5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00175a9:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00175ad:	7d 41                	jge    c00175f0 <loadACPITables(unsigned char*)+0x105>
c00175af:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00175b3:	83 c0 24             	add    eax,0x24
c00175b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00175ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00175be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00175c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00175c6:	c1 e0 02             	shl    eax,0x2
c00175c9:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00175cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00175d1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00175d3:	a1 4c 02 03 c0       	mov    eax,ds:0xc003024c
c00175d8:	8d 50 01             	lea    edx,[eax+0x1]
c00175db:	89 15 4c 02 03 c0    	mov    DWORD PTR ds:0xc003024c,edx
c00175e1:	89 ca                	mov    edx,ecx
c00175e3:	89 14 c5 64 02 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfd9c],edx
c00175ea:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00175ee:	eb b5                	jmp    c00175a5 <loadACPITables(unsigned char*)+0xba>
c00175f0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00175f8:	a1 4c 02 03 c0       	mov    eax,ds:0xc003024c
c00175fd:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017601:	0f 8d 05 01 00 00    	jge    c001770c <loadACPITables(unsigned char*)+0x221>
c0017607:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001760b:	8b 04 c5 64 02 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcfd9c]
c0017612:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001761a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001761e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017622:	25 ff 0f 00 00       	and    eax,0xfff
c0017627:	89 c6                	mov    esi,eax
c0017629:	e8 87 a6 ff ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c001762e:	89 c3                	mov    ebx,eax
c0017630:	83 ec 0c             	sub    esp,0xc
c0017633:	6a 01                	push   0x1
c0017635:	e8 eb a4 ff ff       	call   c0011b25 <Virt::allocateKernelVirtualPages(int)>
c001763a:	83 c4 10             	add    esp,0x10
c001763d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017641:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017647:	83 ec 0c             	sub    esp,0xc
c001764a:	6a 01                	push   0x1
c001764c:	6a 01                	push   0x1
c001764e:	50                   	push   eax
c001764f:	52                   	push   edx
c0017650:	53                   	push   ebx
c0017651:	e8 8e ae ff ff       	call   c00124e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017656:	83 c4 20             	add    esp,0x20
c0017659:	09 f0                	or     eax,esi
c001765b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001765f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017663:	c1 e0 03             	shl    eax,0x3
c0017666:	05 60 02 03 c0       	add    eax,0xc0030260
c001766b:	83 ec 04             	sub    esp,0x4
c001766e:	6a 04                	push   0x4
c0017670:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017674:	50                   	push   eax
c0017675:	e8 ca 90 fe ff       	call   c0000744 <memcpy>
c001767a:	83 c4 10             	add    esp,0x10
c001767d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017681:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017688:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001768c:	05 00 10 00 00       	add    eax,0x1000
c0017691:	c1 e8 0c             	shr    eax,0xc
c0017694:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001769c:	89 04 24             	mov    DWORD PTR [esp],eax
c001769f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176a3:	25 ff 0f 00 00       	and    eax,0xfff
c00176a8:	89 c6                	mov    esi,eax
c00176aa:	e8 06 a6 ff ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c00176af:	89 c3                	mov    ebx,eax
c00176b1:	83 ec 0c             	sub    esp,0xc
c00176b4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176b8:	e8 68 a4 ff ff       	call   c0011b25 <Virt::allocateKernelVirtualPages(int)>
c00176bd:	83 c4 10             	add    esp,0x10
c00176c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00176c4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00176ca:	83 ec 0c             	sub    esp,0xc
c00176cd:	6a 01                	push   0x1
c00176cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00176d3:	50                   	push   eax
c00176d4:	52                   	push   edx
c00176d5:	53                   	push   ebx
c00176d6:	e8 09 ae ff ff       	call   c00124e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00176db:	83 c4 20             	add    esp,0x20
c00176de:	09 f0                	or     eax,esi
c00176e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00176e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00176e7:	83 ec 0c             	sub    esp,0xc
c00176ea:	50                   	push   eax
c00176eb:	e8 99 a7 ff ff       	call   c0011e89 <Virt::freeKernelVirtualPages(unsigned long)>
c00176f0:	83 c4 10             	add    esp,0x10
c00176f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176f7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00176fb:	89 14 c5 64 02 03 c0 	mov    DWORD PTR [eax*8-0x3ffcfd9c],edx
c0017702:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017706:	e9 ed fe ff ff       	jmp    c00175f8 <loadACPITables(unsigned char*)+0x10d>
c001770b:	90                   	nop
c001770c:	83 c4 44             	add    esp,0x44
c001770f:	5b                   	pop    ebx
c0017710:	5e                   	pop    esi
c0017711:	c3                   	ret    

c0017712 <findRSDT(unsigned char*)>:
c0017712:	56                   	push   esi
c0017713:	53                   	push   ebx
c0017714:	83 ec 44             	sub    esp,0x44
c0017717:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c001771c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017722:	83 e0 04             	and    eax,0x4
c0017725:	84 c0                	test   al,al
c0017727:	75 0a                	jne    c0017733 <findRSDT(unsigned char*)+0x21>
c0017729:	b8 00 00 00 00       	mov    eax,0x0
c001772e:	e9 f7 00 00 00       	jmp    c001782a <findRSDT(unsigned char*)+0x118>
c0017733:	83 ec 04             	sub    esp,0x4
c0017736:	6a 24                	push   0x24
c0017738:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001773c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017740:	50                   	push   eax
c0017741:	e8 fe 8f fe ff       	call   c0000744 <memcpy>
c0017746:	83 c4 10             	add    esp,0x10
c0017749:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001774d:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017751:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017759:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001775d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017761:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017765:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017769:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001776d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017771:	25 ff 0f 00 00       	and    eax,0xfff
c0017776:	89 c6                	mov    esi,eax
c0017778:	e8 38 a5 ff ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c001777d:	89 c3                	mov    ebx,eax
c001777f:	83 ec 0c             	sub    esp,0xc
c0017782:	6a 02                	push   0x2
c0017784:	e8 9c a3 ff ff       	call   c0011b25 <Virt::allocateKernelVirtualPages(int)>
c0017789:	83 c4 10             	add    esp,0x10
c001778c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017790:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017796:	83 ec 0c             	sub    esp,0xc
c0017799:	6a 01                	push   0x1
c001779b:	6a 02                	push   0x2
c001779d:	50                   	push   eax
c001779e:	52                   	push   edx
c001779f:	53                   	push   ebx
c00177a0:	e8 3f ad ff ff       	call   c00124e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00177a5:	83 c4 20             	add    esp,0x20
c00177a8:	09 f0                	or     eax,esi
c00177aa:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00177ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00177b2:	25 ff 0f 00 00       	and    eax,0xfff
c00177b7:	89 c6                	mov    esi,eax
c00177b9:	e8 f7 a4 ff ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c00177be:	89 c3                	mov    ebx,eax
c00177c0:	83 ec 0c             	sub    esp,0xc
c00177c3:	6a 02                	push   0x2
c00177c5:	e8 5b a3 ff ff       	call   c0011b25 <Virt::allocateKernelVirtualPages(int)>
c00177ca:	83 c4 10             	add    esp,0x10
c00177cd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00177d1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00177d7:	83 ec 0c             	sub    esp,0xc
c00177da:	6a 01                	push   0x1
c00177dc:	6a 02                	push   0x2
c00177de:	50                   	push   eax
c00177df:	52                   	push   edx
c00177e0:	53                   	push   ebx
c00177e1:	e8 fe ac ff ff       	call   c00124e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00177e6:	83 c4 20             	add    esp,0x20
c00177e9:	09 f0                	or     eax,esi
c00177eb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00177ef:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00177f4:	75 11                	jne    c0017807 <findRSDT(unsigned char*)+0xf5>
c00177f6:	c6 05 60 04 03 c0 00 	mov    BYTE PTR ds:0xc0030460,0x0
c00177fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017801:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017805:	eb 1f                	jmp    c0017826 <findRSDT(unsigned char*)+0x114>
c0017807:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c001780c:	75 11                	jne    c001781f <findRSDT(unsigned char*)+0x10d>
c001780e:	c6 05 60 04 03 c0 01 	mov    BYTE PTR ds:0xc0030460,0x1
c0017815:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017819:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001781d:	eb 07                	jmp    c0017826 <findRSDT(unsigned char*)+0x114>
c001781f:	b8 00 00 00 00       	mov    eax,0x0
c0017824:	eb 04                	jmp    c001782a <findRSDT(unsigned char*)+0x118>
c0017826:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001782a:	83 c4 44             	add    esp,0x44
c001782d:	5b                   	pop    ebx
c001782e:	5e                   	pop    esi
c001782f:	c3                   	ret    

c0017830 <findDataTable(unsigned char*, char*)>:
c0017830:	83 ec 1c             	sub    esp,0x1c
c0017833:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c0017838:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001783e:	83 e0 04             	and    eax,0x4
c0017841:	84 c0                	test   al,al
c0017843:	75 07                	jne    c001784c <findDataTable(unsigned char*, char*)+0x1c>
c0017845:	b8 00 00 00 00       	mov    eax,0x0
c001784a:	eb 7c                	jmp    c00178c8 <findDataTable(unsigned char*, char*)+0x98>
c001784c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017854:	a1 4c 02 03 c0       	mov    eax,ds:0xc003024c
c0017859:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001785d:	7d 3a                	jge    c0017899 <findDataTable(unsigned char*, char*)+0x69>
c001785f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017863:	c1 e0 03             	shl    eax,0x3
c0017866:	05 60 02 03 c0       	add    eax,0xc0030260
c001786b:	83 ec 04             	sub    esp,0x4
c001786e:	6a 04                	push   0x4
c0017870:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017874:	50                   	push   eax
c0017875:	e8 c6 8d fe ff       	call   c0000640 <memcmp>
c001787a:	83 c4 10             	add    esp,0x10
c001787d:	85 c0                	test   eax,eax
c001787f:	0f 94 c0             	sete   al
c0017882:	84 c0                	test   al,al
c0017884:	74 0d                	je     c0017893 <findDataTable(unsigned char*, char*)+0x63>
c0017886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001788a:	8b 04 c5 64 02 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcfd9c]
c0017891:	eb 35                	jmp    c00178c8 <findDataTable(unsigned char*, char*)+0x98>
c0017893:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017897:	eb bb                	jmp    c0017854 <findDataTable(unsigned char*, char*)+0x24>
c0017899:	a0 60 04 03 c0       	mov    al,ds:0xc0030460
c001789e:	84 c0                	test   al,al
c00178a0:	74 07                	je     c00178a9 <findDataTable(unsigned char*, char*)+0x79>
c00178a2:	b8 58 00 00 00       	mov    eax,0x58
c00178a7:	eb 05                	jmp    c00178ae <findDataTable(unsigned char*, char*)+0x7e>
c00178a9:	b8 52 00 00 00       	mov    eax,0x52
c00178ae:	83 ec 04             	sub    esp,0x4
c00178b1:	50                   	push   eax
c00178b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178b6:	68 88 ad 02 c0       	push   0xc002ad88
c00178bb:	e8 55 b2 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00178c0:	83 c4 10             	add    esp,0x10
c00178c3:	b8 00 00 00 00       	mov    eax,0x0
c00178c8:	83 c4 1c             	add    esp,0x1c
c00178cb:	c3                   	ret    

c00178cc <scanMADT()>:
c00178cc:	53                   	push   ebx
c00178cd:	83 ec 38             	sub    esp,0x38
c00178d0:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c00178d5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00178db:	83 e0 04             	and    eax,0x4
c00178de:	84 c0                	test   al,al
c00178e0:	0f 84 63 04 00 00    	je     c0017d49 <scanMADT()+0x47d>
c00178e6:	e8 76 fb ff ff       	call   c0017461 <findRSDP()>
c00178eb:	a3 6c 04 03 c0       	mov    ds:0xc003046c,eax
c00178f0:	a1 6c 04 03 c0       	mov    eax,ds:0xc003046c
c00178f5:	85 c0                	test   eax,eax
c00178f7:	75 19                	jne    c0017912 <scanMADT()+0x46>
c00178f9:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c00178fe:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017904:	83 e2 fb             	and    edx,0xfffffffb
c0017907:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001790d:	e9 3b 04 00 00       	jmp    c0017d4d <scanMADT()+0x481>
c0017912:	a1 6c 04 03 c0       	mov    eax,ds:0xc003046c
c0017917:	83 ec 0c             	sub    esp,0xc
c001791a:	50                   	push   eax
c001791b:	e8 f2 fd ff ff       	call   c0017712 <findRSDT(unsigned char*)>
c0017920:	83 c4 10             	add    esp,0x10
c0017923:	a3 68 04 03 c0       	mov    ds:0xc0030468,eax
c0017928:	a1 68 04 03 c0       	mov    eax,ds:0xc0030468
c001792d:	85 c0                	test   eax,eax
c001792f:	75 19                	jne    c001794a <scanMADT()+0x7e>
c0017931:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c0017936:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001793c:	83 e2 fb             	and    edx,0xfffffffb
c001793f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017945:	e9 03 04 00 00       	jmp    c0017d4d <scanMADT()+0x481>
c001794a:	a1 68 04 03 c0       	mov    eax,ds:0xc0030468
c001794f:	83 ec 0c             	sub    esp,0xc
c0017952:	50                   	push   eax
c0017953:	e8 93 fb ff ff       	call   c00174eb <loadACPITables(unsigned char*)>
c0017958:	83 c4 10             	add    esp,0x10
c001795b:	a1 68 04 03 c0       	mov    eax,ds:0xc0030468
c0017960:	83 ec 08             	sub    esp,0x8
c0017963:	68 56 ac 02 c0       	push   0xc002ac56
c0017968:	50                   	push   eax
c0017969:	e8 c2 fe ff ff       	call   c0017830 <findDataTable(unsigned char*, char*)>
c001796e:	83 c4 10             	add    esp,0x10
c0017971:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017975:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001797a:	75 19                	jne    c0017995 <scanMADT()+0xc9>
c001797c:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c0017981:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017987:	83 e2 fe             	and    edx,0xfffffffe
c001798a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017990:	e9 b8 03 00 00       	jmp    c0017d4d <scanMADT()+0x481>
c0017995:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001799d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179a4:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00179a8:	0f 87 9f 03 00 00    	ja     c0017d4d <scanMADT()+0x481>
c00179ae:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00179b6:	0f 87 91 03 00 00    	ja     c0017d4d <scanMADT()+0x481>
c00179bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00179c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179c8:	8d 50 01             	lea    edx,[eax+0x1]
c00179cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179d3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179d7:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00179db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179df:	8d 50 01             	lea    edx,[eax+0x1]
c00179e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179ea:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179ee:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00179f2:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00179f7:	0f 86 4f 03 00 00    	jbe    c0017d4c <scanMADT()+0x480>
c00179fd:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017a02:	75 57                	jne    c0017a5b <scanMADT()+0x18f>
c0017a04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a08:	8d 50 01             	lea    edx,[eax+0x1]
c0017a0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a0f:	8a 15 60 06 03 c0    	mov    dl,BYTE PTR ds:0xc0030660
c0017a15:	0f b6 d2             	movzx  edx,dl
c0017a18:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a1c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a20:	88 82 a0 06 03 c0    	mov    BYTE PTR [edx-0x3ffcf960],al
c0017a26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a2a:	8d 50 01             	lea    edx,[eax+0x1]
c0017a2d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a31:	8a 15 60 06 03 c0    	mov    dl,BYTE PTR ds:0xc0030660
c0017a37:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017a3a:	88 0d 60 06 03 c0    	mov    BYTE PTR ds:0xc0030660,cl
c0017a40:	0f b6 d2             	movzx  edx,dl
c0017a43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a47:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a4b:	88 82 80 06 03 c0    	mov    BYTE PTR [edx-0x3ffcf980],al
c0017a51:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017a56:	e9 da 02 00 00       	jmp    c0017d35 <scanMADT()+0x469>
c0017a5b:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017a60:	0f 85 14 01 00 00    	jne    c0017b7a <scanMADT()+0x2ae>
c0017a66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a6a:	8d 50 01             	lea    edx,[eax+0x1]
c0017a6d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a71:	8a 15 20 05 03 c0    	mov    dl,BYTE PTR ds:0xc0030520
c0017a77:	0f b6 d2             	movzx  edx,dl
c0017a7a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a7e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a82:	88 82 40 05 03 c0    	mov    BYTE PTR [edx-0x3ffcfac0],al
c0017a88:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017a8c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a94:	01 d0                	add    eax,edx
c0017a96:	83 c0 2c             	add    eax,0x2c
c0017a99:	8a 00                	mov    al,BYTE PTR [eax]
c0017a9b:	0f b6 d0             	movzx  edx,al
c0017a9e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017aa2:	8d 48 01             	lea    ecx,[eax+0x1]
c0017aa5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017aa9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017aad:	0f b6 c0             	movzx  eax,al
c0017ab0:	c1 e0 08             	shl    eax,0x8
c0017ab3:	89 d1                	mov    ecx,edx
c0017ab5:	09 c1                	or     ecx,eax
c0017ab7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017abb:	8d 50 02             	lea    edx,[eax+0x2]
c0017abe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ac2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ac6:	0f b6 c0             	movzx  eax,al
c0017ac9:	c1 e0 10             	shl    eax,0x10
c0017acc:	09 c1                	or     ecx,eax
c0017ace:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ad2:	8d 50 03             	lea    edx,[eax+0x3]
c0017ad5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ad9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017add:	0f b6 c0             	movzx  eax,al
c0017ae0:	c1 e0 18             	shl    eax,0x18
c0017ae3:	09 c1                	or     ecx,eax
c0017ae5:	89 ca                	mov    edx,ecx
c0017ae7:	a0 20 05 03 c0       	mov    al,ds:0xc0030520
c0017aec:	0f b6 c0             	movzx  eax,al
c0017aef:	89 14 85 60 05 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfaa0],edx
c0017af6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017afb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017aff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b03:	01 d0                	add    eax,edx
c0017b05:	83 c0 2c             	add    eax,0x2c
c0017b08:	8a 00                	mov    al,BYTE PTR [eax]
c0017b0a:	0f b6 d0             	movzx  edx,al
c0017b0d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b11:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b14:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b18:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017b1c:	0f b6 c0             	movzx  eax,al
c0017b1f:	c1 e0 08             	shl    eax,0x8
c0017b22:	89 d1                	mov    ecx,edx
c0017b24:	09 c1                	or     ecx,eax
c0017b26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b2a:	8d 50 02             	lea    edx,[eax+0x2]
c0017b2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b31:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b35:	0f b6 c0             	movzx  eax,al
c0017b38:	c1 e0 10             	shl    eax,0x10
c0017b3b:	09 c1                	or     ecx,eax
c0017b3d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b41:	8d 50 03             	lea    edx,[eax+0x3]
c0017b44:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b48:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b4c:	0f b6 c0             	movzx  eax,al
c0017b4f:	c1 e0 18             	shl    eax,0x18
c0017b52:	09 c1                	or     ecx,eax
c0017b54:	89 ca                	mov    edx,ecx
c0017b56:	a0 20 05 03 c0       	mov    al,ds:0xc0030520
c0017b5b:	0f b6 c0             	movzx  eax,al
c0017b5e:	89 14 85 e0 05 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfa20],edx
c0017b65:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b6a:	a0 20 05 03 c0       	mov    al,ds:0xc0030520
c0017b6f:	40                   	inc    eax
c0017b70:	a2 20 05 03 c0       	mov    ds:0xc0030520,al
c0017b75:	e9 bb 01 00 00       	jmp    c0017d35 <scanMADT()+0x469>
c0017b7a:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017b7f:	0f 85 e9 00 00 00    	jne    c0017c6e <scanMADT()+0x3a2>
c0017b85:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b89:	8d 50 01             	lea    edx,[eax+0x1]
c0017b8c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b90:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b94:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017b98:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017b9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ba0:	8d 50 01             	lea    edx,[eax+0x1]
c0017ba3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ba7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bab:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017baf:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017bb3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bb7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bbb:	01 d0                	add    eax,edx
c0017bbd:	83 c0 2c             	add    eax,0x2c
c0017bc0:	8a 00                	mov    al,BYTE PTR [eax]
c0017bc2:	0f b6 d0             	movzx  edx,al
c0017bc5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bc9:	8d 48 01             	lea    ecx,[eax+0x1]
c0017bcc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bd0:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017bd4:	0f b6 c0             	movzx  eax,al
c0017bd7:	c1 e0 08             	shl    eax,0x8
c0017bda:	89 d1                	mov    ecx,edx
c0017bdc:	09 c1                	or     ecx,eax
c0017bde:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017be2:	8d 50 02             	lea    edx,[eax+0x2]
c0017be5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017be9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017bed:	0f b6 c0             	movzx  eax,al
c0017bf0:	c1 e0 10             	shl    eax,0x10
c0017bf3:	09 c1                	or     ecx,eax
c0017bf5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bf9:	8d 50 03             	lea    edx,[eax+0x3]
c0017bfc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c00:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c04:	0f b6 c0             	movzx  eax,al
c0017c07:	c1 e0 18             	shl    eax,0x18
c0017c0a:	09 c8                	or     eax,ecx
c0017c0c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017c10:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017c15:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c1d:	01 d0                	add    eax,edx
c0017c1f:	83 c0 2c             	add    eax,0x2c
c0017c22:	8a 00                	mov    al,BYTE PTR [eax]
c0017c24:	0f b6 c0             	movzx  eax,al
c0017c27:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017c2b:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017c2e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c32:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017c36:	0f b6 d2             	movzx  edx,dl
c0017c39:	c1 e2 08             	shl    edx,0x8
c0017c3c:	09 d0                	or     eax,edx
c0017c3e:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017c43:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017c48:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017c4d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c51:	88 90 e0 cd 02 c0    	mov    BYTE PTR [eax-0x3ffd3220],dl
c0017c57:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017c5c:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017c61:	66 89 84 12 00 05 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcfb00],ax
c0017c69:	e9 c7 00 00 00       	jmp    c0017d35 <scanMADT()+0x469>
c0017c6e:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017c73:	0f 85 b0 00 00 00    	jne    c0017d29 <scanMADT()+0x45d>
c0017c79:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c7d:	8d 50 01             	lea    edx,[eax+0x1]
c0017c80:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c84:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c88:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c8c:	0f b6 c0             	movzx  eax,al
c0017c8f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017c93:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c97:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c9b:	01 d0                	add    eax,edx
c0017c9d:	83 c0 2c             	add    eax,0x2c
c0017ca0:	8a 00                	mov    al,BYTE PTR [eax]
c0017ca2:	0f b6 d0             	movzx  edx,al
c0017ca5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ca9:	8d 48 01             	lea    ecx,[eax+0x1]
c0017cac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cb0:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017cb4:	0f b6 c0             	movzx  eax,al
c0017cb7:	c1 e0 08             	shl    eax,0x8
c0017cba:	09 d0                	or     eax,edx
c0017cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017cc0:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017cc5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cc9:	8d 50 01             	lea    edx,[eax+0x1]
c0017ccc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017cd0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cd4:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017cd8:	0f b6 c0             	movzx  eax,al
c0017cdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ce3:	c1 e0 08             	shl    eax,0x8
c0017ce6:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017cea:	89 c1                	mov    ecx,eax
c0017cec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cf0:	c1 e0 18             	shl    eax,0x18
c0017cf3:	89 c3                	mov    ebx,eax
c0017cf5:	a1 70 04 03 c0       	mov    eax,ds:0xc0030470
c0017cfa:	8d 50 01             	lea    edx,[eax+0x1]
c0017cfd:	89 15 70 04 03 c0    	mov    DWORD PTR ds:0xc0030470,edx
c0017d03:	09 d9                	or     ecx,ebx
c0017d05:	89 ca                	mov    edx,ecx
c0017d07:	89 14 85 80 04 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfb80],edx
c0017d0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017d12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017d16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d1a:	68 b8 ad 02 c0       	push   0xc002adb8
c0017d1f:	e8 f1 ad ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0017d24:	83 c4 10             	add    esp,0x10
c0017d27:	eb 0c                	jmp    c0017d35 <scanMADT()+0x469>
c0017d29:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017d2e:	75 05                	jne    c0017d35 <scanMADT()+0x469>
c0017d30:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017d35:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017d3a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d3e:	01 d0                	add    eax,edx
c0017d40:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017d44:	e9 54 fc ff ff       	jmp    c001799d <scanMADT()+0xd1>
c0017d49:	90                   	nop
c0017d4a:	eb 01                	jmp    c0017d4d <scanMADT()+0x481>
c0017d4c:	90                   	nop
c0017d4d:	83 c4 38             	add    esp,0x38
c0017d50:	5b                   	pop    ebx
c0017d51:	c3                   	ret    

c0017d52 <ACPI::ACPI()>:
c0017d52:	83 ec 0c             	sub    esp,0xc
c0017d55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d59:	83 ec 08             	sub    esp,0x8
c0017d5c:	68 5b ac 02 c0       	push   0xc002ac5b
c0017d61:	50                   	push   eax
c0017d62:	e8 c5 c3 ff ff       	call   c001412c <Device::Device(char const*)>
c0017d67:	83 c4 10             	add    esp,0x10
c0017d6a:	ba 2c ae 02 c0       	mov    edx,0xc002ae2c
c0017d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d73:	89 10                	mov    DWORD PTR [eax],edx
c0017d75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d79:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d84:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d92:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017da0:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0017da7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017dab:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017db2:	e8 15 fb ff ff       	call   c00178cc <scanMADT()>
c0017db7:	90                   	nop
c0017db8:	83 c4 0c             	add    esp,0xc
c0017dbb:	c3                   	ret    

c0017dbc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017dbc:	83 ec 2c             	sub    esp,0x2c
c0017dbf:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017dc3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017dc7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017dcb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017dcf:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017dd4:	88 d0                	mov    al,dl
c0017dd6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017dda:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017ddf:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017de7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017deb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017df1:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017df5:	0f 8d 97 00 00 00    	jge    c0017e92 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017dfb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017dff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e03:	83 c2 2a             	add    edx,0x2a
c0017e06:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017e0a:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017e0f:	75 78                	jne    c0017e89 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017e11:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e15:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e19:	83 c2 2a             	add    edx,0x2a
c0017e1c:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017e20:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017e24:	75 63                	jne    c0017e89 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017e26:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017e2b:	74 3a                	je     c0017e67 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017e2d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e31:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e35:	83 c2 2a             	add    edx,0x2a
c0017e38:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017e3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e43:	39 c2                	cmp    edx,eax
c0017e45:	74 10                	je     c0017e57 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017e47:	83 ec 0c             	sub    esp,0xc
c0017e4a:	68 f4 ad 02 c0       	push   0xc002adf4
c0017e4f:	e8 e9 21 00 00       	call   c001a03d <Krnl::panic(char const*)>
c0017e54:	83 c4 10             	add    esp,0x10
c0017e57:	83 ec 0c             	sub    esp,0xc
c0017e5a:	68 60 ac 02 c0       	push   0xc002ac60
c0017e5f:	e8 d9 21 00 00       	call   c001a03d <Krnl::panic(char const*)>
c0017e64:	83 c4 10             	add    esp,0x10
c0017e67:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017e6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e6f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e73:	83 c2 2a             	add    edx,0x2a
c0017e76:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017e7a:	8b 02                	mov    eax,DWORD PTR [edx]
c0017e7c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017e7f:	89 01                	mov    DWORD PTR [ecx],eax
c0017e81:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e84:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017e89:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017e8d:	e9 55 ff ff ff       	jmp    c0017de7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017e92:	90                   	nop
c0017e93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e97:	83 c4 2c             	add    esp,0x2c
c0017e9a:	c2 04 00             	ret    0x4
c0017e9d:	90                   	nop

c0017e9e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017e9e:	83 ec 1c             	sub    esp,0x1c
c0017ea1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ea5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017ea9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ead:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017eb2:	88 c8                	mov    al,cl
c0017eb4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017eb8:	88 d0                	mov    al,dl
c0017eba:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017ebe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ec2:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017ec8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ecc:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017ecf:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017ed3:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017ed7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017edb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017ee1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ee5:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017ee8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017eec:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017ef1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ef5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017efb:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017eff:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f06:	83 c2 2a             	add    edx,0x2a
c0017f09:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017f0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f11:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f1b:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017f1e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017f22:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017f26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f2a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f30:	8d 50 01             	lea    edx,[eax+0x1]
c0017f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f37:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017f3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f41:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f47:	3d 00 02 00 00       	cmp    eax,0x200
c0017f4c:	75 10                	jne    c0017f5e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017f4e:	83 ec 0c             	sub    esp,0xc
c0017f51:	68 6f ac 02 c0       	push   0xc002ac6f
c0017f56:	e8 e2 20 00 00       	call   c001a03d <Krnl::panic(char const*)>
c0017f5b:	83 c4 10             	add    esp,0x10
c0017f5e:	90                   	nop
c0017f5f:	83 c4 1c             	add    esp,0x1c
c0017f62:	c3                   	ret    
c0017f63:	90                   	nop

c0017f64 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017f64:	b8 00 00 00 00       	mov    eax,0x0
c0017f69:	c3                   	ret    

c0017f6a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017f6a:	83 ec 1c             	sub    esp,0x1c
c0017f6d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017f71:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017f74:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017f78:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c0017f7d:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017f82:	83 ec 08             	sub    esp,0x8
c0017f85:	52                   	push   edx
c0017f86:	50                   	push   eax
c0017f87:	e8 d2 6e ff ff       	call   c000ee5e <Computer::readCMOS(unsigned char)>
c0017f8c:	83 c4 10             	add    esp,0x10
c0017f8f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017f93:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c0017f98:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017f9d:	83 ec 04             	sub    esp,0x4
c0017fa0:	6a 01                	push   0x1
c0017fa2:	52                   	push   edx
c0017fa3:	50                   	push   eax
c0017fa4:	e8 cb 6f ff ff       	call   c000ef74 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017fa9:	83 c4 10             	add    esp,0x10
c0017fac:	90                   	nop
c0017fad:	83 c4 1c             	add    esp,0x1c
c0017fb0:	c3                   	ret    
c0017fb1:	90                   	nop

c0017fb2 <ACPI::open(int, int, void*)>:
c0017fb2:	53                   	push   ebx
c0017fb3:	83 ec 28             	sub    esp,0x28
c0017fb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fba:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0017fc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fc5:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017fcc:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c0017fd1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017fd7:	83 e0 04             	and    eax,0x4
c0017fda:	84 c0                	test   al,al
c0017fdc:	74 47                	je     c0018025 <ACPI::open(int, int, void*)+0x73>
c0017fde:	a1 68 04 03 c0       	mov    eax,ds:0xc0030468
c0017fe3:	83 ec 08             	sub    esp,0x8
c0017fe6:	68 8c ac 02 c0       	push   0xc002ac8c
c0017feb:	50                   	push   eax
c0017fec:	e8 3f f8 ff ff       	call   c0017830 <findDataTable(unsigned char*, char*)>
c0017ff1:	83 c4 10             	add    esp,0x10
c0017ff4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017ff8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017ffd:	74 26                	je     c0018025 <ACPI::open(int, int, void*)+0x73>
c0017fff:	83 ec 0c             	sub    esp,0xc
c0018002:	68 91 ac 02 c0       	push   0xc002ac91
c0018007:	e8 09 ab ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001800c:	83 c4 10             	add    esp,0x10
c001800f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018013:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001801a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001801e:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018025:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c001802d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018031:	8a 00                	mov    al,BYTE PTR [eax]
c0018033:	3c 01                	cmp    al,0x1
c0018035:	75 28                	jne    c001805f <ACPI::open(int, int, void*)+0xad>
c0018037:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001803b:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018042:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018046:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001804d:	83 ec 0c             	sub    esp,0xc
c0018050:	68 a2 ac 02 c0       	push   0xc002aca2
c0018055:	e8 bb aa ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001805a:	83 c4 10             	add    esp,0x10
c001805d:	eb 25                	jmp    c0018084 <ACPI::open(int, int, void*)+0xd2>
c001805f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018063:	8a 00                	mov    al,BYTE PTR [eax]
c0018065:	3c 02                	cmp    al,0x2
c0018067:	75 1b                	jne    c0018084 <ACPI::open(int, int, void*)+0xd2>
c0018069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001806d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018074:	83 ec 0c             	sub    esp,0xc
c0018077:	68 aa ac 02 c0       	push   0xc002acaa
c001807c:	e8 94 aa ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018081:	83 c4 10             	add    esp,0x10
c0018084:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018088:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001808e:	83 f0 01             	xor    eax,0x1
c0018091:	84 c0                	test   al,al
c0018093:	74 6a                	je     c00180ff <ACPI::open(int, int, void*)+0x14d>
c0018095:	83 ec 0c             	sub    esp,0xc
c0018098:	68 b2 ac 02 c0       	push   0xc002acb2
c001809d:	e8 73 aa ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00180a2:	83 c4 10             	add    esp,0x10
c00180a5:	e8 a6 80 fe ff       	call   c0000150 <manualPCIProbe>
c00180aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00180ae:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00180b3:	75 28                	jne    c00180dd <ACPI::open(int, int, void*)+0x12b>
c00180b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180b9:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00180c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180c4:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00180cb:	83 ec 0c             	sub    esp,0xc
c00180ce:	68 c0 ac 02 c0       	push   0xc002acc0
c00180d3:	e8 3d aa ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00180d8:	83 c4 10             	add    esp,0x10
c00180db:	eb 22                	jmp    c00180ff <ACPI::open(int, int, void*)+0x14d>
c00180dd:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00180e2:	75 1b                	jne    c00180ff <ACPI::open(int, int, void*)+0x14d>
c00180e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180e8:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00180ef:	83 ec 0c             	sub    esp,0xc
c00180f2:	68 ca ac 02 c0       	push   0xc002acca
c00180f7:	e8 19 aa ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00180fc:	83 c4 10             	add    esp,0x10
c00180ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018103:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018109:	84 c0                	test   al,al
c001810b:	74 13                	je     c0018120 <ACPI::open(int, int, void*)+0x16e>
c001810d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018111:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018117:	83 f0 01             	xor    eax,0x1
c001811a:	0f b6 c0             	movzx  eax,al
c001811d:	40                   	inc    eax
c001811e:	eb 05                	jmp    c0018125 <ACPI::open(int, int, void*)+0x173>
c0018120:	b8 00 00 00 00       	mov    eax,0x0
c0018125:	83 ec 08             	sub    esp,0x8
c0018128:	50                   	push   eax
c0018129:	68 d4 ac 02 c0       	push   0xc002acd4
c001812e:	e8 e2 a9 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018133:	83 c4 10             	add    esp,0x10
c0018136:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001813a:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018140:	84 c0                	test   al,al
c0018142:	74 67                	je     c00181ab <ACPI::open(int, int, void*)+0x1f9>
c0018144:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c001814c:	83 ec 0c             	sub    esp,0xc
c001814f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018153:	e8 ee 76 ff ff       	call   c000f846 <malloc>
c0018158:	83 c4 10             	add    esp,0x10
c001815b:	89 c3                	mov    ebx,eax
c001815d:	83 ec 0c             	sub    esp,0xc
c0018160:	53                   	push   ebx
c0018161:	e8 6a a0 00 00       	call   c00221d0 <PCI::PCI()>
c0018166:	83 c4 10             	add    esp,0x10
c0018169:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001816d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018171:	83 ec 08             	sub    esp,0x8
c0018174:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018178:	50                   	push   eax
c0018179:	e8 be bd ff ff       	call   c0013f3c <Device::addChild(Device*)>
c001817e:	83 c4 10             	add    esp,0x10
c0018181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018185:	8b 00                	mov    eax,DWORD PTR [eax]
c0018187:	83 c0 08             	add    eax,0x8
c001818a:	8b 00                	mov    eax,DWORD PTR [eax]
c001818c:	6a 00                	push   0x0
c001818e:	6a 00                	push   0x0
c0018190:	6a 00                	push   0x0
c0018192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018196:	ff d0                	call   eax
c0018198:	83 c4 10             	add    esp,0x10
c001819b:	83 ec 0c             	sub    esp,0xc
c001819e:	68 dd ac 02 c0       	push   0xc002acdd
c00181a3:	e8 6d a9 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00181a8:	83 c4 10             	add    esp,0x10
c00181ab:	83 ec 0c             	sub    esp,0xc
c00181ae:	68 e8 ac 02 c0       	push   0xc002ace8
c00181b3:	e8 10 44 00 00       	call   c001c5c8 <Thr::loadKernelSymbolTable(char const*)>
c00181b8:	83 c4 10             	add    esp,0x10
c00181bb:	8b 1d 88 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db88
c00181c1:	83 ec 08             	sub    esp,0x8
c00181c4:	6a 01                	push   0x1
c00181c6:	68 06 ad 02 c0       	push   0xc002ad06
c00181cb:	e8 55 4e 00 00       	call   c001d025 <Thr::loadDLL(char const*, bool)>
c00181d0:	83 c4 10             	add    esp,0x10
c00181d3:	83 ec 08             	sub    esp,0x8
c00181d6:	53                   	push   ebx
c00181d7:	50                   	push   eax
c00181d8:	e8 7c 50 00 00       	call   c001d259 <Thr::executeDLL(unsigned long, void*)>
c00181dd:	83 c4 10             	add    esp,0x10
c00181e0:	8b 1d 88 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002db88
c00181e6:	83 ec 08             	sub    esp,0x8
c00181e9:	6a 01                	push   0x1
c00181eb:	68 23 ad 02 c0       	push   0xc002ad23
c00181f0:	e8 30 4e 00 00       	call   c001d025 <Thr::loadDLL(char const*, bool)>
c00181f5:	83 c4 10             	add    esp,0x10
c00181f8:	83 ec 08             	sub    esp,0x8
c00181fb:	53                   	push   ebx
c00181fc:	50                   	push   eax
c00181fd:	e8 57 50 00 00       	call   c001d259 <Thr::executeDLL(unsigned long, void*)>
c0018202:	83 c4 10             	add    esp,0x10
c0018205:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c001820a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018210:	83 e0 04             	and    eax,0x4
c0018213:	84 c0                	test   al,al
c0018215:	0f 84 d2 00 00 00    	je     c00182ed <ACPI::open(int, int, void*)+0x33b>
c001821b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018222:	83 ec 0c             	sub    esp,0xc
c0018225:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018229:	e8 18 76 ff ff       	call   c000f846 <malloc>
c001822e:	83 c4 10             	add    esp,0x10
c0018231:	89 c3                	mov    ebx,eax
c0018233:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c0018238:	83 ec 04             	sub    esp,0x4
c001823b:	50                   	push   eax
c001823c:	68 40 ad 02 c0       	push   0xc002ad40
c0018241:	53                   	push   ebx
c0018242:	e8 27 ae ff ff       	call   c001306e <File::File(char const*, Process*)>
c0018247:	83 c4 10             	add    esp,0x10
c001824a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001824e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018253:	74 17                	je     c001826c <ACPI::open(int, int, void*)+0x2ba>
c0018255:	83 ec 0c             	sub    esp,0xc
c0018258:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001825c:	e8 df b0 ff ff       	call   c0013340 <File::exists()>
c0018261:	83 c4 10             	add    esp,0x10
c0018264:	84 c0                	test   al,al
c0018266:	74 04                	je     c001826c <ACPI::open(int, int, void*)+0x2ba>
c0018268:	b0 01                	mov    al,0x1
c001826a:	eb 02                	jmp    c001826e <ACPI::open(int, int, void*)+0x2bc>
c001826c:	b0 00                	mov    al,0x0
c001826e:	84 c0                	test   al,al
c0018270:	74 22                	je     c0018294 <ACPI::open(int, int, void*)+0x2e2>
c0018272:	83 ec 08             	sub    esp,0x8
c0018275:	6a 01                	push   0x1
c0018277:	68 40 ad 02 c0       	push   0xc002ad40
c001827c:	e8 a4 4d 00 00       	call   c001d025 <Thr::loadDLL(char const*, bool)>
c0018281:	83 c4 10             	add    esp,0x10
c0018284:	83 ec 08             	sub    esp,0x8
c0018287:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001828b:	50                   	push   eax
c001828c:	e8 c8 4f 00 00       	call   c001d259 <Thr::executeDLL(unsigned long, void*)>
c0018291:	83 c4 10             	add    esp,0x10
c0018294:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018299:	74 1e                	je     c00182b9 <ACPI::open(int, int, void*)+0x307>
c001829b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00182a0:	74 17                	je     c00182b9 <ACPI::open(int, int, void*)+0x307>
c00182a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00182a8:	83 c0 08             	add    eax,0x8
c00182ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00182ad:	83 ec 0c             	sub    esp,0xc
c00182b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00182b4:	ff d0                	call   eax
c00182b6:	83 c4 10             	add    esp,0x10
c00182b9:	a1 68 04 03 c0       	mov    eax,ds:0xc0030468
c00182be:	83 ec 08             	sub    esp,0x8
c00182c1:	68 5d ad 02 c0       	push   0xc002ad5d
c00182c6:	50                   	push   eax
c00182c7:	e8 64 f5 ff ff       	call   c0017830 <findDataTable(unsigned char*, char*)>
c00182cc:	83 c4 10             	add    esp,0x10
c00182cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00182d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00182d8:	74 13                	je     c00182ed <ACPI::open(int, int, void*)+0x33b>
c00182da:	83 ec 08             	sub    esp,0x8
c00182dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00182e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00182e5:	e8 80 fc ff ff       	call   c0017f6a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00182ea:	83 c4 10             	add    esp,0x10
c00182ed:	b8 00 00 00 00       	mov    eax,0x0
c00182f2:	83 c4 28             	add    esp,0x28
c00182f5:	5b                   	pop    ebx
c00182f6:	c3                   	ret    
c00182f7:	90                   	nop

c00182f8 <ACPI::sleep()>:
c00182f8:	83 ec 0c             	sub    esp,0xc
c00182fb:	a1 40 02 03 c0       	mov    eax,ds:0xc0030240
c0018300:	85 c0                	test   eax,eax
c0018302:	74 07                	je     c001830b <ACPI::sleep()+0x13>
c0018304:	a1 40 02 03 c0       	mov    eax,ds:0xc0030240
c0018309:	ff d0                	call   eax
c001830b:	90                   	nop
c001830c:	83 c4 0c             	add    esp,0xc
c001830f:	c3                   	ret    

c0018310 <CPU::close(int, int, void*)>:
c0018310:	31 c0                	xor    eax,eax
c0018312:	c3                   	ret    
c0018313:	90                   	nop

c0018314 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018314:	55                   	push   ebp
c0018315:	57                   	push   edi
c0018316:	56                   	push   esi
c0018317:	53                   	push   ebx
c0018318:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001831c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018320:	89 ce                	mov    esi,ecx
c0018322:	89 d5                	mov    ebp,edx
c0018324:	80 f9 04             	cmp    cl,0x4
c0018327:	75 28                	jne    c0018351 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018329:	8d 42 f9             	lea    eax,[edx-0x7]
c001832c:	3c 03                	cmp    al,0x3
c001832e:	0f 86 63 01 00 00    	jbe    c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018334:	80 fa 03             	cmp    dl,0x3
c0018337:	0f 84 5a 01 00 00    	je     c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001833d:	8d 7a f2             	lea    edi,[edx-0xe]
c0018340:	b8 b0 cf 02 c0       	mov    eax,0xc002cfb0
c0018345:	89 fb                	mov    ebx,edi
c0018347:	80 fb 01             	cmp    bl,0x1
c001834a:	77 4e                	ja     c001839a <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001834c:	e9 52 01 00 00       	jmp    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018351:	80 f9 05             	cmp    cl,0x5
c0018354:	75 4d                	jne    c00183a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018356:	b8 c0 cf 02 c0       	mov    eax,0xc002cfc0
c001835b:	80 fa 03             	cmp    dl,0x3
c001835e:	0f 86 3f 01 00 00    	jbe    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018364:	8d 7a fa             	lea    edi,[edx-0x6]
c0018367:	b8 d0 cf 02 c0       	mov    eax,0xc002cfd0
c001836c:	89 fb                	mov    ebx,edi
c001836e:	80 fb 01             	cmp    bl,0x1
c0018371:	0f 86 2c 01 00 00    	jbe    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018377:	b8 e0 cf 02 c0       	mov    eax,0xc002cfe0
c001837c:	80 fa 08             	cmp    dl,0x8
c001837f:	0f 84 1e 01 00 00    	je     c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018385:	89 d7                	mov    edi,edx
c0018387:	b8 f0 cf 02 c0       	mov    eax,0xc002cff0
c001838c:	83 e7 fb             	and    edi,0xfffffffb
c001838f:	89 fb                	mov    ebx,edi
c0018391:	80 fb 09             	cmp    bl,0x9
c0018394:	0f 84 09 01 00 00    	je     c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001839a:	31 c0                	xor    eax,eax
c001839c:	89 eb                	mov    ebx,ebp
c001839e:	0f b6 fb             	movzx  edi,bl
c00183a1:	eb 30                	jmp    c00183d3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00183a3:	31 c0                	xor    eax,eax
c00183a5:	80 f9 06             	cmp    cl,0x6
c00183a8:	75 f2                	jne    c001839c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00183aa:	80 fa 0a             	cmp    dl,0xa
c00183ad:	77 ed                	ja     c001839c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00183af:	bf de 05 00 00       	mov    edi,0x5de
c00183b4:	0f a3 d7             	bt     edi,edx
c00183b7:	73 e3                	jae    c001839c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00183b9:	b8 00 d0 02 c0       	mov    eax,0xc002d000
c00183be:	e9 e0 00 00 00       	jmp    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183c3:	39 c7                	cmp    edi,eax
c00183c5:	0f 84 d3 00 00 00    	je     c001849e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00183cb:	40                   	inc    eax
c00183cc:	3d d0 00 00 00       	cmp    eax,0xd0
c00183d1:	74 09                	je     c00183dc <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00183d3:	89 f3                	mov    ebx,esi
c00183d5:	80 fb 0f             	cmp    bl,0xf
c00183d8:	75 f1                	jne    c00183cb <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00183da:	eb e7                	jmp    c00183c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00183dc:	80 f9 10             	cmp    cl,0x10
c00183df:	75 14                	jne    c00183f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00183e1:	8d 42 fc             	lea    eax,[edx-0x4]
c00183e4:	83 e0 fb             	and    eax,0xfffffffb
c00183e7:	3c 02                	cmp    al,0x2
c00183e9:	76 34                	jbe    c001841f <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00183eb:	b8 42 b1 02 c0       	mov    eax,0xc002b142
c00183f0:	80 fa 02             	cmp    dl,0x2
c00183f3:	eb 24                	jmp    c0018419 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00183f5:	80 f9 11             	cmp    cl,0x11
c00183f8:	75 13                	jne    c001840d <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00183fa:	b8 42 b1 02 c0       	mov    eax,0xc002b142
c00183ff:	80 fa 03             	cmp    dl,0x3
c0018402:	0f 85 9b 00 00 00    	jne    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018408:	e9 91 00 00 00       	jmp    c001849e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001840d:	80 f9 12             	cmp    cl,0x12
c0018410:	75 14                	jne    c0018426 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018412:	b8 42 b1 02 c0       	mov    eax,0xc002b142
c0018417:	fe ca                	dec    dl
c0018419:	0f 85 84 00 00 00    	jne    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001841f:	b8 20 d0 02 c0       	mov    eax,0xc002d020
c0018424:	eb 7d                	jmp    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018426:	80 f9 14             	cmp    cl,0x14
c0018429:	75 12                	jne    c001843d <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001842b:	4a                   	dec    edx
c001842c:	b8 42 b1 02 c0       	mov    eax,0xc002b142
c0018431:	80 fa 01             	cmp    dl,0x1
c0018434:	77 6d                	ja     c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018436:	b8 30 d0 02 c0       	mov    eax,0xc002d030
c001843b:	eb 66                	jmp    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001843d:	80 f9 15             	cmp    cl,0x15
c0018440:	75 31                	jne    c0018473 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018442:	b8 40 d0 02 c0       	mov    eax,0xc002d040
c0018447:	80 fa 01             	cmp    dl,0x1
c001844a:	74 57                	je     c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001844c:	b8 42 b1 02 c0       	mov    eax,0xc002b142
c0018451:	80 fa 13             	cmp    dl,0x13
c0018454:	76 0c                	jbe    c0018462 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018456:	80 fa 30             	cmp    dl,0x30
c0018459:	75 48                	jne    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001845b:	b8 60 d0 02 c0       	mov    eax,0xc002d060
c0018460:	eb 41                	jmp    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018462:	b9 04 00 09 00       	mov    ecx,0x90004
c0018467:	0f a3 d1             	bt     ecx,edx
c001846a:	73 37                	jae    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001846c:	b8 50 d0 02 c0       	mov    eax,0xc002d050
c0018471:	eb 30                	jmp    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018473:	b8 42 b1 02 c0       	mov    eax,0xc002b142
c0018478:	80 f9 16             	cmp    cl,0x16
c001847b:	75 26                	jne    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001847d:	b8 70 d0 02 c0       	mov    eax,0xc002d070
c0018482:	84 d2                	test   dl,dl
c0018484:	74 1d                	je     c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018486:	b8 42 b1 02 c0       	mov    eax,0xc002b142
c001848b:	80 fa 30             	cmp    dl,0x30
c001848e:	75 13                	jne    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018490:	b8 80 d0 02 c0       	mov    eax,0xc002d080
c0018495:	eb 0c                	jmp    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018497:	b8 a0 cf 02 c0       	mov    eax,0xc002cfa0
c001849c:	eb 05                	jmp    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001849e:	b8 10 d0 02 c0       	mov    eax,0xc002d010
c00184a3:	5b                   	pop    ebx
c00184a4:	5e                   	pop    esi
c00184a5:	5f                   	pop    edi
c00184a6:	5d                   	pop    ebp
c00184a7:	c3                   	ret    

c00184a8 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00184a8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00184ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00184b0:	80 f9 04             	cmp    cl,0x4
c00184b3:	75 6b                	jne    c0018520 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00184b5:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c00184ba:	80 fa 01             	cmp    dl,0x1
c00184bd:	0f 86 92 02 00 00    	jbe    c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184c3:	b8 10 ce 02 c0       	mov    eax,0xc002ce10
c00184c8:	80 fa 02             	cmp    dl,0x2
c00184cb:	0f 84 84 02 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184d1:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c00184d6:	80 fa 03             	cmp    dl,0x3
c00184d9:	0f 84 76 02 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184df:	b8 30 ce 02 c0       	mov    eax,0xc002ce30
c00184e4:	80 fa 04             	cmp    dl,0x4
c00184e7:	0f 84 68 02 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184ed:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c00184f2:	80 fa 05             	cmp    dl,0x5
c00184f5:	0f 84 5a 02 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184fb:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c0018500:	80 fa 07             	cmp    dl,0x7
c0018503:	0f 84 4c 02 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018509:	83 ea 08             	sub    edx,0x8
c001850c:	b8 42 b1 02 c0       	mov    eax,0xc002b142
c0018511:	80 fa 01             	cmp    dl,0x1
c0018514:	0f 87 3b 02 00 00    	ja     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001851a:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c001851f:	c3                   	ret    
c0018520:	80 f9 05             	cmp    cl,0x5
c0018523:	75 45                	jne    c001856a <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018525:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018528:	b8 60 ce 02 c0       	mov    eax,0xc002ce60
c001852d:	80 f9 02             	cmp    cl,0x2
c0018530:	0f 86 1f 02 00 00    	jbe    c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018536:	80 fa 04             	cmp    dl,0x4
c0018539:	0f 84 f3 01 00 00    	je     c0018732 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001853f:	80 fa 07             	cmp    dl,0x7
c0018542:	0f 84 0d 02 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018548:	b8 70 ce 02 c0       	mov    eax,0xc002ce70
c001854d:	80 fa 08             	cmp    dl,0x8
c0018550:	0f 84 ff 01 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018556:	b8 42 b1 02 c0       	mov    eax,0xc002b142
c001855b:	80 fa 09             	cmp    dl,0x9
c001855e:	0f 85 f1 01 00 00    	jne    c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018564:	b8 80 ce 02 c0       	mov    eax,0xc002ce80
c0018569:	c3                   	ret    
c001856a:	80 f9 06             	cmp    cl,0x6
c001856d:	0f 85 85 01 00 00    	jne    c00186f8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018573:	b8 90 ce 02 c0       	mov    eax,0xc002ce90
c0018578:	80 fa 01             	cmp    dl,0x1
c001857b:	0f 84 d4 01 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018581:	8d 42 fb             	lea    eax,[edx-0x5]
c0018584:	3c 01                	cmp    al,0x1
c0018586:	0f 86 ac 01 00 00    	jbe    c0018738 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001858c:	80 fa 03             	cmp    dl,0x3
c001858f:	0f 84 a3 01 00 00    	je     c0018738 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018595:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018598:	b8 b0 ce 02 c0       	mov    eax,0xc002ceb0
c001859d:	80 f9 01             	cmp    cl,0x1
c00185a0:	0f 86 af 01 00 00    	jbe    c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185a6:	80 fa 09             	cmp    dl,0x9
c00185a9:	0f 84 8f 01 00 00    	je     c001873e <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00185af:	8d 4a f6             	lea    ecx,[edx-0xa]
c00185b2:	80 f9 01             	cmp    cl,0x1
c00185b5:	0f 86 9a 01 00 00    	jbe    c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185bb:	b8 c0 ce 02 c0       	mov    eax,0xc002cec0
c00185c0:	80 fa 0d             	cmp    dl,0xd
c00185c3:	0f 84 8c 01 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185c9:	b8 d0 ce 02 c0       	mov    eax,0xc002ced0
c00185ce:	80 fa 0e             	cmp    dl,0xe
c00185d1:	0f 84 7e 01 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185d7:	b8 e0 ce 02 c0       	mov    eax,0xc002cee0
c00185dc:	80 fa 0f             	cmp    dl,0xf
c00185df:	0f 84 70 01 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185e5:	b8 c0 ce 02 c0       	mov    eax,0xc002cec0
c00185ea:	80 fa 15             	cmp    dl,0x15
c00185ed:	0f 84 62 01 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185f3:	8d 4a ea             	lea    ecx,[edx-0x16]
c00185f6:	b8 e0 ce 02 c0       	mov    eax,0xc002cee0
c00185fb:	80 f9 01             	cmp    cl,0x1
c00185fe:	0f 86 51 01 00 00    	jbe    c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018604:	80 fa 1a             	cmp    dl,0x1a
c0018607:	0f 84 37 01 00 00    	je     c0018744 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c001860d:	80 fa 1c             	cmp    dl,0x1c
c0018610:	0f 84 34 01 00 00    	je     c001874a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018616:	80 fa 1d             	cmp    dl,0x1d
c0018619:	0f 84 36 01 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001861f:	b8 10 cf 02 c0       	mov    eax,0xc002cf10
c0018624:	80 fa 25             	cmp    dl,0x25
c0018627:	0f 84 28 01 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001862d:	8d 4a da             	lea    ecx,[edx-0x26]
c0018630:	b8 00 cf 02 c0       	mov    eax,0xc002cf00
c0018635:	80 f9 01             	cmp    cl,0x1
c0018638:	0f 86 17 01 00 00    	jbe    c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001863e:	b8 20 cf 02 c0       	mov    eax,0xc002cf20
c0018643:	80 fa 2a             	cmp    dl,0x2a
c0018646:	0f 84 09 01 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001864c:	b8 10 cf 02 c0       	mov    eax,0xc002cf10
c0018651:	80 fa 2c             	cmp    dl,0x2c
c0018654:	0f 84 fb 00 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001865a:	b8 20 cf 02 c0       	mov    eax,0xc002cf20
c001865f:	80 fa 2d             	cmp    dl,0x2d
c0018662:	0f 84 ed 00 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018668:	b8 f0 ce 02 c0       	mov    eax,0xc002cef0
c001866d:	80 fa 2e             	cmp    dl,0x2e
c0018670:	0f 84 df 00 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018676:	b8 10 cf 02 c0       	mov    eax,0xc002cf10
c001867b:	80 fa 2f             	cmp    dl,0x2f
c001867e:	0f 84 d1 00 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018684:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018687:	b8 00 cf 02 c0       	mov    eax,0xc002cf00
c001868c:	80 f9 01             	cmp    cl,0x1
c001868f:	0f 86 c0 00 00 00    	jbe    c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018695:	b8 30 cf 02 c0       	mov    eax,0xc002cf30
c001869a:	80 fa 37             	cmp    dl,0x37
c001869d:	0f 84 b2 00 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186a3:	b8 40 cf 02 c0       	mov    eax,0xc002cf40
c00186a8:	80 fa 3a             	cmp    dl,0x3a
c00186ab:	0f 84 a4 00 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186b1:	b8 50 cf 02 c0       	mov    eax,0xc002cf50
c00186b6:	80 fa 3c             	cmp    dl,0x3c
c00186b9:	0f 84 96 00 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186bf:	b8 60 cf 02 c0       	mov    eax,0xc002cf60
c00186c4:	80 fa 3d             	cmp    dl,0x3d
c00186c7:	0f 84 88 00 00 00    	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186cd:	b8 40 cf 02 c0       	mov    eax,0xc002cf40
c00186d2:	80 fa 3e             	cmp    dl,0x3e
c00186d5:	74 7e                	je     c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186d7:	8d 42 bb             	lea    eax,[edx-0x45]
c00186da:	3c 01                	cmp    al,0x1
c00186dc:	76 72                	jbe    c0018750 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00186de:	80 fa 3f             	cmp    dl,0x3f
c00186e1:	74 6d                	je     c0018750 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00186e3:	80 fa 4a             	cmp    dl,0x4a
c00186e6:	74 0a                	je     c00186f2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00186e8:	b8 42 b1 02 c0       	mov    eax,0xc002b142
c00186ed:	80 fa 4d             	cmp    dl,0x4d
c00186f0:	75 63                	jne    c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186f2:	b8 30 cf 02 c0       	mov    eax,0xc002cf30
c00186f7:	c3                   	ret    
c00186f8:	b8 42 b1 02 c0       	mov    eax,0xc002b142
c00186fd:	80 f9 0b             	cmp    cl,0xb
c0018700:	75 0a                	jne    c001870c <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018702:	fe ca                	dec    dl
c0018704:	75 4f                	jne    c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018706:	b8 70 cf 02 c0       	mov    eax,0xc002cf70
c001870b:	c3                   	ret    
c001870c:	80 f9 0f             	cmp    cl,0xf
c001870f:	75 44                	jne    c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018711:	b8 80 cf 02 c0       	mov    eax,0xc002cf80
c0018716:	80 fa 02             	cmp    dl,0x2
c0018719:	76 3a                	jbe    c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001871b:	8d 42 fd             	lea    eax,[edx-0x3]
c001871e:	3c 01                	cmp    al,0x1
c0018720:	76 0a                	jbe    c001872c <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018722:	b8 42 b1 02 c0       	mov    eax,0xc002b142
c0018727:	80 fa 06             	cmp    dl,0x6
c001872a:	75 29                	jne    c0018755 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001872c:	b8 90 cf 02 c0       	mov    eax,0xc002cf90
c0018731:	c3                   	ret    
c0018732:	b8 70 ce 02 c0       	mov    eax,0xc002ce70
c0018737:	c3                   	ret    
c0018738:	b8 a0 ce 02 c0       	mov    eax,0xc002cea0
c001873d:	c3                   	ret    
c001873e:	b8 c0 ce 02 c0       	mov    eax,0xc002cec0
c0018743:	c3                   	ret    
c0018744:	b8 f0 ce 02 c0       	mov    eax,0xc002cef0
c0018749:	c3                   	ret    
c001874a:	b8 00 cf 02 c0       	mov    eax,0xc002cf00
c001874f:	c3                   	ret    
c0018750:	b8 50 cf 02 c0       	mov    eax,0xc002cf50
c0018755:	c3                   	ret    

c0018756 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018756:	60                   	pusha  
c0018757:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001875b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001875f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018763:	9c                   	pushf  
c0018764:	fa                   	cli    
c0018765:	0f 09                	wbinvd 
c0018767:	0f 30                	wrmsr  
c0018769:	9d                   	popf   
c001876a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001876e:	89 02                	mov    DWORD PTR [edx],eax
c0018770:	61                   	popa   
c0018771:	c3                   	ret    

c0018772 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018772:	60                   	pusha  
c0018773:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018777:	9c                   	pushf  
c0018778:	fa                   	cli    
c0018779:	0f 09                	wbinvd 
c001877b:	31 c0                	xor    eax,eax
c001877d:	31 d2                	xor    edx,edx
c001877f:	0f 32                	rdmsr  
c0018781:	9d                   	popf   
c0018782:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018786:	89 02                	mov    DWORD PTR [edx],eax
c0018788:	61                   	popa   
c0018789:	c3                   	ret    

c001878a <CPU::AMD_K6_writeback(int, int, int)>:
c001878a:	56                   	push   esi
c001878b:	53                   	push   ebx
c001878c:	83 ec 10             	sub    esp,0x10
c001878f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018793:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018798:	75 5d                	jne    c00187f7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001879a:	83 f8 08             	cmp    eax,0x8
c001879d:	75 09                	jne    c00187a8 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001879f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00187a4:	7e 13                	jle    c00187b9 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00187a6:	eb 30                	jmp    c00187d8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00187a8:	83 f8 06             	cmp    eax,0x6
c00187ab:	7c 4a                	jl     c00187f7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00187ad:	83 f8 07             	cmp    eax,0x7
c00187b0:	7e 07                	jle    c00187b9 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00187b2:	83 f8 09             	cmp    eax,0x9
c00187b5:	74 21                	je     c00187d8 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00187b7:	eb 3e                	jmp    c00187f7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00187b9:	89 e6                	mov    esi,esp
c00187bb:	8b 1d c4 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002dbc4
c00187c1:	56                   	push   esi
c00187c2:	c1 eb 15             	shr    ebx,0x15
c00187c5:	68 82 00 00 c0       	push   0xc0000082
c00187ca:	83 e3 7e             	and    ebx,0x7e
c00187cd:	e8 a0 ff ff ff       	call   c0018772 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00187d2:	56                   	push   esi
c00187d3:	6a 00                	push   0x0
c00187d5:	53                   	push   ebx
c00187d6:	eb 12                	jmp    c00187ea <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00187d8:	89 e3                	mov    ebx,esp
c00187da:	53                   	push   ebx
c00187db:	68 82 00 00 c0       	push   0xc0000082
c00187e0:	e8 8d ff ff ff       	call   c0018772 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00187e5:	53                   	push   ebx
c00187e6:	6a 00                	push   0x0
c00187e8:	6a 00                	push   0x0
c00187ea:	68 82 00 00 c0       	push   0xc0000082
c00187ef:	e8 62 ff ff ff       	call   c0018756 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00187f4:	83 c4 18             	add    esp,0x18
c00187f7:	83 c4 10             	add    esp,0x10
c00187fa:	5b                   	pop    ebx
c00187fb:	5e                   	pop    esi
c00187fc:	c3                   	ret    
c00187fd:	90                   	nop

c00187fe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00187fe:	55                   	push   ebp
c00187ff:	57                   	push   edi
c0018800:	56                   	push   esi
c0018801:	53                   	push   ebx
c0018802:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018806:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001880a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001880e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018812:	39 05 a0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0a0,eax
c0018818:	75 23                	jne    c001883d <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001881a:	a1 cc 06 03 c0       	mov    eax,ds:0xc00306cc
c001881f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018823:	89 06                	mov    DWORD PTR [esi],eax
c0018825:	a1 c8 06 03 c0       	mov    eax,ds:0xc00306c8
c001882a:	89 07                	mov    DWORD PTR [edi],eax
c001882c:	a1 c4 06 03 c0       	mov    eax,ds:0xc00306c4
c0018831:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018834:	a1 c0 06 03 c0       	mov    eax,ds:0xc00306c0
c0018839:	89 02                	mov    DWORD PTR [edx],eax
c001883b:	eb 3f                	jmp    c001887c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001883d:	31 c9                	xor    ecx,ecx
c001883f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018843:	0f a2                	cpuid  
c0018845:	89 06                	mov    DWORD PTR [esi],eax
c0018847:	89 1f                	mov    DWORD PTR [edi],ebx
c0018849:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001884d:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018850:	89 10                	mov    DWORD PTR [eax],edx
c0018852:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018856:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001885b:	8b 06                	mov    eax,DWORD PTR [esi]
c001885d:	a3 cc 06 03 c0       	mov    ds:0xc00306cc,eax
c0018862:	8b 07                	mov    eax,DWORD PTR [edi]
c0018864:	a3 c8 06 03 c0       	mov    ds:0xc00306c8,eax
c0018869:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001886c:	a3 c4 06 03 c0       	mov    ds:0xc00306c4,eax
c0018871:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018875:	8b 00                	mov    eax,DWORD PTR [eax]
c0018877:	a3 c0 06 03 c0       	mov    ds:0xc00306c0,eax
c001887c:	5b                   	pop    ebx
c001887d:	5e                   	pop    esi
c001887e:	5f                   	pop    edi
c001887f:	5d                   	pop    ebp
c0018880:	c3                   	ret    
c0018881:	90                   	nop

c0018882 <CPU::cpuidCheckEDX(unsigned int)>:
c0018882:	83 ec 10             	sub    esp,0x10
c0018885:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018889:	50                   	push   eax
c001888a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001888e:	50                   	push   eax
c001888f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018893:	50                   	push   eax
c0018894:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018898:	50                   	push   eax
c0018899:	6a 01                	push   0x1
c001889b:	e8 5e ff ff ff       	call   c00187fe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188a4:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00188a8:	0f 95 c0             	setne  al
c00188ab:	83 c4 24             	add    esp,0x24
c00188ae:	c3                   	ret    
c00188af:	90                   	nop

c00188b0 <CPU::cpuidCheckECX(unsigned int)>:
c00188b0:	83 ec 10             	sub    esp,0x10
c00188b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188b7:	50                   	push   eax
c00188b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188bc:	50                   	push   eax
c00188bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188c1:	50                   	push   eax
c00188c2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188c6:	50                   	push   eax
c00188c7:	6a 01                	push   0x1
c00188c9:	e8 30 ff ff ff       	call   c00187fe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188d2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00188d6:	0f 95 c0             	setne  al
c00188d9:	83 c4 24             	add    esp,0x24
c00188dc:	c3                   	ret    
c00188dd:	90                   	nop

c00188de <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00188de:	83 ec 10             	sub    esp,0x10
c00188e1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188e5:	50                   	push   eax
c00188e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188ea:	50                   	push   eax
c00188eb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188ef:	50                   	push   eax
c00188f0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188f4:	50                   	push   eax
c00188f5:	6a 07                	push   0x7
c00188f7:	e8 02 ff ff ff       	call   c00187fe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018900:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018904:	0f 95 c0             	setne  al
c0018907:	83 c4 24             	add    esp,0x24
c001890a:	c3                   	ret    
c001890b:	90                   	nop

c001890c <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001890c:	83 ec 10             	sub    esp,0x10
c001890f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018913:	50                   	push   eax
c0018914:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018918:	50                   	push   eax
c0018919:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001891d:	50                   	push   eax
c001891e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018922:	50                   	push   eax
c0018923:	6a 07                	push   0x7
c0018925:	e8 d4 fe ff ff       	call   c00187fe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001892a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001892e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018932:	0f 95 c0             	setne  al
c0018935:	83 c4 24             	add    esp,0x24
c0018938:	c3                   	ret    
c0018939:	90                   	nop

c001893a <CPU::CPU()>:
c001893a:	83 ec 0c             	sub    esp,0xc
c001893d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018941:	83 ec 08             	sub    esp,0x8
c0018944:	68 42 b1 02 c0       	push   0xc002b142
c0018949:	50                   	push   eax
c001894a:	e8 dd b7 ff ff       	call   c001412c <Device::Device(char const*)>
c001894f:	83 c4 10             	add    esp,0x10
c0018952:	ba 1c b2 02 c0       	mov    edx,0xc002b21c
c0018957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001895b:	89 10                	mov    DWORD PTR [eax],edx
c001895d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018961:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001896b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001896f:	05 78 01 00 00       	add    eax,0x178
c0018974:	83 ec 0c             	sub    esp,0xc
c0018977:	50                   	push   eax
c0018978:	e8 e1 66 ff ff       	call   c000f05e <GDT::GDT()>
c001897d:	83 c4 10             	add    esp,0x10
c0018980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018984:	05 7c 09 00 00       	add    eax,0x97c
c0018989:	83 ec 0c             	sub    esp,0xc
c001898c:	50                   	push   eax
c001898d:	e8 2e 69 ff ff       	call   c000f2c0 <IDT::IDT()>
c0018992:	83 c4 10             	add    esp,0x10
c0018995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018999:	05 7c 11 00 00       	add    eax,0x117c
c001899e:	83 ec 0c             	sub    esp,0xc
c00189a1:	50                   	push   eax
c00189a2:	e8 af 8a ff ff       	call   c0011456 <TSS::TSS()>
c00189a7:	83 c4 10             	add    esp,0x10
c00189aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189ae:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00189b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189b9:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00189c3:	90                   	nop
c00189c4:	83 c4 0c             	add    esp,0xc
c00189c7:	c3                   	ret    

c00189c8 <CPU::displayFeatures()>:
c00189c8:	53                   	push   ebx
c00189c9:	83 ec 10             	sub    esp,0x10
c00189cc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00189d0:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00189d6:	68 50 ae 02 c0       	push   0xc002ae50
c00189db:	e8 35 a1 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00189e0:	59                   	pop    ecx
c00189e1:	58                   	pop    eax
c00189e2:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00189e8:	50                   	push   eax
c00189e9:	68 61 ae 02 c0       	push   0xc002ae61
c00189ee:	e8 22 a1 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00189f3:	58                   	pop    eax
c00189f4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00189fa:	5a                   	pop    edx
c00189fb:	c1 e8 0e             	shr    eax,0xe
c00189fe:	0f b6 c0             	movzx  eax,al
c0018a01:	50                   	push   eax
c0018a02:	68 72 ae 02 c0       	push   0xc002ae72
c0018a07:	e8 09 a1 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018a0c:	59                   	pop    ecx
c0018a0d:	58                   	pop    eax
c0018a0e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a14:	66 c1 e8 06          	shr    ax,0x6
c0018a18:	0f b6 c0             	movzx  eax,al
c0018a1b:	50                   	push   eax
c0018a1c:	68 83 ae 02 c0       	push   0xc002ae83
c0018a21:	e8 ef a0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018a26:	c7 04 24 30 b3 02 c0 	mov    DWORD PTR [esp],0xc002b330
c0018a2d:	e8 e3 a0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018a32:	83 c4 10             	add    esp,0x10
c0018a35:	b8 16 99 02 c0       	mov    eax,0xc0029916
c0018a3a:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018a41:	74 05                	je     c0018a48 <CPU::displayFeatures()+0x80>
c0018a43:	b8 12 99 02 c0       	mov    eax,0xc0029912
c0018a48:	52                   	push   edx
c0018a49:	52                   	push   edx
c0018a4a:	50                   	push   eax
c0018a4b:	68 94 ae 02 c0       	push   0xc002ae94
c0018a50:	e8 c0 a0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018a55:	83 c4 10             	add    esp,0x10
c0018a58:	b8 12 99 02 c0       	mov    eax,0xc0029912
c0018a5d:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018a64:	78 05                	js     c0018a6b <CPU::displayFeatures()+0xa3>
c0018a66:	b8 16 99 02 c0       	mov    eax,0xc0029916
c0018a6b:	51                   	push   ecx
c0018a6c:	51                   	push   ecx
c0018a6d:	50                   	push   eax
c0018a6e:	68 ab ae 02 c0       	push   0xc002aeab
c0018a73:	e8 9d a0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018a78:	83 c4 10             	add    esp,0x10
c0018a7b:	b8 12 99 02 c0       	mov    eax,0xc0029912
c0018a80:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018a87:	75 05                	jne    c0018a8e <CPU::displayFeatures()+0xc6>
c0018a89:	b8 16 99 02 c0       	mov    eax,0xc0029916
c0018a8e:	52                   	push   edx
c0018a8f:	52                   	push   edx
c0018a90:	50                   	push   eax
c0018a91:	68 c2 ae 02 c0       	push   0xc002aec2
c0018a96:	e8 7a a0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018a9b:	83 c4 10             	add    esp,0x10
c0018a9e:	b8 12 99 02 c0       	mov    eax,0xc0029912
c0018aa3:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018aaa:	75 05                	jne    c0018ab1 <CPU::displayFeatures()+0xe9>
c0018aac:	b8 16 99 02 c0       	mov    eax,0xc0029916
c0018ab1:	51                   	push   ecx
c0018ab2:	51                   	push   ecx
c0018ab3:	50                   	push   eax
c0018ab4:	68 d9 ae 02 c0       	push   0xc002aed9
c0018ab9:	e8 57 a0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018abe:	83 c4 10             	add    esp,0x10
c0018ac1:	b8 12 99 02 c0       	mov    eax,0xc0029912
c0018ac6:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018acd:	75 05                	jne    c0018ad4 <CPU::displayFeatures()+0x10c>
c0018acf:	b8 16 99 02 c0       	mov    eax,0xc0029916
c0018ad4:	52                   	push   edx
c0018ad5:	52                   	push   edx
c0018ad6:	50                   	push   eax
c0018ad7:	68 f0 ae 02 c0       	push   0xc002aef0
c0018adc:	e8 34 a0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018ae1:	83 c4 10             	add    esp,0x10
c0018ae4:	b8 12 99 02 c0       	mov    eax,0xc0029912
c0018ae9:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018af0:	75 05                	jne    c0018af7 <CPU::displayFeatures()+0x12f>
c0018af2:	b8 16 99 02 c0       	mov    eax,0xc0029916
c0018af7:	51                   	push   ecx
c0018af8:	51                   	push   ecx
c0018af9:	50                   	push   eax
c0018afa:	68 07 af 02 c0       	push   0xc002af07
c0018aff:	e8 11 a0 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018b04:	83 c4 10             	add    esp,0x10
c0018b07:	b8 12 99 02 c0       	mov    eax,0xc0029912
c0018b0c:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018b13:	75 05                	jne    c0018b1a <CPU::displayFeatures()+0x152>
c0018b15:	b8 16 99 02 c0       	mov    eax,0xc0029916
c0018b1a:	52                   	push   edx
c0018b1b:	52                   	push   edx
c0018b1c:	50                   	push   eax
c0018b1d:	68 1e af 02 c0       	push   0xc002af1e
c0018b22:	e8 ee 9f ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018b27:	83 c4 10             	add    esp,0x10
c0018b2a:	b8 12 99 02 c0       	mov    eax,0xc0029912
c0018b2f:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018b36:	75 05                	jne    c0018b3d <CPU::displayFeatures()+0x175>
c0018b38:	b8 16 99 02 c0       	mov    eax,0xc0029916
c0018b3d:	51                   	push   ecx
c0018b3e:	51                   	push   ecx
c0018b3f:	50                   	push   eax
c0018b40:	68 35 af 02 c0       	push   0xc002af35
c0018b45:	e8 cb 9f ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018b4a:	83 c4 10             	add    esp,0x10
c0018b4d:	b8 12 99 02 c0       	mov    eax,0xc0029912
c0018b52:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018b59:	75 05                	jne    c0018b60 <CPU::displayFeatures()+0x198>
c0018b5b:	b8 16 99 02 c0       	mov    eax,0xc0029916
c0018b60:	52                   	push   edx
c0018b61:	52                   	push   edx
c0018b62:	50                   	push   eax
c0018b63:	68 4c af 02 c0       	push   0xc002af4c
c0018b68:	e8 a8 9f ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018b6d:	83 c4 10             	add    esp,0x10
c0018b70:	b8 12 99 02 c0       	mov    eax,0xc0029912
c0018b75:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018b7c:	75 05                	jne    c0018b83 <CPU::displayFeatures()+0x1bb>
c0018b7e:	b8 16 99 02 c0       	mov    eax,0xc0029916
c0018b83:	51                   	push   ecx
c0018b84:	51                   	push   ecx
c0018b85:	50                   	push   eax
c0018b86:	68 63 af 02 c0       	push   0xc002af63
c0018b8b:	e8 85 9f ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018b90:	83 c4 10             	add    esp,0x10
c0018b93:	b8 12 99 02 c0       	mov    eax,0xc0029912
c0018b98:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018b9f:	75 05                	jne    c0018ba6 <CPU::displayFeatures()+0x1de>
c0018ba1:	b8 16 99 02 c0       	mov    eax,0xc0029916
c0018ba6:	52                   	push   edx
c0018ba7:	52                   	push   edx
c0018ba8:	50                   	push   eax
c0018ba9:	68 7a af 02 c0       	push   0xc002af7a
c0018bae:	e8 62 9f ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018bb3:	83 c4 10             	add    esp,0x10
c0018bb6:	b8 12 99 02 c0       	mov    eax,0xc0029912
c0018bbb:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018bc2:	75 05                	jne    c0018bc9 <CPU::displayFeatures()+0x201>
c0018bc4:	b8 16 99 02 c0       	mov    eax,0xc0029916
c0018bc9:	51                   	push   ecx
c0018bca:	51                   	push   ecx
c0018bcb:	50                   	push   eax
c0018bcc:	68 91 af 02 c0       	push   0xc002af91
c0018bd1:	e8 3f 9f ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018bd6:	83 c4 10             	add    esp,0x10
c0018bd9:	b8 12 99 02 c0       	mov    eax,0xc0029912
c0018bde:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018be5:	75 05                	jne    c0018bec <CPU::displayFeatures()+0x224>
c0018be7:	b8 16 99 02 c0       	mov    eax,0xc0029916
c0018bec:	52                   	push   edx
c0018bed:	52                   	push   edx
c0018bee:	50                   	push   eax
c0018bef:	68 a8 af 02 c0       	push   0xc002afa8
c0018bf4:	e8 1c 9f ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018bf9:	83 c4 10             	add    esp,0x10
c0018bfc:	b8 12 99 02 c0       	mov    eax,0xc0029912
c0018c01:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018c08:	78 05                	js     c0018c0f <CPU::displayFeatures()+0x247>
c0018c0a:	b8 16 99 02 c0       	mov    eax,0xc0029916
c0018c0f:	51                   	push   ecx
c0018c10:	51                   	push   ecx
c0018c11:	50                   	push   eax
c0018c12:	68 bf af 02 c0       	push   0xc002afbf
c0018c17:	e8 f9 9e ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018c1c:	83 c4 10             	add    esp,0x10
c0018c1f:	b8 12 99 02 c0       	mov    eax,0xc0029912
c0018c24:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018c2b:	75 05                	jne    c0018c32 <CPU::displayFeatures()+0x26a>
c0018c2d:	b8 16 99 02 c0       	mov    eax,0xc0029916
c0018c32:	52                   	push   edx
c0018c33:	52                   	push   edx
c0018c34:	50                   	push   eax
c0018c35:	68 d6 af 02 c0       	push   0xc002afd6
c0018c3a:	e8 d6 9e ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0018c3f:	83 c4 18             	add    esp,0x18
c0018c42:	5b                   	pop    ebx
c0018c43:	c3                   	ret    

c0018c44 <CPU::detectFeatures()>:
c0018c44:	55                   	push   ebp
c0018c45:	57                   	push   edi
c0018c46:	56                   	push   esi
c0018c47:	53                   	push   ebx
c0018c48:	83 ec 50             	sub    esp,0x50
c0018c4b:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018c4f:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018c59:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018c60:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018c66:	6a 0d                	push   0xd
c0018c68:	6a 00                	push   0x0
c0018c6a:	57                   	push   edi
c0018c6b:	e8 08 7b fe ff       	call   c0000778 <memset>
c0018c70:	83 c4 10             	add    esp,0x10
c0018c73:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c0018c78:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018c7f:	0f 84 20 09 00 00    	je     c00195a5 <CPU::detectFeatures()+0x961>
c0018c85:	83 ec 0c             	sub    esp,0xc
c0018c88:	6a 10                	push   0x10
c0018c8a:	e8 f3 fb ff ff       	call   c0018882 <CPU::cpuidCheckEDX(unsigned int)>
c0018c8f:	83 e0 01             	and    eax,0x1
c0018c92:	8d 14 00             	lea    edx,[eax+eax*1]
c0018c95:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018c9b:	83 e0 fd             	and    eax,0xfffffffd
c0018c9e:	09 d0                	or     eax,edx
c0018ca0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ca6:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018cad:	e8 d0 fb ff ff       	call   c0018882 <CPU::cpuidCheckEDX(unsigned int)>
c0018cb2:	83 e0 01             	and    eax,0x1
c0018cb5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018cbc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018cc2:	83 e0 fb             	and    eax,0xfffffffb
c0018cc5:	09 d0                	or     eax,edx
c0018cc7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ccd:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018cd4:	e8 a9 fb ff ff       	call   c0018882 <CPU::cpuidCheckEDX(unsigned int)>
c0018cd9:	83 e0 01             	and    eax,0x1
c0018cdc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018ce3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018ce9:	83 e0 f7             	and    eax,0xfffffff7
c0018cec:	09 d0                	or     eax,edx
c0018cee:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018cf4:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018cfb:	e8 82 fb ff ff       	call   c0018882 <CPU::cpuidCheckEDX(unsigned int)>
c0018d00:	83 e0 01             	and    eax,0x1
c0018d03:	c1 e0 04             	shl    eax,0x4
c0018d06:	88 c2                	mov    dl,al
c0018d08:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d0e:	83 e0 ef             	and    eax,0xffffffef
c0018d11:	09 d0                	or     eax,edx
c0018d13:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d19:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018d20:	e8 5d fb ff ff       	call   c0018882 <CPU::cpuidCheckEDX(unsigned int)>
c0018d25:	83 e0 01             	and    eax,0x1
c0018d28:	c1 e0 05             	shl    eax,0x5
c0018d2b:	88 c2                	mov    dl,al
c0018d2d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d33:	83 e0 df             	and    eax,0xffffffdf
c0018d36:	09 d0                	or     eax,edx
c0018d38:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d3e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018d45:	e8 38 fb ff ff       	call   c0018882 <CPU::cpuidCheckEDX(unsigned int)>
c0018d4a:	83 e0 01             	and    eax,0x1
c0018d4d:	8d 14 00             	lea    edx,[eax+eax*1]
c0018d50:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018d56:	83 e0 fd             	and    eax,0xfffffffd
c0018d59:	09 d0                	or     eax,edx
c0018d5b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018d61:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018d68:	e8 15 fb ff ff       	call   c0018882 <CPU::cpuidCheckEDX(unsigned int)>
c0018d6d:	83 e0 01             	and    eax,0x1
c0018d70:	c1 e0 06             	shl    eax,0x6
c0018d73:	88 c2                	mov    dl,al
c0018d75:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018d7b:	83 e0 bf             	and    eax,0xffffffbf
c0018d7e:	09 d0                	or     eax,edx
c0018d80:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018d86:	58                   	pop    eax
c0018d87:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018d8b:	56                   	push   esi
c0018d8c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018d90:	55                   	push   ebp
c0018d91:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d95:	50                   	push   eax
c0018d96:	8d 54 24 28          	lea    edx,[esp+0x28]
c0018d9a:	52                   	push   edx
c0018d9b:	6a 00                	push   0x0
c0018d9d:	e8 5c fa ff ff       	call   c00187fe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018da2:	83 c4 1c             	add    esp,0x1c
c0018da5:	6a 04                	push   0x4
c0018da7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018dab:	50                   	push   eax
c0018dac:	57                   	push   edi
c0018dad:	e8 92 79 fe ff       	call   c0000744 <memcpy>
c0018db2:	83 c4 0c             	add    esp,0xc
c0018db5:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0018dbb:	6a 04                	push   0x4
c0018dbd:	56                   	push   esi
c0018dbe:	50                   	push   eax
c0018dbf:	e8 80 79 fe ff       	call   c0000744 <memcpy>
c0018dc4:	83 c4 0c             	add    esp,0xc
c0018dc7:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0018dcd:	6a 04                	push   0x4
c0018dcf:	55                   	push   ebp
c0018dd0:	50                   	push   eax
c0018dd1:	e8 6e 79 fe ff       	call   c0000744 <memcpy>
c0018dd6:	58                   	pop    eax
c0018dd7:	5a                   	pop    edx
c0018dd8:	68 ed af 02 c0       	push   0xc002afed
c0018ddd:	57                   	push   edi
c0018dde:	e8 dd 7a fe ff       	call   c00008c0 <strcmp>
c0018de3:	83 c4 10             	add    esp,0x10
c0018de6:	85 c0                	test   eax,eax
c0018de8:	75 0f                	jne    c0018df9 <CPU::detectFeatures()+0x1b5>
c0018dea:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018df4:	e9 22 02 00 00       	jmp    c001901b <CPU::detectFeatures()+0x3d7>
c0018df9:	50                   	push   eax
c0018dfa:	50                   	push   eax
c0018dfb:	68 fa af 02 c0       	push   0xc002affa
c0018e00:	57                   	push   edi
c0018e01:	e8 ba 7a fe ff       	call   c00008c0 <strcmp>
c0018e06:	83 c4 10             	add    esp,0x10
c0018e09:	85 c0                	test   eax,eax
c0018e0b:	74 dd                	je     c0018dea <CPU::detectFeatures()+0x1a6>
c0018e0d:	51                   	push   ecx
c0018e0e:	51                   	push   ecx
c0018e0f:	68 07 b0 02 c0       	push   0xc002b007
c0018e14:	57                   	push   edi
c0018e15:	e8 a6 7a fe ff       	call   c00008c0 <strcmp>
c0018e1a:	83 c4 10             	add    esp,0x10
c0018e1d:	85 c0                	test   eax,eax
c0018e1f:	74 2a                	je     c0018e4b <CPU::detectFeatures()+0x207>
c0018e21:	52                   	push   edx
c0018e22:	52                   	push   edx
c0018e23:	68 14 b0 02 c0       	push   0xc002b014
c0018e28:	57                   	push   edi
c0018e29:	e8 92 7a fe ff       	call   c00008c0 <strcmp>
c0018e2e:	83 c4 10             	add    esp,0x10
c0018e31:	85 c0                	test   eax,eax
c0018e33:	74 16                	je     c0018e4b <CPU::detectFeatures()+0x207>
c0018e35:	50                   	push   eax
c0018e36:	50                   	push   eax
c0018e37:	68 21 b0 02 c0       	push   0xc002b021
c0018e3c:	57                   	push   edi
c0018e3d:	e8 7e 7a fe ff       	call   c00008c0 <strcmp>
c0018e42:	83 c4 10             	add    esp,0x10
c0018e45:	85 c0                	test   eax,eax
c0018e47:	74 48                	je     c0018e91 <CPU::detectFeatures()+0x24d>
c0018e49:	eb 0f                	jmp    c0018e5a <CPU::detectFeatures()+0x216>
c0018e4b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018e55:	e9 c1 01 00 00       	jmp    c001901b <CPU::detectFeatures()+0x3d7>
c0018e5a:	50                   	push   eax
c0018e5b:	50                   	push   eax
c0018e5c:	68 2e b0 02 c0       	push   0xc002b02e
c0018e61:	57                   	push   edi
c0018e62:	e8 59 7a fe ff       	call   c00008c0 <strcmp>
c0018e67:	83 c4 10             	add    esp,0x10
c0018e6a:	85 c0                	test   eax,eax
c0018e6c:	74 23                	je     c0018e91 <CPU::detectFeatures()+0x24d>
c0018e6e:	50                   	push   eax
c0018e6f:	50                   	push   eax
c0018e70:	68 3b b0 02 c0       	push   0xc002b03b
c0018e75:	57                   	push   edi
c0018e76:	e8 45 7a fe ff       	call   c00008c0 <strcmp>
c0018e7b:	83 c4 10             	add    esp,0x10
c0018e7e:	85 c0                	test   eax,eax
c0018e80:	75 1e                	jne    c0018ea0 <CPU::detectFeatures()+0x25c>
c0018e82:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018e8c:	e9 8a 01 00 00       	jmp    c001901b <CPU::detectFeatures()+0x3d7>
c0018e91:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018e9b:	e9 7b 01 00 00       	jmp    c001901b <CPU::detectFeatures()+0x3d7>
c0018ea0:	50                   	push   eax
c0018ea1:	50                   	push   eax
c0018ea2:	68 48 b0 02 c0       	push   0xc002b048
c0018ea7:	57                   	push   edi
c0018ea8:	e8 13 7a fe ff       	call   c00008c0 <strcmp>
c0018ead:	83 c4 10             	add    esp,0x10
c0018eb0:	85 c0                	test   eax,eax
c0018eb2:	75 0f                	jne    c0018ec3 <CPU::detectFeatures()+0x27f>
c0018eb4:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018ebe:	e9 58 01 00 00       	jmp    c001901b <CPU::detectFeatures()+0x3d7>
c0018ec3:	50                   	push   eax
c0018ec4:	50                   	push   eax
c0018ec5:	68 07 b0 02 c0       	push   0xc002b007
c0018eca:	57                   	push   edi
c0018ecb:	e8 f0 79 fe ff       	call   c00008c0 <strcmp>
c0018ed0:	83 c4 10             	add    esp,0x10
c0018ed3:	85 c0                	test   eax,eax
c0018ed5:	75 0f                	jne    c0018ee6 <CPU::detectFeatures()+0x2a2>
c0018ed7:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018ee1:	e9 35 01 00 00       	jmp    c001901b <CPU::detectFeatures()+0x3d7>
c0018ee6:	50                   	push   eax
c0018ee7:	50                   	push   eax
c0018ee8:	68 55 b0 02 c0       	push   0xc002b055
c0018eed:	57                   	push   edi
c0018eee:	e8 cd 79 fe ff       	call   c00008c0 <strcmp>
c0018ef3:	83 c4 10             	add    esp,0x10
c0018ef6:	85 c0                	test   eax,eax
c0018ef8:	75 0f                	jne    c0018f09 <CPU::detectFeatures()+0x2c5>
c0018efa:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018f04:	e9 12 01 00 00       	jmp    c001901b <CPU::detectFeatures()+0x3d7>
c0018f09:	51                   	push   ecx
c0018f0a:	51                   	push   ecx
c0018f0b:	68 62 b0 02 c0       	push   0xc002b062
c0018f10:	57                   	push   edi
c0018f11:	e8 aa 79 fe ff       	call   c00008c0 <strcmp>
c0018f16:	83 c4 10             	add    esp,0x10
c0018f19:	85 c0                	test   eax,eax
c0018f1b:	75 0f                	jne    c0018f2c <CPU::detectFeatures()+0x2e8>
c0018f1d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018f27:	e9 ef 00 00 00       	jmp    c001901b <CPU::detectFeatures()+0x3d7>
c0018f2c:	52                   	push   edx
c0018f2d:	52                   	push   edx
c0018f2e:	68 6f b0 02 c0       	push   0xc002b06f
c0018f33:	57                   	push   edi
c0018f34:	e8 87 79 fe ff       	call   c00008c0 <strcmp>
c0018f39:	83 c4 10             	add    esp,0x10
c0018f3c:	85 c0                	test   eax,eax
c0018f3e:	75 0f                	jne    c0018f4f <CPU::detectFeatures()+0x30b>
c0018f40:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018f4a:	e9 cc 00 00 00       	jmp    c001901b <CPU::detectFeatures()+0x3d7>
c0018f4f:	50                   	push   eax
c0018f50:	50                   	push   eax
c0018f51:	68 7c b0 02 c0       	push   0xc002b07c
c0018f56:	57                   	push   edi
c0018f57:	e8 64 79 fe ff       	call   c00008c0 <strcmp>
c0018f5c:	83 c4 10             	add    esp,0x10
c0018f5f:	85 c0                	test   eax,eax
c0018f61:	75 0f                	jne    c0018f72 <CPU::detectFeatures()+0x32e>
c0018f63:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018f6d:	e9 a9 00 00 00       	jmp    c001901b <CPU::detectFeatures()+0x3d7>
c0018f72:	50                   	push   eax
c0018f73:	50                   	push   eax
c0018f74:	68 89 b0 02 c0       	push   0xc002b089
c0018f79:	57                   	push   edi
c0018f7a:	e8 41 79 fe ff       	call   c00008c0 <strcmp>
c0018f7f:	83 c4 10             	add    esp,0x10
c0018f82:	85 c0                	test   eax,eax
c0018f84:	75 0f                	jne    c0018f95 <CPU::detectFeatures()+0x351>
c0018f86:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018f90:	e9 86 00 00 00       	jmp    c001901b <CPU::detectFeatures()+0x3d7>
c0018f95:	50                   	push   eax
c0018f96:	50                   	push   eax
c0018f97:	68 96 b0 02 c0       	push   0xc002b096
c0018f9c:	57                   	push   edi
c0018f9d:	e8 1e 79 fe ff       	call   c00008c0 <strcmp>
c0018fa2:	83 c4 10             	add    esp,0x10
c0018fa5:	85 c0                	test   eax,eax
c0018fa7:	75 0c                	jne    c0018fb5 <CPU::detectFeatures()+0x371>
c0018fa9:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018fb3:	eb 66                	jmp    c001901b <CPU::detectFeatures()+0x3d7>
c0018fb5:	50                   	push   eax
c0018fb6:	50                   	push   eax
c0018fb7:	68 a3 b0 02 c0       	push   0xc002b0a3
c0018fbc:	57                   	push   edi
c0018fbd:	e8 fe 78 fe ff       	call   c00008c0 <strcmp>
c0018fc2:	83 c4 10             	add    esp,0x10
c0018fc5:	85 c0                	test   eax,eax
c0018fc7:	75 0c                	jne    c0018fd5 <CPU::detectFeatures()+0x391>
c0018fc9:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018fd3:	eb 46                	jmp    c001901b <CPU::detectFeatures()+0x3d7>
c0018fd5:	50                   	push   eax
c0018fd6:	50                   	push   eax
c0018fd7:	68 b0 b0 02 c0       	push   0xc002b0b0
c0018fdc:	57                   	push   edi
c0018fdd:	e8 de 78 fe ff       	call   c00008c0 <strcmp>
c0018fe2:	83 c4 10             	add    esp,0x10
c0018fe5:	85 c0                	test   eax,eax
c0018fe7:	74 e0                	je     c0018fc9 <CPU::detectFeatures()+0x385>
c0018fe9:	50                   	push   eax
c0018fea:	50                   	push   eax
c0018feb:	68 bd b0 02 c0       	push   0xc002b0bd
c0018ff0:	57                   	push   edi
c0018ff1:	e8 ca 78 fe ff       	call   c00008c0 <strcmp>
c0018ff6:	83 c4 10             	add    esp,0x10
c0018ff9:	85 c0                	test   eax,eax
c0018ffb:	74 cc                	je     c0018fc9 <CPU::detectFeatures()+0x385>
c0018ffd:	51                   	push   ecx
c0018ffe:	51                   	push   ecx
c0018fff:	68 ca b0 02 c0       	push   0xc002b0ca
c0019004:	57                   	push   edi
c0019005:	e8 b6 78 fe ff       	call   c00008c0 <strcmp>
c001900a:	83 c4 10             	add    esp,0x10
c001900d:	85 c0                	test   eax,eax
c001900f:	74 b8                	je     c0018fc9 <CPU::detectFeatures()+0x385>
c0019011:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001901b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019020:	0f 86 be 00 00 00    	jbe    c00190e4 <CPU::detectFeatures()+0x4a0>
c0019026:	83 ec 0c             	sub    esp,0xc
c0019029:	68 80 00 00 00       	push   0x80
c001902e:	e8 ab f8 ff ff       	call   c00188de <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019033:	83 e0 01             	and    eax,0x1
c0019036:	c1 e0 06             	shl    eax,0x6
c0019039:	88 c2                	mov    dl,al
c001903b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019041:	83 e0 bf             	and    eax,0xffffffbf
c0019044:	09 d0                	or     eax,edx
c0019046:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001904c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019053:	e8 86 f8 ff ff       	call   c00188de <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019058:	83 e0 01             	and    eax,0x1
c001905b:	c1 e0 04             	shl    eax,0x4
c001905e:	88 c2                	mov    dl,al
c0019060:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019066:	83 e0 ef             	and    eax,0xffffffef
c0019069:	09 d0                	or     eax,edx
c001906b:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019071:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019078:	e8 61 f8 ff ff       	call   c00188de <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001907d:	c1 e0 07             	shl    eax,0x7
c0019080:	88 c2                	mov    dl,al
c0019082:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019088:	83 e0 7f             	and    eax,0x7f
c001908b:	09 d0                	or     eax,edx
c001908d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019093:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001909a:	e8 6d f8 ff ff       	call   c001890c <CPU::cpuidCheckExtendedECX(unsigned int)>
c001909f:	83 e0 01             	and    eax,0x1
c00190a2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00190a9:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00190af:	83 e0 f7             	and    eax,0xfffffff7
c00190b2:	09 d0                	or     eax,edx
c00190b4:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00190ba:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00190c1:	e8 46 f8 ff ff       	call   c001890c <CPU::cpuidCheckExtendedECX(unsigned int)>
c00190c6:	83 c4 10             	add    esp,0x10
c00190c9:	83 e0 01             	and    eax,0x1
c00190cc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00190d3:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00190d9:	83 e0 fb             	and    eax,0xfffffffb
c00190dc:	09 d0                	or     eax,edx
c00190de:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00190e4:	83 ec 0c             	sub    esp,0xc
c00190e7:	56                   	push   esi
c00190e8:	55                   	push   ebp
c00190e9:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00190ed:	57                   	push   edi
c00190ee:	8d 44 24 28          	lea    eax,[esp+0x28]
c00190f2:	50                   	push   eax
c00190f3:	6a 01                	push   0x1
c00190f5:	e8 04 f7 ff ff       	call   c00187fe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190fa:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00190fe:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019104:	88 ca                	mov    dl,cl
c0019106:	83 e0 f0             	and    eax,0xfffffff0
c0019109:	83 e2 0f             	and    edx,0xf
c001910c:	09 d0                	or     eax,edx
c001910e:	88 ca                	mov    dl,cl
c0019110:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019116:	c0 ea 04             	shr    dl,0x4
c0019119:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001911d:	0f b6 c2             	movzx  eax,dl
c0019120:	83 c4 20             	add    esp,0x20
c0019123:	c1 e0 06             	shl    eax,0x6
c0019126:	89 c5                	mov    ebp,eax
c0019128:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001912e:	66 25 3f c0          	and    ax,0xc03f
c0019132:	09 e8                	or     eax,ebp
c0019134:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001913b:	89 c8                	mov    eax,ecx
c001913d:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0019143:	c1 e8 08             	shr    eax,0x8
c0019146:	83 e2 3f             	and    edx,0x3f
c0019149:	83 e0 0f             	and    eax,0xf
c001914c:	89 c5                	mov    ebp,eax
c001914e:	c1 e5 06             	shl    ebp,0x6
c0019151:	09 d5                	or     ebp,edx
c0019153:	89 ea                	mov    edx,ebp
c0019155:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001915b:	88 c2                	mov    dl,al
c001915d:	c0 ea 02             	shr    dl,0x2
c0019160:	89 d5                	mov    ebp,edx
c0019162:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019168:	83 e2 c0             	and    edx,0xffffffc0
c001916b:	09 d5                	or     ebp,edx
c001916d:	89 ea                	mov    edx,ebp
c001916f:	89 cd                	mov    ebp,ecx
c0019171:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019177:	c1 ed 0c             	shr    ebp,0xc
c001917a:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0019180:	83 e5 03             	and    ebp,0x3
c0019183:	83 e2 cf             	and    edx,0xffffffcf
c0019186:	c1 e5 04             	shl    ebp,0x4
c0019189:	09 d5                	or     ebp,edx
c001918b:	3c 06                	cmp    al,0x6
c001918d:	89 ea                	mov    edx,ebp
c001918f:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019195:	74 04                	je     c001919b <CPU::detectFeatures()+0x557>
c0019197:	3c 0f                	cmp    al,0xf
c0019199:	75 5c                	jne    c00191f7 <CPU::detectFeatures()+0x5b3>
c001919b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001919f:	89 cd                	mov    ebp,ecx
c00191a1:	c1 ed 10             	shr    ebp,0x10
c00191a4:	c1 e5 04             	shl    ebp,0x4
c00191a7:	09 ea                	or     edx,ebp
c00191a9:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00191af:	0f b6 d2             	movzx  edx,dl
c00191b2:	66 81 e5 3f c0       	and    bp,0xc03f
c00191b7:	c1 e2 06             	shl    edx,0x6
c00191ba:	09 ea                	or     edx,ebp
c00191bc:	3c 0f                	cmp    al,0xf
c00191be:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00191c5:	75 30                	jne    c00191f7 <CPU::detectFeatures()+0x5b3>
c00191c7:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00191cd:	c1 e9 14             	shr    ecx,0x14
c00191d0:	83 e0 3f             	and    eax,0x3f
c00191d3:	83 c1 0f             	add    ecx,0xf
c00191d6:	88 ca                	mov    dl,cl
c00191d8:	c0 e9 02             	shr    cl,0x2
c00191db:	c1 e2 06             	shl    edx,0x6
c00191de:	09 d0                	or     eax,edx
c00191e0:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00191e6:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00191ec:	83 e0 c0             	and    eax,0xffffffc0
c00191ef:	09 c1                	or     ecx,eax
c00191f1:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00191f7:	83 ec 0c             	sub    esp,0xc
c00191fa:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019201:	56                   	push   esi
c0019202:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019206:	50                   	push   eax
c0019207:	57                   	push   edi
c0019208:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001920c:	55                   	push   ebp
c001920d:	68 00 00 00 80       	push   0x80000000
c0019212:	e8 e7 f5 ff ff       	call   c00187fe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019217:	83 c4 20             	add    esp,0x20
c001921a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019222:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019226:	76 1e                	jbe    c0019246 <CPU::detectFeatures()+0x602>
c0019228:	83 ec 0c             	sub    esp,0xc
c001922b:	56                   	push   esi
c001922c:	50                   	push   eax
c001922d:	57                   	push   edi
c001922e:	55                   	push   ebp
c001922f:	68 01 00 00 80       	push   0x80000001
c0019234:	e8 c5 f5 ff ff       	call   c00187fe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019239:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019243:	83 c4 20             	add    esp,0x20
c0019246:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001924c:	83 f8 01             	cmp    eax,0x1
c001924f:	75 6f                	jne    c00192c0 <CPU::detectFeatures()+0x67c>
c0019251:	51                   	push   ecx
c0019252:	51                   	push   ecx
c0019253:	68 d6 b0 02 c0       	push   0xc002b0d6
c0019258:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001925c:	56                   	push   esi
c001925d:	e8 d2 75 fe ff       	call   c0000834 <strcpy>
c0019262:	5f                   	pop    edi
c0019263:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019269:	5d                   	pop    ebp
c001926a:	66 c1 e8 06          	shr    ax,0x6
c001926e:	0f b6 c0             	movzx  eax,al
c0019271:	50                   	push   eax
c0019272:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019278:	c1 e8 0e             	shr    eax,0xe
c001927b:	0f b6 c0             	movzx  eax,al
c001927e:	50                   	push   eax
c001927f:	e8 24 f2 ff ff       	call   c00184a8 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019284:	5a                   	pop    edx
c0019285:	59                   	pop    ecx
c0019286:	50                   	push   eax
c0019287:	56                   	push   esi
c0019288:	e8 e7 76 fe ff       	call   c0000974 <strcat>
c001928d:	5f                   	pop    edi
c001928e:	5d                   	pop    ebp
c001928f:	56                   	push   esi
c0019290:	53                   	push   ebx
c0019291:	e8 88 ae ff ff       	call   c001411e <Device::setName(char const*)>
c0019296:	58                   	pop    eax
c0019297:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001929d:	5a                   	pop    edx
c001929e:	68 dd b0 02 c0       	push   0xc002b0dd
c00192a3:	50                   	push   eax
c00192a4:	e8 17 76 fe ff       	call   c00008c0 <strcmp>
c00192a9:	83 c4 10             	add    esp,0x10
c00192ac:	85 c0                	test   eax,eax
c00192ae:	0f 85 71 03 00 00    	jne    c0019625 <CPU::detectFeatures()+0x9e1>
c00192b4:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00192bb:	e9 65 03 00 00       	jmp    c0019625 <CPU::detectFeatures()+0x9e1>
c00192c0:	83 f8 02             	cmp    eax,0x2
c00192c3:	0f 85 b5 00 00 00    	jne    c001937e <CPU::detectFeatures()+0x73a>
c00192c9:	57                   	push   edi
c00192ca:	57                   	push   edi
c00192cb:	68 ef b0 02 c0       	push   0xc002b0ef
c00192d0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00192d4:	56                   	push   esi
c00192d5:	e8 5a 75 fe ff       	call   c0000834 <strcpy>
c00192da:	5d                   	pop    ebp
c00192db:	58                   	pop    eax
c00192dc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00192e2:	66 c1 e8 06          	shr    ax,0x6
c00192e6:	0f b6 c0             	movzx  eax,al
c00192e9:	50                   	push   eax
c00192ea:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00192f0:	c1 e8 0e             	shr    eax,0xe
c00192f3:	0f b6 c0             	movzx  eax,al
c00192f6:	50                   	push   eax
c00192f7:	e8 18 f0 ff ff       	call   c0018314 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00192fc:	5a                   	pop    edx
c00192fd:	59                   	pop    ecx
c00192fe:	50                   	push   eax
c00192ff:	56                   	push   esi
c0019300:	e8 6f 76 fe ff       	call   c0000974 <strcat>
c0019305:	5f                   	pop    edi
c0019306:	5d                   	pop    ebp
c0019307:	56                   	push   esi
c0019308:	53                   	push   ebx
c0019309:	e8 10 ae ff ff       	call   c001411e <Device::setName(char const*)>
c001930e:	58                   	pop    eax
c001930f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019315:	5a                   	pop    edx
c0019316:	68 f4 b0 02 c0       	push   0xc002b0f4
c001931b:	50                   	push   eax
c001931c:	e8 9f 75 fe ff       	call   c00008c0 <strcmp>
c0019321:	83 c4 10             	add    esp,0x10
c0019324:	85 c0                	test   eax,eax
c0019326:	75 20                	jne    c0019348 <CPU::detectFeatures()+0x704>
c0019328:	8b 15 88 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db88
c001932e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019334:	a8 01                	test   al,0x1
c0019336:	74 10                	je     c0019348 <CPU::detectFeatures()+0x704>
c0019338:	83 e0 fe             	and    eax,0xfffffffe
c001933b:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019341:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019348:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001934e:	c1 e8 0e             	shr    eax,0xe
c0019351:	3c 05                	cmp    al,0x5
c0019353:	0f 85 cc 02 00 00    	jne    c0019625 <CPU::detectFeatures()+0x9e1>
c0019359:	56                   	push   esi
c001935a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019360:	83 e0 0f             	and    eax,0xf
c0019363:	50                   	push   eax
c0019364:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001936a:	66 c1 e8 06          	shr    ax,0x6
c001936e:	0f b6 c0             	movzx  eax,al
c0019371:	50                   	push   eax
c0019372:	6a 05                	push   0x5
c0019374:	e8 11 f4 ff ff       	call   c001878a <CPU::AMD_K6_writeback(int, int, int)>
c0019379:	e9 1f 02 00 00       	jmp    c001959d <CPU::detectFeatures()+0x959>
c001937e:	8d 50 fd             	lea    edx,[eax-0x3]
c0019381:	83 fa 01             	cmp    edx,0x1
c0019384:	76 09                	jbe    c001938f <CPU::detectFeatures()+0x74b>
c0019386:	83 f8 06             	cmp    eax,0x6
c0019389:	0f 85 91 01 00 00    	jne    c0019520 <CPU::detectFeatures()+0x8dc>
c001938f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019395:	c1 ea 0e             	shr    edx,0xe
c0019398:	80 fa 05             	cmp    dl,0x5
c001939b:	75 7b                	jne    c0019418 <CPU::detectFeatures()+0x7d4>
c001939d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00193a3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00193a8:	66 81 fa 00 01       	cmp    dx,0x100
c00193ad:	75 0c                	jne    c00193bb <CPU::detectFeatures()+0x777>
c00193af:	51                   	push   ecx
c00193b0:	51                   	push   ecx
c00193b1:	68 fb b0 02 c0       	push   0xc002b0fb
c00193b6:	e9 dc 01 00 00       	jmp    c0019597 <CPU::detectFeatures()+0x953>
c00193bb:	66 81 fa 00 02       	cmp    dx,0x200
c00193c0:	75 0c                	jne    c00193ce <CPU::detectFeatures()+0x78a>
c00193c2:	52                   	push   edx
c00193c3:	52                   	push   edx
c00193c4:	68 0e b1 02 c0       	push   0xc002b10e
c00193c9:	e9 c9 01 00 00       	jmp    c0019597 <CPU::detectFeatures()+0x953>
c00193ce:	66 81 fa 40 02       	cmp    dx,0x240
c00193d3:	75 0c                	jne    c00193e1 <CPU::detectFeatures()+0x79d>
c00193d5:	50                   	push   eax
c00193d6:	50                   	push   eax
c00193d7:	68 20 b1 02 c0       	push   0xc002b120
c00193dc:	e9 b6 01 00 00       	jmp    c0019597 <CPU::detectFeatures()+0x953>
c00193e1:	83 f8 06             	cmp    eax,0x6
c00193e4:	75 0c                	jne    c00193f2 <CPU::detectFeatures()+0x7ae>
c00193e6:	50                   	push   eax
c00193e7:	50                   	push   eax
c00193e8:	68 32 b1 02 c0       	push   0xc002b132
c00193ed:	e9 a5 01 00 00       	jmp    c0019597 <CPU::detectFeatures()+0x953>
c00193f2:	83 f8 04             	cmp    eax,0x4
c00193f5:	75 0c                	jne    c0019403 <CPU::detectFeatures()+0x7bf>
c00193f7:	50                   	push   eax
c00193f8:	50                   	push   eax
c00193f9:	68 3e b1 02 c0       	push   0xc002b13e
c00193fe:	e9 94 01 00 00       	jmp    c0019597 <CPU::detectFeatures()+0x953>
c0019403:	83 f8 03             	cmp    eax,0x3
c0019406:	0f 85 19 02 00 00    	jne    c0019625 <CPU::detectFeatures()+0x9e1>
c001940c:	50                   	push   eax
c001940d:	50                   	push   eax
c001940e:	68 46 b1 02 c0       	push   0xc002b146
c0019413:	e9 7f 01 00 00       	jmp    c0019597 <CPU::detectFeatures()+0x953>
c0019418:	80 fa 06             	cmp    dl,0x6
c001941b:	0f 85 db 00 00 00    	jne    c00194fc <CPU::detectFeatures()+0x8b8>
c0019421:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019427:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001942c:	66 81 fa 80 01       	cmp    dx,0x180
c0019431:	75 0c                	jne    c001943f <CPU::detectFeatures()+0x7fb>
c0019433:	50                   	push   eax
c0019434:	50                   	push   eax
c0019435:	68 51 b1 02 c0       	push   0xc002b151
c001943a:	e9 58 01 00 00       	jmp    c0019597 <CPU::detectFeatures()+0x953>
c001943f:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019445:	66 f7 c1 80 ff       	test   cx,0xff80
c001944a:	75 0c                	jne    c0019458 <CPU::detectFeatures()+0x814>
c001944c:	50                   	push   eax
c001944d:	50                   	push   eax
c001944e:	68 61 b1 02 c0       	push   0xc002b161
c0019453:	e9 3f 01 00 00       	jmp    c0019597 <CPU::detectFeatures()+0x953>
c0019458:	66 81 fa 40 02       	cmp    dx,0x240
c001945d:	75 0c                	jne    c001946b <CPU::detectFeatures()+0x827>
c001945f:	55                   	push   ebp
c0019460:	55                   	push   ebp
c0019461:	68 68 b1 02 c0       	push   0xc002b168
c0019466:	e9 2c 01 00 00       	jmp    c0019597 <CPU::detectFeatures()+0x953>
c001946b:	66 81 fa 80 02       	cmp    dx,0x280
c0019470:	75 0c                	jne    c001947e <CPU::detectFeatures()+0x83a>
c0019472:	57                   	push   edi
c0019473:	57                   	push   edi
c0019474:	68 71 b1 02 c0       	push   0xc002b171
c0019479:	e9 19 01 00 00       	jmp    c0019597 <CPU::detectFeatures()+0x953>
c001947e:	66 81 fa 40 03       	cmp    dx,0x340
c0019483:	74 ed                	je     c0019472 <CPU::detectFeatures()+0x82e>
c0019485:	66 81 fa c0 03       	cmp    dx,0x3c0
c001948a:	75 0c                	jne    c0019498 <CPU::detectFeatures()+0x854>
c001948c:	56                   	push   esi
c001948d:	56                   	push   esi
c001948e:	68 78 b1 02 c0       	push   0xc002b178
c0019493:	e9 ff 00 00 00       	jmp    c0019597 <CPU::detectFeatures()+0x953>
c0019498:	83 f8 06             	cmp    eax,0x6
c001949b:	0f 84 45 ff ff ff    	je     c00193e6 <CPU::detectFeatures()+0x7a2>
c00194a1:	83 f8 04             	cmp    eax,0x4
c00194a4:	0f 84 4d ff ff ff    	je     c00193f7 <CPU::detectFeatures()+0x7b3>
c00194aa:	83 f8 03             	cmp    eax,0x3
c00194ad:	0f 85 72 01 00 00    	jne    c0019625 <CPU::detectFeatures()+0x9e1>
c00194b3:	51                   	push   ecx
c00194b4:	51                   	push   ecx
c00194b5:	68 81 b1 02 c0       	push   0xc002b181
c00194ba:	53                   	push   ebx
c00194bb:	e8 5e ac ff ff       	call   c001411e <Device::setName(char const*)>
c00194c0:	b1 c1                	mov    cl,0xc1
c00194c2:	88 c8                	mov    al,cl
c00194c4:	e6 22                	out    0x22,al
c00194c6:	e4 23                	in     al,0x23
c00194c8:	88 c2                	mov    dl,al
c00194ca:	88 c8                	mov    al,cl
c00194cc:	e6 22                	out    0x22,al
c00194ce:	88 d0                	mov    al,dl
c00194d0:	83 c8 10             	or     eax,0x10
c00194d3:	e6 23                	out    0x23,al
c00194d5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00194dc:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00194df:	89 d0                	mov    eax,edx
c00194e1:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00194e7:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00194eb:	40                   	inc    eax
c00194ec:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00194f2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00194f7:	e9 a1 00 00 00       	jmp    c001959d <CPU::detectFeatures()+0x959>
c00194fc:	83 f8 06             	cmp    eax,0x6
c00194ff:	0f 84 e1 fe ff ff    	je     c00193e6 <CPU::detectFeatures()+0x7a2>
c0019505:	83 f8 04             	cmp    eax,0x4
c0019508:	0f 84 e9 fe ff ff    	je     c00193f7 <CPU::detectFeatures()+0x7b3>
c001950e:	83 f8 03             	cmp    eax,0x3
c0019511:	0f 85 0e 01 00 00    	jne    c0019625 <CPU::detectFeatures()+0x9e1>
c0019517:	52                   	push   edx
c0019518:	52                   	push   edx
c0019519:	68 8c b1 02 c0       	push   0xc002b18c
c001951e:	eb 77                	jmp    c0019597 <CPU::detectFeatures()+0x953>
c0019520:	83 f8 07             	cmp    eax,0x7
c0019523:	75 09                	jne    c001952e <CPU::detectFeatures()+0x8ea>
c0019525:	50                   	push   eax
c0019526:	50                   	push   eax
c0019527:	68 96 b1 02 c0       	push   0xc002b196
c001952c:	eb 69                	jmp    c0019597 <CPU::detectFeatures()+0x953>
c001952e:	83 f8 0a             	cmp    eax,0xa
c0019531:	75 09                	jne    c001953c <CPU::detectFeatures()+0x8f8>
c0019533:	50                   	push   eax
c0019534:	50                   	push   eax
c0019535:	68 a1 b1 02 c0       	push   0xc002b1a1
c001953a:	eb 5b                	jmp    c0019597 <CPU::detectFeatures()+0x953>
c001953c:	83 f8 0b             	cmp    eax,0xb
c001953f:	75 09                	jne    c001954a <CPU::detectFeatures()+0x906>
c0019541:	50                   	push   eax
c0019542:	50                   	push   eax
c0019543:	68 a9 b1 02 c0       	push   0xc002b1a9
c0019548:	eb 4d                	jmp    c0019597 <CPU::detectFeatures()+0x953>
c001954a:	83 f8 08             	cmp    eax,0x8
c001954d:	75 09                	jne    c0019558 <CPU::detectFeatures()+0x914>
c001954f:	50                   	push   eax
c0019550:	50                   	push   eax
c0019551:	68 b2 b1 02 c0       	push   0xc002b1b2
c0019556:	eb 3f                	jmp    c0019597 <CPU::detectFeatures()+0x953>
c0019558:	83 f8 09             	cmp    eax,0x9
c001955b:	75 09                	jne    c0019566 <CPU::detectFeatures()+0x922>
c001955d:	50                   	push   eax
c001955e:	50                   	push   eax
c001955f:	68 ba b1 02 c0       	push   0xc002b1ba
c0019564:	eb 31                	jmp    c0019597 <CPU::detectFeatures()+0x953>
c0019566:	83 f8 05             	cmp    eax,0x5
c0019569:	75 09                	jne    c0019574 <CPU::detectFeatures()+0x930>
c001956b:	50                   	push   eax
c001956c:	50                   	push   eax
c001956d:	68 c2 b1 02 c0       	push   0xc002b1c2
c0019572:	eb 23                	jmp    c0019597 <CPU::detectFeatures()+0x953>
c0019574:	83 f8 0c             	cmp    eax,0xc
c0019577:	75 09                	jne    c0019582 <CPU::detectFeatures()+0x93e>
c0019579:	55                   	push   ebp
c001957a:	55                   	push   ebp
c001957b:	68 d0 b1 02 c0       	push   0xc002b1d0
c0019580:	eb 15                	jmp    c0019597 <CPU::detectFeatures()+0x953>
c0019582:	83 f8 0d             	cmp    eax,0xd
c0019585:	75 09                	jne    c0019590 <CPU::detectFeatures()+0x94c>
c0019587:	57                   	push   edi
c0019588:	57                   	push   edi
c0019589:	68 db b1 02 c0       	push   0xc002b1db
c001958e:	eb 07                	jmp    c0019597 <CPU::detectFeatures()+0x953>
c0019590:	56                   	push   esi
c0019591:	56                   	push   esi
c0019592:	68 ef b1 02 c0       	push   0xc002b1ef
c0019597:	53                   	push   ebx
c0019598:	e8 81 ab ff ff       	call   c001411e <Device::setName(char const*)>
c001959d:	83 c4 10             	add    esp,0x10
c00195a0:	e9 80 00 00 00       	jmp    c0019625 <CPU::detectFeatures()+0x9e1>
c00195a5:	51                   	push   ecx
c00195a6:	51                   	push   ecx
c00195a7:	68 3b b0 02 c0       	push   0xc002b03b
c00195ac:	57                   	push   edi
c00195ad:	e8 82 72 fe ff       	call   c0000834 <strcpy>
c00195b2:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00195bc:	e8 ed 6c fe ff       	call   c00002ae <is486>
c00195c1:	83 c4 10             	add    esp,0x10
c00195c4:	85 c0                	test   eax,eax
c00195c6:	74 2b                	je     c00195f3 <CPU::detectFeatures()+0x9af>
c00195c8:	52                   	push   edx
c00195c9:	52                   	push   edx
c00195ca:	68 fb b1 02 c0       	push   0xc002b1fb
c00195cf:	53                   	push   ebx
c00195d0:	e8 49 ab ff ff       	call   c001411e <Device::setName(char const*)>
c00195d5:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00195dc:	0f 20 c0             	mov    eax,cr0
c00195df:	83 e0 14             	and    eax,0x14
c00195e2:	83 c4 10             	add    esp,0x10
c00195e5:	83 f8 04             	cmp    eax,0x4
c00195e8:	75 1f                	jne    c0019609 <CPU::detectFeatures()+0x9c5>
c00195ea:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00195f1:	eb 32                	jmp    c0019625 <CPU::detectFeatures()+0x9e1>
c00195f3:	50                   	push   eax
c00195f4:	50                   	push   eax
c00195f5:	68 06 b2 02 c0       	push   0xc002b206
c00195fa:	53                   	push   ebx
c00195fb:	e8 1e ab ff ff       	call   c001411e <Device::setName(char const*)>
c0019600:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019607:	eb d3                	jmp    c00195dc <CPU::detectFeatures()+0x998>
c0019609:	e8 7b 6c fe ff       	call   c0000289 <hasLegacyFPU>
c001960e:	83 e0 01             	and    eax,0x1
c0019611:	8d 14 00             	lea    edx,[eax+eax*1]
c0019614:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001961a:	83 e0 fd             	and    eax,0xfffffffd
c001961d:	09 d0                	or     eax,edx
c001961f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019625:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001962c:	83 c4 4c             	add    esp,0x4c
c001962f:	5b                   	pop    ebx
c0019630:	5e                   	pop    esi
c0019631:	5f                   	pop    edi
c0019632:	5d                   	pop    ebp
c0019633:	c3                   	ret    

c0019634 <CPU::setupSMEP()>:
c0019634:	0f 20 e0             	mov    eax,cr4
c0019637:	0d 00 00 10 00       	or     eax,0x100000
c001963c:	0f 22 e0             	mov    cr4,eax
c001963f:	c3                   	ret    

c0019640 <CPU::setupUMIP()>:
c0019640:	0f 20 e0             	mov    eax,cr4
c0019643:	80 cc 08             	or     ah,0x8
c0019646:	0f 22 e0             	mov    cr4,eax
c0019649:	c3                   	ret    

c001964a <CPU::setupTSC()>:
c001964a:	0f 20 e0             	mov    eax,cr4
c001964d:	83 c8 04             	or     eax,0x4
c0019650:	0f 22 e0             	mov    cr4,eax
c0019653:	c3                   	ret    

c0019654 <CPU::setupLargePages()>:
c0019654:	0f 20 e0             	mov    eax,cr4
c0019657:	83 c8 10             	or     eax,0x10
c001965a:	0f 22 e0             	mov    cr4,eax
c001965d:	c3                   	ret    

c001965e <CPU::setupPAT()>:
c001965e:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c0019663:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001966a:	74 2c                	je     c0019698 <CPU::setupPAT()+0x3a>
c001966c:	53                   	push   ebx
c001966d:	83 ec 10             	sub    esp,0x10
c0019670:	68 77 02 00 00       	push   0x277
c0019675:	50                   	push   eax
c0019676:	e8 73 57 ff ff       	call   c000edee <Computer::rdmsr(unsigned int)>
c001967b:	83 e2 f8             	and    edx,0xfffffff8
c001967e:	83 ca 01             	or     edx,0x1
c0019681:	52                   	push   edx
c0019682:	50                   	push   eax
c0019683:	68 77 02 00 00       	push   0x277
c0019688:	ff 35 88 db 02 c0    	push   DWORD PTR ds:0xc002db88
c001968e:	e8 87 57 ff ff       	call   c000ee1a <Computer::wrmsr(unsigned int, unsigned long long)>
c0019693:	83 c4 28             	add    esp,0x28
c0019696:	5b                   	pop    ebx
c0019697:	c3                   	ret    
c0019698:	c3                   	ret    
c0019699:	90                   	nop

c001969a <CPU::setupMTRR()>:
c001969a:	c3                   	ret    
c001969b:	90                   	nop

c001969c <CPU::setupGlobalPages()>:
c001969c:	0f 20 e0             	mov    eax,cr4
c001969f:	0c 80                	or     al,0x80
c00196a1:	0f 22 e0             	mov    cr4,eax
c00196a4:	c3                   	ret    
c00196a5:	90                   	nop

c00196a6 <CPU::allowUsermodeDataAccess()>:
c00196a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196aa:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00196b1:	74 03                	je     c00196b6 <CPU::allowUsermodeDataAccess()+0x10>
c00196b3:	0f 01 cb             	stac   
c00196b6:	c3                   	ret    
c00196b7:	90                   	nop

c00196b8 <CPU::prohibitUsermodeDataAccess()>:
c00196b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196bc:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00196c3:	74 03                	je     c00196c8 <CPU::prohibitUsermodeDataAccess()+0x10>
c00196c5:	0f 01 ca             	clac   
c00196c8:	c3                   	ret    
c00196c9:	90                   	nop

c00196ca <CPU::setupSMAP()>:
c00196ca:	0f 20 e0             	mov    eax,cr4
c00196cd:	0d 00 00 20 00       	or     eax,0x200000
c00196d2:	0f 22 e0             	mov    cr4,eax
c00196d5:	eb e1                	jmp    c00196b8 <CPU::prohibitUsermodeDataAccess()>
c00196d7:	90                   	nop

c00196d8 <CPU::setupFeatures()>:
c00196d8:	83 ec 0c             	sub    esp,0xc
c00196db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00196df:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00196e6:	74 07                	je     c00196ef <CPU::setupFeatures()+0x17>
c00196e8:	52                   	push   edx
c00196e9:	e8 46 ff ff ff       	call   c0019634 <CPU::setupSMEP()>
c00196ee:	58                   	pop    eax
c00196ef:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00196f6:	74 07                	je     c00196ff <CPU::setupFeatures()+0x27>
c00196f8:	52                   	push   edx
c00196f9:	e8 cc ff ff ff       	call   c00196ca <CPU::setupSMAP()>
c00196fe:	58                   	pop    eax
c00196ff:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019706:	74 07                	je     c001970f <CPU::setupFeatures()+0x37>
c0019708:	52                   	push   edx
c0019709:	e8 32 ff ff ff       	call   c0019640 <CPU::setupUMIP()>
c001970e:	58                   	pop    eax
c001970f:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019716:	74 07                	je     c001971f <CPU::setupFeatures()+0x47>
c0019718:	52                   	push   edx
c0019719:	e8 2c ff ff ff       	call   c001964a <CPU::setupTSC()>
c001971e:	58                   	pop    eax
c001971f:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019726:	74 07                	je     c001972f <CPU::setupFeatures()+0x57>
c0019728:	52                   	push   edx
c0019729:	e8 26 ff ff ff       	call   c0019654 <CPU::setupLargePages()>
c001972e:	59                   	pop    ecx
c001972f:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019736:	74 07                	je     c001973f <CPU::setupFeatures()+0x67>
c0019738:	52                   	push   edx
c0019739:	e8 5e ff ff ff       	call   c001969c <CPU::setupGlobalPages()>
c001973e:	58                   	pop    eax
c001973f:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019746:	74 0c                	je     c0019754 <CPU::setupFeatures()+0x7c>
c0019748:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001974c:	83 c4 0c             	add    esp,0xc
c001974f:	e9 0a ff ff ff       	jmp    c001965e <CPU::setupPAT()>
c0019754:	83 c4 0c             	add    esp,0xc
c0019757:	c3                   	ret    

c0019758 <CPU::open(int, int, void*)>:
c0019758:	57                   	push   edi
c0019759:	56                   	push   esi
c001975a:	53                   	push   ebx
c001975b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001975f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019763:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019769:	83 ec 0c             	sub    esp,0xc
c001976c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019772:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019778:	50                   	push   eax
c0019779:	e8 5c 59 ff ff       	call   c000f0da <GDT::setup()>
c001977e:	83 c4 0c             	add    esp,0xc
c0019781:	6a 00                	push   0x0
c0019783:	68 ef be ad de       	push   0xdeadbeef
c0019788:	57                   	push   edi
c0019789:	e8 08 7d ff ff       	call   c0011496 <TSS::setup(unsigned long, unsigned long)>
c001978e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019791:	e8 e0 7c ff ff       	call   c0011476 <TSS::flush()>
c0019796:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001979c:	89 04 24             	mov    DWORD PTR [esp],eax
c001979f:	e8 92 5b ff ff       	call   c000f336 <IDT::setup()>
c00197a4:	b8 00 04 00 00       	mov    eax,0x400
c00197a9:	0f 23 f8             	mov    db7,eax
c00197ac:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00197b6:	e8 28 67 ff ff       	call   c000fee3 <Phys::allocatePage()>
c00197bb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00197c1:	89 30                	mov    DWORD PTR [eax],esi
c00197c3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00197c9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00197cc:	58                   	pop    eax
c00197cd:	5a                   	pop    edx
c00197ce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00197d4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00197d8:	e8 eb 8c ff ff       	call   c00124c8 <VAS::setCPUSpecific(unsigned long)>
c00197dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00197e0:	e8 5f f4 ff ff       	call   c0018c44 <CPU::detectFeatures()>
c00197e5:	e8 fd bc ff ff       	call   c00154e7 <setupInterruptController()>
c00197ea:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00197f0:	a1 a0 db 02 c0       	mov    eax,ds:0xc002dba0
c00197f5:	83 e0 10             	and    eax,0x10
c00197f8:	83 f8 01             	cmp    eax,0x1
c00197fb:	19 c0                	sbb    eax,eax
c00197fd:	83 e0 46             	and    eax,0x46
c0019800:	83 c0 1e             	add    eax,0x1e
c0019803:	89 04 24             	mov    DWORD PTR [esp],eax
c0019806:	e8 bb d1 ff ff       	call   c00169c6 <setupTimer(int)>
c001980b:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019811:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019814:	e8 bf fe ff ff       	call   c00196d8 <CPU::setupFeatures()>
c0019819:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001981c:	e8 a7 f1 ff ff       	call   c00189c8 <CPU::displayFeatures()>
c0019821:	83 c4 10             	add    esp,0x10
c0019824:	31 c0                	xor    eax,eax
c0019826:	5b                   	pop    ebx
c0019827:	5e                   	pop    esi
c0019828:	5f                   	pop    edi
c0019829:	c3                   	ret    

c001982a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001982a:	57                   	push   edi
c001982b:	56                   	push   esi
c001982c:	53                   	push   ebx
c001982d:	51                   	push   ecx
c001982e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019832:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019835:	0f 02 c0             	lar    eax,ax
c0019838:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001983b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001983f:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019842:	88 ca                	mov    dl,cl
c0019844:	c0 ea 06             	shr    dl,0x6
c0019847:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001984b:	89 ca                	mov    edx,ecx
c001984d:	66 c1 ea 03          	shr    dx,0x3
c0019851:	83 e2 07             	and    edx,0x7
c0019854:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019859:	88 17                	mov    BYTE PTR [edi],dl
c001985b:	0f 84 a6 01 00 00    	je     c0019a07 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019861:	83 e1 07             	and    ecx,0x7
c0019864:	80 f9 04             	cmp    cl,0x4
c0019867:	0f 84 98 00 00 00    	je     c0019905 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001986d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019872:	0f 95 c0             	setne  al
c0019875:	80 f9 05             	cmp    cl,0x5
c0019878:	0f 95 c2             	setne  dl
c001987b:	08 c2                	or     dl,al
c001987d:	74 79                	je     c00198f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001987f:	84 c9                	test   cl,cl
c0019881:	75 05                	jne    c0019888 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019883:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019886:	eb 3c                	jmp    c00198c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019888:	80 f9 01             	cmp    cl,0x1
c001988b:	75 05                	jne    c0019892 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001988d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019890:	eb 32                	jmp    c00198c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019892:	80 f9 02             	cmp    cl,0x2
c0019895:	75 05                	jne    c001989c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019897:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001989a:	eb 28                	jmp    c00198c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001989c:	31 c0                	xor    eax,eax
c001989e:	80 f9 03             	cmp    cl,0x3
c00198a1:	75 05                	jne    c00198a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00198a3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00198a6:	eb 1c                	jmp    c00198c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198a8:	80 f9 05             	cmp    cl,0x5
c00198ab:	75 05                	jne    c00198b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00198ad:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00198b0:	eb 12                	jmp    c00198c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198b2:	80 f9 06             	cmp    cl,0x6
c00198b5:	75 05                	jne    c00198bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00198b7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00198ba:	eb 08                	jmp    c00198c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198bc:	80 f9 07             	cmp    cl,0x7
c00198bf:	75 03                	jne    c00198c4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00198c1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00198c4:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00198c9:	75 10                	jne    c00198db <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00198cb:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00198cf:	b9 03 00 00 00       	mov    ecx,0x3
c00198d4:	01 d0                	add    eax,edx
c00198d6:	e9 37 01 00 00       	jmp    c0019a12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00198db:	b9 02 00 00 00       	mov    ecx,0x2
c00198e0:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00198e5:	0f 85 27 01 00 00    	jne    c0019a12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00198eb:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00198ee:	b9 06 00 00 00       	mov    ecx,0x6
c00198f3:	e9 1a 01 00 00       	jmp    c0019a12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00198f8:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00198fb:	b9 06 00 00 00       	mov    ecx,0x6
c0019900:	e9 0f 01 00 00       	jmp    c0019a14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019905:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019908:	88 ca                	mov    dl,cl
c001990a:	c0 ea 06             	shr    dl,0x6
c001990d:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019911:	89 ca                	mov    edx,ecx
c0019913:	66 c1 ea 03          	shr    dx,0x3
c0019917:	83 e2 07             	and    edx,0x7
c001991a:	80 e1 07             	and    cl,0x7
c001991d:	75 05                	jne    c0019924 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001991f:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019922:	eb 4c                	jmp    c0019970 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019924:	80 f9 01             	cmp    cl,0x1
c0019927:	75 05                	jne    c001992e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019929:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001992c:	eb 42                	jmp    c0019970 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001992e:	80 f9 02             	cmp    cl,0x2
c0019931:	75 05                	jne    c0019938 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019933:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019936:	eb 38                	jmp    c0019970 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019938:	80 f9 03             	cmp    cl,0x3
c001993b:	75 05                	jne    c0019942 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001993d:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019940:	eb 2e                	jmp    c0019970 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019942:	80 f9 04             	cmp    cl,0x4
c0019945:	75 12                	jne    c0019959 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019947:	f6 c4 60             	test   ah,0x60
c001994a:	75 08                	jne    c0019954 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001994c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001994f:	8d 78 14             	lea    edi,[eax+0x14]
c0019952:	eb 1c                	jmp    c0019970 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019954:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019957:	eb 17                	jmp    c0019970 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019959:	80 f9 05             	cmp    cl,0x5
c001995c:	75 05                	jne    c0019963 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001995e:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019961:	eb 0d                	jmp    c0019970 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019963:	80 f9 06             	cmp    cl,0x6
c0019966:	75 05                	jne    c001996d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019968:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001996b:	eb 03                	jmp    c0019970 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001996d:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019970:	84 d2                	test   dl,dl
c0019972:	75 05                	jne    c0019979 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019974:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019977:	eb 3c                	jmp    c00199b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019979:	80 fa 01             	cmp    dl,0x1
c001997c:	75 05                	jne    c0019983 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001997e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019981:	eb 32                	jmp    c00199b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019983:	80 fa 02             	cmp    dl,0x2
c0019986:	75 05                	jne    c001998d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019988:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001998b:	eb 28                	jmp    c00199b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001998d:	80 fa 03             	cmp    dl,0x3
c0019990:	75 05                	jne    c0019997 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019992:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019995:	eb 1e                	jmp    c00199b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019997:	31 c0                	xor    eax,eax
c0019999:	80 fa 04             	cmp    dl,0x4
c001999c:	74 17                	je     c00199b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001999e:	80 fa 05             	cmp    dl,0x5
c00199a1:	75 05                	jne    c00199a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00199a3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00199a6:	eb 0d                	jmp    c00199b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00199a8:	80 fa 06             	cmp    dl,0x6
c00199ab:	75 05                	jne    c00199b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00199ad:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00199b0:	eb 03                	jmp    c00199b5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00199b2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00199b5:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00199ba:	0f 94 c2             	sete   dl
c00199bd:	80 f9 05             	cmp    cl,0x5
c00199c0:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00199c4:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00199c9:	d3 e0                	shl    eax,cl
c00199cb:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00199cf:	74 0a                	je     c00199db <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00199d1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00199d4:	b9 07 00 00 00       	mov    ecx,0x7
c00199d9:	eb 37                	jmp    c0019a12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00199db:	01 f8                	add    eax,edi
c00199dd:	b9 03 00 00 00       	mov    ecx,0x3
c00199e2:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00199e7:	74 2b                	je     c0019a14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00199e9:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00199ee:	75 0d                	jne    c00199fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00199f0:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00199f4:	01 c8                	add    eax,ecx
c00199f6:	b9 04 00 00 00       	mov    ecx,0x4
c00199fb:	eb 17                	jmp    c0019a14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00199fd:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019a00:	b9 07 00 00 00       	mov    ecx,0x7
c0019a05:	eb 0d                	jmp    c0019a14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019a07:	b9 02 00 00 00       	mov    ecx,0x2
c0019a0c:	b2 01                	mov    dl,0x1
c0019a0e:	31 c0                	xor    eax,eax
c0019a10:	eb 02                	jmp    c0019a14 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019a12:	31 d2                	xor    edx,edx
c0019a14:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019a18:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019a1a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019a1e:	88 11                	mov    BYTE PTR [ecx],dl
c0019a20:	5a                   	pop    edx
c0019a21:	5b                   	pop    ebx
c0019a22:	5e                   	pop    esi
c0019a23:	5f                   	pop    edi
c0019a24:	c3                   	ret    

c0019a25 <Krnl::startCPU(int)>:
c0019a25:	53                   	push   ebx
c0019a26:	83 ec 08             	sub    esp,0x8
c0019a29:	e8 9e 3c 00 00       	call   c001d6cc <lockScheduler()>
c0019a2e:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c0019a33:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019a3a:	74 29                	je     c0019a65 <Krnl::startCPU(int)+0x40>
c0019a3c:	31 db                	xor    ebx,ebx
c0019a3e:	51                   	push   ecx
c0019a3f:	51                   	push   ecx
c0019a40:	6a 1b                	push   0x1b
c0019a42:	50                   	push   eax
c0019a43:	e8 a6 53 ff ff       	call   c000edee <Computer::rdmsr(unsigned int)>
c0019a48:	83 c4 0c             	add    esp,0xc
c0019a4b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019a50:	53                   	push   ebx
c0019a51:	50                   	push   eax
c0019a52:	68 40 b2 02 c0       	push   0xc002b240
c0019a57:	e8 b9 90 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0019a5c:	83 c4 18             	add    esp,0x18
c0019a5f:	5b                   	pop    ebx
c0019a60:	e9 69 3c 00 00       	jmp    c001d6ce <unlockScheduler()>
c0019a65:	83 c4 08             	add    esp,0x8
c0019a68:	5b                   	pop    ebx
c0019a69:	c3                   	ret    

c0019a6a <EnvVarContainer::getEnv(char const*)>:
c0019a6a:	57                   	push   edi
c0019a6b:	56                   	push   esi
c0019a6c:	53                   	push   ebx
c0019a6d:	31 db                	xor    ebx,ebx
c0019a6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019a73:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019a75:	7e 2b                	jle    c0019aa2 <EnvVarContainer::getEnv(char const*)+0x38>
c0019a77:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019a7e:	50                   	push   eax
c0019a7f:	50                   	push   eax
c0019a80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019a83:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019a86:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019a8a:	e8 31 6e fe ff       	call   c00008c0 <strcmp>
c0019a8f:	83 c4 10             	add    esp,0x10
c0019a92:	85 c0                	test   eax,eax
c0019a94:	75 09                	jne    c0019a9f <EnvVarContainer::getEnv(char const*)+0x35>
c0019a96:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019a99:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019a9d:	eb 05                	jmp    c0019aa4 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019a9f:	43                   	inc    ebx
c0019aa0:	eb d1                	jmp    c0019a73 <EnvVarContainer::getEnv(char const*)+0x9>
c0019aa2:	31 c0                	xor    eax,eax
c0019aa4:	5b                   	pop    ebx
c0019aa5:	5e                   	pop    esi
c0019aa6:	5f                   	pop    edi
c0019aa7:	c3                   	ret    

c0019aa8 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019aa8:	57                   	push   edi
c0019aa9:	56                   	push   esi
c0019aaa:	53                   	push   ebx
c0019aab:	83 ec 1c             	sub    esp,0x1c
c0019aae:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019ab2:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019ab6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019aba:	57                   	push   edi
c0019abb:	e8 d4 6c fe ff       	call   c0000794 <strlen>
c0019ac0:	40                   	inc    eax
c0019ac1:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ac4:	e8 7d 5d ff ff       	call   c000f846 <malloc>
c0019ac9:	89 34 24             	mov    DWORD PTR [esp],esi
c0019acc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019ad0:	e8 bf 6c fe ff       	call   c0000794 <strlen>
c0019ad5:	40                   	inc    eax
c0019ad6:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ad9:	e8 68 5d ff ff       	call   c000f846 <malloc>
c0019ade:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019ae1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019ae5:	e8 aa 6c fe ff       	call   c0000794 <strlen>
c0019aea:	83 c4 0c             	add    esp,0xc
c0019aed:	40                   	inc    eax
c0019aee:	50                   	push   eax
c0019aef:	6a 00                	push   0x0
c0019af1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019af5:	e8 7e 6c fe ff       	call   c0000778 <memset>
c0019afa:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019afd:	e8 92 6c fe ff       	call   c0000794 <strlen>
c0019b02:	83 c4 0c             	add    esp,0xc
c0019b05:	40                   	inc    eax
c0019b06:	50                   	push   eax
c0019b07:	57                   	push   edi
c0019b08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019b0c:	e8 33 6c fe ff       	call   c0000744 <memcpy>
c0019b11:	89 34 24             	mov    DWORD PTR [esp],esi
c0019b14:	e8 7b 6c fe ff       	call   c0000794 <strlen>
c0019b19:	83 c4 0c             	add    esp,0xc
c0019b1c:	40                   	inc    eax
c0019b1d:	50                   	push   eax
c0019b1e:	6a 00                	push   0x0
c0019b20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b24:	e8 4f 6c fe ff       	call   c0000778 <memset>
c0019b29:	89 34 24             	mov    DWORD PTR [esp],esi
c0019b2c:	e8 63 6c fe ff       	call   c0000794 <strlen>
c0019b31:	83 c4 0c             	add    esp,0xc
c0019b34:	40                   	inc    eax
c0019b35:	50                   	push   eax
c0019b36:	56                   	push   esi
c0019b37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019b3b:	e8 04 6c fe ff       	call   c0000744 <memcpy>
c0019b40:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b42:	40                   	inc    eax
c0019b43:	89 03                	mov    DWORD PTR [ebx],eax
c0019b45:	c1 e0 03             	shl    eax,0x3
c0019b48:	5a                   	pop    edx
c0019b49:	59                   	pop    ecx
c0019b4a:	50                   	push   eax
c0019b4b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0019b4e:	e8 df 5c ff ff       	call   c000f832 <realloc>
c0019b53:	83 c4 0c             	add    esp,0xc
c0019b56:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019b59:	6a 08                	push   0x8
c0019b5b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019b5f:	52                   	push   edx
c0019b60:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019b62:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019b66:	50                   	push   eax
c0019b67:	e8 d8 6b fe ff       	call   c0000744 <memcpy>
c0019b6c:	83 c4 20             	add    esp,0x20
c0019b6f:	5b                   	pop    ebx
c0019b70:	5e                   	pop    esi
c0019b71:	5f                   	pop    edi
c0019b72:	c3                   	ret    
c0019b73:	90                   	nop

c0019b74 <EnvVarContainer::deleteEnv(char const*)>:
c0019b74:	c3                   	ret    
c0019b75:	90                   	nop

c0019b76 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019b76:	55                   	push   ebp
c0019b77:	57                   	push   edi
c0019b78:	56                   	push   esi
c0019b79:	53                   	push   ebx
c0019b7a:	81 ec 38 01 00 00    	sub    esp,0x138
c0019b80:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c0019b87:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c0019b8e:	68 14 01 00 00       	push   0x114
c0019b93:	e8 ae 5c ff ff       	call   c000f846 <malloc>
c0019b98:	83 c4 0c             	add    esp,0xc
c0019b9b:	89 c7                	mov    edi,eax
c0019b9d:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0019ba0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019ba7:	50                   	push   eax
c0019ba8:	e8 c1 94 ff ff       	call   c001306e <File::File(char const*, Process*)>
c0019bad:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019bb0:	e8 8b 97 ff ff       	call   c0013340 <File::exists()>
c0019bb5:	83 c4 10             	add    esp,0x10
c0019bb8:	84 c0                	test   al,al
c0019bba:	75 31                	jne    c0019bed <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019bbc:	51                   	push   ecx
c0019bbd:	51                   	push   ecx
c0019bbe:	6a 12                	push   0x12
c0019bc0:	57                   	push   edi
c0019bc1:	e8 0c 95 ff ff       	call   c00130d2 <File::open(FileOpenMode)>
c0019bc6:	8b 07                	mov    eax,DWORD PTR [edi]
c0019bc8:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0019bcb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019bce:	e8 c1 6b fe ff       	call   c0000794 <strlen>
c0019bd3:	5a                   	pop    edx
c0019bd4:	31 d2                	xor    edx,edx
c0019bd6:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019bda:	51                   	push   ecx
c0019bdb:	55                   	push   ebp
c0019bdc:	52                   	push   edx
c0019bdd:	50                   	push   eax
c0019bde:	57                   	push   edi
c0019bdf:	ff d3                	call   ebx
c0019be1:	83 c4 14             	add    esp,0x14
c0019be4:	57                   	push   edi
c0019be5:	e8 46 95 ff ff       	call   c0013130 <File::close()>
c0019bea:	83 c4 10             	add    esp,0x10
c0019bed:	31 db                	xor    ebx,ebx
c0019bef:	50                   	push   eax
c0019bf0:	31 ed                	xor    ebp,ebp
c0019bf2:	68 00 01 00 00       	push   0x100
c0019bf7:	6a 00                	push   0x0
c0019bf9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019bfd:	50                   	push   eax
c0019bfe:	e8 75 6b fe ff       	call   c0000778 <memset>
c0019c03:	58                   	pop    eax
c0019c04:	5a                   	pop    edx
c0019c05:	6a 01                	push   0x1
c0019c07:	57                   	push   edi
c0019c08:	e8 c5 94 ff ff       	call   c00130d2 <File::open(FileOpenMode)>
c0019c0d:	83 c4 10             	add    esp,0x10
c0019c10:	83 ec 0c             	sub    esp,0xc
c0019c13:	8b 07                	mov    eax,DWORD PTR [edi]
c0019c15:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019c19:	51                   	push   ecx
c0019c1a:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019c1e:	52                   	push   edx
c0019c1f:	6a 00                	push   0x0
c0019c21:	6a 01                	push   0x1
c0019c23:	57                   	push   edi
c0019c24:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c27:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019c2b:	83 c4 20             	add    esp,0x20
c0019c2e:	3c 0d                	cmp    al,0xd
c0019c30:	0f 84 12 01 00 00    	je     c0019d48 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019c36:	85 db                	test   ebx,ebx
c0019c38:	0f 84 fd 00 00 00    	je     c0019d3b <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019c3e:	3c 0a                	cmp    al,0xa
c0019c40:	74 13                	je     c0019c55 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019c42:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019c47:	74 0c                	je     c0019c55 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019c49:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c0019c4f:	0f 8e e6 00 00 00    	jle    c0019d3b <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019c55:	83 ec 0c             	sub    esp,0xc
c0019c58:	8d 53 01             	lea    edx,[ebx+0x1]
c0019c5b:	29 dd                	sub    ebp,ebx
c0019c5d:	52                   	push   edx
c0019c5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019c62:	e8 df 5b ff ff       	call   c000f846 <malloc>
c0019c67:	8d 4d 04             	lea    ecx,[ebp+0x4]
c0019c6a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019c6e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0019c71:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0019c75:	e8 cc 5b ff ff       	call   c000f846 <malloc>
c0019c7a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019c7e:	83 c4 0c             	add    esp,0xc
c0019c81:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c85:	52                   	push   edx
c0019c86:	6a 00                	push   0x0
c0019c88:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019c8c:	e8 e7 6a fe ff       	call   c0000778 <memset>
c0019c91:	83 c4 0c             	add    esp,0xc
c0019c94:	53                   	push   ebx
c0019c95:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019c99:	55                   	push   ebp
c0019c9a:	01 eb                	add    ebx,ebp
c0019c9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019ca0:	e8 9f 6a fe ff       	call   c0000744 <memcpy>
c0019ca5:	83 c4 0c             	add    esp,0xc
c0019ca8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019cac:	51                   	push   ecx
c0019cad:	6a 00                	push   0x0
c0019caf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019cb3:	e8 c0 6a fe ff       	call   c0000778 <memset>
c0019cb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019cbb:	e8 d4 6a fe ff       	call   c0000794 <strlen>
c0019cc0:	83 c4 0c             	add    esp,0xc
c0019cc3:	50                   	push   eax
c0019cc4:	53                   	push   ebx
c0019cc5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019cc9:	e8 76 6a fe ff       	call   c0000744 <memcpy>
c0019cce:	5b                   	pop    ebx
c0019ccf:	58                   	pop    eax
c0019cd0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019cd4:	68 51 b2 02 c0       	push   0xc002b251
c0019cd9:	e8 37 8e ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0019cde:	8b 06                	mov    eax,DWORD PTR [esi]
c0019ce0:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0019ce3:	40                   	inc    eax
c0019ce4:	83 c4 10             	add    esp,0x10
c0019ce7:	89 06                	mov    DWORD PTR [esi],eax
c0019ce9:	85 d2                	test   edx,edx
c0019ceb:	75 0c                	jne    c0019cf9 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c0019ced:	83 ec 0c             	sub    esp,0xc
c0019cf0:	6a 08                	push   0x8
c0019cf2:	e8 4f 5b ff ff       	call   c000f846 <malloc>
c0019cf7:	eb 0c                	jmp    c0019d05 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c0019cf9:	c1 e0 03             	shl    eax,0x3
c0019cfc:	51                   	push   ecx
c0019cfd:	51                   	push   ecx
c0019cfe:	50                   	push   eax
c0019cff:	52                   	push   edx
c0019d00:	e8 2d 5b ff ff       	call   c000f832 <realloc>
c0019d05:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0019d08:	83 c4 10             	add    esp,0x10
c0019d0b:	31 db                	xor    ebx,ebx
c0019d0d:	52                   	push   edx
c0019d0e:	6a 08                	push   0x8
c0019d10:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019d14:	50                   	push   eax
c0019d15:	8b 16                	mov    edx,DWORD PTR [esi]
c0019d17:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019d1a:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019d1e:	50                   	push   eax
c0019d1f:	e8 20 6a fe ff       	call   c0000744 <memcpy>
c0019d24:	83 c4 0c             	add    esp,0xc
c0019d27:	68 00 01 00 00       	push   0x100
c0019d2c:	6a 00                	push   0x0
c0019d2e:	55                   	push   ebp
c0019d2f:	31 ed                	xor    ebp,ebp
c0019d31:	e8 42 6a fe ff       	call   c0000778 <memset>
c0019d36:	83 c4 10             	add    esp,0x10
c0019d39:	eb 0d                	jmp    c0019d48 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019d3b:	3c 3d                	cmp    al,0x3d
c0019d3d:	74 07                	je     c0019d46 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c0019d3f:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c0019d43:	45                   	inc    ebp
c0019d44:	eb 02                	jmp    c0019d48 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019d46:	89 eb                	mov    ebx,ebp
c0019d48:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019d4d:	0f 85 bd fe ff ff    	jne    c0019c10 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c0019d53:	50                   	push   eax
c0019d54:	50                   	push   eax
c0019d55:	ff 36                	push   DWORD PTR [esi]
c0019d57:	68 5f b2 02 c0       	push   0xc002b25f
c0019d5c:	e8 b4 8d ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0019d61:	81 c4 3c 01 00 00    	add    esp,0x13c
c0019d67:	5b                   	pop    ebx
c0019d68:	5e                   	pop    esi
c0019d69:	5f                   	pop    edi
c0019d6a:	5d                   	pop    ebp
c0019d6b:	c3                   	ret    

c0019d6c <EnvVarContainer::__loadSystem()>:
c0019d6c:	83 ec 10             	sub    esp,0x10
c0019d6f:	68 c0 d0 02 c0       	push   0xc002d0c0
c0019d74:	68 8a b2 02 c0       	push   0xc002b28a
c0019d79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d7d:	e8 f4 fd ff ff       	call   c0019b76 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019d82:	83 c4 1c             	add    esp,0x1c
c0019d85:	c3                   	ret    

c0019d86 <EnvVarContainer::__loadUser()>:
c0019d86:	c3                   	ret    
c0019d87:	90                   	nop

c0019d88 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019d88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d8c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019d92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d9a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019d9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019da1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019da8:	90                   	nop
c0019da9:	c3                   	ret    

c0019daa <EnvVarContainer::~EnvVarContainer()>:
c0019daa:	83 ec 0c             	sub    esp,0xc
c0019dad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019db1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019db4:	85 c0                	test   eax,eax
c0019db6:	74 1d                	je     c0019dd5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019db8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0019dbe:	85 c0                	test   eax,eax
c0019dc0:	74 13                	je     c0019dd5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019dc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019dc9:	83 ec 0c             	sub    esp,0xc
c0019dcc:	50                   	push   eax
c0019dcd:	e8 84 5a ff ff       	call   c000f856 <free>
c0019dd2:	83 c4 10             	add    esp,0x10
c0019dd5:	90                   	nop
c0019dd6:	83 c4 0c             	add    esp,0xc
c0019dd9:	c3                   	ret    

c0019dda <Krnl::getEnv(Process*, char const*)>:
c0019dda:	53                   	push   ebx
c0019ddb:	83 ec 08             	sub    esp,0x8
c0019dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019de2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019de6:	39 05 f4 10 03 c0    	cmp    DWORD PTR ds:0xc00310f4,eax
c0019dec:	74 04                	je     c0019df2 <Krnl::getEnv(Process*, char const*)+0x18>
c0019dee:	85 c0                	test   eax,eax
c0019df0:	75 0b                	jne    c0019dfd <Krnl::getEnv(Process*, char const*)+0x23>
c0019df2:	a1 d0 06 03 c0       	mov    eax,ds:0xc00306d0
c0019df7:	85 c0                	test   eax,eax
c0019df9:	75 19                	jne    c0019e14 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019dfb:	eb 27                	jmp    c0019e24 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019dfd:	52                   	push   edx
c0019dfe:	52                   	push   edx
c0019dff:	53                   	push   ebx
c0019e00:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019e06:	e8 5f fc ff ff       	call   c0019a6a <EnvVarContainer::getEnv(char const*)>
c0019e0b:	83 c4 10             	add    esp,0x10
c0019e0e:	85 c0                	test   eax,eax
c0019e10:	75 28                	jne    c0019e3a <Krnl::getEnv(Process*, char const*)+0x60>
c0019e12:	eb de                	jmp    c0019df2 <Krnl::getEnv(Process*, char const*)+0x18>
c0019e14:	52                   	push   edx
c0019e15:	52                   	push   edx
c0019e16:	53                   	push   ebx
c0019e17:	50                   	push   eax
c0019e18:	e8 4d fc ff ff       	call   c0019a6a <EnvVarContainer::getEnv(char const*)>
c0019e1d:	83 c4 10             	add    esp,0x10
c0019e20:	85 c0                	test   eax,eax
c0019e22:	75 16                	jne    c0019e3a <Krnl::getEnv(Process*, char const*)+0x60>
c0019e24:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019e28:	a1 d4 06 03 c0       	mov    eax,ds:0xc00306d4
c0019e2d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019e31:	83 c4 08             	add    esp,0x8
c0019e34:	5b                   	pop    ebx
c0019e35:	e9 30 fc ff ff       	jmp    c0019a6a <EnvVarContainer::getEnv(char const*)>
c0019e3a:	83 c4 08             	add    esp,0x8
c0019e3d:	5b                   	pop    ebx
c0019e3e:	c3                   	ret    

c0019e3f <Krnl::setEnvSystem(char const*, char const*)>:
c0019e3f:	83 ec 10             	sub    esp,0x10
c0019e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e4a:	ff 35 d4 06 03 c0    	push   DWORD PTR ds:0xc00306d4
c0019e50:	e8 53 fc ff ff       	call   c0019aa8 <EnvVarContainer::setEnv(char const*, char const*)>
c0019e55:	83 c4 1c             	add    esp,0x1c
c0019e58:	c3                   	ret    

c0019e59 <Krnl::setEnvUser(char const*, char const*)>:
c0019e59:	a1 d0 06 03 c0       	mov    eax,ds:0xc00306d0
c0019e5e:	85 c0                	test   eax,eax
c0019e60:	74 15                	je     c0019e77 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019e62:	83 ec 10             	sub    esp,0x10
c0019e65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e6d:	50                   	push   eax
c0019e6e:	e8 35 fc ff ff       	call   c0019aa8 <EnvVarContainer::setEnv(char const*, char const*)>
c0019e73:	83 c4 1c             	add    esp,0x1c
c0019e76:	c3                   	ret    
c0019e77:	c3                   	ret    

c0019e78 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019e78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e7c:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019e82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019e86:	e9 1d fc ff ff       	jmp    c0019aa8 <EnvVarContainer::setEnv(char const*, char const*)>

c0019e8b <Krnl::deleteEnvSystem(char const*)>:
c0019e8b:	c3                   	ret    

c0019e8c <Krnl::deleteEnvUser(char const*)>:
c0019e8c:	c3                   	ret    

c0019e8d <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019e8d:	c3                   	ret    

c0019e8e <Krnl::newProcessEnv(Process*)>:
c0019e8e:	83 ec 28             	sub    esp,0x28
c0019e91:	6a 0c                	push   0xc
c0019e93:	e8 ae 59 ff ff       	call   c000f846 <malloc>
c0019e98:	5a                   	pop    edx
c0019e99:	59                   	pop    ecx
c0019e9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019e9e:	50                   	push   eax
c0019e9f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019ea3:	e8 e0 fe ff ff       	call   c0019d88 <EnvVarContainer::EnvVarContainer(Process*)>
c0019ea8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019eac:	83 c4 2c             	add    esp,0x2c
c0019eaf:	c3                   	ret    

c0019eb0 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019eb0:	56                   	push   esi
c0019eb1:	53                   	push   ebx
c0019eb2:	83 ec 10             	sub    esp,0x10
c0019eb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019eb9:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c0019ebf:	6a 0c                	push   0xc
c0019ec1:	e8 80 59 ff ff       	call   c000f846 <malloc>
c0019ec6:	89 c3                	mov    ebx,eax
c0019ec8:	58                   	pop    eax
c0019ec9:	5a                   	pop    edx
c0019eca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ece:	53                   	push   ebx
c0019ecf:	e8 b4 fe ff ff       	call   c0019d88 <EnvVarContainer::EnvVarContainer(Process*)>
c0019ed4:	8b 06                	mov    eax,DWORD PTR [esi]
c0019ed6:	89 03                	mov    DWORD PTR [ebx],eax
c0019ed8:	c1 e0 03             	shl    eax,0x3
c0019edb:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ede:	e8 63 59 ff ff       	call   c000f846 <malloc>
c0019ee3:	83 c4 0c             	add    esp,0xc
c0019ee6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019ee9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0019eeb:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c0019ef2:	52                   	push   edx
c0019ef3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019ef6:	50                   	push   eax
c0019ef7:	e8 48 68 fe ff       	call   c0000744 <memcpy>
c0019efc:	89 d8                	mov    eax,ebx
c0019efe:	83 c4 14             	add    esp,0x14
c0019f01:	5b                   	pop    ebx
c0019f02:	5e                   	pop    esi
c0019f03:	c3                   	ret    

c0019f04 <Krnl::loadSystemEnv()>:
c0019f04:	53                   	push   ebx
c0019f05:	83 ec 14             	sub    esp,0x14
c0019f08:	6a 0c                	push   0xc
c0019f0a:	e8 37 59 ff ff       	call   c000f846 <malloc>
c0019f0f:	89 c3                	mov    ebx,eax
c0019f11:	58                   	pop    eax
c0019f12:	5a                   	pop    edx
c0019f13:	ff 35 f4 10 03 c0    	push   DWORD PTR ds:0xc00310f4
c0019f19:	53                   	push   ebx
c0019f1a:	e8 69 fe ff ff       	call   c0019d88 <EnvVarContainer::EnvVarContainer(Process*)>
c0019f1f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f22:	89 1d d4 06 03 c0    	mov    DWORD PTR ds:0xc00306d4,ebx
c0019f28:	e8 3f fe ff ff       	call   c0019d6c <EnvVarContainer::__loadSystem()>
c0019f2d:	83 c4 18             	add    esp,0x18
c0019f30:	5b                   	pop    ebx
c0019f31:	c3                   	ret    

c0019f32 <Krnl::loadUserEnv()>:
c0019f32:	53                   	push   ebx
c0019f33:	83 ec 14             	sub    esp,0x14
c0019f36:	6a 0c                	push   0xc
c0019f38:	e8 09 59 ff ff       	call   c000f846 <malloc>
c0019f3d:	89 c3                	mov    ebx,eax
c0019f3f:	58                   	pop    eax
c0019f40:	5a                   	pop    edx
c0019f41:	ff 35 f4 10 03 c0    	push   DWORD PTR ds:0xc00310f4
c0019f47:	53                   	push   ebx
c0019f48:	e8 3b fe ff ff       	call   c0019d88 <EnvVarContainer::EnvVarContainer(Process*)>
c0019f4d:	89 1d d0 06 03 c0    	mov    DWORD PTR ds:0xc00306d0,ebx
c0019f53:	83 c4 18             	add    esp,0x18
c0019f56:	5b                   	pop    ebx
c0019f57:	c3                   	ret    

c0019f58 <Krnl::flushEnv()>:
c0019f58:	c3                   	ret    

c0019f59 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019f59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f5d:	8b 15 d0 06 03 c0    	mov    edx,DWORD PTR ds:0xc00306d0
c0019f63:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019f69:	a1 d4 06 03 c0       	mov    eax,ds:0xc00306d4
c0019f6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f70:	03 01                	add    eax,DWORD PTR [ecx]
c0019f72:	85 d2                	test   edx,edx
c0019f74:	74 02                	je     c0019f78 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019f76:	03 02                	add    eax,DWORD PTR [edx]
c0019f78:	c3                   	ret    

c0019f79 <Krnl::getProcessEnvPair(Process*, int)>:
c0019f79:	57                   	push   edi
c0019f7a:	8b 0d d0 06 03 c0    	mov    ecx,DWORD PTR ds:0xc00306d0
c0019f80:	56                   	push   esi
c0019f81:	85 c9                	test   ecx,ecx
c0019f83:	53                   	push   ebx
c0019f84:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019f88:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f8c:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c0019f92:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019f96:	8b 02                	mov    eax,DWORD PTR [edx]
c0019f98:	75 47                	jne    c0019fe1 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c0019f9a:	39 c3                	cmp    ebx,eax
c0019f9c:	7c 47                	jl     c0019fe5 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c0019f9e:	8b 15 d4 06 03 c0    	mov    edx,DWORD PTR ds:0xc00306d4
c0019fa4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019fa6:	01 c1                	add    ecx,eax
c0019fa8:	39 d9                	cmp    ecx,ebx
c0019faa:	7e 6c                	jle    c001a018 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019fac:	51                   	push   ecx
c0019fad:	89 d9                	mov    ecx,ebx
c0019faf:	29 c1                	sub    ecx,eax
c0019fb1:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019fb4:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c0019fb8:	53                   	push   ebx
c0019fb9:	68 ac b2 02 c0       	push   0xc002b2ac
c0019fbe:	e8 52 8b ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0019fc3:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c0019fc9:	2b 18                	sub    ebx,DWORD PTR [eax]
c0019fcb:	a1 d4 06 03 c0       	mov    eax,ds:0xc00306d4
c0019fd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019fd3:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019fd7:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019fda:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019fdd:	89 06                	mov    DWORD PTR [esi],eax
c0019fdf:	eb 51                	jmp    c001a032 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c0019fe1:	39 c3                	cmp    ebx,eax
c0019fe3:	7d 05                	jge    c0019fea <Krnl::getProcessEnvPair(Process*, int)+0x71>
c0019fe5:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019fe8:	eb 20                	jmp    c001a00a <Krnl::getProcessEnvPair(Process*, int)+0x91>
c0019fea:	8b 39                	mov    edi,DWORD PTR [ecx]
c0019fec:	8d 14 07             	lea    edx,[edi+eax*1]
c0019fef:	39 da                	cmp    edx,ebx
c0019ff1:	7e 04                	jle    c0019ff7 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c0019ff3:	29 c3                	sub    ebx,eax
c0019ff5:	eb 10                	jmp    c001a007 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c0019ff7:	8b 0d d4 06 03 c0    	mov    ecx,DWORD PTR ds:0xc00306d4
c0019ffd:	03 11                	add    edx,DWORD PTR [ecx]
c0019fff:	39 da                	cmp    edx,ebx
c001a001:	7e 15                	jle    c001a018 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a003:	29 c3                	sub    ebx,eax
c001a005:	29 fb                	sub    ebx,edi
c001a007:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a00a:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a00e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a011:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a014:	89 06                	mov    DWORD PTR [esi],eax
c001a016:	eb 1d                	jmp    c001a035 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a018:	83 ec 0c             	sub    esp,0xc
c001a01b:	68 c0 b2 02 c0       	push   0xc002b2c0
c001a020:	e8 18 00 00 00       	call   c001a03d <Krnl::panic(char const*)>
c001a025:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a02b:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a032:	83 c4 10             	add    esp,0x10
c001a035:	89 f0                	mov    eax,esi
c001a037:	5b                   	pop    ebx
c001a038:	5e                   	pop    esi
c001a039:	5f                   	pop    edi
c001a03a:	c2 04 00             	ret    0x4

c001a03d <Krnl::panic(char const*)>:
c001a03d:	55                   	push   ebp
c001a03e:	89 e5                	mov    ebp,esp
c001a040:	53                   	push   ebx
c001a041:	83 ec 0c             	sub    esp,0xc
c001a044:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a047:	fa                   	cli    
c001a048:	c6 05 e0 06 03 c0 01 	mov    BYTE PTR ds:0xc00306e0,0x1
c001a04f:	53                   	push   ebx
c001a050:	c6 05 c4 ca 02 c0 00 	mov    BYTE PTR ds:0xc002cac4,0x0
c001a057:	68 da b2 02 c0       	push   0xc002b2da
c001a05c:	e8 b4 8a ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001a061:	58                   	pop    eax
c001a062:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a067:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a06d:	e8 65 6c ff ff       	call   c0010cd7 <setActiveTerminal(VgaText*)>
c001a072:	83 c4 0c             	add    esp,0xc
c001a075:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a07a:	6a 01                	push   0x1
c001a07c:	6a 0f                	push   0xf
c001a07e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a084:	e8 7f 66 ff ff       	call   c0010708 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a089:	58                   	pop    eax
c001a08a:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a08f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a095:	e8 de 6e ff ff       	call   c0010f78 <VgaText::clearScreen()>
c001a09a:	58                   	pop    eax
c001a09b:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a0a0:	5a                   	pop    edx
c001a0a1:	68 f3 b2 02 c0       	push   0xc002b2f3
c001a0a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0ac:	e8 45 70 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a0b1:	59                   	pop    ecx
c001a0b2:	58                   	pop    eax
c001a0b3:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a0b8:	68 98 b3 02 c0       	push   0xc002b398
c001a0bd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0c3:	e8 2e 70 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a0c8:	58                   	pop    eax
c001a0c9:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a0ce:	5a                   	pop    edx
c001a0cf:	68 0f b3 02 c0       	push   0xc002b30f
c001a0d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0da:	e8 17 70 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a0df:	59                   	pop    ecx
c001a0e0:	58                   	pop    eax
c001a0e1:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a0e6:	53                   	push   ebx
c001a0e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0ed:	e8 04 70 ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a0f2:	58                   	pop    eax
c001a0f3:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a0f8:	5a                   	pop    edx
c001a0f9:	68 2f b3 02 c0       	push   0xc002b32f
c001a0fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a104:	e8 ed 6f ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a109:	a1 dc 06 03 c0       	mov    eax,ds:0xc00306dc
c001a10e:	83 c4 10             	add    esp,0x10
c001a111:	85 c0                	test   eax,eax
c001a113:	74 02                	je     c001a117 <Krnl::panic(char const*)+0xda>
c001a115:	ff d0                	call   eax
c001a117:	83 ec 0c             	sub    esp,0xc
c001a11a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a11d:	e8 b2 2e 00 00       	call   c001cfd4 <Thr::getDriverNameFromAddress(unsigned long)>
c001a122:	83 c4 10             	add    esp,0x10
c001a125:	89 c3                	mov    ebx,eax
c001a127:	85 c0                	test   eax,eax
c001a129:	0f 84 50 02 00 00    	je     c001a37f <Krnl::panic(char const*)+0x342>
c001a12f:	83 ec 08             	sub    esp,0x8
c001a132:	8b 15 f4 10 03 c0    	mov    edx,DWORD PTR ds:0xc00310f4
c001a138:	68 d4 b3 02 c0       	push   0xc002b3d4
c001a13d:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a143:	e8 ae 6f ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a148:	58                   	pop    eax
c001a149:	5a                   	pop    edx
c001a14a:	8b 15 f4 10 03 c0    	mov    edx,DWORD PTR ds:0xc00310f4
c001a150:	68 0f b3 02 c0       	push   0xc002b30f
c001a155:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a15b:	e8 96 6f ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a160:	59                   	pop    ecx
c001a161:	58                   	pop    eax
c001a162:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a167:	53                   	push   ebx
c001a168:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a16e:	e8 83 6f ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a173:	83 c4 10             	add    esp,0x10
c001a176:	83 ec 08             	sub    esp,0x8
c001a179:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a17e:	68 2e b3 02 c0       	push   0xc002b32e
c001a183:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a189:	e8 68 6f ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a18e:	58                   	pop    eax
c001a18f:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a194:	5a                   	pop    edx
c001a195:	68 2c b4 02 c0       	push   0xc002b42c
c001a19a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1a0:	e8 51 6f ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a1a5:	59                   	pop    ecx
c001a1a6:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a1ab:	5b                   	pop    ebx
c001a1ac:	68 6c b4 02 c0       	push   0xc002b46c
c001a1b1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1b7:	e8 3a 6f ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a1bc:	58                   	pop    eax
c001a1bd:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a1c2:	5a                   	pop    edx
c001a1c3:	68 1a b3 02 c0       	push   0xc002b31a
c001a1c8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1ce:	e8 23 6f ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a1d3:	59                   	pop    ecx
c001a1d4:	5b                   	pop    ebx
c001a1d5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a1d8:	68 32 b3 02 c0       	push   0xc002b332
c001a1dd:	e8 33 89 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001a1e2:	58                   	pop    eax
c001a1e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a1e6:	5a                   	pop    edx
c001a1e7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a1ea:	68 3b b3 02 c0       	push   0xc002b33b
c001a1ef:	e8 21 89 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001a1f4:	59                   	pop    ecx
c001a1f5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a1f8:	5b                   	pop    ebx
c001a1f9:	8b 00                	mov    eax,DWORD PTR [eax]
c001a1fb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a1fe:	68 44 b3 02 c0       	push   0xc002b344
c001a203:	e8 0d 89 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001a208:	58                   	pop    eax
c001a209:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a20e:	5a                   	pop    edx
c001a20f:	68 b0 b4 02 c0       	push   0xc002b4b0
c001a214:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a21a:	e8 d7 6e ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a21f:	59                   	pop    ecx
c001a220:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a225:	5b                   	pop    ebx
c001a226:	68 4d b3 02 c0       	push   0xc002b34d
c001a22b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a231:	e8 c0 6e ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a236:	0f 20 c0             	mov    eax,cr0
c001a239:	5a                   	pop    edx
c001a23a:	59                   	pop    ecx
c001a23b:	50                   	push   eax
c001a23c:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a241:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a247:	e8 d0 6e ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c001a24c:	5b                   	pop    ebx
c001a24d:	58                   	pop    eax
c001a24e:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a253:	68 57 b3 02 c0       	push   0xc002b357
c001a258:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a25e:	e8 93 6e ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a263:	0f 20 d0             	mov    eax,cr2
c001a266:	5a                   	pop    edx
c001a267:	59                   	pop    ecx
c001a268:	50                   	push   eax
c001a269:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a26e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a274:	e8 a3 6e ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c001a279:	5b                   	pop    ebx
c001a27a:	58                   	pop    eax
c001a27b:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a280:	68 61 b3 02 c0       	push   0xc002b361
c001a285:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a28b:	e8 66 6e ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a290:	0f 20 d8             	mov    eax,cr3
c001a293:	5a                   	pop    edx
c001a294:	59                   	pop    ecx
c001a295:	50                   	push   eax
c001a296:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a29b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2a1:	e8 76 6e ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c001a2a6:	5b                   	pop    ebx
c001a2a7:	58                   	pop    eax
c001a2a8:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a2ad:	68 74 b3 02 c0       	push   0xc002b374
c001a2b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2b8:	e8 39 6e ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a2bd:	0f 20 e0             	mov    eax,cr4
c001a2c0:	5a                   	pop    edx
c001a2c1:	59                   	pop    ecx
c001a2c2:	50                   	push   eax
c001a2c3:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a2c8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2ce:	e8 49 6e ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c001a2d3:	5b                   	pop    ebx
c001a2d4:	58                   	pop    eax
c001a2d5:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a2da:	68 7e b3 02 c0       	push   0xc002b37e
c001a2df:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2e5:	e8 0c 6e ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a2ea:	5a                   	pop    edx
c001a2eb:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a2f0:	59                   	pop    ecx
c001a2f1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a2f7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a2fa:	50                   	push   eax
c001a2fb:	e8 1c 6e ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c001a300:	5b                   	pop    ebx
c001a301:	58                   	pop    eax
c001a302:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a307:	68 95 b3 02 c0       	push   0xc002b395
c001a30c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a312:	e8 df 6d ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a317:	5a                   	pop    edx
c001a318:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a31d:	59                   	pop    ecx
c001a31e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a324:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a327:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a32a:	50                   	push   eax
c001a32b:	e8 ec 6d ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c001a330:	5b                   	pop    ebx
c001a331:	58                   	pop    eax
c001a332:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a337:	68 95 b3 02 c0       	push   0xc002b395
c001a33c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a342:	e8 af 6d ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a347:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a34c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a34f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a355:	8b 12                	mov    edx,DWORD PTR [edx]
c001a357:	59                   	pop    ecx
c001a358:	5b                   	pop    ebx
c001a359:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a35c:	50                   	push   eax
c001a35d:	e8 ba 6d ff ff       	call   c001111c <VgaText::putx(unsigned int)>
c001a362:	83 c4 10             	add    esp,0x10
c001a365:	b2 fe                	mov    dl,0xfe
c001a367:	e4 60                	in     al,0x60
c001a369:	3c 1c                	cmp    al,0x1c
c001a36b:	74 04                	je     c001a371 <Krnl::panic(char const*)+0x334>
c001a36d:	3c 5a                	cmp    al,0x5a
c001a36f:	75 f6                	jne    c001a367 <Krnl::panic(char const*)+0x32a>
c001a371:	e4 64                	in     al,0x64
c001a373:	a8 02                	test   al,0x2
c001a375:	75 fa                	jne    c001a371 <Krnl::panic(char const*)+0x334>
c001a377:	88 d0                	mov    al,dl
c001a379:	e6 64                	out    0x64,al
c001a37b:	fa                   	cli    
c001a37c:	f4                   	hlt    
c001a37d:	eb e8                	jmp    c001a367 <Krnl::panic(char const*)+0x32a>
c001a37f:	50                   	push   eax
c001a380:	50                   	push   eax
c001a381:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a386:	68 00 b4 02 c0       	push   0xc002b400
c001a38b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a391:	e8 60 6d ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a396:	58                   	pop    eax
c001a397:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a39c:	5a                   	pop    edx
c001a39d:	68 0f b3 02 c0       	push   0xc002b30f
c001a3a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3a8:	e8 49 6d ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a3ad:	59                   	pop    ecx
c001a3ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a3b3:	5b                   	pop    ebx
c001a3b4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a3b7:	83 c0 0c             	add    eax,0xc
c001a3ba:	50                   	push   eax
c001a3bb:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001a3c0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3c6:	e8 2b 6d ff ff       	call   c00110f6 <VgaText::puts(char const*)>
c001a3cb:	83 c4 10             	add    esp,0x10
c001a3ce:	e9 a3 fd ff ff       	jmp    c001a176 <Krnl::panic(char const*)+0x139>

c001a3d3 <Net::switchEndian16(unsigned short)>:
c001a3d3:	83 ec 04             	sub    esp,0x4
c001a3d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3da:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a3de:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a3e2:	c1 f8 08             	sar    eax,0x8
c001a3e5:	89 c2                	mov    edx,eax
c001a3e7:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a3eb:	c1 e0 08             	shl    eax,0x8
c001a3ee:	09 d0                	or     eax,edx
c001a3f0:	83 c4 04             	add    esp,0x4
c001a3f3:	c3                   	ret    

c001a3f4 <Net::switchEndian32(unsigned int)>:
c001a3f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3f8:	c1 e8 18             	shr    eax,0x18
c001a3fb:	89 c2                	mov    edx,eax
c001a3fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a401:	c1 e0 08             	shl    eax,0x8
c001a404:	25 00 00 ff 00       	and    eax,0xff0000
c001a409:	09 c2                	or     edx,eax
c001a40b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a40f:	c1 e8 08             	shr    eax,0x8
c001a412:	25 00 ff 00 00       	and    eax,0xff00
c001a417:	09 c2                	or     edx,eax
c001a419:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a41d:	c1 e0 18             	shl    eax,0x18
c001a420:	09 d0                	or     eax,edx
c001a422:	c3                   	ret    

c001a423 <Net::crc32Calc(unsigned char*, int)>:
c001a423:	83 ec 10             	sub    esp,0x10
c001a426:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a42b:	75 07                	jne    c001a434 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a42d:	b8 00 00 00 00       	mov    eax,0x0
c001a432:	eb 7c                	jmp    c001a4b0 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a434:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a439:	7f 07                	jg     c001a442 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a43b:	b8 00 00 00 00       	mov    eax,0x0
c001a440:	eb 6e                	jmp    c001a4b0 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a442:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a44a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a452:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a456:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a45a:	7d 4e                	jge    c001a4aa <Net::crc32Calc(unsigned char*, int)+0x87>
c001a45c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a460:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a464:	01 d0                	add    eax,edx
c001a466:	8a 00                	mov    al,BYTE PTR [eax]
c001a468:	0f b6 c0             	movzx  eax,al
c001a46b:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a46f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a477:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a47c:	7f 26                	jg     c001a4a4 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a47e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a482:	83 e0 01             	and    eax,0x1
c001a485:	74 0d                	je     c001a494 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a487:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a48b:	d1 e8                	shr    eax,1
c001a48d:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a492:	eb 06                	jmp    c001a49a <Net::crc32Calc(unsigned char*, int)+0x77>
c001a494:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a498:	d1 e8                	shr    eax,1
c001a49a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a49e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a4a2:	eb d3                	jmp    c001a477 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a4a4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a4a8:	eb a8                	jmp    c001a452 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a4aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4ae:	f7 d0                	not    eax
c001a4b0:	83 c4 10             	add    esp,0x10
c001a4b3:	c3                   	ret    

c001a4b4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a4b4:	83 ec 1c             	sub    esp,0x1c
c001a4b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a4bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a4bf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a4c7:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a4cc:	7f 14                	jg     c001a4e2 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a4ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a4d2:	8d 50 01             	lea    edx,[eax+0x1]
c001a4d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a4d9:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a4dc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a4e0:	eb e5                	jmp    c001a4c7 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001a4e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a4e6:	8d 50 01             	lea    edx,[eax+0x1]
c001a4e9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a4ed:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a4f0:	83 ec 04             	sub    esp,0x4
c001a4f3:	6a 06                	push   0x6
c001a4f5:	8d 44 24 36          	lea    eax,[esp+0x36]
c001a4f9:	50                   	push   eax
c001a4fa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a4fe:	e8 41 62 fe ff       	call   c0000744 <memcpy>
c001a503:	83 c4 10             	add    esp,0x10
c001a506:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a50b:	83 ec 04             	sub    esp,0x4
c001a50e:	6a 06                	push   0x6
c001a510:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a514:	50                   	push   eax
c001a515:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a519:	e8 26 62 fe ff       	call   c0000744 <memcpy>
c001a51e:	83 c4 10             	add    esp,0x10
c001a521:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a526:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a52a:	0f b7 c0             	movzx  eax,ax
c001a52d:	c1 f8 08             	sar    eax,0x8
c001a530:	89 c1                	mov    ecx,eax
c001a532:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a536:	8d 50 01             	lea    edx,[eax+0x1]
c001a539:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a53d:	88 ca                	mov    dl,cl
c001a53f:	88 10                	mov    BYTE PTR [eax],dl
c001a541:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a545:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a549:	8d 48 01             	lea    ecx,[eax+0x1]
c001a54c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001a550:	88 10                	mov    BYTE PTR [eax],dl
c001a552:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a556:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a55a:	83 ec 04             	sub    esp,0x4
c001a55d:	52                   	push   edx
c001a55e:	50                   	push   eax
c001a55f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a563:	e8 dc 61 fe ff       	call   c0000744 <memcpy>
c001a568:	83 c4 10             	add    esp,0x10
c001a56b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a56f:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001a573:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a577:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001a57b:	83 ec 08             	sub    esp,0x8
c001a57e:	50                   	push   eax
c001a57f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a583:	e8 9b fe ff ff       	call   c001a423 <Net::crc32Calc(unsigned char*, int)>
c001a588:	83 c4 10             	add    esp,0x10
c001a58b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a58f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a593:	c1 e8 18             	shr    eax,0x18
c001a596:	89 c1                	mov    ecx,eax
c001a598:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a59c:	8d 50 01             	lea    edx,[eax+0x1]
c001a59f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a5a3:	88 ca                	mov    dl,cl
c001a5a5:	88 10                	mov    BYTE PTR [eax],dl
c001a5a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5ab:	c1 e8 10             	shr    eax,0x10
c001a5ae:	89 c1                	mov    ecx,eax
c001a5b0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a5b4:	8d 50 01             	lea    edx,[eax+0x1]
c001a5b7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a5bb:	88 ca                	mov    dl,cl
c001a5bd:	88 10                	mov    BYTE PTR [eax],dl
c001a5bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5c3:	c1 e8 08             	shr    eax,0x8
c001a5c6:	89 c1                	mov    ecx,eax
c001a5c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a5cc:	8d 50 01             	lea    edx,[eax+0x1]
c001a5cf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a5d3:	88 ca                	mov    dl,cl
c001a5d5:	88 10                	mov    BYTE PTR [eax],dl
c001a5d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a5db:	8d 50 01             	lea    edx,[eax+0x1]
c001a5de:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a5e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a5e6:	88 10                	mov    BYTE PTR [eax],dl
c001a5e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a5ec:	83 c4 1c             	add    esp,0x1c
c001a5ef:	c3                   	ret    

c001a5f0 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a5f0:	83 ec 2c             	sub    esp,0x2c
c001a5f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a5f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a5fb:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001a600:	83 ec 04             	sub    esp,0x4
c001a603:	6a 06                	push   0x6
c001a605:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a609:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a60d:	83 c0 0e             	add    eax,0xe
c001a610:	50                   	push   eax
c001a611:	e8 2e 61 fe ff       	call   c0000744 <memcpy>
c001a616:	83 c4 10             	add    esp,0x10
c001a619:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a61e:	83 ec 04             	sub    esp,0x4
c001a621:	6a 06                	push   0x6
c001a623:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a627:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a62b:	83 c0 08             	add    eax,0x8
c001a62e:	50                   	push   eax
c001a62f:	e8 10 61 fe ff       	call   c0000744 <memcpy>
c001a634:	83 c4 10             	add    esp,0x10
c001a637:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a63c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a640:	8d 50 01             	lea    edx,[eax+0x1]
c001a643:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a647:	8a 00                	mov    al,BYTE PTR [eax]
c001a649:	0f b6 c0             	movzx  eax,al
c001a64c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001a651:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a655:	8d 50 01             	lea    edx,[eax+0x1]
c001a658:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a65c:	8a 00                	mov    al,BYTE PTR [eax]
c001a65e:	0f b6 c0             	movzx  eax,al
c001a661:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001a666:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001a66b:	c1 e0 08             	shl    eax,0x8
c001a66e:	89 c2                	mov    edx,eax
c001a670:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a674:	09 d0                	or     eax,edx
c001a676:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a67a:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a67e:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001a683:	75 3a                	jne    c001a6bf <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a685:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a689:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a68c:	66 3d dc 05          	cmp    ax,0x5dc
c001a690:	77 10                	ja     c001a6a2 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001a692:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a696:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a699:	0f b7 c0             	movzx  eax,ax
c001a69c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a6a0:	eb 1d                	jmp    c001a6bf <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a6a2:	83 ec 0c             	sub    esp,0xc
c001a6a5:	68 d8 b4 02 c0       	push   0xc002b4d8
c001a6aa:	e8 66 84 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001a6af:	83 c4 10             	add    esp,0x10
c001a6b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a6b6:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a6ba:	e9 c0 00 00 00       	jmp    c001a77f <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001a6bf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a6c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a6c7:	8b 00                	mov    eax,DWORD PTR [eax]
c001a6c9:	83 ec 04             	sub    esp,0x4
c001a6cc:	52                   	push   edx
c001a6cd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a6d1:	50                   	push   eax
c001a6d2:	e8 6d 60 fe ff       	call   c0000744 <memcpy>
c001a6d7:	83 c4 10             	add    esp,0x10
c001a6da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a6de:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001a6e2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a6e6:	8d 50 01             	lea    edx,[eax+0x1]
c001a6e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a6ed:	8a 00                	mov    al,BYTE PTR [eax]
c001a6ef:	0f b6 c0             	movzx  eax,al
c001a6f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a6f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a6fa:	8d 50 01             	lea    edx,[eax+0x1]
c001a6fd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a701:	8a 00                	mov    al,BYTE PTR [eax]
c001a703:	0f b6 c0             	movzx  eax,al
c001a706:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a70a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a70e:	8d 50 01             	lea    edx,[eax+0x1]
c001a711:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a715:	8a 00                	mov    al,BYTE PTR [eax]
c001a717:	0f b6 c0             	movzx  eax,al
c001a71a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a71e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a722:	8d 50 01             	lea    edx,[eax+0x1]
c001a725:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a729:	8a 00                	mov    al,BYTE PTR [eax]
c001a72b:	0f b6 c0             	movzx  eax,al
c001a72e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a732:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a736:	c1 e0 18             	shl    eax,0x18
c001a739:	89 c2                	mov    edx,eax
c001a73b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a73f:	c1 e0 10             	shl    eax,0x10
c001a742:	09 c2                	or     edx,eax
c001a744:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a748:	c1 e0 08             	shl    eax,0x8
c001a74b:	09 d0                	or     eax,edx
c001a74d:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001a751:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a755:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a759:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001a75d:	83 e8 04             	sub    eax,0x4
c001a760:	83 ec 08             	sub    esp,0x8
c001a763:	50                   	push   eax
c001a764:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a768:	e8 b6 fc ff ff       	call   c001a423 <Net::crc32Calc(unsigned char*, int)>
c001a76d:	83 c4 10             	add    esp,0x10
c001a770:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a774:	0f 94 c2             	sete   dl
c001a777:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a77b:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a77e:	90                   	nop
c001a77f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a783:	83 c4 2c             	add    esp,0x2c
c001a786:	c2 04 00             	ret    0x4

c001a789 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a789:	55                   	push   ebp
c001a78a:	57                   	push   edi
c001a78b:	56                   	push   esi
c001a78c:	53                   	push   ebx
c001a78d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a793:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a79a:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a79c:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a79f:	80 fb 40             	cmp    bl,0x40
c001a7a2:	75 1b                	jne    c001a7bf <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a7a4:	8a 16                	mov    dl,BYTE PTR [esi]
c001a7a6:	84 d2                	test   dl,dl
c001a7a8:	0f 84 f1 00 00 00    	je     c001a89f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7ae:	8d 46 01             	lea    eax,[esi+0x1]
c001a7b1:	80 fa 3a             	cmp    dl,0x3a
c001a7b4:	74 04                	je     c001a7ba <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a7b6:	89 c6                	mov    esi,eax
c001a7b8:	eb ea                	jmp    c001a7a4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a7ba:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a7bd:	89 c6                	mov    esi,eax
c001a7bf:	50                   	push   eax
c001a7c0:	6a 40                	push   0x40
c001a7c2:	6a 00                	push   0x0
c001a7c4:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a7c8:	50                   	push   eax
c001a7c9:	e8 aa 5f fe ff       	call   c0000778 <memset>
c001a7ce:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a7d5:	31 c0                	xor    eax,eax
c001a7d7:	83 c4 10             	add    esp,0x10
c001a7da:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a7dc:	84 c9                	test   cl,cl
c001a7de:	0f 84 bb 00 00 00    	je     c001a89f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7e4:	3d c7 00 00 00       	cmp    eax,0xc7
c001a7e9:	0f 8f b0 00 00 00    	jg     c001a89f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7ef:	80 f9 0a             	cmp    cl,0xa
c001a7f2:	0f 85 98 00 00 00    	jne    c001a890 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a7f8:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a7fd:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a801:	a8 df                	test   al,0xdf
c001a803:	0f 94 c1             	sete   cl
c001a806:	3c 23                	cmp    al,0x23
c001a808:	0f 94 c2             	sete   dl
c001a80b:	08 d1                	or     cl,dl
c001a80d:	75 4a                	jne    c001a859 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a80f:	8d 50 f7             	lea    edx,[eax-0x9]
c001a812:	80 fa 01             	cmp    dl,0x1
c001a815:	76 42                	jbe    c001a859 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a817:	3c 5b                	cmp    al,0x5b
c001a819:	75 42                	jne    c001a85d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a81b:	80 fb 40             	cmp    bl,0x40
c001a81e:	75 39                	jne    c001a859 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a820:	83 ec 0c             	sub    esp,0xc
c001a823:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a827:	52                   	push   edx
c001a828:	e8 67 5f fe ff       	call   c0000794 <strlen>
c001a82d:	83 c4 10             	add    esp,0x10
c001a830:	83 f8 3f             	cmp    eax,0x3f
c001a833:	77 6a                	ja     c001a89f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a835:	50                   	push   eax
c001a836:	50                   	push   eax
c001a837:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a83b:	52                   	push   edx
c001a83c:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a840:	52                   	push   edx
c001a841:	e8 ee 5f fe ff       	call   c0000834 <strcpy>
c001a846:	58                   	pop    eax
c001a847:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a84b:	52                   	push   edx
c001a84c:	e8 43 5f fe ff       	call   c0000794 <strlen>
c001a851:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a856:	83 c4 10             	add    esp,0x10
c001a859:	31 d2                	xor    edx,edx
c001a85b:	eb 3a                	jmp    c001a897 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a85d:	80 fb 40             	cmp    bl,0x40
c001a860:	74 06                	je     c001a868 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a862:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a866:	eb 20                	jmp    c001a888 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a868:	50                   	push   eax
c001a869:	50                   	push   eax
c001a86a:	55                   	push   ebp
c001a86b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a86f:	50                   	push   eax
c001a870:	e8 4b 60 fe ff       	call   c00008c0 <strcmp>
c001a875:	83 c4 10             	add    esp,0x10
c001a878:	85 c0                	test   eax,eax
c001a87a:	75 dd                	jne    c001a859 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a87c:	eb e4                	jmp    c001a862 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a87e:	8d 50 01             	lea    edx,[eax+0x1]
c001a881:	80 f9 3d             	cmp    cl,0x3d
c001a884:	74 1d                	je     c001a8a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a886:	89 d0                	mov    eax,edx
c001a888:	8a 08                	mov    cl,BYTE PTR [eax]
c001a88a:	84 c9                	test   cl,cl
c001a88c:	75 f0                	jne    c001a87e <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a88e:	eb 0f                	jmp    c001a89f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a890:	8d 50 01             	lea    edx,[eax+0x1]
c001a893:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a897:	47                   	inc    edi
c001a898:	89 d0                	mov    eax,edx
c001a89a:	e9 3b ff ff ff       	jmp    c001a7da <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a89f:	31 c0                	xor    eax,eax
c001a8a1:	eb 33                	jmp    c001a8d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a8a7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a8aa:	50                   	push   eax
c001a8ab:	50                   	push   eax
c001a8ac:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a8b0:	50                   	push   eax
c001a8b1:	56                   	push   esi
c001a8b2:	e8 09 60 fe ff       	call   c00008c0 <strcmp>
c001a8b7:	83 c4 10             	add    esp,0x10
c001a8ba:	85 c0                	test   eax,eax
c001a8bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a8c0:	75 97                	jne    c001a859 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a8c2:	51                   	push   ecx
c001a8c3:	51                   	push   ecx
c001a8c4:	52                   	push   edx
c001a8c5:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a8cc:	e8 63 5f fe ff       	call   c0000834 <strcpy>
c001a8d1:	83 c4 10             	add    esp,0x10
c001a8d4:	b0 01                	mov    al,0x1
c001a8d6:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a8dc:	5b                   	pop    ebx
c001a8dd:	5e                   	pop    esi
c001a8de:	5f                   	pop    edi
c001a8df:	5d                   	pop    ebp
c001a8e0:	c3                   	ret    

c001a8e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a8e1:	57                   	push   edi
c001a8e2:	56                   	push   esi
c001a8e3:	53                   	push   ebx
c001a8e4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a8ea:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a8f1:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a8f8:	53                   	push   ebx
c001a8f9:	e8 96 5e fe ff       	call   c0000794 <strlen>
c001a8fe:	89 34 24             	mov    DWORD PTR [esp],esi
c001a901:	89 c7                	mov    edi,eax
c001a903:	e8 8c 5e fe ff       	call   c0000794 <strlen>
c001a908:	83 c4 10             	add    esp,0x10
c001a90b:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a90f:	3d ff 00 00 00       	cmp    eax,0xff
c001a914:	0f 87 d3 00 00 00    	ja     c001a9ed <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a91a:	57                   	push   edi
c001a91b:	57                   	push   edi
c001a91c:	56                   	push   esi
c001a91d:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a921:	56                   	push   esi
c001a922:	e8 0d 5f fe ff       	call   c0000834 <strcpy>
c001a927:	58                   	pop    eax
c001a928:	5a                   	pop    edx
c001a929:	68 6b b9 02 c0       	push   0xc002b96b
c001a92e:	56                   	push   esi
c001a92f:	e8 40 60 fe ff       	call   c0000974 <strcat>
c001a934:	59                   	pop    ecx
c001a935:	5f                   	pop    edi
c001a936:	53                   	push   ebx
c001a937:	56                   	push   esi
c001a938:	e8 37 60 fe ff       	call   c0000974 <strcat>
c001a93d:	58                   	pop    eax
c001a93e:	5a                   	pop    edx
c001a93f:	68 24 b5 02 c0       	push   0xc002b524
c001a944:	56                   	push   esi
c001a945:	e8 2a 60 fe ff       	call   c0000974 <strcat>
c001a94a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a951:	e8 f0 4e ff ff       	call   c000f846 <malloc>
c001a956:	83 c4 0c             	add    esp,0xc
c001a959:	89 c3                	mov    ebx,eax
c001a95b:	ff 35 f4 10 03 c0    	push   DWORD PTR ds:0xc00310f4
c001a961:	56                   	push   esi
c001a962:	50                   	push   eax
c001a963:	e8 06 87 ff ff       	call   c001306e <File::File(char const*, Process*)>
c001a968:	83 c4 10             	add    esp,0x10
c001a96b:	85 db                	test   ebx,ebx
c001a96d:	74 7e                	je     c001a9ed <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a96f:	51                   	push   ecx
c001a970:	51                   	push   ecx
c001a971:	6a 01                	push   0x1
c001a973:	53                   	push   ebx
c001a974:	e8 59 87 ff ff       	call   c00130d2 <File::open(FileOpenMode)>
c001a979:	83 c4 10             	add    esp,0x10
c001a97c:	85 c0                	test   eax,eax
c001a97e:	74 08                	je     c001a988 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a980:	83 ec 0c             	sub    esp,0xc
c001a983:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a985:	53                   	push   ebx
c001a986:	eb 5f                	jmp    c001a9e7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a988:	52                   	push   edx
c001a989:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a98d:	50                   	push   eax
c001a98e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a992:	50                   	push   eax
c001a993:	53                   	push   ebx
c001a994:	e8 e5 89 ff ff       	call   c001337e <File::stat(unsigned long long*, bool*)>
c001a999:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a99d:	83 c4 10             	add    esp,0x10
c001a9a0:	89 c1                	mov    ecx,eax
c001a9a2:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a9a6:	74 31                	je     c001a9d9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a9a8:	83 ec 0c             	sub    esp,0xc
c001a9ab:	50                   	push   eax
c001a9ac:	e8 95 4e ff ff       	call   c000f846 <malloc>
c001a9b1:	89 c6                	mov    esi,eax
c001a9b3:	58                   	pop    eax
c001a9b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9b6:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a9ba:	52                   	push   edx
c001a9bb:	56                   	push   esi
c001a9bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a9c0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a9c4:	53                   	push   ebx
c001a9c5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a9c8:	83 c4 20             	add    esp,0x20
c001a9cb:	85 c0                	test   eax,eax
c001a9cd:	75 0a                	jne    c001a9d9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a9cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a9d3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a9d7:	74 18                	je     c001a9f1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a9d9:	83 ec 0c             	sub    esp,0xc
c001a9dc:	53                   	push   ebx
c001a9dd:	e8 4e 87 ff ff       	call   c0013130 <File::close()>
c001a9e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a9ea:	83 c4 10             	add    esp,0x10
c001a9ed:	31 c0                	xor    eax,eax
c001a9ef:	eb 3b                	jmp    c001aa2c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a9f1:	83 ec 0c             	sub    esp,0xc
c001a9f4:	53                   	push   ebx
c001a9f5:	e8 36 87 ff ff       	call   c0013130 <File::close()>
c001a9fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aa02:	83 c4 0c             	add    esp,0xc
c001aa05:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aa0c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aa13:	56                   	push   esi
c001aa14:	e8 70 fd ff ff       	call   c001a789 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001aa19:	89 34 24             	mov    DWORD PTR [esp],esi
c001aa1c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001aa20:	e8 31 4e ff ff       	call   c000f856 <free>
c001aa25:	83 c4 10             	add    esp,0x10
c001aa28:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001aa2c:	81 c4 20 01 00 00    	add    esp,0x120
c001aa32:	5b                   	pop    ebx
c001aa33:	5e                   	pop    esi
c001aa34:	5f                   	pop    edi
c001aa35:	c3                   	ret    

c001aa36 <Reg::getLine(char*, char*, char*)>:
c001aa36:	57                   	push   edi
c001aa37:	56                   	push   esi
c001aa38:	53                   	push   ebx
c001aa39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa3d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aa41:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aa45:	57                   	push   edi
c001aa46:	56                   	push   esi
c001aa47:	53                   	push   ebx
c001aa48:	68 29 b5 02 c0       	push   0xc002b529
c001aa4d:	e8 8f fe ff ff       	call   c001a8e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aa52:	83 c4 10             	add    esp,0x10
c001aa55:	84 c0                	test   al,al
c001aa57:	75 10                	jne    c001aa69 <Reg::getLine(char*, char*, char*)+0x33>
c001aa59:	57                   	push   edi
c001aa5a:	56                   	push   esi
c001aa5b:	53                   	push   ebx
c001aa5c:	68 4e b5 02 c0       	push   0xc002b54e
c001aa61:	e8 7b fe ff ff       	call   c001a8e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aa66:	83 c4 10             	add    esp,0x10
c001aa69:	5b                   	pop    ebx
c001aa6a:	5e                   	pop    esi
c001aa6b:	5f                   	pop    edi
c001aa6c:	c3                   	ret    

c001aa6d <Reg::readInt(char*, char*, int*)>:
c001aa6d:	55                   	push   ebp
c001aa6e:	57                   	push   edi
c001aa6f:	56                   	push   esi
c001aa70:	53                   	push   ebx
c001aa71:	81 ec f0 00 00 00    	sub    esp,0xf0
c001aa77:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001aa7b:	57                   	push   edi
c001aa7c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aa83:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aa8a:	e8 a7 ff ff ff       	call   c001aa36 <Reg::getLine(char*, char*, char*)>
c001aa8f:	83 c4 10             	add    esp,0x10
c001aa92:	84 c0                	test   al,al
c001aa94:	0f 84 b3 00 00 00    	je     c001ab4d <Reg::readInt(char*, char*, int*)+0xe0>
c001aa9a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001aa9e:	80 fa 2b             	cmp    dl,0x2b
c001aaa1:	74 0c                	je     c001aaaf <Reg::readInt(char*, char*, int*)+0x42>
c001aaa3:	80 fa 2d             	cmp    dl,0x2d
c001aaa6:	75 0e                	jne    c001aab6 <Reg::readInt(char*, char*, int*)+0x49>
c001aaa8:	ba 01 00 00 00       	mov    edx,0x1
c001aaad:	eb 0b                	jmp    c001aaba <Reg::readInt(char*, char*, int*)+0x4d>
c001aaaf:	ba 01 00 00 00       	mov    edx,0x1
c001aab4:	eb 02                	jmp    c001aab8 <Reg::readInt(char*, char*, int*)+0x4b>
c001aab6:	31 d2                	xor    edx,edx
c001aab8:	31 c0                	xor    eax,eax
c001aaba:	be 0a 00 00 00       	mov    esi,0xa
c001aabf:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001aac4:	75 20                	jne    c001aae6 <Reg::readInt(char*, char*, int*)+0x79>
c001aac6:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001aaca:	80 f9 78             	cmp    cl,0x78
c001aacd:	75 0a                	jne    c001aad9 <Reg::readInt(char*, char*, int*)+0x6c>
c001aacf:	83 c2 02             	add    edx,0x2
c001aad2:	be 10 00 00 00       	mov    esi,0x10
c001aad7:	eb 0d                	jmp    c001aae6 <Reg::readInt(char*, char*, int*)+0x79>
c001aad9:	80 f9 62             	cmp    cl,0x62
c001aadc:	75 08                	jne    c001aae6 <Reg::readInt(char*, char*, int*)+0x79>
c001aade:	83 c2 02             	add    edx,0x2
c001aae1:	be 02 00 00 00       	mov    esi,0x2
c001aae6:	01 d7                	add    edi,edx
c001aae8:	31 d2                	xor    edx,edx
c001aaea:	8a 1f                	mov    bl,BYTE PTR [edi]
c001aaec:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001aaf0:	80 fb 0d             	cmp    bl,0xd
c001aaf3:	0f 94 c3             	sete   bl
c001aaf6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001aafb:	0f 94 c1             	sete   cl
c001aafe:	08 cb                	or     bl,cl
c001ab00:	75 3a                	jne    c001ab3c <Reg::readInt(char*, char*, int*)+0xcf>
c001ab02:	0f af d6             	imul   edx,esi
c001ab05:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001ab0a:	83 fe 10             	cmp    esi,0x10
c001ab0d:	75 26                	jne    c001ab35 <Reg::readInt(char*, char*, int*)+0xc8>
c001ab0f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ab13:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001ab16:	89 e9                	mov    ecx,ebp
c001ab18:	80 f9 05             	cmp    cl,0x5
c001ab1b:	77 06                	ja     c001ab23 <Reg::readInt(char*, char*, int*)+0xb6>
c001ab1d:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001ab21:	eb 16                	jmp    c001ab39 <Reg::readInt(char*, char*, int*)+0xcc>
c001ab23:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001ab27:	83 e9 61             	sub    ecx,0x61
c001ab2a:	80 f9 05             	cmp    cl,0x5
c001ab2d:	77 06                	ja     c001ab35 <Reg::readInt(char*, char*, int*)+0xc8>
c001ab2f:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001ab33:	eb 04                	jmp    c001ab39 <Reg::readInt(char*, char*, int*)+0xcc>
c001ab35:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001ab39:	47                   	inc    edi
c001ab3a:	eb ae                	jmp    c001aaea <Reg::readInt(char*, char*, int*)+0x7d>
c001ab3c:	84 c0                	test   al,al
c001ab3e:	74 02                	je     c001ab42 <Reg::readInt(char*, char*, int*)+0xd5>
c001ab40:	f7 da                	neg    edx
c001ab42:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001ab49:	89 10                	mov    DWORD PTR [eax],edx
c001ab4b:	88 d8                	mov    al,bl
c001ab4d:	81 c4 ec 00 00 00    	add    esp,0xec
c001ab53:	5b                   	pop    ebx
c001ab54:	5e                   	pop    esi
c001ab55:	5f                   	pop    edi
c001ab56:	5d                   	pop    ebp
c001ab57:	c3                   	ret    

c001ab58 <Reg::readString(char*, char*, char*, int)>:
c001ab58:	57                   	push   edi
c001ab59:	56                   	push   esi
c001ab5a:	53                   	push   ebx
c001ab5b:	81 ec d4 00 00 00    	sub    esp,0xd4
c001ab61:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001ab68:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001ab6c:	57                   	push   edi
c001ab6d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab74:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab7b:	e8 b6 fe ff ff       	call   c001aa36 <Reg::getLine(char*, char*, char*)>
c001ab80:	83 c4 10             	add    esp,0x10
c001ab83:	89 c6                	mov    esi,eax
c001ab85:	84 c0                	test   al,al
c001ab87:	74 44                	je     c001abcd <Reg::readString(char*, char*, char*, int)+0x75>
c001ab89:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001ab90:	31 c0                	xor    eax,eax
c001ab92:	4a                   	dec    edx
c001ab93:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001ab96:	84 c9                	test   cl,cl
c001ab98:	74 0f                	je     c001aba9 <Reg::readString(char*, char*, char*, int)+0x51>
c001ab9a:	39 c2                	cmp    edx,eax
c001ab9c:	7e 0b                	jle    c001aba9 <Reg::readString(char*, char*, char*, int)+0x51>
c001ab9e:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001aba1:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001aba6:	40                   	inc    eax
c001aba7:	eb ea                	jmp    c001ab93 <Reg::readString(char*, char*, char*, int)+0x3b>
c001aba9:	83 ec 0c             	sub    esp,0xc
c001abac:	53                   	push   ebx
c001abad:	e8 e2 5b fe ff       	call   c0000794 <strlen>
c001abb2:	83 c4 10             	add    esp,0x10
c001abb5:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001abba:	75 11                	jne    c001abcd <Reg::readString(char*, char*, char*, int)+0x75>
c001abbc:	83 ec 0c             	sub    esp,0xc
c001abbf:	53                   	push   ebx
c001abc0:	e8 cf 5b fe ff       	call   c0000794 <strlen>
c001abc5:	83 c4 10             	add    esp,0x10
c001abc8:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001abcd:	81 c4 d0 00 00 00    	add    esp,0xd0
c001abd3:	89 f0                	mov    eax,esi
c001abd5:	5b                   	pop    ebx
c001abd6:	5e                   	pop    esi
c001abd7:	5f                   	pop    edi
c001abd8:	c3                   	ret    

c001abd9 <Reg::readBool(char*, char*, bool*)>:
c001abd9:	83 ec 20             	sub    esp,0x20
c001abdc:	8d 44 24 10          	lea    eax,[esp+0x10]
c001abe0:	50                   	push   eax
c001abe1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abe5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abe9:	e8 7f fe ff ff       	call   c001aa6d <Reg::readInt(char*, char*, int*)>
c001abee:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001abf3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001abf7:	0f 95 02             	setne  BYTE PTR [edx]
c001abfa:	83 c4 2c             	add    esp,0x2c
c001abfd:	c3                   	ret    

c001abfe <Reg::readBoolWithDefault(char*, char*, bool)>:
c001abfe:	53                   	push   ebx
c001abff:	83 ec 1c             	sub    esp,0x1c
c001ac02:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001ac06:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ac0a:	50                   	push   eax
c001ac0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac13:	e8 c1 ff ff ff       	call   c001abd9 <Reg::readBool(char*, char*, bool*)>
c001ac18:	83 c4 10             	add    esp,0x10
c001ac1b:	84 c0                	test   al,al
c001ac1d:	74 04                	je     c001ac23 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001ac1f:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001ac23:	88 d8                	mov    al,bl
c001ac25:	83 c4 18             	add    esp,0x18
c001ac28:	5b                   	pop    ebx
c001ac29:	c3                   	ret    

c001ac2a <Reg::readIntWithDefault(char*, char*, int)>:
c001ac2a:	53                   	push   ebx
c001ac2b:	83 ec 1c             	sub    esp,0x1c
c001ac2e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ac32:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ac36:	50                   	push   eax
c001ac37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac3f:	e8 29 fe ff ff       	call   c001aa6d <Reg::readInt(char*, char*, int*)>
c001ac44:	83 c4 10             	add    esp,0x10
c001ac47:	84 c0                	test   al,al
c001ac49:	74 04                	je     c001ac4f <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001ac4b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ac4f:	89 d8                	mov    eax,ebx
c001ac51:	83 c4 18             	add    esp,0x18
c001ac54:	5b                   	pop    ebx
c001ac55:	c3                   	ret    

c001ac56 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001ac56:	57                   	push   edi
c001ac57:	56                   	push   esi
c001ac58:	53                   	push   ebx
c001ac59:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ac5d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ac61:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ac65:	56                   	push   esi
c001ac66:	53                   	push   ebx
c001ac67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac6f:	e8 e4 fe ff ff       	call   c001ab58 <Reg::readString(char*, char*, char*, int)>
c001ac74:	83 c4 10             	add    esp,0x10
c001ac77:	84 c0                	test   al,al
c001ac79:	75 1b                	jne    c001ac96 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001ac7b:	50                   	push   eax
c001ac7c:	56                   	push   esi
c001ac7d:	4e                   	dec    esi
c001ac7e:	6a 00                	push   0x0
c001ac80:	53                   	push   ebx
c001ac81:	e8 f2 5a fe ff       	call   c0000778 <memset>
c001ac86:	83 c4 0c             	add    esp,0xc
c001ac89:	56                   	push   esi
c001ac8a:	57                   	push   edi
c001ac8b:	53                   	push   ebx
c001ac8c:	89 fb                	mov    ebx,edi
c001ac8e:	e8 b1 5a fe ff       	call   c0000744 <memcpy>
c001ac93:	83 c4 10             	add    esp,0x10
c001ac96:	89 d8                	mov    eax,ebx
c001ac98:	5b                   	pop    ebx
c001ac99:	5e                   	pop    esi
c001ac9a:	5f                   	pop    edi
c001ac9b:	c3                   	ret    

c001ac9c <Sys::eject(regs*)>:
c001ac9c:	83 ec 0c             	sub    esp,0xc
c001ac9f:	83 ca ff             	or     edx,0xffffffff
c001aca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aca6:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001aca9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001acae:	83 e9 41             	sub    ecx,0x41
c001acb1:	83 f9 19             	cmp    ecx,0x19
c001acb4:	77 18                	ja     c001acce <Sys::eject(regs*)+0x32>
c001acb6:	8b 0c 8d a0 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1e60]
c001acbd:	85 c9                	test   ecx,ecx
c001acbf:	74 0d                	je     c001acce <Sys::eject(regs*)+0x32>
c001acc1:	83 ec 0c             	sub    esp,0xc
c001acc4:	51                   	push   ecx
c001acc5:	e8 9e b5 ff ff       	call   c0016268 <LogicalDisk::eject()>
c001acca:	83 c4 10             	add    esp,0x10
c001accd:	99                   	cdq    
c001acce:	83 c4 0c             	add    esp,0xc
c001acd1:	c3                   	ret    

c001acd2 <Sys::exit(regs*)>:
c001acd2:	83 ec 18             	sub    esp,0x18
c001acd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001acd9:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001acdc:	e8 2e 34 00 00       	call   c001e10f <terminateTask(int)>
c001ace1:	83 c8 ff             	or     eax,0xffffffff
c001ace4:	83 c4 1c             	add    esp,0x1c
c001ace7:	89 c2                	mov    edx,eax
c001ace9:	c3                   	ret    

c001acea <Sys::getCwd(regs*)>:
c001acea:	83 ec 10             	sub    esp,0x10
c001aced:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acf1:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001acf4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001acf7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acfc:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001acff:	e8 6c 81 ff ff       	call   c0012e70 <Fs::getcwd(Process*, char*, int)>
c001ad04:	83 c4 1c             	add    esp,0x1c
c001ad07:	99                   	cdq    
c001ad08:	c3                   	ret    

c001ad09 <Sys::getPID(regs*)>:
c001ad09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad0e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ad11:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad13:	99                   	cdq    
c001ad14:	c3                   	ret    

c001ad15 <Sys::loadDLL(regs*)>:
c001ad15:	56                   	push   esi
c001ad16:	53                   	push   ebx
c001ad17:	31 d2                	xor    edx,edx
c001ad19:	51                   	push   ecx
c001ad1a:	b8 01 00 00 00       	mov    eax,0x1
c001ad1f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ad23:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001ad27:	0f 84 8c 00 00 00    	je     c001adb9 <Sys::loadDLL(regs*)+0xa4>
c001ad2d:	83 ec 0c             	sub    esp,0xc
c001ad30:	68 14 01 00 00       	push   0x114
c001ad35:	e8 0c 4b ff ff       	call   c000f846 <malloc>
c001ad3a:	83 c4 0c             	add    esp,0xc
c001ad3d:	89 c3                	mov    ebx,eax
c001ad3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad44:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad47:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ad4a:	53                   	push   ebx
c001ad4b:	e8 1e 83 ff ff       	call   c001306e <File::File(char const*, Process*)>
c001ad50:	83 c4 10             	add    esp,0x10
c001ad53:	31 d2                	xor    edx,edx
c001ad55:	b8 02 00 00 00       	mov    eax,0x2
c001ad5a:	85 db                	test   ebx,ebx
c001ad5c:	74 5b                	je     c001adb9 <Sys::loadDLL(regs*)+0xa4>
c001ad5e:	83 ec 0c             	sub    esp,0xc
c001ad61:	53                   	push   ebx
c001ad62:	e8 d9 85 ff ff       	call   c0013340 <File::exists()>
c001ad67:	83 c4 10             	add    esp,0x10
c001ad6a:	84 c0                	test   al,al
c001ad6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad6e:	75 11                	jne    c001ad81 <Sys::loadDLL(regs*)+0x6c>
c001ad70:	83 ec 0c             	sub    esp,0xc
c001ad73:	53                   	push   ebx
c001ad74:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ad77:	83 c4 10             	add    esp,0x10
c001ad7a:	b8 03 00 00 00       	mov    eax,0x3
c001ad7f:	eb 36                	jmp    c001adb7 <Sys::loadDLL(regs*)+0xa2>
c001ad81:	83 ec 0c             	sub    esp,0xc
c001ad84:	53                   	push   ebx
c001ad85:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ad88:	58                   	pop    eax
c001ad89:	5a                   	pop    edx
c001ad8a:	6a 00                	push   0x0
c001ad8c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ad8f:	e8 91 22 00 00       	call   c001d025 <Thr::loadDLL(char const*, bool)>
c001ad94:	83 c4 10             	add    esp,0x10
c001ad97:	89 c1                	mov    ecx,eax
c001ad99:	31 d2                	xor    edx,edx
c001ad9b:	b8 04 00 00 00       	mov    eax,0x4
c001ada0:	85 c9                	test   ecx,ecx
c001ada2:	74 15                	je     c001adb9 <Sys::loadDLL(regs*)+0xa4>
c001ada4:	53                   	push   ebx
c001ada5:	53                   	push   ebx
c001ada6:	ff 35 88 db 02 c0    	push   DWORD PTR ds:0xc002db88
c001adac:	51                   	push   ecx
c001adad:	e8 a7 24 00 00       	call   c001d259 <Thr::executeDLL(unsigned long, void*)>
c001adb2:	83 c4 10             	add    esp,0x10
c001adb5:	31 c0                	xor    eax,eax
c001adb7:	31 d2                	xor    edx,edx
c001adb9:	59                   	pop    ecx
c001adba:	5b                   	pop    ebx
c001adbb:	5e                   	pop    esi
c001adbc:	c3                   	ret    

c001adbd <Sys::read(regs*)>:
c001adbd:	57                   	push   edi
c001adbe:	56                   	push   esi
c001adbf:	53                   	push   ebx
c001adc0:	83 ec 10             	sub    esp,0x10
c001adc3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001adc7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001adca:	83 f8 02             	cmp    eax,0x2
c001adcd:	77 10                	ja     c001addf <Sys::read(regs*)+0x22>
c001adcf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001add4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001add7:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001addd:	eb 0e                	jmp    c001aded <Sys::read(regs*)+0x30>
c001addf:	83 ec 0c             	sub    esp,0xc
c001ade2:	50                   	push   eax
c001ade3:	e8 e7 6b ff ff       	call   c00119cf <getFromFileDescriptor(int)>
c001ade8:	83 c4 10             	add    esp,0x10
c001adeb:	89 c1                	mov    ecx,eax
c001aded:	83 c8 ff             	or     eax,0xffffffff
c001adf0:	85 c9                	test   ecx,ecx
c001adf2:	89 c2                	mov    edx,eax
c001adf4:	74 28                	je     c001ae1e <Sys::read(regs*)+0x61>
c001adf6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001adfe:	31 ff                	xor    edi,edi
c001ae00:	83 ec 0c             	sub    esp,0xc
c001ae03:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae05:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ae09:	52                   	push   edx
c001ae0a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ae0d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ae10:	57                   	push   edi
c001ae11:	56                   	push   esi
c001ae12:	51                   	push   ecx
c001ae13:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae1a:	83 c4 20             	add    esp,0x20
c001ae1d:	99                   	cdq    
c001ae1e:	83 c4 10             	add    esp,0x10
c001ae21:	5b                   	pop    ebx
c001ae22:	5e                   	pop    esi
c001ae23:	5f                   	pop    edi
c001ae24:	c3                   	ret    

c001ae25 <Sys::sbrk(regs*)>:
c001ae25:	56                   	push   esi
c001ae26:	53                   	push   ebx
c001ae27:	50                   	push   eax
c001ae28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae2d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae31:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae34:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001ae37:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001ae3d:	85 db                	test   ebx,ebx
c001ae3f:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001ae42:	74 02                	je     c001ae46 <Sys::sbrk(regs*)+0x21>
c001ae44:	79 06                	jns    c001ae4c <Sys::sbrk(regs*)+0x27>
c001ae46:	89 f0                	mov    eax,esi
c001ae48:	31 d2                	xor    edx,edx
c001ae4a:	eb 2a                	jmp    c001ae76 <Sys::sbrk(regs*)+0x51>
c001ae4c:	83 c8 ff             	or     eax,0xffffffff
c001ae4f:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001ae55:	89 c2                	mov    edx,eax
c001ae57:	77 1d                	ja     c001ae76 <Sys::sbrk(regs*)+0x51>
c001ae59:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001ae5f:	50                   	push   eax
c001ae60:	c1 ea 0c             	shr    edx,0xc
c001ae63:	68 07 04 00 00       	push   0x407
c001ae68:	52                   	push   edx
c001ae69:	51                   	push   ecx
c001ae6a:	e8 81 74 ff ff       	call   c00122f0 <VAS::allocatePages(int, int)>
c001ae6f:	89 f0                	mov    eax,esi
c001ae71:	31 d2                	xor    edx,edx
c001ae73:	83 c4 10             	add    esp,0x10
c001ae76:	59                   	pop    ecx
c001ae77:	5b                   	pop    ebx
c001ae78:	5e                   	pop    esi
c001ae79:	c3                   	ret    

c001ae7a <Sys::setCwd(regs*)>:
c001ae7a:	83 ec 14             	sub    esp,0x14
c001ae7d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ae81:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ae84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae89:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae8c:	e8 4e 85 ff ff       	call   c00133df <Fs::setcwd(Process*, char*)>
c001ae91:	83 c4 1c             	add    esp,0x1c
c001ae94:	99                   	cdq    
c001ae95:	c3                   	ret    

c001ae96 <Sys::setTime(regs*)>:
c001ae96:	55                   	push   ebp
c001ae97:	31 d2                	xor    edx,edx
c001ae99:	57                   	push   edi
c001ae9a:	bf 18 00 00 00       	mov    edi,0x18
c001ae9f:	56                   	push   esi
c001aea0:	53                   	push   ebx
c001aea1:	bb 3c 00 00 00       	mov    ebx,0x3c
c001aea6:	83 ec 30             	sub    esp,0x30
c001aea9:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001aead:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001aeb0:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001aeb3:	f7 f3                	div    ebx
c001aeb5:	89 d6                	mov    esi,edx
c001aeb7:	31 d2                	xor    edx,edx
c001aeb9:	f7 f3                	div    ebx
c001aebb:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001aebe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001aec2:	bb 10 0e 00 00       	mov    ebx,0xe10
c001aec7:	31 d2                	xor    edx,edx
c001aec9:	f7 f3                	div    ebx
c001aecb:	31 d2                	xor    edx,edx
c001aecd:	bb 0c 00 00 00       	mov    ebx,0xc
c001aed2:	f7 f7                	div    edi
c001aed4:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001aed7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001aedb:	0f b7 cd             	movzx  ecx,bp
c001aede:	56                   	push   esi
c001aedf:	89 c7                	mov    edi,eax
c001aee1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001aee5:	c1 e6 10             	shl    esi,0x10
c001aee8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aeec:	83 e7 1f             	and    edi,0x1f
c001aeef:	51                   	push   ecx
c001aef0:	47                   	inc    edi
c001aef1:	c1 e8 05             	shr    eax,0x5
c001aef4:	31 d2                	xor    edx,edx
c001aef6:	f7 f3                	div    ebx
c001aef8:	31 db                	xor    ebx,ebx
c001aefa:	52                   	push   edx
c001aefb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001aeff:	57                   	push   edi
c001af00:	68 69 b5 02 c0       	push   0xc002b569
c001af05:	e8 0b 7c ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001af0a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001af0e:	89 f8                	mov    eax,edi
c001af10:	31 c9                	xor    ecx,ecx
c001af12:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001af16:	88 c1                	mov    cl,al
c001af18:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001af1e:	88 d5                	mov    ch,dl
c001af20:	c1 e0 10             	shl    eax,0x10
c001af23:	0f b7 d1             	movzx  edx,cx
c001af26:	09 c2                	or     edx,eax
c001af28:	89 d8                	mov    eax,ebx
c001af2a:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001af2f:	09 f0                	or     eax,esi
c001af31:	89 c3                	mov    ebx,eax
c001af33:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001af37:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001af3b:	83 c4 18             	add    esp,0x18
c001af3e:	53                   	push   ebx
c001af3f:	52                   	push   edx
c001af40:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001af44:	8d 74 24 28          	lea    esi,[esp+0x28]
c001af48:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001af4c:	e8 a8 8b ff ff       	call   c0013af9 <datetimeToSeconds(datetime_t)>
c001af51:	83 c4 0c             	add    esp,0xc
c001af54:	52                   	push   edx
c001af55:	50                   	push   eax
c001af56:	56                   	push   esi
c001af57:	e8 24 8d ff ff       	call   c0013c80 <secondsToDatetime(unsigned long long)>
c001af5c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af60:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001af64:	51                   	push   ecx
c001af65:	89 d6                	mov    esi,edx
c001af67:	51                   	push   ecx
c001af68:	c1 ee 10             	shr    esi,0x10
c001af6b:	89 f3                	mov    ebx,esi
c001af6d:	0f b6 f3             	movzx  esi,bl
c001af70:	56                   	push   esi
c001af71:	0f b6 f6             	movzx  esi,dh
c001af74:	0f b6 d2             	movzx  edx,dl
c001af77:	56                   	push   esi
c001af78:	52                   	push   edx
c001af79:	89 c2                	mov    edx,eax
c001af7b:	c1 ea 10             	shr    edx,0x10
c001af7e:	52                   	push   edx
c001af7f:	0f b6 d4             	movzx  edx,ah
c001af82:	0f b6 c0             	movzx  eax,al
c001af85:	52                   	push   edx
c001af86:	50                   	push   eax
c001af87:	68 85 b5 02 c0       	push   0xc002b585
c001af8c:	e8 84 7b ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001af91:	83 c4 2c             	add    esp,0x2c
c001af94:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c001af99:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001af9d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001afa1:	53                   	push   ebx
c001afa2:	51                   	push   ecx
c001afa3:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001afa9:	e8 72 8c ff ff       	call   c0013c20 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001afae:	83 f0 01             	xor    eax,0x1
c001afb1:	31 d2                	xor    edx,edx
c001afb3:	0f b6 c0             	movzx  eax,al
c001afb6:	83 c4 3c             	add    esp,0x3c
c001afb9:	5b                   	pop    ebx
c001afba:	5e                   	pop    esi
c001afbb:	5f                   	pop    edi
c001afbc:	5d                   	pop    ebp
c001afbd:	c3                   	ret    

c001afbe <Sys::timezone(regs*)>:
c001afbe:	53                   	push   ebx
c001afbf:	83 ec 08             	sub    esp,0x8
c001afc2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afc6:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001afca:	75 17                	jne    c001afe3 <Sys::timezone(regs*)+0x25>
c001afcc:	83 ec 0c             	sub    esp,0xc
c001afcf:	68 a1 b5 02 c0       	push   0xc002b5a1
c001afd4:	e8 3c 7b ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001afd9:	83 c8 ff             	or     eax,0xffffffff
c001afdc:	83 c4 10             	add    esp,0x10
c001afdf:	89 c2                	mov    edx,eax
c001afe1:	eb 20                	jmp    c001b003 <Sys::timezone(regs*)+0x45>
c001afe3:	83 ec 0c             	sub    esp,0xc
c001afe6:	68 d9 b5 02 c0       	push   0xc002b5d9
c001afeb:	e8 25 7b ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001aff0:	58                   	pop    eax
c001aff1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001aff4:	e8 89 89 ff ff       	call   c0013982 <User::loadClockSettings(int)>
c001aff9:	83 c4 10             	add    esp,0x10
c001affc:	b8 01 00 00 00       	mov    eax,0x1
c001b001:	31 d2                	xor    edx,edx
c001b003:	83 c4 08             	add    esp,0x8
c001b006:	5b                   	pop    ebx
c001b007:	c3                   	ret    

c001b008 <Sys::write(regs*)>:
c001b008:	57                   	push   edi
c001b009:	56                   	push   esi
c001b00a:	53                   	push   ebx
c001b00b:	83 ec 10             	sub    esp,0x10
c001b00e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b012:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b015:	83 f8 02             	cmp    eax,0x2
c001b018:	77 10                	ja     c001b02a <Sys::write(regs*)+0x22>
c001b01a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b01f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b022:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b028:	eb 0e                	jmp    c001b038 <Sys::write(regs*)+0x30>
c001b02a:	83 ec 0c             	sub    esp,0xc
c001b02d:	50                   	push   eax
c001b02e:	e8 9c 69 ff ff       	call   c00119cf <getFromFileDescriptor(int)>
c001b033:	83 c4 10             	add    esp,0x10
c001b036:	89 c1                	mov    ecx,eax
c001b038:	83 c8 ff             	or     eax,0xffffffff
c001b03b:	85 c9                	test   ecx,ecx
c001b03d:	89 c2                	mov    edx,eax
c001b03f:	74 28                	je     c001b069 <Sys::write(regs*)+0x61>
c001b041:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b049:	31 ff                	xor    edi,edi
c001b04b:	83 ec 0c             	sub    esp,0xc
c001b04e:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b050:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b054:	52                   	push   edx
c001b055:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b058:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b05b:	57                   	push   edi
c001b05c:	56                   	push   esi
c001b05d:	51                   	push   ecx
c001b05e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b061:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b065:	83 c4 20             	add    esp,0x20
c001b068:	99                   	cdq    
c001b069:	83 c4 10             	add    esp,0x10
c001b06c:	5b                   	pop    ebx
c001b06d:	5e                   	pop    esi
c001b06e:	5f                   	pop    edi
c001b06f:	c3                   	ret    

c001b070 <Sys::yield(regs*)>:
c001b070:	57                   	push   edi
c001b071:	56                   	push   esi
c001b072:	53                   	push   ebx
c001b073:	e8 54 26 00 00       	call   c001d6cc <lockScheduler()>
c001b078:	e8 8b 29 00 00       	call   c001da08 <schedule()>
c001b07d:	e8 4c 26 00 00       	call   c001d6ce <unlockScheduler()>
c001b082:	8b 35 10 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e210
c001b088:	8b 3d 14 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e214
c001b08e:	89 f0                	mov    eax,esi
c001b090:	89 fb                	mov    ebx,edi
c001b092:	89 f1                	mov    ecx,esi
c001b094:	c1 e0 07             	shl    eax,0x7
c001b097:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b09b:	25 80 30 0f 00       	and    eax,0xf3080
c001b0a0:	c1 eb 17             	shr    ebx,0x17
c001b0a3:	31 c8                	xor    eax,ecx
c001b0a5:	89 da                	mov    edx,ebx
c001b0a7:	5b                   	pop    ebx
c001b0a8:	5e                   	pop    esi
c001b0a9:	5f                   	pop    edi
c001b0aa:	c3                   	ret    

c001b0ab <sysCallSeekDir(regs*)>:
c001b0ab:	31 c0                	xor    eax,eax
c001b0ad:	31 d2                	xor    edx,edx
c001b0af:	c3                   	ret    

c001b0b0 <sysCallTellDir(regs*)>:
c001b0b0:	31 c0                	xor    eax,eax
c001b0b2:	31 d2                	xor    edx,edx
c001b0b4:	c3                   	ret    

c001b0b5 <sysCallVerify(regs*)>:
c001b0b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0b9:	31 d2                	xor    edx,edx
c001b0bb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b0be:	c3                   	ret    

c001b0bf <sysCallGetArgc(regs*)>:
c001b0bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b0c7:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b0cd:	99                   	cdq    
c001b0ce:	c3                   	ret    

c001b0cf <sysFormatDisk(regs*)>:
c001b0cf:	56                   	push   esi
c001b0d0:	53                   	push   ebx
c001b0d1:	53                   	push   ebx
c001b0d2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b0d6:	8b 1d 08 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd08
c001b0dc:	eb 25                	jmp    c001b103 <sysFormatDisk(regs*)+0x34>
c001b0de:	83 ec 0c             	sub    esp,0xc
c001b0e1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b0e4:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b0e6:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b0e9:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b0ec:	50                   	push   eax
c001b0ed:	ff 34 85 a0 e1 02 c0 	push   DWORD PTR [eax*4-0x3ffd1e60]
c001b0f4:	53                   	push   ebx
c001b0f5:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b0f8:	83 c4 20             	add    esp,0x20
c001b0fb:	83 f8 08             	cmp    eax,0x8
c001b0fe:	75 12                	jne    c001b112 <sysFormatDisk(regs*)+0x43>
c001b100:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b103:	85 db                	test   ebx,ebx
c001b105:	75 d7                	jne    c001b0de <sysFormatDisk(regs*)+0xf>
c001b107:	59                   	pop    ecx
c001b108:	b8 03 00 00 00       	mov    eax,0x3
c001b10d:	31 d2                	xor    edx,edx
c001b10f:	5b                   	pop    ebx
c001b110:	5e                   	pop    esi
c001b111:	c3                   	ret    
c001b112:	85 c0                	test   eax,eax
c001b114:	74 1b                	je     c001b131 <sysFormatDisk(regs*)+0x62>
c001b116:	83 f8 09             	cmp    eax,0x9
c001b119:	74 0b                	je     c001b126 <sysFormatDisk(regs*)+0x57>
c001b11b:	59                   	pop    ecx
c001b11c:	b8 02 00 00 00       	mov    eax,0x2
c001b121:	31 d2                	xor    edx,edx
c001b123:	5b                   	pop    ebx
c001b124:	5e                   	pop    esi
c001b125:	c3                   	ret    
c001b126:	59                   	pop    ecx
c001b127:	b8 01 00 00 00       	mov    eax,0x1
c001b12c:	31 d2                	xor    edx,edx
c001b12e:	5b                   	pop    ebx
c001b12f:	5e                   	pop    esi
c001b130:	c3                   	ret    
c001b131:	59                   	pop    ecx
c001b132:	31 c0                	xor    eax,eax
c001b134:	31 d2                	xor    edx,edx
c001b136:	5b                   	pop    ebx
c001b137:	5e                   	pop    esi
c001b138:	c3                   	ret    

c001b139 <sysSetDiskVolumeLabel(regs*)>:
c001b139:	56                   	push   esi
c001b13a:	53                   	push   ebx
c001b13b:	53                   	push   ebx
c001b13c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b140:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b143:	83 f8 19             	cmp    eax,0x19
c001b146:	77 29                	ja     c001b171 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b148:	8b 0c 85 a0 e1 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1e60]
c001b14f:	85 c9                	test   ecx,ecx
c001b151:	74 1e                	je     c001b171 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b153:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b156:	85 d2                	test   edx,edx
c001b158:	74 17                	je     c001b171 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b15a:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b160:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b162:	52                   	push   edx
c001b163:	50                   	push   eax
c001b164:	51                   	push   ecx
c001b165:	53                   	push   ebx
c001b166:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b169:	83 c4 10             	add    esp,0x10
c001b16c:	99                   	cdq    
c001b16d:	59                   	pop    ecx
c001b16e:	5b                   	pop    ebx
c001b16f:	5e                   	pop    esi
c001b170:	c3                   	ret    
c001b171:	59                   	pop    ecx
c001b172:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b177:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b17c:	5b                   	pop    ebx
c001b17d:	5e                   	pop    esi
c001b17e:	c3                   	ret    

c001b17f <sysGetDiskVolumeLabel(regs*)>:
c001b17f:	57                   	push   edi
c001b180:	56                   	push   esi
c001b181:	53                   	push   ebx
c001b182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b186:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b189:	83 fa 19             	cmp    edx,0x19
c001b18c:	77 34                	ja     c001b1c2 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b18e:	8b 0c 95 a0 e1 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1e60]
c001b195:	85 c9                	test   ecx,ecx
c001b197:	74 29                	je     c001b1c2 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b199:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b19c:	85 db                	test   ebx,ebx
c001b19e:	74 22                	je     c001b1c2 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1a0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b1a3:	85 c0                	test   eax,eax
c001b1a5:	74 1b                	je     c001b1c2 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1a7:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b1ad:	83 ec 0c             	sub    esp,0xc
c001b1b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b1b2:	50                   	push   eax
c001b1b3:	53                   	push   ebx
c001b1b4:	52                   	push   edx
c001b1b5:	51                   	push   ecx
c001b1b6:	56                   	push   esi
c001b1b7:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b1ba:	83 c4 20             	add    esp,0x20
c001b1bd:	99                   	cdq    
c001b1be:	5b                   	pop    ebx
c001b1bf:	5e                   	pop    esi
c001b1c0:	5f                   	pop    edi
c001b1c1:	c3                   	ret    
c001b1c2:	5b                   	pop    ebx
c001b1c3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b1c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1cd:	5e                   	pop    esi
c001b1ce:	5f                   	pop    edi
c001b1cf:	c3                   	ret    

c001b1d0 <sysShutdown(regs*)>:
c001b1d0:	83 ec 0c             	sub    esp,0xc
c001b1d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1d7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b1da:	85 c0                	test   eax,eax
c001b1dc:	74 18                	je     c001b1f6 <sysShutdown(regs*)+0x26>
c001b1de:	83 f8 01             	cmp    eax,0x1
c001b1e1:	74 38                	je     c001b21b <sysShutdown(regs*)+0x4b>
c001b1e3:	83 f8 02             	cmp    eax,0x2
c001b1e6:	74 24                	je     c001b20c <sysShutdown(regs*)+0x3c>
c001b1e8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b1ed:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1f2:	83 c4 0c             	add    esp,0xc
c001b1f5:	c3                   	ret    
c001b1f6:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c001b1fb:	8b 10                	mov    edx,DWORD PTR [eax]
c001b1fd:	6a 00                	push   0x0
c001b1ff:	6a 00                	push   0x0
c001b201:	6a 00                	push   0x0
c001b203:	50                   	push   eax
c001b204:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b207:	83 c4 10             	add    esp,0x10
c001b20a:	eb dc                	jmp    c001b1e8 <sysShutdown(regs*)+0x18>
c001b20c:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c001b211:	8b 10                	mov    edx,DWORD PTR [eax]
c001b213:	6a 00                	push   0x0
c001b215:	6a 00                	push   0x0
c001b217:	6a 01                	push   0x1
c001b219:	eb e8                	jmp    c001b203 <sysShutdown(regs*)+0x33>
c001b21b:	a1 40 02 03 c0       	mov    eax,ds:0xc0030240
c001b220:	85 c0                	test   eax,eax
c001b222:	74 02                	je     c001b226 <sysShutdown(regs*)+0x56>
c001b224:	ff d0                	call   eax
c001b226:	31 c0                	xor    eax,eax
c001b228:	31 d2                	xor    edx,edx
c001b22a:	83 c4 0c             	add    esp,0xc
c001b22d:	c3                   	ret    

c001b22e <sysCallRealpath(regs*)>:
c001b22e:	83 ec 0c             	sub    esp,0xc
c001b231:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b235:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b238:	85 d2                	test   edx,edx
c001b23a:	74 07                	je     c001b243 <sysCallRealpath(regs*)+0x15>
c001b23c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b23f:	85 c0                	test   eax,eax
c001b241:	75 0b                	jne    c001b24e <sysCallRealpath(regs*)+0x20>
c001b243:	b8 01 00 00 00       	mov    eax,0x1
c001b248:	31 d2                	xor    edx,edx
c001b24a:	83 c4 0c             	add    esp,0xc
c001b24d:	c3                   	ret    
c001b24e:	51                   	push   ecx
c001b24f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b255:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b258:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b25e:	51                   	push   ecx
c001b25f:	52                   	push   edx
c001b260:	50                   	push   eax
c001b261:	e8 5e 7c ff ff       	call   c0012ec4 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b266:	83 c4 10             	add    esp,0x10
c001b269:	31 c0                	xor    eax,eax
c001b26b:	31 d2                	xor    edx,edx
c001b26d:	83 c4 0c             	add    esp,0xc
c001b270:	c3                   	ret    

c001b271 <sysCallReadDir(regs*)>:
c001b271:	53                   	push   ebx
c001b272:	83 ec 18             	sub    esp,0x18
c001b275:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b279:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b27c:	83 f8 02             	cmp    eax,0x2
c001b27f:	76 53                	jbe    c001b2d4 <sysCallReadDir(regs*)+0x63>
c001b281:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b284:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b28a:	77 4f                	ja     c001b2db <sysCallReadDir(regs*)+0x6a>
c001b28c:	83 ec 0c             	sub    esp,0xc
c001b28f:	50                   	push   eax
c001b290:	e8 3a 67 ff ff       	call   c00119cf <getFromFileDescriptor(int)>
c001b295:	83 c4 10             	add    esp,0x10
c001b298:	85 c0                	test   eax,eax
c001b29a:	74 50                	je     c001b2ec <sysCallReadDir(regs*)+0x7b>
c001b29c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b2a4:	83 ec 0c             	sub    esp,0xc
c001b2a7:	8b 10                	mov    edx,DWORD PTR [eax]
c001b2a9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b2ad:	51                   	push   ecx
c001b2ae:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b2b1:	6a 00                	push   0x0
c001b2b3:	68 10 01 00 00       	push   0x110
c001b2b8:	50                   	push   eax
c001b2b9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b2bc:	83 c4 20             	add    esp,0x20
c001b2bf:	85 c0                	test   eax,eax
c001b2c1:	74 38                	je     c001b2fb <sysCallReadDir(regs*)+0x8a>
c001b2c3:	83 f8 07             	cmp    eax,0x7
c001b2c6:	74 0c                	je     c001b2d4 <sysCallReadDir(regs*)+0x63>
c001b2c8:	b8 02 00 00 00       	mov    eax,0x2
c001b2cd:	31 d2                	xor    edx,edx
c001b2cf:	83 c4 18             	add    esp,0x18
c001b2d2:	5b                   	pop    ebx
c001b2d3:	c3                   	ret    
c001b2d4:	b8 01 00 00 00       	mov    eax,0x1
c001b2d9:	eb f2                	jmp    c001b2cd <sysCallReadDir(regs*)+0x5c>
c001b2db:	83 ec 08             	sub    esp,0x8
c001b2de:	52                   	push   edx
c001b2df:	68 18 b6 02 c0       	push   0xc002b618
c001b2e4:	e8 2c 78 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001b2e9:	83 c4 10             	add    esp,0x10
c001b2ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2f1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2f6:	83 c4 18             	add    esp,0x18
c001b2f9:	5b                   	pop    ebx
c001b2fa:	c3                   	ret    
c001b2fb:	31 c0                	xor    eax,eax
c001b2fd:	eb ce                	jmp    c001b2cd <sysCallReadDir(regs*)+0x5c>

c001b2ff <sysCallIsATTY(regs*)>:
c001b2ff:	83 ec 0c             	sub    esp,0xc
c001b302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b306:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b309:	83 f8 02             	cmp    eax,0x2
c001b30c:	76 07                	jbe    c001b315 <sysCallIsATTY(regs*)+0x16>
c001b30e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b313:	75 26                	jne    c001b33b <sysCallIsATTY(regs*)+0x3c>
c001b315:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b31a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b31d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b323:	85 c0                	test   eax,eax
c001b325:	74 24                	je     c001b34b <sysCallIsATTY(regs*)+0x4c>
c001b327:	83 ec 0c             	sub    esp,0xc
c001b32a:	8b 10                	mov    edx,DWORD PTR [eax]
c001b32c:	50                   	push   eax
c001b32d:	ff 12                	call   DWORD PTR [edx]
c001b32f:	31 d2                	xor    edx,edx
c001b331:	0f b6 c0             	movzx  eax,al
c001b334:	83 c4 10             	add    esp,0x10
c001b337:	83 c4 0c             	add    esp,0xc
c001b33a:	c3                   	ret    
c001b33b:	83 ec 0c             	sub    esp,0xc
c001b33e:	50                   	push   eax
c001b33f:	e8 8b 66 ff ff       	call   c00119cf <getFromFileDescriptor(int)>
c001b344:	83 c4 10             	add    esp,0x10
c001b347:	85 c0                	test   eax,eax
c001b349:	75 dc                	jne    c001b327 <sysCallIsATTY(regs*)+0x28>
c001b34b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b350:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b355:	83 c4 0c             	add    esp,0xc
c001b358:	c3                   	ret    

c001b359 <sysCallSeek(regs*)>:
c001b359:	53                   	push   ebx
c001b35a:	83 ec 08             	sub    esp,0x8
c001b35d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b361:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b364:	83 f8 02             	cmp    eax,0x2
c001b367:	76 4a                	jbe    c001b3b3 <sysCallSeek(regs*)+0x5a>
c001b369:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b36e:	77 32                	ja     c001b3a2 <sysCallSeek(regs*)+0x49>
c001b370:	83 ec 0c             	sub    esp,0xc
c001b373:	50                   	push   eax
c001b374:	e8 56 66 ff ff       	call   c00119cf <getFromFileDescriptor(int)>
c001b379:	83 c4 0c             	add    esp,0xc
c001b37c:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b37f:	31 db                	xor    ebx,ebx
c001b381:	53                   	push   ebx
c001b382:	51                   	push   ecx
c001b383:	50                   	push   eax
c001b384:	e8 07 7e ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001b389:	83 c4 10             	add    esp,0x10
c001b38c:	85 c0                	test   eax,eax
c001b38e:	0f 95 c0             	setne  al
c001b391:	31 d2                	xor    edx,edx
c001b393:	0f b6 c0             	movzx  eax,al
c001b396:	f7 d8                	neg    eax
c001b398:	83 d2 00             	adc    edx,0x0
c001b39b:	83 c4 08             	add    esp,0x8
c001b39e:	f7 da                	neg    edx
c001b3a0:	5b                   	pop    ebx
c001b3a1:	c3                   	ret    
c001b3a2:	83 ec 08             	sub    esp,0x8
c001b3a5:	50                   	push   eax
c001b3a6:	68 87 b6 02 c0       	push   0xc002b687
c001b3ab:	e8 65 77 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001b3b0:	83 c4 10             	add    esp,0x10
c001b3b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3b8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3bd:	83 c4 08             	add    esp,0x8
c001b3c0:	5b                   	pop    ebx
c001b3c1:	c3                   	ret    

c001b3c2 <sysCallTell(regs*)>:
c001b3c2:	53                   	push   ebx
c001b3c3:	83 ec 08             	sub    esp,0x8
c001b3c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b3ca:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3cd:	83 f8 02             	cmp    eax,0x2
c001b3d0:	76 5e                	jbe    c001b430 <sysCallTell(regs*)+0x6e>
c001b3d2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b3d7:	77 2d                	ja     c001b406 <sysCallTell(regs*)+0x44>
c001b3d9:	83 ec 0c             	sub    esp,0xc
c001b3dc:	50                   	push   eax
c001b3dd:	e8 ed 65 ff ff       	call   c00119cf <getFromFileDescriptor(int)>
c001b3e2:	5a                   	pop    edx
c001b3e3:	59                   	pop    ecx
c001b3e4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b3e7:	50                   	push   eax
c001b3e8:	e8 f9 7d ff ff       	call   c00131e6 <File::tell(unsigned long long*)>
c001b3ed:	83 c4 10             	add    esp,0x10
c001b3f0:	85 c0                	test   eax,eax
c001b3f2:	0f 95 c0             	setne  al
c001b3f5:	31 d2                	xor    edx,edx
c001b3f7:	0f b6 c0             	movzx  eax,al
c001b3fa:	f7 d8                	neg    eax
c001b3fc:	83 d2 00             	adc    edx,0x0
c001b3ff:	83 c4 08             	add    esp,0x8
c001b402:	f7 da                	neg    edx
c001b404:	5b                   	pop    ebx
c001b405:	c3                   	ret    
c001b406:	83 ec 08             	sub    esp,0x8
c001b409:	50                   	push   eax
c001b40a:	68 a1 b6 02 c0       	push   0xc002b6a1
c001b40f:	e8 01 77 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001b414:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b417:	83 c4 10             	add    esp,0x10
c001b41a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b420:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b427:	31 d2                	xor    edx,edx
c001b429:	31 c0                	xor    eax,eax
c001b42b:	83 c4 08             	add    esp,0x8
c001b42e:	5b                   	pop    ebx
c001b42f:	c3                   	ret    
c001b430:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b435:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b43a:	83 c4 08             	add    esp,0x8
c001b43d:	5b                   	pop    ebx
c001b43e:	c3                   	ret    

c001b43f <sysCallSize(regs*)>:
c001b43f:	53                   	push   ebx
c001b440:	83 ec 18             	sub    esp,0x18
c001b443:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b447:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b44a:	83 f8 02             	cmp    eax,0x2
c001b44d:	76 64                	jbe    c001b4b3 <sysCallSize(regs*)+0x74>
c001b44f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b454:	77 33                	ja     c001b489 <sysCallSize(regs*)+0x4a>
c001b456:	83 ec 0c             	sub    esp,0xc
c001b459:	50                   	push   eax
c001b45a:	e8 70 65 ff ff       	call   c00119cf <getFromFileDescriptor(int)>
c001b45f:	83 c4 0c             	add    esp,0xc
c001b462:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b466:	52                   	push   edx
c001b467:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b46a:	50                   	push   eax
c001b46b:	e8 0e 7f ff ff       	call   c001337e <File::stat(unsigned long long*, bool*)>
c001b470:	83 c4 10             	add    esp,0x10
c001b473:	85 c0                	test   eax,eax
c001b475:	0f 95 c0             	setne  al
c001b478:	31 d2                	xor    edx,edx
c001b47a:	0f b6 c0             	movzx  eax,al
c001b47d:	f7 d8                	neg    eax
c001b47f:	83 d2 00             	adc    edx,0x0
c001b482:	83 c4 18             	add    esp,0x18
c001b485:	f7 da                	neg    edx
c001b487:	5b                   	pop    ebx
c001b488:	c3                   	ret    
c001b489:	83 ec 08             	sub    esp,0x8
c001b48c:	50                   	push   eax
c001b48d:	68 bb b6 02 c0       	push   0xc002b6bb
c001b492:	e8 7e 76 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001b497:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b49a:	83 c4 10             	add    esp,0x10
c001b49d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b4a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b4aa:	31 d2                	xor    edx,edx
c001b4ac:	31 c0                	xor    eax,eax
c001b4ae:	83 c4 18             	add    esp,0x18
c001b4b1:	5b                   	pop    ebx
c001b4b2:	c3                   	ret    
c001b4b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4b8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4bd:	83 c4 18             	add    esp,0x18
c001b4c0:	5b                   	pop    ebx
c001b4c1:	c3                   	ret    

c001b4c2 <sysCallSizeFromFilename(regs*)>:
c001b4c2:	57                   	push   edi
c001b4c3:	56                   	push   esi
c001b4c4:	53                   	push   ebx
c001b4c5:	83 ec 20             	sub    esp,0x20
c001b4c8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b4cc:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001b4cf:	83 fb 02             	cmp    ebx,0x2
c001b4d2:	0f 86 99 00 00 00    	jbe    c001b571 <sysCallSizeFromFilename(regs*)+0xaf>
c001b4d8:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b4de:	77 65                	ja     c001b545 <sysCallSizeFromFilename(regs*)+0x83>
c001b4e0:	83 ec 0c             	sub    esp,0xc
c001b4e3:	68 14 01 00 00       	push   0x114
c001b4e8:	e8 59 43 ff ff       	call   c000f846 <malloc>
c001b4ed:	83 c4 0c             	add    esp,0xc
c001b4f0:	89 c6                	mov    esi,eax
c001b4f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4f7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4fa:	53                   	push   ebx
c001b4fb:	56                   	push   esi
c001b4fc:	e8 6d 7b ff ff       	call   c001306e <File::File(char const*, Process*)>
c001b501:	83 c4 0c             	add    esp,0xc
c001b504:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b508:	50                   	push   eax
c001b509:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001b50c:	56                   	push   esi
c001b50d:	e8 6c 7e ff ff       	call   c001337e <File::stat(unsigned long long*, bool*)>
c001b512:	83 c4 10             	add    esp,0x10
c001b515:	85 f6                	test   esi,esi
c001b517:	74 14                	je     c001b52d <sysCallSizeFromFilename(regs*)+0x6b>
c001b519:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b51d:	8b 16                	mov    edx,DWORD PTR [esi]
c001b51f:	83 ec 0c             	sub    esp,0xc
c001b522:	56                   	push   esi
c001b523:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b526:	83 c4 10             	add    esp,0x10
c001b529:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b52d:	85 c0                	test   eax,eax
c001b52f:	0f 95 c0             	setne  al
c001b532:	31 d2                	xor    edx,edx
c001b534:	0f b6 c0             	movzx  eax,al
c001b537:	f7 d8                	neg    eax
c001b539:	83 d2 00             	adc    edx,0x0
c001b53c:	83 c4 20             	add    esp,0x20
c001b53f:	f7 da                	neg    edx
c001b541:	5b                   	pop    ebx
c001b542:	5e                   	pop    esi
c001b543:	5f                   	pop    edi
c001b544:	c3                   	ret    
c001b545:	83 ec 08             	sub    esp,0x8
c001b548:	53                   	push   ebx
c001b549:	68 bb b6 02 c0       	push   0xc002b6bb
c001b54e:	e8 c2 75 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001b553:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001b556:	83 c4 10             	add    esp,0x10
c001b559:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b55f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b566:	31 d2                	xor    edx,edx
c001b568:	83 c4 20             	add    esp,0x20
c001b56b:	31 c0                	xor    eax,eax
c001b56d:	5b                   	pop    ebx
c001b56e:	5e                   	pop    esi
c001b56f:	5f                   	pop    edi
c001b570:	c3                   	ret    
c001b571:	83 c4 20             	add    esp,0x20
c001b574:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b579:	5b                   	pop    ebx
c001b57a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b57f:	5e                   	pop    esi
c001b580:	5f                   	pop    edi
c001b581:	c3                   	ret    

c001b582 <sysCallClose(regs*)>:
c001b582:	53                   	push   ebx
c001b583:	83 ec 08             	sub    esp,0x8
c001b586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b58a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b58d:	83 f8 02             	cmp    eax,0x2
c001b590:	76 50                	jbe    c001b5e2 <sysCallClose(regs*)+0x60>
c001b592:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b597:	74 58                	je     c001b5f1 <sysCallClose(regs*)+0x6f>
c001b599:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b59e:	74 60                	je     c001b600 <sysCallClose(regs*)+0x7e>
c001b5a0:	77 2f                	ja     c001b5d1 <sysCallClose(regs*)+0x4f>
c001b5a2:	83 ec 0c             	sub    esp,0xc
c001b5a5:	50                   	push   eax
c001b5a6:	e8 24 64 ff ff       	call   c00119cf <getFromFileDescriptor(int)>
c001b5ab:	89 c3                	mov    ebx,eax
c001b5ad:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5b0:	e8 7b 7b ff ff       	call   c0013130 <File::close()>
c001b5b5:	83 c4 10             	add    esp,0x10
c001b5b8:	85 db                	test   ebx,ebx
c001b5ba:	74 0c                	je     c001b5c8 <sysCallClose(regs*)+0x46>
c001b5bc:	83 ec 0c             	sub    esp,0xc
c001b5bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5c1:	53                   	push   ebx
c001b5c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b5c5:	83 c4 10             	add    esp,0x10
c001b5c8:	31 c0                	xor    eax,eax
c001b5ca:	31 d2                	xor    edx,edx
c001b5cc:	83 c4 08             	add    esp,0x8
c001b5cf:	5b                   	pop    ebx
c001b5d0:	c3                   	ret    
c001b5d1:	83 ec 08             	sub    esp,0x8
c001b5d4:	50                   	push   eax
c001b5d5:	68 3c b6 02 c0       	push   0xc002b63c
c001b5da:	e8 36 75 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001b5df:	83 c4 10             	add    esp,0x10
c001b5e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5e7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5ec:	83 c4 08             	add    esp,0x8
c001b5ef:	5b                   	pop    ebx
c001b5f0:	c3                   	ret    
c001b5f1:	83 ec 0c             	sub    esp,0xc
c001b5f4:	68 d6 b6 02 c0       	push   0xc002b6d6
c001b5f9:	e8 17 75 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001b5fe:	eb c5                	jmp    c001b5c5 <sysCallClose(regs*)+0x43>
c001b600:	83 ec 0c             	sub    esp,0xc
c001b603:	68 e4 b6 02 c0       	push   0xc002b6e4
c001b608:	eb ef                	jmp    c001b5f9 <sysCallClose(regs*)+0x77>

c001b60a <sysCallOpenDir(regs*)>:
c001b60a:	56                   	push   esi
c001b60b:	53                   	push   ebx
c001b60c:	53                   	push   ebx
c001b60d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b611:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b614:	85 f6                	test   esi,esi
c001b616:	74 59                	je     c001b671 <sysCallOpenDir(regs*)+0x67>
c001b618:	83 ec 0c             	sub    esp,0xc
c001b61b:	68 14 01 00 00       	push   0x114
c001b620:	e8 21 42 ff ff       	call   c000f846 <malloc>
c001b625:	83 c4 0c             	add    esp,0xc
c001b628:	89 c6                	mov    esi,eax
c001b62a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b62f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b632:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b635:	56                   	push   esi
c001b636:	e8 df 7e ff ff       	call   c001351a <Directory::Directory(char const*, Process*)>
c001b63b:	83 c4 10             	add    esp,0x10
c001b63e:	85 f6                	test   esi,esi
c001b640:	74 2f                	je     c001b671 <sysCallOpenDir(regs*)+0x67>
c001b642:	83 ec 0c             	sub    esp,0xc
c001b645:	56                   	push   esi
c001b646:	e8 33 7f ff ff       	call   c001357e <Directory::open()>
c001b64b:	83 c4 10             	add    esp,0x10
c001b64e:	85 c0                	test   eax,eax
c001b650:	75 1f                	jne    c001b671 <sysCallOpenDir(regs*)+0x67>
c001b652:	83 ec 0c             	sub    esp,0xc
c001b655:	56                   	push   esi
c001b656:	e8 7f 60 ff ff       	call   c00116da <UnixFile::getFileDescriptor()>
c001b65b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b65e:	83 c4 10             	add    esp,0x10
c001b661:	89 02                	mov    DWORD PTR [edx],eax
c001b663:	c1 f8 1f             	sar    eax,0x1f
c001b666:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b669:	31 c0                	xor    eax,eax
c001b66b:	59                   	pop    ecx
c001b66c:	31 d2                	xor    edx,edx
c001b66e:	5b                   	pop    ebx
c001b66f:	5e                   	pop    esi
c001b670:	c3                   	ret    
c001b671:	59                   	pop    ecx
c001b672:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b677:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b67c:	5b                   	pop    ebx
c001b67d:	5e                   	pop    esi
c001b67e:	c3                   	ret    

c001b67f <sysCallCloseDir(regs*)>:
c001b67f:	53                   	push   ebx
c001b680:	83 ec 08             	sub    esp,0x8
c001b683:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b687:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b68a:	83 f8 02             	cmp    eax,0x2
c001b68d:	76 47                	jbe    c001b6d6 <sysCallCloseDir(regs*)+0x57>
c001b68f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b694:	77 2f                	ja     c001b6c5 <sysCallCloseDir(regs*)+0x46>
c001b696:	83 ec 0c             	sub    esp,0xc
c001b699:	50                   	push   eax
c001b69a:	e8 30 63 ff ff       	call   c00119cf <getFromFileDescriptor(int)>
c001b69f:	89 c3                	mov    ebx,eax
c001b6a1:	89 04 24             	mov    DWORD PTR [esp],eax
c001b6a4:	e8 31 7f ff ff       	call   c00135da <Directory::close()>
c001b6a9:	83 c4 10             	add    esp,0x10
c001b6ac:	85 db                	test   ebx,ebx
c001b6ae:	74 0c                	je     c001b6bc <sysCallCloseDir(regs*)+0x3d>
c001b6b0:	83 ec 0c             	sub    esp,0xc
c001b6b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6b5:	53                   	push   ebx
c001b6b6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b6b9:	83 c4 10             	add    esp,0x10
c001b6bc:	31 c0                	xor    eax,eax
c001b6be:	31 d2                	xor    edx,edx
c001b6c0:	83 c4 08             	add    esp,0x8
c001b6c3:	5b                   	pop    ebx
c001b6c4:	c3                   	ret    
c001b6c5:	83 ec 08             	sub    esp,0x8
c001b6c8:	50                   	push   eax
c001b6c9:	68 64 b6 02 c0       	push   0xc002b664
c001b6ce:	e8 42 74 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001b6d3:	83 c4 10             	add    esp,0x10
c001b6d6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6db:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6e0:	83 c4 08             	add    esp,0x8
c001b6e3:	5b                   	pop    ebx
c001b6e4:	c3                   	ret    

c001b6e5 <sysCallMakeDir(regs*)>:
c001b6e5:	56                   	push   esi
c001b6e6:	53                   	push   ebx
c001b6e7:	83 ec 10             	sub    esp,0x10
c001b6ea:	68 14 01 00 00       	push   0x114
c001b6ef:	e8 52 41 ff ff       	call   c000f846 <malloc>
c001b6f4:	83 c4 0c             	add    esp,0xc
c001b6f7:	89 c3                	mov    ebx,eax
c001b6f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6fe:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b701:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b705:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b708:	53                   	push   ebx
c001b709:	e8 0c 7e ff ff       	call   c001351a <Directory::Directory(char const*, Process*)>
c001b70e:	83 c4 10             	add    esp,0x10
c001b711:	85 db                	test   ebx,ebx
c001b713:	74 32                	je     c001b747 <sysCallMakeDir(regs*)+0x62>
c001b715:	83 ec 0c             	sub    esp,0xc
c001b718:	53                   	push   ebx
c001b719:	e8 40 80 ff ff       	call   c001375e <Directory::create()>
c001b71e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b721:	89 c6                	mov    esi,eax
c001b723:	e8 b2 7e ff ff       	call   c00135da <Directory::close()>
c001b728:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b72a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b72d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b730:	83 c4 10             	add    esp,0x10
c001b733:	31 c0                	xor    eax,eax
c001b735:	59                   	pop    ecx
c001b736:	85 f6                	test   esi,esi
c001b738:	5b                   	pop    ebx
c001b739:	0f 95 c0             	setne  al
c001b73c:	5e                   	pop    esi
c001b73d:	31 d2                	xor    edx,edx
c001b73f:	f7 d8                	neg    eax
c001b741:	83 d2 00             	adc    edx,0x0
c001b744:	f7 da                	neg    edx
c001b746:	c3                   	ret    
c001b747:	59                   	pop    ecx
c001b748:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b74d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b752:	5b                   	pop    ebx
c001b753:	5e                   	pop    esi
c001b754:	c3                   	ret    

c001b755 <sysCallWait(regs*)>:
c001b755:	83 ec 10             	sub    esp,0x10
c001b758:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b75c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b75f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b762:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b765:	e8 19 24 00 00       	call   c001db83 <waitTask(int, int*, int)>
c001b76a:	83 c4 1c             	add    esp,0x1c
c001b76d:	99                   	cdq    
c001b76e:	c3                   	ret    

c001b76f <sysCallNotImpl(regs*)>:
c001b76f:	83 ec 18             	sub    esp,0x18
c001b772:	68 f2 b6 02 c0       	push   0xc002b6f2
c001b777:	e8 c1 e8 ff ff       	call   c001a03d <Krnl::panic(char const*)>
c001b77c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b781:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b786:	83 c4 1c             	add    esp,0x1c
c001b789:	c3                   	ret    

c001b78a <sysPanic(regs*)>:
c001b78a:	83 ec 18             	sub    esp,0x18
c001b78d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b791:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b794:	e8 a4 e8 ff ff       	call   c001a03d <Krnl::panic(char const*)>
c001b799:	c7 04 24 0c b7 02 c0 	mov    DWORD PTR [esp],0xc002b70c
c001b7a0:	e8 98 e8 ff ff       	call   c001a03d <Krnl::panic(char const*)>
c001b7a5:	b8 01 00 00 00       	mov    eax,0x1
c001b7aa:	31 d2                	xor    edx,edx
c001b7ac:	83 c4 1c             	add    esp,0x1c
c001b7af:	c3                   	ret    

c001b7b0 <sysCallRmdir(regs*)>:
c001b7b0:	56                   	push   esi
c001b7b1:	53                   	push   ebx
c001b7b2:	83 ec 20             	sub    esp,0x20
c001b7b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b7b9:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b7bc:	68 14 01 00 00       	push   0x114
c001b7c1:	e8 80 40 ff ff       	call   c000f846 <malloc>
c001b7c6:	83 c4 0c             	add    esp,0xc
c001b7c9:	89 c3                	mov    ebx,eax
c001b7cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7d0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7d3:	56                   	push   esi
c001b7d4:	53                   	push   ebx
c001b7d5:	e8 94 78 ff ff       	call   c001306e <File::File(char const*, Process*)>
c001b7da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b7dd:	e8 68 7a ff ff       	call   c001324a <File::unlink()>
c001b7e2:	83 c4 10             	add    esp,0x10
c001b7e5:	85 db                	test   ebx,ebx
c001b7e7:	74 14                	je     c001b7fd <sysCallRmdir(regs*)+0x4d>
c001b7e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7ed:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7ef:	83 ec 0c             	sub    esp,0xc
c001b7f2:	53                   	push   ebx
c001b7f3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b7f6:	83 c4 10             	add    esp,0x10
c001b7f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b7fd:	85 c0                	test   eax,eax
c001b7ff:	0f 95 c0             	setne  al
c001b802:	31 d2                	xor    edx,edx
c001b804:	0f b6 c0             	movzx  eax,al
c001b807:	f7 d8                	neg    eax
c001b809:	83 d2 00             	adc    edx,0x0
c001b80c:	83 c4 14             	add    esp,0x14
c001b80f:	f7 da                	neg    edx
c001b811:	5b                   	pop    ebx
c001b812:	5e                   	pop    esi
c001b813:	c3                   	ret    

c001b814 <sysCallUnlink(regs*)>:
c001b814:	56                   	push   esi
c001b815:	53                   	push   ebx
c001b816:	83 ec 20             	sub    esp,0x20
c001b819:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b81d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b820:	68 14 01 00 00       	push   0x114
c001b825:	e8 1c 40 ff ff       	call   c000f846 <malloc>
c001b82a:	83 c4 0c             	add    esp,0xc
c001b82d:	89 c3                	mov    ebx,eax
c001b82f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b834:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b837:	56                   	push   esi
c001b838:	53                   	push   ebx
c001b839:	e8 30 78 ff ff       	call   c001306e <File::File(char const*, Process*)>
c001b83e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b841:	e8 04 7a ff ff       	call   c001324a <File::unlink()>
c001b846:	83 c4 10             	add    esp,0x10
c001b849:	85 db                	test   ebx,ebx
c001b84b:	74 14                	je     c001b861 <sysCallUnlink(regs*)+0x4d>
c001b84d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b851:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b853:	83 ec 0c             	sub    esp,0xc
c001b856:	53                   	push   ebx
c001b857:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b85a:	83 c4 10             	add    esp,0x10
c001b85d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b861:	85 c0                	test   eax,eax
c001b863:	0f 95 c0             	setne  al
c001b866:	31 d2                	xor    edx,edx
c001b868:	0f b6 c0             	movzx  eax,al
c001b86b:	f7 d8                	neg    eax
c001b86d:	83 d2 00             	adc    edx,0x0
c001b870:	83 c4 14             	add    esp,0x14
c001b873:	f7 da                	neg    edx
c001b875:	5b                   	pop    ebx
c001b876:	5e                   	pop    esi
c001b877:	c3                   	ret    

c001b878 <sysCallGetArgv(regs*)>:
c001b878:	83 ec 0c             	sub    esp,0xc
c001b87b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b87f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b882:	85 c0                	test   eax,eax
c001b884:	78 2b                	js     c001b8b1 <sysCallGetArgv(regs*)+0x39>
c001b886:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b88c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b88f:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b895:	7d 1a                	jge    c001b8b1 <sysCallGetArgv(regs*)+0x39>
c001b897:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b89e:	85 c0                	test   eax,eax
c001b8a0:	74 17                	je     c001b8b9 <sysCallGetArgv(regs*)+0x41>
c001b8a2:	83 ec 08             	sub    esp,0x8
c001b8a5:	50                   	push   eax
c001b8a6:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b8a9:	e8 86 4f fe ff       	call   c0000834 <strcpy>
c001b8ae:	83 c4 10             	add    esp,0x10
c001b8b1:	31 c0                	xor    eax,eax
c001b8b3:	31 d2                	xor    edx,edx
c001b8b5:	83 c4 0c             	add    esp,0xc
c001b8b8:	c3                   	ret    
c001b8b9:	b8 01 00 00 00       	mov    eax,0x1
c001b8be:	31 d2                	xor    edx,edx
c001b8c0:	83 c4 0c             	add    esp,0xc
c001b8c3:	c3                   	ret    

c001b8c4 <sysCallTTYName(regs*)>:
c001b8c4:	56                   	push   esi
c001b8c5:	53                   	push   ebx
c001b8c6:	53                   	push   ebx
c001b8c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b8cb:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b8ce:	85 c0                	test   eax,eax
c001b8d0:	74 5f                	je     c001b931 <sysCallTTYName(regs*)+0x6d>
c001b8d2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b8d5:	83 f8 02             	cmp    eax,0x2
c001b8d8:	77 3e                	ja     c001b918 <sysCallTTYName(regs*)+0x54>
c001b8da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8df:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8e2:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b8e8:	85 db                	test   ebx,ebx
c001b8ea:	74 45                	je     c001b931 <sysCallTTYName(regs*)+0x6d>
c001b8ec:	83 ec 0c             	sub    esp,0xc
c001b8ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b8f1:	53                   	push   ebx
c001b8f2:	ff 10                	call   DWORD PTR [eax]
c001b8f4:	83 c4 10             	add    esp,0x10
c001b8f7:	84 c0                	test   al,al
c001b8f9:	74 41                	je     c001b93c <sysCallTTYName(regs*)+0x78>
c001b8fb:	83 ec 08             	sub    esp,0x8
c001b8fe:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001b904:	53                   	push   ebx
c001b905:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b908:	e8 27 4f fe ff       	call   c0000834 <strcpy>
c001b90d:	83 c4 10             	add    esp,0x10
c001b910:	31 c0                	xor    eax,eax
c001b912:	59                   	pop    ecx
c001b913:	31 d2                	xor    edx,edx
c001b915:	5b                   	pop    ebx
c001b916:	5e                   	pop    esi
c001b917:	c3                   	ret    
c001b918:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b91d:	74 bb                	je     c001b8da <sysCallTTYName(regs*)+0x16>
c001b91f:	83 ec 0c             	sub    esp,0xc
c001b922:	50                   	push   eax
c001b923:	e8 a7 60 ff ff       	call   c00119cf <getFromFileDescriptor(int)>
c001b928:	83 c4 10             	add    esp,0x10
c001b92b:	89 c3                	mov    ebx,eax
c001b92d:	85 db                	test   ebx,ebx
c001b92f:	75 bb                	jne    c001b8ec <sysCallTTYName(regs*)+0x28>
c001b931:	59                   	pop    ecx
c001b932:	b8 01 00 00 00       	mov    eax,0x1
c001b937:	31 d2                	xor    edx,edx
c001b939:	5b                   	pop    ebx
c001b93a:	5e                   	pop    esi
c001b93b:	c3                   	ret    
c001b93c:	59                   	pop    ecx
c001b93d:	b8 02 00 00 00       	mov    eax,0x2
c001b942:	31 d2                	xor    edx,edx
c001b944:	5b                   	pop    ebx
c001b945:	5e                   	pop    esi
c001b946:	c3                   	ret    

c001b947 <sysCallUSleep(regs*)>:
c001b947:	83 ec 14             	sub    esp,0x14
c001b94a:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b94f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b953:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b95a:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b95d:	01 ca                	add    edx,ecx
c001b95f:	52                   	push   edx
c001b960:	50                   	push   eax
c001b961:	e8 b6 22 00 00       	call   c001dc1c <nanoSleep(unsigned long long)>
c001b966:	31 c0                	xor    eax,eax
c001b968:	31 d2                	xor    edx,edx
c001b96a:	83 c4 1c             	add    esp,0x1c
c001b96d:	c3                   	ret    

c001b96e <sysCallSpawn(regs*)>:
c001b96e:	56                   	push   esi
c001b96f:	53                   	push   ebx
c001b970:	53                   	push   ebx
c001b971:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b975:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b978:	85 f6                	test   esi,esi
c001b97a:	75 08                	jne    c001b984 <sysCallSpawn(regs*)+0x16>
c001b97c:	59                   	pop    ecx
c001b97d:	31 c0                	xor    eax,eax
c001b97f:	31 d2                	xor    edx,edx
c001b981:	5b                   	pop    ebx
c001b982:	5e                   	pop    esi
c001b983:	c3                   	ret    
c001b984:	83 ec 0c             	sub    esp,0xc
c001b987:	68 3f 07 00 00       	push   0x73f
c001b98c:	e8 b5 3e ff ff       	call   c000f846 <malloc>
c001b991:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b994:	89 c6                	mov    esi,eax
c001b996:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b99b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b99e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9a1:	56                   	push   esi
c001b9a2:	e8 75 19 00 00       	call   c001d31c <Process::Process(char const*, Process*, char**)>
c001b9a7:	83 c4 20             	add    esp,0x20
c001b9aa:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b9b1:	75 c9                	jne    c001b97c <sysCallSpawn(regs*)+0xe>
c001b9b3:	83 ec 0c             	sub    esp,0xc
c001b9b6:	56                   	push   esi
c001b9b7:	e8 26 1f 00 00       	call   c001d8e2 <Process::createUserThread()>
c001b9bc:	8b 06                	mov    eax,DWORD PTR [esi]
c001b9be:	83 c4 10             	add    esp,0x10
c001b9c1:	99                   	cdq    
c001b9c2:	59                   	pop    ecx
c001b9c3:	5b                   	pop    ebx
c001b9c4:	5e                   	pop    esi
c001b9c5:	c3                   	ret    

c001b9c6 <sysCallGetEnv(regs*)>:
c001b9c6:	57                   	push   edi
c001b9c7:	56                   	push   esi
c001b9c8:	53                   	push   ebx
c001b9c9:	83 ec 1c             	sub    esp,0x1c
c001b9cc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b9d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9d5:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b9d8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b9db:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9de:	e8 76 e5 ff ff       	call   c0019f59 <Krnl::getProcessTotalEnvCount(Process*)>
c001b9e3:	83 c4 10             	add    esp,0x10
c001b9e6:	39 c7                	cmp    edi,eax
c001b9e8:	7c 14                	jl     c001b9fe <sysCallGetEnv(regs*)+0x38>
c001b9ea:	85 f6                	test   esi,esi
c001b9ec:	75 0b                	jne    c001b9f9 <sysCallGetEnv(regs*)+0x33>
c001b9ee:	83 c4 10             	add    esp,0x10
c001b9f1:	31 c0                	xor    eax,eax
c001b9f3:	5b                   	pop    ebx
c001b9f4:	31 d2                	xor    edx,edx
c001b9f6:	5e                   	pop    esi
c001b9f7:	5f                   	pop    edi
c001b9f8:	c3                   	ret    
c001b9f9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b9fc:	eb f0                	jmp    c001b9ee <sysCallGetEnv(regs*)+0x28>
c001b9fe:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ba02:	52                   	push   edx
c001ba03:	57                   	push   edi
c001ba04:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ba0a:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001ba0d:	50                   	push   eax
c001ba0e:	e8 66 e5 ff ff       	call   c0019f79 <Krnl::getProcessEnvPair(Process*, int)>
c001ba13:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ba16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba1a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ba1e:	83 c4 0c             	add    esp,0xc
c001ba21:	85 c9                	test   ecx,ecx
c001ba23:	75 23                	jne    c001ba48 <sysCallGetEnv(regs*)+0x82>
c001ba25:	83 ec 0c             	sub    esp,0xc
c001ba28:	50                   	push   eax
c001ba29:	e8 66 4d fe ff       	call   c0000794 <strlen>
c001ba2e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ba31:	89 c3                	mov    ebx,eax
c001ba33:	e8 5c 4d fe ff       	call   c0000794 <strlen>
c001ba38:	83 c4 10             	add    esp,0x10
c001ba3b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001ba3f:	83 c4 10             	add    esp,0x10
c001ba42:	31 d2                	xor    edx,edx
c001ba44:	5b                   	pop    ebx
c001ba45:	5e                   	pop    esi
c001ba46:	5f                   	pop    edi
c001ba47:	c3                   	ret    
c001ba48:	83 ec 08             	sub    esp,0x8
c001ba4b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ba4e:	50                   	push   eax
c001ba4f:	56                   	push   esi
c001ba50:	e8 df 4d fe ff       	call   c0000834 <strcpy>
c001ba55:	58                   	pop    eax
c001ba56:	5a                   	pop    edx
c001ba57:	68 1b b7 02 c0       	push   0xc002b71b
c001ba5c:	56                   	push   esi
c001ba5d:	e8 12 4f fe ff       	call   c0000974 <strcat>
c001ba62:	59                   	pop    ecx
c001ba63:	5b                   	pop    ebx
c001ba64:	57                   	push   edi
c001ba65:	56                   	push   esi
c001ba66:	e8 09 4f fe ff       	call   c0000974 <strcat>
c001ba6b:	83 c4 10             	add    esp,0x10
c001ba6e:	e9 7b ff ff ff       	jmp    c001b9ee <sysCallGetEnv(regs*)+0x28>

c001ba73 <sysAppSettings(regs*)>:
c001ba73:	53                   	push   ebx
c001ba74:	83 ec 08             	sub    esp,0x8
c001ba77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba7b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001ba7e:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001ba84:	25 e0 1f 00 00       	and    eax,0x1fe0
c001ba89:	66 3d c0 09          	cmp    ax,0x9c0
c001ba8d:	75 2f                	jne    c001babe <sysAppSettings(regs*)+0x4b>
c001ba8f:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001ba95:	83 e0 1f             	and    eax,0x1f
c001ba98:	3c 01                	cmp    al,0x1
c001ba9a:	74 2e                	je     c001baca <sysAppSettings(regs*)+0x57>
c001ba9c:	3c 07                	cmp    al,0x7
c001ba9e:	0f 84 bd 00 00 00    	je     c001bb61 <sysAppSettings(regs*)+0xee>
c001baa4:	84 c0                	test   al,al
c001baa6:	0f 84 dc 00 00 00    	je     c001bb88 <sysAppSettings(regs*)+0x115>
c001baac:	3c 08                	cmp    al,0x8
c001baae:	74 6d                	je     c001bb1d <sysAppSettings(regs*)+0xaa>
c001bab0:	0f b6 c0             	movzx  eax,al
c001bab3:	83 c4 08             	add    esp,0x8
c001bab6:	05 e8 03 00 00       	add    eax,0x3e8
c001babb:	5b                   	pop    ebx
c001babc:	99                   	cdq    
c001babd:	c3                   	ret    
c001babe:	b8 01 00 00 00       	mov    eax,0x1
c001bac3:	31 d2                	xor    edx,edx
c001bac5:	83 c4 08             	add    esp,0x8
c001bac8:	5b                   	pop    ebx
c001bac9:	c3                   	ret    
c001baca:	51                   	push   ecx
c001bacb:	68 00 01 00 00       	push   0x100
c001bad0:	6a 00                	push   0x0
c001bad2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bad7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bada:	83 c0 0c             	add    eax,0xc
c001badd:	50                   	push   eax
c001bade:	e8 95 4c fe ff       	call   c0000778 <memset>
c001bae3:	83 c4 0c             	add    esp,0xc
c001bae6:	68 ff 00 00 00       	push   0xff
c001baeb:	53                   	push   ebx
c001baec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baf1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001baf4:	83 c0 0c             	add    eax,0xc
c001baf7:	50                   	push   eax
c001baf8:	e8 47 4c fe ff       	call   c0000744 <memcpy>
c001bafd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb02:	5b                   	pop    ebx
c001bb03:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb06:	5a                   	pop    edx
c001bb07:	8d 50 0c             	lea    edx,[eax+0xc]
c001bb0a:	52                   	push   edx
c001bb0b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bb11:	e8 34 50 ff ff       	call   c0010b4a <VgaText::setTitle(char*)>
c001bb16:	83 c4 10             	add    esp,0x10
c001bb19:	31 c0                	xor    eax,eax
c001bb1b:	eb a6                	jmp    c001bac3 <sysAppSettings(regs*)+0x50>
c001bb1d:	83 ec 08             	sub    esp,0x8
c001bb20:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001bb26:	83 e0 0f             	and    eax,0xf
c001bb29:	50                   	push   eax
c001bb2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb2f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb32:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bb38:	e8 fd 4f ff ff       	call   c0010b3a <VgaText::setTitleColour(VgaColour)>
c001bb3d:	58                   	pop    eax
c001bb3e:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001bb44:	5a                   	pop    edx
c001bb45:	c1 e8 04             	shr    eax,0x4
c001bb48:	83 e0 0f             	and    eax,0xf
c001bb4b:	50                   	push   eax
c001bb4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb51:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb54:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bb5a:	e8 cb 4f ff ff       	call   c0010b2a <VgaText::setTitleTextColour(VgaColour)>
c001bb5f:	eb b5                	jmp    c001bb16 <sysAppSettings(regs*)+0xa3>
c001bb61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb66:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb69:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bb6f:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001bb75:	c0 e8 06             	shr    al,0x6
c001bb78:	83 e0 01             	and    eax,0x1
c001bb7b:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001bb81:	31 c0                	xor    eax,eax
c001bb83:	e9 3b ff ff ff       	jmp    c001bac3 <sysAppSettings(regs*)+0x50>
c001bb88:	b8 02 00 00 00       	mov    eax,0x2
c001bb8d:	e9 31 ff ff ff       	jmp    c001bac3 <sysAppSettings(regs*)+0x50>

c001bb92 <sysSetFatAttrib(regs*)>:
c001bb92:	57                   	push   edi
c001bb93:	56                   	push   esi
c001bb94:	53                   	push   ebx
c001bb95:	83 ec 1c             	sub    esp,0x1c
c001bb98:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bb9c:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bb9f:	68 14 01 00 00       	push   0x114
c001bba4:	e8 9d 3c ff ff       	call   c000f846 <malloc>
c001bba9:	83 c4 0c             	add    esp,0xc
c001bbac:	89 c3                	mov    ebx,eax
c001bbae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbb3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbb6:	57                   	push   edi
c001bbb7:	53                   	push   ebx
c001bbb8:	e8 b1 74 ff ff       	call   c001306e <File::File(char const*, Process*)>
c001bbbd:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bbc0:	83 c4 0c             	add    esp,0xc
c001bbc3:	0f b6 d4             	movzx  edx,ah
c001bbc6:	0f b6 c0             	movzx  eax,al
c001bbc9:	52                   	push   edx
c001bbca:	50                   	push   eax
c001bbcb:	53                   	push   ebx
c001bbcc:	e8 13 77 ff ff       	call   c00132e4 <File::chfatattr(unsigned char, unsigned char)>
c001bbd1:	83 c4 10             	add    esp,0x10
c001bbd4:	85 db                	test   ebx,ebx
c001bbd6:	74 14                	je     c001bbec <sysSetFatAttrib(regs*)+0x5a>
c001bbd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbdc:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bbde:	83 ec 0c             	sub    esp,0xc
c001bbe1:	53                   	push   ebx
c001bbe2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bbe5:	83 c4 10             	add    esp,0x10
c001bbe8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbec:	85 c0                	test   eax,eax
c001bbee:	0f 95 c0             	setne  al
c001bbf1:	31 d2                	xor    edx,edx
c001bbf3:	0f b6 c0             	movzx  eax,al
c001bbf6:	f7 d8                	neg    eax
c001bbf8:	83 d2 00             	adc    edx,0x0
c001bbfb:	83 c4 10             	add    esp,0x10
c001bbfe:	f7 da                	neg    edx
c001bc00:	5b                   	pop    ebx
c001bc01:	5e                   	pop    esi
c001bc02:	5f                   	pop    edi
c001bc03:	c3                   	ret    

c001bc04 <sysPipe(regs*)>:
c001bc04:	57                   	push   edi
c001bc05:	56                   	push   esi
c001bc06:	53                   	push   ebx
c001bc07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc0b:	83 ec 0c             	sub    esp,0xc
c001bc0e:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bc11:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bc14:	6a 20                	push   0x20
c001bc16:	e8 2b 3c ff ff       	call   c000f846 <malloc>
c001bc1b:	89 c3                	mov    ebx,eax
c001bc1d:	58                   	pop    eax
c001bc1e:	5a                   	pop    edx
c001bc1f:	68 00 50 00 00       	push   0x5000
c001bc24:	53                   	push   ebx
c001bc25:	e8 50 48 ff ff       	call   c001047a <Pipe::Pipe(int)>
c001bc2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc2d:	e8 a8 5a ff ff       	call   c00116da <UnixFile::getFileDescriptor()>
c001bc32:	89 07                	mov    DWORD PTR [edi],eax
c001bc34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc37:	e8 9e 5a ff ff       	call   c00116da <UnixFile::getFileDescriptor()>
c001bc3c:	83 c4 10             	add    esp,0x10
c001bc3f:	89 06                	mov    DWORD PTR [esi],eax
c001bc41:	31 d2                	xor    edx,edx
c001bc43:	5b                   	pop    ebx
c001bc44:	31 c0                	xor    eax,eax
c001bc46:	5e                   	pop    esi
c001bc47:	5f                   	pop    edi
c001bc48:	c3                   	ret    

c001bc49 <sysGetUnixTime(regs*)>:
c001bc49:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c001bc4e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bc54:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bc58:	e9 fb 7d ff ff       	jmp    c0013a58 <Clock::timeInSecondsLocal()>

c001bc5d <string_ends_with(char const*, char const*)>:
c001bc5d:	57                   	push   edi
c001bc5e:	56                   	push   esi
c001bc5f:	53                   	push   ebx
c001bc60:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc64:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bc68:	83 ec 0c             	sub    esp,0xc
c001bc6b:	53                   	push   ebx
c001bc6c:	e8 23 4b fe ff       	call   c0000794 <strlen>
c001bc71:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bc74:	89 c6                	mov    esi,eax
c001bc76:	e8 19 4b fe ff       	call   c0000794 <strlen>
c001bc7b:	83 c4 10             	add    esp,0x10
c001bc7e:	39 c6                	cmp    esi,eax
c001bc80:	7d 06                	jge    c001bc88 <string_ends_with(char const*, char const*)+0x2b>
c001bc82:	5b                   	pop    ebx
c001bc83:	31 c0                	xor    eax,eax
c001bc85:	5e                   	pop    esi
c001bc86:	5f                   	pop    edi
c001bc87:	c3                   	ret    
c001bc88:	83 ec 08             	sub    esp,0x8
c001bc8b:	29 c6                	sub    esi,eax
c001bc8d:	57                   	push   edi
c001bc8e:	01 f3                	add    ebx,esi
c001bc90:	53                   	push   ebx
c001bc91:	e8 2a 4c fe ff       	call   c00008c0 <strcmp>
c001bc96:	83 c4 10             	add    esp,0x10
c001bc99:	85 c0                	test   eax,eax
c001bc9b:	5b                   	pop    ebx
c001bc9c:	0f 94 c0             	sete   al
c001bc9f:	5e                   	pop    esi
c001bca0:	0f b6 c0             	movzx  eax,al
c001bca3:	5f                   	pop    edi
c001bca4:	c3                   	ret    

c001bca5 <sysCallOpen(regs*)>:
c001bca5:	56                   	push   esi
c001bca6:	53                   	push   ebx
c001bca7:	81 ec 04 01 00 00    	sub    esp,0x104
c001bcad:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bcb4:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bcb7:	85 c9                	test   ecx,ecx
c001bcb9:	0f 84 b3 00 00 00    	je     c001bd72 <sysCallOpen(regs*)+0xcd>
c001bcbf:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bcc2:	85 c0                	test   eax,eax
c001bcc4:	0f 84 a8 00 00 00    	je     c001bd72 <sysCallOpen(regs*)+0xcd>
c001bcca:	52                   	push   edx
c001bccb:	68 1d b7 02 c0       	push   0xc002b71d
c001bcd0:	50                   	push   eax
c001bcd1:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bcd5:	56                   	push   esi
c001bcd6:	e8 e9 71 ff ff       	call   c0012ec4 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bcdb:	89 34 24             	mov    DWORD PTR [esp],esi
c001bcde:	e8 b1 4a fe ff       	call   c0000794 <strlen>
c001bce3:	83 c4 10             	add    esp,0x10
c001bce6:	48                   	dec    eax
c001bce7:	74 1d                	je     c001bd06 <sysCallOpen(regs*)+0x61>
c001bce9:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bcec:	eb 0f                	jmp    c001bcfd <sysCallOpen(regs*)+0x58>
c001bcee:	80 fa 3a             	cmp    dl,0x3a
c001bcf1:	74 0f                	je     c001bd02 <sysCallOpen(regs*)+0x5d>
c001bcf3:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bcf7:	48                   	dec    eax
c001bcf8:	74 0c                	je     c001bd06 <sysCallOpen(regs*)+0x61>
c001bcfa:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bcfd:	80 fa 2e             	cmp    dl,0x2e
c001bd00:	75 ec                	jne    c001bcee <sysCallOpen(regs*)+0x49>
c001bd02:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bd06:	83 ec 08             	sub    esp,0x8
c001bd09:	68 21 b7 02 c0       	push   0xc002b721
c001bd0e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd11:	e8 47 ff ff ff       	call   c001bc5d <string_ends_with(char const*, char const*)>
c001bd16:	83 c4 10             	add    esp,0x10
c001bd19:	85 c0                	test   eax,eax
c001bd1b:	75 17                	jne    c001bd34 <sysCallOpen(regs*)+0x8f>
c001bd1d:	83 ec 08             	sub    esp,0x8
c001bd20:	68 42 b7 02 c0       	push   0xc002b742
c001bd25:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd28:	e8 30 ff ff ff       	call   c001bc5d <string_ends_with(char const*, char const*)>
c001bd2d:	83 c4 10             	add    esp,0x10
c001bd30:	85 c0                	test   eax,eax
c001bd32:	74 51                	je     c001bd85 <sysCallOpen(regs*)+0xe0>
c001bd34:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd37:	83 ec 08             	sub    esp,0x8
c001bd3a:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bd40:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bd47:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd4a:	ff 30                	push   DWORD PTR [eax]
c001bd4c:	68 26 b7 02 c0       	push   0xc002b726
c001bd51:	e8 bf 6d ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001bd56:	c7 04 24 35 b7 02 c0 	mov    DWORD PTR [esp],0xc002b735
c001bd5d:	e8 b3 6d ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001bd62:	83 c4 10             	add    esp,0x10
c001bd65:	81 c4 04 01 00 00    	add    esp,0x104
c001bd6b:	31 c0                	xor    eax,eax
c001bd6d:	31 d2                	xor    edx,edx
c001bd6f:	5b                   	pop    ebx
c001bd70:	5e                   	pop    esi
c001bd71:	c3                   	ret    
c001bd72:	81 c4 04 01 00 00    	add    esp,0x104
c001bd78:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd7d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd82:	5b                   	pop    ebx
c001bd83:	5e                   	pop    esi
c001bd84:	c3                   	ret    
c001bd85:	83 ec 08             	sub    esp,0x8
c001bd88:	68 22 b7 02 c0       	push   0xc002b722
c001bd8d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd90:	e8 2b 4b fe ff       	call   c00008c0 <strcmp>
c001bd95:	83 c4 10             	add    esp,0x10
c001bd98:	85 c0                	test   eax,eax
c001bd9a:	74 98                	je     c001bd34 <sysCallOpen(regs*)+0x8f>
c001bd9c:	83 ec 08             	sub    esp,0x8
c001bd9f:	68 21 b7 02 c0       	push   0xc002b721
c001bda4:	56                   	push   esi
c001bda5:	e8 b3 fe ff ff       	call   c001bc5d <string_ends_with(char const*, char const*)>
c001bdaa:	83 c4 10             	add    esp,0x10
c001bdad:	85 c0                	test   eax,eax
c001bdaf:	75 83                	jne    c001bd34 <sysCallOpen(regs*)+0x8f>
c001bdb1:	83 ec 08             	sub    esp,0x8
c001bdb4:	68 47 b7 02 c0       	push   0xc002b747
c001bdb9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bdbc:	e8 9c fe ff ff       	call   c001bc5d <string_ends_with(char const*, char const*)>
c001bdc1:	83 c4 10             	add    esp,0x10
c001bdc4:	85 c0                	test   eax,eax
c001bdc6:	0f 85 d9 00 00 00    	jne    c001bea5 <sysCallOpen(regs*)+0x200>
c001bdcc:	83 ec 08             	sub    esp,0x8
c001bdcf:	68 4c b7 02 c0       	push   0xc002b74c
c001bdd4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bdd7:	e8 81 fe ff ff       	call   c001bc5d <string_ends_with(char const*, char const*)>
c001bddc:	83 c4 10             	add    esp,0x10
c001bddf:	85 c0                	test   eax,eax
c001bde1:	0f 85 be 00 00 00    	jne    c001bea5 <sysCallOpen(regs*)+0x200>
c001bde7:	83 ec 08             	sub    esp,0x8
c001bdea:	68 48 b7 02 c0       	push   0xc002b748
c001bdef:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bdf2:	e8 c9 4a fe ff       	call   c00008c0 <strcmp>
c001bdf7:	83 c4 10             	add    esp,0x10
c001bdfa:	85 c0                	test   eax,eax
c001bdfc:	0f 84 a3 00 00 00    	je     c001bea5 <sysCallOpen(regs*)+0x200>
c001be02:	83 ec 08             	sub    esp,0x8
c001be05:	68 47 b7 02 c0       	push   0xc002b747
c001be0a:	56                   	push   esi
c001be0b:	e8 4d fe ff ff       	call   c001bc5d <string_ends_with(char const*, char const*)>
c001be10:	83 c4 10             	add    esp,0x10
c001be13:	85 c0                	test   eax,eax
c001be15:	0f 85 8a 00 00 00    	jne    c001bea5 <sysCallOpen(regs*)+0x200>
c001be1b:	83 ec 0c             	sub    esp,0xc
c001be1e:	68 14 01 00 00       	push   0x114
c001be23:	e8 1e 3a ff ff       	call   c000f846 <malloc>
c001be28:	83 c4 0c             	add    esp,0xc
c001be2b:	89 c6                	mov    esi,eax
c001be2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be32:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be35:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be38:	56                   	push   esi
c001be39:	e8 30 72 ff ff       	call   c001306e <File::File(char const*, Process*)>
c001be3e:	83 c4 10             	add    esp,0x10
c001be41:	85 f6                	test   esi,esi
c001be43:	0f 84 29 ff ff ff    	je     c001bd72 <sysCallOpen(regs*)+0xcd>
c001be49:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001be4c:	0f b6 c2             	movzx  eax,dl
c001be4f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001be52:	89 d0                	mov    eax,edx
c001be54:	83 e0 01             	and    eax,0x1
c001be57:	f6 c2 02             	test   dl,0x2
c001be5a:	74 03                	je     c001be5f <sysCallOpen(regs*)+0x1ba>
c001be5c:	83 c8 02             	or     eax,0x2
c001be5f:	f6 c2 04             	test   dl,0x4
c001be62:	74 03                	je     c001be67 <sysCallOpen(regs*)+0x1c2>
c001be64:	83 c8 04             	or     eax,0x4
c001be67:	f6 c2 08             	test   dl,0x8
c001be6a:	74 03                	je     c001be6f <sysCallOpen(regs*)+0x1ca>
c001be6c:	83 c8 0a             	or     eax,0xa
c001be6f:	83 e2 10             	and    edx,0x10
c001be72:	74 03                	je     c001be77 <sysCallOpen(regs*)+0x1d2>
c001be74:	83 c8 12             	or     eax,0x12
c001be77:	83 ec 08             	sub    esp,0x8
c001be7a:	50                   	push   eax
c001be7b:	56                   	push   esi
c001be7c:	e8 51 72 ff ff       	call   c00130d2 <File::open(FileOpenMode)>
c001be81:	83 c4 10             	add    esp,0x10
c001be84:	85 c0                	test   eax,eax
c001be86:	0f 85 e6 fe ff ff    	jne    c001bd72 <sysCallOpen(regs*)+0xcd>
c001be8c:	83 ec 0c             	sub    esp,0xc
c001be8f:	56                   	push   esi
c001be90:	e8 45 58 ff ff       	call   c00116da <UnixFile::getFileDescriptor()>
c001be95:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001be98:	89 02                	mov    DWORD PTR [edx],eax
c001be9a:	c1 f8 1f             	sar    eax,0x1f
c001be9d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bea0:	e9 bd fe ff ff       	jmp    c001bd62 <sysCallOpen(regs*)+0xbd>
c001bea5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bea8:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001beae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001beb5:	e9 ab fe ff ff       	jmp    c001bd65 <sysCallOpen(regs*)+0xc0>

c001beba <Sys::loadSyscalls()>:
c001beba:	c7 05 00 07 03 c0 70 b0 01 c0 	mov    DWORD PTR ds:0xc0030700,0xc001b070
c001bec4:	c7 05 04 07 03 c0 d2 ac 01 c0 	mov    DWORD PTR ds:0xc0030704,0xc001acd2
c001bece:	c7 05 08 07 03 c0 25 ae 01 c0 	mov    DWORD PTR ds:0xc0030708,0xc001ae25
c001bed8:	c7 05 0c 07 03 c0 08 b0 01 c0 	mov    DWORD PTR ds:0xc003070c,0xc001b008
c001bee2:	c7 05 10 07 03 c0 bd ad 01 c0 	mov    DWORD PTR ds:0xc0030710,0xc001adbd
c001beec:	c7 05 14 07 03 c0 09 ad 01 c0 	mov    DWORD PTR ds:0xc0030714,0xc001ad09
c001bef6:	c7 05 18 07 03 c0 ea ac 01 c0 	mov    DWORD PTR ds:0xc0030718,0xc001acea
c001bf00:	c7 05 1c 07 03 c0 7a ae 01 c0 	mov    DWORD PTR ds:0xc003071c,0xc001ae7a
c001bf0a:	c7 05 24 07 03 c0 82 b5 01 c0 	mov    DWORD PTR ds:0xc0030724,0xc001b582
c001bf14:	c7 05 20 07 03 c0 a5 bc 01 c0 	mov    DWORD PTR ds:0xc0030720,0xc001bca5
c001bf1e:	c7 05 28 07 03 c0 0a b6 01 c0 	mov    DWORD PTR ds:0xc0030728,0xc001b60a
c001bf28:	c7 05 2c 07 03 c0 71 b2 01 c0 	mov    DWORD PTR ds:0xc003072c,0xc001b271
c001bf32:	c7 05 30 07 03 c0 ab b0 01 c0 	mov    DWORD PTR ds:0xc0030730,0xc001b0ab
c001bf3c:	c7 05 34 07 03 c0 b0 b0 01 c0 	mov    DWORD PTR ds:0xc0030734,0xc001b0b0
c001bf46:	c7 05 38 07 03 c0 e5 b6 01 c0 	mov    DWORD PTR ds:0xc0030738,0xc001b6e5
c001bf50:	c7 05 3c 07 03 c0 7f b6 01 c0 	mov    DWORD PTR ds:0xc003073c,0xc001b67f
c001bf5a:	c7 05 40 07 03 c0 59 b3 01 c0 	mov    DWORD PTR ds:0xc0030740,0xc001b359
c001bf64:	c7 05 44 07 03 c0 c2 b3 01 c0 	mov    DWORD PTR ds:0xc0030744,0xc001b3c2
c001bf6e:	c7 05 48 07 03 c0 3f b4 01 c0 	mov    DWORD PTR ds:0xc0030748,0xc001b43f
c001bf78:	c7 05 4c 07 03 c0 b5 b0 01 c0 	mov    DWORD PTR ds:0xc003074c,0xc001b0b5
c001bf82:	c7 05 50 07 03 c0 55 b7 01 c0 	mov    DWORD PTR ds:0xc0030750,0xc001b755
c001bf8c:	c7 05 54 07 03 c0 6f b7 01 c0 	mov    DWORD PTR ds:0xc0030754,0xc001b76f
c001bf96:	c7 05 58 07 03 c0 6f b7 01 c0 	mov    DWORD PTR ds:0xc0030758,0xc001b76f
c001bfa0:	c7 05 5c 07 03 c0 b0 b7 01 c0 	mov    DWORD PTR ds:0xc003075c,0xc001b7b0
c001bfaa:	c7 05 60 07 03 c0 14 b8 01 c0 	mov    DWORD PTR ds:0xc0030760,0xc001b814
c001bfb4:	c7 05 64 07 03 c0 bf b0 01 c0 	mov    DWORD PTR ds:0xc0030764,0xc001b0bf
c001bfbe:	c7 05 68 07 03 c0 78 b8 01 c0 	mov    DWORD PTR ds:0xc0030768,0xc001b878
c001bfc8:	c7 05 6c 07 03 c0 2e b2 01 c0 	mov    DWORD PTR ds:0xc003076c,0xc001b22e
c001bfd2:	c7 05 70 07 03 c0 c4 b8 01 c0 	mov    DWORD PTR ds:0xc0030770,0xc001b8c4
c001bfdc:	c7 05 74 07 03 c0 ff b2 01 c0 	mov    DWORD PTR ds:0xc0030774,0xc001b2ff
c001bfe6:	c7 05 78 07 03 c0 47 b9 01 c0 	mov    DWORD PTR ds:0xc0030778,0xc001b947
c001bff0:	c7 05 7c 07 03 c0 c2 b4 01 c0 	mov    DWORD PTR ds:0xc003077c,0xc001b4c2
c001bffa:	c7 05 80 07 03 c0 6e b9 01 c0 	mov    DWORD PTR ds:0xc0030780,0xc001b96e
c001c004:	c7 05 84 07 03 c0 c6 b9 01 c0 	mov    DWORD PTR ds:0xc0030784,0xc001b9c6
c001c00e:	c7 05 88 07 03 c0 73 ba 01 c0 	mov    DWORD PTR ds:0xc0030788,0xc001ba73
c001c018:	c7 05 8c 07 03 c0 cf b0 01 c0 	mov    DWORD PTR ds:0xc003078c,0xc001b0cf
c001c022:	c7 05 90 07 03 c0 39 b1 01 c0 	mov    DWORD PTR ds:0xc0030790,0xc001b139
c001c02c:	c7 05 94 07 03 c0 7f b1 01 c0 	mov    DWORD PTR ds:0xc0030794,0xc001b17f
c001c036:	c7 05 98 07 03 c0 92 bb 01 c0 	mov    DWORD PTR ds:0xc0030798,0xc001bb92
c001c040:	c7 05 9c 07 03 c0 8a b7 01 c0 	mov    DWORD PTR ds:0xc003079c,0xc001b78a
c001c04a:	c7 05 a0 07 03 c0 d0 b1 01 c0 	mov    DWORD PTR ds:0xc00307a0,0xc001b1d0
c001c054:	c7 05 a4 07 03 c0 04 bc 01 c0 	mov    DWORD PTR ds:0xc00307a4,0xc001bc04
c001c05e:	c7 05 a8 07 03 c0 49 bc 01 c0 	mov    DWORD PTR ds:0xc00307a8,0xc001bc49
c001c068:	c7 05 ac 07 03 c0 15 ad 01 c0 	mov    DWORD PTR ds:0xc00307ac,0xc001ad15
c001c072:	c7 05 b0 07 03 c0 96 ae 01 c0 	mov    DWORD PTR ds:0xc00307b0,0xc001ae96
c001c07c:	c7 05 b4 07 03 c0 be af 01 c0 	mov    DWORD PTR ds:0xc00307b4,0xc001afbe
c001c086:	c7 05 b8 07 03 c0 9c ac 01 c0 	mov    DWORD PTR ds:0xc00307b8,0xc001ac9c
c001c090:	c3                   	ret    

c001c091 <Sys::systemCall(regs*, void*)>:
c001c091:	53                   	push   ebx
c001c092:	83 ec 08             	sub    esp,0x8
c001c095:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c099:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c09c:	83 f8 7f             	cmp    eax,0x7f
c001c09f:	77 16                	ja     c001c0b7 <Sys::systemCall(regs*, void*)+0x26>
c001c0a1:	8b 14 85 00 07 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf900]
c001c0a8:	85 d2                	test   edx,edx
c001c0aa:	74 0b                	je     c001c0b7 <Sys::systemCall(regs*, void*)+0x26>
c001c0ac:	83 ec 0c             	sub    esp,0xc
c001c0af:	53                   	push   ebx
c001c0b0:	ff d2                	call   edx
c001c0b2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c0b5:	eb 0d                	jmp    c001c0c4 <Sys::systemCall(regs*, void*)+0x33>
c001c0b7:	52                   	push   edx
c001c0b8:	52                   	push   edx
c001c0b9:	50                   	push   eax
c001c0ba:	68 51 b7 02 c0       	push   0xc002b751
c001c0bf:	e8 51 6a ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001c0c4:	83 c4 10             	add    esp,0x10
c001c0c7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c0cc:	31 d2                	xor    edx,edx
c001c0ce:	83 c4 08             	add    esp,0x8
c001c0d1:	5b                   	pop    ebx
c001c0d2:	c3                   	ret    

c001c0d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c0d3:	55                   	push   ebp
c001c0d4:	89 e5                	mov    ebp,esp
c001c0d6:	57                   	push   edi
c001c0d7:	56                   	push   esi
c001c0d8:	53                   	push   ebx
c001c0d9:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c0df:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001c0e2:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001c0e5:	85 c0                	test   eax,eax
c001c0e7:	0f 95 c1             	setne  cl
c001c0ea:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001c0ee:	0f 94 c2             	sete   dl
c001c0f1:	84 d1                	test   cl,dl
c001c0f3:	74 26                	je     c001c11b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001c0f5:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001c0fc:	74 1d                	je     c001c11b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001c0fe:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001c101:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001c107:	89 d6                	mov    esi,edx
c001c109:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001c10f:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001c115:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c118:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001c11b:	83 ec 0c             	sub    esp,0xc
c001c11e:	05 ff 0f 00 00       	add    eax,0xfff
c001c123:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001c126:	6a 01                	push   0x1
c001c128:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001c12e:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001c134:	e8 ec 59 ff ff       	call   c0011b25 <Virt::allocateKernelVirtualPages(int)>
c001c139:	83 c4 10             	add    esp,0x10
c001c13c:	89 c6                	mov    esi,eax
c001c13e:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001c144:	0f 86 21 01 00 00    	jbe    c001c26b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001c14a:	c1 eb 0c             	shr    ebx,0xc
c001c14d:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001c157:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001c15d:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c160:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c163:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001c169:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001c16c:	29 d8                	sub    eax,ebx
c001c16e:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001c174:	0f 83 f4 00 00 00    	jae    c001c26e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001c17a:	83 ec 0c             	sub    esp,0xc
c001c17d:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001c183:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001c186:	3d 00 10 00 00       	cmp    eax,0x1000
c001c18b:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001c18d:	52                   	push   edx
c001c18e:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001c194:	52                   	push   edx
c001c195:	76 05                	jbe    c001c19c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001c197:	b8 00 10 00 00       	mov    eax,0x1000
c001c19c:	31 d2                	xor    edx,edx
c001c19e:	52                   	push   edx
c001c19f:	50                   	push   eax
c001c1a0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001c1a3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c1a6:	83 c4 20             	add    esp,0x20
c001c1a9:	85 c0                	test   eax,eax
c001c1ab:	74 1f                	je     c001c1cc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001c1ad:	51                   	push   ecx
c001c1ae:	51                   	push   ecx
c001c1af:	50                   	push   eax
c001c1b0:	68 65 b7 02 c0       	push   0xc002b765
c001c1b5:	e8 5b 69 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001c1ba:	89 34 24             	mov    DWORD PTR [esp],esi
c001c1bd:	e8 c7 5c ff ff       	call   c0011e89 <Virt::freeKernelVirtualPages(unsigned long)>
c001c1c2:	83 c4 10             	add    esp,0x10
c001c1c5:	31 c0                	xor    eax,eax
c001c1c7:	e9 7c 01 00 00       	jmp    c001c348 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001c1cc:	e8 fb 14 00 00       	call   c001d6cc <lockScheduler()>
c001c1d1:	e8 0d 3d ff ff       	call   c000fee3 <Phys::allocatePage()>
c001c1d6:	6a 07                	push   0x7
c001c1d8:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001c1de:	56                   	push   esi
c001c1df:	50                   	push   eax
c001c1e0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c1e6:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001c1e9:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001c1ef:	e8 fc 5f ff ff       	call   c00121f0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c1f4:	83 c4 0c             	add    esp,0xc
c001c1f7:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c1fd:	6a 00                	push   0x0
c001c1ff:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c205:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001c208:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001c20e:	e8 47 5e ff ff       	call   c001205a <VAS::mapOtherVASIn(bool, VAS*)>
c001c213:	58                   	pop    eax
c001c214:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001c21a:	5a                   	pop    edx
c001c21b:	68 07 04 00 00       	push   0x407
c001c220:	53                   	push   ebx
c001c221:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c227:	50                   	push   eax
c001c228:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c22e:	6a 00                	push   0x0
c001c230:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c235:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c238:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c23e:	e8 67 63 ff ff       	call   c00125aa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c243:	83 c4 1c             	add    esp,0x1c
c001c246:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001c24c:	68 00 10 00 00       	push   0x1000
c001c251:	50                   	push   eax
c001c252:	56                   	push   esi
c001c253:	e8 ec 44 fe ff       	call   c0000744 <memcpy>
c001c258:	e8 71 14 00 00       	call   c001d6ce <unlockScheduler()>
c001c25d:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001c263:	83 c4 10             	add    esp,0x10
c001c266:	e9 f5 fe ff ff       	jmp    c001c160 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001c26b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c26e:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001c278:	0f 86 bc 00 00 00    	jbe    c001c33a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001c27e:	e8 49 14 00 00       	call   c001d6cc <lockScheduler()>
c001c283:	51                   	push   ecx
c001c284:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c28a:	6a 00                	push   0x0
c001c28c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c291:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c294:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c29a:	e8 bb 5d ff ff       	call   c001205a <VAS::mapOtherVASIn(bool, VAS*)>
c001c29f:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001c2a5:	83 c4 10             	add    esp,0x10
c001c2a8:	c1 e8 0c             	shr    eax,0xc
c001c2ab:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001c2b5:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001c2bb:	e8 23 3c ff ff       	call   c000fee3 <Phys::allocatePage()>
c001c2c0:	6a 07                	push   0x7
c001c2c2:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001c2c8:	56                   	push   esi
c001c2c9:	50                   	push   eax
c001c2ca:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c2d0:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c2d3:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001c2d9:	e8 12 5f ff ff       	call   c00121f0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c2de:	58                   	pop    eax
c001c2df:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001c2e5:	5a                   	pop    edx
c001c2e6:	68 07 04 00 00       	push   0x407
c001c2eb:	53                   	push   ebx
c001c2ec:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c2f2:	50                   	push   eax
c001c2f3:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001c2f9:	6a 00                	push   0x0
c001c2fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c300:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c303:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c309:	e8 9c 62 ff ff       	call   c00125aa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c30e:	83 c4 1c             	add    esp,0x1c
c001c311:	68 00 10 00 00       	push   0x1000
c001c316:	6a 00                	push   0x0
c001c318:	56                   	push   esi
c001c319:	e8 5a 44 fe ff       	call   c0000778 <memset>
c001c31e:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001c324:	83 c4 10             	add    esp,0x10
c001c327:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001c32d:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001c333:	77 86                	ja     c001c2bb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001c335:	e8 94 13 00 00       	call   c001d6ce <unlockScheduler()>
c001c33a:	83 ec 0c             	sub    esp,0xc
c001c33d:	56                   	push   esi
c001c33e:	e8 46 5b ff ff       	call   c0011e89 <Virt::freeKernelVirtualPages(unsigned long)>
c001c343:	83 c4 10             	add    esp,0x10
c001c346:	b0 01                	mov    al,0x1
c001c348:	8d 65 f4             	lea    esp,[ebp-0xc]
c001c34b:	5b                   	pop    ebx
c001c34c:	5e                   	pop    esi
c001c34d:	5f                   	pop    edi
c001c34e:	5d                   	pop    ebp
c001c34f:	c3                   	ret    

c001c350 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c350:	55                   	push   ebp
c001c351:	57                   	push   edi
c001c352:	56                   	push   esi
c001c353:	53                   	push   ebx
c001c354:	83 ec 48             	sub    esp,0x48
c001c357:	68 14 01 00 00       	push   0x114
c001c35c:	e8 e5 34 ff ff       	call   c000f846 <malloc>
c001c361:	83 c4 0c             	add    esp,0xc
c001c364:	89 c6                	mov    esi,eax
c001c366:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c36a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c36e:	50                   	push   eax
c001c36f:	e8 fa 6c ff ff       	call   c001306e <File::File(char const*, Process*)>
c001c374:	58                   	pop    eax
c001c375:	5a                   	pop    edx
c001c376:	6a 01                	push   0x1
c001c378:	56                   	push   esi
c001c379:	e8 54 6d ff ff       	call   c00130d2 <File::open(FileOpenMode)>
c001c37e:	83 c4 10             	add    esp,0x10
c001c381:	85 c0                	test   eax,eax
c001c383:	0f 85 47 01 00 00    	jne    c001c4d0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c389:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c391:	83 ec 0c             	sub    esp,0xc
c001c394:	6a 34                	push   0x34
c001c396:	e8 ab 34 ff ff       	call   c000f846 <malloc>
c001c39b:	89 c3                	mov    ebx,eax
c001c39d:	58                   	pop    eax
c001c39e:	8b 06                	mov    eax,DWORD PTR [esi]
c001c3a0:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c3a4:	57                   	push   edi
c001c3a5:	53                   	push   ebx
c001c3a6:	6a 00                	push   0x0
c001c3a8:	6a 34                	push   0x34
c001c3aa:	56                   	push   esi
c001c3ab:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c3ae:	83 c4 20             	add    esp,0x20
c001c3b1:	85 c0                	test   eax,eax
c001c3b3:	0f 85 17 01 00 00    	jne    c001c4d0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3b9:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c3bf:	0f 85 0b 01 00 00    	jne    c001c4d0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3c5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c3c8:	85 c0                	test   eax,eax
c001c3ca:	0f 84 00 01 00 00    	je     c001c4d0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3d0:	31 d2                	xor    edx,edx
c001c3d2:	55                   	push   ebp
c001c3d3:	52                   	push   edx
c001c3d4:	50                   	push   eax
c001c3d5:	56                   	push   esi
c001c3d6:	e8 b5 6d ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001c3db:	83 c4 10             	add    esp,0x10
c001c3de:	85 c0                	test   eax,eax
c001c3e0:	0f 85 ea 00 00 00    	jne    c001c4d0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3e6:	83 ec 0c             	sub    esp,0xc
c001c3e9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c3ec:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c3f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c3f4:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c3f8:	0f af c2             	imul   eax,edx
c001c3fb:	50                   	push   eax
c001c3fc:	e8 45 34 ff ff       	call   c000f846 <malloc>
c001c401:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c403:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c407:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c40a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c40e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c412:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c416:	0f af c2             	imul   eax,edx
c001c419:	99                   	cdq    
c001c41a:	52                   	push   edx
c001c41b:	50                   	push   eax
c001c41c:	56                   	push   esi
c001c41d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c420:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c423:	83 c4 20             	add    esp,0x20
c001c426:	85 c0                	test   eax,eax
c001c428:	0f 84 a2 00 00 00    	je     c001c4d0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c42e:	31 d2                	xor    edx,edx
c001c430:	51                   	push   ecx
c001c431:	52                   	push   edx
c001c432:	50                   	push   eax
c001c433:	56                   	push   esi
c001c434:	e8 57 6d ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001c439:	83 c4 10             	add    esp,0x10
c001c43c:	85 c0                	test   eax,eax
c001c43e:	0f 85 8c 00 00 00    	jne    c001c4d0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c444:	83 ec 0c             	sub    esp,0xc
c001c447:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c44b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c44f:	31 ed                	xor    ebp,ebp
c001c451:	0f af c2             	imul   eax,edx
c001c454:	50                   	push   eax
c001c455:	e8 ec 33 ff ff       	call   c000f846 <malloc>
c001c45a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c45c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c460:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c463:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c467:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c46b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c46f:	0f af c2             	imul   eax,edx
c001c472:	99                   	cdq    
c001c473:	52                   	push   edx
c001c474:	50                   	push   eax
c001c475:	56                   	push   esi
c001c476:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c479:	83 c4 20             	add    esp,0x20
c001c47c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c484:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c488:	0f 86 80 00 00 00    	jbe    c001c50e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c48e:	0f b7 fd             	movzx  edi,bp
c001c491:	c1 e7 05             	shl    edi,0x5
c001c494:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c498:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c49b:	75 6b                	jne    c001c508 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c49d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c4a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c4a4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c4a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c4ab:	52                   	push   edx
c001c4ac:	31 d2                	xor    edx,edx
c001c4ae:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c4b1:	52                   	push   edx
c001c4b2:	50                   	push   eax
c001c4b3:	56                   	push   esi
c001c4b4:	e8 d7 6c ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001c4b9:	83 c4 10             	add    esp,0x10
c001c4bc:	85 c0                	test   eax,eax
c001c4be:	74 17                	je     c001c4d7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c4c0:	83 ec 0c             	sub    esp,0xc
c001c4c3:	68 90 b7 02 c0       	push   0xc002b790
c001c4c8:	e8 48 66 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001c4cd:	83 c4 10             	add    esp,0x10
c001c4d0:	31 c0                	xor    eax,eax
c001c4d2:	e9 87 00 00 00       	jmp    c001c55e <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c4d7:	83 ec 0c             	sub    esp,0xc
c001c4da:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c4dd:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c4e0:	50                   	push   eax
c001c4e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c4e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c4e9:	56                   	push   esi
c001c4ea:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c4ee:	e8 e0 fb ff ff       	call   c001c0d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c4f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c4f7:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c4fb:	83 c4 20             	add    esp,0x20
c001c4fe:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c502:	73 04                	jae    c001c508 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c504:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c508:	45                   	inc    ebp
c001c509:	e9 76 ff ff ff       	jmp    c001c484 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c50e:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c512:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c516:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c51a:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c520:	83 ec 0c             	sub    esp,0xc
c001c523:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c529:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c52e:	05 00 10 00 00       	add    eax,0x1000
c001c533:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c536:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c53a:	e8 17 33 ff ff       	call   c000f856 <free>
c001c53f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c542:	e8 0f 33 ff ff       	call   c000f856 <free>
c001c547:	58                   	pop    eax
c001c548:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c54c:	e8 05 33 ff ff       	call   c000f856 <free>
c001c551:	89 34 24             	mov    DWORD PTR [esp],esi
c001c554:	e8 d7 6b ff ff       	call   c0013130 <File::close()>
c001c559:	83 c4 10             	add    esp,0x10
c001c55c:	b0 01                	mov    al,0x1
c001c55e:	83 c4 3c             	add    esp,0x3c
c001c561:	5b                   	pop    ebx
c001c562:	5e                   	pop    esi
c001c563:	5f                   	pop    edi
c001c564:	5d                   	pop    ebp
c001c565:	c3                   	ret    

c001c566 <Thr::runtimeReferenceHelper()>:
c001c566:	83 ec 18             	sub    esp,0x18
c001c569:	68 98 b7 02 c0       	push   0xc002b798
c001c56e:	e8 a2 65 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001c573:	fa                   	cli    
c001c574:	83 c4 10             	add    esp,0x10
c001c577:	eb fe                	jmp    c001c577 <Thr::runtimeReferenceHelper()+0x11>

c001c579 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c579:	57                   	push   edi
c001c57a:	56                   	push   esi
c001c57b:	53                   	push   ebx
c001c57c:	31 db                	xor    ebx,ebx
c001c57e:	39 1d a0 10 03 c0    	cmp    DWORD PTR ds:0xc00310a0,ebx
c001c584:	7e 3c                	jle    c001c5c2 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c586:	8b 34 9d 20 10 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcefe0]
c001c58d:	31 ff                	xor    edi,edi
c001c58f:	39 3c 9d 20 0f 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf0e0],edi
c001c596:	7e 27                	jle    c001c5bf <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c598:	50                   	push   eax
c001c599:	50                   	push   eax
c001c59a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c59e:	8b 06                	mov    eax,DWORD PTR [esi]
c001c5a0:	03 04 9d a0 0f 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf060]
c001c5a7:	50                   	push   eax
c001c5a8:	e8 13 43 fe ff       	call   c00008c0 <strcmp>
c001c5ad:	83 c4 10             	add    esp,0x10
c001c5b0:	85 c0                	test   eax,eax
c001c5b2:	75 05                	jne    c001c5b9 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c5b4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c5b7:	eb 0b                	jmp    c001c5c4 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c5b9:	83 c6 10             	add    esi,0x10
c001c5bc:	47                   	inc    edi
c001c5bd:	eb d0                	jmp    c001c58f <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c5bf:	43                   	inc    ebx
c001c5c0:	eb bc                	jmp    c001c57e <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c5c2:	31 c0                	xor    eax,eax
c001c5c4:	5b                   	pop    ebx
c001c5c5:	5e                   	pop    esi
c001c5c6:	5f                   	pop    edi
c001c5c7:	c3                   	ret    

c001c5c8 <Thr::loadKernelSymbolTable(char const*)>:
c001c5c8:	55                   	push   ebp
c001c5c9:	57                   	push   edi
c001c5ca:	56                   	push   esi
c001c5cb:	53                   	push   ebx
c001c5cc:	83 ec 68             	sub    esp,0x68
c001c5cf:	8b 35 f4 10 03 c0    	mov    esi,DWORD PTR ds:0xc00310f4
c001c5d5:	68 14 01 00 00       	push   0x114
c001c5da:	e8 67 32 ff ff       	call   c000f846 <malloc>
c001c5df:	83 c4 0c             	add    esp,0xc
c001c5e2:	89 c3                	mov    ebx,eax
c001c5e4:	56                   	push   esi
c001c5e5:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c5e9:	50                   	push   eax
c001c5ea:	e8 7f 6a ff ff       	call   c001306e <File::File(char const*, Process*)>
c001c5ef:	5e                   	pop    esi
c001c5f0:	5f                   	pop    edi
c001c5f1:	6a 01                	push   0x1
c001c5f3:	53                   	push   ebx
c001c5f4:	e8 d9 6a ff ff       	call   c00130d2 <File::open(FileOpenMode)>
c001c5f9:	83 c4 10             	add    esp,0x10
c001c5fc:	85 c0                	test   eax,eax
c001c5fe:	74 0a                	je     c001c60a <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c600:	83 ec 0c             	sub    esp,0xc
c001c603:	68 ba b7 02 c0       	push   0xc002b7ba
c001c608:	eb 34                	jmp    c001c63e <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c60a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c612:	83 ec 0c             	sub    esp,0xc
c001c615:	6a 34                	push   0x34
c001c617:	e8 2a 32 ff ff       	call   c000f846 <malloc>
c001c61c:	59                   	pop    ecx
c001c61d:	89 c7                	mov    edi,eax
c001c61f:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c623:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c625:	56                   	push   esi
c001c626:	57                   	push   edi
c001c627:	6a 00                	push   0x0
c001c629:	6a 34                	push   0x34
c001c62b:	53                   	push   ebx
c001c62c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c62f:	83 c4 20             	add    esp,0x20
c001c632:	85 c0                	test   eax,eax
c001c634:	74 17                	je     c001c64d <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c636:	83 ec 0c             	sub    esp,0xc
c001c639:	68 d1 b7 02 c0       	push   0xc002b7d1
c001c63e:	e8 fa d9 ff ff       	call   c001a03d <Krnl::panic(char const*)>
c001c643:	83 c4 10             	add    esp,0x10
c001c646:	31 c0                	xor    eax,eax
c001c648:	e9 31 02 00 00       	jmp    c001c87e <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c64d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c653:	75 e1                	jne    c001c636 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c655:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c658:	85 c0                	test   eax,eax
c001c65a:	74 da                	je     c001c636 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c65c:	52                   	push   edx
c001c65d:	31 d2                	xor    edx,edx
c001c65f:	52                   	push   edx
c001c660:	50                   	push   eax
c001c661:	53                   	push   ebx
c001c662:	e8 29 6b ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001c667:	83 c4 10             	add    esp,0x10
c001c66a:	85 c0                	test   eax,eax
c001c66c:	75 c8                	jne    c001c636 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c66e:	83 ec 0c             	sub    esp,0xc
c001c671:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c675:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c679:	31 ed                	xor    ebp,ebp
c001c67b:	0f af c2             	imul   eax,edx
c001c67e:	50                   	push   eax
c001c67f:	e8 c2 31 ff ff       	call   c000f846 <malloc>
c001c684:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c686:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c68a:	89 34 24             	mov    DWORD PTR [esp],esi
c001c68d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c691:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c695:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c699:	0f af c2             	imul   eax,edx
c001c69c:	99                   	cdq    
c001c69d:	52                   	push   edx
c001c69e:	50                   	push   eax
c001c69f:	53                   	push   ebx
c001c6a0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c6a3:	83 c4 20             	add    esp,0x20
c001c6a6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c6ae:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c6b6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c6be:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c6c6:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c6ca:	0f 86 aa 00 00 00    	jbe    c001c77a <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c6d0:	0f b7 f5             	movzx  esi,bp
c001c6d3:	6b f6 28             	imul   esi,esi,0x28
c001c6d6:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c6da:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c6dd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c6e1:	50                   	push   eax
c001c6e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c6e6:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c6ea:	8b 16                	mov    edx,DWORD PTR [esi]
c001c6ec:	6b c0 28             	imul   eax,eax,0x28
c001c6ef:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c6f3:	89 d0                	mov    eax,edx
c001c6f5:	31 d2                	xor    edx,edx
c001c6f7:	52                   	push   edx
c001c6f8:	50                   	push   eax
c001c6f9:	53                   	push   ebx
c001c6fa:	e8 91 6a ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001c6ff:	83 c4 0c             	add    esp,0xc
c001c702:	6a 20                	push   0x20
c001c704:	6a 00                	push   0x0
c001c706:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c70a:	52                   	push   edx
c001c70b:	e8 68 40 fe ff       	call   c0000778 <memset>
c001c710:	58                   	pop    eax
c001c711:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c713:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c717:	51                   	push   ecx
c001c718:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c71c:	52                   	push   edx
c001c71d:	6a 00                	push   0x0
c001c71f:	6a 1f                	push   0x1f
c001c721:	53                   	push   ebx
c001c722:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c725:	83 c4 18             	add    esp,0x18
c001c728:	68 e8 b7 02 c0       	push   0xc002b7e8
c001c72d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c731:	52                   	push   edx
c001c732:	e8 89 41 fe ff       	call   c00008c0 <strcmp>
c001c737:	83 c4 10             	add    esp,0x10
c001c73a:	85 c0                	test   eax,eax
c001c73c:	75 0f                	jne    c001c74d <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c73e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c741:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c745:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c749:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c74d:	50                   	push   eax
c001c74e:	50                   	push   eax
c001c74f:	68 f0 b7 02 c0       	push   0xc002b7f0
c001c754:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c758:	50                   	push   eax
c001c759:	e8 62 41 fe ff       	call   c00008c0 <strcmp>
c001c75e:	83 c4 10             	add    esp,0x10
c001c761:	85 c0                	test   eax,eax
c001c763:	75 0f                	jne    c001c774 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c765:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c768:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c76c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c770:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c774:	45                   	inc    ebp
c001c775:	e9 4c ff ff ff       	jmp    c001c6c6 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c77a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c77f:	75 10                	jne    c001c791 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c781:	83 ec 0c             	sub    esp,0xc
c001c784:	68 f8 b7 02 c0       	push   0xc002b7f8
c001c789:	e8 af d8 ff ff       	call   c001a03d <Krnl::panic(char const*)>
c001c78e:	83 c4 10             	add    esp,0x10
c001c791:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c796:	75 10                	jne    c001c7a8 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c798:	83 ec 0c             	sub    esp,0xc
c001c79b:	68 f8 b7 02 c0       	push   0xc002b7f8
c001c7a0:	e8 98 d8 ff ff       	call   c001a03d <Krnl::panic(char const*)>
c001c7a5:	83 c4 10             	add    esp,0x10
c001c7a8:	31 d2                	xor    edx,edx
c001c7aa:	50                   	push   eax
c001c7ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7af:	52                   	push   edx
c001c7b0:	50                   	push   eax
c001c7b1:	53                   	push   ebx
c001c7b2:	e8 d9 69 ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001c7b7:	5a                   	pop    edx
c001c7b8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c7bc:	e8 85 30 ff ff       	call   c000f846 <malloc>
c001c7c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c7c9:	31 c9                	xor    ecx,ecx
c001c7cb:	5e                   	pop    esi
c001c7cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c7ce:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c7d2:	55                   	push   ebp
c001c7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7d7:	51                   	push   ecx
c001c7d8:	52                   	push   edx
c001c7d9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c7dd:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c7e1:	53                   	push   ebx
c001c7e2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7e5:	83 c4 14             	add    esp,0x14
c001c7e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c7ec:	e8 55 30 ff ff       	call   c000f846 <malloc>
c001c7f1:	89 c6                	mov    esi,eax
c001c7f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c7f5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c7f8:	56                   	push   esi
c001c7f9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c7fd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c801:	51                   	push   ecx
c001c802:	52                   	push   edx
c001c803:	53                   	push   ebx
c001c804:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c807:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c80b:	8b 15 a0 10 03 c0    	mov    edx,DWORD PTR ds:0xc00310a0
c001c811:	83 c4 1c             	add    esp,0x1c
c001c814:	c1 e8 04             	shr    eax,0x4
c001c817:	89 04 95 20 0f 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf0e0],eax
c001c81e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c822:	31 d2                	xor    edx,edx
c001c824:	52                   	push   edx
c001c825:	50                   	push   eax
c001c826:	53                   	push   ebx
c001c827:	e8 64 69 ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001c82c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c82e:	31 d2                	xor    edx,edx
c001c830:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c833:	56                   	push   esi
c001c834:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c838:	52                   	push   edx
c001c839:	50                   	push   eax
c001c83a:	53                   	push   ebx
c001c83b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c83e:	83 c4 14             	add    esp,0x14
c001c841:	53                   	push   ebx
c001c842:	e8 e9 68 ff ff       	call   c0013130 <File::close()>
c001c847:	5d                   	pop    ebp
c001c848:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c84c:	e8 05 30 ff ff       	call   c000f856 <free>
c001c851:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c854:	e8 fd 2f ff ff       	call   c000f856 <free>
c001c859:	a1 a0 10 03 c0       	mov    eax,ds:0xc00310a0
c001c85e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c862:	8d 50 01             	lea    edx,[eax+0x1]
c001c865:	89 0c 85 20 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefe0],ecx
c001c86c:	89 34 85 a0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf060],esi
c001c873:	89 15 a0 10 03 c0    	mov    DWORD PTR ds:0xc00310a0,edx
c001c879:	83 c4 10             	add    esp,0x10
c001c87c:	b0 01                	mov    al,0x1
c001c87e:	83 c4 5c             	add    esp,0x5c
c001c881:	5b                   	pop    ebx
c001c882:	5e                   	pop    esi
c001c883:	5f                   	pop    edi
c001c884:	5d                   	pop    ebp
c001c885:	c3                   	ret    

c001c886 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c886:	55                   	push   ebp
c001c887:	57                   	push   edi
c001c888:	56                   	push   esi
c001c889:	53                   	push   ebx
c001c88a:	81 ec 68 03 00 00    	sub    esp,0x368
c001c890:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c897:	8b 1d f4 10 03 c0    	mov    ebx,DWORD PTR ds:0xc00310f4
c001c89d:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c8a1:	68 14 01 00 00       	push   0x114
c001c8a6:	e8 9b 2f ff ff       	call   c000f846 <malloc>
c001c8ab:	83 c4 0c             	add    esp,0xc
c001c8ae:	89 c5                	mov    ebp,eax
c001c8b0:	53                   	push   ebx
c001c8b1:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c8b8:	50                   	push   eax
c001c8b9:	e8 b0 67 ff ff       	call   c001306e <File::File(char const*, Process*)>
c001c8be:	5e                   	pop    esi
c001c8bf:	5f                   	pop    edi
c001c8c0:	6a 01                	push   0x1
c001c8c2:	55                   	push   ebp
c001c8c3:	e8 0a 68 ff ff       	call   c00130d2 <File::open(FileOpenMode)>
c001c8c8:	83 c4 10             	add    esp,0x10
c001c8cb:	85 c0                	test   eax,eax
c001c8cd:	0f 85 8d 06 00 00    	jne    c001cf60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c8d3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c8db:	83 ec 0c             	sub    esp,0xc
c001c8de:	6a 34                	push   0x34
c001c8e0:	e8 61 2f ff ff       	call   c000f846 <malloc>
c001c8e5:	5b                   	pop    ebx
c001c8e6:	89 c7                	mov    edi,eax
c001c8e8:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c8ec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c8ef:	53                   	push   ebx
c001c8f0:	57                   	push   edi
c001c8f1:	6a 00                	push   0x0
c001c8f3:	6a 34                	push   0x34
c001c8f5:	55                   	push   ebp
c001c8f6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c8f9:	83 c4 20             	add    esp,0x20
c001c8fc:	85 c0                	test   eax,eax
c001c8fe:	0f 85 5c 06 00 00    	jne    c001cf60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c904:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c90a:	0f 85 50 06 00 00    	jne    c001cf60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c910:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c913:	85 c0                	test   eax,eax
c001c915:	0f 84 45 06 00 00    	je     c001cf60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c91b:	31 d2                	xor    edx,edx
c001c91d:	51                   	push   ecx
c001c91e:	52                   	push   edx
c001c91f:	50                   	push   eax
c001c920:	55                   	push   ebp
c001c921:	e8 6a 68 ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001c926:	83 c4 10             	add    esp,0x10
c001c929:	85 c0                	test   eax,eax
c001c92b:	0f 85 2f 06 00 00    	jne    c001cf60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c931:	83 ec 0c             	sub    esp,0xc
c001c934:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c937:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c93b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c93f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c943:	0f af c2             	imul   eax,edx
c001c946:	50                   	push   eax
c001c947:	e8 fa 2e ff ff       	call   c000f846 <malloc>
c001c94c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c94f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c953:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c956:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c95a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c95e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c962:	0f af c2             	imul   eax,edx
c001c965:	99                   	cdq    
c001c966:	52                   	push   edx
c001c967:	50                   	push   eax
c001c968:	55                   	push   ebp
c001c969:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c96c:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c96f:	83 c4 20             	add    esp,0x20
c001c972:	85 c0                	test   eax,eax
c001c974:	0f 84 e6 05 00 00    	je     c001cf60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c97a:	52                   	push   edx
c001c97b:	31 d2                	xor    edx,edx
c001c97d:	52                   	push   edx
c001c97e:	50                   	push   eax
c001c97f:	55                   	push   ebp
c001c980:	e8 0b 68 ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001c985:	83 c4 10             	add    esp,0x10
c001c988:	85 c0                	test   eax,eax
c001c98a:	0f 85 d0 05 00 00    	jne    c001cf60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c990:	83 ec 0c             	sub    esp,0xc
c001c993:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c997:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c99b:	31 f6                	xor    esi,esi
c001c99d:	0f af c2             	imul   eax,edx
c001c9a0:	50                   	push   eax
c001c9a1:	e8 a0 2e ff ff       	call   c000f846 <malloc>
c001c9a6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c9a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c9ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9b0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c9b4:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c9b8:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c9bc:	0f af c2             	imul   eax,edx
c001c9bf:	99                   	cdq    
c001c9c0:	52                   	push   edx
c001c9c1:	50                   	push   eax
c001c9c2:	55                   	push   ebp
c001c9c3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9c6:	83 c4 20             	add    esp,0x20
c001c9c9:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c9cd:	0f 86 8a 00 00 00    	jbe    c001ca5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c9d3:	0f b7 de             	movzx  ebx,si
c001c9d6:	c1 e3 05             	shl    ebx,0x5
c001c9d9:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c9dd:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c9e0:	75 75                	jne    c001ca57 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c9e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c9e5:	31 d2                	xor    edx,edx
c001c9e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c9eb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c9ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c9f2:	50                   	push   eax
c001c9f3:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c9f6:	52                   	push   edx
c001c9f7:	50                   	push   eax
c001c9f8:	55                   	push   ebp
c001c9f9:	e8 92 67 ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001c9fe:	83 c4 10             	add    esp,0x10
c001ca01:	85 c0                	test   eax,eax
c001ca03:	0f 85 57 05 00 00    	jne    c001cf60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ca09:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001ca10:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ca13:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001ca17:	31 d2                	xor    edx,edx
c001ca19:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001ca1d:	83 ec 0c             	sub    esp,0xc
c001ca20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ca24:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ca2b:	50                   	push   eax
c001ca2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ca30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca34:	52                   	push   edx
c001ca35:	50                   	push   eax
c001ca36:	55                   	push   ebp
c001ca37:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca3a:	83 c4 1c             	add    esp,0x1c
c001ca3d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ca40:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ca43:	50                   	push   eax
c001ca44:	6a 00                	push   0x0
c001ca46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca4a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001ca4e:	50                   	push   eax
c001ca4f:	e8 24 3d fe ff       	call   c0000778 <memset>
c001ca54:	83 c4 10             	add    esp,0x10
c001ca57:	46                   	inc    esi
c001ca58:	e9 6c ff ff ff       	jmp    c001c9c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001ca5d:	53                   	push   ebx
c001ca5e:	31 db                	xor    ebx,ebx
c001ca60:	68 00 01 00 00       	push   0x100
c001ca65:	6a 00                	push   0x0
c001ca67:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ca6b:	50                   	push   eax
c001ca6c:	e8 07 3d fe ff       	call   c0000778 <memset>
c001ca71:	83 c4 0c             	add    esp,0xc
c001ca74:	68 00 01 00 00       	push   0x100
c001ca79:	6a 00                	push   0x0
c001ca7b:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ca82:	50                   	push   eax
c001ca83:	e8 f0 3c fe ff       	call   c0000778 <memset>
c001ca88:	83 c4 10             	add    esp,0x10
c001ca8b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ca93:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ca9b:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001caa3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001caab:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001cab3:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001cab7:	0f 86 30 01 00 00    	jbe    c001cbed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001cabd:	0f b7 f3             	movzx  esi,bx
c001cac0:	6b f6 28             	imul   esi,esi,0x28
c001cac3:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cac7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001caca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cace:	52                   	push   edx
c001cacf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cad3:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001cad7:	8b 06                	mov    eax,DWORD PTR [esi]
c001cad9:	6b d2 28             	imul   edx,edx,0x28
c001cadc:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001cae0:	31 d2                	xor    edx,edx
c001cae2:	52                   	push   edx
c001cae3:	50                   	push   eax
c001cae4:	55                   	push   ebp
c001cae5:	e8 a6 66 ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001caea:	83 c4 0c             	add    esp,0xc
c001caed:	6a 20                	push   0x20
c001caef:	6a 00                	push   0x0
c001caf1:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001caf8:	51                   	push   ecx
c001caf9:	e8 7a 3c fe ff       	call   c0000778 <memset>
c001cafe:	59                   	pop    ecx
c001caff:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cb02:	8d 54 24 58          	lea    edx,[esp+0x58]
c001cb06:	52                   	push   edx
c001cb07:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001cb0e:	51                   	push   ecx
c001cb0f:	6a 00                	push   0x0
c001cb11:	6a 1f                	push   0x1f
c001cb13:	55                   	push   ebp
c001cb14:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb17:	83 c4 1c             	add    esp,0x1c
c001cb1a:	6a 09                	push   0x9
c001cb1c:	68 12 b8 02 c0       	push   0xc002b812
c001cb21:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cb28:	51                   	push   ecx
c001cb29:	e8 12 3b fe ff       	call   c0000640 <memcmp>
c001cb2e:	83 c4 10             	add    esp,0x10
c001cb31:	85 c0                	test   eax,eax
c001cb33:	75 21                	jne    c001cb56 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001cb35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb39:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb3d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cb41:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb45:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb48:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cb4f:	89 d0                	mov    eax,edx
c001cb51:	40                   	inc    eax
c001cb52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb56:	50                   	push   eax
c001cb57:	6a 09                	push   0x9
c001cb59:	68 1c b8 02 c0       	push   0xc002b81c
c001cb5e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb65:	50                   	push   eax
c001cb66:	e8 d5 3a fe ff       	call   c0000640 <memcmp>
c001cb6b:	83 c4 10             	add    esp,0x10
c001cb6e:	85 c0                	test   eax,eax
c001cb70:	75 21                	jne    c001cb93 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cb72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb76:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb7a:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cb7e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb82:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb85:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cb8c:	89 d0                	mov    eax,edx
c001cb8e:	40                   	inc    eax
c001cb8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb93:	50                   	push   eax
c001cb94:	50                   	push   eax
c001cb95:	68 e8 b7 02 c0       	push   0xc002b7e8
c001cb9a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cba1:	50                   	push   eax
c001cba2:	e8 19 3d fe ff       	call   c00008c0 <strcmp>
c001cba7:	83 c4 10             	add    esp,0x10
c001cbaa:	85 c0                	test   eax,eax
c001cbac:	75 0f                	jne    c001cbbd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cbae:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cbb1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbb9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cbbd:	50                   	push   eax
c001cbbe:	50                   	push   eax
c001cbbf:	68 f0 b7 02 c0       	push   0xc002b7f0
c001cbc4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbcb:	50                   	push   eax
c001cbcc:	e8 ef 3c fe ff       	call   c00008c0 <strcmp>
c001cbd1:	83 c4 10             	add    esp,0x10
c001cbd4:	85 c0                	test   eax,eax
c001cbd6:	75 0f                	jne    c001cbe7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cbd8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cbdb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cbdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cbe3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cbe7:	43                   	inc    ebx
c001cbe8:	e9 c6 fe ff ff       	jmp    c001cab3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cbed:	31 d2                	xor    edx,edx
c001cbef:	50                   	push   eax
c001cbf0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cbf4:	52                   	push   edx
c001cbf5:	50                   	push   eax
c001cbf6:	55                   	push   ebp
c001cbf7:	e8 94 65 ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001cbfc:	58                   	pop    eax
c001cbfd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cc01:	e8 40 2c ff ff       	call   c000f846 <malloc>
c001cc06:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc09:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cc0d:	31 d2                	xor    edx,edx
c001cc0f:	58                   	pop    eax
c001cc10:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cc14:	53                   	push   ebx
c001cc15:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cc19:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc1d:	52                   	push   edx
c001cc1e:	50                   	push   eax
c001cc1f:	55                   	push   ebp
c001cc20:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc23:	83 c4 14             	add    esp,0x14
c001cc26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc2a:	e8 17 2c ff ff       	call   c000f846 <malloc>
c001cc2f:	31 d2                	xor    edx,edx
c001cc31:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cc35:	83 c4 0c             	add    esp,0xc
c001cc38:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc3c:	52                   	push   edx
c001cc3d:	50                   	push   eax
c001cc3e:	55                   	push   ebp
c001cc3f:	e8 4c 65 ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001cc44:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc47:	31 d2                	xor    edx,edx
c001cc49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cc50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc54:	52                   	push   edx
c001cc55:	50                   	push   eax
c001cc56:	55                   	push   ebp
c001cc57:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc5a:	83 c4 20             	add    esp,0x20
c001cc5d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cc65:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cc69:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cc6d:	0f 84 f1 02 00 00    	je     c001cf64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001cc73:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cc7a:	31 d2                	xor    edx,edx
c001cc7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc80:	c1 e8 03             	shr    eax,0x3
c001cc83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cc87:	51                   	push   ecx
c001cc88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc8c:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cc90:	52                   	push   edx
c001cc91:	50                   	push   eax
c001cc92:	55                   	push   ebp
c001cc93:	e8 f8 64 ff ff       	call   c0013190 <File::seek(unsigned long long)>
c001cc98:	5b                   	pop    ebx
c001cc99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc9d:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cca4:	e8 9d 2b ff ff       	call   c000f846 <malloc>
c001cca9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ccac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ccb0:	31 d2                	xor    edx,edx
c001ccb2:	5e                   	pop    esi
c001ccb3:	8d 44 24 58          	lea    eax,[esp+0x58]
c001ccb7:	50                   	push   eax
c001ccb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccbc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ccc0:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001ccc7:	52                   	push   edx
c001ccc8:	50                   	push   eax
c001ccc9:	55                   	push   ebp
c001ccca:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cccd:	83 c4 20             	add    esp,0x20
c001ccd0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ccd8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ccdc:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cce0:	0f 8d 62 02 00 00    	jge    c001cf48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001cce6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ccea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccee:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001ccf3:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001ccf6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ccfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccfe:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001cd02:	89 d8                	mov    eax,ebx
c001cd04:	c1 e8 08             	shr    eax,0x8
c001cd07:	89 c6                	mov    esi,eax
c001cd09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cd0d:	c1 e6 04             	shl    esi,0x4
c001cd10:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001cd14:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001cd17:	85 d2                	test   edx,edx
c001cd19:	0f 85 bf 00 00 00    	jne    c001cdde <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd1f:	83 ec 0c             	sub    esp,0xc
c001cd22:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd26:	03 06                	add    eax,DWORD PTR [esi]
c001cd28:	50                   	push   eax
c001cd29:	e8 4b f8 ff ff       	call   c001c579 <Thr::getAddressOfKernelSymbol(char const*)>
c001cd2e:	83 c4 10             	add    esp,0x10
c001cd31:	89 c2                	mov    edx,eax
c001cd33:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cd38:	85 c0                	test   eax,eax
c001cd3a:	0f 85 9e 00 00 00    	jne    c001cdde <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd40:	83 ec 0c             	sub    esp,0xc
c001cd43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd47:	03 06                	add    eax,DWORD PTR [esi]
c001cd49:	50                   	push   eax
c001cd4a:	e8 a6 17 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001cd4f:	83 c4 10             	add    esp,0x10
c001cd52:	89 c2                	mov    edx,eax
c001cd54:	85 c0                	test   eax,eax
c001cd56:	0f 85 82 00 00 00    	jne    c001cdde <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd5c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cd60:	50                   	push   eax
c001cd61:	50                   	push   eax
c001cd62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd66:	03 06                	add    eax,DWORD PTR [esi]
c001cd68:	50                   	push   eax
c001cd69:	68 26 b8 02 c0       	push   0xc002b826
c001cd6e:	e8 a2 5d ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001cd73:	58                   	pop    eax
c001cd74:	5a                   	pop    edx
c001cd75:	68 40 b8 02 c0       	push   0xc002b840
c001cd7a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd81:	50                   	push   eax
c001cd82:	e8 ad 3a fe ff       	call   c0000834 <strcpy>
c001cd87:	59                   	pop    ecx
c001cd88:	58                   	pop    eax
c001cd89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd8d:	03 06                	add    eax,DWORD PTR [esi]
c001cd8f:	50                   	push   eax
c001cd90:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd97:	50                   	push   eax
c001cd98:	e8 d7 3b fe ff       	call   c0000974 <strcat>
c001cd9d:	58                   	pop    eax
c001cd9e:	5a                   	pop    edx
c001cd9f:	68 d6 b8 02 c0       	push   0xc002b8d6
c001cda4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cdab:	50                   	push   eax
c001cdac:	e8 c3 3b fe ff       	call   c0000974 <strcat>
c001cdb1:	83 c4 10             	add    esp,0x10
c001cdb4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cdb9:	0f 84 43 01 00 00    	je     c001cf02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001cdbf:	83 ec 0c             	sub    esp,0xc
c001cdc2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cdc9:	50                   	push   eax
c001cdca:	e8 6e d2 ff ff       	call   c001a03d <Krnl::panic(char const*)>
c001cdcf:	83 c4 10             	add    esp,0x10
c001cdd2:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cdd6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cdda:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cdde:	80 fb 01             	cmp    bl,0x1
c001cde1:	75 7d                	jne    c001ce60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001cde3:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cdea:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cdee:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cdf2:	01 ce                	add    esi,ecx
c001cdf4:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cdfa:	0f 94 c0             	sete   al
c001cdfd:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ce03:	0f 94 c3             	sete   bl
c001ce06:	09 c3                	or     ebx,eax
c001ce08:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce0a:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ce0f:	74 36                	je     c001ce47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001ce11:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001ce14:	84 db                	test   bl,bl
c001ce16:	75 0a                	jne    c001ce22 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001ce18:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce1c:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ce20:	76 37                	jbe    c001ce59 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001ce22:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001ce26:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ce2b:	0f 84 d1 00 00 00    	je     c001cf02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001ce31:	83 ec 0c             	sub    esp,0xc
c001ce34:	68 57 b8 02 c0       	push   0xc002b857
c001ce39:	e8 ff d1 ff ff       	call   c001a03d <Krnl::panic(char const*)>
c001ce3e:	83 c4 10             	add    esp,0x10
c001ce41:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ce45:	eb 12                	jmp    c001ce59 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001ce47:	01 c1                	add    ecx,eax
c001ce49:	84 db                	test   bl,bl
c001ce4b:	75 0c                	jne    c001ce59 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001ce4d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce51:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ce55:	77 02                	ja     c001ce59 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001ce57:	01 d1                	add    ecx,edx
c001ce59:	89 0e                	mov    DWORD PTR [esi],ecx
c001ce5b:	e9 df 00 00 00       	jmp    c001cf3f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001ce60:	80 fb 02             	cmp    bl,0x2
c001ce63:	75 71                	jne    c001ced6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001ce65:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001ce6c:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001ce70:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001ce74:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001ce7a:	74 15                	je     c001ce91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001ce7c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ce82:	74 0d                	je     c001ce91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001ce84:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce88:	83 e8 04             	sub    eax,0x4
c001ce8b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ce8f:	76 1f                	jbe    c001ceb0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001ce91:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001ce95:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ce9a:	74 66                	je     c001cf02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001ce9c:	83 ec 0c             	sub    esp,0xc
c001ce9f:	68 73 b8 02 c0       	push   0xc002b873
c001cea4:	e8 94 d1 ff ff       	call   c001a03d <Krnl::panic(char const*)>
c001cea9:	83 c4 10             	add    esp,0x10
c001ceac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ceb0:	8b 06                	mov    eax,DWORD PTR [esi]
c001ceb2:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ceb7:	74 13                	je     c001cecc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001ceb9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cebd:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001cec4:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001cec8:	01 c8                	add    eax,ecx
c001ceca:	eb 04                	jmp    c001ced0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001cecc:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001ced0:	01 c2                	add    edx,eax
c001ced2:	89 16                	mov    DWORD PTR [esi],edx
c001ced4:	eb 69                	jmp    c001cf3f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001ced6:	0f b6 db             	movzx  ebx,bl
c001ced9:	50                   	push   eax
c001ceda:	50                   	push   eax
c001cedb:	53                   	push   ebx
c001cedc:	68 8f b8 02 c0       	push   0xc002b88f
c001cee1:	e8 2f 5c ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001cee6:	83 c4 10             	add    esp,0x10
c001cee9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ceee:	74 12                	je     c001cf02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001cef0:	83 ec 0c             	sub    esp,0xc
c001cef3:	68 9a b8 02 c0       	push   0xc002b89a
c001cef8:	e8 40 d1 ff ff       	call   c001a03d <Krnl::panic(char const*)>
c001cefd:	83 c4 10             	add    esp,0x10
c001cf00:	eb 3d                	jmp    c001cf3f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001cf02:	83 ec 0c             	sub    esp,0xc
c001cf05:	55                   	push   ebp
c001cf06:	e8 25 62 ff ff       	call   c0013130 <File::close()>
c001cf0b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf0e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf11:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf14:	59                   	pop    ecx
c001cf15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf19:	e8 38 29 ff ff       	call   c000f856 <free>
c001cf1e:	5b                   	pop    ebx
c001cf1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf23:	e8 2e 29 ff ff       	call   c000f856 <free>
c001cf28:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf2b:	e8 26 29 ff ff       	call   c000f856 <free>
c001cf30:	5e                   	pop    esi
c001cf31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf35:	e8 1c 29 ff ff       	call   c000f856 <free>
c001cf3a:	83 c4 10             	add    esp,0x10
c001cf3d:	eb 21                	jmp    c001cf60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf3f:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cf43:	e9 90 fd ff ff       	jmp    c001ccd8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cf48:	83 ec 0c             	sub    esp,0xc
c001cf4b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf4f:	e8 02 29 ff ff       	call   c000f856 <free>
c001cf54:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cf58:	83 c4 10             	add    esp,0x10
c001cf5b:	e9 05 fd ff ff       	jmp    c001cc65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001cf60:	31 c0                	xor    eax,eax
c001cf62:	eb 33                	jmp    c001cf97 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001cf64:	83 ec 0c             	sub    esp,0xc
c001cf67:	55                   	push   ebp
c001cf68:	e8 c3 61 ff ff       	call   c0013130 <File::close()>
c001cf6d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf70:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf73:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf76:	58                   	pop    eax
c001cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf7b:	e8 d6 28 ff ff       	call   c000f856 <free>
c001cf80:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf83:	e8 ce 28 ff ff       	call   c000f856 <free>
c001cf88:	5a                   	pop    edx
c001cf89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf8d:	e8 c4 28 ff ff       	call   c000f856 <free>
c001cf92:	83 c4 10             	add    esp,0x10
c001cf95:	b0 01                	mov    al,0x1
c001cf97:	81 c4 5c 03 00 00    	add    esp,0x35c
c001cf9d:	5b                   	pop    ebx
c001cf9e:	5e                   	pop    esi
c001cf9f:	5f                   	pop    edi
c001cfa0:	5d                   	pop    ebp
c001cfa1:	c3                   	ret    

c001cfa2 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001cfa2:	56                   	push   esi
c001cfa3:	31 d2                	xor    edx,edx
c001cfa5:	53                   	push   ebx
c001cfa6:	8b 1d 00 09 03 c0    	mov    ebx,DWORD PTR ds:0xc0030900
c001cfac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cfb0:	39 d3                	cmp    ebx,edx
c001cfb2:	7e 1b                	jle    c001cfcf <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001cfb4:	8b 04 95 20 0b 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf4e0]
c001cfbb:	39 c8                	cmp    eax,ecx
c001cfbd:	77 0d                	ja     c001cfcc <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cfbf:	8b 34 95 20 09 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf6e0]
c001cfc6:	01 c6                	add    esi,eax
c001cfc8:	39 ce                	cmp    esi,ecx
c001cfca:	77 05                	ja     c001cfd1 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001cfcc:	42                   	inc    edx
c001cfcd:	eb e1                	jmp    c001cfb0 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001cfcf:	31 c0                	xor    eax,eax
c001cfd1:	5b                   	pop    ebx
c001cfd2:	5e                   	pop    esi
c001cfd3:	c3                   	ret    

c001cfd4 <Thr::getDriverNameFromAddress(unsigned long)>:
c001cfd4:	53                   	push   ebx
c001cfd5:	31 c0                	xor    eax,eax
c001cfd7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cfdb:	8b 1d 00 09 03 c0    	mov    ebx,DWORD PTR ds:0xc0030900
c001cfe1:	39 c3                	cmp    ebx,eax
c001cfe3:	7e 22                	jle    c001d007 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001cfe5:	8b 14 85 20 0b 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf4e0]
c001cfec:	39 ca                	cmp    edx,ecx
c001cfee:	77 14                	ja     c001d004 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cff0:	03 14 85 20 09 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf6e0]
c001cff7:	39 ca                	cmp    edx,ecx
c001cff9:	76 09                	jbe    c001d004 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cffb:	8b 04 85 20 0d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf2e0]
c001d002:	eb 05                	jmp    c001d009 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d004:	40                   	inc    eax
c001d005:	eb da                	jmp    c001cfe1 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d007:	31 c0                	xor    eax,eax
c001d009:	5b                   	pop    ebx
c001d00a:	c3                   	ret    

c001d00b <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d00b:	53                   	push   ebx
c001d00c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d010:	53                   	push   ebx
c001d011:	e8 8c ff ff ff       	call   c001cfa2 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d016:	5a                   	pop    edx
c001d017:	31 d2                	xor    edx,edx
c001d019:	85 c0                	test   eax,eax
c001d01b:	74 04                	je     c001d021 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d01d:	89 da                	mov    edx,ebx
c001d01f:	29 c2                	sub    edx,eax
c001d021:	89 d0                	mov    eax,edx
c001d023:	5b                   	pop    ebx
c001d024:	c3                   	ret    

c001d025 <Thr::loadDLL(char const*, bool)>:
c001d025:	55                   	push   ebp
c001d026:	57                   	push   edi
c001d027:	56                   	push   esi
c001d028:	53                   	push   ebx
c001d029:	81 ec 34 01 00 00    	sub    esp,0x134
c001d02f:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d036:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d03d:	56                   	push   esi
c001d03e:	68 b2 b8 02 c0       	push   0xc002b8b2
c001d043:	e8 cd 5a ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001d048:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d04f:	e8 f2 27 ff ff       	call   c000f846 <malloc>
c001d054:	83 c4 0c             	add    esp,0xc
c001d057:	89 c3                	mov    ebx,eax
c001d059:	ff 35 f4 10 03 c0    	push   DWORD PTR ds:0xc00310f4
c001d05f:	56                   	push   esi
c001d060:	50                   	push   eax
c001d061:	e8 08 60 ff ff       	call   c001306e <File::File(char const*, Process*)>
c001d066:	83 c4 10             	add    esp,0x10
c001d069:	85 db                	test   ebx,ebx
c001d06b:	75 3c                	jne    c001d0a9 <Thr::loadDLL(char const*, bool)+0x84>
c001d06d:	89 e8                	mov    eax,ebp
c001d06f:	84 c0                	test   al,al
c001d071:	0f 84 d5 01 00 00    	je     c001d24c <Thr::loadDLL(char const*, bool)+0x227>
c001d077:	57                   	push   edi
c001d078:	57                   	push   edi
c001d079:	68 c3 b8 02 c0       	push   0xc002b8c3
c001d07e:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d082:	57                   	push   edi
c001d083:	e8 ac 37 fe ff       	call   c0000834 <strcpy>
c001d088:	58                   	pop    eax
c001d089:	5a                   	pop    edx
c001d08a:	56                   	push   esi
c001d08b:	57                   	push   edi
c001d08c:	e8 e3 38 fe ff       	call   c0000974 <strcat>
c001d091:	59                   	pop    ecx
c001d092:	58                   	pop    eax
c001d093:	68 d6 b8 02 c0       	push   0xc002b8d6
c001d098:	57                   	push   edi
c001d099:	e8 d6 38 fe ff       	call   c0000974 <strcat>
c001d09e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d0a1:	e8 97 cf ff ff       	call   c001a03d <Krnl::panic(char const*)>
c001d0a6:	83 c4 10             	add    esp,0x10
c001d0a9:	51                   	push   ecx
c001d0aa:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d0ae:	50                   	push   eax
c001d0af:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d0b3:	50                   	push   eax
c001d0b4:	53                   	push   ebx
c001d0b5:	e8 c4 62 ff ff       	call   c001337e <File::stat(unsigned long long*, bool*)>
c001d0ba:	83 c4 10             	add    esp,0x10
c001d0bd:	85 db                	test   ebx,ebx
c001d0bf:	74 0c                	je     c001d0cd <Thr::loadDLL(char const*, bool)+0xa8>
c001d0c1:	83 ec 0c             	sub    esp,0xc
c001d0c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d0c6:	53                   	push   ebx
c001d0c7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d0ca:	83 c4 10             	add    esp,0x10
c001d0cd:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d0d2:	75 0a                	jne    c001d0de <Thr::loadDLL(char const*, bool)+0xb9>
c001d0d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d0d8:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d0dc:	75 3c                	jne    c001d11a <Thr::loadDLL(char const*, bool)+0xf5>
c001d0de:	89 e8                	mov    eax,ebp
c001d0e0:	84 c0                	test   al,al
c001d0e2:	0f 84 4c 01 00 00    	je     c001d234 <Thr::loadDLL(char const*, bool)+0x20f>
c001d0e8:	51                   	push   ecx
c001d0e9:	51                   	push   ecx
c001d0ea:	68 c3 b8 02 c0       	push   0xc002b8c3
c001d0ef:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d0f3:	53                   	push   ebx
c001d0f4:	e8 3b 37 fe ff       	call   c0000834 <strcpy>
c001d0f9:	5f                   	pop    edi
c001d0fa:	58                   	pop    eax
c001d0fb:	56                   	push   esi
c001d0fc:	53                   	push   ebx
c001d0fd:	e8 72 38 fe ff       	call   c0000974 <strcat>
c001d102:	58                   	pop    eax
c001d103:	5a                   	pop    edx
c001d104:	68 d6 b8 02 c0       	push   0xc002b8d6
c001d109:	53                   	push   ebx
c001d10a:	e8 65 38 fe ff       	call   c0000974 <strcat>
c001d10f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d112:	e8 26 cf ff ff       	call   c001a03d <Krnl::panic(char const*)>
c001d117:	83 c4 10             	add    esp,0x10
c001d11a:	e8 96 4b ff ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c001d11f:	51                   	push   ecx
c001d120:	6a 03                	push   0x3
c001d122:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d126:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d12a:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d130:	83 d3 00             	adc    ebx,0x0
c001d133:	89 ca                	mov    edx,ecx
c001d135:	89 d1                	mov    ecx,edx
c001d137:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d13b:	51                   	push   ecx
c001d13c:	50                   	push   eax
c001d13d:	e8 ae 51 ff ff       	call   c00122f0 <VAS::allocatePages(int, int)>
c001d142:	5f                   	pop    edi
c001d143:	89 c3                	mov    ebx,eax
c001d145:	58                   	pop    eax
c001d146:	53                   	push   ebx
c001d147:	68 d8 b8 02 c0       	push   0xc002b8d8
c001d14c:	e8 c4 59 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001d151:	89 34 24             	mov    DWORD PTR [esp],esi
c001d154:	e8 3b 36 fe ff       	call   c0000794 <strlen>
c001d159:	8b 3d 00 09 03 c0    	mov    edi,DWORD PTR ds:0xc0030900
c001d15f:	40                   	inc    eax
c001d160:	89 04 24             	mov    DWORD PTR [esp],eax
c001d163:	e8 de 26 ff ff       	call   c000f846 <malloc>
c001d168:	89 04 bd 20 0d 03 c0 	mov    DWORD PTR [edi*4-0x3ffcf2e0],eax
c001d16f:	58                   	pop    eax
c001d170:	a1 00 09 03 c0       	mov    eax,ds:0xc0030900
c001d175:	5a                   	pop    edx
c001d176:	56                   	push   esi
c001d177:	ff 34 85 20 0d 03 c0 	push   DWORD PTR [eax*4-0x3ffcf2e0]
c001d17e:	e8 b1 36 fe ff       	call   c0000834 <strcpy>
c001d183:	a1 00 09 03 c0       	mov    eax,ds:0xc0030900
c001d188:	8d 50 01             	lea    edx,[eax+0x1]
c001d18b:	89 1c 85 20 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf4e0],ebx
c001d192:	89 15 00 09 03 c0    	mov    DWORD PTR ds:0xc0030900,edx
c001d198:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d19c:	83 c4 0c             	add    esp,0xc
c001d19f:	89 14 85 20 09 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf6e0],edx
c001d1a6:	6a 01                	push   0x1
c001d1a8:	53                   	push   ebx
c001d1a9:	56                   	push   esi
c001d1aa:	e8 d7 f6 ff ff       	call   c001c886 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d1af:	83 c4 10             	add    esp,0x10
c001d1b2:	89 c7                	mov    edi,eax
c001d1b4:	84 c0                	test   al,al
c001d1b6:	0f 85 8c 00 00 00    	jne    c001d248 <Thr::loadDLL(char const*, bool)+0x223>
c001d1bc:	89 e8                	mov    eax,ebp
c001d1be:	84 c0                	test   al,al
c001d1c0:	74 76                	je     c001d238 <Thr::loadDLL(char const*, bool)+0x213>
c001d1c2:	83 ec 0c             	sub    esp,0xc
c001d1c5:	68 e5 b8 02 c0       	push   0xc002b8e5
c001d1ca:	e8 6e ce ff ff       	call   c001a03d <Krnl::panic(char const*)>
c001d1cf:	83 c4 10             	add    esp,0x10
c001d1d2:	eb 64                	jmp    c001d238 <Thr::loadDLL(char const*, bool)+0x213>
c001d1d4:	e8 dc 4a ff ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c001d1d9:	89 f5                	mov    ebp,esi
c001d1db:	c1 e5 0c             	shl    ebp,0xc
c001d1de:	52                   	push   edx
c001d1df:	01 dd                	add    ebp,ebx
c001d1e1:	52                   	push   edx
c001d1e2:	55                   	push   ebp
c001d1e3:	50                   	push   eax
c001d1e4:	e8 81 4c ff ff       	call   c0011e6a <VAS::getPageTableEntry(unsigned long)>
c001d1e9:	83 c4 10             	add    esp,0x10
c001d1ec:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d1ef:	75 0c                	jne    c001d1fd <Thr::loadDLL(char const*, bool)+0x1d8>
c001d1f1:	83 ec 0c             	sub    esp,0xc
c001d1f4:	55                   	push   ebp
c001d1f5:	e8 5f 2c ff ff       	call   c000fe59 <Phys::freePage(unsigned long)>
c001d1fa:	83 c4 10             	add    esp,0x10
c001d1fd:	46                   	inc    esi
c001d1fe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d202:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d206:	05 ff 0f 00 00       	add    eax,0xfff
c001d20b:	83 d2 00             	adc    edx,0x0
c001d20e:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d212:	c1 ea 0c             	shr    edx,0xc
c001d215:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d219:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d21d:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d221:	ba 00 00 00 00       	mov    edx,0x0
c001d226:	89 d0                	mov    eax,edx
c001d228:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d22c:	72 a6                	jb     c001d1d4 <Thr::loadDLL(char const*, bool)+0x1af>
c001d22e:	89 f8                	mov    eax,edi
c001d230:	84 c0                	test   al,al
c001d232:	75 18                	jne    c001d24c <Thr::loadDLL(char const*, bool)+0x227>
c001d234:	31 db                	xor    ebx,ebx
c001d236:	eb 14                	jmp    c001d24c <Thr::loadDLL(char const*, bool)+0x227>
c001d238:	83 ec 0c             	sub    esp,0xc
c001d23b:	68 04 b9 02 c0       	push   0xc002b904
c001d240:	e8 f8 cd ff ff       	call   c001a03d <Krnl::panic(char const*)>
c001d245:	83 c4 10             	add    esp,0x10
c001d248:	31 f6                	xor    esi,esi
c001d24a:	eb b2                	jmp    c001d1fe <Thr::loadDLL(char const*, bool)+0x1d9>
c001d24c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d252:	89 d8                	mov    eax,ebx
c001d254:	5b                   	pop    ebx
c001d255:	5e                   	pop    esi
c001d256:	5f                   	pop    edi
c001d257:	5d                   	pop    ebp
c001d258:	c3                   	ret    

c001d259 <Thr::executeDLL(unsigned long, void*)>:
c001d259:	56                   	push   esi
c001d25a:	53                   	push   ebx
c001d25b:	52                   	push   edx
c001d25c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d260:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d264:	85 db                	test   ebx,ebx
c001d266:	75 10                	jne    c001d278 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d268:	83 ec 0c             	sub    esp,0xc
c001d26b:	68 20 b9 02 c0       	push   0xc002b920
c001d270:	e8 c8 cd ff ff       	call   c001a03d <Krnl::panic(char const*)>
c001d275:	83 c4 10             	add    esp,0x10
c001d278:	50                   	push   eax
c001d279:	50                   	push   eax
c001d27a:	53                   	push   ebx
c001d27b:	68 4a b9 02 c0       	push   0xc002b94a
c001d280:	e8 90 58 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001d285:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d289:	89 d8                	mov    eax,ebx
c001d28b:	83 c4 14             	add    esp,0x14
c001d28e:	5b                   	pop    ebx
c001d28f:	5e                   	pop    esi
c001d290:	ff e0                	jmp    eax

c001d292 <changeTSS>:
c001d292:	83 ec 14             	sub    esp,0x14
c001d295:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d29a:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d29d:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d2a2:	c1 e2 15             	shl    edx,0x15
c001d2a5:	29 d0                	sub    eax,edx
c001d2a7:	50                   	push   eax
c001d2a8:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c001d2ad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2b3:	05 7c 11 00 00       	add    eax,0x117c
c001d2b8:	50                   	push   eax
c001d2b9:	e8 a6 41 ff ff       	call   c0011464 <TSS::setESP(unsigned long)>
c001d2be:	83 c4 1c             	add    esp,0x1c
c001d2c1:	c3                   	ret    

c001d2c2 <Process::addArgs(char**)>:
c001d2c2:	57                   	push   edi
c001d2c3:	56                   	push   esi
c001d2c4:	53                   	push   ebx
c001d2c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d2c9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d2cd:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d2d7:	85 ff                	test   edi,edi
c001d2d9:	74 3d                	je     c001d318 <Process::addArgs(char**)+0x56>
c001d2db:	8b 07                	mov    eax,DWORD PTR [edi]
c001d2dd:	85 c0                	test   eax,eax
c001d2df:	74 37                	je     c001d318 <Process::addArgs(char**)+0x56>
c001d2e1:	31 db                	xor    ebx,ebx
c001d2e3:	83 ec 0c             	sub    esp,0xc
c001d2e6:	50                   	push   eax
c001d2e7:	e8 a8 34 fe ff       	call   c0000794 <strlen>
c001d2ec:	40                   	inc    eax
c001d2ed:	89 04 24             	mov    DWORD PTR [esp],eax
c001d2f0:	e8 51 25 ff ff       	call   c000f846 <malloc>
c001d2f5:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d2fc:	5a                   	pop    edx
c001d2fd:	59                   	pop    ecx
c001d2fe:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d301:	43                   	inc    ebx
c001d302:	50                   	push   eax
c001d303:	e8 2c 35 fe ff       	call   c0000834 <strcpy>
c001d308:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d30e:	83 c4 10             	add    esp,0x10
c001d311:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d314:	85 c0                	test   eax,eax
c001d316:	75 cb                	jne    c001d2e3 <Process::addArgs(char**)+0x21>
c001d318:	5b                   	pop    ebx
c001d319:	5e                   	pop    esi
c001d31a:	5f                   	pop    edi
c001d31b:	c3                   	ret    

c001d31c <Process::Process(char const*, Process*, char**)>:
c001d31c:	56                   	push   esi
c001d31d:	53                   	push   ebx
c001d31e:	83 ec 14             	sub    esp,0x14
c001d321:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d325:	05 0c 02 00 00       	add    eax,0x20c
c001d32a:	bb 07 00 00 00       	mov    ebx,0x7
c001d32f:	89 c6                	mov    esi,eax
c001d331:	85 db                	test   ebx,ebx
c001d333:	78 12                	js     c001d347 <Process::Process(char const*, Process*, char**)+0x2b>
c001d335:	83 ec 0c             	sub    esp,0xc
c001d338:	56                   	push   esi
c001d339:	e8 24 b2 00 00       	call   c0028562 <ThreadControlBlock::ThreadControlBlock()>
c001d33e:	83 c4 10             	add    esp,0x10
c001d341:	83 c6 63             	add    esi,0x63
c001d344:	4b                   	dec    ebx
c001d345:	eb ea                	jmp    c001d331 <Process::Process(char const*, Process*, char**)+0x15>
c001d347:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d34b:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d352:	83 ec 0c             	sub    esp,0xc
c001d355:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d359:	e8 30 cb ff ff       	call   c0019e8e <Krnl::newProcessEnv(Process*)>
c001d35e:	83 c4 10             	add    esp,0x10
c001d361:	89 c2                	mov    edx,eax
c001d363:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d367:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d36d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d371:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d37a:	a1 10 d1 02 c0       	mov    eax,ds:0xc002d110
c001d37f:	8d 50 01             	lea    edx,[eax+0x1]
c001d382:	89 15 10 d1 02 c0    	mov    DWORD PTR ds:0xc002d110,edx
c001d388:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d38c:	89 02                	mov    DWORD PTR [edx],eax
c001d38e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001d396:	83 ec 0c             	sub    esp,0xc
c001d399:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d39d:	e8 a4 24 ff ff       	call   c000f846 <malloc>
c001d3a2:	83 c4 10             	add    esp,0x10
c001d3a5:	89 c3                	mov    ebx,eax
c001d3a7:	83 ec 08             	sub    esp,0x8
c001d3aa:	6a 00                	push   0x0
c001d3ac:	53                   	push   ebx
c001d3ad:	e8 e6 52 ff ff       	call   c0012698 <VAS::VAS(bool)>
c001d3b2:	83 c4 10             	add    esp,0x10
c001d3b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3b9:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d3bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3c3:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d3cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d3d5:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d3db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3df:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d3e5:	85 c0                	test   eax,eax
c001d3e7:	74 42                	je     c001d42b <Process::Process(char const*, Process*, char**)+0x10f>
c001d3e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3ed:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d3f3:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d3f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3fd:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d403:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d407:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d40d:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d413:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d417:	05 0c 01 00 00       	add    eax,0x10c
c001d41c:	83 ec 08             	sub    esp,0x8
c001d41f:	52                   	push   edx
c001d420:	50                   	push   eax
c001d421:	e8 0e 34 fe ff       	call   c0000834 <strcpy>
c001d426:	83 c4 10             	add    esp,0x10
c001d429:	eb 63                	jmp    c001d48e <Process::Process(char const*, Process*, char**)+0x172>
c001d42b:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001d433:	83 ec 0c             	sub    esp,0xc
c001d436:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d43a:	e8 07 24 ff ff       	call   c000f846 <malloc>
c001d43f:	83 c4 10             	add    esp,0x10
c001d442:	89 c3                	mov    ebx,eax
c001d444:	83 ec 08             	sub    esp,0x8
c001d447:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d44b:	53                   	push   ebx
c001d44c:	e8 11 3d ff ff       	call   c0011162 <VgaText::VgaText(char const*)>
c001d451:	83 c4 10             	add    esp,0x10
c001d454:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d458:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d45e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d462:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d468:	83 ec 0c             	sub    esp,0xc
c001d46b:	50                   	push   eax
c001d46c:	e8 e4 30 ff ff       	call   c0010555 <addToTerminalCycle(VgaText*)>
c001d471:	83 c4 10             	add    esp,0x10
c001d474:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d478:	05 0c 01 00 00       	add    eax,0x10c
c001d47d:	83 ec 08             	sub    esp,0x8
c001d480:	68 69 b9 02 c0       	push   0xc002b969
c001d485:	50                   	push   eax
c001d486:	e8 a9 33 fe ff       	call   c0000834 <strcpy>
c001d48b:	83 c4 10             	add    esp,0x10
c001d48e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d492:	83 c0 0c             	add    eax,0xc
c001d495:	83 ec 08             	sub    esp,0x8
c001d498:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d49c:	50                   	push   eax
c001d49d:	e8 92 33 fe ff       	call   c0000834 <strcpy>
c001d4a2:	83 c4 10             	add    esp,0x10
c001d4a5:	83 ec 08             	sub    esp,0x8
c001d4a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d4ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4b0:	e8 0d fe ff ff       	call   c001d2c2 <Process::addArgs(char**)>
c001d4b5:	83 c4 10             	add    esp,0x10
c001d4b8:	83 ec 08             	sub    esp,0x8
c001d4bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4c3:	e8 88 ee ff ff       	call   c001c350 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d4c8:	83 c4 10             	add    esp,0x10
c001d4cb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d4cf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d4d3:	83 f0 01             	xor    eax,0x1
c001d4d6:	88 c2                	mov    dl,al
c001d4d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4dc:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d4e2:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d4e7:	83 ec 08             	sub    esp,0x8
c001d4ea:	50                   	push   eax
c001d4eb:	68 64 ba 02 c0       	push   0xc002ba64
c001d4f0:	e8 20 56 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001d4f5:	83 c4 10             	add    esp,0x10
c001d4f8:	90                   	nop
c001d4f9:	83 c4 14             	add    esp,0x14
c001d4fc:	5b                   	pop    ebx
c001d4fd:	5e                   	pop    esi
c001d4fe:	c3                   	ret    
c001d4ff:	90                   	nop

c001d500 <Process::Process(bool, char const*, Process*, char**)>:
c001d500:	56                   	push   esi
c001d501:	53                   	push   ebx
c001d502:	83 ec 24             	sub    esp,0x24
c001d505:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d509:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d50d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d511:	05 0c 02 00 00       	add    eax,0x20c
c001d516:	bb 07 00 00 00       	mov    ebx,0x7
c001d51b:	89 c6                	mov    esi,eax
c001d51d:	85 db                	test   ebx,ebx
c001d51f:	78 12                	js     c001d533 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d521:	83 ec 0c             	sub    esp,0xc
c001d524:	56                   	push   esi
c001d525:	e8 38 b0 00 00       	call   c0028562 <ThreadControlBlock::ThreadControlBlock()>
c001d52a:	83 c4 10             	add    esp,0x10
c001d52d:	83 c6 63             	add    esi,0x63
c001d530:	4b                   	dec    ebx
c001d531:	eb ea                	jmp    c001d51d <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d533:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d537:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d53e:	83 ec 0c             	sub    esp,0xc
c001d541:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d545:	e8 44 c9 ff ff       	call   c0019e8e <Krnl::newProcessEnv(Process*)>
c001d54a:	83 c4 10             	add    esp,0x10
c001d54d:	89 c2                	mov    edx,eax
c001d54f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d553:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d559:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d55d:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d566:	a1 10 d1 02 c0       	mov    eax,ds:0xc002d110
c001d56b:	8d 50 01             	lea    edx,[eax+0x1]
c001d56e:	89 15 10 d1 02 c0    	mov    DWORD PTR ds:0xc002d110,edx
c001d574:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d578:	89 02                	mov    DWORD PTR [edx],eax
c001d57a:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001d582:	83 ec 0c             	sub    esp,0xc
c001d585:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d589:	e8 b8 22 ff ff       	call   c000f846 <malloc>
c001d58e:	83 c4 10             	add    esp,0x10
c001d591:	89 c3                	mov    ebx,eax
c001d593:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d598:	83 ec 08             	sub    esp,0x8
c001d59b:	50                   	push   eax
c001d59c:	53                   	push   ebx
c001d59d:	e8 f6 50 ff ff       	call   c0012698 <VAS::VAS(bool)>
c001d5a2:	83 c4 10             	add    esp,0x10
c001d5a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5a9:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d5af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5b3:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d5bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5c1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d5c5:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d5cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5cf:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d5d5:	85 c0                	test   eax,eax
c001d5d7:	74 42                	je     c001d61b <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d5d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5dd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d5e3:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d5e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5ed:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d5f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5f7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d5fd:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d603:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d607:	05 0c 01 00 00       	add    eax,0x10c
c001d60c:	83 ec 08             	sub    esp,0x8
c001d60f:	52                   	push   edx
c001d610:	50                   	push   eax
c001d611:	e8 1e 32 fe ff       	call   c0000834 <strcpy>
c001d616:	83 c4 10             	add    esp,0x10
c001d619:	eb 63                	jmp    c001d67e <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d61b:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001d623:	83 ec 0c             	sub    esp,0xc
c001d626:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d62a:	e8 17 22 ff ff       	call   c000f846 <malloc>
c001d62f:	83 c4 10             	add    esp,0x10
c001d632:	89 c3                	mov    ebx,eax
c001d634:	83 ec 08             	sub    esp,0x8
c001d637:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d63b:	53                   	push   ebx
c001d63c:	e8 21 3b ff ff       	call   c0011162 <VgaText::VgaText(char const*)>
c001d641:	83 c4 10             	add    esp,0x10
c001d644:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d648:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d64e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d652:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d658:	83 ec 0c             	sub    esp,0xc
c001d65b:	50                   	push   eax
c001d65c:	e8 f4 2e ff ff       	call   c0010555 <addToTerminalCycle(VgaText*)>
c001d661:	83 c4 10             	add    esp,0x10
c001d664:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d668:	05 0c 01 00 00       	add    eax,0x10c
c001d66d:	83 ec 08             	sub    esp,0x8
c001d670:	68 69 b9 02 c0       	push   0xc002b969
c001d675:	50                   	push   eax
c001d676:	e8 b9 31 fe ff       	call   c0000834 <strcpy>
c001d67b:	83 c4 10             	add    esp,0x10
c001d67e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d682:	83 c0 0c             	add    eax,0xc
c001d685:	83 ec 08             	sub    esp,0x8
c001d688:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d68c:	50                   	push   eax
c001d68d:	e8 a2 31 fe ff       	call   c0000834 <strcpy>
c001d692:	83 c4 10             	add    esp,0x10
c001d695:	83 ec 08             	sub    esp,0x8
c001d698:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d69c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d6a0:	e8 1d fc ff ff       	call   c001d2c2 <Process::addArgs(char**)>
c001d6a5:	83 c4 10             	add    esp,0x10
c001d6a8:	90                   	nop
c001d6a9:	83 c4 24             	add    esp,0x24
c001d6ac:	5b                   	pop    ebx
c001d6ad:	5e                   	pop    esi
c001d6ae:	c3                   	ret    

c001d6af <disableIRQs()>:
c001d6af:	fa                   	cli    
c001d6b0:	ff 05 cc 10 03 c0    	inc    DWORD PTR ds:0xc00310cc
c001d6b6:	c3                   	ret    

c001d6b7 <getIRQNestingLevel()>:
c001d6b7:	a1 cc 10 03 c0       	mov    eax,ds:0xc00310cc
c001d6bc:	c3                   	ret    

c001d6bd <enableIRQs()>:
c001d6bd:	a1 cc 10 03 c0       	mov    eax,ds:0xc00310cc
c001d6c2:	48                   	dec    eax
c001d6c3:	a3 cc 10 03 c0       	mov    ds:0xc00310cc,eax
c001d6c8:	75 01                	jne    c001d6cb <enableIRQs()+0xe>
c001d6ca:	fb                   	sti    
c001d6cb:	c3                   	ret    

c001d6cc <lockScheduler()>:
c001d6cc:	eb e1                	jmp    c001d6af <disableIRQs()>

c001d6ce <unlockScheduler()>:
c001d6ce:	eb ed                	jmp    c001d6bd <enableIRQs()>

c001d6d0 <userModeEntryPoint(void*)>:
c001d6d0:	83 ec 0c             	sub    esp,0xc
c001d6d3:	e8 f6 ff ff ff       	call   c001d6ce <unlockScheduler()>
c001d6d8:	fb                   	sti    
c001d6d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d6de:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d6e1:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d6e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d6eb:	83 c4 0c             	add    esp,0xc
c001d6ee:	e9 37 2c fe ff       	jmp    c000032a <goToUsermode>

c001d6f3 <lockStuff()>:
c001d6f3:	e8 b7 ff ff ff       	call   c001d6af <disableIRQs()>
c001d6f8:	ff 05 c8 10 03 c0    	inc    DWORD PTR ds:0xc00310c8
c001d6fe:	c3                   	ret    

c001d6ff <taskStartupFunction>:
c001d6ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d704:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d707:	c3                   	ret    

c001d708 <updateTimeUsed()>:
c001d708:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c001d70d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d713:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d71a:	74 50                	je     c001d76c <updateTimeUsed()+0x64>
c001d71c:	57                   	push   edi
c001d71d:	56                   	push   esi
c001d71e:	53                   	push   ebx
c001d71f:	0f 31                	rdtsc  
c001d721:	89 c1                	mov    ecx,eax
c001d723:	a3 08 11 03 c0       	mov    ds:0xc0031108,eax
c001d728:	2b 0d f8 10 03 c0    	sub    ecx,DWORD PTR ds:0xc00310f8
c001d72e:	89 d3                	mov    ebx,edx
c001d730:	89 0d 00 11 03 c0    	mov    DWORD PTR ds:0xc0031100,ecx
c001d736:	1b 1d fc 10 03 c0    	sbb    ebx,DWORD PTR ds:0xc00310fc
c001d73c:	a3 f8 10 03 c0       	mov    ds:0xc00310f8,eax
c001d741:	89 1d 04 11 03 c0    	mov    DWORD PTR ds:0xc0031104,ebx
c001d747:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d74c:	89 15 0c 11 03 c0    	mov    DWORD PTR ds:0xc003110c,edx
c001d752:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001d755:	89 15 fc 10 03 c0    	mov    DWORD PTR ds:0xc00310fc,edx
c001d75b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001d75e:	01 f1                	add    ecx,esi
c001d760:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001d763:	11 fb                	adc    ebx,edi
c001d765:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001d768:	5b                   	pop    ebx
c001d769:	5e                   	pop    esi
c001d76a:	5f                   	pop    edi
c001d76b:	c3                   	ret    
c001d76c:	c3                   	ret    

c001d76d <switchToThread(ThreadControlBlock*)>:
c001d76d:	53                   	push   ebx
c001d76e:	83 ec 08             	sub    esp,0x8
c001d771:	a1 c8 10 03 c0       	mov    eax,ds:0xc00310c8
c001d776:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d77a:	85 c0                	test   eax,eax
c001d77c:	75 30                	jne    c001d7ae <switchToThread(ThreadControlBlock*)+0x41>
c001d77e:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001d781:	3c ff                	cmp    al,0xff
c001d783:	74 25                	je     c001d7aa <switchToThread(ThreadControlBlock*)+0x3d>
c001d785:	0f b6 d0             	movzx  edx,al
c001d788:	b8 84 03 00 00       	mov    eax,0x384
c001d78d:	29 d0                	sub    eax,edx
c001d78f:	c1 e0 10             	shl    eax,0x10
c001d792:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001d795:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001d798:	e8 6b ff ff ff       	call   c001d708 <updateTimeUsed()>
c001d79d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001d7a1:	83 c4 08             	add    esp,0x8
c001d7a4:	5b                   	pop    ebx
c001d7a5:	e9 b8 2b fe ff       	jmp    c0000362 <switchToThreadASM>
c001d7aa:	31 c0                	xor    eax,eax
c001d7ac:	eb e7                	jmp    c001d795 <switchToThread(ThreadControlBlock*)+0x28>
c001d7ae:	c7 05 c4 10 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00310c4,0x1
c001d7b8:	83 c4 08             	add    esp,0x8
c001d7bb:	5b                   	pop    ebx
c001d7bc:	c3                   	ret    
c001d7bd:	90                   	nop

c001d7be <Semaphore::Semaphore(int)>:
c001d7be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d7c6:	89 10                	mov    DWORD PTR [eax],edx
c001d7c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7cc:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d7d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d7de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7e2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d7e9:	90                   	nop
c001d7ea:	c3                   	ret    
c001d7eb:	90                   	nop

c001d7ec <Mutex::Mutex()>:
c001d7ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7f0:	6a 01                	push   0x1
c001d7f2:	50                   	push   eax
c001d7f3:	e8 c6 ff ff ff       	call   c001d7be <Semaphore::Semaphore(int)>
c001d7f8:	83 c4 08             	add    esp,0x8
c001d7fb:	90                   	nop
c001d7fc:	c3                   	ret    
c001d7fd:	90                   	nop

c001d7fe <Process::createThread(void (*)(void*), void*, int)>:
c001d7fe:	55                   	push   ebp
c001d7ff:	31 c9                	xor    ecx,ecx
c001d801:	57                   	push   edi
c001d802:	56                   	push   esi
c001d803:	53                   	push   ebx
c001d804:	83 ec 1c             	sub    esp,0x1c
c001d807:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d80b:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d812:	89 f2                	mov    edx,esi
c001d814:	0f b7 c2             	movzx  eax,dx
c001d817:	83 e2 01             	and    edx,0x1
c001d81a:	74 14                	je     c001d830 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001d81c:	d1 f8                	sar    eax,1
c001d81e:	41                   	inc    ecx
c001d81f:	89 c2                	mov    edx,eax
c001d821:	83 f9 10             	cmp    ecx,0x10
c001d824:	75 ee                	jne    c001d814 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d826:	83 c4 1c             	add    esp,0x1c
c001d829:	31 c0                	xor    eax,eax
c001d82b:	5b                   	pop    ebx
c001d82c:	5e                   	pop    esi
c001d82d:	5f                   	pop    edi
c001d82e:	5d                   	pop    ebp
c001d82f:	c3                   	ret    
c001d830:	83 ec 08             	sub    esp,0x8
c001d833:	b8 01 00 00 00       	mov    eax,0x1
c001d838:	d3 e0                	shl    eax,cl
c001d83a:	09 c6                	or     esi,eax
c001d83c:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d842:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d849:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001d84c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d84f:	01 ce                	add    esi,ecx
c001d851:	89 f0                	mov    eax,esi
c001d853:	c1 e0 05             	shl    eax,0x5
c001d856:	01 c6                	add    esi,eax
c001d858:	8d 04 33             	lea    eax,[ebx+esi*1]
c001d85b:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001d861:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d867:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001d86b:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d871:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001d877:	89 ca                	mov    edx,ecx
c001d879:	f7 da                	neg    edx
c001d87b:	c1 e2 15             	shl    edx,0x15
c001d87e:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001d884:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001d88a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001d88e:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d898:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d89e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d8a2:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001d8a8:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d8b2:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d8bc:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001d8c3:	50                   	push   eax
c001d8c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d8c8:	68 e8 10 03 c0       	push   0xc00310e8
c001d8cd:	e8 1e ab 00 00       	call   c00283f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d8d2:	83 c4 10             	add    esp,0x10
c001d8d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d8d9:	83 c4 1c             	add    esp,0x1c
c001d8dc:	5b                   	pop    ebx
c001d8dd:	5e                   	pop    esi
c001d8de:	5f                   	pop    edi
c001d8df:	5d                   	pop    ebp
c001d8e0:	c3                   	ret    
c001d8e1:	90                   	nop

c001d8e2 <Process::createUserThread()>:
c001d8e2:	83 ec 0c             	sub    esp,0xc
c001d8e5:	68 80 00 00 00       	push   0x80
c001d8ea:	6a 00                	push   0x0
c001d8ec:	68 d0 d6 01 c0       	push   0xc001d6d0
c001d8f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d8f5:	e8 04 ff ff ff       	call   c001d7fe <Process::createThread(void (*)(void*), void*, int)>
c001d8fa:	83 c4 1c             	add    esp,0x1c
c001d8fd:	c3                   	ret    

c001d8fe <setupMultitasking(void (*)())>:
c001d8fe:	56                   	push   esi
c001d8ff:	53                   	push   ebx
c001d900:	53                   	push   ebx
c001d901:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d905:	eb 10                	jmp    c001d917 <setupMultitasking(void (*)())+0x19>
c001d907:	83 ec 0c             	sub    esp,0xc
c001d90a:	68 e8 10 03 c0       	push   0xc00310e8
c001d90f:	e8 2e aa 00 00       	call   c0028342 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d914:	83 c4 10             	add    esp,0x10
c001d917:	83 ec 0c             	sub    esp,0xc
c001d91a:	68 e8 10 03 c0       	push   0xc00310e8
c001d91f:	e8 02 aa 00 00       	call   c0028326 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d924:	83 c4 10             	add    esp,0x10
c001d927:	84 c0                	test   al,al
c001d929:	74 dc                	je     c001d907 <setupMultitasking(void (*)())+0x9>
c001d92b:	83 ec 0c             	sub    esp,0xc
c001d92e:	68 3f 07 00 00       	push   0x73f
c001d933:	e8 0e 1f ff ff       	call   c000f846 <malloc>
c001d938:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d93f:	89 c3                	mov    ebx,eax
c001d941:	6a 00                	push   0x0
c001d943:	68 6d b9 02 c0       	push   0xc002b96d
c001d948:	6a 01                	push   0x1
c001d94a:	50                   	push   eax
c001d94b:	e8 b0 fb ff ff       	call   c001d500 <Process::Process(bool, char const*, Process*, char**)>
c001d950:	83 c4 18             	add    esp,0x18
c001d953:	89 1d f4 10 03 c0    	mov    DWORD PTR ds:0xc00310f4,ebx
c001d959:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d95f:	68 8c ba 02 c0       	push   0xc002ba8c
c001d964:	e8 ac 51 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001d969:	58                   	pop    eax
c001d96a:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d970:	e8 62 33 ff ff       	call   c0010cd7 <setActiveTerminal(VgaText*)>
c001d975:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d97d:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d983:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d986:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d990:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d996:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d99c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d9a6:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d9b0:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d9ba:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d9c0:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d9c6:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d9d0:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d9d6:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d9e0:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d9e6:	5a                   	pop    edx
c001d9e7:	59                   	pop    ecx
c001d9e8:	68 69 b9 02 c0       	push   0xc002b969
c001d9ed:	50                   	push   eax
c001d9ee:	e8 41 2e fe ff       	call   c0000834 <strcpy>
c001d9f3:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d9fa:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d9fe:	83 c4 14             	add    esp,0x14
c001da01:	5b                   	pop    ebx
c001da02:	5e                   	pop    esi
c001da03:	e9 4c 29 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001da08 <schedule()>:
c001da08:	a1 c8 10 03 c0       	mov    eax,ds:0xc00310c8
c001da0d:	85 c0                	test   eax,eax
c001da0f:	74 0b                	je     c001da1c <schedule()+0x14>
c001da11:	c7 05 c4 10 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00310c4,0x1
c001da1b:	c3                   	ret    
c001da1c:	53                   	push   ebx
c001da1d:	83 ec 14             	sub    esp,0x14
c001da20:	68 e8 10 03 c0       	push   0xc00310e8
c001da25:	e8 fc a8 00 00       	call   c0028326 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001da2a:	83 c4 10             	add    esp,0x10
c001da2d:	84 c0                	test   al,al
c001da2f:	75 38                	jne    c001da69 <schedule()+0x61>
c001da31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da36:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001da39:	4a                   	dec    edx
c001da3a:	74 32                	je     c001da6e <schedule()+0x66>
c001da3c:	83 ec 0c             	sub    esp,0xc
c001da3f:	68 e8 10 03 c0       	push   0xc00310e8
c001da44:	e8 d5 a8 00 00       	call   c002831e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001da49:	c7 04 24 e8 10 03 c0 	mov    DWORD PTR [esp],0xc00310e8
c001da50:	89 c3                	mov    ebx,eax
c001da52:	e8 eb a8 00 00       	call   c0028342 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001da57:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001da5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da61:	e8 07 fd ff ff       	call   c001d76d <switchToThread(ThreadControlBlock*)>
c001da66:	83 c4 10             	add    esp,0x10
c001da69:	83 c4 08             	add    esp,0x8
c001da6c:	5b                   	pop    ebx
c001da6d:	c3                   	ret    
c001da6e:	83 ec 08             	sub    esp,0x8
c001da71:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001da78:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001da7e:	68 e8 10 03 c0       	push   0xc00310e8
c001da83:	e8 68 a9 00 00       	call   c00283f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001da88:	83 c4 10             	add    esp,0x10
c001da8b:	eb af                	jmp    c001da3c <schedule()+0x34>

c001da8d <unlockStuff()>:
c001da8d:	a1 c8 10 03 c0       	mov    eax,ds:0xc00310c8
c001da92:	48                   	dec    eax
c001da93:	a3 c8 10 03 c0       	mov    ds:0xc00310c8,eax
c001da98:	75 09                	jne    c001daa3 <unlockStuff()+0x16>
c001da9a:	a1 c4 10 03 c0       	mov    eax,ds:0xc00310c4
c001da9f:	85 c0                	test   eax,eax
c001daa1:	75 05                	jne    c001daa8 <unlockStuff()+0x1b>
c001daa3:	e9 15 fc ff ff       	jmp    c001d6bd <enableIRQs()>
c001daa8:	83 ec 0c             	sub    esp,0xc
c001daab:	c7 05 c4 10 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00310c4,0x0
c001dab5:	e8 4e ff ff ff       	call   c001da08 <schedule()>
c001daba:	83 c4 0c             	add    esp,0xc
c001dabd:	e9 fb fb ff ff       	jmp    c001d6bd <enableIRQs()>

c001dac2 <Semaphore::tryAcquire()>:
c001dac2:	83 ec 0c             	sub    esp,0xc
c001dac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dac9:	e8 25 fc ff ff       	call   c001d6f3 <lockStuff()>
c001dace:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001dad1:	3b 10                	cmp    edx,DWORD PTR [eax]
c001dad3:	7c 0b                	jl     c001dae0 <Semaphore::tryAcquire()+0x1e>
c001dad5:	e8 b3 ff ff ff       	call   c001da8d <unlockStuff()>
c001dada:	31 c0                	xor    eax,eax
c001dadc:	83 c4 0c             	add    esp,0xc
c001dadf:	c3                   	ret    
c001dae0:	42                   	inc    edx
c001dae1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001dae4:	e8 a4 ff ff ff       	call   c001da8d <unlockStuff()>
c001dae9:	b0 01                	mov    al,0x1
c001daeb:	83 c4 0c             	add    esp,0xc
c001daee:	c3                   	ret    
c001daef:	90                   	nop

c001daf0 <Semaphore::assertLocked(char const*)>:
c001daf0:	83 ec 0c             	sub    esp,0xc
c001daf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001daf7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dafb:	e8 f3 fb ff ff       	call   c001d6f3 <lockStuff()>
c001db00:	8b 08                	mov    ecx,DWORD PTR [eax]
c001db02:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001db05:	7c 05                	jl     c001db0c <Semaphore::assertLocked(char const*)+0x1c>
c001db07:	83 c4 0c             	add    esp,0xc
c001db0a:	eb 81                	jmp    c001da8d <unlockStuff()>
c001db0c:	83 ec 0c             	sub    esp,0xc
c001db0f:	52                   	push   edx
c001db10:	e8 28 c5 ff ff       	call   c001a03d <Krnl::panic(char const*)>
c001db15:	83 c4 10             	add    esp,0x10
c001db18:	83 c4 0c             	add    esp,0xc
c001db1b:	e9 6d ff ff ff       	jmp    c001da8d <unlockStuff()>

c001db20 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001db20:	83 ec 0c             	sub    esp,0xc
c001db23:	e8 8f fb ff ff       	call   c001d6b7 <getIRQNestingLevel()>
c001db28:	83 ec 08             	sub    esp,0x8
c001db2b:	50                   	push   eax
c001db2c:	68 c0 ba 02 c0       	push   0xc002bac0
c001db31:	e8 df 4f ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001db36:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db3f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001db42:	e8 c1 fe ff ff       	call   c001da08 <schedule()>
c001db47:	e8 82 fb ff ff       	call   c001d6ce <unlockScheduler()>
c001db4c:	e8 66 fb ff ff       	call   c001d6b7 <getIRQNestingLevel()>
c001db51:	5a                   	pop    edx
c001db52:	59                   	pop    ecx
c001db53:	50                   	push   eax
c001db54:	68 f4 ba 02 c0       	push   0xc002baf4
c001db59:	e8 b7 4f ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001db5e:	83 c4 1c             	add    esp,0x1c
c001db61:	c3                   	ret    

c001db62 <blockTask(TaskState)>:
c001db62:	83 ec 0c             	sub    esp,0xc
c001db65:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db69:	e8 5e fb ff ff       	call   c001d6cc <lockScheduler()>
c001db6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db73:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001db76:	e8 8d fe ff ff       	call   c001da08 <schedule()>
c001db7b:	83 c4 0c             	add    esp,0xc
c001db7e:	e9 4b fb ff ff       	jmp    c001d6ce <unlockScheduler()>

c001db83 <waitTask(int, int*, int)>:
c001db83:	83 ec 18             	sub    esp,0x18
c001db86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db8b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001db8f:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001db92:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db96:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db9b:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001db9e:	6a 07                	push   0x7
c001dba0:	e8 bd ff ff ff       	call   c001db62 <blockTask(TaskState)>
c001dba5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbaa:	83 c4 10             	add    esp,0x10
c001dbad:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001dbb0:	85 d2                	test   edx,edx
c001dbb2:	74 0a                	je     c001dbbe <waitTask(int, int*, int)+0x3b>
c001dbb4:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001dbb7:	89 02                	mov    DWORD PTR [edx],eax
c001dbb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbbe:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001dbc1:	83 c4 0c             	add    esp,0xc
c001dbc4:	c3                   	ret    

c001dbc5 <nanoSleepUntil(unsigned long long)>:
c001dbc5:	83 ec 0c             	sub    esp,0xc
c001dbc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbcc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dbd0:	3b 05 10 e2 02 c0    	cmp    eax,DWORD PTR ds:0xc002e210
c001dbd6:	89 d1                	mov    ecx,edx
c001dbd8:	1b 0d 14 e2 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e214
c001dbde:	73 04                	jae    c001dbe4 <nanoSleepUntil(unsigned long long)+0x1f>
c001dbe0:	83 c4 0c             	add    esp,0xc
c001dbe3:	c3                   	ret    
c001dbe4:	e8 0a fb ff ff       	call   c001d6f3 <lockStuff()>
c001dbe9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dbef:	83 ec 08             	sub    esp,0x8
c001dbf2:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001dbf5:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001dbf8:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dbfe:	68 dc 10 03 c0       	push   0xc00310dc
c001dc03:	e8 e8 a7 00 00       	call   c00283f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dc08:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001dc0f:	e8 4e ff ff ff       	call   c001db62 <blockTask(TaskState)>
c001dc14:	83 c4 1c             	add    esp,0x1c
c001dc17:	e9 71 fe ff ff       	jmp    c001da8d <unlockStuff()>

c001dc1c <nanoSleep(unsigned long long)>:
c001dc1c:	a1 10 e2 02 c0       	mov    eax,ds:0xc002e210
c001dc21:	8b 15 14 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e214
c001dc27:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dc2b:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dc2f:	eb 94                	jmp    c001dbc5 <nanoSleepUntil(unsigned long long)>

c001dc31 <sleep(unsigned long long)>:
c001dc31:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dc39:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dc3e:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dc42:	01 ca                	add    edx,ecx
c001dc44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dc48:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dc4c:	eb ce                	jmp    c001dc1c <nanoSleep(unsigned long long)>

c001dc4e <Semaphore::acquire()>:
c001dc4e:	83 ec 0c             	sub    esp,0xc
c001dc51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc55:	e8 99 fa ff ff       	call   c001d6f3 <lockStuff()>
c001dc5a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001dc5d:	3b 10                	cmp    edx,DWORD PTR [eax]
c001dc5f:	7d 0c                	jge    c001dc6d <Semaphore::acquire()+0x1f>
c001dc61:	42                   	inc    edx
c001dc62:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001dc65:	83 c4 0c             	add    esp,0xc
c001dc68:	e9 20 fe ff ff       	jmp    c001da8d <unlockStuff()>
c001dc6d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001dc73:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001dc7a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001dc7d:	85 d2                	test   edx,edx
c001dc7f:	74 2a                	je     c001dcab <Semaphore::acquire()+0x5d>
c001dc81:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001dc84:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dc8a:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001dc8d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001dc93:	83 ec 0c             	sub    esp,0xc
c001dc96:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001dc99:	6a 05                	push   0x5
c001dc9b:	e8 c2 fe ff ff       	call   c001db62 <blockTask(TaskState)>
c001dca0:	83 c4 10             	add    esp,0x10
c001dca3:	83 c4 0c             	add    esp,0xc
c001dca6:	e9 e2 fd ff ff       	jmp    c001da8d <unlockStuff()>
c001dcab:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001dcb1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001dcb4:	eb d7                	jmp    c001dc8d <Semaphore::acquire()+0x3f>

c001dcb6 <taskReturned>:
c001dcb6:	83 ec 18             	sub    esp,0x18
c001dcb9:	68 28 bb 02 c0       	push   0xc002bb28
c001dcbe:	e8 7a c3 ff ff       	call   c001a03d <Krnl::panic(char const*)>
c001dcc3:	83 c4 10             	add    esp,0x10
c001dcc6:	83 ec 0c             	sub    esp,0xc
c001dcc9:	6a 02                	push   0x2
c001dccb:	e8 92 fe ff ff       	call   c001db62 <blockTask(TaskState)>
c001dcd0:	e8 f7 f9 ff ff       	call   c001d6cc <lockScheduler()>
c001dcd5:	e8 2e fd ff ff       	call   c001da08 <schedule()>
c001dcda:	e8 ef f9 ff ff       	call   c001d6ce <unlockScheduler()>
c001dcdf:	83 c4 10             	add    esp,0x10
c001dce2:	eb e2                	jmp    c001dcc6 <taskReturned+0x10>

c001dce4 <unblockTask(ThreadControlBlock*)>:
c001dce4:	53                   	push   ebx
c001dce5:	83 ec 08             	sub    esp,0x8
c001dce8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dcec:	e8 db f9 ff ff       	call   c001d6cc <lockScheduler()>
c001dcf1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dcf4:	85 c0                	test   eax,eax
c001dcf6:	74 5c                	je     c001dd54 <unblockTask(ThreadControlBlock*)+0x70>
c001dcf8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dcfb:	48                   	dec    eax
c001dcfc:	74 31                	je     c001dd2f <unblockTask(ThreadControlBlock*)+0x4b>
c001dcfe:	83 ec 0c             	sub    esp,0xc
c001dd01:	68 e8 10 03 c0       	push   0xc00310e8
c001dd06:	e8 13 a6 00 00       	call   c002831e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dd0b:	83 c4 10             	add    esp,0x10
c001dd0e:	85 c0                	test   eax,eax
c001dd10:	75 17                	jne    c001dd29 <unblockTask(ThreadControlBlock*)+0x45>
c001dd12:	eb 65                	jmp    c001dd79 <unblockTask(ThreadControlBlock*)+0x95>
c001dd14:	83 ec 08             	sub    esp,0x8
c001dd17:	50                   	push   eax
c001dd18:	68 e8 10 03 c0       	push   0xc00310e8
c001dd1d:	e8 d6 a8 00 00       	call   c00285f8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001dd22:	83 c4 10             	add    esp,0x10
c001dd25:	85 c0                	test   eax,eax
c001dd27:	74 50                	je     c001dd79 <unblockTask(ThreadControlBlock*)+0x95>
c001dd29:	39 c3                	cmp    ebx,eax
c001dd2b:	75 e7                	jne    c001dd14 <unblockTask(ThreadControlBlock*)+0x30>
c001dd2d:	eb 1c                	jmp    c001dd4b <unblockTask(ThreadControlBlock*)+0x67>
c001dd2f:	83 ec 0c             	sub    esp,0xc
c001dd32:	68 18 bc 02 c0       	push   0xc002bc18
c001dd37:	e8 d9 4d ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001dd3c:	c7 04 24 a4 bb 02 c0 	mov    DWORD PTR [esp],0xc002bba4
c001dd43:	e8 cd 4d ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001dd48:	83 c4 10             	add    esp,0x10
c001dd4b:	83 c4 08             	add    esp,0x8
c001dd4e:	5b                   	pop    ebx
c001dd4f:	e9 7a f9 ff ff       	jmp    c001d6ce <unlockScheduler()>
c001dd54:	83 ec 0c             	sub    esp,0xc
c001dd57:	68 5c bb 02 c0       	push   0xc002bb5c
c001dd5c:	e8 b4 4d ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001dd61:	c7 04 24 a4 bb 02 c0 	mov    DWORD PTR [esp],0xc002bba4
c001dd68:	e8 a8 4d ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001dd6d:	83 c4 10             	add    esp,0x10
c001dd70:	83 c4 08             	add    esp,0x8
c001dd73:	5b                   	pop    ebx
c001dd74:	e9 55 f9 ff ff       	jmp    c001d6ce <unlockScheduler()>
c001dd79:	83 ec 08             	sub    esp,0x8
c001dd7c:	53                   	push   ebx
c001dd7d:	68 e8 10 03 c0       	push   0xc00310e8
c001dd82:	e8 69 a6 00 00       	call   c00283f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dd87:	83 c4 10             	add    esp,0x10
c001dd8a:	83 c4 08             	add    esp,0x8
c001dd8d:	5b                   	pop    ebx
c001dd8e:	e9 3b f9 ff ff       	jmp    c001d6ce <unlockScheduler()>

c001dd93 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001dd93:	55                   	push   ebp
c001dd94:	57                   	push   edi
c001dd95:	56                   	push   esi
c001dd96:	53                   	push   ebx
c001dd97:	83 ec 1c             	sub    esp,0x1c
c001dd9a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dd9e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dda1:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001dda7:	85 ff                	test   edi,edi
c001dda9:	7e 20                	jle    c001ddcb <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001ddab:	31 f6                	xor    esi,esi
c001ddad:	83 ec 0c             	sub    esp,0xc
c001ddb0:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001ddb7:	46                   	inc    esi
c001ddb8:	e8 99 1a ff ff       	call   c000f856 <free>
c001ddbd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ddc0:	83 c4 10             	add    esp,0x10
c001ddc3:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001ddc9:	7f e2                	jg     c001ddad <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001ddcb:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ddd5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ddda:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001dddd:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001dde0:	d3 c0                	rol    eax,cl
c001dde2:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001dde9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ddec:	89 f7                	mov    edi,esi
c001ddee:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001ddf6:	0f 85 74 01 00 00    	jne    c001df70 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001ddfc:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001de02:	85 ed                	test   ebp,ebp
c001de04:	74 1b                	je     c001de21 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001de06:	83 ec 0c             	sub    esp,0xc
c001de09:	55                   	push   ebp
c001de0a:	e8 9b bf ff ff       	call   c0019daa <EnvVarContainer::~EnvVarContainer()>
c001de0f:	59                   	pop    ecx
c001de10:	5e                   	pop    esi
c001de11:	6a 0c                	push   0xc
c001de13:	55                   	push   ebp
c001de14:	e8 1c 4c ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c001de19:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001de1c:	83 c4 10             	add    esp,0x10
c001de1f:	89 f7                	mov    edi,esi
c001de21:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001de27:	85 c0                	test   eax,eax
c001de29:	0f 84 aa 00 00 00    	je     c001ded9 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001de2f:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001de32:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001de36:	31 c9                	xor    ecx,ecx
c001de38:	eb 10                	jmp    c001de4a <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001de3a:	41                   	inc    ecx
c001de3b:	83 f9 10             	cmp    ecx,0x10
c001de3e:	0f 84 95 00 00 00    	je     c001ded9 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001de44:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001de4a:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001de51:	d3 fa                	sar    edx,cl
c001de53:	83 e2 01             	and    edx,0x1
c001de56:	74 e2                	je     c001de3a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001de58:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001de5b:	01 ca                	add    edx,ecx
c001de5d:	89 d5                	mov    ebp,edx
c001de5f:	c1 e5 05             	shl    ebp,0x5
c001de62:	01 ea                	add    edx,ebp
c001de64:	01 d0                	add    eax,edx
c001de66:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001de6c:	83 fd 07             	cmp    ebp,0x7
c001de6f:	75 c9                	jne    c001de3a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001de71:	05 40 02 00 00       	add    eax,0x240
c001de76:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001de79:	83 fd ff             	cmp    ebp,0xffffffff
c001de7c:	0f 8c 08 01 00 00    	jl     c001df8a <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001de82:	0f 84 b9 01 00 00    	je     c001e041 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001de88:	85 ed                	test   ebp,ebp
c001de8a:	0f 84 a0 01 00 00    	je     c001e030 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001de90:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001de92:	75 a6                	jne    c001de3a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001de94:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001de9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001de9e:	01 d0                	add    eax,edx
c001dea0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001dea4:	83 ec 0c             	sub    esp,0xc
c001dea7:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001dead:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001deb0:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001deb6:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001debd:	50                   	push   eax
c001debe:	e8 21 fe ff ff       	call   c001dce4 <unblockTask(ThreadControlBlock*)>
c001dec3:	83 c4 10             	add    esp,0x10
c001dec6:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dec9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001decd:	89 f7                	mov    edi,esi
c001decf:	41                   	inc    ecx
c001ded0:	83 f9 10             	cmp    ecx,0x10
c001ded3:	0f 85 6b ff ff ff    	jne    c001de44 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001ded9:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001dedf:	85 c0                	test   eax,eax
c001dee1:	74 5d                	je     c001df40 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001dee3:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001dee9:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001deef:	74 4f                	je     c001df40 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001def1:	83 ec 0c             	sub    esp,0xc
c001def4:	68 e8 10 03 c0       	push   0xc00310e8
c001def9:	e8 20 a4 00 00       	call   c002831e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001defe:	c7 04 24 e8 10 03 c0 	mov    DWORD PTR [esp],0xc00310e8
c001df05:	89 c7                	mov    edi,eax
c001df07:	e8 1a a4 00 00       	call   c0028326 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001df0c:	83 c4 10             	add    esp,0x10
c001df0f:	84 c0                	test   al,al
c001df11:	0f 84 e4 00 00 00    	je     c001dffb <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001df17:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df1a:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001df20:	85 d2                	test   edx,edx
c001df22:	74 0f                	je     c001df33 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001df24:	83 ec 0c             	sub    esp,0xc
c001df27:	8b 02                	mov    eax,DWORD PTR [edx]
c001df29:	52                   	push   edx
c001df2a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001df2d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001df30:	83 c4 10             	add    esp,0x10
c001df33:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001df3d:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001df40:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001df46:	85 db                	test   ebx,ebx
c001df48:	74 16                	je     c001df60 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001df4a:	83 ec 0c             	sub    esp,0xc
c001df4d:	53                   	push   ebx
c001df4e:	e8 31 41 ff ff       	call   c0012084 <VAS::~VAS()>
c001df53:	58                   	pop    eax
c001df54:	5a                   	pop    edx
c001df55:	6a 10                	push   0x10
c001df57:	53                   	push   ebx
c001df58:	e8 d8 4a ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c001df5d:	83 c4 10             	add    esp,0x10
c001df60:	83 ec 0c             	sub    esp,0xc
c001df63:	68 74 b9 02 c0       	push   0xc002b974
c001df68:	e8 a8 4b ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001df6d:	83 c4 10             	add    esp,0x10
c001df70:	83 ec 08             	sub    esp,0x8
c001df73:	68 3f 07 00 00       	push   0x73f
c001df78:	68 82 b9 02 c0       	push   0xc002b982
c001df7d:	e8 93 4b ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001df82:	83 c4 2c             	add    esp,0x2c
c001df85:	5b                   	pop    ebx
c001df86:	5e                   	pop    esi
c001df87:	5f                   	pop    edi
c001df88:	5d                   	pop    ebp
c001df89:	c3                   	ret    
c001df8a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001df8e:	83 ec 0c             	sub    esp,0xc
c001df91:	68 5c bc 02 c0       	push   0xc002bc5c
c001df96:	e8 a2 c0 ff ff       	call   c001a03d <Krnl::panic(char const*)>
c001df9b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df9e:	83 c4 10             	add    esp,0x10
c001dfa1:	89 f7                	mov    edi,esi
c001dfa3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dfa7:	e9 8e fe ff ff       	jmp    c001de3a <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dfac:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dfb2:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001dfb8:	75 1c                	jne    c001dfd6 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001dfba:	83 ec 0c             	sub    esp,0xc
c001dfbd:	68 c4 bc 02 c0       	push   0xc002bcc4
c001dfc2:	e8 4e 4b ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001dfc7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001dfce:	e8 8f fb ff ff       	call   c001db62 <blockTask(TaskState)>
c001dfd3:	83 c4 10             	add    esp,0x10
c001dfd6:	83 ec 08             	sub    esp,0x8
c001dfd9:	56                   	push   esi
c001dfda:	68 e8 10 03 c0       	push   0xc00310e8
c001dfdf:	e8 0c a4 00 00       	call   c00283f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dfe4:	c7 04 24 e8 10 03 c0 	mov    DWORD PTR [esp],0xc00310e8
c001dfeb:	e8 2e a3 00 00       	call   c002831e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dff0:	83 c4 10             	add    esp,0x10
c001dff3:	39 f8                	cmp    eax,edi
c001dff5:	0f 84 1c ff ff ff    	je     c001df17 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001dffb:	83 ec 0c             	sub    esp,0xc
c001dffe:	68 e8 10 03 c0       	push   0xc00310e8
c001e003:	e8 16 a3 00 00       	call   c002831e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e008:	c7 04 24 e8 10 03 c0 	mov    DWORD PTR [esp],0xc00310e8
c001e00f:	89 c6                	mov    esi,eax
c001e011:	e8 2c a3 00 00       	call   c0028342 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e016:	83 c4 10             	add    esp,0x10
c001e019:	39 f3                	cmp    ebx,esi
c001e01b:	74 b9                	je     c001dfd6 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e01d:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e020:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e023:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e029:	75 ab                	jne    c001dfd6 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e02b:	e9 7c ff ff ff       	jmp    c001dfac <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e030:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e034:	83 ec 0c             	sub    esp,0xc
c001e037:	68 90 bc 02 c0       	push   0xc002bc90
c001e03c:	e9 55 ff ff ff       	jmp    c001df96 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e041:	8b 36                	mov    esi,DWORD PTR [esi]
c001e043:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e047:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e04a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e04d:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e053:	01 d7                	add    edi,edx
c001e055:	89 f8                	mov    eax,edi
c001e057:	e9 44 fe ff ff       	jmp    c001dea0 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e05c <cleanerTaskFunction(void*)>:
c001e05c:	53                   	push   ebx
c001e05d:	83 ec 08             	sub    esp,0x8
c001e060:	e8 69 f6 ff ff       	call   c001d6ce <unlockScheduler()>
c001e065:	e8 62 f6 ff ff       	call   c001d6cc <lockScheduler()>
c001e06a:	80 3d ac 10 03 c0 00 	cmp    BYTE PTR ds:0xc00310ac,0x0
c001e071:	0f 85 8e 00 00 00    	jne    c001e105 <cleanerTaskFunction(void*)+0xa9>
c001e077:	83 ec 0c             	sub    esp,0xc
c001e07a:	6a 02                	push   0x2
c001e07c:	e8 9f fa ff ff       	call   c001db20 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e081:	83 c4 10             	add    esp,0x10
c001e084:	c6 05 ac 10 03 c0 00 	mov    BYTE PTR ds:0xc00310ac,0x0
c001e08b:	e8 63 f6 ff ff       	call   c001d6f3 <lockStuff()>
c001e090:	e8 37 f6 ff ff       	call   c001d6cc <lockScheduler()>
c001e095:	83 ec 0c             	sub    esp,0xc
c001e098:	68 d0 10 03 c0       	push   0xc00310d0
c001e09d:	e8 84 a2 00 00       	call   c0028326 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e0a2:	83 c4 10             	add    esp,0x10
c001e0a5:	84 c0                	test   al,al
c001e0a7:	75 40                	jne    c001e0e9 <cleanerTaskFunction(void*)+0x8d>
c001e0a9:	83 ec 0c             	sub    esp,0xc
c001e0ac:	68 d0 10 03 c0       	push   0xc00310d0
c001e0b1:	e8 68 a2 00 00       	call   c002831e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e0b6:	c7 04 24 d0 10 03 c0 	mov    DWORD PTR [esp],0xc00310d0
c001e0bd:	89 c3                	mov    ebx,eax
c001e0bf:	e8 7e a2 00 00       	call   c0028342 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e0c4:	c7 04 24 98 b9 02 c0 	mov    DWORD PTR [esp],0xc002b998
c001e0cb:	e8 45 4a ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e0d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e0d3:	e8 bb fc ff ff       	call   c001dd93 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e0d8:	c7 04 24 b1 b9 02 c0 	mov    DWORD PTR [esp],0xc002b9b1
c001e0df:	e8 31 4a ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e0e4:	83 c4 10             	add    esp,0x10
c001e0e7:	eb ac                	jmp    c001e095 <cleanerTaskFunction(void*)+0x39>
c001e0e9:	e8 e0 f5 ff ff       	call   c001d6ce <unlockScheduler()>
c001e0ee:	e8 9a f9 ff ff       	call   c001da8d <unlockStuff()>
c001e0f3:	e8 d4 f5 ff ff       	call   c001d6cc <lockScheduler()>
c001e0f8:	80 3d ac 10 03 c0 00 	cmp    BYTE PTR ds:0xc00310ac,0x0
c001e0ff:	0f 84 72 ff ff ff    	je     c001e077 <cleanerTaskFunction(void*)+0x1b>
c001e105:	e8 c4 f5 ff ff       	call   c001d6ce <unlockScheduler()>
c001e10a:	e9 75 ff ff ff       	jmp    c001e084 <cleanerTaskFunction(void*)+0x28>

c001e10f <terminateTask(int)>:
c001e10f:	83 ec 14             	sub    esp,0x14
c001e112:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e117:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e11a:	83 c0 0c             	add    eax,0xc
c001e11d:	50                   	push   eax
c001e11e:	68 ec bc 02 c0       	push   0xc002bcec
c001e123:	e8 ed 49 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e128:	e8 c6 f5 ff ff       	call   c001d6f3 <lockStuff()>
c001e12d:	e8 9a f5 ff ff       	call   c001d6cc <lockScheduler()>
c001e132:	c7 04 24 c4 b9 02 c0 	mov    DWORD PTR [esp],0xc002b9c4
c001e139:	e8 d7 49 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e13e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e142:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e147:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e14a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e14f:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e152:	5a                   	pop    edx
c001e153:	59                   	pop    ecx
c001e154:	50                   	push   eax
c001e155:	68 d0 10 03 c0       	push   0xc00310d0
c001e15a:	e8 91 a2 00 00       	call   c00283f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e15f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e164:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e16b:	c7 04 24 de b9 02 c0 	mov    DWORD PTR [esp],0xc002b9de
c001e172:	e8 9e 49 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e177:	83 c4 10             	add    esp,0x10
c001e17a:	a1 a8 10 03 c0       	mov    eax,ds:0xc00310a8
c001e17f:	85 c0                	test   eax,eax
c001e181:	74 5a                	je     c001e1dd <terminateTask(int)+0xce>
c001e183:	83 ec 0c             	sub    esp,0xc
c001e186:	68 f8 b9 02 c0       	push   0xc002b9f8
c001e18b:	e8 85 49 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e190:	58                   	pop    eax
c001e191:	c6 05 ac 10 03 c0 01 	mov    BYTE PTR ds:0xc00310ac,0x1
c001e198:	ff 35 a8 10 03 c0    	push   DWORD PTR ds:0xc00310a8
c001e19e:	e8 41 fb ff ff       	call   c001dce4 <unblockTask(ThreadControlBlock*)>
c001e1a3:	c7 04 24 12 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba12
c001e1aa:	e8 66 49 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e1af:	83 c4 10             	add    esp,0x10
c001e1b2:	e8 17 f5 ff ff       	call   c001d6ce <unlockScheduler()>
c001e1b7:	e8 d1 f8 ff ff       	call   c001da8d <unlockStuff()>
c001e1bc:	83 ec 0c             	sub    esp,0xc
c001e1bf:	68 4a ba 02 c0       	push   0xc002ba4a
c001e1c4:	e8 4c 49 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e1c9:	83 c4 10             	add    esp,0x10
c001e1cc:	e8 fb f4 ff ff       	call   c001d6cc <lockScheduler()>
c001e1d1:	e8 32 f8 ff ff       	call   c001da08 <schedule()>
c001e1d6:	e8 f3 f4 ff ff       	call   c001d6ce <unlockScheduler()>
c001e1db:	eb ef                	jmp    c001e1cc <terminateTask(int)+0xbd>
c001e1dd:	83 ec 0c             	sub    esp,0xc
c001e1e0:	68 2c ba 02 c0       	push   0xc002ba2c
c001e1e5:	e8 2b 49 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e1ea:	83 c4 10             	add    esp,0x10
c001e1ed:	eb c3                	jmp    c001e1b2 <terminateTask(int)+0xa3>

c001e1ef <Thr::terminateFromIRQ(int)>:
c001e1ef:	83 ec 18             	sub    esp,0x18
c001e1f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e1f6:	e8 14 ff ff ff       	call   c001e10f <terminateTask(int)>
c001e1fb:	90                   	nop

c001e1fc <Semaphore::release()>:
c001e1fc:	83 ec 0c             	sub    esp,0xc
c001e1ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e203:	e8 eb f4 ff ff       	call   c001d6f3 <lockStuff()>
c001e208:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e20b:	85 d2                	test   edx,edx
c001e20d:	74 1a                	je     c001e229 <Semaphore::release()+0x2d>
c001e20f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e212:	83 ec 0c             	sub    esp,0xc
c001e215:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e218:	52                   	push   edx
c001e219:	e8 c6 fa ff ff       	call   c001dce4 <unblockTask(ThreadControlBlock*)>
c001e21e:	83 c4 10             	add    esp,0x10
c001e221:	83 c4 0c             	add    esp,0xc
c001e224:	e9 64 f8 ff ff       	jmp    c001da8d <unlockStuff()>
c001e229:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e22c:	83 c4 0c             	add    esp,0xc
c001e22f:	e9 59 f8 ff ff       	jmp    c001da8d <unlockStuff()>

c001e234 <__static_initialization_and_destruction_0(int, int)>:
c001e234:	83 ec 0c             	sub    esp,0xc
c001e237:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e23c:	0f 85 88 00 00 00    	jne    c001e2ca <__static_initialization_and_destruction_0(int, int)+0x96>
c001e242:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e24a:	75 7e                	jne    c001e2ca <__static_initialization_and_destruction_0(int, int)+0x96>
c001e24c:	83 ec 0c             	sub    esp,0xc
c001e24f:	68 e8 10 03 c0       	push   0xc00310e8
c001e254:	e8 47 a3 00 00       	call   c00285a0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e259:	83 c4 10             	add    esp,0x10
c001e25c:	83 ec 04             	sub    esp,0x4
c001e25f:	68 a4 ca 02 c0       	push   0xc002caa4
c001e264:	68 e8 10 03 c0       	push   0xc00310e8
c001e269:	68 60 85 02 c0       	push   0xc0028560
c001e26e:	e8 3c 47 ff ff       	call   c00129af <__cxa_atexit>
c001e273:	83 c4 10             	add    esp,0x10
c001e276:	83 ec 0c             	sub    esp,0xc
c001e279:	68 dc 10 03 c0       	push   0xc00310dc
c001e27e:	e8 1d a3 00 00       	call   c00285a0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e283:	83 c4 10             	add    esp,0x10
c001e286:	83 ec 04             	sub    esp,0x4
c001e289:	68 a4 ca 02 c0       	push   0xc002caa4
c001e28e:	68 dc 10 03 c0       	push   0xc00310dc
c001e293:	68 60 85 02 c0       	push   0xc0028560
c001e298:	e8 12 47 ff ff       	call   c00129af <__cxa_atexit>
c001e29d:	83 c4 10             	add    esp,0x10
c001e2a0:	83 ec 0c             	sub    esp,0xc
c001e2a3:	68 d0 10 03 c0       	push   0xc00310d0
c001e2a8:	e8 f3 a2 00 00       	call   c00285a0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e2ad:	83 c4 10             	add    esp,0x10
c001e2b0:	83 ec 04             	sub    esp,0x4
c001e2b3:	68 a4 ca 02 c0       	push   0xc002caa4
c001e2b8:	68 d0 10 03 c0       	push   0xc00310d0
c001e2bd:	68 60 85 02 c0       	push   0xc0028560
c001e2c2:	e8 e8 46 ff ff       	call   c00129af <__cxa_atexit>
c001e2c7:	83 c4 10             	add    esp,0x10
c001e2ca:	90                   	nop
c001e2cb:	83 c4 0c             	add    esp,0xc
c001e2ce:	c3                   	ret    

c001e2cf <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e2cf:	83 ec 0c             	sub    esp,0xc
c001e2d2:	83 ec 08             	sub    esp,0x8
c001e2d5:	68 ff ff 00 00       	push   0xffff
c001e2da:	6a 01                	push   0x1
c001e2dc:	e8 53 ff ff ff       	call   c001e234 <__static_initialization_and_destruction_0(int, int)>
c001e2e1:	83 c4 10             	add    esp,0x10
c001e2e4:	83 c4 0c             	add    esp,0xc
c001e2e7:	c3                   	ret    

c001e2e8 <Vm::inbv(unsigned short)>:
c001e2e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e2ec:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e2f1:	75 06                	jne    c001e2f9 <Vm::inbv(unsigned short)+0x11>
c001e2f3:	a0 2c 11 03 c0       	mov    al,ds:0xc003112c
c001e2f8:	c3                   	ret    
c001e2f9:	ec                   	in     al,dx
c001e2fa:	c3                   	ret    

c001e2fb <Vm::outbv(unsigned short, unsigned char)>:
c001e2fb:	53                   	push   ebx
c001e2fc:	83 ec 08             	sub    esp,0x8
c001e2ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e303:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e307:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e30c:	75 38                	jne    c001e346 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e30e:	0f b6 c3             	movzx  eax,bl
c001e311:	51                   	push   ecx
c001e312:	51                   	push   ecx
c001e313:	50                   	push   eax
c001e314:	68 0b bd 02 c0       	push   0xc002bd0b
c001e319:	e8 f7 47 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e31e:	8b 15 2c 11 03 c0    	mov    edx,DWORD PTR ds:0xc003112c
c001e324:	83 c4 10             	add    esp,0x10
c001e327:	8d 42 01             	lea    eax,[edx+0x1]
c001e32a:	88 9a 40 11 03 c0    	mov    BYTE PTR [edx-0x3ffceec0],bl
c001e330:	a3 2c 11 03 c0       	mov    ds:0xc003112c,eax
c001e335:	83 f8 20             	cmp    eax,0x20
c001e338:	75 0f                	jne    c001e349 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e33a:	c7 05 2c 11 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003112c,0x1f
c001e344:	eb 03                	jmp    c001e349 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e346:	88 d8                	mov    al,bl
c001e348:	ee                   	out    dx,al
c001e349:	83 c4 08             	add    esp,0x8
c001e34c:	5b                   	pop    ebx
c001e34d:	c3                   	ret    

c001e34e <Vm::realToLinear(unsigned short, unsigned short)>:
c001e34e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e353:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e358:	c1 e0 04             	shl    eax,0x4
c001e35b:	01 d0                	add    eax,edx
c001e35d:	c3                   	ret    

c001e35e <Vm::getSegment(unsigned int)>:
c001e35e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e362:	c1 e8 10             	shr    eax,0x10
c001e365:	c3                   	ret    

c001e366 <Vm::getOffset(unsigned int)>:
c001e366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e36a:	c3                   	ret    

c001e36b <Vm::mainloop2()>:
c001e36b:	83 ec 0c             	sub    esp,0xc
c001e36e:	e8 59 f3 ff ff       	call   c001d6cc <lockScheduler()>
c001e373:	83 ec 0c             	sub    esp,0xc
c001e376:	c6 05 25 11 03 c0 01 	mov    BYTE PTR ds:0xc0031125,0x1
c001e37d:	6a 02                	push   0x2
c001e37f:	e8 9c f7 ff ff       	call   c001db20 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e384:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e389:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e38d:	52                   	push   edx
c001e38e:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e392:	52                   	push   edx
c001e393:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e397:	52                   	push   edx
c001e398:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e39c:	50                   	push   eax
c001e39d:	e8 58 1f fe ff       	call   c00002fa <goToVM86>
c001e3a2:	83 c4 2c             	add    esp,0x2c
c001e3a5:	c3                   	ret    

c001e3a6 <Vm::mainVm8086Loop(void*)>:
c001e3a6:	83 ec 0c             	sub    esp,0xc
c001e3a9:	e8 20 f3 ff ff       	call   c001d6ce <unlockScheduler()>
c001e3ae:	83 c4 0c             	add    esp,0xc
c001e3b1:	eb b8                	jmp    c001e36b <Vm::mainloop2()>

c001e3b3 <Vm::mainloop3(unsigned long)>:
c001e3b3:	53                   	push   ebx
c001e3b4:	83 ec 08             	sub    esp,0x8
c001e3b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e3bb:	e8 0c f3 ff ff       	call   c001d6cc <lockScheduler()>
c001e3c0:	83 ec 0c             	sub    esp,0xc
c001e3c3:	89 1d 20 11 03 c0    	mov    DWORD PTR ds:0xc0031120,ebx
c001e3c9:	6a 02                	push   0x2
c001e3cb:	c6 05 24 11 03 c0 01 	mov    BYTE PTR ds:0xc0031124,0x1
c001e3d2:	e8 49 f7 ff ff       	call   c001db20 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e3d7:	83 c4 18             	add    esp,0x18
c001e3da:	5b                   	pop    ebx
c001e3db:	eb 8e                	jmp    c001e36b <Vm::mainloop2()>

c001e3dd <Vm::initialise8086()>:
c001e3dd:	83 ec 0c             	sub    esp,0xc
c001e3e0:	68 80 00 00 00       	push   0x80
c001e3e5:	6a 00                	push   0x0
c001e3e7:	68 a6 e3 01 c0       	push   0xc001e3a6
c001e3ec:	ff 35 f4 10 03 c0    	push   DWORD PTR ds:0xc00310f4
c001e3f2:	e8 07 f4 ff ff       	call   c001d7fe <Process::createThread(void (*)(void*), void*, int)>
c001e3f7:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e3fe:	a3 28 11 03 c0       	mov    ds:0xc0031128,eax
c001e403:	68 00 01 00 00       	push   0x100
c001e408:	a1 f4 10 03 c0       	mov    eax,ds:0xc00310f4
c001e40d:	6a 00                	push   0x0
c001e40f:	6a 00                	push   0x0
c001e411:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e417:	e8 c8 40 ff ff       	call   c00124e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e41c:	83 c4 2c             	add    esp,0x2c
c001e41f:	c3                   	ret    

c001e420 <Vm::finish8086()>:
c001e420:	53                   	push   ebx
c001e421:	83 ec 08             	sub    esp,0x8
c001e424:	e8 a3 f2 ff ff       	call   c001d6cc <lockScheduler()>
c001e429:	80 3d 24 11 03 c0 00 	cmp    BYTE PTR ds:0xc0031124,0x0
c001e430:	75 0c                	jne    c001e43e <Vm::finish8086()+0x1e>
c001e432:	e8 d1 f5 ff ff       	call   c001da08 <schedule()>
c001e437:	e8 92 f2 ff ff       	call   c001d6ce <unlockScheduler()>
c001e43c:	eb e6                	jmp    c001e424 <Vm::finish8086()+0x4>
c001e43e:	83 ec 0c             	sub    esp,0xc
c001e441:	8b 1d 20 11 03 c0    	mov    ebx,DWORD PTR ds:0xc0031120
c001e447:	ff 35 28 11 03 c0    	push   DWORD PTR ds:0xc0031128
c001e44d:	c6 05 24 11 03 c0 00 	mov    BYTE PTR ds:0xc0031124,0x0
c001e454:	e8 8b f8 ff ff       	call   c001dce4 <unblockTask(ThreadControlBlock*)>
c001e459:	e8 70 f2 ff ff       	call   c001d6ce <unlockScheduler()>
c001e45e:	89 d8                	mov    eax,ebx
c001e460:	83 c4 18             	add    esp,0x18
c001e463:	5b                   	pop    ebx
c001e464:	c3                   	ret    

c001e465 <Vm::getOutput8086(unsigned char*)>:
c001e465:	83 ec 10             	sub    esp,0x10
c001e468:	ff 35 2c 11 03 c0    	push   DWORD PTR ds:0xc003112c
c001e46e:	68 40 11 03 c0       	push   0xc0031140
c001e473:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e477:	e8 c8 22 fe ff       	call   c0000744 <memcpy>
c001e47c:	a1 2c 11 03 c0       	mov    eax,ds:0xc003112c
c001e481:	c7 05 2c 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003112c,0x0
c001e48b:	83 c4 1c             	add    esp,0x1c
c001e48e:	c3                   	ret    

c001e48f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e48f:	55                   	push   ebp
c001e490:	57                   	push   edi
c001e491:	56                   	push   esi
c001e492:	53                   	push   ebx
c001e493:	83 ec 2c             	sub    esp,0x2c
c001e496:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001e49a:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001e49e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001e4a2:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001e4a6:	e8 21 f2 ff ff       	call   c001d6cc <lockScheduler()>
c001e4ab:	a0 25 11 03 c0       	mov    al,ds:0xc0031125
c001e4b0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e4b4:	84 c0                	test   al,al
c001e4b6:	75 0c                	jne    c001e4c4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001e4b8:	e8 4b f5 ff ff       	call   c001da08 <schedule()>
c001e4bd:	e8 0c f2 ff ff       	call   c001d6ce <unlockScheduler()>
c001e4c2:	eb e2                	jmp    c001e4a6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e4c4:	a1 28 11 03 c0       	mov    eax,ds:0xc0031128
c001e4c9:	c7 05 2c 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003112c,0x0
c001e4d3:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001e4d7:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001e4db:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001e4df:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001e4e3:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e4e7:	50                   	push   eax
c001e4e8:	6a 20                	push   0x20
c001e4ea:	6a 00                	push   0x0
c001e4ec:	68 40 11 03 c0       	push   0xc0031140
c001e4f1:	e8 82 22 fe ff       	call   c0000778 <memset>
c001e4f6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e4fd:	e8 44 13 ff ff       	call   c000f846 <malloc>
c001e502:	83 c4 0c             	add    esp,0xc
c001e505:	89 c7                	mov    edi,eax
c001e507:	ff 35 f4 10 03 c0    	push   DWORD PTR ds:0xc00310f4
c001e50d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e511:	50                   	push   eax
c001e512:	e8 57 4b ff ff       	call   c001306e <File::File(char const*, Process*)>
c001e517:	83 c4 10             	add    esp,0x10
c001e51a:	85 ff                	test   edi,edi
c001e51c:	75 0a                	jne    c001e528 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001e51e:	83 ec 0c             	sub    esp,0xc
c001e521:	68 27 bd 02 c0       	push   0xc002bd27
c001e526:	eb 27                	jmp    c001e54f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001e528:	50                   	push   eax
c001e529:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e52d:	50                   	push   eax
c001e52e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e532:	50                   	push   eax
c001e533:	57                   	push   edi
c001e534:	e8 45 4e ff ff       	call   c001337e <File::stat(unsigned long long*, bool*)>
c001e539:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001e53e:	83 c4 10             	add    esp,0x10
c001e541:	89 e8                	mov    eax,ebp
c001e543:	84 c0                	test   al,al
c001e545:	74 19                	je     c001e560 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e547:	83 ec 0c             	sub    esp,0xc
c001e54a:	68 3b bd 02 c0       	push   0xc002bd3b
c001e54f:	e8 e9 ba ff ff       	call   c001a03d <Krnl::panic(char const*)>
c001e554:	31 ed                	xor    ebp,ebp
c001e556:	e8 73 f1 ff ff       	call   c001d6ce <unlockScheduler()>
c001e55b:	83 c4 10             	add    esp,0x10
c001e55e:	eb 75                	jmp    c001e5d5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e560:	50                   	push   eax
c001e561:	50                   	push   eax
c001e562:	6a 01                	push   0x1
c001e564:	57                   	push   edi
c001e565:	e8 68 4b ff ff       	call   c00130d2 <File::open(FileOpenMode)>
c001e56a:	83 c4 10             	add    esp,0x10
c001e56d:	85 c0                	test   eax,eax
c001e56f:	74 17                	je     c001e588 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001e571:	83 ec 0c             	sub    esp,0xc
c001e574:	68 54 bd 02 c0       	push   0xc002bd54
c001e579:	e8 bf ba ff ff       	call   c001a03d <Krnl::panic(char const*)>
c001e57e:	e8 4b f1 ff ff       	call   c001d6ce <unlockScheduler()>
c001e583:	83 c4 10             	add    esp,0x10
c001e586:	eb 4d                	jmp    c001e5d5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e588:	0f b7 f6             	movzx  esi,si
c001e58b:	50                   	push   eax
c001e58c:	0f b7 db             	movzx  ebx,bx
c001e58f:	50                   	push   eax
c001e590:	56                   	push   esi
c001e591:	53                   	push   ebx
c001e592:	e8 b7 fd ff ff       	call   c001e34e <Vm::realToLinear(unsigned short, unsigned short)>
c001e597:	5a                   	pop    edx
c001e598:	8b 17                	mov    edx,DWORD PTR [edi]
c001e59a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e59e:	51                   	push   ecx
c001e59f:	50                   	push   eax
c001e5a0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e5a4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e5a8:	57                   	push   edi
c001e5a9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e5ac:	83 c4 14             	add    esp,0x14
c001e5af:	57                   	push   edi
c001e5b0:	e8 7b 4b ff ff       	call   c0013130 <File::close()>
c001e5b5:	c6 05 25 11 03 c0 00 	mov    BYTE PTR ds:0xc0031125,0x0
c001e5bc:	e8 0d f1 ff ff       	call   c001d6ce <unlockScheduler()>
c001e5c1:	59                   	pop    ecx
c001e5c2:	ff 35 28 11 03 c0    	push   DWORD PTR ds:0xc0031128
c001e5c8:	e8 17 f7 ff ff       	call   c001dce4 <unblockTask(ThreadControlBlock*)>
c001e5cd:	83 c4 10             	add    esp,0x10
c001e5d0:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001e5d5:	83 c4 2c             	add    esp,0x2c
c001e5d8:	89 e8                	mov    eax,ebp
c001e5da:	5b                   	pop    ebx
c001e5db:	5e                   	pop    esi
c001e5dc:	5f                   	pop    edi
c001e5dd:	5d                   	pop    ebp
c001e5de:	c3                   	ret    

c001e5df <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e5df:	57                   	push   edi
c001e5e0:	56                   	push   esi
c001e5e1:	53                   	push   ebx
c001e5e2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e5e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5ea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e5ee:	83 e8 06             	sub    eax,0x6
c001e5f1:	0f b7 c0             	movzx  eax,ax
c001e5f4:	50                   	push   eax
c001e5f5:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e5fa:	50                   	push   eax
c001e5fb:	e8 4e fd ff ff       	call   c001e34e <Vm::realToLinear(unsigned short, unsigned short)>
c001e600:	5a                   	pop    edx
c001e601:	5e                   	pop    esi
c001e602:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e605:	8d 56 fa             	lea    edx,[esi-0x6]
c001e608:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e60e:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e611:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e614:	83 c2 02             	add    edx,0x2
c001e617:	66 89 10             	mov    WORD PTR [eax],dx
c001e61a:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e61d:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e621:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e624:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e628:	89 d6                	mov    esi,edx
c001e62a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e630:	66 81 e6 ff fd       	and    si,0xfdff
c001e635:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e639:	74 07                	je     c001e642 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e63b:	89 d6                	mov    esi,edx
c001e63d:	66 81 ce 00 02       	or     si,0x200
c001e642:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e646:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e64b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e64f:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e657:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e65a:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e662:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e665:	5b                   	pop    ebx
c001e666:	5e                   	pop    esi
c001e667:	5f                   	pop    edi
c001e668:	c3                   	ret    

c001e669 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e669:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e66e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e673:	c1 e0 04             	shl    eax,0x4
c001e676:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e679:	c3                   	ret    

c001e67a <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e67a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e67f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e684:	c1 e0 04             	shl    eax,0x4
c001e687:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e68b:	c3                   	ret    

c001e68c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e68c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e691:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e696:	c1 e0 04             	shl    eax,0x4
c001e699:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e69c:	c3                   	ret    

c001e69d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e69d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e6a2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e6a7:	c1 e0 04             	shl    eax,0x4
c001e6aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6ae:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e6b1:	c3                   	ret    

c001e6b2 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e6b2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e6b7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e6bc:	c1 e0 04             	shl    eax,0x4
c001e6bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6c3:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e6c7:	c3                   	ret    

c001e6c8 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e6c8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e6cd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e6d2:	c1 e0 04             	shl    eax,0x4
c001e6d5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6d9:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e6dc:	c3                   	ret    

c001e6dd <Vm::faultHandler(regs*)>:
c001e6dd:	55                   	push   ebp
c001e6de:	57                   	push   edi
c001e6df:	56                   	push   esi
c001e6e0:	53                   	push   ebx
c001e6e1:	83 ec 1c             	sub    esp,0x1c
c001e6e4:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e6e8:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001e6eb:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001e6ee:	0f b7 c1             	movzx  eax,cx
c001e6f1:	50                   	push   eax
c001e6f2:	0f b7 c3             	movzx  eax,bx
c001e6f5:	c1 e3 04             	shl    ebx,0x4
c001e6f8:	50                   	push   eax
c001e6f9:	e8 50 fc ff ff       	call   c001e34e <Vm::realToLinear(unsigned short, unsigned short)>
c001e6fe:	5a                   	pop    edx
c001e6ff:	89 c5                	mov    ebp,eax
c001e701:	5e                   	pop    esi
c001e702:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001e706:	50                   	push   eax
c001e707:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e70b:	50                   	push   eax
c001e70c:	e8 3d fc ff ff       	call   c001e34e <Vm::realToLinear(unsigned short, unsigned short)>
c001e711:	01 cb                	add    ebx,ecx
c001e713:	89 c6                	mov    esi,eax
c001e715:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001e719:	50                   	push   eax
c001e71a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e71e:	50                   	push   eax
c001e71f:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e723:	50                   	push   eax
c001e724:	55                   	push   ebp
c001e725:	53                   	push   ebx
c001e726:	b3 06                	mov    bl,0x6
c001e728:	68 6d bd 02 c0       	push   0xc002bd6d
c001e72d:	e8 e3 43 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e732:	83 c4 20             	add    esp,0x20
c001e735:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e73a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e73f:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e743:	3c 9d                	cmp    al,0x9d
c001e745:	0f 84 d7 02 00 00    	je     c001ea22 <Vm::faultHandler(regs*)+0x345>
c001e74b:	0f 87 a3 00 00 00    	ja     c001e7f4 <Vm::faultHandler(regs*)+0x117>
c001e751:	3c 66                	cmp    al,0x66
c001e753:	0f 84 15 02 00 00    	je     c001e96e <Vm::faultHandler(regs*)+0x291>
c001e759:	77 5f                	ja     c001e7ba <Vm::faultHandler(regs*)+0xdd>
c001e75b:	3c 36                	cmp    al,0x36
c001e75d:	0f 84 f1 01 00 00    	je     c001e954 <Vm::faultHandler(regs*)+0x277>
c001e763:	77 28                	ja     c001e78d <Vm::faultHandler(regs*)+0xb0>
c001e765:	3c 26                	cmp    al,0x26
c001e767:	0f 84 99 01 00 00    	je     c001e906 <Vm::faultHandler(regs*)+0x229>
c001e76d:	3c 2e                	cmp    al,0x2e
c001e76f:	0f 85 3b 07 00 00    	jne    c001eeb0 <Vm::faultHandler(regs*)+0x7d3>
c001e775:	83 ec 0c             	sub    esp,0xc
c001e778:	31 db                	xor    ebx,ebx
c001e77a:	68 82 bd 02 c0       	push   0xc002bd82
c001e77f:	e8 91 43 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e784:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e787:	83 c4 10             	add    esp,0x10
c001e78a:	45                   	inc    ebp
c001e78b:	eb b2                	jmp    c001e73f <Vm::faultHandler(regs*)+0x62>
c001e78d:	3c 64                	cmp    al,0x64
c001e78f:	0f 84 8b 01 00 00    	je     c001e920 <Vm::faultHandler(regs*)+0x243>
c001e795:	0f 87 9f 01 00 00    	ja     c001e93a <Vm::faultHandler(regs*)+0x25d>
c001e79b:	3c 3e                	cmp    al,0x3e
c001e79d:	0f 85 0d 07 00 00    	jne    c001eeb0 <Vm::faultHandler(regs*)+0x7d3>
c001e7a3:	83 ec 0c             	sub    esp,0xc
c001e7a6:	b3 01                	mov    bl,0x1
c001e7a8:	68 86 bd 02 c0       	push   0xc002bd86
c001e7ad:	e8 63 43 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e7b2:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e7b5:	83 c4 10             	add    esp,0x10
c001e7b8:	eb d0                	jmp    c001e78a <Vm::faultHandler(regs*)+0xad>
c001e7ba:	3c 6d                	cmp    al,0x6d
c001e7bc:	0f 84 af 03 00 00    	je     c001eb71 <Vm::faultHandler(regs*)+0x494>
c001e7c2:	77 15                	ja     c001e7d9 <Vm::faultHandler(regs*)+0xfc>
c001e7c4:	3c 67                	cmp    al,0x67
c001e7c6:	0f 84 bf 01 00 00    	je     c001e98b <Vm::faultHandler(regs*)+0x2ae>
c001e7cc:	3c 6c                	cmp    al,0x6c
c001e7ce:	0f 84 3f 03 00 00    	je     c001eb13 <Vm::faultHandler(regs*)+0x436>
c001e7d4:	e9 d7 06 00 00       	jmp    c001eeb0 <Vm::faultHandler(regs*)+0x7d3>
c001e7d9:	3c 6f                	cmp    al,0x6f
c001e7db:	0f 84 a4 04 00 00    	je     c001ec85 <Vm::faultHandler(regs*)+0x5a8>
c001e7e1:	0f 82 11 04 00 00    	jb     c001ebf8 <Vm::faultHandler(regs*)+0x51b>
c001e7e7:	3c 9c                	cmp    al,0x9c
c001e7e9:	0f 84 ba 01 00 00    	je     c001e9a9 <Vm::faultHandler(regs*)+0x2cc>
c001e7ef:	e9 bc 06 00 00       	jmp    c001eeb0 <Vm::faultHandler(regs*)+0x7d3>
c001e7f4:	3c ec                	cmp    al,0xec
c001e7f6:	0f 84 24 06 00 00    	je     c001ee20 <Vm::faultHandler(regs*)+0x743>
c001e7fc:	0f 87 93 00 00 00    	ja     c001e895 <Vm::faultHandler(regs*)+0x1b8>
c001e802:	3c e4                	cmp    al,0xe4
c001e804:	0f 84 5c 05 00 00    	je     c001ed66 <Vm::faultHandler(regs*)+0x689>
c001e80a:	77 6a                	ja     c001e876 <Vm::faultHandler(regs*)+0x199>
c001e80c:	3c cd                	cmp    al,0xcd
c001e80e:	0f 84 7e 02 00 00    	je     c001ea92 <Vm::faultHandler(regs*)+0x3b5>
c001e814:	3c cf                	cmp    al,0xcf
c001e816:	0f 85 94 06 00 00    	jne    c001eeb0 <Vm::faultHandler(regs*)+0x7d3>
c001e81c:	83 ec 0c             	sub    esp,0xc
c001e81f:	68 ca bd 02 c0       	push   0xc002bdca
c001e824:	e8 ec 42 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e829:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001e82c:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001e82f:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001e833:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001e836:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001e83a:	0d 00 02 02 00       	or     eax,0x20200
c001e83f:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e842:	56                   	push   esi
c001e843:	53                   	push   ebx
c001e844:	52                   	push   edx
c001e845:	68 d0 bd 02 c0       	push   0xc002bdd0
c001e84a:	e8 c6 42 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e84f:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001e853:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e859:	66 c1 e8 09          	shr    ax,0x9
c001e85d:	83 e0 01             	and    eax,0x1
c001e860:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e863:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e866:	83 c0 06             	add    eax,0x6
c001e869:	25 ff ff 00 00       	and    eax,0xffff
c001e86e:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e871:	e9 95 02 00 00       	jmp    c001eb0b <Vm::faultHandler(regs*)+0x42e>
c001e876:	3c e6                	cmp    al,0xe6
c001e878:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001e87c:	0f 84 4e 05 00 00    	je     c001edd0 <Vm::faultHandler(regs*)+0x6f3>
c001e882:	0f 82 0a 05 00 00    	jb     c001ed92 <Vm::faultHandler(regs*)+0x6b5>
c001e888:	3c e7                	cmp    al,0xe7
c001e88a:	0f 84 69 05 00 00    	je     c001edf9 <Vm::faultHandler(regs*)+0x71c>
c001e890:	e9 1b 06 00 00       	jmp    c001eeb0 <Vm::faultHandler(regs*)+0x7d3>
c001e895:	3c ef                	cmp    al,0xef
c001e897:	0f 84 e6 05 00 00    	je     c001ee83 <Vm::faultHandler(regs*)+0x7a6>
c001e89d:	77 37                	ja     c001e8d6 <Vm::faultHandler(regs*)+0x1f9>
c001e89f:	3c ed                	cmp    al,0xed
c001e8a1:	0f 84 a3 05 00 00    	je     c001ee4a <Vm::faultHandler(regs*)+0x76d>
c001e8a7:	3c ee                	cmp    al,0xee
c001e8a9:	0f 85 01 06 00 00    	jne    c001eeb0 <Vm::faultHandler(regs*)+0x7d3>
c001e8af:	52                   	push   edx
c001e8b0:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e8b3:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e8b6:	68 6b be 02 c0       	push   0xc002be6b
c001e8bb:	e8 55 42 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e8c0:	59                   	pop    ecx
c001e8c1:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e8c5:	5b                   	pop    ebx
c001e8c6:	50                   	push   eax
c001e8c7:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e8cb:	50                   	push   eax
c001e8cc:	e8 2a fa ff ff       	call   c001e2fb <Vm::outbv(unsigned short, unsigned char)>
c001e8d1:	e9 a5 05 00 00       	jmp    c001ee7b <Vm::faultHandler(regs*)+0x79e>
c001e8d6:	3c fa                	cmp    al,0xfa
c001e8d8:	0f 84 f7 01 00 00    	je     c001ead5 <Vm::faultHandler(regs*)+0x3f8>
c001e8de:	3c fb                	cmp    al,0xfb
c001e8e0:	0f 84 0a 02 00 00    	je     c001eaf0 <Vm::faultHandler(regs*)+0x413>
c001e8e6:	3c f3                	cmp    al,0xf3
c001e8e8:	0f 85 c2 05 00 00    	jne    c001eeb0 <Vm::faultHandler(regs*)+0x7d3>
c001e8ee:	83 ec 0c             	sub    esp,0xc
c001e8f1:	68 a3 bd 02 c0       	push   0xc002bda3
c001e8f6:	e8 1a 42 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e8fb:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e8fe:	83 c4 10             	add    esp,0x10
c001e901:	e9 84 fe ff ff       	jmp    c001e78a <Vm::faultHandler(regs*)+0xad>
c001e906:	83 ec 0c             	sub    esp,0xc
c001e909:	b3 02                	mov    bl,0x2
c001e90b:	68 7e bd 02 c0       	push   0xc002bd7e
c001e910:	e8 00 42 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e915:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e918:	83 c4 10             	add    esp,0x10
c001e91b:	e9 6a fe ff ff       	jmp    c001e78a <Vm::faultHandler(regs*)+0xad>
c001e920:	83 ec 0c             	sub    esp,0xc
c001e923:	b3 03                	mov    bl,0x3
c001e925:	68 8a bd 02 c0       	push   0xc002bd8a
c001e92a:	e8 e6 41 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e92f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e932:	83 c4 10             	add    esp,0x10
c001e935:	e9 50 fe ff ff       	jmp    c001e78a <Vm::faultHandler(regs*)+0xad>
c001e93a:	83 ec 0c             	sub    esp,0xc
c001e93d:	b3 04                	mov    bl,0x4
c001e93f:	68 8e bd 02 c0       	push   0xc002bd8e
c001e944:	e8 cc 41 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e949:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e94c:	83 c4 10             	add    esp,0x10
c001e94f:	e9 36 fe ff ff       	jmp    c001e78a <Vm::faultHandler(regs*)+0xad>
c001e954:	83 ec 0c             	sub    esp,0xc
c001e957:	b3 05                	mov    bl,0x5
c001e959:	68 92 bd 02 c0       	push   0xc002bd92
c001e95e:	e8 b2 41 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e963:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e966:	83 c4 10             	add    esp,0x10
c001e969:	e9 1c fe ff ff       	jmp    c001e78a <Vm::faultHandler(regs*)+0xad>
c001e96e:	83 ec 0c             	sub    esp,0xc
c001e971:	68 96 bd 02 c0       	push   0xc002bd96
c001e976:	e8 9a 41 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e97b:	83 c4 10             	add    esp,0x10
c001e97e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e981:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e986:	e9 ff fd ff ff       	jmp    c001e78a <Vm::faultHandler(regs*)+0xad>
c001e98b:	50                   	push   eax
c001e98c:	50                   	push   eax
c001e98d:	6a 01                	push   0x1
c001e98f:	68 9b bd 02 c0       	push   0xc002bd9b
c001e994:	e8 7c 41 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e999:	83 c4 10             	add    esp,0x10
c001e99c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e99f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001e9a4:	e9 e1 fd ff ff       	jmp    c001e78a <Vm::faultHandler(regs*)+0xad>
c001e9a9:	83 ec 0c             	sub    esp,0xc
c001e9ac:	68 a9 bd 02 c0       	push   0xc002bda9
c001e9b1:	e8 5f 41 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001e9b6:	83 c4 10             	add    esp,0x10
c001e9b9:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001e9bc:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e9c1:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001e9c4:	74 2f                	je     c001e9f5 <Vm::faultHandler(regs*)+0x318>
c001e9c6:	83 ea 04             	sub    edx,0x4
c001e9c9:	25 ff 0d 00 00       	and    eax,0xdff
c001e9ce:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e9d4:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e9d7:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e9da:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e9e0:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e9e4:	0f 84 bf 04 00 00    	je     c001eea9 <Vm::faultHandler(regs*)+0x7cc>
c001e9ea:	80 cc 02             	or     ah,0x2
c001e9ed:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e9f0:	e9 b4 04 00 00       	jmp    c001eea9 <Vm::faultHandler(regs*)+0x7cc>
c001e9f5:	83 ea 02             	sub    edx,0x2
c001e9f8:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e9fe:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001ea01:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001ea05:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ea0b:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001ea0f:	74 05                	je     c001ea16 <Vm::faultHandler(regs*)+0x339>
c001ea11:	80 cc 02             	or     ah,0x2
c001ea14:	eb 03                	jmp    c001ea19 <Vm::faultHandler(regs*)+0x33c>
c001ea16:	80 e4 fd             	and    ah,0xfd
c001ea19:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001ea1d:	e9 87 04 00 00       	jmp    c001eea9 <Vm::faultHandler(regs*)+0x7cc>
c001ea22:	83 ec 0c             	sub    esp,0xc
c001ea25:	68 b0 bd 02 c0       	push   0xc002bdb0
c001ea2a:	e8 e6 40 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001ea2f:	83 c4 10             	add    esp,0x10
c001ea32:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ea37:	74 28                	je     c001ea61 <Vm::faultHandler(regs*)+0x384>
c001ea39:	8b 06                	mov    eax,DWORD PTR [esi]
c001ea3b:	25 ff 0d 00 00       	and    eax,0xdff
c001ea40:	0d 00 02 02 00       	or     eax,0x20200
c001ea45:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ea48:	8b 06                	mov    eax,DWORD PTR [esi]
c001ea4a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ea50:	c1 e8 09             	shr    eax,0x9
c001ea53:	83 e0 01             	and    eax,0x1
c001ea56:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ea59:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ea5c:	83 c0 04             	add    eax,0x4
c001ea5f:	eb 24                	jmp    c001ea85 <Vm::faultHandler(regs*)+0x3a8>
c001ea61:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001ea64:	0d 00 02 02 00       	or     eax,0x20200
c001ea69:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ea6c:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ea6f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ea75:	66 c1 e8 09          	shr    ax,0x9
c001ea79:	83 e0 01             	and    eax,0x1
c001ea7c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ea7f:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ea82:	83 c0 02             	add    eax,0x2
c001ea85:	25 ff ff 00 00       	and    eax,0xffff
c001ea8a:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ea8d:	e9 17 04 00 00       	jmp    c001eea9 <Vm::faultHandler(regs*)+0x7cc>
c001ea92:	53                   	push   ebx
c001ea93:	53                   	push   ebx
c001ea94:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ea98:	50                   	push   eax
c001ea99:	68 b6 bd 02 c0       	push   0xc002bdb6
c001ea9e:	e8 72 40 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001eaa3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eaa7:	83 c4 10             	add    esp,0x10
c001eaaa:	3c ee                	cmp    al,0xee
c001eaac:	75 10                	jne    c001eabe <Vm::faultHandler(regs*)+0x3e1>
c001eaae:	83 ec 0c             	sub    esp,0xc
c001eab1:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001eab4:	e8 fa f8 ff ff       	call   c001e3b3 <Vm::mainloop3(unsigned long)>
c001eab9:	e9 c0 03 00 00       	jmp    c001ee7e <Vm::faultHandler(regs*)+0x7a1>
c001eabe:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001eac2:	83 ec 0c             	sub    esp,0xc
c001eac5:	53                   	push   ebx
c001eac6:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001eaca:	53                   	push   ebx
c001eacb:	55                   	push   ebp
c001eacc:	50                   	push   eax
c001eacd:	57                   	push   edi
c001eace:	e8 0c fb ff ff       	call   c001e5df <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001ead3:	eb 36                	jmp    c001eb0b <Vm::faultHandler(regs*)+0x42e>
c001ead5:	83 ec 0c             	sub    esp,0xc
c001ead8:	68 c0 bd 02 c0       	push   0xc002bdc0
c001eadd:	e8 33 40 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001eae2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eae7:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001eaeb:	e9 8b 03 00 00       	jmp    c001ee7b <Vm::faultHandler(regs*)+0x79e>
c001eaf0:	83 ec 0c             	sub    esp,0xc
c001eaf3:	68 c5 bd 02 c0       	push   0xc002bdc5
c001eaf8:	e8 18 40 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001eafd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb02:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001eb06:	e9 70 03 00 00       	jmp    c001ee7b <Vm::faultHandler(regs*)+0x79e>
c001eb0b:	83 c4 20             	add    esp,0x20
c001eb0e:	e9 99 03 00 00       	jmp    c001eeac <Vm::faultHandler(regs*)+0x7cf>
c001eb13:	83 ec 0c             	sub    esp,0xc
c001eb16:	68 03 be 02 c0       	push   0xc002be03
c001eb1b:	e8 f5 3f ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001eb20:	83 c4 10             	add    esp,0x10
c001eb23:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001eb26:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001eb2b:	74 0d                	je     c001eb3a <Vm::faultHandler(regs*)+0x45d>
c001eb2d:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001eb34:	0f 87 9e 01 00 00    	ja     c001ecd8 <Vm::faultHandler(regs*)+0x5fb>
c001eb3a:	83 ec 0c             	sub    esp,0xc
c001eb3d:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001eb41:	0f b7 db             	movzx  ebx,bx
c001eb44:	50                   	push   eax
c001eb45:	e8 9e f7 ff ff       	call   c001e2e8 <Vm::inbv(unsigned short)>
c001eb4a:	83 c4 0c             	add    esp,0xc
c001eb4d:	0f b6 c0             	movzx  eax,al
c001eb50:	50                   	push   eax
c001eb51:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001eb55:	50                   	push   eax
c001eb56:	53                   	push   ebx
c001eb57:	e8 41 fb ff ff       	call   c001e69d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001eb5c:	83 c4 10             	add    esp,0x10
c001eb5f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001eb62:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001eb66:	74 03                	je     c001eb6b <Vm::faultHandler(regs*)+0x48e>
c001eb68:	48                   	dec    eax
c001eb69:	eb 01                	jmp    c001eb6c <Vm::faultHandler(regs*)+0x48f>
c001eb6b:	40                   	inc    eax
c001eb6c:	0f b7 c0             	movzx  eax,ax
c001eb6f:	eb 7f                	jmp    c001ebf0 <Vm::faultHandler(regs*)+0x513>
c001eb71:	83 ec 0c             	sub    esp,0xc
c001eb74:	68 35 be 02 c0       	push   0xc002be35
c001eb79:	e8 97 3f ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001eb7e:	83 c4 10             	add    esp,0x10
c001eb81:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001eb84:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001eb89:	74 0d                	je     c001eb98 <Vm::faultHandler(regs*)+0x4bb>
c001eb8b:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001eb92:	0f 87 40 01 00 00    	ja     c001ecd8 <Vm::faultHandler(regs*)+0x5fb>
c001eb98:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001eb9b:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001eb9f:	0f b7 db             	movzx  ebx,bx
c001eba2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001eba7:	74 20                	je     c001ebc9 <Vm::faultHandler(regs*)+0x4ec>
c001eba9:	ed                   	in     eax,dx
c001ebaa:	51                   	push   ecx
c001ebab:	50                   	push   eax
c001ebac:	56                   	push   esi
c001ebad:	53                   	push   ebx
c001ebae:	e8 15 fb ff ff       	call   c001e6c8 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001ebb3:	83 c4 10             	add    esp,0x10
c001ebb6:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ebb9:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001ebbd:	74 05                	je     c001ebc4 <Vm::faultHandler(regs*)+0x4e7>
c001ebbf:	83 e8 04             	sub    eax,0x4
c001ebc2:	eb 27                	jmp    c001ebeb <Vm::faultHandler(regs*)+0x50e>
c001ebc4:	83 c0 04             	add    eax,0x4
c001ebc7:	eb 22                	jmp    c001ebeb <Vm::faultHandler(regs*)+0x50e>
c001ebc9:	66 ed                	in     ax,dx
c001ebcb:	0f b7 c0             	movzx  eax,ax
c001ebce:	52                   	push   edx
c001ebcf:	50                   	push   eax
c001ebd0:	56                   	push   esi
c001ebd1:	53                   	push   ebx
c001ebd2:	e8 db fa ff ff       	call   c001e6b2 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001ebd7:	83 c4 10             	add    esp,0x10
c001ebda:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ebdd:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001ebe1:	74 05                	je     c001ebe8 <Vm::faultHandler(regs*)+0x50b>
c001ebe3:	83 e8 02             	sub    eax,0x2
c001ebe6:	eb 03                	jmp    c001ebeb <Vm::faultHandler(regs*)+0x50e>
c001ebe8:	83 c0 02             	add    eax,0x2
c001ebeb:	25 ff ff 00 00       	and    eax,0xffff
c001ebf0:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001ebf3:	e9 b1 02 00 00       	jmp    c001eea9 <Vm::faultHandler(regs*)+0x7cc>
c001ebf8:	83 ec 0c             	sub    esp,0xc
c001ebfb:	4b                   	dec    ebx
c001ebfc:	68 3b be 02 c0       	push   0xc002be3b
c001ec01:	e8 0f 3f ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001ec06:	83 c4 10             	add    esp,0x10
c001ec09:	80 fb 05             	cmp    bl,0x5
c001ec0c:	77 0a                	ja     c001ec18 <Vm::faultHandler(regs*)+0x53b>
c001ec0e:	0f b6 db             	movzx  ebx,bl
c001ec11:	ff 24 9d ac be 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd4154]
c001ec18:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001ec1c:	eb 1b                	jmp    c001ec39 <Vm::faultHandler(regs*)+0x55c>
c001ec1e:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001ec22:	eb 15                	jmp    c001ec39 <Vm::faultHandler(regs*)+0x55c>
c001ec24:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001ec28:	eb 0f                	jmp    c001ec39 <Vm::faultHandler(regs*)+0x55c>
c001ec2a:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001ec2e:	eb 09                	jmp    c001ec39 <Vm::faultHandler(regs*)+0x55c>
c001ec30:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001ec33:	eb 04                	jmp    c001ec39 <Vm::faultHandler(regs*)+0x55c>
c001ec35:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ec39:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ec3e:	74 0d                	je     c001ec4d <Vm::faultHandler(regs*)+0x570>
c001ec40:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001ec47:	0f 87 8b 00 00 00    	ja     c001ecd8 <Vm::faultHandler(regs*)+0x5fb>
c001ec4d:	53                   	push   ebx
c001ec4e:	53                   	push   ebx
c001ec4f:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001ec53:	52                   	push   edx
c001ec54:	50                   	push   eax
c001ec55:	e8 0f fa ff ff       	call   c001e669 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001ec5a:	5e                   	pop    esi
c001ec5b:	0f b6 c0             	movzx  eax,al
c001ec5e:	5d                   	pop    ebp
c001ec5f:	50                   	push   eax
c001ec60:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ec64:	50                   	push   eax
c001ec65:	e8 91 f6 ff ff       	call   c001e2fb <Vm::outbv(unsigned short, unsigned char)>
c001ec6a:	83 c4 10             	add    esp,0x10
c001ec6d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ec70:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001ec74:	74 03                	je     c001ec79 <Vm::faultHandler(regs*)+0x59c>
c001ec76:	48                   	dec    eax
c001ec77:	eb 01                	jmp    c001ec7a <Vm::faultHandler(regs*)+0x59d>
c001ec79:	40                   	inc    eax
c001ec7a:	0f b7 c0             	movzx  eax,ax
c001ec7d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001ec80:	e9 24 02 00 00       	jmp    c001eea9 <Vm::faultHandler(regs*)+0x7cc>
c001ec85:	83 ec 0c             	sub    esp,0xc
c001ec88:	4b                   	dec    ebx
c001ec89:	68 3b be 02 c0       	push   0xc002be3b
c001ec8e:	e8 82 3e ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001ec93:	83 c4 10             	add    esp,0x10
c001ec96:	80 fb 05             	cmp    bl,0x5
c001ec99:	77 0a                	ja     c001eca5 <Vm::faultHandler(regs*)+0x5c8>
c001ec9b:	0f b6 db             	movzx  ebx,bl
c001ec9e:	ff 24 9d c4 be 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd413c]
c001eca5:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001eca9:	eb 1b                	jmp    c001ecc6 <Vm::faultHandler(regs*)+0x5e9>
c001ecab:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001ecaf:	eb 15                	jmp    c001ecc6 <Vm::faultHandler(regs*)+0x5e9>
c001ecb1:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001ecb5:	eb 0f                	jmp    c001ecc6 <Vm::faultHandler(regs*)+0x5e9>
c001ecb7:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001ecbb:	eb 09                	jmp    c001ecc6 <Vm::faultHandler(regs*)+0x5e9>
c001ecbd:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001ecc0:	eb 04                	jmp    c001ecc6 <Vm::faultHandler(regs*)+0x5e9>
c001ecc2:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ecc6:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001ecc9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ecce:	74 39                	je     c001ed09 <Vm::faultHandler(regs*)+0x62c>
c001ecd0:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001ecd6:	76 31                	jbe    c001ed09 <Vm::faultHandler(regs*)+0x62c>
c001ecd8:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001ecdc:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ece0:	51                   	push   ecx
c001ece1:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001ece5:	51                   	push   ecx
c001ece6:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001ecea:	51                   	push   ecx
c001eceb:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001ecef:	51                   	push   ecx
c001ecf0:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ecf4:	52                   	push   edx
c001ecf5:	50                   	push   eax
c001ecf6:	50                   	push   eax
c001ecf7:	68 08 be 02 c0       	push   0xc002be08
c001ecfc:	e8 14 3e ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001ed01:	83 c4 20             	add    esp,0x20
c001ed04:	e9 fb 01 00 00       	jmp    c001ef04 <Vm::faultHandler(regs*)+0x827>
c001ed09:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001ed0c:	0f b7 d3             	movzx  edx,bx
c001ed0f:	81 e6 00 04 00 00    	and    esi,0x400
c001ed15:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001ed18:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ed1d:	74 1d                	je     c001ed3c <Vm::faultHandler(regs*)+0x65f>
c001ed1f:	51                   	push   ecx
c001ed20:	51                   	push   ecx
c001ed21:	52                   	push   edx
c001ed22:	50                   	push   eax
c001ed23:	e8 64 f9 ff ff       	call   c001e68c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001ed28:	83 c4 10             	add    esp,0x10
c001ed2b:	89 ea                	mov    edx,ebp
c001ed2d:	ef                   	out    dx,eax
c001ed2e:	85 f6                	test   esi,esi
c001ed30:	74 05                	je     c001ed37 <Vm::faultHandler(regs*)+0x65a>
c001ed32:	83 eb 04             	sub    ebx,0x4
c001ed35:	eb 21                	jmp    c001ed58 <Vm::faultHandler(regs*)+0x67b>
c001ed37:	83 c3 04             	add    ebx,0x4
c001ed3a:	eb 1c                	jmp    c001ed58 <Vm::faultHandler(regs*)+0x67b>
c001ed3c:	51                   	push   ecx
c001ed3d:	51                   	push   ecx
c001ed3e:	52                   	push   edx
c001ed3f:	50                   	push   eax
c001ed40:	e8 35 f9 ff ff       	call   c001e67a <Vm::readWordFromReal(unsigned short, unsigned short)>
c001ed45:	83 c4 10             	add    esp,0x10
c001ed48:	89 ea                	mov    edx,ebp
c001ed4a:	66 ef                	out    dx,ax
c001ed4c:	85 f6                	test   esi,esi
c001ed4e:	74 05                	je     c001ed55 <Vm::faultHandler(regs*)+0x678>
c001ed50:	83 eb 02             	sub    ebx,0x2
c001ed53:	eb 03                	jmp    c001ed58 <Vm::faultHandler(regs*)+0x67b>
c001ed55:	83 c3 02             	add    ebx,0x2
c001ed58:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001ed5e:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001ed61:	e9 43 01 00 00       	jmp    c001eea9 <Vm::faultHandler(regs*)+0x7cc>
c001ed66:	53                   	push   ebx
c001ed67:	53                   	push   ebx
c001ed68:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed6c:	50                   	push   eax
c001ed6d:	68 41 be 02 c0       	push   0xc002be41
c001ed72:	e8 9e 3d ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001ed77:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001ed7e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed82:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed85:	e8 5e f5 ff ff       	call   c001e2e8 <Vm::inbv(unsigned short)>
c001ed8a:	0f b6 c0             	movzx  eax,al
c001ed8d:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001ed90:	eb 5e                	jmp    c001edf0 <Vm::faultHandler(regs*)+0x713>
c001ed92:	51                   	push   ecx
c001ed93:	51                   	push   ecx
c001ed94:	53                   	push   ebx
c001ed95:	68 47 be 02 c0       	push   0xc002be47
c001ed9a:	e8 76 3d ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001ed9f:	83 c4 10             	add    esp,0x10
c001eda2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001eda7:	74 07                	je     c001edb0 <Vm::faultHandler(regs*)+0x6d3>
c001eda9:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001edad:	ed                   	in     eax,dx
c001edae:	eb 14                	jmp    c001edc4 <Vm::faultHandler(regs*)+0x6e7>
c001edb0:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001edb3:	66 31 db             	xor    bx,bx
c001edb6:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001edb9:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001edbd:	66 ed                	in     ax,dx
c001edbf:	0f b7 c0             	movzx  eax,ax
c001edc2:	09 d8                	or     eax,ebx
c001edc4:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001edc7:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001edcb:	e9 dc 00 00 00       	jmp    c001eeac <Vm::faultHandler(regs*)+0x7cf>
c001edd0:	50                   	push   eax
c001edd1:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001edd4:	53                   	push   ebx
c001edd5:	68 4d be 02 c0       	push   0xc002be4d
c001edda:	e8 36 3d ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001eddf:	58                   	pop    eax
c001ede0:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001ede4:	5a                   	pop    edx
c001ede5:	50                   	push   eax
c001ede6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001edea:	50                   	push   eax
c001edeb:	e8 0b f5 ff ff       	call   c001e2fb <Vm::outbv(unsigned short, unsigned char)>
c001edf0:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001edf4:	e9 85 00 00 00       	jmp    c001ee7e <Vm::faultHandler(regs*)+0x7a1>
c001edf9:	50                   	push   eax
c001edfa:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001edfd:	53                   	push   ebx
c001edfe:	68 56 be 02 c0       	push   0xc002be56
c001ee03:	e8 0d 3d ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001ee08:	83 c4 10             	add    esp,0x10
c001ee0b:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001ee0f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ee14:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001ee17:	74 03                	je     c001ee1c <Vm::faultHandler(regs*)+0x73f>
c001ee19:	ef                   	out    dx,eax
c001ee1a:	eb ab                	jmp    c001edc7 <Vm::faultHandler(regs*)+0x6ea>
c001ee1c:	66 ef                	out    dx,ax
c001ee1e:	eb a7                	jmp    c001edc7 <Vm::faultHandler(regs*)+0x6ea>
c001ee20:	55                   	push   ebp
c001ee21:	55                   	push   ebp
c001ee22:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ee25:	68 5f be 02 c0       	push   0xc002be5f
c001ee2a:	e8 e6 3c ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001ee2f:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001ee36:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ee3a:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee3d:	e8 a6 f4 ff ff       	call   c001e2e8 <Vm::inbv(unsigned short)>
c001ee42:	0f b6 c0             	movzx  eax,al
c001ee45:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001ee48:	eb 31                	jmp    c001ee7b <Vm::faultHandler(regs*)+0x79e>
c001ee4a:	56                   	push   esi
c001ee4b:	56                   	push   esi
c001ee4c:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ee4f:	68 65 be 02 c0       	push   0xc002be65
c001ee54:	e8 bc 3c ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001ee59:	83 c4 10             	add    esp,0x10
c001ee5c:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001ee5f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ee64:	74 03                	je     c001ee69 <Vm::faultHandler(regs*)+0x78c>
c001ee66:	ed                   	in     eax,dx
c001ee67:	eb 0d                	jmp    c001ee76 <Vm::faultHandler(regs*)+0x799>
c001ee69:	66 ed                	in     ax,dx
c001ee6b:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001ee6e:	0f b7 c0             	movzx  eax,ax
c001ee71:	66 31 d2             	xor    dx,dx
c001ee74:	09 d0                	or     eax,edx
c001ee76:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001ee79:	eb 2e                	jmp    c001eea9 <Vm::faultHandler(regs*)+0x7cc>
c001ee7b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ee7e:	83 c4 10             	add    esp,0x10
c001ee81:	eb 29                	jmp    c001eeac <Vm::faultHandler(regs*)+0x7cf>
c001ee83:	50                   	push   eax
c001ee84:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ee87:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ee8a:	68 74 be 02 c0       	push   0xc002be74
c001ee8f:	e8 81 3c ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001ee94:	83 c4 10             	add    esp,0x10
c001ee97:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001ee9a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ee9f:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001eea2:	74 03                	je     c001eea7 <Vm::faultHandler(regs*)+0x7ca>
c001eea4:	ef                   	out    dx,eax
c001eea5:	eb 02                	jmp    c001eea9 <Vm::faultHandler(regs*)+0x7cc>
c001eea7:	66 ef                	out    dx,ax
c001eea9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eeac:	b0 01                	mov    al,0x1
c001eeae:	eb 56                	jmp    c001ef06 <Vm::faultHandler(regs*)+0x829>
c001eeb0:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001eeb4:	51                   	push   ecx
c001eeb5:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001eeb9:	51                   	push   ecx
c001eeba:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001eebe:	51                   	push   ecx
c001eebf:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001eec3:	51                   	push   ecx
c001eec4:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001eec8:	52                   	push   edx
c001eec9:	50                   	push   eax
c001eeca:	50                   	push   eax
c001eecb:	68 7d be 02 c0       	push   0xc002be7d
c001eed0:	e8 40 3c ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c001eed5:	83 c4 20             	add    esp,0x20
c001eed8:	83 ec 0c             	sub    esp,0xc
c001eedb:	6a 60                	push   0x60
c001eedd:	e8 06 f4 ff ff       	call   c001e2e8 <Vm::inbv(unsigned short)>
c001eee2:	83 c4 10             	add    esp,0x10
c001eee5:	3c 1c                	cmp    al,0x1c
c001eee7:	74 04                	je     c001eeed <Vm::faultHandler(regs*)+0x810>
c001eee9:	3c 5a                	cmp    al,0x5a
c001eeeb:	75 eb                	jne    c001eed8 <Vm::faultHandler(regs*)+0x7fb>
c001eeed:	3c 1c                	cmp    al,0x1c
c001eeef:	74 04                	je     c001eef5 <Vm::faultHandler(regs*)+0x818>
c001eef1:	3c 5a                	cmp    al,0x5a
c001eef3:	75 0f                	jne    c001ef04 <Vm::faultHandler(regs*)+0x827>
c001eef5:	83 ec 0c             	sub    esp,0xc
c001eef8:	6a 60                	push   0x60
c001eefa:	e8 e9 f3 ff ff       	call   c001e2e8 <Vm::inbv(unsigned short)>
c001eeff:	83 c4 10             	add    esp,0x10
c001ef02:	eb e9                	jmp    c001eeed <Vm::faultHandler(regs*)+0x810>
c001ef04:	31 c0                	xor    eax,eax
c001ef06:	83 c4 1c             	add    esp,0x1c
c001ef09:	5b                   	pop    ebx
c001ef0a:	5e                   	pop    esi
c001ef0b:	5f                   	pop    edi
c001ef0c:	5d                   	pop    ebp
c001ef0d:	c3                   	ret    

c001ef0e <Vm::fpuInternalTo32(unsigned long long)>:
c001ef0e:	57                   	push   edi
c001ef0f:	56                   	push   esi
c001ef10:	53                   	push   ebx
c001ef11:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef19:	89 d6                	mov    esi,edx
c001ef1b:	89 d7                	mov    edi,edx
c001ef1d:	89 c1                	mov    ecx,eax
c001ef1f:	c1 ef 14             	shr    edi,0x14
c001ef22:	89 d3                	mov    ebx,edx
c001ef24:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ef2a:	31 d2                	xor    edx,edx
c001ef2c:	89 f8                	mov    eax,edi
c001ef2e:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ef34:	bf ff 00 00 00       	mov    edi,0xff
c001ef39:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ef3e:	83 d2 ff             	adc    edx,0xffffffff
c001ef41:	39 c7                	cmp    edi,eax
c001ef43:	bf 00 00 00 00       	mov    edi,0x0
c001ef48:	19 d7                	sbb    edi,edx
c001ef4a:	72 15                	jb     c001ef61 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ef4c:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ef50:	c1 e0 17             	shl    eax,0x17
c001ef53:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ef59:	09 f1                	or     ecx,esi
c001ef5b:	09 c1                	or     ecx,eax
c001ef5d:	89 cf                	mov    edi,ecx
c001ef5f:	eb 02                	jmp    c001ef63 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ef61:	31 ff                	xor    edi,edi
c001ef63:	89 f8                	mov    eax,edi
c001ef65:	5b                   	pop    ebx
c001ef66:	5e                   	pop    esi
c001ef67:	5f                   	pop    edi
c001ef68:	c3                   	ret    

c001ef69 <Vm::fpuInternalTo64(unsigned long long)>:
c001ef69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef6d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ef71:	c3                   	ret    

c001ef72 <Vm::fpu32ToInternal(unsigned int)>:
c001ef72:	57                   	push   edi
c001ef73:	31 ff                	xor    edi,edi
c001ef75:	56                   	push   esi
c001ef76:	53                   	push   ebx
c001ef77:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef7b:	89 cb                	mov    ebx,ecx
c001ef7d:	89 ce                	mov    esi,ecx
c001ef7f:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001ef85:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001ef8b:	c1 e9 17             	shr    ecx,0x17
c001ef8e:	89 f0                	mov    eax,esi
c001ef90:	0f b6 d1             	movzx  edx,cl
c001ef93:	81 c2 80 03 00 00    	add    edx,0x380
c001ef99:	89 d1                	mov    ecx,edx
c001ef9b:	89 fa                	mov    edx,edi
c001ef9d:	c1 e1 14             	shl    ecx,0x14
c001efa0:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001efa4:	c1 e0 1d             	shl    eax,0x1d
c001efa7:	89 d7                	mov    edi,edx
c001efa9:	89 c6                	mov    esi,eax
c001efab:	89 ca                	mov    edx,ecx
c001efad:	89 f0                	mov    eax,esi
c001efaf:	09 fa                	or     edx,edi
c001efb1:	09 da                	or     edx,ebx
c001efb3:	5b                   	pop    ebx
c001efb4:	5e                   	pop    esi
c001efb5:	5f                   	pop    edi
c001efb6:	c3                   	ret    

c001efb7 <Vm::fpu64ToInternal(unsigned long long)>:
c001efb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efbb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001efbf:	c3                   	ret    

c001efc0 <Vm::fpuFloatToLong(unsigned long long)>:
c001efc0:	57                   	push   edi
c001efc1:	31 c0                	xor    eax,eax
c001efc3:	56                   	push   esi
c001efc4:	31 d2                	xor    edx,edx
c001efc6:	53                   	push   ebx
c001efc7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001efcb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001efcf:	89 d9                	mov    ecx,ebx
c001efd1:	c1 e9 14             	shr    ecx,0x14
c001efd4:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001efda:	89 cf                	mov    edi,ecx
c001efdc:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001efe2:	78 33                	js     c001f017 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001efe4:	89 d9                	mov    ecx,ebx
c001efe6:	89 f0                	mov    eax,esi
c001efe8:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001efee:	81 c9 00 00 10 00    	or     ecx,0x100000
c001eff4:	89 ca                	mov    edx,ecx
c001eff6:	b9 34 00 00 00       	mov    ecx,0x34
c001effb:	29 f9                	sub    ecx,edi
c001effd:	0f ad d0             	shrd   eax,edx,cl
c001f000:	d3 fa                	sar    edx,cl
c001f002:	f6 c1 20             	test   cl,0x20
c001f005:	74 05                	je     c001f00c <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f007:	89 d0                	mov    eax,edx
c001f009:	c1 fa 1f             	sar    edx,0x1f
c001f00c:	85 db                	test   ebx,ebx
c001f00e:	79 07                	jns    c001f017 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f010:	f7 d8                	neg    eax
c001f012:	83 d2 00             	adc    edx,0x0
c001f015:	f7 da                	neg    edx
c001f017:	5b                   	pop    ebx
c001f018:	5e                   	pop    esi
c001f019:	5f                   	pop    edi
c001f01a:	c3                   	ret    

c001f01b <Vm::fpuULongToFloat(unsigned long long)>:
c001f01b:	57                   	push   edi
c001f01c:	31 c9                	xor    ecx,ecx
c001f01e:	56                   	push   esi
c001f01f:	53                   	push   ebx
c001f020:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f024:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f028:	0f ba e7 14          	bt     edi,0x14
c001f02c:	72 07                	jb     c001f035 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f02e:	01 f6                	add    esi,esi
c001f030:	11 ff                	adc    edi,edi
c001f032:	41                   	inc    ecx
c001f033:	eb f3                	jmp    c001f028 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f035:	89 fa                	mov    edx,edi
c001f037:	89 f0                	mov    eax,esi
c001f039:	bb 33 04 00 00       	mov    ebx,0x433
c001f03e:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f044:	29 cb                	sub    ebx,ecx
c001f046:	89 d9                	mov    ecx,ebx
c001f048:	5b                   	pop    ebx
c001f049:	c1 e1 14             	shl    ecx,0x14
c001f04c:	5e                   	pop    esi
c001f04d:	09 ca                	or     edx,ecx
c001f04f:	5f                   	pop    edi
c001f050:	c3                   	ret    

c001f051 <Vm::fpuLongToFloat(long long)>:
c001f051:	56                   	push   esi
c001f052:	31 c0                	xor    eax,eax
c001f054:	53                   	push   ebx
c001f055:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f059:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f05d:	39 c8                	cmp    eax,ecx
c001f05f:	19 d8                	sbb    eax,ebx
c001f061:	7d 04                	jge    c001f067 <Vm::fpuLongToFloat(long long)+0x16>
c001f063:	31 f6                	xor    esi,esi
c001f065:	eb 0c                	jmp    c001f073 <Vm::fpuLongToFloat(long long)+0x22>
c001f067:	f7 d9                	neg    ecx
c001f069:	be 01 00 00 00       	mov    esi,0x1
c001f06e:	83 d3 00             	adc    ebx,0x0
c001f071:	f7 db                	neg    ebx
c001f073:	31 c0                	xor    eax,eax
c001f075:	0f ba e3 14          	bt     ebx,0x14
c001f079:	72 07                	jb     c001f082 <Vm::fpuLongToFloat(long long)+0x31>
c001f07b:	01 c9                	add    ecx,ecx
c001f07d:	11 db                	adc    ebx,ebx
c001f07f:	40                   	inc    eax
c001f080:	eb f3                	jmp    c001f075 <Vm::fpuLongToFloat(long long)+0x24>
c001f082:	ba 33 04 00 00       	mov    edx,0x433
c001f087:	29 c2                	sub    edx,eax
c001f089:	89 c8                	mov    eax,ecx
c001f08b:	c1 e2 14             	shl    edx,0x14
c001f08e:	89 d9                	mov    ecx,ebx
c001f090:	89 f3                	mov    ebx,esi
c001f092:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f098:	09 ca                	or     edx,ecx
c001f09a:	84 db                	test   bl,bl
c001f09c:	74 06                	je     c001f0a4 <Vm::fpuLongToFloat(long long)+0x53>
c001f09e:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f0a4:	5b                   	pop    ebx
c001f0a5:	5e                   	pop    esi
c001f0a6:	c3                   	ret    

c001f0a7 <Vm::fpuGet0()>:
c001f0a7:	31 c0                	xor    eax,eax
c001f0a9:	31 d2                	xor    edx,edx
c001f0ab:	c3                   	ret    

c001f0ac <Vm::fpuGet1()>:
c001f0ac:	b8 01 00 00 00       	mov    eax,0x1
c001f0b1:	31 d2                	xor    edx,edx
c001f0b3:	c3                   	ret    

c001f0b4 <Vm::fpuGetPi()>:
c001f0b4:	b8 03 00 00 00       	mov    eax,0x3
c001f0b9:	31 d2                	xor    edx,edx
c001f0bb:	c3                   	ret    

c001f0bc <Vm::fpuGetLog2E()>:
c001f0bc:	83 ec 18             	sub    esp,0x18
c001f0bf:	68 dc be 02 c0       	push   0xc002bedc
c001f0c4:	e8 74 af ff ff       	call   c001a03d <Krnl::panic(char const*)>
c001f0c9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f0ce:	31 d2                	xor    edx,edx
c001f0d0:	83 c4 1c             	add    esp,0x1c
c001f0d3:	c3                   	ret    

c001f0d4 <Vm::fpuGetLogE2()>:
c001f0d4:	83 ec 18             	sub    esp,0x18
c001f0d7:	68 e8 be 02 c0       	push   0xc002bee8
c001f0dc:	e8 5c af ff ff       	call   c001a03d <Krnl::panic(char const*)>
c001f0e1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f0e6:	31 d2                	xor    edx,edx
c001f0e8:	83 c4 1c             	add    esp,0x1c
c001f0eb:	c3                   	ret    

c001f0ec <Vm::fpuGetLog210()>:
c001f0ec:	83 ec 18             	sub    esp,0x18
c001f0ef:	68 f4 be 02 c0       	push   0xc002bef4
c001f0f4:	e8 44 af ff ff       	call   c001a03d <Krnl::panic(char const*)>
c001f0f9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f0fe:	31 d2                	xor    edx,edx
c001f100:	83 c4 1c             	add    esp,0x1c
c001f103:	c3                   	ret    

c001f104 <Vm::fpuGetLog102()>:
c001f104:	83 ec 18             	sub    esp,0x18
c001f107:	68 01 bf 02 c0       	push   0xc002bf01
c001f10c:	e8 2c af ff ff       	call   c001a03d <Krnl::panic(char const*)>
c001f111:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f116:	31 d2                	xor    edx,edx
c001f118:	83 c4 1c             	add    esp,0x1c
c001f11b:	c3                   	ret    

c001f11c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f11c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f120:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f124:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f128:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f12c:	0f 92 c0             	setb   al
c001f12f:	c3                   	ret    

c001f130 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f130:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f138:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f13c:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f140:	09 c2                	or     edx,eax
c001f142:	0f 94 c0             	sete   al
c001f145:	c3                   	ret    

c001f146 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f146:	57                   	push   edi
c001f147:	56                   	push   esi
c001f148:	53                   	push   ebx
c001f149:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f14d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f151:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f155:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f159:	57                   	push   edi
c001f15a:	56                   	push   esi
c001f15b:	53                   	push   ebx
c001f15c:	51                   	push   ecx
c001f15d:	e8 ce ff ff ff       	call   c001f130 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f162:	83 c4 10             	add    esp,0x10
c001f165:	88 c2                	mov    dl,al
c001f167:	31 c0                	xor    eax,eax
c001f169:	84 d2                	test   dl,dl
c001f16b:	75 0c                	jne    c001f179 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f16d:	57                   	push   edi
c001f16e:	56                   	push   esi
c001f16f:	53                   	push   ebx
c001f170:	51                   	push   ecx
c001f171:	e8 a6 ff ff ff       	call   c001f11c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f176:	83 c4 10             	add    esp,0x10
c001f179:	83 e0 01             	and    eax,0x1
c001f17c:	5b                   	pop    ebx
c001f17d:	88 c1                	mov    cl,al
c001f17f:	83 e2 01             	and    edx,0x1
c001f182:	a0 61 11 03 c0       	mov    al,ds:0xc0031161
c001f187:	c1 e2 06             	shl    edx,0x6
c001f18a:	83 e0 ba             	and    eax,0xffffffba
c001f18d:	5e                   	pop    esi
c001f18e:	09 c8                	or     eax,ecx
c001f190:	5f                   	pop    edi
c001f191:	09 d0                	or     eax,edx
c001f193:	a2 61 11 03 c0       	mov    ds:0xc0031161,al
c001f198:	c3                   	ret    

c001f199 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f199:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f19d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f1a1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f1a5:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f1a9:	c3                   	ret    

c001f1aa <Vm::fpuAbs(unsigned long long)>:
c001f1aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f1b2:	c3                   	ret    

c001f1b3 <Vm::fpuChs(unsigned long long)>:
c001f1b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f1bb:	f7 d8                	neg    eax
c001f1bd:	83 d2 00             	adc    edx,0x0
c001f1c0:	f7 da                	neg    edx
c001f1c2:	c3                   	ret    

c001f1c3 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f1c3:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f1c7:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f1cc:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f1d0:	eb c7                	jmp    c001f199 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f1d2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f1d2:	53                   	push   ebx
c001f1d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f1d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f1db:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f1df:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f1e3:	0f af ca             	imul   ecx,edx
c001f1e6:	0f af d8             	imul   ebx,eax
c001f1e9:	f7 e2                	mul    edx
c001f1eb:	01 d9                	add    ecx,ebx
c001f1ed:	5b                   	pop    ebx
c001f1ee:	01 ca                	add    edx,ecx
c001f1f0:	c3                   	ret    

c001f1f1 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f1f1:	83 ec 0c             	sub    esp,0xc
c001f1f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f204:	e8 a3 70 00 00       	call   c00262ac <__udivdi3>
c001f209:	83 c4 1c             	add    esp,0x1c
c001f20c:	c3                   	ret    

c001f20d <Vm::fpuSquare(unsigned long long)>:
c001f20d:	50                   	push   eax
c001f20e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f212:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f216:	52                   	push   edx
c001f217:	50                   	push   eax
c001f218:	52                   	push   edx
c001f219:	50                   	push   eax
c001f21a:	e8 b3 ff ff ff       	call   c001f1d2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f21f:	83 c4 14             	add    esp,0x14
c001f222:	c3                   	ret    

c001f223 <Vm::fpuGetReg(int)>:
c001f223:	83 ec 0c             	sub    esp,0xc
c001f226:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f22b:	76 10                	jbe    c001f23d <Vm::fpuGetReg(int)+0x1a>
c001f22d:	83 ec 0c             	sub    esp,0xc
c001f230:	68 0e bf 02 c0       	push   0xc002bf0e
c001f235:	e8 03 ae ff ff       	call   c001a03d <Krnl::panic(char const*)>
c001f23a:	83 c4 10             	add    esp,0x10
c001f23d:	a0 61 11 03 c0       	mov    al,ds:0xc0031161
c001f242:	b9 08 00 00 00       	mov    ecx,0x8
c001f247:	c0 e8 03             	shr    al,0x3
c001f24a:	83 e0 07             	and    eax,0x7
c001f24d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f251:	99                   	cdq    
c001f252:	f7 f9                	idiv   ecx
c001f254:	8b 04 d5 64 11 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcee9c]
c001f25b:	8b 14 d5 68 11 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcee98]
c001f262:	83 c4 0c             	add    esp,0xc
c001f265:	c3                   	ret    

c001f266 <Vm::fpuSetReg(int, unsigned long long)>:
c001f266:	57                   	push   edi
c001f267:	56                   	push   esi
c001f268:	52                   	push   edx
c001f269:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f26d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f271:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f276:	76 10                	jbe    c001f288 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f278:	83 ec 0c             	sub    esp,0xc
c001f27b:	68 21 bf 02 c0       	push   0xc002bf21
c001f280:	e8 b8 ad ff ff       	call   c001a03d <Krnl::panic(char const*)>
c001f285:	83 c4 10             	add    esp,0x10
c001f288:	a0 61 11 03 c0       	mov    al,ds:0xc0031161
c001f28d:	b9 08 00 00 00       	mov    ecx,0x8
c001f292:	c0 e8 03             	shr    al,0x3
c001f295:	83 e0 07             	and    eax,0x7
c001f298:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f29c:	99                   	cdq    
c001f29d:	f7 f9                	idiv   ecx
c001f29f:	89 34 d5 64 11 03 c0 	mov    DWORD PTR [edx*8-0x3ffcee9c],esi
c001f2a6:	89 3c d5 68 11 03 c0 	mov    DWORD PTR [edx*8-0x3ffcee98],edi
c001f2ad:	58                   	pop    eax
c001f2ae:	5e                   	pop    esi
c001f2af:	5f                   	pop    edi
c001f2b0:	c3                   	ret    

c001f2b1 <Vm::fpuPush(unsigned long long)>:
c001f2b1:	a0 61 11 03 c0       	mov    al,ds:0xc0031161
c001f2b6:	c0 e8 03             	shr    al,0x3
c001f2b9:	83 e0 07             	and    eax,0x7
c001f2bc:	83 c0 07             	add    eax,0x7
c001f2bf:	88 c2                	mov    dl,al
c001f2c1:	83 e0 07             	and    eax,0x7
c001f2c4:	83 e2 07             	and    edx,0x7
c001f2c7:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f2ce:	8a 15 61 11 03 c0    	mov    dl,BYTE PTR ds:0xc0031161
c001f2d4:	83 e2 c7             	and    edx,0xffffffc7
c001f2d7:	09 ca                	or     edx,ecx
c001f2d9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2dd:	88 15 61 11 03 c0    	mov    BYTE PTR ds:0xc0031161,dl
c001f2e3:	89 0c c5 68 11 03 c0 	mov    DWORD PTR [eax*8-0x3ffcee98],ecx
c001f2ea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f2ee:	89 14 c5 64 11 03 c0 	mov    DWORD PTR [eax*8-0x3ffcee9c],edx
c001f2f5:	a1 a4 11 03 c0       	mov    eax,ds:0xc00311a4
c001f2fa:	83 f8 08             	cmp    eax,0x8
c001f2fd:	75 08                	jne    c001f307 <Vm::fpuPush(unsigned long long)+0x56>
c001f2ff:	80 0d 60 11 03 c0 40 	or     BYTE PTR ds:0xc0031160,0x40
c001f306:	c3                   	ret    
c001f307:	40                   	inc    eax
c001f308:	a3 a4 11 03 c0       	mov    ds:0xc00311a4,eax
c001f30d:	c3                   	ret    

c001f30e <Vm::fpuPop()>:
c001f30e:	8a 0d 61 11 03 c0    	mov    cl,BYTE PTR ds:0xc0031161
c001f314:	53                   	push   ebx
c001f315:	c0 e9 03             	shr    cl,0x3
c001f318:	8a 1d 61 11 03 c0    	mov    bl,BYTE PTR ds:0xc0031161
c001f31e:	83 e1 07             	and    ecx,0x7
c001f321:	83 e3 c7             	and    ebx,0xffffffc7
c001f324:	8b 04 cd 64 11 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcee9c]
c001f32b:	8b 14 cd 68 11 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcee98]
c001f332:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f339:	83 e1 38             	and    ecx,0x38
c001f33c:	09 d9                	or     ecx,ebx
c001f33e:	88 0d 61 11 03 c0    	mov    BYTE PTR ds:0xc0031161,cl
c001f344:	8b 0d a4 11 03 c0    	mov    ecx,DWORD PTR ds:0xc00311a4
c001f34a:	85 c9                	test   ecx,ecx
c001f34c:	74 09                	je     c001f357 <Vm::fpuPop()+0x49>
c001f34e:	49                   	dec    ecx
c001f34f:	89 0d a4 11 03 c0    	mov    DWORD PTR ds:0xc00311a4,ecx
c001f355:	eb 07                	jmp    c001f35e <Vm::fpuPop()+0x50>
c001f357:	80 0d 60 11 03 c0 40 	or     BYTE PTR ds:0xc0031160,0x40
c001f35e:	5b                   	pop    ebx
c001f35f:	c3                   	ret    

c001f360 <Vm::x87Handler(regs*)>:
c001f360:	55                   	push   ebp
c001f361:	57                   	push   edi
c001f362:	56                   	push   esi
c001f363:	53                   	push   ebx
c001f364:	83 ec 1c             	sub    esp,0x1c
c001f367:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f36b:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f370:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f373:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f37b:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f37f:	50                   	push   eax
c001f380:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f384:	50                   	push   eax
c001f385:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f389:	50                   	push   eax
c001f38a:	53                   	push   ebx
c001f38b:	e8 9a a4 ff ff       	call   c001982a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f390:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f393:	83 c4 10             	add    esp,0x10
c001f396:	89 c6                	mov    esi,eax
c001f398:	80 fa d9             	cmp    dl,0xd9
c001f39b:	0f 85 52 01 00 00    	jne    c001f4f3 <Vm::x87Handler(regs*)+0x193>
c001f3a1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3a5:	8d 50 20             	lea    edx,[eax+0x20]
c001f3a8:	80 fa 0e             	cmp    dl,0xe
c001f3ab:	0f 87 86 00 00 00    	ja     c001f437 <Vm::x87Handler(regs*)+0xd7>
c001f3b1:	0f b6 d2             	movzx  edx,dl
c001f3b4:	ff 24 95 34 bf 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd40cc]
c001f3bb:	e8 e7 fc ff ff       	call   c001f0a7 <Vm::fpuGet0()>
c001f3c0:	eb 05                	jmp    c001f3c7 <Vm::x87Handler(regs*)+0x67>
c001f3c2:	e8 e5 fc ff ff       	call   c001f0ac <Vm::fpuGet1()>
c001f3c7:	57                   	push   edi
c001f3c8:	57                   	push   edi
c001f3c9:	52                   	push   edx
c001f3ca:	50                   	push   eax
c001f3cb:	e8 e1 fe ff ff       	call   c001f2b1 <Vm::fpuPush(unsigned long long)>
c001f3d0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f3d4:	83 c4 10             	add    esp,0x10
c001f3d7:	b0 01                	mov    al,0x1
c001f3d9:	e9 e3 09 00 00       	jmp    c001fdc1 <Vm::x87Handler(regs*)+0xa61>
c001f3de:	83 ec 0c             	sub    esp,0xc
c001f3e1:	6a 00                	push   0x0
c001f3e3:	e8 3b fe ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f3e8:	59                   	pop    ecx
c001f3e9:	5e                   	pop    esi
c001f3ea:	52                   	push   edx
c001f3eb:	50                   	push   eax
c001f3ec:	e8 c2 fd ff ff       	call   c001f1b3 <Vm::fpuChs(unsigned long long)>
c001f3f1:	eb 13                	jmp    c001f406 <Vm::x87Handler(regs*)+0xa6>
c001f3f3:	83 ec 0c             	sub    esp,0xc
c001f3f6:	6a 00                	push   0x0
c001f3f8:	e8 26 fe ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f3fd:	5f                   	pop    edi
c001f3fe:	5d                   	pop    ebp
c001f3ff:	52                   	push   edx
c001f400:	50                   	push   eax
c001f401:	e8 a4 fd ff ff       	call   c001f1aa <Vm::fpuAbs(unsigned long long)>
c001f406:	83 c4 0c             	add    esp,0xc
c001f409:	52                   	push   edx
c001f40a:	50                   	push   eax
c001f40b:	6a 00                	push   0x0
c001f40d:	e8 54 fe ff ff       	call   c001f266 <Vm::fpuSetReg(int, unsigned long long)>
c001f412:	eb bc                	jmp    c001f3d0 <Vm::x87Handler(regs*)+0x70>
c001f414:	e8 d3 fc ff ff       	call   c001f0ec <Vm::fpuGetLog210()>
c001f419:	eb ac                	jmp    c001f3c7 <Vm::x87Handler(regs*)+0x67>
c001f41b:	e8 9c fc ff ff       	call   c001f0bc <Vm::fpuGetLog2E()>
c001f420:	eb a5                	jmp    c001f3c7 <Vm::x87Handler(regs*)+0x67>
c001f422:	e8 8d fc ff ff       	call   c001f0b4 <Vm::fpuGetPi()>
c001f427:	eb 9e                	jmp    c001f3c7 <Vm::x87Handler(regs*)+0x67>
c001f429:	e8 d6 fc ff ff       	call   c001f104 <Vm::fpuGetLog102()>
c001f42e:	eb 97                	jmp    c001f3c7 <Vm::x87Handler(regs*)+0x67>
c001f430:	e8 9f fc ff ff       	call   c001f0d4 <Vm::fpuGetLogE2()>
c001f435:	eb 90                	jmp    c001f3c7 <Vm::x87Handler(regs*)+0x67>
c001f437:	8d 50 40             	lea    edx,[eax+0x40]
c001f43a:	80 fa 07             	cmp    dl,0x7
c001f43d:	77 15                	ja     c001f454 <Vm::x87Handler(regs*)+0xf4>
c001f43f:	83 ec 0c             	sub    esp,0xc
c001f442:	2d c0 00 00 00       	sub    eax,0xc0
c001f447:	50                   	push   eax
c001f448:	e8 d6 fd ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f44d:	59                   	pop    ecx
c001f44e:	5e                   	pop    esi
c001f44f:	e9 75 ff ff ff       	jmp    c001f3c9 <Vm::x87Handler(regs*)+0x69>
c001f454:	8d 50 38             	lea    edx,[eax+0x38]
c001f457:	80 fa 07             	cmp    dl,0x7
c001f45a:	77 3c                	ja     c001f498 <Vm::x87Handler(regs*)+0x138>
c001f45c:	83 ec 0c             	sub    esp,0xc
c001f45f:	2d c8 00 00 00       	sub    eax,0xc8
c001f464:	50                   	push   eax
c001f465:	e8 b9 fd ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f46a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f471:	89 c6                	mov    esi,eax
c001f473:	89 d7                	mov    edi,edx
c001f475:	e8 a9 fd ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f47a:	83 c4 0c             	add    esp,0xc
c001f47d:	52                   	push   edx
c001f47e:	50                   	push   eax
c001f47f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f483:	2d c8 00 00 00       	sub    eax,0xc8
c001f488:	50                   	push   eax
c001f489:	e8 d8 fd ff ff       	call   c001f266 <Vm::fpuSetReg(int, unsigned long long)>
c001f48e:	83 c4 0c             	add    esp,0xc
c001f491:	57                   	push   edi
c001f492:	56                   	push   esi
c001f493:	e9 73 ff ff ff       	jmp    c001f40b <Vm::x87Handler(regs*)+0xab>
c001f498:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f49c:	84 d2                	test   dl,dl
c001f49e:	75 0f                	jne    c001f4af <Vm::x87Handler(regs*)+0x14f>
c001f4a0:	83 ec 0c             	sub    esp,0xc
c001f4a3:	ff 36                	push   DWORD PTR [esi]
c001f4a5:	e8 c8 fa ff ff       	call   c001ef72 <Vm::fpu32ToInternal(unsigned int)>
c001f4aa:	e9 bf 00 00 00       	jmp    c001f56e <Vm::x87Handler(regs*)+0x20e>
c001f4af:	80 fa 03             	cmp    dl,0x3
c001f4b2:	75 13                	jne    c001f4c7 <Vm::x87Handler(regs*)+0x167>
c001f4b4:	e8 55 fe ff ff       	call   c001f30e <Vm::fpuPop()>
c001f4b9:	55                   	push   ebp
c001f4ba:	55                   	push   ebp
c001f4bb:	52                   	push   edx
c001f4bc:	50                   	push   eax
c001f4bd:	e8 4c fa ff ff       	call   c001ef0e <Vm::fpuInternalTo32(unsigned long long)>
c001f4c2:	e9 88 00 00 00       	jmp    c001f54f <Vm::x87Handler(regs*)+0x1ef>
c001f4c7:	80 fa 05             	cmp    dl,0x5
c001f4ca:	75 0e                	jne    c001f4da <Vm::x87Handler(regs*)+0x17a>
c001f4cc:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f4cf:	66 a3 62 11 03 c0    	mov    ds:0xc0031162,ax
c001f4d5:	e9 df 00 00 00       	jmp    c001f5b9 <Vm::x87Handler(regs*)+0x259>
c001f4da:	31 c0                	xor    eax,eax
c001f4dc:	80 fa 07             	cmp    dl,0x7
c001f4df:	0f 85 dc 08 00 00    	jne    c001fdc1 <Vm::x87Handler(regs*)+0xa61>
c001f4e5:	66 a1 62 11 03 c0    	mov    ax,ds:0xc0031162
c001f4eb:	66 89 06             	mov    WORD PTR [esi],ax
c001f4ee:	e9 c6 00 00 00       	jmp    c001f5b9 <Vm::x87Handler(regs*)+0x259>
c001f4f3:	80 fa d8             	cmp    dl,0xd8
c001f4f6:	0f 84 c9 00 00 00    	je     c001f5c5 <Vm::x87Handler(regs*)+0x265>
c001f4fc:	80 fa dc             	cmp    dl,0xdc
c001f4ff:	0f 84 0d 02 00 00    	je     c001f712 <Vm::x87Handler(regs*)+0x3b2>
c001f505:	80 fa de             	cmp    dl,0xde
c001f508:	0f 84 cd 02 00 00    	je     c001f7db <Vm::x87Handler(regs*)+0x47b>
c001f50e:	80 fa dd             	cmp    dl,0xdd
c001f511:	0f 84 5f 04 00 00    	je     c001f976 <Vm::x87Handler(regs*)+0x616>
c001f517:	80 fa da             	cmp    dl,0xda
c001f51a:	0f 84 24 05 00 00    	je     c001fa44 <Vm::x87Handler(regs*)+0x6e4>
c001f520:	80 fa df             	cmp    dl,0xdf
c001f523:	0f 84 68 05 00 00    	je     c001fa91 <Vm::x87Handler(regs*)+0x731>
c001f529:	31 c0                	xor    eax,eax
c001f52b:	80 fa db             	cmp    dl,0xdb
c001f52e:	0f 85 8d 08 00 00    	jne    c001fdc1 <Vm::x87Handler(regs*)+0xa61>
c001f534:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f538:	80 fa 03             	cmp    dl,0x3
c001f53b:	0f 85 70 06 00 00    	jne    c001fbb1 <Vm::x87Handler(regs*)+0x851>
c001f541:	e8 c8 fd ff ff       	call   c001f30e <Vm::fpuPop()>
c001f546:	55                   	push   ebp
c001f547:	55                   	push   ebp
c001f548:	52                   	push   edx
c001f549:	50                   	push   eax
c001f54a:	e8 71 fa ff ff       	call   c001efc0 <Vm::fpuFloatToLong(unsigned long long)>
c001f54f:	83 c4 10             	add    esp,0x10
c001f552:	89 06                	mov    DWORD PTR [esi],eax
c001f554:	eb 63                	jmp    c001f5b9 <Vm::x87Handler(regs*)+0x259>
c001f556:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f55a:	84 d2                	test   dl,dl
c001f55c:	0f 85 e6 05 00 00    	jne    c001fb48 <Vm::x87Handler(regs*)+0x7e8>
c001f562:	57                   	push   edi
c001f563:	57                   	push   edi
c001f564:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f567:	ff 36                	push   DWORD PTR [esi]
c001f569:	e8 49 fa ff ff       	call   c001efb7 <Vm::fpu64ToInternal(unsigned long long)>
c001f56e:	5e                   	pop    esi
c001f56f:	5f                   	pop    edi
c001f570:	52                   	push   edx
c001f571:	50                   	push   eax
c001f572:	e8 3a fd ff ff       	call   c001f2b1 <Vm::fpuPush(unsigned long long)>
c001f577:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f57b:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f57e:	e9 51 fe ff ff       	jmp    c001f3d4 <Vm::x87Handler(regs*)+0x74>
c001f583:	80 fa 03             	cmp    dl,0x3
c001f586:	0f 85 d7 06 00 00    	jne    c001fc63 <Vm::x87Handler(regs*)+0x903>
c001f58c:	57                   	push   edi
c001f58d:	57                   	push   edi
c001f58e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f591:	ff 36                	push   DWORD PTR [esi]
c001f593:	e8 1f fa ff ff       	call   c001efb7 <Vm::fpu64ToInternal(unsigned long long)>
c001f598:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f59f:	89 c6                	mov    esi,eax
c001f5a1:	89 d7                	mov    edi,edx
c001f5a3:	e8 7b fc ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f5a8:	57                   	push   edi
c001f5a9:	56                   	push   esi
c001f5aa:	52                   	push   edx
c001f5ab:	50                   	push   eax
c001f5ac:	e8 95 fb ff ff       	call   c001f146 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f5b1:	83 c4 20             	add    esp,0x20
c001f5b4:	e8 55 fd ff ff       	call   c001f30e <Vm::fpuPop()>
c001f5b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f5bd:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f5c0:	e9 12 fe ff ff       	jmp    c001f3d7 <Vm::x87Handler(regs*)+0x77>
c001f5c5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5c9:	8d 50 40             	lea    edx,[eax+0x40]
c001f5cc:	80 fa 07             	cmp    dl,0x7
c001f5cf:	77 29                	ja     c001f5fa <Vm::x87Handler(regs*)+0x29a>
c001f5d1:	83 ec 0c             	sub    esp,0xc
c001f5d4:	2d c0 00 00 00       	sub    eax,0xc0
c001f5d9:	50                   	push   eax
c001f5da:	e8 44 fc ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f5df:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5e6:	89 c6                	mov    esi,eax
c001f5e8:	89 d7                	mov    edi,edx
c001f5ea:	e8 34 fc ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f5ef:	57                   	push   edi
c001f5f0:	56                   	push   esi
c001f5f1:	52                   	push   edx
c001f5f2:	50                   	push   eax
c001f5f3:	e8 a1 fb ff ff       	call   c001f199 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f5f8:	eb 2f                	jmp    c001f629 <Vm::x87Handler(regs*)+0x2c9>
c001f5fa:	8d 50 38             	lea    edx,[eax+0x38]
c001f5fd:	80 fa 07             	cmp    dl,0x7
c001f600:	77 2f                	ja     c001f631 <Vm::x87Handler(regs*)+0x2d1>
c001f602:	83 ec 0c             	sub    esp,0xc
c001f605:	2d c8 00 00 00       	sub    eax,0xc8
c001f60a:	50                   	push   eax
c001f60b:	e8 13 fc ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f610:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f617:	89 c6                	mov    esi,eax
c001f619:	89 d7                	mov    edi,edx
c001f61b:	e8 03 fc ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f620:	57                   	push   edi
c001f621:	56                   	push   esi
c001f622:	52                   	push   edx
c001f623:	50                   	push   eax
c001f624:	e8 a9 fb ff ff       	call   c001f1d2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f629:	83 c4 1c             	add    esp,0x1c
c001f62c:	e9 d8 fd ff ff       	jmp    c001f409 <Vm::x87Handler(regs*)+0xa9>
c001f631:	8d 50 30             	lea    edx,[eax+0x30]
c001f634:	80 fa 07             	cmp    dl,0x7
c001f637:	77 0d                	ja     c001f646 <Vm::x87Handler(regs*)+0x2e6>
c001f639:	83 ec 0c             	sub    esp,0xc
c001f63c:	2d d0 00 00 00       	sub    eax,0xd0
c001f641:	e9 99 03 00 00       	jmp    c001f9df <Vm::x87Handler(regs*)+0x67f>
c001f646:	8d 50 28             	lea    edx,[eax+0x28]
c001f649:	80 fa 07             	cmp    dl,0x7
c001f64c:	77 0d                	ja     c001f65b <Vm::x87Handler(regs*)+0x2fb>
c001f64e:	83 ec 0c             	sub    esp,0xc
c001f651:	2d d8 00 00 00       	sub    eax,0xd8
c001f656:	e9 c0 03 00 00       	jmp    c001fa1b <Vm::x87Handler(regs*)+0x6bb>
c001f65b:	8d 50 20             	lea    edx,[eax+0x20]
c001f65e:	80 fa 07             	cmp    dl,0x7
c001f661:	77 1b                	ja     c001f67e <Vm::x87Handler(regs*)+0x31e>
c001f663:	83 ec 0c             	sub    esp,0xc
c001f666:	2d e0 00 00 00       	sub    eax,0xe0
c001f66b:	50                   	push   eax
c001f66c:	e8 b2 fb ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f671:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f678:	89 c6                	mov    esi,eax
c001f67a:	89 d7                	mov    edi,edx
c001f67c:	eb 22                	jmp    c001f6a0 <Vm::x87Handler(regs*)+0x340>
c001f67e:	8d 50 18             	lea    edx,[eax+0x18]
c001f681:	80 fa 07             	cmp    dl,0x7
c001f684:	77 2d                	ja     c001f6b3 <Vm::x87Handler(regs*)+0x353>
c001f686:	83 ec 0c             	sub    esp,0xc
c001f689:	6a 00                	push   0x0
c001f68b:	e8 93 fb ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f690:	89 c6                	mov    esi,eax
c001f692:	89 d7                	mov    edi,edx
c001f694:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f698:	2d e8 00 00 00       	sub    eax,0xe8
c001f69d:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6a0:	e8 7e fb ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f6a5:	57                   	push   edi
c001f6a6:	56                   	push   esi
c001f6a7:	52                   	push   edx
c001f6a8:	50                   	push   eax
c001f6a9:	e8 15 fb ff ff       	call   c001f1c3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f6ae:	e9 76 ff ff ff       	jmp    c001f629 <Vm::x87Handler(regs*)+0x2c9>
c001f6b3:	8d 50 10             	lea    edx,[eax+0x10]
c001f6b6:	80 fa 07             	cmp    dl,0x7
c001f6b9:	77 1b                	ja     c001f6d6 <Vm::x87Handler(regs*)+0x376>
c001f6bb:	83 ec 0c             	sub    esp,0xc
c001f6be:	2d f0 00 00 00       	sub    eax,0xf0
c001f6c3:	50                   	push   eax
c001f6c4:	e8 5a fb ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f6c9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6d0:	89 c6                	mov    esi,eax
c001f6d2:	89 d7                	mov    edi,edx
c001f6d4:	eb 22                	jmp    c001f6f8 <Vm::x87Handler(regs*)+0x398>
c001f6d6:	3c f7                	cmp    al,0xf7
c001f6d8:	0f 86 d1 03 00 00    	jbe    c001faaf <Vm::x87Handler(regs*)+0x74f>
c001f6de:	83 ec 0c             	sub    esp,0xc
c001f6e1:	6a 00                	push   0x0
c001f6e3:	e8 3b fb ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f6e8:	89 c6                	mov    esi,eax
c001f6ea:	89 d7                	mov    edi,edx
c001f6ec:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6f0:	2d f8 00 00 00       	sub    eax,0xf8
c001f6f5:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6f8:	e8 26 fb ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f6fd:	57                   	push   edi
c001f6fe:	56                   	push   esi
c001f6ff:	52                   	push   edx
c001f700:	50                   	push   eax
c001f701:	e8 eb fa ff ff       	call   c001f1f1 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f706:	83 c4 1c             	add    esp,0x1c
c001f709:	52                   	push   edx
c001f70a:	50                   	push   eax
c001f70b:	6a 00                	push   0x0
c001f70d:	e9 51 02 00 00       	jmp    c001f963 <Vm::x87Handler(regs*)+0x603>
c001f712:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f716:	8d 50 40             	lea    edx,[eax+0x40]
c001f719:	80 fa 07             	cmp    dl,0x7
c001f71c:	77 37                	ja     c001f755 <Vm::x87Handler(regs*)+0x3f5>
c001f71e:	83 ec 0c             	sub    esp,0xc
c001f721:	2d c0 00 00 00       	sub    eax,0xc0
c001f726:	50                   	push   eax
c001f727:	e8 f7 fa ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f72c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f733:	89 c6                	mov    esi,eax
c001f735:	89 d7                	mov    edi,edx
c001f737:	e8 e7 fa ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f73c:	57                   	push   edi
c001f73d:	56                   	push   esi
c001f73e:	52                   	push   edx
c001f73f:	50                   	push   eax
c001f740:	e8 54 fa ff ff       	call   c001f199 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f745:	83 c4 1c             	add    esp,0x1c
c001f748:	52                   	push   edx
c001f749:	50                   	push   eax
c001f74a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f74e:	2d c0 00 00 00       	sub    eax,0xc0
c001f753:	eb 3d                	jmp    c001f792 <Vm::x87Handler(regs*)+0x432>
c001f755:	8d 50 38             	lea    edx,[eax+0x38]
c001f758:	80 fa 07             	cmp    dl,0x7
c001f75b:	77 3b                	ja     c001f798 <Vm::x87Handler(regs*)+0x438>
c001f75d:	83 ec 0c             	sub    esp,0xc
c001f760:	2d c8 00 00 00       	sub    eax,0xc8
c001f765:	50                   	push   eax
c001f766:	e8 b8 fa ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f76b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f772:	89 c6                	mov    esi,eax
c001f774:	89 d7                	mov    edi,edx
c001f776:	e8 a8 fa ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f77b:	57                   	push   edi
c001f77c:	56                   	push   esi
c001f77d:	52                   	push   edx
c001f77e:	50                   	push   eax
c001f77f:	e8 4e fa ff ff       	call   c001f1d2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f784:	83 c4 1c             	add    esp,0x1c
c001f787:	52                   	push   edx
c001f788:	50                   	push   eax
c001f789:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f78d:	2d c8 00 00 00       	sub    eax,0xc8
c001f792:	50                   	push   eax
c001f793:	e9 75 fc ff ff       	jmp    c001f40d <Vm::x87Handler(regs*)+0xad>
c001f798:	83 c0 18             	add    eax,0x18
c001f79b:	3c 07                	cmp    al,0x7
c001f79d:	0f 87 3b 04 00 00    	ja     c001fbde <Vm::x87Handler(regs*)+0x87e>
c001f7a3:	83 ec 0c             	sub    esp,0xc
c001f7a6:	6a 00                	push   0x0
c001f7a8:	e8 76 fa ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f7ad:	89 c6                	mov    esi,eax
c001f7af:	89 d7                	mov    edi,edx
c001f7b1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7b5:	2d e8 00 00 00       	sub    eax,0xe8
c001f7ba:	89 04 24             	mov    DWORD PTR [esp],eax
c001f7bd:	e8 61 fa ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f7c2:	57                   	push   edi
c001f7c3:	56                   	push   esi
c001f7c4:	52                   	push   edx
c001f7c5:	50                   	push   eax
c001f7c6:	e8 f8 f9 ff ff       	call   c001f1c3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f7cb:	83 c4 1c             	add    esp,0x1c
c001f7ce:	52                   	push   edx
c001f7cf:	50                   	push   eax
c001f7d0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7d4:	2d e8 00 00 00       	sub    eax,0xe8
c001f7d9:	eb b7                	jmp    c001f792 <Vm::x87Handler(regs*)+0x432>
c001f7db:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7df:	8d 50 40             	lea    edx,[eax+0x40]
c001f7e2:	80 fa 07             	cmp    dl,0x7
c001f7e5:	77 3a                	ja     c001f821 <Vm::x87Handler(regs*)+0x4c1>
c001f7e7:	83 ec 0c             	sub    esp,0xc
c001f7ea:	2d c0 00 00 00       	sub    eax,0xc0
c001f7ef:	50                   	push   eax
c001f7f0:	e8 2e fa ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f7f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7fc:	89 c6                	mov    esi,eax
c001f7fe:	89 d7                	mov    edi,edx
c001f800:	e8 1e fa ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f805:	57                   	push   edi
c001f806:	56                   	push   esi
c001f807:	52                   	push   edx
c001f808:	50                   	push   eax
c001f809:	e8 8b f9 ff ff       	call   c001f199 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f80e:	83 c4 1c             	add    esp,0x1c
c001f811:	52                   	push   edx
c001f812:	50                   	push   eax
c001f813:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f817:	2d c0 00 00 00       	sub    eax,0xc0
c001f81c:	e9 9e 01 00 00       	jmp    c001f9bf <Vm::x87Handler(regs*)+0x65f>
c001f821:	8d 50 20             	lea    edx,[eax+0x20]
c001f824:	80 fa 07             	cmp    dl,0x7
c001f827:	77 3a                	ja     c001f863 <Vm::x87Handler(regs*)+0x503>
c001f829:	83 ec 0c             	sub    esp,0xc
c001f82c:	2d e0 00 00 00       	sub    eax,0xe0
c001f831:	50                   	push   eax
c001f832:	e8 ec f9 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f837:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f83e:	89 c6                	mov    esi,eax
c001f840:	89 d7                	mov    edi,edx
c001f842:	e8 dc f9 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f847:	57                   	push   edi
c001f848:	56                   	push   esi
c001f849:	52                   	push   edx
c001f84a:	50                   	push   eax
c001f84b:	e8 73 f9 ff ff       	call   c001f1c3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f850:	83 c4 1c             	add    esp,0x1c
c001f853:	52                   	push   edx
c001f854:	50                   	push   eax
c001f855:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f859:	2d e0 00 00 00       	sub    eax,0xe0
c001f85e:	e9 5c 01 00 00       	jmp    c001f9bf <Vm::x87Handler(regs*)+0x65f>
c001f863:	8d 50 18             	lea    edx,[eax+0x18]
c001f866:	80 fa 07             	cmp    dl,0x7
c001f869:	77 3b                	ja     c001f8a6 <Vm::x87Handler(regs*)+0x546>
c001f86b:	83 ec 0c             	sub    esp,0xc
c001f86e:	6a 00                	push   0x0
c001f870:	e8 ae f9 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f875:	89 c6                	mov    esi,eax
c001f877:	89 d7                	mov    edi,edx
c001f879:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f87d:	2d e8 00 00 00       	sub    eax,0xe8
c001f882:	89 04 24             	mov    DWORD PTR [esp],eax
c001f885:	e8 99 f9 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f88a:	57                   	push   edi
c001f88b:	56                   	push   esi
c001f88c:	52                   	push   edx
c001f88d:	50                   	push   eax
c001f88e:	e8 30 f9 ff ff       	call   c001f1c3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f893:	83 c4 1c             	add    esp,0x1c
c001f896:	52                   	push   edx
c001f897:	50                   	push   eax
c001f898:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f89c:	2d e8 00 00 00       	sub    eax,0xe8
c001f8a1:	e9 19 01 00 00       	jmp    c001f9bf <Vm::x87Handler(regs*)+0x65f>
c001f8a6:	8d 50 38             	lea    edx,[eax+0x38]
c001f8a9:	80 fa 07             	cmp    dl,0x7
c001f8ac:	77 37                	ja     c001f8e5 <Vm::x87Handler(regs*)+0x585>
c001f8ae:	83 ec 0c             	sub    esp,0xc
c001f8b1:	2d c8 00 00 00       	sub    eax,0xc8
c001f8b6:	50                   	push   eax
c001f8b7:	e8 67 f9 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f8bc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8c3:	89 c6                	mov    esi,eax
c001f8c5:	89 d7                	mov    edi,edx
c001f8c7:	e8 57 f9 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f8cc:	57                   	push   edi
c001f8cd:	56                   	push   esi
c001f8ce:	52                   	push   edx
c001f8cf:	50                   	push   eax
c001f8d0:	e8 fd f8 ff ff       	call   c001f1d2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f8d5:	83 c4 1c             	add    esp,0x1c
c001f8d8:	52                   	push   edx
c001f8d9:	50                   	push   eax
c001f8da:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8de:	2d c8 00 00 00       	sub    eax,0xc8
c001f8e3:	eb 7d                	jmp    c001f962 <Vm::x87Handler(regs*)+0x602>
c001f8e5:	3c f7                	cmp    al,0xf7
c001f8e7:	76 38                	jbe    c001f921 <Vm::x87Handler(regs*)+0x5c1>
c001f8e9:	83 ec 0c             	sub    esp,0xc
c001f8ec:	6a 00                	push   0x0
c001f8ee:	e8 30 f9 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f8f3:	89 c6                	mov    esi,eax
c001f8f5:	89 d7                	mov    edi,edx
c001f8f7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8fb:	2d f8 00 00 00       	sub    eax,0xf8
c001f900:	89 04 24             	mov    DWORD PTR [esp],eax
c001f903:	e8 1b f9 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f908:	57                   	push   edi
c001f909:	56                   	push   esi
c001f90a:	52                   	push   edx
c001f90b:	50                   	push   eax
c001f90c:	e8 e0 f8 ff ff       	call   c001f1f1 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f911:	83 c4 1c             	add    esp,0x1c
c001f914:	52                   	push   edx
c001f915:	50                   	push   eax
c001f916:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f91a:	2d f8 00 00 00       	sub    eax,0xf8
c001f91f:	eb 41                	jmp    c001f962 <Vm::x87Handler(regs*)+0x602>
c001f921:	8d 50 10             	lea    edx,[eax+0x10]
c001f924:	80 fa 07             	cmp    dl,0x7
c001f927:	0f 87 5a 01 00 00    	ja     c001fa87 <Vm::x87Handler(regs*)+0x727>
c001f92d:	83 ec 0c             	sub    esp,0xc
c001f930:	2d f0 00 00 00       	sub    eax,0xf0
c001f935:	50                   	push   eax
c001f936:	e8 e8 f8 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f93b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f942:	89 c6                	mov    esi,eax
c001f944:	89 d7                	mov    edi,edx
c001f946:	e8 d8 f8 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f94b:	57                   	push   edi
c001f94c:	56                   	push   esi
c001f94d:	52                   	push   edx
c001f94e:	50                   	push   eax
c001f94f:	e8 9d f8 ff ff       	call   c001f1f1 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f954:	83 c4 1c             	add    esp,0x1c
c001f957:	52                   	push   edx
c001f958:	50                   	push   eax
c001f959:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f95d:	2d f0 00 00 00       	sub    eax,0xf0
c001f962:	50                   	push   eax
c001f963:	e8 fe f8 ff ff       	call   c001f266 <Vm::fpuSetReg(int, unsigned long long)>
c001f968:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f96c:	e8 9d f9 ff ff       	call   c001f30e <Vm::fpuPop()>
c001f971:	e9 5e fa ff ff       	jmp    c001f3d4 <Vm::x87Handler(regs*)+0x74>
c001f976:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f97a:	8d 50 30             	lea    edx,[eax+0x30]
c001f97d:	80 fa 07             	cmp    dl,0x7
c001f980:	77 1d                	ja     c001f99f <Vm::x87Handler(regs*)+0x63f>
c001f982:	83 ec 0c             	sub    esp,0xc
c001f985:	6a 00                	push   0x0
c001f987:	e8 97 f8 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f98c:	83 c4 0c             	add    esp,0xc
c001f98f:	52                   	push   edx
c001f990:	50                   	push   eax
c001f991:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f995:	2d d0 00 00 00       	sub    eax,0xd0
c001f99a:	e9 f3 fd ff ff       	jmp    c001f792 <Vm::x87Handler(regs*)+0x432>
c001f99f:	8d 50 28             	lea    edx,[eax+0x28]
c001f9a2:	80 fa 07             	cmp    dl,0x7
c001f9a5:	77 28                	ja     c001f9cf <Vm::x87Handler(regs*)+0x66f>
c001f9a7:	83 ec 0c             	sub    esp,0xc
c001f9aa:	6a 00                	push   0x0
c001f9ac:	e8 72 f8 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f9b1:	83 c4 0c             	add    esp,0xc
c001f9b4:	52                   	push   edx
c001f9b5:	50                   	push   eax
c001f9b6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9ba:	2d d8 00 00 00       	sub    eax,0xd8
c001f9bf:	50                   	push   eax
c001f9c0:	e8 a1 f8 ff ff       	call   c001f266 <Vm::fpuSetReg(int, unsigned long long)>
c001f9c5:	e8 44 f9 ff ff       	call   c001f30e <Vm::fpuPop()>
c001f9ca:	e9 01 fa ff ff       	jmp    c001f3d0 <Vm::x87Handler(regs*)+0x70>
c001f9cf:	8d 50 20             	lea    edx,[eax+0x20]
c001f9d2:	80 fa 07             	cmp    dl,0x7
c001f9d5:	77 30                	ja     c001fa07 <Vm::x87Handler(regs*)+0x6a7>
c001f9d7:	83 ec 0c             	sub    esp,0xc
c001f9da:	2d e0 00 00 00       	sub    eax,0xe0
c001f9df:	50                   	push   eax
c001f9e0:	e8 3e f8 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f9e5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9ec:	89 c6                	mov    esi,eax
c001f9ee:	89 d7                	mov    edi,edx
c001f9f0:	e8 2e f8 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001f9f5:	57                   	push   edi
c001f9f6:	56                   	push   esi
c001f9f7:	52                   	push   edx
c001f9f8:	50                   	push   eax
c001f9f9:	e8 48 f7 ff ff       	call   c001f146 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f9fe:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa02:	e9 54 02 00 00       	jmp    c001fc5b <Vm::x87Handler(regs*)+0x8fb>
c001fa07:	8d 50 18             	lea    edx,[eax+0x18]
c001fa0a:	80 fa 07             	cmp    dl,0x7
c001fa0d:	0f 87 43 fb ff ff    	ja     c001f556 <Vm::x87Handler(regs*)+0x1f6>
c001fa13:	83 ec 0c             	sub    esp,0xc
c001fa16:	2d e8 00 00 00       	sub    eax,0xe8
c001fa1b:	50                   	push   eax
c001fa1c:	e8 02 f8 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001fa21:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa28:	89 c6                	mov    esi,eax
c001fa2a:	89 d7                	mov    edi,edx
c001fa2c:	e8 f2 f7 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001fa31:	57                   	push   edi
c001fa32:	56                   	push   esi
c001fa33:	52                   	push   edx
c001fa34:	50                   	push   eax
c001fa35:	e8 0c f7 ff ff       	call   c001f146 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa3a:	83 c4 20             	add    esp,0x20
c001fa3d:	e8 cc f8 ff ff       	call   c001f30e <Vm::fpuPop()>
c001fa42:	eb 62                	jmp    c001faa6 <Vm::x87Handler(regs*)+0x746>
c001fa44:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fa48:	0f 85 0f 01 00 00    	jne    c001fb5d <Vm::x87Handler(regs*)+0x7fd>
c001fa4e:	83 ec 0c             	sub    esp,0xc
c001fa51:	6a 01                	push   0x1
c001fa53:	e8 cb f7 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001fa58:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa5f:	89 c6                	mov    esi,eax
c001fa61:	89 d7                	mov    edi,edx
c001fa63:	e8 bb f7 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001fa68:	57                   	push   edi
c001fa69:	56                   	push   esi
c001fa6a:	52                   	push   edx
c001fa6b:	50                   	push   eax
c001fa6c:	e8 d5 f6 ff ff       	call   c001f146 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa71:	83 c4 20             	add    esp,0x20
c001fa74:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa78:	e8 91 f8 ff ff       	call   c001f30e <Vm::fpuPop()>
c001fa7d:	e8 8c f8 ff ff       	call   c001f30e <Vm::fpuPop()>
c001fa82:	e9 50 f9 ff ff       	jmp    c001f3d7 <Vm::x87Handler(regs*)+0x77>
c001fa87:	3c d9                	cmp    al,0xd9
c001fa89:	0f 85 b5 02 00 00    	jne    c001fd44 <Vm::x87Handler(regs*)+0x9e4>
c001fa8f:	eb bd                	jmp    c001fa4e <Vm::x87Handler(regs*)+0x6ee>
c001fa91:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fa95:	0f 85 ea 02 00 00    	jne    c001fd85 <Vm::x87Handler(regs*)+0xa25>
c001fa9b:	0f b7 05 60 11 03 c0 	movzx  eax,WORD PTR ds:0xc0031160
c001faa2:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001faa6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001faaa:	e9 28 f9 ff ff       	jmp    c001f3d7 <Vm::x87Handler(regs*)+0x77>
c001faaf:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fab3:	84 d2                	test   dl,dl
c001fab5:	75 0f                	jne    c001fac6 <Vm::x87Handler(regs*)+0x766>
c001fab7:	83 ec 0c             	sub    esp,0xc
c001faba:	ff 36                	push   DWORD PTR [esi]
c001fabc:	e8 b1 f4 ff ff       	call   c001ef72 <Vm::fpu32ToInternal(unsigned int)>
c001fac1:	e9 2c 01 00 00       	jmp    c001fbf2 <Vm::x87Handler(regs*)+0x892>
c001fac6:	80 fa 01             	cmp    dl,0x1
c001fac9:	75 0f                	jne    c001fada <Vm::x87Handler(regs*)+0x77a>
c001facb:	83 ec 0c             	sub    esp,0xc
c001face:	ff 36                	push   DWORD PTR [esi]
c001fad0:	e8 9d f4 ff ff       	call   c001ef72 <Vm::fpu32ToInternal(unsigned int)>
c001fad5:	e9 81 02 00 00       	jmp    c001fd5b <Vm::x87Handler(regs*)+0x9fb>
c001fada:	80 fa 04             	cmp    dl,0x4
c001fadd:	75 0f                	jne    c001faee <Vm::x87Handler(regs*)+0x78e>
c001fadf:	83 ec 0c             	sub    esp,0xc
c001fae2:	ff 36                	push   DWORD PTR [esi]
c001fae4:	e8 89 f4 ff ff       	call   c001ef72 <Vm::fpu32ToInternal(unsigned int)>
c001fae9:	e9 86 01 00 00       	jmp    c001fc74 <Vm::x87Handler(regs*)+0x914>
c001faee:	80 fa 05             	cmp    dl,0x5
c001faf1:	75 1b                	jne    c001fb0e <Vm::x87Handler(regs*)+0x7ae>
c001faf3:	83 ec 0c             	sub    esp,0xc
c001faf6:	6a 00                	push   0x0
c001faf8:	e8 26 f7 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001fafd:	89 c7                	mov    edi,eax
c001faff:	89 d5                	mov    ebp,edx
c001fb01:	58                   	pop    eax
c001fb02:	ff 36                	push   DWORD PTR [esi]
c001fb04:	e8 69 f4 ff ff       	call   c001ef72 <Vm::fpu32ToInternal(unsigned int)>
c001fb09:	e9 a3 01 00 00       	jmp    c001fcb1 <Vm::x87Handler(regs*)+0x951>
c001fb0e:	80 fa 06             	cmp    dl,0x6
c001fb11:	75 0f                	jne    c001fb22 <Vm::x87Handler(regs*)+0x7c2>
c001fb13:	83 ec 0c             	sub    esp,0xc
c001fb16:	ff 36                	push   DWORD PTR [esi]
c001fb18:	e8 55 f4 ff ff       	call   c001ef72 <Vm::fpu32ToInternal(unsigned int)>
c001fb1d:	e9 ae 01 00 00       	jmp    c001fcd0 <Vm::x87Handler(regs*)+0x970>
c001fb22:	31 c0                	xor    eax,eax
c001fb24:	80 fa 07             	cmp    dl,0x7
c001fb27:	0f 85 94 02 00 00    	jne    c001fdc1 <Vm::x87Handler(regs*)+0xa61>
c001fb2d:	83 ec 0c             	sub    esp,0xc
c001fb30:	6a 00                	push   0x0
c001fb32:	e8 ec f6 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001fb37:	89 c7                	mov    edi,eax
c001fb39:	89 d5                	mov    ebp,edx
c001fb3b:	58                   	pop    eax
c001fb3c:	ff 36                	push   DWORD PTR [esi]
c001fb3e:	e8 2f f4 ff ff       	call   c001ef72 <Vm::fpu32ToInternal(unsigned int)>
c001fb43:	e9 cb 01 00 00       	jmp    c001fd13 <Vm::x87Handler(regs*)+0x9b3>
c001fb48:	80 fa 03             	cmp    dl,0x3
c001fb4b:	0f 85 d3 01 00 00    	jne    c001fd24 <Vm::x87Handler(regs*)+0x9c4>
c001fb51:	e8 b8 f7 ff ff       	call   c001f30e <Vm::fpuPop()>
c001fb56:	51                   	push   ecx
c001fb57:	51                   	push   ecx
c001fb58:	e9 de 01 00 00       	jmp    c001fd3b <Vm::x87Handler(regs*)+0x9db>
c001fb5d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb61:	80 fa 01             	cmp    dl,0x1
c001fb64:	75 09                	jne    c001fb6f <Vm::x87Handler(regs*)+0x80f>
c001fb66:	57                   	push   edi
c001fb67:	57                   	push   edi
c001fb68:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb6a:	e9 e3 01 00 00       	jmp    c001fd52 <Vm::x87Handler(regs*)+0x9f2>
c001fb6f:	80 fa 04             	cmp    dl,0x4
c001fb72:	75 12                	jne    c001fb86 <Vm::x87Handler(regs*)+0x826>
c001fb74:	31 d2                	xor    edx,edx
c001fb76:	51                   	push   ecx
c001fb77:	51                   	push   ecx
c001fb78:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb7a:	52                   	push   edx
c001fb7b:	50                   	push   eax
c001fb7c:	e8 d0 f4 ff ff       	call   c001f051 <Vm::fpuLongToFloat(long long)>
c001fb81:	e9 ee 00 00 00       	jmp    c001fc74 <Vm::x87Handler(regs*)+0x914>
c001fb86:	31 c0                	xor    eax,eax
c001fb88:	80 fa 07             	cmp    dl,0x7
c001fb8b:	0f 85 30 02 00 00    	jne    c001fdc1 <Vm::x87Handler(regs*)+0xa61>
c001fb91:	83 ec 0c             	sub    esp,0xc
c001fb94:	6a 00                	push   0x0
c001fb96:	e8 88 f6 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001fb9b:	89 c7                	mov    edi,eax
c001fb9d:	89 d5                	mov    ebp,edx
c001fb9f:	58                   	pop    eax
c001fba0:	8b 06                	mov    eax,DWORD PTR [esi]
c001fba2:	5a                   	pop    edx
c001fba3:	31 d2                	xor    edx,edx
c001fba5:	52                   	push   edx
c001fba6:	50                   	push   eax
c001fba7:	e8 a5 f4 ff ff       	call   c001f051 <Vm::fpuLongToFloat(long long)>
c001fbac:	e9 62 01 00 00       	jmp    c001fd13 <Vm::x87Handler(regs*)+0x9b3>
c001fbb1:	84 d2                	test   dl,dl
c001fbb3:	75 0d                	jne    c001fbc2 <Vm::x87Handler(regs*)+0x862>
c001fbb5:	31 d2                	xor    edx,edx
c001fbb7:	55                   	push   ebp
c001fbb8:	55                   	push   ebp
c001fbb9:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbbb:	52                   	push   edx
c001fbbc:	50                   	push   eax
c001fbbd:	e9 d3 01 00 00       	jmp    c001fd95 <Vm::x87Handler(regs*)+0xa35>
c001fbc2:	31 c0                	xor    eax,eax
c001fbc4:	80 fa 02             	cmp    dl,0x2
c001fbc7:	0f 85 f4 01 00 00    	jne    c001fdc1 <Vm::x87Handler(regs*)+0xa61>
c001fbcd:	83 ec 0c             	sub    esp,0xc
c001fbd0:	6a 00                	push   0x0
c001fbd2:	e8 4c f6 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001fbd7:	59                   	pop    ecx
c001fbd8:	5f                   	pop    edi
c001fbd9:	e9 6a f9 ff ff       	jmp    c001f548 <Vm::x87Handler(regs*)+0x1e8>
c001fbde:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbe2:	84 d2                	test   dl,dl
c001fbe4:	75 2a                	jne    c001fc10 <Vm::x87Handler(regs*)+0x8b0>
c001fbe6:	50                   	push   eax
c001fbe7:	50                   	push   eax
c001fbe8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbeb:	ff 36                	push   DWORD PTR [esi]
c001fbed:	e8 c5 f3 ff ff       	call   c001efb7 <Vm::fpu64ToInternal(unsigned long long)>
c001fbf2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbf9:	89 c6                	mov    esi,eax
c001fbfb:	89 d7                	mov    edi,edx
c001fbfd:	e8 21 f6 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001fc02:	57                   	push   edi
c001fc03:	56                   	push   esi
c001fc04:	52                   	push   edx
c001fc05:	50                   	push   eax
c001fc06:	e8 8e f5 ff ff       	call   c001f199 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fc0b:	e9 64 01 00 00       	jmp    c001fd74 <Vm::x87Handler(regs*)+0xa14>
c001fc10:	80 fa 01             	cmp    dl,0x1
c001fc13:	75 11                	jne    c001fc26 <Vm::x87Handler(regs*)+0x8c6>
c001fc15:	50                   	push   eax
c001fc16:	50                   	push   eax
c001fc17:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc1a:	ff 36                	push   DWORD PTR [esi]
c001fc1c:	e8 96 f3 ff ff       	call   c001efb7 <Vm::fpu64ToInternal(unsigned long long)>
c001fc21:	e9 35 01 00 00       	jmp    c001fd5b <Vm::x87Handler(regs*)+0x9fb>
c001fc26:	80 fa 02             	cmp    dl,0x2
c001fc29:	0f 85 54 f9 ff ff    	jne    c001f583 <Vm::x87Handler(regs*)+0x223>
c001fc2f:	55                   	push   ebp
c001fc30:	55                   	push   ebp
c001fc31:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc34:	ff 36                	push   DWORD PTR [esi]
c001fc36:	e8 7c f3 ff ff       	call   c001efb7 <Vm::fpu64ToInternal(unsigned long long)>
c001fc3b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc42:	89 c6                	mov    esi,eax
c001fc44:	89 d7                	mov    edi,edx
c001fc46:	e8 d8 f5 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001fc4b:	57                   	push   edi
c001fc4c:	56                   	push   esi
c001fc4d:	52                   	push   edx
c001fc4e:	50                   	push   eax
c001fc4f:	e8 f2 f4 ff ff       	call   c001f146 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fc54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fc58:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc5b:	83 c4 20             	add    esp,0x20
c001fc5e:	e9 74 f7 ff ff       	jmp    c001f3d7 <Vm::x87Handler(regs*)+0x77>
c001fc63:	80 fa 04             	cmp    dl,0x4
c001fc66:	75 2a                	jne    c001fc92 <Vm::x87Handler(regs*)+0x932>
c001fc68:	51                   	push   ecx
c001fc69:	51                   	push   ecx
c001fc6a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc6d:	ff 36                	push   DWORD PTR [esi]
c001fc6f:	e8 43 f3 ff ff       	call   c001efb7 <Vm::fpu64ToInternal(unsigned long long)>
c001fc74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc7b:	89 c6                	mov    esi,eax
c001fc7d:	89 d7                	mov    edi,edx
c001fc7f:	e8 9f f5 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001fc84:	57                   	push   edi
c001fc85:	56                   	push   esi
c001fc86:	52                   	push   edx
c001fc87:	50                   	push   eax
c001fc88:	e8 36 f5 ff ff       	call   c001f1c3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc8d:	e9 e2 00 00 00       	jmp    c001fd74 <Vm::x87Handler(regs*)+0xa14>
c001fc92:	80 fa 05             	cmp    dl,0x5
c001fc95:	75 28                	jne    c001fcbf <Vm::x87Handler(regs*)+0x95f>
c001fc97:	83 ec 0c             	sub    esp,0xc
c001fc9a:	6a 00                	push   0x0
c001fc9c:	e8 82 f5 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001fca1:	89 c7                	mov    edi,eax
c001fca3:	89 d5                	mov    ebp,edx
c001fca5:	58                   	pop    eax
c001fca6:	5a                   	pop    edx
c001fca7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcaa:	ff 36                	push   DWORD PTR [esi]
c001fcac:	e8 06 f3 ff ff       	call   c001efb7 <Vm::fpu64ToInternal(unsigned long long)>
c001fcb1:	83 c4 10             	add    esp,0x10
c001fcb4:	55                   	push   ebp
c001fcb5:	57                   	push   edi
c001fcb6:	52                   	push   edx
c001fcb7:	50                   	push   eax
c001fcb8:	e8 06 f5 ff ff       	call   c001f1c3 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fcbd:	eb 60                	jmp    c001fd1f <Vm::x87Handler(regs*)+0x9bf>
c001fcbf:	80 fa 06             	cmp    dl,0x6
c001fcc2:	75 2a                	jne    c001fcee <Vm::x87Handler(regs*)+0x98e>
c001fcc4:	51                   	push   ecx
c001fcc5:	51                   	push   ecx
c001fcc6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcc9:	ff 36                	push   DWORD PTR [esi]
c001fccb:	e8 e7 f2 ff ff       	call   c001efb7 <Vm::fpu64ToInternal(unsigned long long)>
c001fcd0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fcd7:	89 c6                	mov    esi,eax
c001fcd9:	89 d7                	mov    edi,edx
c001fcdb:	e8 43 f5 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001fce0:	57                   	push   edi
c001fce1:	56                   	push   esi
c001fce2:	52                   	push   edx
c001fce3:	50                   	push   eax
c001fce4:	e8 08 f5 ff ff       	call   c001f1f1 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fce9:	e9 86 00 00 00       	jmp    c001fd74 <Vm::x87Handler(regs*)+0xa14>
c001fcee:	31 c0                	xor    eax,eax
c001fcf0:	80 fa 07             	cmp    dl,0x7
c001fcf3:	0f 85 c8 00 00 00    	jne    c001fdc1 <Vm::x87Handler(regs*)+0xa61>
c001fcf9:	83 ec 0c             	sub    esp,0xc
c001fcfc:	6a 00                	push   0x0
c001fcfe:	e8 20 f5 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001fd03:	89 c7                	mov    edi,eax
c001fd05:	89 d5                	mov    ebp,edx
c001fd07:	58                   	pop    eax
c001fd08:	5a                   	pop    edx
c001fd09:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd0c:	ff 36                	push   DWORD PTR [esi]
c001fd0e:	e8 a4 f2 ff ff       	call   c001efb7 <Vm::fpu64ToInternal(unsigned long long)>
c001fd13:	83 c4 10             	add    esp,0x10
c001fd16:	55                   	push   ebp
c001fd17:	57                   	push   edi
c001fd18:	52                   	push   edx
c001fd19:	50                   	push   eax
c001fd1a:	e8 d2 f4 ff ff       	call   c001f1f1 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd1f:	83 c4 0c             	add    esp,0xc
c001fd22:	eb 53                	jmp    c001fd77 <Vm::x87Handler(regs*)+0xa17>
c001fd24:	31 c0                	xor    eax,eax
c001fd26:	80 fa 02             	cmp    dl,0x2
c001fd29:	0f 85 92 00 00 00    	jne    c001fdc1 <Vm::x87Handler(regs*)+0xa61>
c001fd2f:	83 ec 0c             	sub    esp,0xc
c001fd32:	6a 00                	push   0x0
c001fd34:	e8 ea f4 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001fd39:	59                   	pop    ecx
c001fd3a:	5f                   	pop    edi
c001fd3b:	52                   	push   edx
c001fd3c:	50                   	push   eax
c001fd3d:	e8 27 f2 ff ff       	call   c001ef69 <Vm::fpuInternalTo64(unsigned long long)>
c001fd42:	eb 70                	jmp    c001fdb4 <Vm::x87Handler(regs*)+0xa54>
c001fd44:	31 c0                	xor    eax,eax
c001fd46:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fd4b:	75 74                	jne    c001fdc1 <Vm::x87Handler(regs*)+0xa61>
c001fd4d:	50                   	push   eax
c001fd4e:	50                   	push   eax
c001fd4f:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fd52:	31 d2                	xor    edx,edx
c001fd54:	52                   	push   edx
c001fd55:	50                   	push   eax
c001fd56:	e8 f6 f2 ff ff       	call   c001f051 <Vm::fpuLongToFloat(long long)>
c001fd5b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd62:	89 c6                	mov    esi,eax
c001fd64:	89 d7                	mov    edi,edx
c001fd66:	e8 b8 f4 ff ff       	call   c001f223 <Vm::fpuGetReg(int)>
c001fd6b:	57                   	push   edi
c001fd6c:	56                   	push   esi
c001fd6d:	52                   	push   edx
c001fd6e:	50                   	push   eax
c001fd6f:	e8 5e f4 ff ff       	call   c001f1d2 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd74:	83 c4 1c             	add    esp,0x1c
c001fd77:	52                   	push   edx
c001fd78:	50                   	push   eax
c001fd79:	6a 00                	push   0x0
c001fd7b:	e8 e6 f4 ff ff       	call   c001f266 <Vm::fpuSetReg(int, unsigned long long)>
c001fd80:	e9 f2 f7 ff ff       	jmp    c001f577 <Vm::x87Handler(regs*)+0x217>
c001fd85:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd89:	80 fa 05             	cmp    dl,0x5
c001fd8c:	75 11                	jne    c001fd9f <Vm::x87Handler(regs*)+0xa3f>
c001fd8e:	55                   	push   ebp
c001fd8f:	55                   	push   ebp
c001fd90:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd93:	ff 36                	push   DWORD PTR [esi]
c001fd95:	e8 81 f2 ff ff       	call   c001f01b <Vm::fpuULongToFloat(unsigned long long)>
c001fd9a:	e9 cf f7 ff ff       	jmp    c001f56e <Vm::x87Handler(regs*)+0x20e>
c001fd9f:	31 c0                	xor    eax,eax
c001fda1:	80 fa 07             	cmp    dl,0x7
c001fda4:	75 1b                	jne    c001fdc1 <Vm::x87Handler(regs*)+0xa61>
c001fda6:	e8 63 f5 ff ff       	call   c001f30e <Vm::fpuPop()>
c001fdab:	51                   	push   ecx
c001fdac:	51                   	push   ecx
c001fdad:	52                   	push   edx
c001fdae:	50                   	push   eax
c001fdaf:	e8 0c f2 ff ff       	call   c001efc0 <Vm::fpuFloatToLong(unsigned long long)>
c001fdb4:	83 c4 10             	add    esp,0x10
c001fdb7:	89 06                	mov    DWORD PTR [esi],eax
c001fdb9:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fdbc:	e9 f8 f7 ff ff       	jmp    c001f5b9 <Vm::x87Handler(regs*)+0x259>
c001fdc1:	83 c4 1c             	add    esp,0x1c
c001fdc4:	5b                   	pop    ebx
c001fdc5:	5e                   	pop    esi
c001fdc6:	5f                   	pop    edi
c001fdc7:	5d                   	pop    ebp
c001fdc8:	c3                   	ret    

c001fdc9 <__static_initialization_and_destruction_0(int, int)>:
c001fdc9:	83 ec 0c             	sub    esp,0xc
c001fdcc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fdd1:	75 1a                	jne    c001fded <__static_initialization_and_destruction_0(int, int)+0x24>
c001fdd3:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fddb:	75 10                	jne    c001fded <__static_initialization_and_destruction_0(int, int)+0x24>
c001fddd:	83 ec 0c             	sub    esp,0xc
c001fde0:	68 60 11 03 c0       	push   0xc0031160
c001fde5:	e8 16 88 00 00       	call   c0028600 <Vm::_FPUState::_FPUState()>
c001fdea:	83 c4 10             	add    esp,0x10
c001fded:	90                   	nop
c001fdee:	83 c4 0c             	add    esp,0xc
c001fdf1:	c3                   	ret    

c001fdf2 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fdf2:	83 ec 0c             	sub    esp,0xc
c001fdf5:	83 ec 08             	sub    esp,0x8
c001fdf8:	68 ff ff 00 00       	push   0xffff
c001fdfd:	6a 01                	push   0x1
c001fdff:	e8 c5 ff ff ff       	call   c001fdc9 <__static_initialization_and_destruction_0(int, int)>
c001fe04:	83 c4 10             	add    esp,0x10
c001fe07:	83 c4 0c             	add    esp,0xc
c001fe0a:	c3                   	ret    
c001fe0b:	90                   	nop

c001fe0c <FAT::getName()>:
c001fe0c:	b8 70 bf 02 c0       	mov    eax,0xc002bf70
c001fe11:	c3                   	ret    

c001fe12 <FAT::tell(void*, unsigned long long*)>:
c001fe12:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fe17:	75 06                	jne    c001fe1f <FAT::tell(void*, unsigned long long*)+0xd>
c001fe19:	b8 04 00 00 00       	mov    eax,0x4
c001fe1e:	c3                   	ret    
c001fe1f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe24:	75 06                	jne    c001fe2c <FAT::tell(void*, unsigned long long*)+0x1a>
c001fe26:	b8 04 00 00 00       	mov    eax,0x4
c001fe2b:	c3                   	ret    
c001fe2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe30:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fe33:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fe36:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fe3a:	89 01                	mov    DWORD PTR [ecx],eax
c001fe3c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe3f:	b8 00 00 00 00       	mov    eax,0x0
c001fe44:	c3                   	ret    
c001fe45:	90                   	nop

c001fe46 <FAT::stat(void*, unsigned long long*)>:
c001fe46:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fe4b:	75 06                	jne    c001fe53 <FAT::stat(void*, unsigned long long*)+0xd>
c001fe4d:	b8 04 00 00 00       	mov    eax,0x4
c001fe52:	c3                   	ret    
c001fe53:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe58:	75 06                	jne    c001fe60 <FAT::stat(void*, unsigned long long*)+0x1a>
c001fe5a:	b8 04 00 00 00       	mov    eax,0x4
c001fe5f:	c3                   	ret    
c001fe60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe64:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fe67:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fe6a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fe6e:	89 01                	mov    DWORD PTR [ecx],eax
c001fe70:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe73:	b8 00 00 00 00       	mov    eax,0x0
c001fe78:	c3                   	ret    
c001fe79:	90                   	nop

c001fe7a <FAT::~FAT()>:
c001fe7a:	83 ec 0c             	sub    esp,0xc
c001fe7d:	ba f4 bf 02 c0       	mov    edx,0xc002bff4
c001fe82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe86:	89 10                	mov    DWORD PTR [eax],edx
c001fe88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe8c:	83 ec 0c             	sub    esp,0xc
c001fe8f:	50                   	push   eax
c001fe90:	e8 a9 2f ff ff       	call   c0012e3e <Filesystem::~Filesystem()>
c001fe95:	83 c4 10             	add    esp,0x10
c001fe98:	90                   	nop
c001fe99:	83 c4 0c             	add    esp,0xc
c001fe9c:	c3                   	ret    
c001fe9d:	90                   	nop

c001fe9e <FAT::~FAT()>:
c001fe9e:	83 ec 0c             	sub    esp,0xc
c001fea1:	83 ec 0c             	sub    esp,0xc
c001fea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fea8:	e8 cd ff ff ff       	call   c001fe7a <FAT::~FAT()>
c001fead:	83 c4 10             	add    esp,0x10
c001feb0:	83 ec 08             	sub    esp,0x8
c001feb3:	6a 08                	push   0x8
c001feb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feb9:	e8 77 2b ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c001febe:	83 c4 10             	add    esp,0x10
c001fec1:	83 c4 0c             	add    esp,0xc
c001fec4:	c3                   	ret    
c001fec5:	90                   	nop

c001fec6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001fec6:	83 ec 1c             	sub    esp,0x1c
c001fec9:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001fed0:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001fed5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fed9:	8b 04 85 e0 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcee20]
c001fee0:	83 f8 ff             	cmp    eax,0xffffffff
c001fee3:	75 34                	jne    c001ff19 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001fee5:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fee9:	88 c2                	mov    dl,al
c001feeb:	a1 c0 11 03 c0       	mov    eax,ds:0xc00311c0
c001fef0:	01 d0                	add    eax,edx
c001fef2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fef6:	8b 15 c0 11 03 c0    	mov    edx,DWORD PTR ds:0xc00311c0
c001fefc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff00:	89 14 85 e0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee20],edx
c001ff07:	a1 c0 11 03 c0       	mov    eax,ds:0xc00311c0
c001ff0c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ff10:	89 14 85 60 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffceda0],edx
c001ff17:	eb 17                	jmp    c001ff30 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001ff19:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ff1d:	88 c2                	mov    dl,al
c001ff1f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff23:	8b 04 85 e0 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcee20]
c001ff2a:	01 d0                	add    eax,edx
c001ff2c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ff30:	83 ec 04             	sub    esp,0x4
c001ff33:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ff37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ff3b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ff3f:	50                   	push   eax
c001ff40:	e8 f3 6d fe ff       	call   c0006d38 <f_getlabel>
c001ff45:	83 c4 10             	add    esp,0x10
c001ff48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ff4c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ff51:	75 07                	jne    c001ff5a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001ff53:	b8 00 00 00 00       	mov    eax,0x0
c001ff58:	eb 05                	jmp    c001ff5f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001ff5a:	b8 01 00 00 00       	mov    eax,0x1
c001ff5f:	83 c4 1c             	add    esp,0x1c
c001ff62:	c3                   	ret    
c001ff63:	90                   	nop

c001ff64 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001ff64:	57                   	push   edi
c001ff65:	83 ec 58             	sub    esp,0x58
c001ff68:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001ff70:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ff74:	b9 0f 00 00 00       	mov    ecx,0xf
c001ff79:	b8 00 00 00 00       	mov    eax,0x0
c001ff7e:	fc                   	cld    
c001ff7f:	89 d7                	mov    edi,edx
c001ff81:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ff83:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ff87:	8b 04 85 e0 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcee20]
c001ff8e:	83 f8 ff             	cmp    eax,0xffffffff
c001ff91:	75 34                	jne    c001ffc7 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001ff93:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ff97:	88 c2                	mov    dl,al
c001ff99:	a1 c0 11 03 c0       	mov    eax,ds:0xc00311c0
c001ff9e:	01 d0                	add    eax,edx
c001ffa0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ffa4:	8b 15 c0 11 03 c0    	mov    edx,DWORD PTR ds:0xc00311c0
c001ffaa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ffae:	89 14 85 e0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee20],edx
c001ffb5:	a1 c0 11 03 c0       	mov    eax,ds:0xc00311c0
c001ffba:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001ffbe:	89 14 85 60 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffceda0],edx
c001ffc5:	eb 17                	jmp    c001ffde <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001ffc7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ffcb:	88 c2                	mov    dl,al
c001ffcd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ffd1:	8b 04 85 e0 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcee20]
c001ffd8:	01 d0                	add    eax,edx
c001ffda:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ffde:	83 ec 08             	sub    esp,0x8
c001ffe1:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001ffe5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ffe9:	50                   	push   eax
c001ffea:	e8 85 09 fe ff       	call   c0000974 <strcat>
c001ffef:	83 c4 10             	add    esp,0x10
c001fff2:	83 ec 0c             	sub    esp,0xc
c001fff5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fff9:	50                   	push   eax
c001fffa:	e8 27 6f fe ff       	call   c0006f26 <f_setlabel>
c001ffff:	83 c4 10             	add    esp,0x10
c0020002:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020006:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c002000b:	75 07                	jne    c0020014 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c002000d:	b8 00 00 00 00       	mov    eax,0x0
c0020012:	eb 05                	jmp    c0020019 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020014:	b8 01 00 00 00       	mov    eax,0x1
c0020019:	83 c4 58             	add    esp,0x58
c002001c:	5f                   	pop    edi
c002001d:	c3                   	ret    

c002001e <FAT::format(LogicalDisk*, int, char const*, int)>:
c002001e:	83 ec 2c             	sub    esp,0x2c
c0020021:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020029:	83 ec 08             	sub    esp,0x8
c002002c:	68 94 bf 02 c0       	push   0xc002bf94
c0020031:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020035:	e8 86 08 fe ff       	call   c00008c0 <strcmp>
c002003a:	83 c4 10             	add    esp,0x10
c002003d:	85 c0                	test   eax,eax
c002003f:	0f 94 c0             	sete   al
c0020042:	84 c0                	test   al,al
c0020044:	74 0d                	je     c0020053 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020046:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002004e:	e9 a6 00 00 00       	jmp    c00200f9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020053:	83 ec 08             	sub    esp,0x8
c0020056:	68 86 bf 02 c0       	push   0xc002bf86
c002005b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002005f:	e8 5c 08 fe ff       	call   c00008c0 <strcmp>
c0020064:	83 c4 10             	add    esp,0x10
c0020067:	85 c0                	test   eax,eax
c0020069:	0f 94 c0             	sete   al
c002006c:	84 c0                	test   al,al
c002006e:	74 0a                	je     c002007a <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020070:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020078:	eb 7f                	jmp    c00200f9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002007a:	83 ec 08             	sub    esp,0x8
c002007d:	68 8c bf 02 c0       	push   0xc002bf8c
c0020082:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020086:	e8 35 08 fe ff       	call   c00008c0 <strcmp>
c002008b:	83 c4 10             	add    esp,0x10
c002008e:	85 c0                	test   eax,eax
c0020090:	0f 94 c0             	sete   al
c0020093:	84 c0                	test   al,al
c0020095:	74 0a                	je     c00200a1 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020097:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002009f:	eb 58                	jmp    c00200f9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200a1:	83 ec 08             	sub    esp,0x8
c00200a4:	68 6c 8d 02 c0       	push   0xc0028d6c
c00200a9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200ad:	e8 0e 08 fe ff       	call   c00008c0 <strcmp>
c00200b2:	83 c4 10             	add    esp,0x10
c00200b5:	85 c0                	test   eax,eax
c00200b7:	0f 94 c0             	sete   al
c00200ba:	84 c0                	test   al,al
c00200bc:	74 0a                	je     c00200c8 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00200be:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00200c6:	eb 31                	jmp    c00200f9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200c8:	83 ec 08             	sub    esp,0x8
c00200cb:	68 92 bf 02 c0       	push   0xc002bf92
c00200d0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200d4:	e8 e7 07 fe ff       	call   c00008c0 <strcmp>
c00200d9:	83 c4 10             	add    esp,0x10
c00200dc:	85 c0                	test   eax,eax
c00200de:	0f 94 c0             	sete   al
c00200e1:	84 c0                	test   al,al
c00200e3:	74 0a                	je     c00200ef <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00200e5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00200ed:	eb 0a                	jmp    c00200f9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200ef:	b8 08 00 00 00       	mov    eax,0x8
c00200f4:	e9 04 01 00 00       	jmp    c00201fd <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00200f9:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020100:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020105:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020109:	8b 04 85 e0 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcee20]
c0020110:	83 f8 ff             	cmp    eax,0xffffffff
c0020113:	75 34                	jne    c0020149 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020115:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020119:	88 c2                	mov    dl,al
c002011b:	a1 c0 11 03 c0       	mov    eax,ds:0xc00311c0
c0020120:	01 d0                	add    eax,edx
c0020122:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020126:	8b 15 c0 11 03 c0    	mov    edx,DWORD PTR ds:0xc00311c0
c002012c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020130:	89 14 85 e0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee20],edx
c0020137:	a1 c0 11 03 c0       	mov    eax,ds:0xc00311c0
c002013c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020140:	89 14 85 60 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffceda0],edx
c0020147:	eb 17                	jmp    c0020160 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020149:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002014d:	88 c2                	mov    dl,al
c002014f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020153:	8b 04 85 e0 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcee20]
c002015a:	01 d0                	add    eax,edx
c002015c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020160:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020164:	88 04 24             	mov    BYTE PTR [esp],al
c0020167:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002016b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002016f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020177:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002017c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020184:	83 ec 0c             	sub    esp,0xc
c0020187:	68 00 20 00 00       	push   0x2000
c002018c:	e8 b5 f6 fe ff       	call   c000f846 <malloc>
c0020191:	83 c4 10             	add    esp,0x10
c0020194:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020198:	68 00 20 00 00       	push   0x2000
c002019d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201a1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00201a5:	50                   	push   eax
c00201a6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00201aa:	50                   	push   eax
c00201ab:	e8 c1 71 fe ff       	call   c0007371 <f_mkfs>
c00201b0:	83 c4 10             	add    esp,0x10
c00201b3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00201b7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00201bc:	75 07                	jne    c00201c5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00201be:	b8 00 00 00 00       	mov    eax,0x0
c00201c3:	eb 38                	jmp    c00201fd <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00201c5:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00201ca:	75 17                	jne    c00201e3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00201cc:	83 ec 0c             	sub    esp,0xc
c00201cf:	68 c4 bf 02 c0       	push   0xc002bfc4
c00201d4:	e8 3c 29 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00201d9:	83 c4 10             	add    esp,0x10
c00201dc:	b8 09 00 00 00       	mov    eax,0x9
c00201e1:	eb 1a                	jmp    c00201fd <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00201e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00201e7:	83 ec 08             	sub    esp,0x8
c00201ea:	50                   	push   eax
c00201eb:	68 98 bf 02 c0       	push   0xc002bf98
c00201f0:	e8 20 29 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00201f5:	83 c4 10             	add    esp,0x10
c00201f8:	b8 01 00 00 00       	mov    eax,0x1
c00201fd:	83 c4 2c             	add    esp,0x2c
c0020200:	c3                   	ret    
c0020201:	90                   	nop

c0020202 <FAT::tryMount(LogicalDisk*, int)>:
c0020202:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020208:	a1 c0 11 03 c0       	mov    eax,ds:0xc00311c0
c002020d:	83 f8 14             	cmp    eax,0x14
c0020210:	75 17                	jne    c0020229 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020212:	83 ec 0c             	sub    esp,0xc
c0020215:	68 aa bf 02 c0       	push   0xc002bfaa
c002021a:	e8 1e 9e ff ff       	call   c001a03d <Krnl::panic(char const*)>
c002021f:	83 c4 10             	add    esp,0x10
c0020222:	b0 00                	mov    al,0x0
c0020224:	e9 d7 01 00 00       	jmp    c0020400 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020229:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020230:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020236:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002023c:	3d 00 02 00 00       	cmp    eax,0x200
c0020241:	74 07                	je     c002024a <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020243:	b0 00                	mov    al,0x0
c0020245:	e9 b6 01 00 00       	jmp    c0020400 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002024a:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020252:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020259:	8b 04 85 e0 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcee20]
c0020260:	83 f8 ff             	cmp    eax,0xffffffff
c0020263:	74 07                	je     c002026c <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020265:	b0 01                	mov    al,0x1
c0020267:	e9 94 01 00 00       	jmp    c0020400 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002026c:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020276:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c002027e:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020285:	88 c2                	mov    dl,al
c0020287:	a1 c0 11 03 c0       	mov    eax,ds:0xc00311c0
c002028c:	01 d0                	add    eax,edx
c002028e:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020295:	8b 15 c0 11 03 c0    	mov    edx,DWORD PTR ds:0xc00311c0
c002029b:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00202a2:	89 14 85 e0 11 03 c0 	mov    DWORD PTR [eax*4-0x3ffcee20],edx
c00202a9:	a1 c0 11 03 c0       	mov    eax,ds:0xc00311c0
c00202ae:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00202b5:	89 14 85 60 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffceda0],edx
c00202bc:	83 ec 0c             	sub    esp,0xc
c00202bf:	68 54 02 00 00       	push   0x254
c00202c4:	e8 7d f5 fe ff       	call   c000f846 <malloc>
c00202c9:	83 c4 10             	add    esp,0x10
c00202cc:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00202d3:	83 ec 04             	sub    esp,0x4
c00202d6:	6a 00                	push   0x0
c00202d8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00202df:	50                   	push   eax
c00202e0:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00202e7:	e8 43 4c fe ff       	call   c0004f2f <f_mount>
c00202ec:	83 c4 10             	add    esp,0x10
c00202ef:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00202f6:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00202fe:	74 19                	je     c0020319 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020300:	83 ec 0c             	sub    esp,0xc
c0020303:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002030a:	e8 57 f5 fe ff       	call   c000f866 <rfree>
c002030f:	83 c4 10             	add    esp,0x10
c0020312:	b0 00                	mov    al,0x0
c0020314:	e9 e7 00 00 00       	jmp    c0020400 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020319:	83 ec 04             	sub    esp,0x4
c002031c:	68 00 01 00 00       	push   0x100
c0020321:	6a 00                	push   0x0
c0020323:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002032a:	50                   	push   eax
c002032b:	e8 48 04 fe ff       	call   c0000778 <memset>
c0020330:	83 c4 10             	add    esp,0x10
c0020333:	83 ec 08             	sub    esp,0x8
c0020336:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002033d:	50                   	push   eax
c002033e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020345:	50                   	push   eax
c0020346:	e8 29 06 fe ff       	call   c0000974 <strcat>
c002034b:	83 c4 10             	add    esp,0x10
c002034e:	83 ec 08             	sub    esp,0x8
c0020351:	68 b8 bf 02 c0       	push   0xc002bfb8
c0020356:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002035d:	50                   	push   eax
c002035e:	e8 11 06 fe ff       	call   c0000974 <strcat>
c0020363:	83 c4 10             	add    esp,0x10
c0020366:	83 ec 04             	sub    esp,0x4
c0020369:	6a 01                	push   0x1
c002036b:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020372:	50                   	push   eax
c0020373:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020377:	50                   	push   eax
c0020378:	e8 14 4c fe ff       	call   c0004f91 <f_open>
c002037d:	83 c4 10             	add    esp,0x10
c0020380:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020387:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c002038e:	85 c0                	test   eax,eax
c0020390:	74 0a                	je     c002039c <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020392:	78 2d                	js     c00203c1 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020394:	83 e8 04             	sub    eax,0x4
c0020397:	83 f8 01             	cmp    eax,0x1
c002039a:	77 25                	ja     c00203c1 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002039c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00203a4:	83 ec 0c             	sub    esp,0xc
c00203a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00203ab:	50                   	push   eax
c00203ac:	e8 32 57 fe ff       	call   c0005ae3 <f_close>
c00203b1:	83 c4 10             	add    esp,0x10
c00203b4:	90                   	nop
c00203b5:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00203bd:	74 3a                	je     c00203f9 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00203bf:	eb 2d                	jmp    c00203ee <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00203c1:	83 ec 0c             	sub    esp,0xc
c00203c4:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00203cb:	e8 96 f4 fe ff       	call   c000f866 <rfree>
c00203d0:	83 c4 10             	add    esp,0x10
c00203d3:	83 ec 04             	sub    esp,0x4
c00203d6:	6a 00                	push   0x0
c00203d8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00203df:	50                   	push   eax
c00203e0:	6a 00                	push   0x0
c00203e2:	e8 48 4b fe ff       	call   c0004f2f <f_mount>
c00203e7:	83 c4 10             	add    esp,0x10
c00203ea:	b0 00                	mov    al,0x0
c00203ec:	eb 12                	jmp    c0020400 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00203ee:	a1 c0 11 03 c0       	mov    eax,ds:0xc00311c0
c00203f3:	40                   	inc    eax
c00203f4:	a3 c0 11 03 c0       	mov    ds:0xc00311c0,eax
c00203f9:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020400:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020406:	c3                   	ret    
c0020407:	90                   	nop

c0020408 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020408:	81 ec 3c 02 00 00    	sub    esp,0x23c
c002040e:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020416:	74 0a                	je     c0020422 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020418:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020420:	75 0a                	jne    c002042c <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020422:	b8 04 00 00 00       	mov    eax,0x4
c0020427:	e9 db 00 00 00       	jmp    c0020507 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c002042c:	83 ec 08             	sub    esp,0x8
c002042f:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020436:	50                   	push   eax
c0020437:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c002043e:	e8 aa 5c fe ff       	call   c00060ed <f_readdir>
c0020443:	83 c4 10             	add    esp,0x10
c0020446:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c002044d:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020453:	83 ec 0c             	sub    esp,0xc
c0020456:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c002045d:	83 c0 1a             	add    eax,0x1a
c0020460:	50                   	push   eax
c0020461:	e8 2e 03 fe ff       	call   c0000794 <strlen>
c0020466:	83 c4 10             	add    esp,0x10
c0020469:	ba 00 00 00 00       	mov    edx,0x0
c002046e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020472:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020476:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c002047d:	0f b6 c0             	movzx  eax,al
c0020480:	83 e0 10             	and    eax,0x10
c0020483:	74 07                	je     c002048c <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020485:	b8 02 00 00 00       	mov    eax,0x2
c002048a:	eb 05                	jmp    c0020491 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c002048c:	b8 01 00 00 00       	mov    eax,0x1
c0020491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020495:	83 ec 08             	sub    esp,0x8
c0020498:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002049f:	83 c0 1a             	add    eax,0x1a
c00204a2:	50                   	push   eax
c00204a3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00204a7:	83 c0 10             	add    eax,0x10
c00204aa:	50                   	push   eax
c00204ab:	e8 84 03 fe ff       	call   c0000834 <strcpy>
c00204b0:	83 c4 10             	add    esp,0x10
c00204b3:	83 ec 04             	sub    esp,0x4
c00204b6:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c00204bd:	8d 44 24 08          	lea    eax,[esp+0x8]
c00204c1:	50                   	push   eax
c00204c2:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c00204c9:	e8 76 02 fe ff       	call   c0000744 <memcpy>
c00204ce:	83 c4 10             	add    esp,0x10
c00204d1:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c00204d8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00204de:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c00204e5:	84 c0                	test   al,al
c00204e7:	75 07                	jne    c00204f0 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c00204e9:	b8 07 00 00 00       	mov    eax,0x7
c00204ee:	eb 17                	jmp    c0020507 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c00204f0:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c00204f7:	85 c0                	test   eax,eax
c00204f9:	75 07                	jne    c0020502 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c00204fb:	b8 00 00 00 00       	mov    eax,0x0
c0020500:	eb 05                	jmp    c0020507 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020502:	b8 01 00 00 00       	mov    eax,0x1
c0020507:	81 c4 3c 02 00 00    	add    esp,0x23c
c002050d:	c3                   	ret    

c002050e <FAT::read(void*, unsigned long, void*, int*)>:
c002050e:	83 ec 1c             	sub    esp,0x1c
c0020511:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020516:	74 07                	je     c002051f <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020518:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002051d:	75 07                	jne    c0020526 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c002051f:	b8 04 00 00 00       	mov    eax,0x4
c0020524:	eb 3d                	jmp    c0020563 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020526:	8d 44 24 08          	lea    eax,[esp+0x8]
c002052a:	50                   	push   eax
c002052b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002052f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020533:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020537:	e8 91 4e fe ff       	call   c00053cd <f_read>
c002053c:	83 c4 10             	add    esp,0x10
c002053f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020543:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020547:	89 c2                	mov    edx,eax
c0020549:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002054d:	89 10                	mov    DWORD PTR [eax],edx
c002054f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020553:	85 c0                	test   eax,eax
c0020555:	75 07                	jne    c002055e <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020557:	b8 00 00 00 00       	mov    eax,0x0
c002055c:	eb 05                	jmp    c0020563 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002055e:	b8 01 00 00 00       	mov    eax,0x1
c0020563:	83 c4 1c             	add    esp,0x1c
c0020566:	c3                   	ret    
c0020567:	90                   	nop

c0020568 <FAT::write(void*, unsigned long, void*, int*)>:
c0020568:	83 ec 1c             	sub    esp,0x1c
c002056b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020570:	74 07                	je     c0020579 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020572:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020577:	75 07                	jne    c0020580 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020579:	b8 04 00 00 00       	mov    eax,0x4
c002057e:	eb 3d                	jmp    c00205bd <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020580:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020584:	50                   	push   eax
c0020585:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020589:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002058d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020591:	e8 b7 50 fe ff       	call   c000564d <f_write>
c0020596:	83 c4 10             	add    esp,0x10
c0020599:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002059d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205a1:	89 c2                	mov    edx,eax
c00205a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00205a7:	89 10                	mov    DWORD PTR [eax],edx
c00205a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00205ad:	85 c0                	test   eax,eax
c00205af:	75 07                	jne    c00205b8 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00205b1:	b8 00 00 00 00       	mov    eax,0x0
c00205b6:	eb 05                	jmp    c00205bd <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00205b8:	b8 01 00 00 00       	mov    eax,0x1
c00205bd:	83 c4 1c             	add    esp,0x1c
c00205c0:	c3                   	ret    
c00205c1:	90                   	nop

c00205c2 <FAT::close(void*)>:
c00205c2:	83 ec 1c             	sub    esp,0x1c
c00205c5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00205ca:	75 07                	jne    c00205d3 <FAT::close(void*)+0x11>
c00205cc:	b8 04 00 00 00       	mov    eax,0x4
c00205d1:	eb 36                	jmp    c0020609 <FAT::close(void*)+0x47>
c00205d3:	83 ec 0c             	sub    esp,0xc
c00205d6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00205da:	e8 04 55 fe ff       	call   c0005ae3 <f_close>
c00205df:	83 c4 10             	add    esp,0x10
c00205e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00205e6:	83 ec 0c             	sub    esp,0xc
c00205e9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00205ed:	e8 64 f2 fe ff       	call   c000f856 <free>
c00205f2:	83 c4 10             	add    esp,0x10
c00205f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00205f9:	85 c0                	test   eax,eax
c00205fb:	75 07                	jne    c0020604 <FAT::close(void*)+0x42>
c00205fd:	b8 00 00 00 00       	mov    eax,0x0
c0020602:	eb 05                	jmp    c0020609 <FAT::close(void*)+0x47>
c0020604:	b8 01 00 00 00       	mov    eax,0x1
c0020609:	83 c4 1c             	add    esp,0x1c
c002060c:	c3                   	ret    
c002060d:	90                   	nop

c002060e <FAT::closeDir(void*)>:
c002060e:	83 ec 1c             	sub    esp,0x1c
c0020611:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020616:	75 07                	jne    c002061f <FAT::closeDir(void*)+0x11>
c0020618:	b8 04 00 00 00       	mov    eax,0x4
c002061d:	eb 36                	jmp    c0020655 <FAT::closeDir(void*)+0x47>
c002061f:	83 ec 0c             	sub    esp,0xc
c0020622:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020626:	e8 a0 5a fe ff       	call   c00060cb <f_closedir>
c002062b:	83 c4 10             	add    esp,0x10
c002062e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020632:	83 ec 0c             	sub    esp,0xc
c0020635:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020639:	e8 18 f2 fe ff       	call   c000f856 <free>
c002063e:	83 c4 10             	add    esp,0x10
c0020641:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020645:	85 c0                	test   eax,eax
c0020647:	75 07                	jne    c0020650 <FAT::closeDir(void*)+0x42>
c0020649:	b8 00 00 00 00       	mov    eax,0x0
c002064e:	eb 05                	jmp    c0020655 <FAT::closeDir(void*)+0x47>
c0020650:	b8 01 00 00 00       	mov    eax,0x1
c0020655:	83 c4 1c             	add    esp,0x1c
c0020658:	c3                   	ret    
c0020659:	90                   	nop

c002065a <FAT::seek(void*, unsigned long long)>:
c002065a:	83 ec 2c             	sub    esp,0x2c
c002065d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020661:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020665:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020669:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002066d:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020672:	75 07                	jne    c002067b <FAT::seek(void*, unsigned long long)+0x21>
c0020674:	b8 04 00 00 00       	mov    eax,0x4
c0020679:	eb 2f                	jmp    c00206aa <FAT::seek(void*, unsigned long long)+0x50>
c002067b:	83 ec 04             	sub    esp,0x4
c002067e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020682:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020686:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002068a:	e8 83 54 fe ff       	call   c0005b12 <f_lseek>
c002068f:	83 c4 10             	add    esp,0x10
c0020692:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020696:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002069a:	85 c0                	test   eax,eax
c002069c:	75 07                	jne    c00206a5 <FAT::seek(void*, unsigned long long)+0x4b>
c002069e:	b8 00 00 00 00       	mov    eax,0x0
c00206a3:	eb 05                	jmp    c00206aa <FAT::seek(void*, unsigned long long)+0x50>
c00206a5:	b8 01 00 00 00       	mov    eax,0x1
c00206aa:	83 c4 2c             	add    esp,0x2c
c00206ad:	c3                   	ret    

c00206ae <fatWrapperReadDisk>:
c00206ae:	83 ec 1c             	sub    esp,0x1c
c00206b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00206b5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00206b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00206c0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00206c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00206c8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00206cd:	8b 04 85 a0 e1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1e60]
c00206d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00206d8:	83 ec 0c             	sub    esp,0xc
c00206db:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206df:	52                   	push   edx
c00206e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00206e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00206e8:	50                   	push   eax
c00206e9:	e8 e4 5b ff ff       	call   c00162d2 <LogicalDisk::read(unsigned long long, int, void*)>
c00206ee:	83 c4 20             	add    esp,0x20
c00206f1:	83 c4 1c             	add    esp,0x1c
c00206f4:	c3                   	ret    

c00206f5 <fatWrapperWriteDisk>:
c00206f5:	83 ec 1c             	sub    esp,0x1c
c00206f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00206fc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020700:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020704:	89 04 24             	mov    DWORD PTR [esp],eax
c0020707:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002070b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002070f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020714:	8b 04 85 a0 e1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1e60]
c002071b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002071f:	83 ec 0c             	sub    esp,0xc
c0020722:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020726:	52                   	push   edx
c0020727:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002072b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002072f:	50                   	push   eax
c0020730:	e8 09 5c ff ff       	call   c001633e <LogicalDisk::write(unsigned long long, int, void*)>
c0020735:	83 c4 20             	add    esp,0x20
c0020738:	83 c4 1c             	add    esp,0x1c
c002073b:	c3                   	ret    

c002073c <fatWrapperIoctl>:
c002073c:	53                   	push   ebx
c002073d:	83 ec 28             	sub    esp,0x28
c0020740:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020744:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020748:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002074c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020750:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020755:	75 31                	jne    c0020788 <fatWrapperIoctl+0x4c>
c0020757:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002075b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002075f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020764:	8b 04 85 a0 e1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1e60]
c002076b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020771:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020777:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002077b:	66 89 02             	mov    WORD PTR [edx],ax
c002077e:	b8 00 00 00 00       	mov    eax,0x0
c0020783:	e9 b2 00 00 00       	jmp    c002083a <fatWrapperIoctl+0xfe>
c0020788:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c002078d:	75 6a                	jne    c00207f9 <fatWrapperIoctl+0xbd>
c002078f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020793:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020797:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002079c:	8b 04 85 a0 e1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1e60]
c00207a3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00207a9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00207af:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00207b5:	89 c8                	mov    eax,ecx
c00207b7:	89 da                	mov    edx,ebx
c00207b9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00207bd:	c1 e0 0a             	shl    eax,0xa
c00207c0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00207c5:	8b 0c 8d a0 e1 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1e60]
c00207cc:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00207d2:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00207d8:	89 cb                	mov    ebx,ecx
c00207da:	c1 fb 1f             	sar    ebx,0x1f
c00207dd:	53                   	push   ebx
c00207de:	51                   	push   ecx
c00207df:	52                   	push   edx
c00207e0:	50                   	push   eax
c00207e1:	e8 c6 5a 00 00       	call   c00262ac <__udivdi3>
c00207e6:	83 c4 10             	add    esp,0x10
c00207e9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00207ed:	89 01                	mov    DWORD PTR [ecx],eax
c00207ef:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00207f2:	b8 00 00 00 00       	mov    eax,0x0
c00207f7:	eb 41                	jmp    c002083a <fatWrapperIoctl+0xfe>
c00207f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00207fe:	75 07                	jne    c0020807 <fatWrapperIoctl+0xcb>
c0020800:	b8 00 00 00 00       	mov    eax,0x0
c0020805:	eb 33                	jmp    c002083a <fatWrapperIoctl+0xfe>
c0020807:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c002080c:	75 19                	jne    c0020827 <fatWrapperIoctl+0xeb>
c002080e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020812:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020816:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002081a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020820:	b8 00 00 00 00       	mov    eax,0x0
c0020825:	eb 13                	jmp    c002083a <fatWrapperIoctl+0xfe>
c0020827:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c002082c:	75 07                	jne    c0020835 <fatWrapperIoctl+0xf9>
c002082e:	b8 00 00 00 00       	mov    eax,0x0
c0020833:	eb 05                	jmp    c002083a <fatWrapperIoctl+0xfe>
c0020835:	b8 04 00 00 00       	mov    eax,0x4
c002083a:	83 c4 28             	add    esp,0x28
c002083d:	5b                   	pop    ebx
c002083e:	c3                   	ret    
c002083f:	90                   	nop

c0020840 <FAT::FAT()>:
c0020840:	83 ec 1c             	sub    esp,0x1c
c0020843:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020847:	83 ec 0c             	sub    esp,0xc
c002084a:	50                   	push   eax
c002084b:	e8 ca 25 ff ff       	call   c0012e1a <Filesystem::Filesystem()>
c0020850:	83 c4 10             	add    esp,0x10
c0020853:	ba f4 bf 02 c0       	mov    edx,0xc002bff4
c0020858:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002085c:	89 10                	mov    DWORD PTR [eax],edx
c002085e:	c7 05 c0 11 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00311c0,0x0
c0020868:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020870:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020875:	7f 15                	jg     c002088c <FAT::FAT()+0x4c>
c0020877:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002087b:	c7 04 85 e0 11 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcee20],0xffffffff
c0020886:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002088a:	eb e4                	jmp    c0020870 <FAT::FAT()+0x30>
c002088c:	90                   	nop
c002088d:	83 c4 1c             	add    esp,0x1c
c0020890:	c3                   	ret    
c0020891:	90                   	nop

c0020892 <FAT::fixFilepath(char*)>:
c0020892:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020896:	8a 00                	mov    al,BYTE PTR [eax]
c0020898:	3c 40                	cmp    al,0x40
c002089a:	7e 2c                	jle    c00208c8 <FAT::fixFilepath(char*)+0x36>
c002089c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208a0:	8a 00                	mov    al,BYTE PTR [eax]
c00208a2:	83 e8 41             	sub    eax,0x41
c00208a5:	88 c2                	mov    dl,al
c00208a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208ab:	88 10                	mov    BYTE PTR [eax],dl
c00208ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208b1:	8a 00                	mov    al,BYTE PTR [eax]
c00208b3:	0f be c0             	movsx  eax,al
c00208b6:	8b 04 85 e0 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcee20]
c00208bd:	83 c0 30             	add    eax,0x30
c00208c0:	88 c2                	mov    dl,al
c00208c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208c6:	88 10                	mov    BYTE PTR [eax],dl
c00208c8:	90                   	nop
c00208c9:	c3                   	ret    

c00208ca <FAT::open(char const*, void**, FileOpenMode)>:
c00208ca:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00208d0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00208d8:	74 0a                	je     c00208e4 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00208da:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00208e2:	75 0a                	jne    c00208ee <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00208e4:	b8 04 00 00 00       	mov    eax,0x4
c00208e9:	e9 fd 00 00 00       	jmp    c00209eb <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00208ee:	83 ec 08             	sub    esp,0x8
c00208f1:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00208f8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00208fc:	50                   	push   eax
c00208fd:	e8 32 ff fd ff       	call   c0000834 <strcpy>
c0020902:	83 c4 10             	add    esp,0x10
c0020905:	83 ec 08             	sub    esp,0x8
c0020908:	8d 44 24 10          	lea    eax,[esp+0x10]
c002090c:	50                   	push   eax
c002090d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020914:	e8 79 ff ff ff       	call   c0020892 <FAT::fixFilepath(char*)>
c0020919:	83 c4 10             	add    esp,0x10
c002091c:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020924:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002092b:	83 e0 01             	and    eax,0x1
c002092e:	74 08                	je     c0020938 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020930:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020938:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002093f:	83 e0 04             	and    eax,0x4
c0020942:	74 10                	je     c0020954 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020944:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c002094c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020954:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002095b:	83 e0 02             	and    eax,0x2
c002095e:	74 08                	je     c0020968 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020960:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020968:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002096f:	83 e0 08             	and    eax,0x8
c0020972:	74 08                	je     c002097c <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020974:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c002097c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020983:	83 e0 10             	and    eax,0x10
c0020986:	74 08                	je     c0020990 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020988:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020990:	83 ec 0c             	sub    esp,0xc
c0020993:	68 50 02 00 00       	push   0x250
c0020998:	e8 a9 ee fe ff       	call   c000f846 <malloc>
c002099d:	83 c4 10             	add    esp,0x10
c00209a0:	89 c2                	mov    edx,eax
c00209a2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00209a9:	89 10                	mov    DWORD PTR [eax],edx
c00209ab:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00209b3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00209ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00209bc:	83 ec 04             	sub    esp,0x4
c00209bf:	52                   	push   edx
c00209c0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00209c4:	52                   	push   edx
c00209c5:	50                   	push   eax
c00209c6:	e8 c6 45 fe ff       	call   c0004f91 <f_open>
c00209cb:	83 c4 10             	add    esp,0x10
c00209ce:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00209d5:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00209dd:	74 07                	je     c00209e6 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00209df:	b8 01 00 00 00       	mov    eax,0x1
c00209e4:	eb 05                	jmp    c00209eb <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00209e6:	b8 00 00 00 00       	mov    eax,0x0
c00209eb:	81 c4 1c 01 00 00    	add    esp,0x11c
c00209f1:	c3                   	ret    

c00209f2 <FAT::openDir(char const*, void**)>:
c00209f2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00209f8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020a00:	74 0a                	je     c0020a0c <FAT::openDir(char const*, void**)+0x1a>
c0020a02:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020a0a:	75 07                	jne    c0020a13 <FAT::openDir(char const*, void**)+0x21>
c0020a0c:	b8 04 00 00 00       	mov    eax,0x4
c0020a11:	eb 7d                	jmp    c0020a90 <FAT::openDir(char const*, void**)+0x9e>
c0020a13:	83 ec 08             	sub    esp,0x8
c0020a16:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a1d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020a21:	50                   	push   eax
c0020a22:	e8 0d fe fd ff       	call   c0000834 <strcpy>
c0020a27:	83 c4 10             	add    esp,0x10
c0020a2a:	83 ec 08             	sub    esp,0x8
c0020a2d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020a31:	50                   	push   eax
c0020a32:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020a39:	e8 54 fe ff ff       	call   c0020892 <FAT::fixFilepath(char*)>
c0020a3e:	83 c4 10             	add    esp,0x10
c0020a41:	83 ec 0c             	sub    esp,0xc
c0020a44:	6a 4c                	push   0x4c
c0020a46:	e8 fb ed fe ff       	call   c000f846 <malloc>
c0020a4b:	83 c4 10             	add    esp,0x10
c0020a4e:	89 c2                	mov    edx,eax
c0020a50:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020a57:	89 10                	mov    DWORD PTR [eax],edx
c0020a59:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020a60:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a62:	83 ec 08             	sub    esp,0x8
c0020a65:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020a69:	52                   	push   edx
c0020a6a:	50                   	push   eax
c0020a6b:	e8 59 55 fe ff       	call   c0005fc9 <f_opendir>
c0020a70:	83 c4 10             	add    esp,0x10
c0020a73:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020a7a:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020a82:	74 07                	je     c0020a8b <FAT::openDir(char const*, void**)+0x99>
c0020a84:	b8 01 00 00 00       	mov    eax,0x1
c0020a89:	eb 05                	jmp    c0020a90 <FAT::openDir(char const*, void**)+0x9e>
c0020a8b:	b8 00 00 00 00       	mov    eax,0x0
c0020a90:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020a96:	c3                   	ret    
c0020a97:	90                   	nop

c0020a98 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020a98:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020a9e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020aa6:	75 0a                	jne    c0020ab2 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020aa8:	b8 04 00 00 00       	mov    eax,0x4
c0020aad:	e9 c9 00 00 00       	jmp    c0020b7b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020ab2:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020aba:	75 0a                	jne    c0020ac6 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020abc:	b8 04 00 00 00       	mov    eax,0x4
c0020ac1:	e9 b5 00 00 00       	jmp    c0020b7b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020ac6:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020ace:	75 0a                	jne    c0020ada <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020ad0:	b8 04 00 00 00       	mov    eax,0x4
c0020ad5:	e9 a1 00 00 00       	jmp    c0020b7b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020ada:	83 ec 08             	sub    esp,0x8
c0020add:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020ae4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020aeb:	50                   	push   eax
c0020aec:	e8 43 fd fd ff       	call   c0000834 <strcpy>
c0020af1:	83 c4 10             	add    esp,0x10
c0020af4:	83 ec 08             	sub    esp,0x8
c0020af7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020afe:	50                   	push   eax
c0020aff:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020b06:	e8 87 fd ff ff       	call   c0020892 <FAT::fixFilepath(char*)>
c0020b0b:	83 c4 10             	add    esp,0x10
c0020b0e:	83 ec 08             	sub    esp,0x8
c0020b11:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b15:	50                   	push   eax
c0020b16:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020b1d:	50                   	push   eax
c0020b1e:	e8 65 56 fe ff       	call   c0006188 <f_stat>
c0020b23:	83 c4 10             	add    esp,0x10
c0020b26:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020b2d:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020b34:	85 c0                	test   eax,eax
c0020b36:	74 07                	je     c0020b3f <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020b38:	83 f8 04             	cmp    eax,0x4
c0020b3b:	74 32                	je     c0020b6f <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020b3d:	eb 37                	jmp    c0020b76 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020b3f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020b43:	0f b6 c0             	movzx  eax,al
c0020b46:	83 e0 10             	and    eax,0x10
c0020b49:	0f 95 c2             	setne  dl
c0020b4c:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020b53:	88 10                	mov    BYTE PTR [eax],dl
c0020b55:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020b58:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020b5c:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020b63:	89 01                	mov    DWORD PTR [ecx],eax
c0020b65:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020b68:	b8 00 00 00 00       	mov    eax,0x0
c0020b6d:	eb 0c                	jmp    c0020b7b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020b6f:	b8 02 00 00 00       	mov    eax,0x2
c0020b74:	eb 05                	jmp    c0020b7b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020b76:	b8 01 00 00 00       	mov    eax,0x1
c0020b7b:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020b81:	c3                   	ret    

c0020b82 <FAT::unlink(char const*)>:
c0020b82:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020b88:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020b90:	75 07                	jne    c0020b99 <FAT::unlink(char const*)+0x17>
c0020b92:	b8 04 00 00 00       	mov    eax,0x4
c0020b97:	eb 5c                	jmp    c0020bf5 <FAT::unlink(char const*)+0x73>
c0020b99:	83 ec 08             	sub    esp,0x8
c0020b9c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ba3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ba7:	50                   	push   eax
c0020ba8:	e8 87 fc fd ff       	call   c0000834 <strcpy>
c0020bad:	83 c4 10             	add    esp,0x10
c0020bb0:	83 ec 08             	sub    esp,0x8
c0020bb3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020bb7:	50                   	push   eax
c0020bb8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020bbf:	e8 ce fc ff ff       	call   c0020892 <FAT::fixFilepath(char*)>
c0020bc4:	83 c4 10             	add    esp,0x10
c0020bc7:	83 ec 0c             	sub    esp,0xc
c0020bca:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020bce:	50                   	push   eax
c0020bcf:	e8 06 59 fe ff       	call   c00064da <f_unlink>
c0020bd4:	83 c4 10             	add    esp,0x10
c0020bd7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020bde:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020be5:	85 c0                	test   eax,eax
c0020be7:	75 07                	jne    c0020bf0 <FAT::unlink(char const*)+0x6e>
c0020be9:	b8 00 00 00 00       	mov    eax,0x0
c0020bee:	eb 05                	jmp    c0020bf5 <FAT::unlink(char const*)+0x73>
c0020bf0:	b8 01 00 00 00       	mov    eax,0x1
c0020bf5:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020bfb:	c3                   	ret    

c0020bfc <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020bfc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020c02:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020c09:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020c10:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020c14:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020c18:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020c20:	75 0a                	jne    c0020c2c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020c22:	b8 04 00 00 00       	mov    eax,0x4
c0020c27:	e9 1c 01 00 00       	jmp    c0020d48 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020c2c:	83 ec 08             	sub    esp,0x8
c0020c2f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020c36:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020c3a:	50                   	push   eax
c0020c3b:	e8 f4 fb fd ff       	call   c0000834 <strcpy>
c0020c40:	83 c4 10             	add    esp,0x10
c0020c43:	83 ec 08             	sub    esp,0x8
c0020c46:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020c4a:	50                   	push   eax
c0020c4b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020c52:	e8 3b fc ff ff       	call   c0020892 <FAT::fixFilepath(char*)>
c0020c57:	83 c4 10             	add    esp,0x10
c0020c5a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020c62:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020c6a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c6f:	83 e0 01             	and    eax,0x1
c0020c72:	74 08                	je     c0020c7c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020c74:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020c7c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c81:	83 e0 02             	and    eax,0x2
c0020c84:	74 08                	je     c0020c8e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020c86:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020c8e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020c93:	83 e0 04             	and    eax,0x4
c0020c96:	74 08                	je     c0020ca0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020c98:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020ca0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020ca5:	83 e0 08             	and    eax,0x8
c0020ca8:	74 08                	je     c0020cb2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020caa:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020cb2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020cb7:	83 e0 01             	and    eax,0x1
c0020cba:	74 08                	je     c0020cc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020cbc:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020cc4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020cc9:	83 e0 02             	and    eax,0x2
c0020ccc:	74 08                	je     c0020cd6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020cce:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020cd6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020cdb:	83 e0 04             	and    eax,0x4
c0020cde:	74 08                	je     c0020ce8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020ce0:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020ce8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ced:	83 e0 08             	and    eax,0x8
c0020cf0:	74 08                	je     c0020cfa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020cf2:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020cfa:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020d01:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020d08:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020d10:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020d18:	83 ec 04             	sub    esp,0x4
c0020d1b:	52                   	push   edx
c0020d1c:	50                   	push   eax
c0020d1d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020d21:	50                   	push   eax
c0020d22:	e8 55 5e fe ff       	call   c0006b7c <f_chmod>
c0020d27:	83 c4 10             	add    esp,0x10
c0020d2a:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020d31:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020d38:	85 c0                	test   eax,eax
c0020d3a:	75 07                	jne    c0020d43 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020d3c:	b8 00 00 00 00       	mov    eax,0x0
c0020d41:	eb 05                	jmp    c0020d48 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020d43:	b8 01 00 00 00       	mov    eax,0x1
c0020d48:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020d4e:	c3                   	ret    
c0020d4f:	90                   	nop

c0020d50 <FAT::rename(char const*, char const*)>:
c0020d50:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020d56:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020d5e:	74 0a                	je     c0020d6a <FAT::rename(char const*, char const*)+0x1a>
c0020d60:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020d68:	75 0a                	jne    c0020d74 <FAT::rename(char const*, char const*)+0x24>
c0020d6a:	b8 04 00 00 00       	mov    eax,0x4
c0020d6f:	e9 98 00 00 00       	jmp    c0020e0c <FAT::rename(char const*, char const*)+0xbc>
c0020d74:	83 ec 08             	sub    esp,0x8
c0020d77:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020d7e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020d85:	50                   	push   eax
c0020d86:	e8 a9 fa fd ff       	call   c0000834 <strcpy>
c0020d8b:	83 c4 10             	add    esp,0x10
c0020d8e:	83 ec 08             	sub    esp,0x8
c0020d91:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020d98:	50                   	push   eax
c0020d99:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020da0:	e8 ed fa ff ff       	call   c0020892 <FAT::fixFilepath(char*)>
c0020da5:	83 c4 10             	add    esp,0x10
c0020da8:	83 ec 08             	sub    esp,0x8
c0020dab:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020db2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020db6:	50                   	push   eax
c0020db7:	e8 78 fa fd ff       	call   c0000834 <strcpy>
c0020dbc:	83 c4 10             	add    esp,0x10
c0020dbf:	83 ec 08             	sub    esp,0x8
c0020dc2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020dc6:	50                   	push   eax
c0020dc7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020dce:	e8 bf fa ff ff       	call   c0020892 <FAT::fixFilepath(char*)>
c0020dd3:	83 c4 10             	add    esp,0x10
c0020dd6:	83 ec 08             	sub    esp,0x8
c0020dd9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ddd:	50                   	push   eax
c0020dde:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020de5:	50                   	push   eax
c0020de6:	e8 9e 5a fe ff       	call   c0006889 <f_rename>
c0020deb:	83 c4 10             	add    esp,0x10
c0020dee:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020df5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020dfc:	85 c0                	test   eax,eax
c0020dfe:	75 07                	jne    c0020e07 <FAT::rename(char const*, char const*)+0xb7>
c0020e00:	b8 00 00 00 00       	mov    eax,0x0
c0020e05:	eb 05                	jmp    c0020e0c <FAT::rename(char const*, char const*)+0xbc>
c0020e07:	b8 01 00 00 00       	mov    eax,0x1
c0020e0c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020e12:	c3                   	ret    
c0020e13:	90                   	nop

c0020e14 <FAT::mkdir(char const*)>:
c0020e14:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020e1a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020e22:	75 07                	jne    c0020e2b <FAT::mkdir(char const*)+0x17>
c0020e24:	b8 04 00 00 00       	mov    eax,0x4
c0020e29:	eb 5c                	jmp    c0020e87 <FAT::mkdir(char const*)+0x73>
c0020e2b:	83 ec 08             	sub    esp,0x8
c0020e2e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020e35:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e39:	50                   	push   eax
c0020e3a:	e8 f5 f9 fd ff       	call   c0000834 <strcpy>
c0020e3f:	83 c4 10             	add    esp,0x10
c0020e42:	83 ec 08             	sub    esp,0x8
c0020e45:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020e49:	50                   	push   eax
c0020e4a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020e51:	e8 3c fa ff ff       	call   c0020892 <FAT::fixFilepath(char*)>
c0020e56:	83 c4 10             	add    esp,0x10
c0020e59:	83 ec 0c             	sub    esp,0xc
c0020e5c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e60:	50                   	push   eax
c0020e61:	e8 f7 57 fe ff       	call   c000665d <f_mkdir>
c0020e66:	83 c4 10             	add    esp,0x10
c0020e69:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020e70:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020e77:	85 c0                	test   eax,eax
c0020e79:	75 07                	jne    c0020e82 <FAT::mkdir(char const*)+0x6e>
c0020e7b:	b8 00 00 00 00       	mov    eax,0x0
c0020e80:	eb 05                	jmp    c0020e87 <FAT::mkdir(char const*)+0x73>
c0020e82:	b8 01 00 00 00       	mov    eax,0x1
c0020e87:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020e8d:	c3                   	ret    

c0020e8e <FAT::exists(char const*)>:
c0020e8e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020e94:	83 ec 08             	sub    esp,0x8
c0020e97:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020e9e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ea2:	50                   	push   eax
c0020ea3:	e8 8c f9 fd ff       	call   c0000834 <strcpy>
c0020ea8:	83 c4 10             	add    esp,0x10
c0020eab:	83 ec 08             	sub    esp,0x8
c0020eae:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020eb2:	50                   	push   eax
c0020eb3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020eba:	e8 d3 f9 ff ff       	call   c0020892 <FAT::fixFilepath(char*)>
c0020ebf:	83 c4 10             	add    esp,0x10
c0020ec2:	83 ec 08             	sub    esp,0x8
c0020ec5:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020ecc:	50                   	push   eax
c0020ecd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020ed1:	50                   	push   eax
c0020ed2:	e8 b1 52 fe ff       	call   c0006188 <f_stat>
c0020ed7:	83 c4 10             	add    esp,0x10
c0020eda:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020ee1:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020ee8:	85 c0                	test   eax,eax
c0020eea:	75 04                	jne    c0020ef0 <FAT::exists(char const*)+0x62>
c0020eec:	b0 01                	mov    al,0x1
c0020eee:	eb 02                	jmp    c0020ef2 <FAT::exists(char const*)+0x64>
c0020ef0:	b0 00                	mov    al,0x0
c0020ef2:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020ef8:	c3                   	ret    
c0020ef9:	90                   	nop

c0020efa <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020efa:	b8 08 00 00 00       	mov    eax,0x8
c0020eff:	c3                   	ret    

c0020f00 <ISO9660::seek(void*, unsigned long long)>:
c0020f00:	53                   	push   ebx
c0020f01:	b8 04 00 00 00       	mov    eax,0x4
c0020f06:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020f0a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020f0e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020f12:	85 d2                	test   edx,edx
c0020f14:	74 17                	je     c0020f2d <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020f16:	89 c8                	mov    eax,ecx
c0020f18:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020f1b:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020f1e:	b8 01 00 00 00       	mov    eax,0x1
c0020f23:	73 08                	jae    c0020f2d <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020f25:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020f28:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020f2b:	31 c0                	xor    eax,eax
c0020f2d:	5b                   	pop    ebx
c0020f2e:	c3                   	ret    
c0020f2f:	90                   	nop

c0020f30 <ISO9660::tell(void*, unsigned long long*)>:
c0020f30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020f34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f38:	85 d2                	test   edx,edx
c0020f3a:	74 12                	je     c0020f4e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020f3c:	85 c0                	test   eax,eax
c0020f3e:	74 0e                	je     c0020f4e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020f40:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020f43:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0020f46:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020f49:	89 10                	mov    DWORD PTR [eax],edx
c0020f4b:	31 c0                	xor    eax,eax
c0020f4d:	c3                   	ret    
c0020f4e:	b8 04 00 00 00       	mov    eax,0x4
c0020f53:	c3                   	ret    

c0020f54 <ISO9660::getName()>:
c0020f54:	b8 50 c0 02 c0       	mov    eax,0xc002c050
c0020f59:	c3                   	ret    

c0020f5a <ISO9660::stat(void*, unsigned long long*)>:
c0020f5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020f5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f62:	85 d2                	test   edx,edx
c0020f64:	74 12                	je     c0020f78 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020f66:	85 c0                	test   eax,eax
c0020f68:	74 0e                	je     c0020f78 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020f6a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0020f6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020f70:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020f73:	89 10                	mov    DWORD PTR [eax],edx
c0020f75:	31 c0                	xor    eax,eax
c0020f77:	c3                   	ret    
c0020f78:	b8 04 00 00 00       	mov    eax,0x4
c0020f7d:	c3                   	ret    

c0020f7e <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0020f7e:	b8 01 00 00 00       	mov    eax,0x1
c0020f83:	c3                   	ret    

c0020f84 <ISO9660::unlink(char const*)>:
c0020f84:	b8 01 00 00 00       	mov    eax,0x1
c0020f89:	c3                   	ret    

c0020f8a <ISO9660::write(void*, unsigned long, void*, int*)>:
c0020f8a:	b8 01 00 00 00       	mov    eax,0x1
c0020f8f:	c3                   	ret    

c0020f90 <ISO9660::rename(char const*, char const*)>:
c0020f90:	b8 01 00 00 00       	mov    eax,0x1
c0020f95:	c3                   	ret    

c0020f96 <ISO9660::mkdir(char const*)>:
c0020f96:	b8 01 00 00 00       	mov    eax,0x1
c0020f9b:	c3                   	ret    

c0020f9c <ISO9660::close(void*)>:
c0020f9c:	83 ec 0c             	sub    esp,0xc
c0020f9f:	b8 04 00 00 00       	mov    eax,0x4
c0020fa4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020fa8:	85 d2                	test   edx,edx
c0020faa:	74 0e                	je     c0020fba <ISO9660::close(void*)+0x1e>
c0020fac:	83 ec 0c             	sub    esp,0xc
c0020faf:	52                   	push   edx
c0020fb0:	e8 a1 e8 fe ff       	call   c000f856 <free>
c0020fb5:	83 c4 10             	add    esp,0x10
c0020fb8:	31 c0                	xor    eax,eax
c0020fba:	83 c4 0c             	add    esp,0xc
c0020fbd:	c3                   	ret    

c0020fbe <ISO9660::closeDir(void*)>:
c0020fbe:	83 ec 0c             	sub    esp,0xc
c0020fc1:	b8 04 00 00 00       	mov    eax,0x4
c0020fc6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020fca:	85 d2                	test   edx,edx
c0020fcc:	74 0e                	je     c0020fdc <ISO9660::closeDir(void*)+0x1e>
c0020fce:	83 ec 0c             	sub    esp,0xc
c0020fd1:	52                   	push   edx
c0020fd2:	e8 7f e8 fe ff       	call   c000f856 <free>
c0020fd7:	83 c4 10             	add    esp,0x10
c0020fda:	31 c0                	xor    eax,eax
c0020fdc:	83 c4 0c             	add    esp,0xc
c0020fdf:	c3                   	ret    

c0020fe0 <ISO9660::~ISO9660()>:
c0020fe0:	83 ec 0c             	sub    esp,0xc
c0020fe3:	ba b4 c0 02 c0       	mov    edx,0xc002c0b4
c0020fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fec:	89 10                	mov    DWORD PTR [eax],edx
c0020fee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ff2:	83 ec 0c             	sub    esp,0xc
c0020ff5:	50                   	push   eax
c0020ff6:	e8 43 1e ff ff       	call   c0012e3e <Filesystem::~Filesystem()>
c0020ffb:	83 c4 10             	add    esp,0x10
c0020ffe:	90                   	nop
c0020fff:	83 c4 0c             	add    esp,0xc
c0021002:	c3                   	ret    
c0021003:	90                   	nop

c0021004 <ISO9660::~ISO9660()>:
c0021004:	83 ec 0c             	sub    esp,0xc
c0021007:	83 ec 0c             	sub    esp,0xc
c002100a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002100e:	e8 cd ff ff ff       	call   c0020fe0 <ISO9660::~ISO9660()>
c0021013:	83 c4 10             	add    esp,0x10
c0021016:	83 ec 08             	sub    esp,0x8
c0021019:	6a 08                	push   0x8
c002101b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002101f:	e8 11 1a ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0021024:	83 c4 10             	add    esp,0x10
c0021027:	83 c4 0c             	add    esp,0xc
c002102a:	c3                   	ret    

c002102b <__memmem(unsigned char*, int, unsigned char*, int)>:
c002102b:	55                   	push   ebp
c002102c:	31 c9                	xor    ecx,ecx
c002102e:	57                   	push   edi
c002102f:	56                   	push   esi
c0021030:	53                   	push   ebx
c0021031:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021035:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021039:	89 eb                	mov    ebx,ebp
c002103b:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002103f:	39 ce                	cmp    esi,ecx
c0021041:	7e 17                	jle    c002105a <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021043:	31 d2                	xor    edx,edx
c0021045:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021049:	7d 13                	jge    c002105e <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002104b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002104f:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021052:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021055:	75 0d                	jne    c0021064 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021057:	42                   	inc    edx
c0021058:	eb eb                	jmp    c0021045 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c002105a:	31 c0                	xor    eax,eax
c002105c:	eb 0a                	jmp    c0021068 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002105e:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021062:	eb 04                	jmp    c0021068 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021064:	41                   	inc    ecx
c0021065:	43                   	inc    ebx
c0021066:	eb d7                	jmp    c002103f <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021068:	5b                   	pop    ebx
c0021069:	5e                   	pop    esi
c002106a:	5f                   	pop    edi
c002106b:	5d                   	pop    ebp
c002106c:	c3                   	ret    

c002106d <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002106d:	56                   	push   esi
c002106e:	53                   	push   ebx
c002106f:	52                   	push   edx
c0021070:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021074:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021078:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002107c:	39 0d c0 12 03 c0    	cmp    DWORD PTR ds:0xc00312c0,ecx
c0021082:	75 08                	jne    c002108c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021084:	38 05 14 d1 02 c0    	cmp    BYTE PTR ds:0xc002d114,al
c002108a:	74 2b                	je     c00210b7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c002108c:	83 ec 0c             	sub    esp,0xc
c002108f:	a2 14 d1 02 c0       	mov    ds:0xc002d114,al
c0021094:	68 e0 12 03 c0       	push   0xc00312e0
c0021099:	0f be c0             	movsx  eax,al
c002109c:	6a 01                	push   0x1
c002109e:	89 0d c0 12 03 c0    	mov    DWORD PTR ds:0xc00312c0,ecx
c00210a4:	31 db                	xor    ebx,ebx
c00210a6:	53                   	push   ebx
c00210a7:	51                   	push   ecx
c00210a8:	ff 34 85 9c e0 02 c0 	push   DWORD PTR [eax*4-0x3ffd1f64]
c00210af:	e8 1e 52 ff ff       	call   c00162d2 <LogicalDisk::read(unsigned long long, int, void*)>
c00210b4:	83 c4 20             	add    esp,0x20
c00210b7:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c00210bf:	c7 44 24 14 e0 12 03 c0 	mov    DWORD PTR [esp+0x14],0xc00312e0
c00210c7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00210cb:	58                   	pop    eax
c00210cc:	5b                   	pop    ebx
c00210cd:	5e                   	pop    esi
c00210ce:	e9 71 f6 fd ff       	jmp    c0000744 <memcpy>
c00210d3:	90                   	nop

c00210d4 <ISO9660::tryMount(LogicalDisk*, int)>:
c00210d4:	81 ec 10 08 00 00    	sub    esp,0x810
c00210da:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00210e1:	83 c0 41             	add    eax,0x41
c00210e4:	0f be c0             	movsx  eax,al
c00210e7:	50                   	push   eax
c00210e8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00210ec:	50                   	push   eax
c00210ed:	6a 10                	push   0x10
c00210ef:	e8 79 ff ff ff       	call   c002106d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00210f4:	83 c4 10             	add    esp,0x10
c00210f7:	31 c0                	xor    eax,eax
c00210f9:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00210fe:	75 1d                	jne    c002111d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021100:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021105:	75 16                	jne    c002111d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021107:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002110c:	75 0f                	jne    c002111d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002110e:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021113:	75 08                	jne    c002111d <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021115:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002111a:	0f 94 c0             	sete   al
c002111d:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021123:	c3                   	ret    

c0021124 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021124:	55                   	push   ebp
c0021125:	57                   	push   edi
c0021126:	56                   	push   esi
c0021127:	53                   	push   ebx
c0021128:	81 ec 2c 08 00 00    	sub    esp,0x82c
c002112e:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021135:	85 ed                	test   ebp,ebp
c0021137:	0f 84 d6 01 00 00    	je     c0021313 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002113d:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021145:	0f 84 c8 01 00 00    	je     c0021313 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002114b:	b8 01 00 00 00       	mov    eax,0x1
c0021150:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021154:	0f 85 be 01 00 00    	jne    c0021318 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c002115a:	31 d2                	xor    edx,edx
c002115c:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021163:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021166:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021169:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002116d:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021170:	89 04 24             	mov    DWORD PTR [esp],eax
c0021173:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021177:	01 f0                	add    eax,esi
c0021179:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002117c:	11 fa                	adc    edx,edi
c002117e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021182:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021186:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002118a:	19 d1                	sbb    ecx,edx
c002118c:	72 0a                	jb     c0021198 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c002118e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021192:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021196:	eb 13                	jmp    c00211ab <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021198:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002119c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00211a0:	29 f0                	sub    eax,esi
c00211a2:	19 fa                	sbb    edx,edi
c00211a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00211a7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00211ab:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00211ae:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00211b1:	0f a4 c2 0b          	shld   edx,eax,0xb
c00211b5:	51                   	push   ecx
c00211b6:	c1 e0 0b             	shl    eax,0xb
c00211b9:	01 c6                	add    esi,eax
c00211bb:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00211bf:	11 d7                	adc    edi,edx
c00211c1:	50                   	push   eax
c00211c2:	89 fa                	mov    edx,edi
c00211c4:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00211c8:	89 f0                	mov    eax,esi
c00211ca:	53                   	push   ebx
c00211cb:	0f ac d0 0b          	shrd   eax,edx,0xb
c00211cf:	50                   	push   eax
c00211d0:	e8 98 fe ff ff       	call   c002106d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00211d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00211d9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00211dc:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00211e0:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00211e6:	83 c4 10             	add    esp,0x10
c00211e9:	b8 00 08 00 00       	mov    eax,0x800
c00211ee:	29 d0                	sub    eax,edx
c00211f0:	39 c1                	cmp    ecx,eax
c00211f2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00211f6:	83 d9 00             	sbb    ecx,0x0
c00211f9:	7d 1c                	jge    c0021217 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00211fb:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021200:	75 12                	jne    c0021214 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0021202:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021209:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002120f:	e9 fb 00 00 00       	jmp    c002130f <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021214:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021217:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c002121a:	31 d2                	xor    edx,edx
c002121c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021220:	39 c2                	cmp    edx,eax
c0021222:	7d 14                	jge    c0021238 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021224:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c002122b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002122f:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021232:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021235:	42                   	inc    edx
c0021236:	eb e8                	jmp    c0021220 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021238:	89 c3                	mov    ebx,eax
c002123a:	85 c0                	test   eax,eax
c002123c:	79 02                	jns    c0021240 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c002123e:	31 db                	xor    ebx,ebx
c0021240:	99                   	cdq    
c0021241:	01 c3                	add    ebx,eax
c0021243:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c002124a:	01 c6                	add    esi,eax
c002124c:	11 d7                	adc    edi,edx
c002124e:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021252:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021256:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021259:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c002125d:	29 c6                	sub    esi,eax
c002125f:	19 d7                	sbb    edi,edx
c0021261:	89 34 24             	mov    DWORD PTR [esp],esi
c0021264:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021268:	b8 ff 07 00 00       	mov    eax,0x7ff
c002126d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021270:	b8 00 00 00 00       	mov    eax,0x0
c0021275:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021279:	7d 3e                	jge    c00212b9 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c002127b:	52                   	push   edx
c002127c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021280:	50                   	push   eax
c0021281:	53                   	push   ebx
c0021282:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021286:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002128a:	0f ac d0 0b          	shrd   eax,edx,0xb
c002128e:	50                   	push   eax
c002128f:	e8 d9 fd ff ff       	call   c002106d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021294:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c002129c:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00212a1:	81 c3 00 08 00 00    	add    ebx,0x800
c00212a7:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00212af:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00212b4:	83 c4 10             	add    esp,0x10
c00212b7:	eb af                	jmp    c0021268 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c00212b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212bd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00212c0:	74 32                	je     c00212f4 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00212c2:	50                   	push   eax
c00212c3:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00212c7:	50                   	push   eax
c00212c8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00212cc:	50                   	push   eax
c00212cd:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00212d1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00212d5:	0f ac fe 0b          	shrd   esi,edi,0xb
c00212d9:	56                   	push   esi
c00212da:	e8 8e fd ff ff       	call   c002106d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00212df:	83 c4 0c             	add    esp,0xc
c00212e2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00212e6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00212ea:	50                   	push   eax
c00212eb:	53                   	push   ebx
c00212ec:	e8 53 f4 fd ff       	call   c0000744 <memcpy>
c00212f1:	83 c4 10             	add    esp,0x10
c00212f4:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00212fb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00212ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021303:	89 38                	mov    DWORD PTR [eax],edi
c0021305:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021309:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c002130c:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002130f:	31 c0                	xor    eax,eax
c0021311:	eb 05                	jmp    c0021318 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021313:	b8 04 00 00 00       	mov    eax,0x4
c0021318:	81 c4 2c 08 00 00    	add    esp,0x82c
c002131e:	5b                   	pop    ebx
c002131f:	5e                   	pop    esi
c0021320:	5f                   	pop    edi
c0021321:	5d                   	pop    ebp
c0021322:	c3                   	ret    
c0021323:	90                   	nop

c0021324 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021324:	55                   	push   ebp
c0021325:	57                   	push   edi
c0021326:	56                   	push   esi
c0021327:	53                   	push   ebx
c0021328:	81 ec 5c 09 00 00    	sub    esp,0x95c
c002132e:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021335:	85 f6                	test   esi,esi
c0021337:	0f 84 64 02 00 00    	je     c00215a1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c002133d:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021345:	0f 84 56 02 00 00    	je     c00215a1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c002134b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c002134e:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021351:	75 0a                	jne    c002135d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021353:	b8 07 00 00 00       	mov    eax,0x7
c0021358:	e9 49 02 00 00       	jmp    c00215a6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c002135d:	50                   	push   eax
c002135e:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021362:	50                   	push   eax
c0021363:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002136a:	53                   	push   ebx
c002136b:	8b 06                	mov    eax,DWORD PTR [esi]
c002136d:	c1 e0 0b             	shl    eax,0xb
c0021370:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021373:	c1 e8 0b             	shr    eax,0xb
c0021376:	50                   	push   eax
c0021377:	e8 f1 fc ff ff       	call   c002106d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002137c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002137f:	83 c4 10             	add    esp,0x10
c0021382:	89 c1                	mov    ecx,eax
c0021384:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021387:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002138d:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021390:	84 db                	test   bl,bl
c0021392:	0f 85 90 00 00 00    	jne    c0021428 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021398:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c002139e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00213a4:	29 c7                	sub    edi,eax
c00213a6:	89 fb                	mov    ebx,edi
c00213a8:	c1 fb 1f             	sar    ebx,0x1f
c00213ab:	01 f8                	add    eax,edi
c00213ad:	11 da                	adc    edx,ebx
c00213af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00213b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00213b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00213ba:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c00213bd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00213c0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00213c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00213c6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00213ca:	89 d8                	mov    eax,ebx
c00213cc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00213cf:	ba 00 00 00 00       	mov    edx,0x0
c00213d4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00213d8:	b8 00 00 00 00       	mov    eax,0x0
c00213dd:	73 0b                	jae    c00213ea <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c00213df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00213e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00213e6:	29 f8                	sub    eax,edi
c00213e8:	19 da                	sbb    edx,ebx
c00213ea:	89 d3                	mov    ebx,edx
c00213ec:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c00213ef:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c00213f2:	09 c3                	or     ebx,eax
c00213f4:	0f 84 59 ff ff ff    	je     c0021353 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00213fa:	55                   	push   ebp
c00213fb:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00213ff:	50                   	push   eax
c0021400:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021407:	53                   	push   ebx
c0021408:	8b 06                	mov    eax,DWORD PTR [esi]
c002140a:	c1 e0 0b             	shl    eax,0xb
c002140d:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021411:	c1 e8 0b             	shr    eax,0xb
c0021414:	50                   	push   eax
c0021415:	e8 53 fc ff ff       	call   c002106d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002141a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c002141d:	83 c4 10             	add    esp,0x10
c0021420:	25 ff 07 00 00       	and    eax,0x7ff
c0021425:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021428:	57                   	push   edi
c0021429:	6a 28                	push   0x28
c002142b:	6a 00                	push   0x0
c002142d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021431:	50                   	push   eax
c0021432:	e8 41 f3 fd ff       	call   c0000778 <memset>
c0021437:	31 d2                	xor    edx,edx
c0021439:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c002143c:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021442:	89 f8                	mov    eax,edi
c0021444:	83 c0 21             	add    eax,0x21
c0021447:	83 d2 00             	adc    edx,0x0
c002144a:	89 c7                	mov    edi,eax
c002144c:	89 d5                	mov    ebp,edx
c002144e:	83 c4 10             	add    esp,0x10
c0021451:	31 c9                	xor    ecx,ecx
c0021453:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c002145a:	83 f9 28             	cmp    ecx,0x28
c002145d:	88 04 24             	mov    BYTE PTR [esp],al
c0021460:	0f 94 c2             	sete   dl
c0021463:	88 d0                	mov    al,dl
c0021465:	ba ff 07 00 00       	mov    edx,0x7ff
c002146a:	39 fa                	cmp    edx,edi
c002146c:	ba 00 00 00 00       	mov    edx,0x0
c0021471:	19 ea                	sbb    edx,ebp
c0021473:	0f 92 c2             	setb   dl
c0021476:	09 c2                	or     edx,eax
c0021478:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c002147c:	0f 94 c0             	sete   al
c002147f:	08 d0                	or     al,dl
c0021481:	75 16                	jne    c0021499 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021483:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021487:	74 10                	je     c0021499 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021489:	8a 04 24             	mov    al,BYTE PTR [esp]
c002148c:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021490:	41                   	inc    ecx
c0021491:	83 c7 01             	add    edi,0x1
c0021494:	83 d5 00             	adc    ebp,0x0
c0021497:	eb ba                	jmp    c0021453 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021499:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c00214a0:	83 ec 0c             	sub    esp,0xc
c00214a3:	8d 7c 24 24          	lea    edi,[esp+0x24]
c00214a7:	57                   	push   edi
c00214a8:	e8 e7 f2 fd ff       	call   c0000794 <strlen>
c00214ad:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00214b5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00214b9:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c00214c0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00214c3:	5a                   	pop    edx
c00214c4:	25 ff 07 00 00       	and    eax,0x7ff
c00214c9:	01 c8                	add    eax,ecx
c00214cb:	59                   	pop    ecx
c00214cc:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c00214d2:	83 e0 02             	and    eax,0x2
c00214d5:	3c 01                	cmp    al,0x1
c00214d7:	19 c0                	sbb    eax,eax
c00214d9:	83 c0 02             	add    eax,0x2
c00214dc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00214e0:	57                   	push   edi
c00214e1:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00214e5:	50                   	push   eax
c00214e6:	e8 49 f3 fd ff       	call   c0000834 <strcpy>
c00214eb:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00214ef:	83 c4 10             	add    esp,0x10
c00214f2:	84 c0                	test   al,al
c00214f4:	75 21                	jne    c0021517 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c00214f6:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00214fe:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021506:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002150e:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021515:	eb 28                	jmp    c002153f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021517:	fe c8                	dec    al
c0021519:	75 24                	jne    c002153f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c002151b:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021523:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002152b:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021533:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c002153a:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c002153f:	0f b6 fb             	movzx  edi,bl
c0021542:	31 db                	xor    ebx,ebx
c0021544:	50                   	push   eax
c0021545:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c002154c:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021550:	50                   	push   eax
c0021551:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021558:	e8 e7 f1 fd ff       	call   c0000744 <memcpy>
c002155d:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021564:	89 f9                	mov    ecx,edi
c0021566:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002156c:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c002156f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021572:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021575:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021578:	83 c4 10             	add    esp,0x10
c002157b:	39 c7                	cmp    edi,eax
c002157d:	89 df                	mov    edi,ebx
c002157f:	19 d7                	sbb    edi,edx
c0021581:	72 10                	jb     c0021593 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021583:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c002158a:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021591:	eb 0a                	jmp    c002159d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021593:	29 c8                	sub    eax,ecx
c0021595:	19 da                	sbb    edx,ebx
c0021597:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c002159a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c002159d:	31 c0                	xor    eax,eax
c002159f:	eb 05                	jmp    c00215a6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c00215a1:	b8 04 00 00 00       	mov    eax,0x4
c00215a6:	81 c4 5c 09 00 00    	add    esp,0x95c
c00215ac:	5b                   	pop    ebx
c00215ad:	5e                   	pop    esi
c00215ae:	5f                   	pop    edi
c00215af:	5d                   	pop    ebp
c00215b0:	c3                   	ret    

c00215b1 <readRoot(unsigned int*, unsigned int*, char)>:
c00215b1:	81 ec 40 08 00 00    	sub    esp,0x840
c00215b7:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00215bf:	50                   	push   eax
c00215c0:	8d 44 24 38          	lea    eax,[esp+0x38]
c00215c4:	50                   	push   eax
c00215c5:	6a 10                	push   0x10
c00215c7:	e8 a1 fa ff ff       	call   c002106d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00215cc:	83 c4 0c             	add    esp,0xc
c00215cf:	6a 22                	push   0x22
c00215d1:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c00215d8:	50                   	push   eax
c00215d9:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00215dd:	50                   	push   eax
c00215de:	e8 61 f1 fd ff       	call   c0000744 <memcpy>
c00215e3:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00215ea:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00215ee:	89 10                	mov    DWORD PTR [eax],edx
c00215f0:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00215f7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00215fb:	89 10                	mov    DWORD PTR [eax],edx
c00215fd:	b0 01                	mov    al,0x1
c00215ff:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021605:	c3                   	ret    

c0021606 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021606:	55                   	push   ebp
c0021607:	57                   	push   edi
c0021608:	56                   	push   esi
c0021609:	53                   	push   ebx
c002160a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021610:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021617:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c002161e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021622:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021626:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002162a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002162e:	75 03                	jne    c0021633 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021630:	83 c3 02             	add    ebx,0x2
c0021633:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021636:	75 03                	jne    c002163b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021638:	43                   	inc    ebx
c0021639:	eb f8                	jmp    c0021633 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002163b:	51                   	push   ecx
c002163c:	68 00 01 00 00       	push   0x100
c0021641:	6a 00                	push   0x0
c0021643:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021647:	50                   	push   eax
c0021648:	e8 2b f1 fd ff       	call   c0000778 <memset>
c002164d:	83 c4 10             	add    esp,0x10
c0021650:	31 d2                	xor    edx,edx
c0021652:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021655:	84 c0                	test   al,al
c0021657:	74 21                	je     c002167a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021659:	3c 2f                	cmp    al,0x2f
c002165b:	75 0b                	jne    c0021668 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c002165d:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021661:	bd 01 00 00 00       	mov    ebp,0x1
c0021666:	eb 14                	jmp    c002167c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021668:	8d 48 9f             	lea    ecx,[eax-0x61]
c002166b:	80 f9 19             	cmp    cl,0x19
c002166e:	77 03                	ja     c0021673 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021670:	83 e8 20             	sub    eax,0x20
c0021673:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021677:	42                   	inc    edx
c0021678:	eb d8                	jmp    c0021652 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c002167a:	31 ed                	xor    ebp,ebp
c002167c:	83 ec 0c             	sub    esp,0xc
c002167f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021686:	e8 bb e1 fe ff       	call   c000f846 <malloc>
c002168b:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021692:	89 c6                	mov    esi,eax
c0021694:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c002169a:	c1 ef 0b             	shr    edi,0xb
c002169d:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c00216a4:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00216a8:	83 c4 10             	add    esp,0x10
c00216ab:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00216b0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00216b4:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00216bb:	74 28                	je     c00216e5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00216bd:	52                   	push   edx
c00216be:	57                   	push   edi
c00216bf:	50                   	push   eax
c00216c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00216c4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00216cb:	e8 9d f9 ff ff       	call   c002106d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00216d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00216d4:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00216db:	05 00 08 00 00       	add    eax,0x800
c00216e0:	83 c4 10             	add    esp,0x10
c00216e3:	eb cb                	jmp    c00216b0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00216e5:	83 ec 0c             	sub    esp,0xc
c00216e8:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00216ec:	57                   	push   edi
c00216ed:	e8 a2 f0 fd ff       	call   c0000794 <strlen>
c00216f2:	50                   	push   eax
c00216f3:	57                   	push   edi
c00216f4:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00216fb:	56                   	push   esi
c00216fc:	e8 2a f9 ff ff       	call   c002102b <__memmem(unsigned char*, int, unsigned char*, int)>
c0021701:	83 c4 20             	add    esp,0x20
c0021704:	85 c0                	test   eax,eax
c0021706:	75 13                	jne    c002171b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021708:	83 ec 0c             	sub    esp,0xc
c002170b:	56                   	push   esi
c002170c:	e8 45 e1 fe ff       	call   c000f856 <free>
c0021711:	83 c4 10             	add    esp,0x10
c0021714:	31 c0                	xor    eax,eax
c0021716:	e9 b3 00 00 00       	jmp    c00217ce <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002171b:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c002171f:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021723:	c1 e7 08             	shl    edi,0x8
c0021726:	c1 e2 10             	shl    edx,0x10
c0021729:	09 d7                	or     edi,edx
c002172b:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c002172f:	09 d7                	or     edi,edx
c0021731:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021735:	c1 e2 18             	shl    edx,0x18
c0021738:	09 d7                	or     edi,edx
c002173a:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c002173e:	89 d1                	mov    ecx,edx
c0021740:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021744:	c1 e1 08             	shl    ecx,0x8
c0021747:	c1 e2 10             	shl    edx,0x10
c002174a:	09 ca                	or     edx,ecx
c002174c:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021750:	09 ca                	or     edx,ecx
c0021752:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021756:	c1 e1 18             	shl    ecx,0x18
c0021759:	09 ca                	or     edx,ecx
c002175b:	89 e9                	mov    ecx,ebp
c002175d:	84 c9                	test   cl,cl
c002175f:	74 3c                	je     c002179d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021761:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021765:	83 ec 0c             	sub    esp,0xc
c0021768:	56                   	push   esi
c0021769:	e8 e8 e0 fe ff       	call   c000f856 <free>
c002176e:	83 c4 0c             	add    esp,0xc
c0021771:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021778:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c002177d:	50                   	push   eax
c002177e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021785:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002178c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021790:	52                   	push   edx
c0021791:	57                   	push   edi
c0021792:	53                   	push   ebx
c0021793:	e8 6e fe ff ff       	call   c0021606 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021798:	83 c4 20             	add    esp,0x20
c002179b:	eb 31                	jmp    c00217ce <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002179d:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00217a0:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00217a7:	d0 e8                	shr    al,1
c00217a9:	89 3b                	mov    DWORD PTR [ebx],edi
c00217ab:	83 e0 01             	and    eax,0x1
c00217ae:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00217b5:	83 ec 0c             	sub    esp,0xc
c00217b8:	89 13                	mov    DWORD PTR [ebx],edx
c00217ba:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00217c1:	89 03                	mov    DWORD PTR [ebx],eax
c00217c3:	56                   	push   esi
c00217c4:	e8 8d e0 fe ff       	call   c000f856 <free>
c00217c9:	83 c4 10             	add    esp,0x10
c00217cc:	b0 01                	mov    al,0x1
c00217ce:	81 c4 1c 01 00 00    	add    esp,0x11c
c00217d4:	5b                   	pop    ebx
c00217d5:	5e                   	pop    esi
c00217d6:	5f                   	pop    edi
c00217d7:	5d                   	pop    ebp
c00217d8:	c3                   	ret    

c00217d9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00217d9:	55                   	push   ebp
c00217da:	57                   	push   edi
c00217db:	56                   	push   esi
c00217dc:	53                   	push   ebx
c00217dd:	83 ec 20             	sub    esp,0x20
c00217e0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00217e4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00217e8:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00217ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00217f4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00217fc:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021801:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021807:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c002180d:	57                   	push   edi
c002180e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021812:	50                   	push   eax
c0021813:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021817:	50                   	push   eax
c0021818:	e8 94 fd ff ff       	call   c00215b1 <readRoot(unsigned int*, unsigned int*, char)>
c002181d:	5a                   	pop    edx
c002181e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021822:	e8 6d ef fd ff       	call   c0000794 <strlen>
c0021827:	83 c4 10             	add    esp,0x10
c002182a:	83 f8 03             	cmp    eax,0x3
c002182d:	77 17                	ja     c0021846 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c002182f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021833:	89 03                	mov    DWORD PTR [ebx],eax
c0021835:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021839:	89 06                	mov    DWORD PTR [esi],eax
c002183b:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021842:	b0 01                	mov    al,0x1
c0021844:	eb 19                	jmp    c002185f <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021846:	50                   	push   eax
c0021847:	55                   	push   ebp
c0021848:	57                   	push   edi
c0021849:	56                   	push   esi
c002184a:	53                   	push   ebx
c002184b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002184f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021853:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021857:	e8 aa fd ff ff       	call   c0021606 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002185c:	83 c4 20             	add    esp,0x20
c002185f:	83 c4 1c             	add    esp,0x1c
c0021862:	5b                   	pop    ebx
c0021863:	5e                   	pop    esi
c0021864:	5f                   	pop    edi
c0021865:	5d                   	pop    ebp
c0021866:	c3                   	ret    
c0021867:	90                   	nop

c0021868 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021868:	57                   	push   edi
c0021869:	56                   	push   esi
c002186a:	53                   	push   ebx
c002186b:	83 ec 10             	sub    esp,0x10
c002186e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021872:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021876:	85 ff                	test   edi,edi
c0021878:	0f 84 9d 00 00 00    	je     c002191b <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002187e:	85 f6                	test   esi,esi
c0021880:	0f 84 95 00 00 00    	je     c002191b <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021886:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c002188b:	74 17                	je     c00218a4 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c002188d:	83 ec 0c             	sub    esp,0xc
c0021890:	68 6b c0 02 c0       	push   0xc002c06b
c0021895:	e8 7b 12 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c002189a:	83 c4 10             	add    esp,0x10
c002189d:	b8 03 00 00 00       	mov    eax,0x3
c00218a2:	eb 7c                	jmp    c0021920 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00218a4:	83 ec 0c             	sub    esp,0xc
c00218a7:	6a 1c                	push   0x1c
c00218a9:	e8 98 df fe ff       	call   c000f846 <malloc>
c00218ae:	89 07                	mov    DWORD PTR [edi],eax
c00218b0:	89 c3                	mov    ebx,eax
c00218b2:	58                   	pop    eax
c00218b3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00218b7:	50                   	push   eax
c00218b8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00218bb:	50                   	push   eax
c00218bc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00218c0:	50                   	push   eax
c00218c1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00218c5:	50                   	push   eax
c00218c6:	56                   	push   esi
c00218c7:	e8 0d ff ff ff       	call   c00217d9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00218cc:	83 c4 20             	add    esp,0x20
c00218cf:	84 c0                	test   al,al
c00218d1:	74 07                	je     c00218da <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c00218d3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00218d8:	74 0b                	je     c00218e5 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00218da:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00218de:	b8 01 00 00 00       	mov    eax,0x1
c00218e3:	eb 3b                	jmp    c0021920 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00218e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218e9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00218ed:	89 03                	mov    DWORD PTR [ebx],eax
c00218ef:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00218f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218fa:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021901:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021908:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002190b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021912:	8a 06                	mov    al,BYTE PTR [esi]
c0021914:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021917:	31 c0                	xor    eax,eax
c0021919:	eb 05                	jmp    c0021920 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002191b:	b8 04 00 00 00       	mov    eax,0x4
c0021920:	83 c4 10             	add    esp,0x10
c0021923:	5b                   	pop    ebx
c0021924:	5e                   	pop    esi
c0021925:	5f                   	pop    edi
c0021926:	c3                   	ret    
c0021927:	90                   	nop

c0021928 <ISO9660::exists(char const*)>:
c0021928:	83 ec 28             	sub    esp,0x28
c002192b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002192f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021933:	52                   	push   edx
c0021934:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021937:	52                   	push   edx
c0021938:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002193c:	52                   	push   edx
c002193d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021941:	52                   	push   edx
c0021942:	50                   	push   eax
c0021943:	e8 91 fe ff ff       	call   c00217d9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021948:	83 c4 3c             	add    esp,0x3c
c002194b:	c3                   	ret    

c002194c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c002194c:	56                   	push   esi
c002194d:	53                   	push   ebx
c002194e:	83 ec 14             	sub    esp,0x14
c0021951:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021955:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021959:	85 db                	test   ebx,ebx
c002195b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002195f:	0f 94 c2             	sete   dl
c0021962:	85 f6                	test   esi,esi
c0021964:	0f 94 c0             	sete   al
c0021967:	08 c2                	or     dl,al
c0021969:	75 68                	jne    c00219d3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002196b:	85 c9                	test   ecx,ecx
c002196d:	74 64                	je     c00219d3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002196f:	83 ec 0c             	sub    esp,0xc
c0021972:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021975:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021979:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002197f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021986:	50                   	push   eax
c0021987:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c002198a:	50                   	push   eax
c002198b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002198f:	50                   	push   eax
c0021990:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021994:	50                   	push   eax
c0021995:	51                   	push   ecx
c0021996:	e8 3e fe ff ff       	call   c00217d9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002199b:	83 c4 20             	add    esp,0x20
c002199e:	ba 01 00 00 00       	mov    edx,0x1
c00219a3:	84 c0                	test   al,al
c00219a5:	74 31                	je     c00219d8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00219a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219ab:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00219b2:	89 03                	mov    DWORD PTR [ebx],eax
c00219b4:	ba 00 00 00 00       	mov    edx,0x0
c00219b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00219bd:	85 c0                	test   eax,eax
c00219bf:	0f 95 06             	setne  BYTE PTR [esi]
c00219c2:	74 14                	je     c00219d8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00219c4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00219ca:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00219d1:	eb 05                	jmp    c00219d8 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00219d3:	ba 04 00 00 00       	mov    edx,0x4
c00219d8:	83 c4 14             	add    esp,0x14
c00219db:	89 d0                	mov    eax,edx
c00219dd:	5b                   	pop    ebx
c00219de:	5e                   	pop    esi
c00219df:	c3                   	ret    

c00219e0 <ISO9660::openDir(char const*, void**)>:
c00219e0:	57                   	push   edi
c00219e1:	56                   	push   esi
c00219e2:	53                   	push   ebx
c00219e3:	83 ec 10             	sub    esp,0x10
c00219e6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00219ea:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00219ee:	85 ff                	test   edi,edi
c00219f0:	0f 84 95 00 00 00    	je     c0021a8b <ISO9660::openDir(char const*, void**)+0xab>
c00219f6:	85 f6                	test   esi,esi
c00219f8:	0f 84 8d 00 00 00    	je     c0021a8b <ISO9660::openDir(char const*, void**)+0xab>
c00219fe:	83 ec 0c             	sub    esp,0xc
c0021a01:	6a 1c                	push   0x1c
c0021a03:	e8 3e de fe ff       	call   c000f846 <malloc>
c0021a08:	89 07                	mov    DWORD PTR [edi],eax
c0021a0a:	89 c3                	mov    ebx,eax
c0021a0c:	59                   	pop    ecx
c0021a0d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a11:	50                   	push   eax
c0021a12:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021a15:	50                   	push   eax
c0021a16:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a1a:	50                   	push   eax
c0021a1b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a1f:	50                   	push   eax
c0021a20:	56                   	push   esi
c0021a21:	e8 b3 fd ff ff       	call   c00217d9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021a26:	83 c4 20             	add    esp,0x20
c0021a29:	84 c0                	test   al,al
c0021a2b:	74 07                	je     c0021a34 <ISO9660::openDir(char const*, void**)+0x54>
c0021a2d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021a32:	75 21                	jne    c0021a55 <ISO9660::openDir(char const*, void**)+0x75>
c0021a34:	0f b6 c0             	movzx  eax,al
c0021a37:	52                   	push   edx
c0021a38:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021a3c:	50                   	push   eax
c0021a3d:	68 91 c0 02 c0       	push   0xc002c091
c0021a42:	e8 ce 10 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0021a47:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021a4b:	83 c4 10             	add    esp,0x10
c0021a4e:	b8 01 00 00 00       	mov    eax,0x1
c0021a53:	eb 3b                	jmp    c0021a90 <ISO9660::openDir(char const*, void**)+0xb0>
c0021a55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a59:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021a5d:	89 03                	mov    DWORD PTR [ebx],eax
c0021a5f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021a66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a6a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021a71:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021a7b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021a82:	8a 06                	mov    al,BYTE PTR [esi]
c0021a84:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021a87:	31 c0                	xor    eax,eax
c0021a89:	eb 05                	jmp    c0021a90 <ISO9660::openDir(char const*, void**)+0xb0>
c0021a8b:	b8 04 00 00 00       	mov    eax,0x4
c0021a90:	83 c4 10             	add    esp,0x10
c0021a93:	5b                   	pop    ebx
c0021a94:	5e                   	pop    esi
c0021a95:	5f                   	pop    edi
c0021a96:	c3                   	ret    
c0021a97:	90                   	nop

c0021a98 <ISO9660::ISO9660()>:
c0021a98:	83 ec 0c             	sub    esp,0xc
c0021a9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a9f:	83 ec 0c             	sub    esp,0xc
c0021aa2:	50                   	push   eax
c0021aa3:	e8 72 13 ff ff       	call   c0012e1a <Filesystem::Filesystem()>
c0021aa8:	83 c4 10             	add    esp,0x10
c0021aab:	ba b4 c0 02 c0       	mov    edx,0xc002c0b4
c0021ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ab4:	89 10                	mov    DWORD PTR [eax],edx
c0021ab6:	90                   	nop
c0021ab7:	83 c4 0c             	add    esp,0xc
c0021aba:	c3                   	ret    
c0021abb:	90                   	nop

c0021abc <SoundChannel::~SoundChannel()>:
c0021abc:	83 ec 0c             	sub    esp,0xc
c0021abf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ac3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021ac6:	83 ec 0c             	sub    esp,0xc
c0021ac9:	50                   	push   eax
c0021aca:	e8 87 dd fe ff       	call   c000f856 <free>
c0021acf:	83 c4 10             	add    esp,0x10
c0021ad2:	90                   	nop
c0021ad3:	83 c4 0c             	add    esp,0xc
c0021ad6:	c3                   	ret    
c0021ad7:	90                   	nop

c0021ad8 <SoundChannel::setSpeed(float)>:
c0021ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021adc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021ae0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0021ae3:	c3                   	ret    

c0021ae4 <SoundChannel::getSpeed()>:
c0021ae4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ae8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0021aeb:	c3                   	ret    

c0021aec <SoundChannel::setVolume(int)>:
c0021aec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021af0:	83 f8 64             	cmp    eax,0x64
c0021af3:	7e 05                	jle    c0021afa <SoundChannel::setVolume(int)+0xe>
c0021af5:	b8 64 00 00 00       	mov    eax,0x64
c0021afa:	85 c0                	test   eax,eax
c0021afc:	79 02                	jns    c0021b00 <SoundChannel::setVolume(int)+0x14>
c0021afe:	31 c0                	xor    eax,eax
c0021b00:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021b04:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0021b07:	c3                   	ret    

c0021b08 <SoundChannel::getVolume()>:
c0021b08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b0c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021b0f:	c3                   	ret    

c0021b10 <SoundChannel::pause()>:
c0021b10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b14:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0021b18:	c3                   	ret    
c0021b19:	90                   	nop

c0021b1a <SoundChannel::SoundChannel(int, int, int, int)>:
c0021b1a:	83 ec 1c             	sub    esp,0x1c
c0021b1d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021b21:	e8 ea ff ff ff       	call   c0021b10 <SoundChannel::pause()>
c0021b26:	83 c4 04             	add    esp,0x4
c0021b29:	6a 50                	push   0x50
c0021b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021b2f:	e8 b8 ff ff ff       	call   c0021aec <SoundChannel::setVolume(int)>
c0021b34:	83 c4 08             	add    esp,0x8
c0021b37:	a1 2c c1 02 c0       	mov    eax,ds:0xc002c12c
c0021b3c:	50                   	push   eax
c0021b3d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021b41:	e8 92 ff ff ff       	call   c0021ad8 <SoundChannel::setSpeed(float)>
c0021b46:	83 c4 08             	add    esp,0x8
c0021b49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b4d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021b51:	89 10                	mov    DWORD PTR [eax],edx
c0021b53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b57:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021b5b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021b5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b62:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021b66:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021b69:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021b6e:	75 23                	jne    c0021b93 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0021b70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b74:	8b 10                	mov    edx,DWORD PTR [eax]
c0021b76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b7d:	0f af c2             	imul   eax,edx
c0021b80:	85 c0                	test   eax,eax
c0021b82:	79 03                	jns    c0021b87 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0021b84:	83 c0 03             	add    eax,0x3
c0021b87:	c1 f8 02             	sar    eax,0x2
c0021b8a:	05 a0 0f 00 00       	add    eax,0xfa0
c0021b8f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021b93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b97:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021b9b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021b9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ba2:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021ba9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bad:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021bb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bb8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021bbb:	c1 e0 02             	shl    eax,0x2
c0021bbe:	83 ec 0c             	sub    esp,0xc
c0021bc1:	50                   	push   eax
c0021bc2:	e8 7f dc fe ff       	call   c000f846 <malloc>
c0021bc7:	83 c4 10             	add    esp,0x10
c0021bca:	89 c2                	mov    edx,eax
c0021bcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bd0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021bd3:	83 ec 04             	sub    esp,0x4
c0021bd6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021bda:	50                   	push   eax
c0021bdb:	6a 01                	push   0x1
c0021bdd:	6a 04                	push   0x4
c0021bdf:	e8 bb 6f fe ff       	call   c0008b9f <src_new>
c0021be4:	83 c4 10             	add    esp,0x10
c0021be7:	89 c2                	mov    edx,eax
c0021be9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bed:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021bf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bf4:	85 c0                	test   eax,eax
c0021bf6:	74 10                	je     c0021c08 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0021bf8:	83 ec 0c             	sub    esp,0xc
c0021bfb:	68 10 c1 02 c0       	push   0xc002c110
c0021c00:	e8 38 84 ff ff       	call   c001a03d <Krnl::panic(char const*)>
c0021c05:	83 c4 10             	add    esp,0x10
c0021c08:	a0 e0 1e 03 c0       	mov    al,ds:0xc0031ee0
c0021c0d:	83 f0 01             	xor    eax,0x1
c0021c10:	84 c0                	test   al,al
c0021c12:	74 57                	je     c0021c6b <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0021c14:	a1 30 c1 02 c0       	mov    eax,ds:0xc002c130
c0021c19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021c1d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021c25:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021c2d:	7f 35                	jg     c0021c64 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0021c2f:	83 ec 0c             	sub    esp,0xc
c0021c32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021c36:	e8 9c 4f 00 00       	call   c0026bd7 <__floatsisf>
c0021c3b:	83 c4 10             	add    esp,0x10
c0021c3e:	8b 15 30 c1 02 c0    	mov    edx,DWORD PTR ds:0xc002c130
c0021c44:	83 ec 08             	sub    esp,0x8
c0021c47:	52                   	push   edx
c0021c48:	50                   	push   eax
c0021c49:	e8 9b 4b 00 00       	call   c00267e9 <__mulsf3>
c0021c4e:	83 c4 10             	add    esp,0x10
c0021c51:	89 c2                	mov    edx,eax
c0021c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021c57:	89 14 85 e0 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce520],edx
c0021c5e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021c62:	eb c1                	jmp    c0021c25 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0021c64:	c6 05 e0 1e 03 c0 01 	mov    BYTE PTR ds:0xc0031ee0,0x1
c0021c6b:	90                   	nop
c0021c6c:	83 c4 1c             	add    esp,0x1c
c0021c6f:	c3                   	ret    

c0021c70 <SoundChannel::play()>:
c0021c70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c74:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0021c78:	c3                   	ret    
c0021c79:	90                   	nop

c0021c7a <SoundChannel::paused()>:
c0021c7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c7e:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0021c81:	c3                   	ret    

c0021c82 <SoundChannel::getSampleRate()>:
c0021c82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c86:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c88:	c3                   	ret    
c0021c89:	90                   	nop

c0021c8a <SoundChannel::getBits()>:
c0021c8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c91:	c3                   	ret    

c0021c92 <SoundChannel::getBufferUsed()>:
c0021c92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c96:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021c99:	c3                   	ret    

c0021c9a <SoundChannel::getBufferSize()>:
c0021c9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c9e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021ca1:	c3                   	ret    

c0021ca2 <SoundChannel::unbuffer(float*, int, int)>:
c0021ca2:	56                   	push   esi
c0021ca3:	53                   	push   ebx
c0021ca4:	83 ec 40             	sub    esp,0x40
c0021ca7:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021cab:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021cae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021cb2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021cb5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021cb9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021cbd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021cc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021cc5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021cc9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021ccd:	e8 05 4f 00 00       	call   c0026bd7 <__floatsisf>
c0021cd2:	5a                   	pop    edx
c0021cd3:	89 c6                	mov    esi,eax
c0021cd5:	ff 33                	push   DWORD PTR [ebx]
c0021cd7:	e8 fb 4e 00 00       	call   c0026bd7 <__floatsisf>
c0021cdc:	59                   	pop    ecx
c0021cdd:	5a                   	pop    edx
c0021cde:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0021ce1:	50                   	push   eax
c0021ce2:	e8 02 4b 00 00       	call   c00267e9 <__mulsf3>
c0021ce7:	59                   	pop    ecx
c0021ce8:	5a                   	pop    edx
c0021ce9:	50                   	push   eax
c0021cea:	56                   	push   esi
c0021ceb:	e8 bc 4c 00 00       	call   c00269ac <__divsf3>
c0021cf0:	89 04 24             	mov    DWORD PTR [esp],eax
c0021cf3:	e8 af 61 00 00       	call   c0027ea7 <__extendsfdf2>
c0021cf8:	59                   	pop    ecx
c0021cf9:	5e                   	pop    esi
c0021cfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021cfe:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021d02:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021d0a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021d0e:	50                   	push   eax
c0021d0f:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021d12:	e8 7d 6a fe ff       	call   c0008794 <src_process>
c0021d17:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021d1b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021d1e:	83 c4 0c             	add    esp,0xc
c0021d21:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021d24:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021d27:	29 d0                	sub    eax,edx
c0021d29:	c1 e0 02             	shl    eax,0x2
c0021d2c:	50                   	push   eax
c0021d2d:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021d30:	50                   	push   eax
c0021d31:	51                   	push   ecx
c0021d32:	e8 45 e9 fd ff       	call   c000067c <memmove>
c0021d37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021d3b:	83 c4 44             	add    esp,0x44
c0021d3e:	5b                   	pop    ebx
c0021d3f:	5e                   	pop    esi
c0021d40:	c3                   	ret    
c0021d41:	90                   	nop

c0021d42 <SoundChannel::buffer8(unsigned char*, int)>:
c0021d42:	55                   	push   ebp
c0021d43:	57                   	push   edi
c0021d44:	56                   	push   esi
c0021d45:	53                   	push   ebx
c0021d46:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021d4a:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021d4e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021d51:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021d55:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021d58:	74 7a                	je     c0021dd4 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021d5a:	85 ff                	test   edi,edi
c0021d5c:	7e 76                	jle    c0021dd4 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021d5e:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021d62:	8d 70 01             	lea    esi,[eax+0x1]
c0021d65:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021d68:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021d6b:	8b 1c 9d e0 1a 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce520]
c0021d72:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021d75:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021d78:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021d7b:	74 5e                	je     c0021ddb <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021d7d:	83 ff 01             	cmp    edi,0x1
c0021d80:	74 4b                	je     c0021dcd <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021d82:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021d86:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021d89:	8d 70 01             	lea    esi,[eax+0x1]
c0021d8c:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021d8f:	8b 1c 9d e0 1a 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce520]
c0021d96:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021d99:	b8 02 00 00 00       	mov    eax,0x2
c0021d9e:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021da1:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021da4:	75 23                	jne    c0021dc9 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021da6:	eb 27                	jmp    c0021dcf <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021da8:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021dad:	8d 71 01             	lea    esi,[ecx+0x1]
c0021db0:	40                   	inc    eax
c0021db1:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021db4:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021db7:	8b 1c 9d e0 1a 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce520]
c0021dbe:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021dc1:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021dc4:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021dc7:	74 06                	je     c0021dcf <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021dc9:	39 c7                	cmp    edi,eax
c0021dcb:	75 db                	jne    c0021da8 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021dcd:	89 f8                	mov    eax,edi
c0021dcf:	5b                   	pop    ebx
c0021dd0:	5e                   	pop    esi
c0021dd1:	5f                   	pop    edi
c0021dd2:	5d                   	pop    ebp
c0021dd3:	c3                   	ret    
c0021dd4:	5b                   	pop    ebx
c0021dd5:	31 c0                	xor    eax,eax
c0021dd7:	5e                   	pop    esi
c0021dd8:	5f                   	pop    edi
c0021dd9:	5d                   	pop    ebp
c0021dda:	c3                   	ret    
c0021ddb:	b8 01 00 00 00       	mov    eax,0x1
c0021de0:	eb ed                	jmp    c0021dcf <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021de2 <SoundDevice::SoundDevice(char const*)>:
c0021de2:	83 ec 1c             	sub    esp,0x1c
c0021de5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021de9:	83 ec 08             	sub    esp,0x8
c0021dec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021df0:	50                   	push   eax
c0021df1:	e8 36 23 ff ff       	call   c001412c <Device::Device(char const*)>
c0021df6:	83 c4 10             	add    esp,0x10
c0021df9:	ba 3c c1 02 c0       	mov    edx,0xc002c13c
c0021dfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e02:	89 10                	mov    DWORD PTR [eax],edx
c0021e04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e08:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021e12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e16:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021e20:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021e28:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021e2d:	7f 19                	jg     c0021e48 <SoundDevice::SoundDevice(char const*)+0x66>
c0021e2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021e37:	83 c2 54             	add    edx,0x54
c0021e3a:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021e42:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021e46:	eb e0                	jmp    c0021e28 <SoundDevice::SoundDevice(char const*)+0x46>
c0021e48:	90                   	nop
c0021e49:	83 c4 1c             	add    esp,0x1c
c0021e4c:	c3                   	ret    
c0021e4d:	90                   	nop

c0021e4e <SoundDevice::~SoundDevice()>:
c0021e4e:	53                   	push   ebx
c0021e4f:	83 ec 18             	sub    esp,0x18
c0021e52:	ba 3c c1 02 c0       	mov    edx,0xc002c13c
c0021e57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e5b:	89 10                	mov    DWORD PTR [eax],edx
c0021e5d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021e65:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021e6a:	7f 46                	jg     c0021eb2 <SoundDevice::~SoundDevice()+0x64>
c0021e6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e70:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021e74:	83 c2 54             	add    edx,0x54
c0021e77:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021e7b:	85 c0                	test   eax,eax
c0021e7d:	74 2d                	je     c0021eac <SoundDevice::~SoundDevice()+0x5e>
c0021e7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021e87:	83 c2 54             	add    edx,0x54
c0021e8a:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021e8e:	85 db                	test   ebx,ebx
c0021e90:	74 1a                	je     c0021eac <SoundDevice::~SoundDevice()+0x5e>
c0021e92:	83 ec 0c             	sub    esp,0xc
c0021e95:	53                   	push   ebx
c0021e96:	e8 21 fc ff ff       	call   c0021abc <SoundChannel::~SoundChannel()>
c0021e9b:	83 c4 10             	add    esp,0x10
c0021e9e:	83 ec 08             	sub    esp,0x8
c0021ea1:	6a 2c                	push   0x2c
c0021ea3:	53                   	push   ebx
c0021ea4:	e8 8c 0b ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0021ea9:	83 c4 10             	add    esp,0x10
c0021eac:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021eb0:	eb b3                	jmp    c0021e65 <SoundDevice::~SoundDevice()+0x17>
c0021eb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021eb6:	83 ec 0c             	sub    esp,0xc
c0021eb9:	50                   	push   eax
c0021eba:	e8 4f 1f ff ff       	call   c0013e0e <Device::~Device()>
c0021ebf:	83 c4 10             	add    esp,0x10
c0021ec2:	90                   	nop
c0021ec3:	83 c4 18             	add    esp,0x18
c0021ec6:	5b                   	pop    ebx
c0021ec7:	c3                   	ret    

c0021ec8 <SoundDevice::~SoundDevice()>:
c0021ec8:	83 ec 0c             	sub    esp,0xc
c0021ecb:	83 ec 0c             	sub    esp,0xc
c0021ece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ed2:	e8 77 ff ff ff       	call   c0021e4e <SoundDevice::~SoundDevice()>
c0021ed7:	83 c4 10             	add    esp,0x10
c0021eda:	83 ec 08             	sub    esp,0x8
c0021edd:	68 e4 01 00 00       	push   0x1e4
c0021ee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ee6:	e8 4a 0b ff ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0021eeb:	83 c4 10             	add    esp,0x10
c0021eee:	83 c4 0c             	add    esp,0xc
c0021ef1:	c3                   	ret    

c0021ef2 <SoundDevice::getFreeChannelNum()>:
c0021ef2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021ef6:	31 c0                	xor    eax,eax
c0021ef8:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021f00:	74 09                	je     c0021f0b <SoundDevice::getFreeChannelNum()+0x19>
c0021f02:	40                   	inc    eax
c0021f03:	83 f8 20             	cmp    eax,0x20
c0021f06:	75 f0                	jne    c0021ef8 <SoundDevice::getFreeChannelNum()+0x6>
c0021f08:	83 c8 ff             	or     eax,0xffffffff
c0021f0b:	c3                   	ret    

c0021f0c <SoundDevice::addChannel(SoundChannel*)>:
c0021f0c:	56                   	push   esi
c0021f0d:	53                   	push   ebx
c0021f0e:	51                   	push   ecx
c0021f0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021f13:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021f17:	53                   	push   ebx
c0021f18:	e8 d5 ff ff ff       	call   c0021ef2 <SoundDevice::getFreeChannelNum()>
c0021f1d:	5a                   	pop    edx
c0021f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0021f21:	74 51                	je     c0021f74 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021f23:	85 f6                	test   esi,esi
c0021f25:	74 4d                	je     c0021f74 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021f27:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0021f2e:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0021f35:	75 30                	jne    c0021f67 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0021f37:	83 ec 0c             	sub    esp,0xc
c0021f3a:	56                   	push   esi
c0021f3b:	e8 42 fd ff ff       	call   c0021c82 <SoundChannel::getSampleRate()>
c0021f40:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0021f46:	89 34 24             	mov    DWORD PTR [esp],esi
c0021f49:	e8 3c fd ff ff       	call   c0021c8a <SoundChannel::getBits()>
c0021f4e:	83 c4 0c             	add    esp,0xc
c0021f51:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0021f57:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021f59:	50                   	push   eax
c0021f5a:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0021f60:	53                   	push   ebx
c0021f61:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0021f64:	83 c4 10             	add    esp,0x10
c0021f67:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0021f6d:	b8 01 00 00 00       	mov    eax,0x1
c0021f72:	eb 03                	jmp    c0021f77 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0021f74:	83 c8 ff             	or     eax,0xffffffff
c0021f77:	5a                   	pop    edx
c0021f78:	5b                   	pop    ebx
c0021f79:	5e                   	pop    esi
c0021f7a:	c3                   	ret    
c0021f7b:	90                   	nop

c0021f7c <SoundDevice::removeChannel(int)>:
c0021f7c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021f80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f84:	83 fa 1f             	cmp    edx,0x1f
c0021f87:	77 23                	ja     c0021fac <SoundDevice::removeChannel(int)+0x30>
c0021f89:	8d 14 90             	lea    edx,[eax+edx*4]
c0021f8c:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021f93:	74 17                	je     c0021fac <SoundDevice::removeChannel(int)+0x30>
c0021f95:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0021f9f:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021fa5:	75 05                	jne    c0021fac <SoundDevice::removeChannel(int)+0x30>
c0021fa7:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fa9:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0021fac:	c3                   	ret    
c0021fad:	90                   	nop

c0021fae <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0021fae:	57                   	push   edi
c0021faf:	56                   	push   esi
c0021fb0:	53                   	push   ebx
c0021fb1:	31 db                	xor    ebx,ebx
c0021fb3:	83 ec 10             	sub    esp,0x10
c0021fb6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021fba:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021fbe:	0f 8d cb 00 00 00    	jge    c002208f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0021fc4:	83 ec 0c             	sub    esp,0xc
c0021fc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021fcb:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021fce:	e8 d4 5e 00 00       	call   c0027ea7 <__extendsfdf2>
c0021fd3:	83 c4 10             	add    esp,0x10
c0021fd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021fda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021fde:	68 00 00 f0 3f       	push   0x3ff00000
c0021fe3:	6a 00                	push   0x0
c0021fe5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021fe9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021fed:	e8 41 4e 00 00       	call   c0026e33 <__adddf3>
c0021ff2:	83 c4 10             	add    esp,0x10
c0021ff5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021ff9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021ffd:	68 00 00 e0 3f       	push   0x3fe00000
c0022002:	6a 00                	push   0x0
c0022004:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022008:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002200c:	e8 9f 54 00 00       	call   c00274b0 <__muldf3>
c0022011:	83 c4 10             	add    esp,0x10
c0022014:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022018:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002201c:	68 00 00 60 40       	push   0x40600000
c0022021:	6a 00                	push   0x0
c0022023:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022027:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002202b:	e8 80 54 00 00       	call   c00274b0 <__muldf3>
c0022030:	59                   	pop    ecx
c0022031:	5f                   	pop    edi
c0022032:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022036:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002203a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002203e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022042:	e8 3c 5d 00 00       	call   c0027d83 <__truncdfsf2>
c0022047:	5a                   	pop    edx
c0022048:	89 c7                	mov    edi,eax
c002204a:	59                   	pop    ecx
c002204b:	68 00 00 fe 42       	push   0x42fe0000
c0022050:	50                   	push   eax
c0022051:	e8 d7 4d 00 00       	call   c0026e2d <__gesf2>
c0022056:	83 c4 10             	add    esp,0x10
c0022059:	85 c0                	test   eax,eax
c002205b:	78 06                	js     c0022063 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002205d:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022061:	eb 26                	jmp    c0022089 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022063:	50                   	push   eax
c0022064:	50                   	push   eax
c0022065:	6a 00                	push   0x0
c0022067:	57                   	push   edi
c0022068:	e8 c4 4d 00 00       	call   c0026e31 <__lesf2>
c002206d:	83 c4 10             	add    esp,0x10
c0022070:	85 c0                	test   eax,eax
c0022072:	7f 06                	jg     c002207a <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022074:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022078:	eb 0f                	jmp    c0022089 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002207a:	83 ec 0c             	sub    esp,0xc
c002207d:	57                   	push   edi
c002207e:	e8 b9 5e 00 00       	call   c0027f3c <lrintf>
c0022083:	83 c4 10             	add    esp,0x10
c0022086:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022089:	43                   	inc    ebx
c002208a:	e9 2b ff ff ff       	jmp    c0021fba <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002208f:	83 c4 10             	add    esp,0x10
c0022092:	5b                   	pop    ebx
c0022093:	5e                   	pop    esi
c0022094:	5f                   	pop    edi
c0022095:	c3                   	ret    

c0022096 <SoundDevice::getAudio(int, float*, float*)>:
c0022096:	55                   	push   ebp
c0022097:	57                   	push   edi
c0022098:	56                   	push   esi
c0022099:	53                   	push   ebx
c002209a:	31 db                	xor    ebx,ebx
c002209c:	83 ec 20             	sub    esp,0x20
c002209f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00220a3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00220a7:	c1 e0 02             	shl    eax,0x2
c00220aa:	50                   	push   eax
c00220ab:	6a 00                	push   0x0
c00220ad:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00220b1:	e8 c2 e6 fd ff       	call   c0000778 <memset>
c00220b6:	83 c4 10             	add    esp,0x10
c00220b9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00220bd:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00220c4:	85 c0                	test   eax,eax
c00220c6:	0f 84 d7 00 00 00    	je     c00221a3 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00220cc:	83 ec 0c             	sub    esp,0xc
c00220cf:	50                   	push   eax
c00220d0:	e8 a5 fb ff ff       	call   c0021c7a <SoundChannel::paused()>
c00220d5:	83 c4 10             	add    esp,0x10
c00220d8:	84 c0                	test   al,al
c00220da:	0f 85 c3 00 00 00    	jne    c00221a3 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00220e0:	83 ec 0c             	sub    esp,0xc
c00220e3:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00220ea:	e8 19 fa ff ff       	call   c0021b08 <SoundChannel::getVolume()>
c00220ef:	83 c4 10             	add    esp,0x10
c00220f2:	85 c0                	test   eax,eax
c00220f4:	0f 84 a9 00 00 00    	je     c00221a3 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00220fa:	83 ec 0c             	sub    esp,0xc
c00220fd:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022104:	e8 ff f9 ff ff       	call   c0021b08 <SoundChannel::getVolume()>
c0022109:	83 ec 0c             	sub    esp,0xc
c002210c:	50                   	push   eax
c002210d:	e8 c5 4a 00 00       	call   c0026bd7 <__floatsisf>
c0022112:	59                   	pop    ecx
c0022113:	5d                   	pop    ebp
c0022114:	31 ed                	xor    ebp,ebp
c0022116:	68 00 00 c8 42       	push   0x42c80000
c002211b:	50                   	push   eax
c002211c:	e8 8b 48 00 00       	call   c00269ac <__divsf3>
c0022121:	83 c4 10             	add    esp,0x10
c0022124:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022128:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c002212c:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022132:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022136:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002213d:	e8 60 fb ff ff       	call   c0021ca2 <SoundChannel::unbuffer(float*, int, int)>
c0022142:	83 c4 20             	add    esp,0x20
c0022145:	89 c1                	mov    ecx,eax
c0022147:	39 cd                	cmp    ebp,ecx
c0022149:	7d 52                	jge    c002219d <SoundDevice::getAudio(int, float*, float*)+0x107>
c002214b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002214f:	50                   	push   eax
c0022150:	50                   	push   eax
c0022151:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022155:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022158:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002215c:	e8 88 46 00 00       	call   c00267e9 <__mulsf3>
c0022161:	5a                   	pop    edx
c0022162:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022166:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c002216c:	e8 66 4a 00 00       	call   c0026bd7 <__floatsisf>
c0022171:	59                   	pop    ecx
c0022172:	5a                   	pop    edx
c0022173:	50                   	push   eax
c0022174:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022178:	e8 2f 48 00 00       	call   c00269ac <__divsf3>
c002217d:	59                   	pop    ecx
c002217e:	5a                   	pop    edx
c002217f:	50                   	push   eax
c0022180:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022184:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022187:	e8 3a 43 00 00       	call   c00264c6 <__addsf3>
c002218c:	83 c4 10             	add    esp,0x10
c002218f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022193:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022197:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c002219a:	45                   	inc    ebp
c002219b:	eb aa                	jmp    c0022147 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c002219d:	39 cf                	cmp    edi,ecx
c002219f:	7e 02                	jle    c00221a3 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00221a1:	89 cf                	mov    edi,ecx
c00221a3:	43                   	inc    ebx
c00221a4:	83 fb 20             	cmp    ebx,0x20
c00221a7:	0f 85 10 ff ff ff    	jne    c00220bd <SoundDevice::getAudio(int, float*, float*)+0x27>
c00221ad:	83 c4 1c             	add    esp,0x1c
c00221b0:	89 f8                	mov    eax,edi
c00221b2:	5b                   	pop    ebx
c00221b3:	5e                   	pop    esi
c00221b4:	5f                   	pop    edi
c00221b5:	5d                   	pop    ebp
c00221b6:	c3                   	ret    
c00221b7:	90                   	nop

c00221b8 <PCI::open(int, int, void*)>:
c00221b8:	83 ec 18             	sub    esp,0x18
c00221bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00221bf:	8b 10                	mov    edx,DWORD PTR [eax]
c00221c1:	50                   	push   eax
c00221c2:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00221c5:	31 c0                	xor    eax,eax
c00221c7:	83 c4 1c             	add    esp,0x1c
c00221ca:	c3                   	ret    
c00221cb:	90                   	nop

c00221cc <PCI::close(int, int, void*)>:
c00221cc:	31 c0                	xor    eax,eax
c00221ce:	c3                   	ret    
c00221cf:	90                   	nop

c00221d0 <PCI::PCI()>:
c00221d0:	83 ec 0c             	sub    esp,0xc
c00221d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221d7:	83 ec 08             	sub    esp,0x8
c00221da:	68 6c c1 02 c0       	push   0xc002c16c
c00221df:	50                   	push   eax
c00221e0:	e8 cb 15 ff ff       	call   c00137b0 <Bus::Bus(char const*)>
c00221e5:	83 c4 10             	add    esp,0x10
c00221e8:	ba d8 c1 02 c0       	mov    edx,0xc002c1d8
c00221ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221f1:	89 10                	mov    DWORD PTR [eax],edx
c00221f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221f7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00221fd:	0f b6 d0             	movzx  edx,al
c0022200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022204:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002220b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002220f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022215:	0f b6 d0             	movzx  edx,al
c0022218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002221c:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022225:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002222b:	8d 50 01             	lea    edx,[eax+0x1]
c002222e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022232:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022238:	0f b6 d0             	movzx  edx,al
c002223b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002223f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022243:	83 c9 c0             	or     ecx,0xffffffc0
c0022246:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002224a:	90                   	nop
c002224b:	83 c4 0c             	add    esp,0xc
c002224e:	c3                   	ret    
c002224f:	90                   	nop

c0022250 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022250:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022254:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022259:	89 ca                	mov    edx,ecx
c002225b:	c1 e0 10             	shl    eax,0x10
c002225e:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022264:	09 d0                	or     eax,edx
c0022266:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c002226b:	c1 e2 08             	shl    edx,0x8
c002226e:	09 d0                	or     eax,edx
c0022270:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022275:	c1 e2 0b             	shl    edx,0xb
c0022278:	09 d0                	or     eax,edx
c002227a:	ba f8 0c 00 00       	mov    edx,0xcf8
c002227f:	0d 00 00 00 80       	or     eax,0x80000000
c0022284:	ef                   	out    dx,eax
c0022285:	ba fc 0c 00 00       	mov    edx,0xcfc
c002228a:	ed                   	in     eax,dx
c002228b:	83 e1 02             	and    ecx,0x2
c002228e:	0f b6 c9             	movzx  ecx,cl
c0022291:	c1 e1 03             	shl    ecx,0x3
c0022294:	d3 e8                	shr    eax,cl
c0022296:	c3                   	ret    
c0022297:	90                   	nop

c0022298 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022298:	6a 00                	push   0x0
c002229a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002229f:	50                   	push   eax
c00222a0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00222a5:	50                   	push   eax
c00222a6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00222ab:	50                   	push   eax
c00222ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222b0:	e8 9b ff ff ff       	call   c0022250 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00222b5:	83 c4 14             	add    esp,0x14
c00222b8:	c3                   	ret    
c00222b9:	90                   	nop

c00222ba <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00222ba:	6a 0e                	push   0xe
c00222bc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00222c1:	50                   	push   eax
c00222c2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00222c7:	50                   	push   eax
c00222c8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00222cd:	50                   	push   eax
c00222ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00222d2:	e8 79 ff ff ff       	call   c0022250 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00222d7:	83 c4 14             	add    esp,0x14
c00222da:	0f b6 c0             	movzx  eax,al
c00222dd:	c3                   	ret    

c00222de <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00222de:	55                   	push   ebp
c00222df:	57                   	push   edi
c00222e0:	56                   	push   esi
c00222e1:	53                   	push   ebx
c00222e2:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00222e7:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00222ec:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00222f1:	6a 0a                	push   0xa
c00222f3:	56                   	push   esi
c00222f4:	55                   	push   ebp
c00222f5:	57                   	push   edi
c00222f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00222fa:	e8 51 ff ff ff       	call   c0022250 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00222ff:	6a 0a                	push   0xa
c0022301:	89 c3                	mov    ebx,eax
c0022303:	56                   	push   esi
c0022304:	0f b6 db             	movzx  ebx,bl
c0022307:	55                   	push   ebp
c0022308:	57                   	push   edi
c0022309:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002230d:	e8 3e ff ff ff       	call   c0022250 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022312:	83 c4 28             	add    esp,0x28
c0022315:	25 00 ff 00 00       	and    eax,0xff00
c002231a:	09 d8                	or     eax,ebx
c002231c:	5b                   	pop    ebx
c002231d:	5e                   	pop    esi
c002231e:	5f                   	pop    edi
c002231f:	5d                   	pop    ebp
c0022320:	c3                   	ret    
c0022321:	90                   	nop

c0022322 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022322:	6a 08                	push   0x8
c0022324:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022329:	50                   	push   eax
c002232a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002232f:	50                   	push   eax
c0022330:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022335:	50                   	push   eax
c0022336:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002233a:	e8 11 ff ff ff       	call   c0022250 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002233f:	83 c4 14             	add    esp,0x14
c0022342:	0f b6 c4             	movzx  eax,ah
c0022345:	c3                   	ret    

c0022346 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022346:	6a 08                	push   0x8
c0022348:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002234d:	50                   	push   eax
c002234e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022353:	50                   	push   eax
c0022354:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022359:	50                   	push   eax
c002235a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002235e:	e8 ed fe ff ff       	call   c0022250 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022363:	83 c4 14             	add    esp,0x14
c0022366:	c3                   	ret    
c0022367:	90                   	nop

c0022368 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022368:	6a 3c                	push   0x3c
c002236a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002236f:	50                   	push   eax
c0022370:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022375:	50                   	push   eax
c0022376:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002237b:	50                   	push   eax
c002237c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022380:	e8 cb fe ff ff       	call   c0022250 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022385:	83 c4 14             	add    esp,0x14
c0022388:	c3                   	ret    
c0022389:	90                   	nop

c002238a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002238a:	6a 18                	push   0x18
c002238c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022391:	50                   	push   eax
c0022392:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022397:	50                   	push   eax
c0022398:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002239d:	50                   	push   eax
c002239e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00223a2:	e8 a9 fe ff ff       	call   c0022250 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00223a7:	83 c4 14             	add    esp,0x14
c00223aa:	0f b6 c4             	movzx  eax,ah
c00223ad:	c3                   	ret    

c00223ae <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00223ae:	55                   	push   ebp
c00223af:	57                   	push   edi
c00223b0:	56                   	push   esi
c00223b1:	53                   	push   ebx
c00223b2:	50                   	push   eax
c00223b3:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00223b7:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00223bc:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00223c1:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00223c6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00223cd:	8d 43 12             	lea    eax,[ebx+0x12]
c00223d0:	83 c3 10             	add    ebx,0x10
c00223d3:	0f b6 c0             	movzx  eax,al
c00223d6:	0f b6 db             	movzx  ebx,bl
c00223d9:	50                   	push   eax
c00223da:	51                   	push   ecx
c00223db:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00223df:	57                   	push   edi
c00223e0:	55                   	push   ebp
c00223e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00223e5:	e8 66 fe ff ff       	call   c0022250 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00223ea:	53                   	push   ebx
c00223eb:	89 c6                	mov    esi,eax
c00223ed:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00223f1:	c1 e6 10             	shl    esi,0x10
c00223f4:	51                   	push   ecx
c00223f5:	57                   	push   edi
c00223f6:	55                   	push   ebp
c00223f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00223fb:	e8 50 fe ff ff       	call   c0022250 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022400:	83 c4 2c             	add    esp,0x2c
c0022403:	0f b7 c0             	movzx  eax,ax
c0022406:	5b                   	pop    ebx
c0022407:	09 f0                	or     eax,esi
c0022409:	5e                   	pop    esi
c002240a:	5f                   	pop    edi
c002240b:	5d                   	pop    ebp
c002240c:	c3                   	ret    
c002240d:	90                   	nop

c002240e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002240e:	53                   	push   ebx
c002240f:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022414:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022419:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002241d:	c1 e1 10             	shl    ecx,0x10
c0022420:	25 fc 00 00 00       	and    eax,0xfc
c0022425:	09 c1                	or     ecx,eax
c0022427:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002242c:	c1 e0 08             	shl    eax,0x8
c002242f:	09 c1                	or     ecx,eax
c0022431:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022436:	c1 e0 0b             	shl    eax,0xb
c0022439:	09 c1                	or     ecx,eax
c002243b:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022441:	89 c8                	mov    eax,ecx
c0022443:	ef                   	out    dx,eax
c0022444:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022449:	ed                   	in     eax,dx
c002244a:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c002244f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022454:	74 0a                	je     c0022460 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022456:	0f b7 d8             	movzx  ebx,ax
c0022459:	89 d0                	mov    eax,edx
c002245b:	c1 e0 10             	shl    eax,0x10
c002245e:	eb 05                	jmp    c0022465 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022460:	66 31 c0             	xor    ax,ax
c0022463:	89 d3                	mov    ebx,edx
c0022465:	09 c3                	or     ebx,eax
c0022467:	ba f8 0c 00 00       	mov    edx,0xcf8
c002246c:	89 c8                	mov    eax,ecx
c002246e:	ef                   	out    dx,eax
c002246f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022474:	89 d8                	mov    eax,ebx
c0022476:	ef                   	out    dx,eax
c0022477:	5b                   	pop    ebx
c0022478:	c3                   	ret    
c0022479:	90                   	nop

c002247a <PCI::checkBus(unsigned char)>:
c002247a:	56                   	push   esi
c002247b:	53                   	push   ebx
c002247c:	31 db                	xor    ebx,ebx
c002247e:	51                   	push   ecx
c002247f:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022484:	52                   	push   edx
c0022485:	53                   	push   ebx
c0022486:	43                   	inc    ebx
c0022487:	56                   	push   esi
c0022488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002248c:	e8 2b 03 00 00       	call   c00227bc <PCI::checkDevice(unsigned char, unsigned char)>
c0022491:	83 c4 10             	add    esp,0x10
c0022494:	83 fb 20             	cmp    ebx,0x20
c0022497:	75 eb                	jne    c0022484 <PCI::checkBus(unsigned char)+0xa>
c0022499:	58                   	pop    eax
c002249a:	5b                   	pop    ebx
c002249b:	5e                   	pop    esi
c002249c:	c3                   	ret    
c002249d:	90                   	nop

c002249e <PCI::foundDevice(PCIDeviceInfo)>:
c002249e:	55                   	push   ebp
c002249f:	57                   	push   edi
c00224a0:	56                   	push   esi
c00224a1:	53                   	push   ebx
c00224a2:	83 ec 1c             	sub    esp,0x1c
c00224a5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00224a9:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00224af:	0f 84 52 01 00 00    	je     c0022607 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00224b5:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00224b9:	66 81 f9 06 04       	cmp    cx,0x406
c00224be:	75 2c                	jne    c00224ec <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00224c0:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00224c5:	50                   	push   eax
c00224c6:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00224cb:	50                   	push   eax
c00224cc:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00224d1:	50                   	push   eax
c00224d2:	56                   	push   esi
c00224d3:	e8 b2 fe ff ff       	call   c002238a <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00224d8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00224dc:	0f b6 c0             	movzx  eax,al
c00224df:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00224e3:	83 c4 2c             	add    esp,0x2c
c00224e6:	5b                   	pop    ebx
c00224e7:	5e                   	pop    esi
c00224e8:	5f                   	pop    edi
c00224e9:	5d                   	pop    ebp
c00224ea:	eb 8e                	jmp    c002247a <PCI::checkBus(unsigned char)>
c00224ec:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00224f0:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00224f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00224fa:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00224fe:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022502:	88 d3                	mov    bl,dl
c0022504:	85 c0                	test   eax,eax
c0022506:	74 33                	je     c002253b <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022508:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002250b:	85 d2                	test   edx,edx
c002250d:	74 28                	je     c0022537 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002250f:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022515:	31 ef                	xor    edi,ebp
c0022517:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c002251d:	75 18                	jne    c0022537 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002251f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022523:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022529:	75 0c                	jne    c0022537 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002252b:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022531:	0f 84 d0 00 00 00    	je     c0022607 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022537:	8b 00                	mov    eax,DWORD PTR [eax]
c0022539:	eb c9                	jmp    c0022504 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c002253b:	66 81 f9 01 06       	cmp    cx,0x601
c0022540:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022544:	75 19                	jne    c002255f <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022546:	83 ec 0c             	sub    esp,0xc
c0022549:	68 64 01 00 00       	push   0x164
c002254e:	e8 f3 d2 fe ff       	call   c000f846 <malloc>
c0022553:	89 c5                	mov    ebp,eax
c0022555:	89 04 24             	mov    DWORD PTR [esp],eax
c0022558:	e8 95 0f 00 00       	call   c00234f2 <SATABus::SATABus()>
c002255d:	eb 1e                	jmp    c002257d <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c002255f:	66 81 f9 01 01       	cmp    cx,0x101
c0022564:	75 60                	jne    c00225c6 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022566:	83 ec 0c             	sub    esp,0xc
c0022569:	68 70 02 00 00       	push   0x270
c002256e:	e8 d3 d2 fe ff       	call   c000f846 <malloc>
c0022573:	89 c5                	mov    ebp,eax
c0022575:	89 04 24             	mov    DWORD PTR [esp],eax
c0022578:	e8 03 03 00 00       	call   c0022880 <IDE::IDE()>
c002257d:	58                   	pop    eax
c002257e:	5a                   	pop    edx
c002257f:	55                   	push   ebp
c0022580:	56                   	push   esi
c0022581:	e8 b6 19 ff ff       	call   c0013f3c <Device::addChild(Device*)>
c0022586:	83 ec 1c             	sub    esp,0x1c
c0022589:	b9 09 00 00 00       	mov    ecx,0x9
c002258e:	fc                   	cld    
c002258f:	89 e7                	mov    edi,esp
c0022591:	89 de                	mov    esi,ebx
c0022593:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022595:	55                   	push   ebp
c0022596:	e8 ab 18 ff ff       	call   c0013e46 <Device::preOpenPCI(PCIDeviceInfo)>
c002259b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002259e:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00225a2:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00225aa:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00225b2:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00225ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00225bd:	83 c4 4c             	add    esp,0x4c
c00225c0:	5b                   	pop    ebx
c00225c1:	5e                   	pop    esi
c00225c2:	5f                   	pop    edi
c00225c3:	5d                   	pop    ebp
c00225c4:	ff e0                	jmp    eax
c00225c6:	83 ec 0c             	sub    esp,0xc
c00225c9:	68 58 01 00 00       	push   0x158
c00225ce:	e8 73 d2 fe ff       	call   c000f846 <malloc>
c00225d3:	89 c5                	mov    ebp,eax
c00225d5:	58                   	pop    eax
c00225d6:	5a                   	pop    edx
c00225d7:	68 74 c1 02 c0       	push   0xc002c174
c00225dc:	55                   	push   ebp
c00225dd:	e8 50 1c ff ff       	call   c0014232 <DriverlessDevice::DriverlessDevice(char const*)>
c00225e2:	59                   	pop    ecx
c00225e3:	5f                   	pop    edi
c00225e4:	55                   	push   ebp
c00225e5:	56                   	push   esi
c00225e6:	e8 51 19 ff ff       	call   c0013f3c <Device::addChild(Device*)>
c00225eb:	b9 09 00 00 00       	mov    ecx,0x9
c00225f0:	fc                   	cld    
c00225f1:	89 df                	mov    edi,ebx
c00225f3:	89 de                	mov    esi,ebx
c00225f5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00225f7:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00225fb:	83 c4 2c             	add    esp,0x2c
c00225fe:	5b                   	pop    ebx
c00225ff:	5e                   	pop    esi
c0022600:	5f                   	pop    edi
c0022601:	5d                   	pop    ebp
c0022602:	e9 3f 18 ff ff       	jmp    c0013e46 <Device::preOpenPCI(PCIDeviceInfo)>
c0022607:	83 c4 1c             	add    esp,0x1c
c002260a:	5b                   	pop    ebx
c002260b:	5e                   	pop    esi
c002260c:	5f                   	pop    edi
c002260d:	5d                   	pop    ebp
c002260e:	c3                   	ret    
c002260f:	90                   	nop

c0022610 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022610:	55                   	push   ebp
c0022611:	57                   	push   edi
c0022612:	56                   	push   esi
c0022613:	53                   	push   ebx
c0022614:	83 ec 5c             	sub    esp,0x5c
c0022617:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c002261b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002261f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022623:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022628:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002262c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022630:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022635:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022639:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c002263e:	6a 0c                	push   0xc
c0022640:	55                   	push   ebp
c0022641:	53                   	push   ebx
c0022642:	57                   	push   edi
c0022643:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c002264a:	e8 01 fc ff ff       	call   c0022250 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002264f:	55                   	push   ebp
c0022650:	53                   	push   ebx
c0022651:	57                   	push   edi
c0022652:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022659:	e8 80 fc ff ff       	call   c00222de <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002265e:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022663:	83 c4 24             	add    esp,0x24
c0022666:	55                   	push   ebp
c0022667:	53                   	push   ebx
c0022668:	57                   	push   edi
c0022669:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c002266d:	e8 f6 fc ff ff       	call   c0022368 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022672:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022676:	6a 3c                	push   0x3c
c0022678:	55                   	push   ebp
c0022679:	53                   	push   ebx
c002267a:	57                   	push   edi
c002267b:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022682:	e8 c9 fb ff ff       	call   c0022250 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022687:	0f b6 c4             	movzx  eax,ah
c002268a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002268e:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022692:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022696:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c002269b:	83 c4 24             	add    esp,0x24
c002269e:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00226a4:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c00226ab:	74 6c                	je     c0022719 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00226ad:	31 f6                	xor    esi,esi
c00226af:	8b 15 88 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db88
c00226b5:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00226bb:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c00226c1:	7e 56                	jle    c0022719 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00226c3:	8d 14 f2             	lea    edx,[edx+esi*8]
c00226c6:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00226cd:	39 cb                	cmp    ebx,ecx
c00226cf:	75 45                	jne    c0022716 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00226d1:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00226d8:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00226dc:	75 38                	jne    c0022716 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00226de:	83 ec 0c             	sub    esp,0xc
c00226e1:	68 8e c1 02 c0       	push   0xc002c18e
c00226e6:	e8 2a 04 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00226eb:	8b 15 88 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db88
c00226f1:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00226f7:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c00226ff:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022703:	52                   	push   edx
c0022704:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022708:	53                   	push   ebx
c0022709:	68 b3 c1 02 c0       	push   0xc002c1b3
c002270e:	e8 02 04 ff ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0022713:	83 c4 20             	add    esp,0x20
c0022716:	46                   	inc    esi
c0022717:	eb 96                	jmp    c00226af <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022719:	31 d2                	xor    edx,edx
c002271b:	83 ec 0c             	sub    esp,0xc
c002271e:	55                   	push   ebp
c002271f:	53                   	push   ebx
c0022720:	57                   	push   edi
c0022721:	52                   	push   edx
c0022722:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022726:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c002272d:	e8 7c fc ff ff       	call   c00223ae <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022732:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022736:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002273a:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002273e:	42                   	inc    edx
c002273f:	83 c4 20             	add    esp,0x20
c0022742:	83 fa 06             	cmp    edx,0x6
c0022745:	75 d4                	jne    c002271b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022747:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002274b:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c002274f:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022753:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022757:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002275b:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c002275f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022764:	86 e0                	xchg   al,ah
c0022766:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c002276b:	55                   	push   ebp
c002276c:	53                   	push   ebx
c002276d:	57                   	push   edi
c002276e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022772:	e8 ab fb ff ff       	call   c0022322 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022777:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002277b:	55                   	push   ebp
c002277c:	53                   	push   ebx
c002277d:	57                   	push   edi
c002277e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022785:	e8 0e fb ff ff       	call   c0022298 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002278a:	83 ec 0c             	sub    esp,0xc
c002278d:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022792:	b9 09 00 00 00       	mov    ecx,0x9
c0022797:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c002279b:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c002279f:	fc                   	cld    
c00227a0:	89 e7                	mov    edi,esp
c00227a2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00227a4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00227ab:	e8 ee fc ff ff       	call   c002249e <PCI::foundDevice(PCIDeviceInfo)>
c00227b0:	81 c4 8c 00 00 00    	add    esp,0x8c
c00227b6:	5b                   	pop    ebx
c00227b7:	5e                   	pop    esi
c00227b8:	5f                   	pop    edi
c00227b9:	5d                   	pop    ebp
c00227ba:	c3                   	ret    
c00227bb:	90                   	nop

c00227bc <PCI::checkDevice(unsigned char, unsigned char)>:
c00227bc:	55                   	push   ebp
c00227bd:	57                   	push   edi
c00227be:	56                   	push   esi
c00227bf:	53                   	push   ebx
c00227c0:	83 ec 0c             	sub    esp,0xc
c00227c3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00227c7:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00227cc:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00227d1:	6a 00                	push   0x0
c00227d3:	56                   	push   esi
c00227d4:	57                   	push   edi
c00227d5:	55                   	push   ebp
c00227d6:	e8 bd fa ff ff       	call   c0022298 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00227db:	6a 00                	push   0x0
c00227dd:	56                   	push   esi
c00227de:	57                   	push   edi
c00227df:	55                   	push   ebp
c00227e0:	e8 2b fe ff ff       	call   c0022610 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00227e5:	83 c4 20             	add    esp,0x20
c00227e8:	6a 00                	push   0x0
c00227ea:	56                   	push   esi
c00227eb:	57                   	push   edi
c00227ec:	55                   	push   ebp
c00227ed:	e8 c8 fa ff ff       	call   c00222ba <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00227f2:	83 c4 10             	add    esp,0x10
c00227f5:	84 c0                	test   al,al
c00227f7:	79 27                	jns    c0022820 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00227f9:	bb 01 00 00 00       	mov    ebx,0x1
c00227fe:	53                   	push   ebx
c00227ff:	56                   	push   esi
c0022800:	57                   	push   edi
c0022801:	55                   	push   ebp
c0022802:	e8 91 fa ff ff       	call   c0022298 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022807:	83 c4 10             	add    esp,0x10
c002280a:	66 40                	inc    ax
c002280c:	74 0c                	je     c002281a <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c002280e:	53                   	push   ebx
c002280f:	56                   	push   esi
c0022810:	57                   	push   edi
c0022811:	55                   	push   ebp
c0022812:	e8 f9 fd ff ff       	call   c0022610 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022817:	83 c4 10             	add    esp,0x10
c002281a:	43                   	inc    ebx
c002281b:	83 fb 08             	cmp    ebx,0x8
c002281e:	75 de                	jne    c00227fe <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022820:	83 c4 0c             	add    esp,0xc
c0022823:	5b                   	pop    ebx
c0022824:	5e                   	pop    esi
c0022825:	5f                   	pop    edi
c0022826:	5d                   	pop    ebp
c0022827:	c3                   	ret    

c0022828 <PCI::detect()>:
c0022828:	56                   	push   esi
c0022829:	53                   	push   ebx
c002282a:	53                   	push   ebx
c002282b:	31 db                	xor    ebx,ebx
c002282d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022831:	6a 00                	push   0x0
c0022833:	6a 00                	push   0x0
c0022835:	6a 00                	push   0x0
c0022837:	56                   	push   esi
c0022838:	e8 7d fa ff ff       	call   c00222ba <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002283d:	83 c4 10             	add    esp,0x10
c0022840:	a8 80                	test   al,0x80
c0022842:	75 21                	jne    c0022865 <PCI::detect()+0x3d>
c0022844:	51                   	push   ecx
c0022845:	51                   	push   ecx
c0022846:	6a 00                	push   0x0
c0022848:	56                   	push   esi
c0022849:	e8 2c fc ff ff       	call   c002247a <PCI::checkBus(unsigned char)>
c002284e:	83 c4 10             	add    esp,0x10
c0022851:	eb 24                	jmp    c0022877 <PCI::detect()+0x4f>
c0022853:	52                   	push   edx
c0022854:	52                   	push   edx
c0022855:	53                   	push   ebx
c0022856:	43                   	inc    ebx
c0022857:	56                   	push   esi
c0022858:	e8 1d fc ff ff       	call   c002247a <PCI::checkBus(unsigned char)>
c002285d:	83 c4 10             	add    esp,0x10
c0022860:	83 fb 08             	cmp    ebx,0x8
c0022863:	74 12                	je     c0022877 <PCI::detect()+0x4f>
c0022865:	53                   	push   ebx
c0022866:	6a 00                	push   0x0
c0022868:	6a 00                	push   0x0
c002286a:	56                   	push   esi
c002286b:	e8 28 fa ff ff       	call   c0022298 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022870:	83 c4 10             	add    esp,0x10
c0022873:	66 40                	inc    ax
c0022875:	74 dc                	je     c0022853 <PCI::detect()+0x2b>
c0022877:	58                   	pop    eax
c0022878:	5b                   	pop    ebx
c0022879:	5e                   	pop    esi
c002287a:	c3                   	ret    
c002287b:	90                   	nop

c002287c <IDE::close(int, int, void*)>:
c002287c:	83 c8 ff             	or     eax,0xffffffff
c002287f:	c3                   	ret    

c0022880 <IDE::IDE()>:
c0022880:	83 ec 0c             	sub    esp,0xc
c0022883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022887:	83 ec 08             	sub    esp,0x8
c002288a:	68 fc c1 02 c0       	push   0xc002c1fc
c002288f:	50                   	push   eax
c0022890:	e8 33 1a ff ff       	call   c00142c8 <HardDiskController::HardDiskController(char const*)>
c0022895:	83 c4 10             	add    esp,0x10
c0022898:	ba 3c c4 02 c0       	mov    edx,0xc002c43c
c002289d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228a1:	89 10                	mov    DWORD PTR [eax],edx
c00228a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228a7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00228ae:	90                   	nop
c00228af:	83 c4 0c             	add    esp,0xc
c00228b2:	c3                   	ret    
c00228b3:	90                   	nop

c00228b4 <IDE::prepareInterrupt(unsigned char)>:
c00228b4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00228b9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00228bd:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00228c5:	c3                   	ret    

c00228c6 <selectDrive(unsigned char, unsigned char)>:
c00228c6:	c3                   	ret    
c00228c7:	90                   	nop

c00228c8 <IDE::getBase(unsigned char)>:
c00228c8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00228cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228d1:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00228d9:	c3                   	ret    

c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00228da:	55                   	push   ebp
c00228db:	57                   	push   edi
c00228dc:	56                   	push   esi
c00228dd:	53                   	push   ebx
c00228de:	83 ec 1c             	sub    esp,0x1c
c00228e1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00228e5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00228e9:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00228ec:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00228f0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00228f4:	80 f9 03             	cmp    cl,0x3
c00228f7:	77 51                	ja     c002294a <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00228f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00228fd:	0f b6 f2             	movzx  esi,dl
c0022900:	0f b6 db             	movzx  ebx,bl
c0022903:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022906:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c002290a:	83 ca 80             	or     edx,0xffffff80
c002290d:	0f b6 d2             	movzx  edx,dl
c0022910:	52                   	push   edx
c0022911:	6a 0c                	push   0xc
c0022913:	56                   	push   esi
c0022914:	57                   	push   edi
c0022915:	e8 c0 ff ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c002291a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002291f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022923:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022927:	ee                   	out    dx,al
c0022928:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002292d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022931:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022935:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022939:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022941:	83 c4 2c             	add    esp,0x2c
c0022944:	5b                   	pop    ebx
c0022945:	5e                   	pop    esi
c0022946:	5f                   	pop    edi
c0022947:	5d                   	pop    ebp
c0022948:	eb 90                	jmp    c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c002294a:	80 fb 07             	cmp    bl,0x7
c002294d:	77 12                	ja     c0022961 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002294f:	0f b6 d2             	movzx  edx,dl
c0022952:	0f b6 db             	movzx  ebx,bl
c0022955:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c002295d:	89 da                	mov    edx,ebx
c002295f:	eb 2f                	jmp    c0022990 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022961:	80 fb 0d             	cmp    bl,0xd
c0022964:	77 13                	ja     c0022979 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022966:	0f b6 d2             	movzx  edx,dl
c0022969:	0f b6 db             	movzx  ebx,bl
c002296c:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022973:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022977:	eb 17                	jmp    c0022990 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022979:	80 fb 15             	cmp    bl,0x15
c002297c:	77 13                	ja     c0022991 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002297e:	0f b6 d2             	movzx  edx,dl
c0022981:	0f b6 db             	movzx  ebx,bl
c0022984:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002298c:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022990:	ee                   	out    dx,al
c0022991:	83 c4 1c             	add    esp,0x1c
c0022994:	5b                   	pop    ebx
c0022995:	5e                   	pop    esi
c0022996:	5f                   	pop    edi
c0022997:	5d                   	pop    ebp
c0022998:	c3                   	ret    
c0022999:	90                   	nop

c002299a <IDE::read(unsigned char, unsigned char)>:
c002299a:	55                   	push   ebp
c002299b:	57                   	push   edi
c002299c:	56                   	push   esi
c002299d:	53                   	push   ebx
c002299e:	83 ec 1c             	sub    esp,0x1c
c00229a1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00229a5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00229a9:	8d 43 f8             	lea    eax,[ebx-0x8]
c00229ac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00229b0:	3c 03                	cmp    al,0x3
c00229b2:	77 43                	ja     c00229f7 <IDE::read(unsigned char, unsigned char)+0x5d>
c00229b4:	0f b6 f2             	movzx  esi,dl
c00229b7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00229ba:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00229be:	83 c8 80             	or     eax,0xffffff80
c00229c1:	0f b6 c0             	movzx  eax,al
c00229c4:	50                   	push   eax
c00229c5:	6a 0c                	push   0xc
c00229c7:	56                   	push   esi
c00229c8:	57                   	push   edi
c00229c9:	e8 0c ff ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c00229ce:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00229d3:	0f b6 c3             	movzx  eax,bl
c00229d6:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00229da:	ec                   	in     al,dx
c00229db:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00229df:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00229e4:	52                   	push   edx
c00229e5:	6a 0c                	push   0xc
c00229e7:	56                   	push   esi
c00229e8:	57                   	push   edi
c00229e9:	e8 ec fe ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c00229ee:	83 c4 20             	add    esp,0x20
c00229f1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00229f5:	eb 49                	jmp    c0022a40 <IDE::read(unsigned char, unsigned char)+0xa6>
c00229f7:	80 fb 07             	cmp    bl,0x7
c00229fa:	77 12                	ja     c0022a0e <IDE::read(unsigned char, unsigned char)+0x74>
c00229fc:	0f b6 d2             	movzx  edx,dl
c00229ff:	0f b6 c3             	movzx  eax,bl
c0022a02:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022a0a:	89 c2                	mov    edx,eax
c0022a0c:	eb 31                	jmp    c0022a3f <IDE::read(unsigned char, unsigned char)+0xa5>
c0022a0e:	80 fb 0d             	cmp    bl,0xd
c0022a11:	77 13                	ja     c0022a26 <IDE::read(unsigned char, unsigned char)+0x8c>
c0022a13:	0f b6 d2             	movzx  edx,dl
c0022a16:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022a1d:	0f b6 d3             	movzx  edx,bl
c0022a20:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022a24:	eb 19                	jmp    c0022a3f <IDE::read(unsigned char, unsigned char)+0xa5>
c0022a26:	31 c0                	xor    eax,eax
c0022a28:	80 fb 15             	cmp    bl,0x15
c0022a2b:	77 13                	ja     c0022a40 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022a2d:	0f b6 d2             	movzx  edx,dl
c0022a30:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0022a38:	0f b6 d3             	movzx  edx,bl
c0022a3b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0022a3f:	ec                   	in     al,dx
c0022a40:	83 c4 1c             	add    esp,0x1c
c0022a43:	5b                   	pop    ebx
c0022a44:	5e                   	pop    esi
c0022a45:	5f                   	pop    edi
c0022a46:	5d                   	pop    ebp
c0022a47:	c3                   	ret    

c0022a48 <IDE::waitInterrupt(unsigned char)>:
c0022a48:	55                   	push   ebp
c0022a49:	57                   	push   edi
c0022a4a:	56                   	push   esi
c0022a4b:	53                   	push   ebx
c0022a4c:	31 db                	xor    ebx,ebx
c0022a4e:	83 ec 0c             	sub    esp,0xc
c0022a51:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022a55:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022a5a:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0022a62:	89 e8                	mov    eax,ebp
c0022a64:	84 c0                	test   al,al
c0022a66:	75 34                	jne    c0022a9c <IDE::waitInterrupt(unsigned char)+0x54>
c0022a68:	52                   	push   edx
c0022a69:	6a 0c                	push   0xc
c0022a6b:	56                   	push   esi
c0022a6c:	57                   	push   edi
c0022a6d:	e8 28 ff ff ff       	call   c002299a <IDE::read(unsigned char, unsigned char)>
c0022a72:	83 c4 10             	add    esp,0x10
c0022a75:	a8 01                	test   al,0x1
c0022a77:	75 2b                	jne    c0022aa4 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022a79:	f6 c3 04             	test   bl,0x4
c0022a7c:	75 16                	jne    c0022a94 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022a7e:	83 fb 32             	cmp    ebx,0x32
c0022a81:	7e 11                	jle    c0022a94 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022a83:	50                   	push   eax
c0022a84:	50                   	push   eax
c0022a85:	6a 00                	push   0x0
c0022a87:	68 80 96 98 00       	push   0x989680
c0022a8c:	e8 8b b1 ff ff       	call   c001dc1c <nanoSleep(unsigned long long)>
c0022a91:	83 c4 10             	add    esp,0x10
c0022a94:	83 fb 3c             	cmp    ebx,0x3c
c0022a97:	74 0b                	je     c0022aa4 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022a99:	43                   	inc    ebx
c0022a9a:	eb be                	jmp    c0022a5a <IDE::waitInterrupt(unsigned char)+0x12>
c0022a9c:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022aa4:	83 c4 0c             	add    esp,0xc
c0022aa7:	89 e8                	mov    eax,ebp
c0022aa9:	5b                   	pop    ebx
c0022aaa:	5e                   	pop    esi
c0022aab:	5f                   	pop    edi
c0022aac:	5d                   	pop    ebp
c0022aad:	c3                   	ret    

c0022aae <ideChannel0IRQHandler(regs*, void*)>:
c0022aae:	83 ec 10             	sub    esp,0x10
c0022ab1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022ab5:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0022abc:	6a 07                	push   0x7
c0022abe:	6a 00                	push   0x0
c0022ac0:	50                   	push   eax
c0022ac1:	e8 d4 fe ff ff       	call   c002299a <IDE::read(unsigned char, unsigned char)>
c0022ac6:	83 c4 1c             	add    esp,0x1c
c0022ac9:	c3                   	ret    

c0022aca <ideChannel1IRQHandler(regs*, void*)>:
c0022aca:	83 ec 10             	sub    esp,0x10
c0022acd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022ad1:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0022ad8:	6a 07                	push   0x7
c0022ada:	6a 01                	push   0x1
c0022adc:	50                   	push   eax
c0022add:	e8 b8 fe ff ff       	call   c002299a <IDE::read(unsigned char, unsigned char)>
c0022ae2:	83 c4 1c             	add    esp,0x1c
c0022ae5:	c3                   	ret    

c0022ae6 <IDE::enableIRQs(unsigned char, bool)>:
c0022ae6:	57                   	push   edi
c0022ae7:	56                   	push   esi
c0022ae8:	be 04 00 00 00       	mov    esi,0x4
c0022aed:	53                   	push   ebx
c0022aee:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0022af3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022af7:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0022afc:	0f 94 c0             	sete   al
c0022aff:	d1 e0                	shl    eax,1
c0022b01:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0022b08:	0f b6 c0             	movzx  eax,al
c0022b0b:	50                   	push   eax
c0022b0c:	6a 0c                	push   0xc
c0022b0e:	57                   	push   edi
c0022b0f:	53                   	push   ebx
c0022b10:	e8 c5 fd ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022b15:	83 c4 10             	add    esp,0x10
c0022b18:	50                   	push   eax
c0022b19:	6a 0c                	push   0xc
c0022b1b:	57                   	push   edi
c0022b1c:	53                   	push   ebx
c0022b1d:	e8 78 fe ff ff       	call   c002299a <IDE::read(unsigned char, unsigned char)>
c0022b22:	83 c4 10             	add    esp,0x10
c0022b25:	4e                   	dec    esi
c0022b26:	75 f0                	jne    c0022b18 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0022b28:	5b                   	pop    ebx
c0022b29:	5e                   	pop    esi
c0022b2a:	5f                   	pop    edi
c0022b2b:	c3                   	ret    

c0022b2c <IDE::open(int, int, void*)>:
c0022b2c:	55                   	push   ebp
c0022b2d:	57                   	push   edi
c0022b2e:	56                   	push   esi
c0022b2f:	53                   	push   ebx
c0022b30:	83 ec 1c             	sub    esp,0x1c
c0022b33:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022b37:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0022b40:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0022b49:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0022b50:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0022b57:	0f 85 b0 02 00 00    	jne    c0022e0d <IDE::open(int, int, void*)+0x2e1>
c0022b5d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0022b63:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0022b67:	83 e0 7f             	and    eax,0x7f
c0022b6a:	3c 05                	cmp    al,0x5
c0022b6c:	74 04                	je     c0022b72 <IDE::open(int, int, void*)+0x46>
c0022b6e:	3c 0f                	cmp    al,0xf
c0022b70:	75 32                	jne    c0022ba4 <IDE::open(int, int, void*)+0x78>
c0022b72:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0022b78:	83 e0 fc             	and    eax,0xfffffffc
c0022b7b:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0022b82:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0022b88:	83 e0 fc             	and    eax,0xfffffffc
c0022b8b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0022b92:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0022b98:	83 e0 fc             	and    eax,0xfffffffc
c0022b9b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022ba2:	eb 14                	jmp    c0022bb8 <IDE::open(int, int, void*)+0x8c>
c0022ba4:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022bae:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022bb8:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0022bbf:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0022bc6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022bca:	89 c6                	mov    esi,eax
c0022bcc:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022bd1:	c1 e6 10             	shl    esi,0x10
c0022bd4:	89 e8                	mov    eax,ebp
c0022bd6:	89 fa                	mov    edx,edi
c0022bd8:	c1 e0 0b             	shl    eax,0xb
c0022bdb:	09 f0                	or     eax,esi
c0022bdd:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0022be4:	c1 e6 08             	shl    esi,0x8
c0022be7:	09 c6                	or     esi,eax
c0022be9:	89 f0                	mov    eax,esi
c0022beb:	0d 08 00 00 80       	or     eax,0x80000008
c0022bf0:	ef                   	out    dx,eax
c0022bf1:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0022bf6:	89 ca                	mov    edx,ecx
c0022bf8:	ed                   	in     eax,dx
c0022bf9:	c1 e8 10             	shr    eax,0x10
c0022bfc:	3d ff ff 00 00       	cmp    eax,0xffff
c0022c01:	0f 84 f5 00 00 00    	je     c0022cfc <IDE::open(int, int, void*)+0x1d0>
c0022c07:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0022c0d:	89 fa                	mov    edx,edi
c0022c0f:	89 f0                	mov    eax,esi
c0022c11:	ef                   	out    dx,eax
c0022c12:	b0 fe                	mov    al,0xfe
c0022c14:	89 ca                	mov    edx,ecx
c0022c16:	ee                   	out    dx,al
c0022c17:	89 f0                	mov    eax,esi
c0022c19:	89 fa                	mov    edx,edi
c0022c1b:	ef                   	out    dx,eax
c0022c1c:	89 ca                	mov    edx,ecx
c0022c1e:	ed                   	in     eax,dx
c0022c1f:	3c fe                	cmp    al,0xfe
c0022c21:	0f 85 a9 00 00 00    	jne    c0022cd0 <IDE::open(int, int, void*)+0x1a4>
c0022c27:	8b 15 88 db 02 c0    	mov    edx,DWORD PTR ds:0xc002db88
c0022c2d:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0022c34:	74 33                	je     c0022c69 <IDE::open(int, int, void*)+0x13d>
c0022c36:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0022c3c:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0022c40:	40                   	inc    eax
c0022c41:	83 ec 0c             	sub    esp,0xc
c0022c44:	0f b6 c0             	movzx  eax,al
c0022c47:	50                   	push   eax
c0022c48:	55                   	push   ebp
c0022c49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022c4d:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0022c53:	51                   	push   ecx
c0022c54:	e8 63 51 ff ff       	call   c0017dbc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0022c59:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0022c5e:	83 c4 1c             	add    esp,0x1c
c0022c61:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022c67:	eb 0a                	jmp    c0022c73 <IDE::open(int, int, void*)+0x147>
c0022c69:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0022c73:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0022c7a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0022c81:	c1 e1 10             	shl    ecx,0x10
c0022c84:	c1 e0 08             	shl    eax,0x8
c0022c87:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022c8c:	09 c1                	or     ecx,eax
c0022c8e:	89 fa                	mov    edx,edi
c0022c90:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0022c97:	c1 e0 0b             	shl    eax,0xb
c0022c9a:	09 c1                	or     ecx,eax
c0022c9c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0022ca2:	89 c8                	mov    eax,ecx
c0022ca4:	ef                   	out    dx,eax
c0022ca5:	be fc 0c 00 00       	mov    esi,0xcfc
c0022caa:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0022cb0:	89 f2                	mov    edx,esi
c0022cb2:	ee                   	out    dx,al
c0022cb3:	89 c8                	mov    eax,ecx
c0022cb5:	89 fa                	mov    edx,edi
c0022cb7:	ef                   	out    dx,eax
c0022cb8:	89 f2                	mov    edx,esi
c0022cba:	ed                   	in     eax,dx
c0022cbb:	0f b6 c0             	movzx  eax,al
c0022cbe:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0022cc4:	74 46                	je     c0022d0c <IDE::open(int, int, void*)+0x1e0>
c0022cc6:	83 ec 0c             	sub    esp,0xc
c0022cc9:	68 14 c2 02 c0       	push   0xc002c214
c0022cce:	eb 34                	jmp    c0022d04 <IDE::open(int, int, void*)+0x1d8>
c0022cd0:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0022cd9:	75 17                	jne    c0022cf2 <IDE::open(int, int, void*)+0x1c6>
c0022cdb:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0022ce0:	74 07                	je     c0022ce9 <IDE::open(int, int, void*)+0x1bd>
c0022ce2:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0022ce7:	75 09                	jne    c0022cf2 <IDE::open(int, int, void*)+0x1c6>
c0022ce9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022cf0:	eb 1a                	jmp    c0022d0c <IDE::open(int, int, void*)+0x1e0>
c0022cf2:	83 ec 0c             	sub    esp,0xc
c0022cf5:	68 1c c2 02 c0       	push   0xc002c21c
c0022cfa:	eb 08                	jmp    c0022d04 <IDE::open(int, int, void*)+0x1d8>
c0022cfc:	83 ec 0c             	sub    esp,0xc
c0022cff:	68 4d c2 02 c0       	push   0xc002c24d
c0022d04:	e8 34 73 ff ff       	call   c001a03d <Krnl::panic(char const*)>
c0022d09:	83 c4 10             	add    esp,0x10
c0022d0c:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0022d13:	79 1a                	jns    c0022d2f <IDE::open(int, int, void*)+0x203>
c0022d15:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0022d1b:	83 e0 fc             	and    eax,0xfffffffc
c0022d1e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0022d25:	83 c0 08             	add    eax,0x8
c0022d28:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0022d2f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0022d35:	89 c2                	mov    edx,eax
c0022d37:	83 e2 0f             	and    edx,0xf
c0022d3a:	66 83 fa 08          	cmp    dx,0x8
c0022d3e:	75 0a                	jne    c0022d4a <IDE::open(int, int, void*)+0x21e>
c0022d40:	83 e8 02             	sub    eax,0x2
c0022d43:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022d4a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0022d50:	89 c2                	mov    edx,eax
c0022d52:	83 e2 0f             	and    edx,0xf
c0022d55:	66 83 fa 08          	cmp    dx,0x8
c0022d59:	75 0a                	jne    c0022d65 <IDE::open(int, int, void*)+0x239>
c0022d5b:	83 e8 02             	sub    eax,0x2
c0022d5e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0022d65:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0022d6c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0022d73:	89 d0                	mov    eax,edx
c0022d75:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022d78:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022d7c:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0022d80:	8d 4a 01             	lea    ecx,[edx+0x1]
c0022d83:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022d88:	0f b6 c9             	movzx  ecx,cl
c0022d8b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0022d92:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022d95:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022d99:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0022d9d:	8d 50 02             	lea    edx,[eax+0x2]
c0022da0:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022da5:	0f b6 d2             	movzx  edx,dl
c0022da8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0022dae:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022db1:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022db5:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0022db9:	8d 48 03             	lea    ecx,[eax+0x3]
c0022dbc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022dc1:	0f b6 c9             	movzx  ecx,cl
c0022dc4:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0022dca:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022dcd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022dd1:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0022dd5:	8d 50 04             	lea    edx,[eax+0x4]
c0022dd8:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0022dde:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022de3:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0022dea:	66 85 f6             	test   si,si
c0022ded:	74 3e                	je     c0022e2d <IDE::open(int, int, void*)+0x301>
c0022def:	0f b6 d2             	movzx  edx,dl
c0022df2:	83 c0 05             	add    eax,0x5
c0022df5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022df8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022dfc:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0022e00:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0022e06:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022e0b:	eb 20                	jmp    c0022e2d <IDE::open(int, int, void*)+0x301>
c0022e0d:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022e17:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022e21:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022e28:	e9 02 ff ff ff       	jmp    c0022d2f <IDE::open(int, int, void*)+0x203>
c0022e2d:	52                   	push   edx
c0022e2e:	52                   	push   edx
c0022e2f:	6a 00                	push   0x0
c0022e31:	53                   	push   ebx
c0022e32:	e8 7d fa ff ff       	call   c00228b4 <IDE::prepareInterrupt(unsigned char)>
c0022e37:	59                   	pop    ecx
c0022e38:	5e                   	pop    esi
c0022e39:	6a 01                	push   0x1
c0022e3b:	53                   	push   ebx
c0022e3c:	e8 73 fa ff ff       	call   c00228b4 <IDE::prepareInterrupt(unsigned char)>
c0022e41:	83 c4 0c             	add    esp,0xc
c0022e44:	6a 00                	push   0x0
c0022e46:	6a 00                	push   0x0
c0022e48:	53                   	push   ebx
c0022e49:	e8 98 fc ff ff       	call   c0022ae6 <IDE::enableIRQs(unsigned char, bool)>
c0022e4e:	83 c4 0c             	add    esp,0xc
c0022e51:	6a 00                	push   0x0
c0022e53:	6a 01                	push   0x1
c0022e55:	53                   	push   ebx
c0022e56:	e8 8b fc ff ff       	call   c0022ae6 <IDE::enableIRQs(unsigned char, bool)>
c0022e5b:	83 c4 10             	add    esp,0x10
c0022e5e:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0022e65:	74 40                	je     c0022ea7 <IDE::open(int, int, void*)+0x37b>
c0022e67:	83 ec 0c             	sub    esp,0xc
c0022e6a:	68 77 c2 02 c0       	push   0xc002c277
c0022e6f:	e8 a1 fc fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0022e74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022e77:	6a 01                	push   0x1
c0022e79:	68 ae 2a 02 c0       	push   0xc0022aae
c0022e7e:	6a 0e                	push   0xe
c0022e80:	53                   	push   ebx
c0022e81:	e8 3a 10 ff ff       	call   c0013ec0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022e86:	83 c4 14             	add    esp,0x14
c0022e89:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022e8f:	53                   	push   ebx
c0022e90:	6a 01                	push   0x1
c0022e92:	68 ca 2a 02 c0       	push   0xc0022aca
c0022e97:	6a 0f                	push   0xf
c0022e99:	53                   	push   ebx
c0022e9a:	e8 21 10 ff ff       	call   c0013ec0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022e9f:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0022ea5:	eb 4a                	jmp    c0022ef1 <IDE::open(int, int, void*)+0x3c5>
c0022ea7:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0022eb1:	50                   	push   eax
c0022eb2:	6a 0f                	push   0xf
c0022eb4:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022eba:	68 93 c2 02 c0       	push   0xc002c293
c0022ebf:	e8 51 fc fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0022ec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022ec7:	6a 00                	push   0x0
c0022ec9:	68 ae 2a 02 c0       	push   0xc0022aae
c0022ece:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022ed4:	53                   	push   ebx
c0022ed5:	e8 e6 0f ff ff       	call   c0013ec0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022eda:	83 c4 14             	add    esp,0x14
c0022edd:	53                   	push   ebx
c0022ede:	6a 00                	push   0x0
c0022ee0:	68 ca 2a 02 c0       	push   0xc0022aca
c0022ee5:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0022eeb:	53                   	push   ebx
c0022eec:	e8 cf 0f ff ff       	call   c0013ec0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022ef1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022ef3:	83 c4 20             	add    esp,0x20
c0022ef6:	83 ec 0c             	sub    esp,0xc
c0022ef9:	53                   	push   ebx
c0022efa:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0022efd:	83 c4 0c             	add    esp,0xc
c0022f00:	6a 07                	push   0x7
c0022f02:	6a 00                	push   0x0
c0022f04:	53                   	push   ebx
c0022f05:	e8 90 fa ff ff       	call   c002299a <IDE::read(unsigned char, unsigned char)>
c0022f0a:	83 c4 0c             	add    esp,0xc
c0022f0d:	6a 07                	push   0x7
c0022f0f:	6a 01                	push   0x1
c0022f11:	53                   	push   ebx
c0022f12:	e8 83 fa ff ff       	call   c002299a <IDE::read(unsigned char, unsigned char)>
c0022f17:	83 c4 0c             	add    esp,0xc
c0022f1a:	6a 01                	push   0x1
c0022f1c:	6a 00                	push   0x0
c0022f1e:	53                   	push   ebx
c0022f1f:	e8 c2 fb ff ff       	call   c0022ae6 <IDE::enableIRQs(unsigned char, bool)>
c0022f24:	83 c4 0c             	add    esp,0xc
c0022f27:	6a 01                	push   0x1
c0022f29:	6a 01                	push   0x1
c0022f2b:	53                   	push   ebx
c0022f2c:	e8 b5 fb ff ff       	call   c0022ae6 <IDE::enableIRQs(unsigned char, bool)>
c0022f31:	83 c4 2c             	add    esp,0x2c
c0022f34:	31 c0                	xor    eax,eax
c0022f36:	5b                   	pop    ebx
c0022f37:	5e                   	pop    esi
c0022f38:	5f                   	pop    edi
c0022f39:	5d                   	pop    ebp
c0022f3a:	c3                   	ret    
c0022f3b:	90                   	nop

c0022f3c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0022f3c:	55                   	push   ebp
c0022f3d:	57                   	push   edi
c0022f3e:	56                   	push   esi
c0022f3f:	53                   	push   ebx
c0022f40:	83 ec 1c             	sub    esp,0x1c
c0022f43:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022f47:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022f4b:	8d 50 f8             	lea    edx,[eax-0x8]
c0022f4e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022f52:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022f56:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022f5a:	80 fa 03             	cmp    dl,0x3
c0022f5d:	77 5d                	ja     c0022fbc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0022f5f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022f63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022f67:	0f b6 db             	movzx  ebx,bl
c0022f6a:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0022f6d:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0022f71:	83 ca 80             	or     edx,0xffffff80
c0022f74:	0f b6 d2             	movzx  edx,dl
c0022f77:	52                   	push   edx
c0022f78:	6a 0c                	push   0xc
c0022f7a:	53                   	push   ebx
c0022f7b:	56                   	push   esi
c0022f7c:	e8 59 f9 ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f81:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0022f86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022f8a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022f8e:	0f b6 c0             	movzx  eax,al
c0022f91:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0022f95:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022f97:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0022f9c:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0022fa0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022fa4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022fa8:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022fb0:	83 c4 2c             	add    esp,0x2c
c0022fb3:	5b                   	pop    ebx
c0022fb4:	5e                   	pop    esi
c0022fb5:	5f                   	pop    edi
c0022fb6:	5d                   	pop    ebp
c0022fb7:	e9 1e f9 ff ff       	jmp    c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fbc:	3c 07                	cmp    al,0x7
c0022fbe:	77 10                	ja     c0022fd0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0022fc0:	0f b6 db             	movzx  ebx,bl
c0022fc3:	0f b6 d0             	movzx  edx,al
c0022fc6:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0022fce:	eb 2d                	jmp    c0022ffd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022fd0:	3c 0d                	cmp    al,0xd
c0022fd2:	77 13                	ja     c0022fe7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0022fd4:	0f b6 db             	movzx  ebx,bl
c0022fd7:	0f b6 c0             	movzx  eax,al
c0022fda:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0022fe1:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0022fe5:	eb 16                	jmp    c0022ffd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022fe7:	3c 15                	cmp    al,0x15
c0022fe9:	77 14                	ja     c0022fff <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0022feb:	0f b6 db             	movzx  ebx,bl
c0022fee:	0f b6 c0             	movzx  eax,al
c0022ff1:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0022ff9:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0022ffd:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022fff:	83 c4 1c             	add    esp,0x1c
c0023002:	5b                   	pop    ebx
c0023003:	5e                   	pop    esi
c0023004:	5f                   	pop    edi
c0023005:	5d                   	pop    ebp
c0023006:	c3                   	ret    
c0023007:	90                   	nop

c0023008 <IDE::detect()>:
c0023008:	55                   	push   ebp
c0023009:	57                   	push   edi
c002300a:	56                   	push   esi
c002300b:	53                   	push   ebx
c002300c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023012:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023019:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023020:	0f 85 be 02 00 00    	jne    c00232e4 <IDE::detect()+0x2dc>
c0023026:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002302d:	31 f6                	xor    esi,esi
c002302f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023037:	31 ed                	xor    ebp,ebp
c0023039:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002303d:	c1 e0 06             	shl    eax,0x6
c0023040:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023048:	89 e8                	mov    eax,ebp
c002304a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002304e:	c1 e0 04             	shl    eax,0x4
c0023051:	83 c8 a0             	or     eax,0xffffffa0
c0023054:	0f b6 c0             	movzx  eax,al
c0023057:	50                   	push   eax
c0023058:	6a 06                	push   0x6
c002305a:	56                   	push   esi
c002305b:	53                   	push   ebx
c002305c:	e8 79 f8 ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023061:	83 c4 0c             	add    esp,0xc
c0023064:	6a 0c                	push   0xc
c0023066:	56                   	push   esi
c0023067:	53                   	push   ebx
c0023068:	e8 2d f9 ff ff       	call   c002299a <IDE::read(unsigned char, unsigned char)>
c002306d:	83 c4 0c             	add    esp,0xc
c0023070:	6a 0c                	push   0xc
c0023072:	56                   	push   esi
c0023073:	53                   	push   ebx
c0023074:	e8 21 f9 ff ff       	call   c002299a <IDE::read(unsigned char, unsigned char)>
c0023079:	83 c4 0c             	add    esp,0xc
c002307c:	6a 0c                	push   0xc
c002307e:	56                   	push   esi
c002307f:	53                   	push   ebx
c0023080:	e8 15 f9 ff ff       	call   c002299a <IDE::read(unsigned char, unsigned char)>
c0023085:	83 c4 0c             	add    esp,0xc
c0023088:	6a 0c                	push   0xc
c002308a:	56                   	push   esi
c002308b:	53                   	push   ebx
c002308c:	e8 09 f9 ff ff       	call   c002299a <IDE::read(unsigned char, unsigned char)>
c0023091:	68 ec 00 00 00       	push   0xec
c0023096:	6a 07                	push   0x7
c0023098:	56                   	push   esi
c0023099:	53                   	push   ebx
c002309a:	e8 3b f8 ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c002309f:	83 c4 1c             	add    esp,0x1c
c00230a2:	6a 0c                	push   0xc
c00230a4:	56                   	push   esi
c00230a5:	53                   	push   ebx
c00230a6:	e8 ef f8 ff ff       	call   c002299a <IDE::read(unsigned char, unsigned char)>
c00230ab:	83 c4 0c             	add    esp,0xc
c00230ae:	6a 0c                	push   0xc
c00230b0:	56                   	push   esi
c00230b1:	53                   	push   ebx
c00230b2:	e8 e3 f8 ff ff       	call   c002299a <IDE::read(unsigned char, unsigned char)>
c00230b7:	83 c4 0c             	add    esp,0xc
c00230ba:	6a 0c                	push   0xc
c00230bc:	56                   	push   esi
c00230bd:	53                   	push   ebx
c00230be:	e8 d7 f8 ff ff       	call   c002299a <IDE::read(unsigned char, unsigned char)>
c00230c3:	83 c4 0c             	add    esp,0xc
c00230c6:	6a 0c                	push   0xc
c00230c8:	56                   	push   esi
c00230c9:	53                   	push   ebx
c00230ca:	e8 cb f8 ff ff       	call   c002299a <IDE::read(unsigned char, unsigned char)>
c00230cf:	83 c4 0c             	add    esp,0xc
c00230d2:	6a 0c                	push   0xc
c00230d4:	56                   	push   esi
c00230d5:	53                   	push   ebx
c00230d6:	e8 bf f8 ff ff       	call   c002299a <IDE::read(unsigned char, unsigned char)>
c00230db:	83 c4 10             	add    esp,0x10
c00230de:	84 c0                	test   al,al
c00230e0:	0f 84 8b 01 00 00    	je     c0023271 <IDE::detect()+0x269>
c00230e6:	31 ff                	xor    edi,edi
c00230e8:	50                   	push   eax
c00230e9:	6a 0c                	push   0xc
c00230eb:	56                   	push   esi
c00230ec:	53                   	push   ebx
c00230ed:	e8 a8 f8 ff ff       	call   c002299a <IDE::read(unsigned char, unsigned char)>
c00230f2:	83 c4 10             	add    esp,0x10
c00230f5:	a8 01                	test   al,0x1
c00230f7:	0f 85 8e 01 00 00    	jne    c002328b <IDE::detect()+0x283>
c00230fd:	84 c0                	test   al,al
c00230ff:	78 04                	js     c0023105 <IDE::detect()+0xfd>
c0023101:	a8 08                	test   al,0x8
c0023103:	75 27                	jne    c002312c <IDE::detect()+0x124>
c0023105:	47                   	inc    edi
c0023106:	81 ff 17 01 00 00    	cmp    edi,0x117
c002310c:	7e da                	jle    c00230e8 <IDE::detect()+0xe0>
c002310e:	50                   	push   eax
c002310f:	50                   	push   eax
c0023110:	6a 00                	push   0x0
c0023112:	68 40 4b 4c 00       	push   0x4c4b40
c0023117:	e8 00 ab ff ff       	call   c001dc1c <nanoSleep(unsigned long long)>
c002311c:	83 c4 10             	add    esp,0x10
c002311f:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023125:	75 c1                	jne    c00230e8 <IDE::detect()+0xe0>
c0023127:	e9 5f 01 00 00       	jmp    c002328b <IDE::detect()+0x283>
c002312c:	31 c9                	xor    ecx,ecx
c002312e:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023132:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023136:	83 ec 0c             	sub    esp,0xc
c0023139:	68 80 00 00 00       	push   0x80
c002313e:	57                   	push   edi
c002313f:	6a 00                	push   0x0
c0023141:	56                   	push   esi
c0023142:	53                   	push   ebx
c0023143:	e8 f4 fd ff ff       	call   c0022f3c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023148:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002314d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023151:	89 d1                	mov    ecx,edx
c0023153:	c1 e0 06             	shl    eax,0x6
c0023156:	01 d8                	add    eax,ebx
c0023158:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002315f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023166:	89 f2                	mov    edx,esi
c0023168:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002316e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023172:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023178:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002317c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023183:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002318b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023192:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002319a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00231a0:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00231a7:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00231ad:	8d 54 24 58          	lea    edx,[esp+0x58]
c00231b1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00231b5:	83 c4 20             	add    esp,0x20
c00231b8:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00231bb:	83 c0 02             	add    eax,0x2
c00231be:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00231c4:	83 c7 02             	add    edi,0x2
c00231c7:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00231ca:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00231d0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00231d4:	75 e2                	jne    c00231b8 <IDE::detect()+0x1b0>
c00231d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00231da:	c1 e0 06             	shl    eax,0x6
c00231dd:	01 d8                	add    eax,ebx
c00231df:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00231e5:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00231ec:	66 c1 ea 09          	shr    dx,0x9
c00231f0:	83 e2 01             	and    edx,0x1
c00231f3:	84 c9                	test   cl,cl
c00231f5:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00231fb:	75 2f                	jne    c002322c <IDE::detect()+0x224>
c00231fd:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0023203:	85 c0                	test   eax,eax
c0023205:	74 66                	je     c002326d <IDE::detect()+0x265>
c0023207:	50                   	push   eax
c0023208:	55                   	push   ebp
c0023209:	56                   	push   esi
c002320a:	68 af c2 02 c0       	push   0xc002c2af
c002320f:	e8 01 f9 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0023214:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002321b:	e8 26 c6 fe ff       	call   c000f846 <malloc>
c0023220:	89 c7                	mov    edi,eax
c0023222:	89 04 24             	mov    DWORD PTR [esp],eax
c0023225:	e8 78 06 00 00       	call   c00238a2 <ATA::ATA()>
c002322a:	eb 28                	jmp    c0023254 <IDE::detect()+0x24c>
c002322c:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023232:	55                   	push   ebp
c0023233:	56                   	push   esi
c0023234:	68 de c2 02 c0       	push   0xc002c2de
c0023239:	e8 d7 f8 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c002323e:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023245:	e8 fc c5 fe ff       	call   c000f846 <malloc>
c002324a:	89 c7                	mov    edi,eax
c002324c:	89 04 24             	mov    DWORD PTR [esp],eax
c002324f:	e8 8e 0c 00 00       	call   c0023ee2 <ATAPI::ATAPI()>
c0023254:	5a                   	pop    edx
c0023255:	59                   	pop    ecx
c0023256:	57                   	push   edi
c0023257:	53                   	push   ebx
c0023258:	e8 df 0c ff ff       	call   c0013f3c <Device::addChild(Device*)>
c002325d:	8b 07                	mov    eax,DWORD PTR [edi]
c002325f:	53                   	push   ebx
c0023260:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023264:	6a 00                	push   0x0
c0023266:	57                   	push   edi
c0023267:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002326a:	83 c4 20             	add    esp,0x20
c002326d:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023271:	4d                   	dec    ebp
c0023272:	74 0a                	je     c002327e <IDE::detect()+0x276>
c0023274:	bd 01 00 00 00       	mov    ebp,0x1
c0023279:	e9 bb fd ff ff       	jmp    c0023039 <IDE::detect()+0x31>
c002327e:	4e                   	dec    esi
c002327f:	74 63                	je     c00232e4 <IDE::detect()+0x2dc>
c0023281:	be 01 00 00 00       	mov    esi,0x1
c0023286:	e9 ac fd ff ff       	jmp    c0023037 <IDE::detect()+0x2f>
c002328b:	50                   	push   eax
c002328c:	6a 04                	push   0x4
c002328e:	56                   	push   esi
c002328f:	53                   	push   ebx
c0023290:	e8 05 f7 ff ff       	call   c002299a <IDE::read(unsigned char, unsigned char)>
c0023295:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023299:	83 c4 0c             	add    esp,0xc
c002329c:	6a 05                	push   0x5
c002329e:	56                   	push   esi
c002329f:	53                   	push   ebx
c00232a0:	e8 f5 f6 ff ff       	call   c002299a <IDE::read(unsigned char, unsigned char)>
c00232a5:	83 c4 10             	add    esp,0x10
c00232a8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00232ac:	80 fa 14             	cmp    dl,0x14
c00232af:	75 04                	jne    c00232b5 <IDE::detect()+0x2ad>
c00232b1:	3c eb                	cmp    al,0xeb
c00232b3:	eb 07                	jmp    c00232bc <IDE::detect()+0x2b4>
c00232b5:	3c 96                	cmp    al,0x96
c00232b7:	75 b8                	jne    c0023271 <IDE::detect()+0x269>
c00232b9:	80 fa 69             	cmp    dl,0x69
c00232bc:	75 b3                	jne    c0023271 <IDE::detect()+0x269>
c00232be:	68 a1 00 00 00       	push   0xa1
c00232c3:	6a 07                	push   0x7
c00232c5:	56                   	push   esi
c00232c6:	53                   	push   ebx
c00232c7:	e8 0e f6 ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232cc:	5f                   	pop    edi
c00232cd:	58                   	pop    eax
c00232ce:	6a 00                	push   0x0
c00232d0:	68 40 42 0f 00       	push   0xf4240
c00232d5:	e8 42 a9 ff ff       	call   c001dc1c <nanoSleep(unsigned long long)>
c00232da:	83 c4 10             	add    esp,0x10
c00232dd:	b1 01                	mov    cl,0x1
c00232df:	e9 4a fe ff ff       	jmp    c002312e <IDE::detect()+0x126>
c00232e4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00232ea:	5b                   	pop    ebx
c00232eb:	5e                   	pop    esi
c00232ec:	5f                   	pop    edi
c00232ed:	5d                   	pop    ebp
c00232ee:	c3                   	ret    
c00232ef:	90                   	nop

c00232f0 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00232f0:	55                   	push   ebp
c00232f1:	57                   	push   edi
c00232f2:	56                   	push   esi
c00232f3:	53                   	push   ebx
c00232f4:	83 ec 1c             	sub    esp,0x1c
c00232f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00232fb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00232ff:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023303:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023307:	88 c3                	mov    bl,al
c0023309:	84 c0                	test   al,al
c002330b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002330f:	0f 84 67 01 00 00    	je     c002347c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023315:	83 ec 0c             	sub    esp,0xc
c0023318:	68 0f c3 02 c0       	push   0xc002c30f
c002331d:	e8 f3 f7 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0023322:	83 c4 10             	add    esp,0x10
c0023325:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023329:	3c 01                	cmp    al,0x1
c002332b:	75 17                	jne    c0023344 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c002332d:	83 ec 0c             	sub    esp,0xc
c0023330:	b3 13                	mov    bl,0x13
c0023332:	68 1b c3 02 c0       	push   0xc002c31b
c0023337:	e8 d9 f7 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c002333c:	83 c4 10             	add    esp,0x10
c002333f:	e9 25 01 00 00       	jmp    c0023469 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023344:	3c 02                	cmp    al,0x2
c0023346:	0f 85 ef 00 00 00    	jne    c002343b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c002334c:	d1 e6                	shl    esi,1
c002334e:	09 ee                	or     esi,ebp
c0023350:	52                   	push   edx
c0023351:	89 f0                	mov    eax,esi
c0023353:	6a 01                	push   0x1
c0023355:	0f b6 f0             	movzx  esi,al
c0023358:	c1 e6 06             	shl    esi,0x6
c002335b:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023363:	50                   	push   eax
c0023364:	57                   	push   edi
c0023365:	e8 30 f6 ff ff       	call   c002299a <IDE::read(unsigned char, unsigned char)>
c002336a:	83 c4 10             	add    esp,0x10
c002336d:	89 c6                	mov    esi,eax
c002336f:	a8 01                	test   al,0x1
c0023371:	74 12                	je     c0023385 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023373:	83 ec 0c             	sub    esp,0xc
c0023376:	b3 07                	mov    bl,0x7
c0023378:	68 30 c3 02 c0       	push   0xc002c330
c002337d:	e8 93 f7 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0023382:	83 c4 10             	add    esp,0x10
c0023385:	f7 c6 02 00 00 00    	test   esi,0x2
c002338b:	74 12                	je     c002339f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c002338d:	83 ec 0c             	sub    esp,0xc
c0023390:	b3 03                	mov    bl,0x3
c0023392:	68 4e c3 02 c0       	push   0xc002c34e
c0023397:	e8 79 f7 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c002339c:	83 c4 10             	add    esp,0x10
c002339f:	f7 c6 04 00 00 00    	test   esi,0x4
c00233a5:	74 12                	je     c00233b9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c00233a7:	83 ec 0c             	sub    esp,0xc
c00233aa:	b3 14                	mov    bl,0x14
c00233ac:	68 6e c3 02 c0       	push   0xc002c36e
c00233b1:	e8 5f f7 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00233b6:	83 c4 10             	add    esp,0x10
c00233b9:	f7 c6 08 00 00 00    	test   esi,0x8
c00233bf:	74 12                	je     c00233d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00233c1:	83 ec 0c             	sub    esp,0xc
c00233c4:	b3 03                	mov    bl,0x3
c00233c6:	68 4e c3 02 c0       	push   0xc002c34e
c00233cb:	e8 45 f7 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00233d0:	83 c4 10             	add    esp,0x10
c00233d3:	f7 c6 10 00 00 00    	test   esi,0x10
c00233d9:	74 12                	je     c00233ed <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00233db:	83 ec 0c             	sub    esp,0xc
c00233de:	b3 15                	mov    bl,0x15
c00233e0:	68 86 c3 02 c0       	push   0xc002c386
c00233e5:	e8 2b f7 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00233ea:	83 c4 10             	add    esp,0x10
c00233ed:	f7 c6 20 00 00 00    	test   esi,0x20
c00233f3:	74 12                	je     c0023407 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00233f5:	83 ec 0c             	sub    esp,0xc
c00233f8:	b3 03                	mov    bl,0x3
c00233fa:	68 4e c3 02 c0       	push   0xc002c34e
c00233ff:	e8 11 f7 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0023404:	83 c4 10             	add    esp,0x10
c0023407:	f7 c6 40 00 00 00    	test   esi,0x40
c002340d:	74 12                	je     c0023421 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c002340f:	83 ec 0c             	sub    esp,0xc
c0023412:	b3 16                	mov    bl,0x16
c0023414:	68 a0 c3 02 c0       	push   0xc002c3a0
c0023419:	e8 f7 f6 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c002341e:	83 c4 10             	add    esp,0x10
c0023421:	89 f0                	mov    eax,esi
c0023423:	84 c0                	test   al,al
c0023425:	79 42                	jns    c0023469 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023427:	83 ec 0c             	sub    esp,0xc
c002342a:	b3 0d                	mov    bl,0xd
c002342c:	68 c1 c3 02 c0       	push   0xc002c3c1
c0023431:	e8 df f6 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0023436:	83 c4 10             	add    esp,0x10
c0023439:	eb 2e                	jmp    c0023469 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002343b:	3c 03                	cmp    al,0x3
c002343d:	75 14                	jne    c0023453 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c002343f:	83 ec 0c             	sub    esp,0xc
c0023442:	b3 17                	mov    bl,0x17
c0023444:	68 d5 c3 02 c0       	push   0xc002c3d5
c0023449:	e8 c7 f6 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c002344e:	83 c4 10             	add    esp,0x10
c0023451:	eb 16                	jmp    c0023469 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023453:	3c 04                	cmp    al,0x4
c0023455:	75 12                	jne    c0023469 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023457:	83 ec 0c             	sub    esp,0xc
c002345a:	b3 08                	mov    bl,0x8
c002345c:	68 eb c3 02 c0       	push   0xc002c3eb
c0023461:	e8 af f6 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0023466:	83 c4 10             	add    esp,0x10
c0023469:	50                   	push   eax
c002346a:	50                   	push   eax
c002346b:	0f b6 c3             	movzx  eax,bl
c002346e:	50                   	push   eax
c002346f:	68 03 c4 02 c0       	push   0xc002c403
c0023474:	e8 9c f6 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0023479:	83 c4 10             	add    esp,0x10
c002347c:	83 c4 1c             	add    esp,0x1c
c002347f:	88 d8                	mov    al,bl
c0023481:	5b                   	pop    ebx
c0023482:	5e                   	pop    esi
c0023483:	5f                   	pop    edi
c0023484:	5d                   	pop    ebp
c0023485:	c3                   	ret    

c0023486 <IDE::polling(unsigned char, unsigned int)>:
c0023486:	57                   	push   edi
c0023487:	56                   	push   esi
c0023488:	53                   	push   ebx
c0023489:	bb 04 00 00 00       	mov    ebx,0x4
c002348e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023492:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023497:	52                   	push   edx
c0023498:	6a 0c                	push   0xc
c002349a:	56                   	push   esi
c002349b:	57                   	push   edi
c002349c:	e8 f9 f4 ff ff       	call   c002299a <IDE::read(unsigned char, unsigned char)>
c00234a1:	83 c4 10             	add    esp,0x10
c00234a4:	4b                   	dec    ebx
c00234a5:	75 f0                	jne    c0023497 <IDE::polling(unsigned char, unsigned int)+0x11>
c00234a7:	bb a0 86 01 00       	mov    ebx,0x186a0
c00234ac:	50                   	push   eax
c00234ad:	6a 0c                	push   0xc
c00234af:	56                   	push   esi
c00234b0:	57                   	push   edi
c00234b1:	e8 e4 f4 ff ff       	call   c002299a <IDE::read(unsigned char, unsigned char)>
c00234b6:	83 c4 10             	add    esp,0x10
c00234b9:	a8 01                	test   al,0x1
c00234bb:	74 12                	je     c00234cf <IDE::polling(unsigned char, unsigned int)+0x49>
c00234bd:	83 ec 0c             	sub    esp,0xc
c00234c0:	68 1d c4 02 c0       	push   0xc002c41d
c00234c5:	e8 4b f6 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00234ca:	83 c4 10             	add    esp,0x10
c00234cd:	eb 17                	jmp    c00234e6 <IDE::polling(unsigned char, unsigned int)+0x60>
c00234cf:	a8 20                	test   al,0x20
c00234d1:	75 0f                	jne    c00234e2 <IDE::polling(unsigned char, unsigned int)+0x5c>
c00234d3:	4b                   	dec    ebx
c00234d4:	74 10                	je     c00234e6 <IDE::polling(unsigned char, unsigned int)+0x60>
c00234d6:	84 c0                	test   al,al
c00234d8:	78 d2                	js     c00234ac <IDE::polling(unsigned char, unsigned int)+0x26>
c00234da:	a8 08                	test   al,0x8
c00234dc:	74 ce                	je     c00234ac <IDE::polling(unsigned char, unsigned int)+0x26>
c00234de:	31 c0                	xor    eax,eax
c00234e0:	eb 06                	jmp    c00234e8 <IDE::polling(unsigned char, unsigned int)+0x62>
c00234e2:	b0 01                	mov    al,0x1
c00234e4:	eb 02                	jmp    c00234e8 <IDE::polling(unsigned char, unsigned int)+0x62>
c00234e6:	b0 02                	mov    al,0x2
c00234e8:	5b                   	pop    ebx
c00234e9:	5e                   	pop    esi
c00234ea:	5f                   	pop    edi
c00234eb:	c3                   	ret    

c00234ec <SATABus::close(int, int, void*)>:
c00234ec:	31 c0                	xor    eax,eax
c00234ee:	c3                   	ret    
c00234ef:	90                   	nop

c00234f0 <SATABus::detect()>:
c00234f0:	c3                   	ret    
c00234f1:	90                   	nop

c00234f2 <SATABus::SATABus()>:
c00234f2:	83 ec 0c             	sub    esp,0xc
c00234f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234f9:	83 ec 08             	sub    esp,0x8
c00234fc:	68 60 c4 02 c0       	push   0xc002c460
c0023501:	50                   	push   eax
c0023502:	e8 c1 0d ff ff       	call   c00142c8 <HardDiskController::HardDiskController(char const*)>
c0023507:	83 c4 10             	add    esp,0x10
c002350a:	ba 1c c5 02 c0       	mov    edx,0xc002c51c
c002350f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023513:	89 10                	mov    DWORD PTR [eax],edx
c0023515:	83 ec 0c             	sub    esp,0xc
c0023518:	6a 50                	push   0x50
c002351a:	e8 8c ca fe ff       	call   c000ffab <Phys::allocateContiguousPages(int)>
c002351f:	83 c4 10             	add    esp,0x10
c0023522:	89 c2                	mov    edx,eax
c0023524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023528:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002352e:	83 ec 0c             	sub    esp,0xc
c0023531:	6a 50                	push   0x50
c0023533:	e8 ed e5 fe ff       	call   c0011b25 <Virt::allocateKernelVirtualPages(int)>
c0023538:	83 c4 10             	add    esp,0x10
c002353b:	89 c2                	mov    edx,eax
c002353d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023541:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023547:	e8 69 e7 fe ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c002354c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023550:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023556:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002355a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023560:	83 ec 0c             	sub    esp,0xc
c0023563:	6a 03                	push   0x3
c0023565:	6a 50                	push   0x50
c0023567:	51                   	push   ecx
c0023568:	52                   	push   edx
c0023569:	50                   	push   eax
c002356a:	e8 75 ef fe ff       	call   c00124e4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002356f:	83 c4 20             	add    esp,0x20
c0023572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023576:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c002357c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023580:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023586:	83 ec 04             	sub    esp,0x4
c0023589:	52                   	push   edx
c002358a:	50                   	push   eax
c002358b:	68 84 c4 02 c0       	push   0xc002c484
c0023590:	e8 80 f5 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0023595:	83 c4 10             	add    esp,0x10
c0023598:	90                   	nop
c0023599:	83 c4 0c             	add    esp,0xc
c002359c:	c3                   	ret    
c002359d:	90                   	nop

c002359e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002359e:	83 ec 0c             	sub    esp,0xc
c00235a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00235a5:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00235a8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00235ab:	09 c2                	or     edx,eax
c00235ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235b1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00235b7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00235b9:	31 c0                	xor    eax,eax
c00235bb:	c1 e9 08             	shr    ecx,0x8
c00235be:	83 e1 0f             	and    ecx,0xf
c00235c1:	39 c8                	cmp    eax,ecx
c00235c3:	74 0a                	je     c00235cf <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00235c5:	f6 c2 01             	test   dl,0x1
c00235c8:	74 18                	je     c00235e2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c00235ca:	d1 ea                	shr    edx,1
c00235cc:	40                   	inc    eax
c00235cd:	eb f2                	jmp    c00235c1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c00235cf:	83 ec 0c             	sub    esp,0xc
c00235d2:	68 a8 c4 02 c0       	push   0xc002c4a8
c00235d7:	e8 61 6a ff ff       	call   c001a03d <Krnl::panic(char const*)>
c00235dc:	83 c4 10             	add    esp,0x10
c00235df:	83 c8 ff             	or     eax,0xffffffff
c00235e2:	83 c4 0c             	add    esp,0xc
c00235e5:	c3                   	ret    

c00235e6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00235e6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00235ea:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00235ed:	89 c2                	mov    edx,eax
c00235ef:	c1 ea 08             	shr    edx,0x8
c00235f2:	83 e2 0f             	and    edx,0xf
c00235f5:	fe ca                	dec    dl
c00235f7:	75 31                	jne    c002362a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00235f9:	83 e0 0f             	and    eax,0xf
c00235fc:	3c 03                	cmp    al,0x3
c00235fe:	75 2a                	jne    c002362a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023600:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023603:	b8 02 00 00 00       	mov    eax,0x2
c0023608:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002360e:	74 1c                	je     c002362c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023610:	b8 04 00 00 00       	mov    eax,0x4
c0023615:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002361b:	74 0f                	je     c002362c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002361d:	31 c0                	xor    eax,eax
c002361f:	83 fa 03             	cmp    edx,0x3
c0023622:	0f 94 c0             	sete   al
c0023625:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023629:	c3                   	ret    
c002362a:	31 c0                	xor    eax,eax
c002362c:	c3                   	ret    
c002362d:	90                   	nop

c002362e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002362e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023632:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023635:	0f ba e2 0f          	bt     edx,0xf
c0023639:	72 f7                	jb     c0023632 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002363b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002363e:	83 ca 10             	or     edx,0x10
c0023641:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023644:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023647:	83 ca 01             	or     edx,0x1
c002364a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002364d:	c3                   	ret    

c002364e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002364e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023652:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023655:	83 e2 fe             	and    edx,0xfffffffe
c0023658:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002365b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002365e:	83 e2 ef             	and    edx,0xffffffef
c0023661:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023664:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023667:	0f ba e2 0e          	bt     edx,0xe
c002366b:	72 f7                	jb     c0023664 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002366d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023670:	0f ba e2 0f          	bt     edx,0xf
c0023674:	72 ee                	jb     c0023664 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023676:	c3                   	ret    
c0023677:	90                   	nop

c0023678 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023678:	55                   	push   ebp
c0023679:	57                   	push   edi
c002367a:	56                   	push   esi
c002367b:	53                   	push   ebx
c002367c:	83 ec 1c             	sub    esp,0x1c
c002367f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023683:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023687:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002368b:	53                   	push   ebx
c002368c:	89 fd                	mov    ebp,edi
c002368e:	56                   	push   esi
c002368f:	c1 e5 0a             	shl    ebp,0xa
c0023692:	e8 b7 ff ff ff       	call   c002364e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023697:	83 ec 0c             	sub    esp,0xc
c002369a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00236a0:	01 e8                	add    eax,ebp
c00236a2:	89 03                	mov    DWORD PTR [ebx],eax
c00236a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00236a6:	68 00 04 00 00       	push   0x400
c00236ab:	6a 00                	push   0x0
c00236ad:	50                   	push   eax
c00236ae:	e8 c5 d0 fd ff       	call   c0000778 <memset>
c00236b3:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00236b9:	89 fa                	mov    edx,edi
c00236bb:	01 e8                	add    eax,ebp
c00236bd:	c1 e7 0d             	shl    edi,0xd
c00236c0:	89 03                	mov    DWORD PTR [ebx],eax
c00236c2:	c1 e2 08             	shl    edx,0x8
c00236c5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00236cc:	81 c2 00 80 00 00    	add    edx,0x8000
c00236d2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00236d6:	89 d0                	mov    eax,edx
c00236d8:	83 c4 1c             	add    esp,0x1c
c00236db:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00236e1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00236e4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00236e7:	68 00 01 00 00       	push   0x100
c00236ec:	6a 00                	push   0x0
c00236ee:	50                   	push   eax
c00236ef:	e8 84 d0 fd ff       	call   c0000778 <memset>
c00236f4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00236f8:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00236fe:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023704:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023708:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c002370b:	83 c4 10             	add    esp,0x10
c002370e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023715:	31 ff                	xor    edi,edi
c0023717:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c002371d:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023723:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023727:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002372d:	83 c5 20             	add    ebp,0x20
c0023730:	01 f8                	add    eax,edi
c0023732:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023735:	52                   	push   edx
c0023736:	68 00 01 00 00       	push   0x100
c002373b:	6a 00                	push   0x0
c002373d:	50                   	push   eax
c002373e:	e8 35 d0 fd ff       	call   c0000778 <memset>
c0023743:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023747:	83 c4 10             	add    esp,0x10
c002374a:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023750:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023757:	01 f8                	add    eax,edi
c0023759:	81 c7 00 01 00 00    	add    edi,0x100
c002375f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023762:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023768:	75 b3                	jne    c002371d <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c002376a:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c002376e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023772:	83 c4 1c             	add    esp,0x1c
c0023775:	5b                   	pop    ebx
c0023776:	5e                   	pop    esi
c0023777:	5f                   	pop    edi
c0023778:	5d                   	pop    ebp
c0023779:	e9 b0 fe ff ff       	jmp    c002362e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c002377e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002377e:	55                   	push   ebp
c002377f:	57                   	push   edi
c0023780:	56                   	push   esi
c0023781:	53                   	push   ebx
c0023782:	31 db                	xor    ebx,ebx
c0023784:	83 ec 0c             	sub    esp,0xc
c0023787:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002378b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002378f:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023792:	f7 c7 01 00 00 00    	test   edi,0x1
c0023798:	0f 84 aa 00 00 00    	je     c0023848 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c002379e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00237a2:	89 d8                	mov    eax,ebx
c00237a4:	c1 e0 07             	shl    eax,0x7
c00237a7:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c00237ae:	55                   	push   ebp
c00237af:	56                   	push   esi
c00237b0:	e8 31 fe ff ff       	call   c00235e6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c00237b5:	5a                   	pop    edx
c00237b6:	83 f8 01             	cmp    eax,0x1
c00237b9:	59                   	pop    ecx
c00237ba:	75 30                	jne    c00237ec <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c00237bc:	50                   	push   eax
c00237bd:	50                   	push   eax
c00237be:	53                   	push   ebx
c00237bf:	68 cd c4 02 c0       	push   0xc002c4cd
c00237c4:	e8 4c f3 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00237c9:	83 c4 0c             	add    esp,0xc
c00237cc:	53                   	push   ebx
c00237cd:	55                   	push   ebp
c00237ce:	56                   	push   esi
c00237cf:	e8 a4 fe ff ff       	call   c0023678 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00237d4:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00237db:	e8 66 c0 fe ff       	call   c000f846 <malloc>
c00237e0:	89 c5                	mov    ebp,eax
c00237e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00237e5:	e8 60 0d 00 00       	call   c002454a <SATA::SATA()>
c00237ea:	eb 33                	jmp    c002381f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c00237ec:	83 f8 04             	cmp    eax,0x4
c00237ef:	75 47                	jne    c0023838 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c00237f1:	50                   	push   eax
c00237f2:	50                   	push   eax
c00237f3:	53                   	push   ebx
c00237f4:	68 e4 c4 02 c0       	push   0xc002c4e4
c00237f9:	e8 17 f3 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00237fe:	83 c4 0c             	add    esp,0xc
c0023801:	53                   	push   ebx
c0023802:	55                   	push   ebp
c0023803:	56                   	push   esi
c0023804:	e8 6f fe ff ff       	call   c0023678 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023809:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023810:	e8 31 c0 fe ff       	call   c000f846 <malloc>
c0023815:	89 c5                	mov    ebp,eax
c0023817:	89 04 24             	mov    DWORD PTR [esp],eax
c002381a:	e8 d7 10 00 00       	call   c00248f6 <SATAPI::SATAPI()>
c002381f:	5a                   	pop    edx
c0023820:	59                   	pop    ecx
c0023821:	55                   	push   ebp
c0023822:	56                   	push   esi
c0023823:	e8 14 07 ff ff       	call   c0013f3c <Device::addChild(Device*)>
c0023828:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002382b:	56                   	push   esi
c002382c:	6a 00                	push   0x0
c002382e:	53                   	push   ebx
c002382f:	55                   	push   ebp
c0023830:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023833:	83 c4 20             	add    esp,0x20
c0023836:	eb 10                	jmp    c0023848 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023838:	50                   	push   eax
c0023839:	50                   	push   eax
c002383a:	53                   	push   ebx
c002383b:	68 fd c4 02 c0       	push   0xc002c4fd
c0023840:	e8 d0 f2 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0023845:	83 c4 10             	add    esp,0x10
c0023848:	d1 ef                	shr    edi,1
c002384a:	43                   	inc    ebx
c002384b:	83 fb 20             	cmp    ebx,0x20
c002384e:	0f 85 3e ff ff ff    	jne    c0023792 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023854:	83 c4 0c             	add    esp,0xc
c0023857:	5b                   	pop    ebx
c0023858:	5e                   	pop    esi
c0023859:	5f                   	pop    edi
c002385a:	5d                   	pop    ebp
c002385b:	c3                   	ret    

c002385c <SATABus::open(int, int, void*)>:
c002385c:	83 ec 14             	sub    esp,0x14
c002385f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023863:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023869:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002386f:	52                   	push   edx
c0023870:	50                   	push   eax
c0023871:	e8 08 ff ff ff       	call   c002377e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023876:	31 c0                	xor    eax,eax
c0023878:	83 c4 1c             	add    esp,0x1c
c002387b:	c3                   	ret    

c002387c <ATA::close(int, int, void*)>:
c002387c:	83 ec 0c             	sub    esp,0xc
c002387f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023883:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023889:	85 c0                	test   eax,eax
c002388b:	74 0c                	je     c0023899 <ATA::close(int, int, void*)+0x1d>
c002388d:	83 ec 0c             	sub    esp,0xc
c0023890:	8b 10                	mov    edx,DWORD PTR [eax]
c0023892:	50                   	push   eax
c0023893:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023896:	83 c4 10             	add    esp,0x10
c0023899:	31 c0                	xor    eax,eax
c002389b:	83 c4 0c             	add    esp,0xc
c002389e:	c3                   	ret    
c002389f:	90                   	nop

c00238a0 <ATA::powerSaving(PowerSavingLevel)>:
c00238a0:	c3                   	ret    
c00238a1:	90                   	nop

c00238a2 <ATA::ATA()>:
c00238a2:	83 ec 0c             	sub    esp,0xc
c00238a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238a9:	83 ec 04             	sub    esp,0x4
c00238ac:	68 00 02 00 00       	push   0x200
c00238b1:	68 e5 c5 02 c0       	push   0xc002c5e5
c00238b6:	50                   	push   eax
c00238b7:	e8 a4 0a ff ff       	call   c0014360 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00238bc:	83 c4 10             	add    esp,0x10
c00238bf:	ba 68 c5 02 c0       	mov    edx,0xc002c568
c00238c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238c8:	89 10                	mov    DWORD PTR [eax],edx
c00238ca:	90                   	nop
c00238cb:	83 c4 0c             	add    esp,0xc
c00238ce:	c3                   	ret    
c00238cf:	90                   	nop

c00238d0 <ATA::flush(bool)>:
c00238d0:	53                   	push   ebx
c00238d1:	83 ec 08             	sub    esp,0x8
c00238d4:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00238d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00238dd:	19 c0                	sbb    eax,eax
c00238df:	83 e0 fd             	and    eax,0xfffffffd
c00238e2:	05 ea 00 00 00       	add    eax,0xea
c00238e7:	50                   	push   eax
c00238e8:	6a 07                	push   0x7
c00238ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00238f1:	50                   	push   eax
c00238f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00238f8:	e8 dd ef ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238fd:	83 c4 0c             	add    esp,0xc
c0023900:	6a 00                	push   0x0
c0023902:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023909:	50                   	push   eax
c002390a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023910:	e8 71 fb ff ff       	call   c0023486 <IDE::polling(unsigned char, unsigned int)>
c0023915:	83 c4 18             	add    esp,0x18
c0023918:	5b                   	pop    ebx
c0023919:	c3                   	ret    

c002391a <ATA::readyForCommand()>:
c002391a:	56                   	push   esi
c002391b:	53                   	push   ebx
c002391c:	31 db                	xor    ebx,ebx
c002391e:	50                   	push   eax
c002391f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023923:	50                   	push   eax
c0023924:	6a 0c                	push   0xc
c0023926:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002392d:	50                   	push   eax
c002392e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023934:	e8 61 f0 ff ff       	call   c002299a <IDE::read(unsigned char, unsigned char)>
c0023939:	83 c4 10             	add    esp,0x10
c002393c:	a8 88                	test   al,0x88
c002393e:	74 23                	je     c0023963 <ATA::readyForCommand()+0x49>
c0023940:	43                   	inc    ebx
c0023941:	83 fb 63             	cmp    ebx,0x63
c0023944:	7e dd                	jle    c0023923 <ATA::readyForCommand()+0x9>
c0023946:	51                   	push   ecx
c0023947:	51                   	push   ecx
c0023948:	6a 00                	push   0x0
c002394a:	68 40 42 0f 00       	push   0xf4240
c002394f:	e8 c8 a2 ff ff       	call   c001dc1c <nanoSleep(unsigned long long)>
c0023954:	83 c4 10             	add    esp,0x10
c0023957:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002395d:	75 c4                	jne    c0023923 <ATA::readyForCommand()+0x9>
c002395f:	31 c0                	xor    eax,eax
c0023961:	eb 02                	jmp    c0023965 <ATA::readyForCommand()+0x4b>
c0023963:	b0 01                	mov    al,0x1
c0023965:	5a                   	pop    edx
c0023966:	5b                   	pop    ebx
c0023967:	5e                   	pop    esi
c0023968:	c3                   	ret    
c0023969:	90                   	nop

c002396a <ATA::access(unsigned long long, int, void*, bool)>:
c002396a:	55                   	push   ebp
c002396b:	57                   	push   edi
c002396c:	56                   	push   esi
c002396d:	53                   	push   ebx
c002396e:	83 ec 2c             	sub    esp,0x2c
c0023971:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023975:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023979:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002397d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023981:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023985:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023989:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002398d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023993:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023997:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002399d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00239a1:	c1 e0 06             	shl    eax,0x6
c00239a4:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00239ac:	74 5d                	je     c0023a0b <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00239ae:	89 fa                	mov    edx,edi
c00239b0:	89 f0                	mov    eax,esi
c00239b2:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00239b6:	c1 ea 1c             	shr    edx,0x1c
c00239b9:	89 d1                	mov    ecx,edx
c00239bb:	09 c1                	or     ecx,eax
c00239bd:	74 25                	je     c00239e4 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00239bf:	31 ed                	xor    ebp,ebp
c00239c1:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00239c8:	89 fa                	mov    edx,edi
c00239ca:	89 f0                	mov    eax,esi
c00239cc:	0f ad d0             	shrd   eax,edx,cl
c00239cf:	d3 ea                	shr    edx,cl
c00239d1:	f6 c1 20             	test   cl,0x20
c00239d4:	74 02                	je     c00239d8 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00239d6:	89 d0                	mov    eax,edx
c00239d8:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00239dc:	45                   	inc    ebp
c00239dd:	83 fd 06             	cmp    ebp,0x6
c00239e0:	75 df                	jne    c00239c1 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00239e2:	eb 76                	jmp    c0023a5a <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00239e4:	89 f0                	mov    eax,esi
c00239e6:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00239eb:	89 fa                	mov    edx,edi
c00239ed:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00239f4:	0f ac d0 10          	shrd   eax,edx,0x10
c00239f8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00239fd:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023a01:	c1 ee 18             	shr    esi,0x18
c0023a04:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023a09:	eb 56                	jmp    c0023a61 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023a0b:	6a 00                	push   0x0
c0023a0d:	6a 3f                	push   0x3f
c0023a0f:	57                   	push   edi
c0023a10:	56                   	push   esi
c0023a11:	e8 96 29 00 00       	call   c00263ac <__umoddi3>
c0023a16:	83 c4 10             	add    esp,0x10
c0023a19:	40                   	inc    eax
c0023a1a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023a1e:	6a 00                	push   0x0
c0023a20:	68 f0 03 00 00       	push   0x3f0
c0023a25:	57                   	push   edi
c0023a26:	56                   	push   esi
c0023a27:	e8 80 28 00 00       	call   c00262ac <__udivdi3>
c0023a2c:	83 c4 10             	add    esp,0x10
c0023a2f:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023a34:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023a3b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023a40:	6a 00                	push   0x0
c0023a42:	6a 3f                	push   0x3f
c0023a44:	57                   	push   edi
c0023a45:	56                   	push   esi
c0023a46:	e8 61 28 00 00       	call   c00262ac <__udivdi3>
c0023a4b:	83 c4 10             	add    esp,0x10
c0023a4e:	89 c6                	mov    esi,eax
c0023a50:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023a55:	83 e6 0f             	and    esi,0xf
c0023a58:	eb 07                	jmp    c0023a61 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023a5a:	31 f6                	xor    esi,esi
c0023a5c:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023a61:	bf 01 00 00 00       	mov    edi,0x1
c0023a66:	50                   	push   eax
c0023a67:	6a 00                	push   0x0
c0023a69:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023a70:	50                   	push   eax
c0023a71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023a75:	e8 6c f0 ff ff       	call   c0022ae6 <IDE::enableIRQs(unsigned char, bool)>
c0023a7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023a7d:	e8 98 fe ff ff       	call   c002391a <ATA::readyForCommand()>
c0023a82:	83 c4 10             	add    esp,0x10
c0023a85:	84 c0                	test   al,al
c0023a87:	0f 84 5a 02 00 00    	je     c0023ce7 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023a8d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023a93:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023a99:	c1 e0 04             	shl    eax,0x4
c0023a9c:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023aa3:	09 c6                	or     esi,eax
c0023aa5:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023aaa:	75 05                	jne    c0023ab1 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023aac:	83 ce a0             	or     esi,0xffffffa0
c0023aaf:	eb 03                	jmp    c0023ab4 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023ab1:	83 ce e0             	or     esi,0xffffffe0
c0023ab4:	89 f0                	mov    eax,esi
c0023ab6:	0f b6 f0             	movzx  esi,al
c0023ab9:	56                   	push   esi
c0023aba:	6a 06                	push   0x6
c0023abc:	51                   	push   ecx
c0023abd:	52                   	push   edx
c0023abe:	e8 17 ee ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ac3:	83 c4 10             	add    esp,0x10
c0023ac6:	6a 00                	push   0x0
c0023ac8:	6a 01                	push   0x1
c0023aca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ad1:	50                   	push   eax
c0023ad2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ad8:	e8 fd ed ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023add:	83 c4 10             	add    esp,0x10
c0023ae0:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023ae5:	75 6e                	jne    c0023b55 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023ae7:	6a 00                	push   0x0
c0023ae9:	6a 08                	push   0x8
c0023aeb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023af2:	50                   	push   eax
c0023af3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023af9:	e8 dc ed ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023afe:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023b03:	50                   	push   eax
c0023b04:	6a 09                	push   0x9
c0023b06:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023b0d:	50                   	push   eax
c0023b0e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023b14:	e8 c1 ed ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b19:	83 c4 20             	add    esp,0x20
c0023b1c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023b21:	50                   	push   eax
c0023b22:	6a 0a                	push   0xa
c0023b24:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023b2b:	50                   	push   eax
c0023b2c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023b32:	e8 a3 ed ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b37:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023b3c:	50                   	push   eax
c0023b3d:	6a 0b                	push   0xb
c0023b3f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023b46:	50                   	push   eax
c0023b47:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023b4d:	e8 88 ed ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b52:	83 c4 20             	add    esp,0x20
c0023b55:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023b5a:	50                   	push   eax
c0023b5b:	6a 02                	push   0x2
c0023b5d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023b64:	50                   	push   eax
c0023b65:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023b6b:	e8 6a ed ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b70:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0023b75:	50                   	push   eax
c0023b76:	6a 03                	push   0x3
c0023b78:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023b7f:	50                   	push   eax
c0023b80:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023b86:	e8 4f ed ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023b8b:	83 c4 20             	add    esp,0x20
c0023b8e:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0023b93:	50                   	push   eax
c0023b94:	6a 04                	push   0x4
c0023b96:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023b9d:	50                   	push   eax
c0023b9e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ba4:	e8 31 ed ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ba9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023bae:	50                   	push   eax
c0023baf:	6a 05                	push   0x5
c0023bb1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023bb8:	50                   	push   eax
c0023bb9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023bbf:	e8 16 ed ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023bc4:	83 c4 20             	add    esp,0x20
c0023bc7:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023bcc:	0f 94 c0             	sete   al
c0023bcf:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023bd4:	74 09                	je     c0023bdf <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0023bd6:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023bdd:	eb 07                	jmp    c0023be6 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023bdf:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023be6:	0f b6 c0             	movzx  eax,al
c0023be9:	50                   	push   eax
c0023bea:	6a 07                	push   0x7
c0023bec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023bf3:	50                   	push   eax
c0023bf4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023bfa:	e8 db ec ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023bff:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0023c03:	83 c4 10             	add    esp,0x10
c0023c06:	85 f6                	test   esi,esi
c0023c08:	0f 84 ba 00 00 00    	je     c0023cc8 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0023c0e:	50                   	push   eax
c0023c0f:	6a 01                	push   0x1
c0023c11:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023c18:	50                   	push   eax
c0023c19:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023c1f:	e8 62 f8 ff ff       	call   c0023486 <IDE::polling(unsigned char, unsigned int)>
c0023c24:	83 c4 10             	add    esp,0x10
c0023c27:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0023c2d:	84 c0                	test   al,al
c0023c2f:	74 2c                	je     c0023c5d <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0023c31:	0f b6 f8             	movzx  edi,al
c0023c34:	0f b6 d2             	movzx  edx,dl
c0023c37:	57                   	push   edi
c0023c38:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0023c3f:	50                   	push   eax
c0023c40:	52                   	push   edx
c0023c41:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023c47:	e8 a4 f6 ff ff       	call   c00232f0 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023c4c:	c7 04 24 40 c5 02 c0 	mov    DWORD PTR [esp],0xc002c540
c0023c53:	e8 bd ee fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0023c58:	e9 87 00 00 00       	jmp    c0023ce4 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0023c5d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0023c62:	74 33                	je     c0023c97 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0023c64:	31 ed                	xor    ebp,ebp
c0023c66:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0023c6a:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0023c6e:	50                   	push   eax
c0023c6f:	50                   	push   eax
c0023c70:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023c77:	50                   	push   eax
c0023c78:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023c7e:	e8 45 ec ff ff       	call   c00228c8 <IDE::getBase(unsigned char)>
c0023c83:	89 c2                	mov    edx,eax
c0023c85:	89 f8                	mov    eax,edi
c0023c87:	66 ef                	out    dx,ax
c0023c89:	45                   	inc    ebp
c0023c8a:	83 c4 10             	add    esp,0x10
c0023c8d:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0023c93:	75 d1                	jne    c0023c66 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0023c95:	eb 23                	jmp    c0023cba <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0023c97:	0f b6 d2             	movzx  edx,dl
c0023c9a:	51                   	push   ecx
c0023c9b:	51                   	push   ecx
c0023c9c:	52                   	push   edx
c0023c9d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ca3:	e8 20 ec ff ff       	call   c00228c8 <IDE::getBase(unsigned char)>
c0023ca8:	b9 00 01 00 00       	mov    ecx,0x100
c0023cad:	89 c2                	mov    edx,eax
c0023caf:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0023cb3:	fc                   	cld    
c0023cb4:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0023cb7:	83 c4 10             	add    esp,0x10
c0023cba:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0023cc2:	4e                   	dec    esi
c0023cc3:	e9 3e ff ff ff       	jmp    c0023c06 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0023cc8:	31 ff                	xor    edi,edi
c0023cca:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023ccf:	74 16                	je     c0023ce7 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023cd1:	50                   	push   eax
c0023cd2:	50                   	push   eax
c0023cd3:	31 c0                	xor    eax,eax
c0023cd5:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0023cda:	0f 94 c0             	sete   al
c0023cdd:	50                   	push   eax
c0023cde:	53                   	push   ebx
c0023cdf:	e8 ec fb ff ff       	call   c00238d0 <ATA::flush(bool)>
c0023ce4:	83 c4 10             	add    esp,0x10
c0023ce7:	83 c4 2c             	add    esp,0x2c
c0023cea:	89 f8                	mov    eax,edi
c0023cec:	5b                   	pop    ebx
c0023ced:	5e                   	pop    esi
c0023cee:	5f                   	pop    edi
c0023cef:	5d                   	pop    ebp
c0023cf0:	c3                   	ret    
c0023cf1:	90                   	nop

c0023cf2 <ATA::read(unsigned long long, int, void*)>:
c0023cf2:	57                   	push   edi
c0023cf3:	b8 04 00 00 00       	mov    eax,0x4
c0023cf8:	56                   	push   esi
c0023cf9:	53                   	push   ebx
c0023cfa:	83 ec 10             	sub    esp,0x10
c0023cfd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023d01:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023d05:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023d08:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023d0c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023d10:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023d16:	77 3b                	ja     c0023d53 <ATA::read(unsigned long long, int, void*)+0x61>
c0023d18:	b8 06 00 00 00       	mov    eax,0x6
c0023d1d:	85 d2                	test   edx,edx
c0023d1f:	74 32                	je     c0023d53 <ATA::read(unsigned long long, int, void*)+0x61>
c0023d21:	50                   	push   eax
c0023d22:	50                   	push   eax
c0023d23:	6a 00                	push   0x0
c0023d25:	52                   	push   edx
c0023d26:	53                   	push   ebx
c0023d27:	57                   	push   edi
c0023d28:	56                   	push   esi
c0023d29:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023d2d:	e8 38 fc ff ff       	call   c002396a <ATA::access(unsigned long long, int, void*, bool)>
c0023d32:	83 c4 20             	add    esp,0x20
c0023d35:	85 c0                	test   eax,eax
c0023d37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023d3b:	75 11                	jne    c0023d4e <ATA::read(unsigned long long, int, void*)+0x5c>
c0023d3d:	01 1d e8 1e 03 c0    	add    DWORD PTR ds:0xc0031ee8,ebx
c0023d43:	e8 32 cc fe ff       	call   c001097a <VgaText::updateDiskUsage()>
c0023d48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023d4c:	eb 05                	jmp    c0023d53 <ATA::read(unsigned long long, int, void*)+0x61>
c0023d4e:	b8 01 00 00 00       	mov    eax,0x1
c0023d53:	83 c4 10             	add    esp,0x10
c0023d56:	5b                   	pop    ebx
c0023d57:	5e                   	pop    esi
c0023d58:	5f                   	pop    edi
c0023d59:	c3                   	ret    

c0023d5a <ATA::write(unsigned long long, int, void*)>:
c0023d5a:	57                   	push   edi
c0023d5b:	b8 04 00 00 00       	mov    eax,0x4
c0023d60:	56                   	push   esi
c0023d61:	53                   	push   ebx
c0023d62:	83 ec 10             	sub    esp,0x10
c0023d65:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023d69:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023d6d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023d70:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023d74:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023d78:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023d7e:	77 3b                	ja     c0023dbb <ATA::write(unsigned long long, int, void*)+0x61>
c0023d80:	b8 06 00 00 00       	mov    eax,0x6
c0023d85:	85 d2                	test   edx,edx
c0023d87:	74 32                	je     c0023dbb <ATA::write(unsigned long long, int, void*)+0x61>
c0023d89:	50                   	push   eax
c0023d8a:	50                   	push   eax
c0023d8b:	6a 01                	push   0x1
c0023d8d:	52                   	push   edx
c0023d8e:	53                   	push   ebx
c0023d8f:	57                   	push   edi
c0023d90:	56                   	push   esi
c0023d91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023d95:	e8 d0 fb ff ff       	call   c002396a <ATA::access(unsigned long long, int, void*, bool)>
c0023d9a:	83 c4 20             	add    esp,0x20
c0023d9d:	85 c0                	test   eax,eax
c0023d9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023da3:	75 11                	jne    c0023db6 <ATA::write(unsigned long long, int, void*)+0x5c>
c0023da5:	01 1d e4 1e 03 c0    	add    DWORD PTR ds:0xc0031ee4,ebx
c0023dab:	e8 ca cb fe ff       	call   c001097a <VgaText::updateDiskUsage()>
c0023db0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023db4:	eb 05                	jmp    c0023dbb <ATA::write(unsigned long long, int, void*)+0x61>
c0023db6:	b8 01 00 00 00       	mov    eax,0x1
c0023dbb:	83 c4 10             	add    esp,0x10
c0023dbe:	5b                   	pop    ebx
c0023dbf:	5e                   	pop    esi
c0023dc0:	5f                   	pop    edi
c0023dc1:	c3                   	ret    

c0023dc2 <ATA::detectCHS()>:
c0023dc2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023dc6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0023dcc:	c1 e0 06             	shl    eax,0x6
c0023dcf:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0023dd5:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0023ddf:	c7 44 24 04 4b c5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c54b
c0023de7:	e9 51 62 ff ff       	jmp    c001a03d <Krnl::panic(char const*)>

c0023dec <ATA::open(int, int, void*)>:
c0023dec:	53                   	push   ebx
c0023ded:	83 ec 08             	sub    esp,0x8
c0023df0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023df4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023df8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023dfc:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023e02:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023e08:	c1 e0 06             	shl    eax,0x6
c0023e0b:	01 d0                	add    eax,edx
c0023e0d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0023e14:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0023e1a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0023e21:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023e2b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0023e31:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0023e38:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0023e3f:	75 0c                	jne    c0023e4d <ATA::open(int, int, void*)+0x61>
c0023e41:	83 ec 0c             	sub    esp,0xc
c0023e44:	53                   	push   ebx
c0023e45:	e8 78 ff ff ff       	call   c0023dc2 <ATA::detectCHS()>
c0023e4a:	83 c4 10             	add    esp,0x10
c0023e4d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023e53:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023e59:	c1 e0 06             	shl    eax,0x6
c0023e5c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0023e63:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023e6d:	d1 e8                	shr    eax,1
c0023e6f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0023e75:	6a 04                	push   0x4
c0023e77:	6a 0c                	push   0xc
c0023e79:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e80:	50                   	push   eax
c0023e81:	52                   	push   edx
c0023e82:	e8 53 ea ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e87:	90                   	nop
c0023e88:	90                   	nop
c0023e89:	6a 00                	push   0x0
c0023e8b:	6a 0c                	push   0xc
c0023e8d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e94:	50                   	push   eax
c0023e95:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e9b:	e8 3a ea ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ea0:	83 c4 14             	add    esp,0x14
c0023ea3:	53                   	push   ebx
c0023ea4:	e8 1f 05 ff ff       	call   c00143c8 <PhysicalDisk::startCache()>
c0023ea9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023eac:	e8 39 26 ff ff       	call   c00164ea <createPartitionsForDisk(PhysicalDisk*)>
c0023eb1:	31 c0                	xor    eax,eax
c0023eb3:	83 c4 18             	add    esp,0x18
c0023eb6:	5b                   	pop    ebx
c0023eb7:	c3                   	ret    

c0023eb8 <ATAPI::write(unsigned long long, int, void*)>:
c0023eb8:	b8 03 00 00 00       	mov    eax,0x3
c0023ebd:	c3                   	ret    

c0023ebe <ATAPI::close(int, int, void*)>:
c0023ebe:	83 ec 0c             	sub    esp,0xc
c0023ec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ec5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023ecb:	85 c0                	test   eax,eax
c0023ecd:	74 0c                	je     c0023edb <ATAPI::close(int, int, void*)+0x1d>
c0023ecf:	83 ec 0c             	sub    esp,0xc
c0023ed2:	8b 10                	mov    edx,DWORD PTR [eax]
c0023ed4:	50                   	push   eax
c0023ed5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023ed8:	83 c4 10             	add    esp,0x10
c0023edb:	31 c0                	xor    eax,eax
c0023edd:	83 c4 0c             	add    esp,0xc
c0023ee0:	c3                   	ret    
c0023ee1:	90                   	nop

c0023ee2 <ATAPI::ATAPI()>:
c0023ee2:	83 ec 0c             	sub    esp,0xc
c0023ee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ee9:	83 ec 04             	sub    esp,0x4
c0023eec:	68 00 08 00 00       	push   0x800
c0023ef1:	68 85 c6 02 c0       	push   0xc002c685
c0023ef6:	50                   	push   eax
c0023ef7:	e8 64 04 ff ff       	call   c0014360 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023efc:	83 c4 10             	add    esp,0x10
c0023eff:	ba a0 c5 02 c0       	mov    edx,0xc002c5a0
c0023f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f08:	89 10                	mov    DWORD PTR [eax],edx
c0023f0a:	90                   	nop
c0023f0b:	83 c4 0c             	add    esp,0xc
c0023f0e:	c3                   	ret    
c0023f0f:	90                   	nop

c0023f10 <ATAPI::readyForCommand()>:
c0023f10:	56                   	push   esi
c0023f11:	53                   	push   ebx
c0023f12:	31 db                	xor    ebx,ebx
c0023f14:	50                   	push   eax
c0023f15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023f19:	50                   	push   eax
c0023f1a:	6a 0c                	push   0xc
c0023f1c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023f23:	50                   	push   eax
c0023f24:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023f2a:	e8 6b ea ff ff       	call   c002299a <IDE::read(unsigned char, unsigned char)>
c0023f2f:	83 c4 10             	add    esp,0x10
c0023f32:	a8 88                	test   al,0x88
c0023f34:	74 23                	je     c0023f59 <ATAPI::readyForCommand()+0x49>
c0023f36:	43                   	inc    ebx
c0023f37:	83 fb 63             	cmp    ebx,0x63
c0023f3a:	7e dd                	jle    c0023f19 <ATAPI::readyForCommand()+0x9>
c0023f3c:	51                   	push   ecx
c0023f3d:	51                   	push   ecx
c0023f3e:	6a 00                	push   0x0
c0023f40:	68 40 42 0f 00       	push   0xf4240
c0023f45:	e8 d2 9c ff ff       	call   c001dc1c <nanoSleep(unsigned long long)>
c0023f4a:	83 c4 10             	add    esp,0x10
c0023f4d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023f53:	75 c4                	jne    c0023f19 <ATAPI::readyForCommand()+0x9>
c0023f55:	31 c0                	xor    eax,eax
c0023f57:	eb 02                	jmp    c0023f5b <ATAPI::readyForCommand()+0x4b>
c0023f59:	b0 01                	mov    al,0x1
c0023f5b:	5a                   	pop    edx
c0023f5c:	5b                   	pop    ebx
c0023f5d:	5e                   	pop    esi
c0023f5e:	c3                   	ret    
c0023f5f:	90                   	nop

c0023f60 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0023f60:	55                   	push   ebp
c0023f61:	57                   	push   edi
c0023f62:	56                   	push   esi
c0023f63:	53                   	push   ebx
c0023f64:	83 ec 20             	sub    esp,0x20
c0023f67:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0023f6b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0023f6f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0023f73:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023f77:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0023f7b:	6a 01                	push   0x1
c0023f7d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023f84:	50                   	push   eax
c0023f85:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023f8b:	e8 56 eb ff ff       	call   c0022ae6 <IDE::enableIRQs(unsigned char, bool)>
c0023f90:	5e                   	pop    esi
c0023f91:	58                   	pop    eax
c0023f92:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023f99:	50                   	push   eax
c0023f9a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023fa0:	e8 0f e9 ff ff       	call   c00228b4 <IDE::prepareInterrupt(unsigned char)>
c0023fa5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023fa8:	e8 63 ff ff ff       	call   c0023f10 <ATAPI::readyForCommand()>
c0023fad:	83 c4 10             	add    esp,0x10
c0023fb0:	84 c0                	test   al,al
c0023fb2:	75 0a                	jne    c0023fbe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0023fb4:	bb 01 00 00 00       	mov    ebx,0x1
c0023fb9:	e9 57 02 00 00       	jmp    c0024215 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023fbe:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0023fc4:	c1 e0 04             	shl    eax,0x4
c0023fc7:	0f b6 c0             	movzx  eax,al
c0023fca:	50                   	push   eax
c0023fcb:	6a 06                	push   0x6
c0023fcd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023fd4:	50                   	push   eax
c0023fd5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023fdb:	e8 fa e8 ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fe0:	6a 00                	push   0x0
c0023fe2:	6a 01                	push   0x1
c0023fe4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023feb:	50                   	push   eax
c0023fec:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023ff2:	e8 e3 e8 ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ff7:	83 c4 20             	add    esp,0x20
c0023ffa:	0f b6 c3             	movzx  eax,bl
c0023ffd:	0f b6 df             	movzx  ebx,bh
c0024000:	50                   	push   eax
c0024001:	6a 04                	push   0x4
c0024003:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002400a:	50                   	push   eax
c002400b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024011:	e8 c4 e8 ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024016:	53                   	push   ebx
c0024017:	6a 05                	push   0x5
c0024019:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024020:	50                   	push   eax
c0024021:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024027:	e8 ae e8 ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c002402c:	83 c4 20             	add    esp,0x20
c002402f:	68 a0 00 00 00       	push   0xa0
c0024034:	6a 07                	push   0x7
c0024036:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002403d:	50                   	push   eax
c002403e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024044:	e8 91 e8 ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024049:	83 c4 0c             	add    esp,0xc
c002404c:	6a 01                	push   0x1
c002404e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024055:	50                   	push   eax
c0024056:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002405c:	e8 25 f4 ff ff       	call   c0023486 <IDE::polling(unsigned char, unsigned int)>
c0024061:	83 c4 10             	add    esp,0x10
c0024064:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002406a:	84 c0                	test   al,al
c002406c:	74 23                	je     c0024091 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002406e:	0f b6 d8             	movzx  ebx,al
c0024071:	0f b6 d2             	movzx  edx,dl
c0024074:	53                   	push   ebx
c0024075:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c002407c:	50                   	push   eax
c002407d:	52                   	push   edx
c002407e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024084:	e8 67 f2 ff ff       	call   c00232f0 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024089:	83 c4 10             	add    esp,0x10
c002408c:	e9 84 01 00 00       	jmp    c0024215 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024091:	0f b6 d2             	movzx  edx,dl
c0024094:	53                   	push   ebx
c0024095:	53                   	push   ebx
c0024096:	52                   	push   edx
c0024097:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002409d:	e8 26 e8 ff ff       	call   c00228c8 <IDE::getBase(unsigned char)>
c00240a2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00240a6:	b9 06 00 00 00       	mov    ecx,0x6
c00240ab:	89 c2                	mov    edx,eax
c00240ad:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00240b0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00240b4:	83 c4 10             	add    esp,0x10
c00240b7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00240bd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00240c4:	85 db                	test   ebx,ebx
c00240c6:	0f 84 ec 00 00 00    	je     c00241b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00240cc:	51                   	push   ecx
c00240cd:	51                   	push   ecx
c00240ce:	52                   	push   edx
c00240cf:	50                   	push   eax
c00240d0:	e8 73 e9 ff ff       	call   c0022a48 <IDE::waitInterrupt(unsigned char)>
c00240d5:	83 c4 10             	add    esp,0x10
c00240d8:	84 c0                	test   al,al
c00240da:	0f 84 d4 fe ff ff    	je     c0023fb4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00240e0:	56                   	push   esi
c00240e1:	56                   	push   esi
c00240e2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00240e9:	50                   	push   eax
c00240ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00240f0:	e8 bf e7 ff ff       	call   c00228b4 <IDE::prepareInterrupt(unsigned char)>
c00240f5:	83 c4 0c             	add    esp,0xc
c00240f8:	6a 04                	push   0x4
c00240fa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024101:	50                   	push   eax
c0024102:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024108:	e8 8d e8 ff ff       	call   c002299a <IDE::read(unsigned char, unsigned char)>
c002410d:	83 c4 0c             	add    esp,0xc
c0024110:	89 c6                	mov    esi,eax
c0024112:	6a 05                	push   0x5
c0024114:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002411b:	50                   	push   eax
c002411c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024122:	e8 73 e8 ff ff       	call   c002299a <IDE::read(unsigned char, unsigned char)>
c0024127:	89 f1                	mov    ecx,esi
c0024129:	0f b6 c0             	movzx  eax,al
c002412c:	0f b6 f1             	movzx  esi,cl
c002412f:	c1 e0 08             	shl    eax,0x8
c0024132:	09 c6                	or     esi,eax
c0024134:	d1 fe                	sar    esi,1
c0024136:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002413a:	83 c4 10             	add    esp,0x10
c002413d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024142:	74 41                	je     c0024185 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024144:	31 c9                	xor    ecx,ecx
c0024146:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002414c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024153:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0024157:	75 0a                	jne    c0024163 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024159:	01 c9                	add    ecx,ecx
c002415b:	01 cd                	add    ebp,ecx
c002415d:	4b                   	dec    ebx
c002415e:	e9 54 ff ff ff       	jmp    c00240b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024163:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024168:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002416c:	51                   	push   ecx
c002416d:	51                   	push   ecx
c002416e:	52                   	push   edx
c002416f:	50                   	push   eax
c0024170:	e8 53 e7 ff ff       	call   c00228c8 <IDE::getBase(unsigned char)>
c0024175:	89 c2                	mov    edx,eax
c0024177:	89 f0                	mov    eax,esi
c0024179:	66 ef                	out    dx,ax
c002417b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002417f:	83 c4 10             	add    esp,0x10
c0024182:	41                   	inc    ecx
c0024183:	eb c1                	jmp    c0024146 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024185:	31 f6                	xor    esi,esi
c0024187:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002418d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024194:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024198:	75 06                	jne    c00241a0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002419a:	01 f6                	add    esi,esi
c002419c:	01 f5                	add    ebp,esi
c002419e:	eb bd                	jmp    c002415d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00241a0:	51                   	push   ecx
c00241a1:	51                   	push   ecx
c00241a2:	52                   	push   edx
c00241a3:	50                   	push   eax
c00241a4:	e8 1f e7 ff ff       	call   c00228c8 <IDE::getBase(unsigned char)>
c00241a9:	89 c2                	mov    edx,eax
c00241ab:	66 ed                	in     ax,dx
c00241ad:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00241b2:	83 c4 10             	add    esp,0x10
c00241b5:	46                   	inc    esi
c00241b6:	eb cf                	jmp    c0024187 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00241b8:	51                   	push   ecx
c00241b9:	51                   	push   ecx
c00241ba:	52                   	push   edx
c00241bb:	50                   	push   eax
c00241bc:	e8 87 e8 ff ff       	call   c0022a48 <IDE::waitInterrupt(unsigned char)>
c00241c1:	83 c4 10             	add    esp,0x10
c00241c4:	84 c0                	test   al,al
c00241c6:	0f 84 e8 fd ff ff    	je     c0023fb4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00241cc:	bb a0 86 01 00       	mov    ebx,0x186a0
c00241d1:	52                   	push   edx
c00241d2:	52                   	push   edx
c00241d3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00241da:	50                   	push   eax
c00241db:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00241e1:	e8 ce e6 ff ff       	call   c00228b4 <IDE::prepareInterrupt(unsigned char)>
c00241e6:	83 c4 10             	add    esp,0x10
c00241e9:	50                   	push   eax
c00241ea:	50                   	push   eax
c00241eb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00241f2:	50                   	push   eax
c00241f3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00241f9:	e8 ca e6 ff ff       	call   c00228c8 <IDE::getBase(unsigned char)>
c00241fe:	8d 50 07             	lea    edx,[eax+0x7]
c0024201:	ec                   	in     al,dx
c0024202:	83 c4 10             	add    esp,0x10
c0024205:	a8 88                	test   al,0x88
c0024207:	74 0a                	je     c0024213 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024209:	4b                   	dec    ebx
c002420a:	75 dd                	jne    c00241e9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002420c:	bb 02 00 00 00       	mov    ebx,0x2
c0024211:	eb 02                	jmp    c0024215 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024213:	31 db                	xor    ebx,ebx
c0024215:	83 c4 1c             	add    esp,0x1c
c0024218:	89 d8                	mov    eax,ebx
c002421a:	5b                   	pop    ebx
c002421b:	5e                   	pop    esi
c002421c:	5f                   	pop    edi
c002421d:	5d                   	pop    ebp
c002421e:	c3                   	ret    
c002421f:	90                   	nop

c0024220 <ATAPI::diskRemoved()>:
c0024220:	83 ec 18             	sub    esp,0x18
c0024223:	68 91 c6 02 c0       	push   0xc002c691
c0024228:	e8 e8 e8 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c002422d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024231:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024238:	83 c4 1c             	add    esp,0x1c
c002423b:	c3                   	ret    

c002423c <ATAPI::eject()>:
c002423c:	57                   	push   edi
c002423d:	b9 03 00 00 00       	mov    ecx,0x3
c0024242:	53                   	push   ebx
c0024243:	83 ec 14             	sub    esp,0x14
c0024246:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002424a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002424e:	fc                   	cld    
c002424f:	31 c0                	xor    eax,eax
c0024251:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024253:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024258:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002425d:	50                   	push   eax
c002425e:	50                   	push   eax
c002425f:	6a 00                	push   0x0
c0024261:	6a 00                	push   0x0
c0024263:	6a 00                	push   0x0
c0024265:	6a 02                	push   0x2
c0024267:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002426b:	50                   	push   eax
c002426c:	53                   	push   ebx
c002426d:	e8 ee fc ff ff       	call   c0023f60 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024272:	83 c4 14             	add    esp,0x14
c0024275:	53                   	push   ebx
c0024276:	e8 a5 ff ff ff       	call   c0024220 <ATAPI::diskRemoved()>
c002427b:	83 c4 24             	add    esp,0x24
c002427e:	31 c0                	xor    eax,eax
c0024280:	5b                   	pop    ebx
c0024281:	5f                   	pop    edi
c0024282:	c3                   	ret    
c0024283:	90                   	nop

c0024284 <ATAPI::diskInserted()>:
c0024284:	53                   	push   ebx
c0024285:	83 ec 14             	sub    esp,0x14
c0024288:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002428c:	68 a8 c6 02 c0       	push   0xc002c6a8
c0024291:	e8 7f e8 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0024296:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c002429d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00242a0:	e8 23 01 ff ff       	call   c00143c8 <PhysicalDisk::startCache()>
c00242a5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00242a9:	83 c4 18             	add    esp,0x18
c00242ac:	5b                   	pop    ebx
c00242ad:	e9 38 22 ff ff       	jmp    c00164ea <createPartitionsForDisk(PhysicalDisk*)>

c00242b2 <ATAPI::detectMedia()>:
c00242b2:	56                   	push   esi
c00242b3:	53                   	push   ebx
c00242b4:	83 ec 28             	sub    esp,0x28
c00242b7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00242bb:	6a 0c                	push   0xc
c00242bd:	6a 00                	push   0x0
c00242bf:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00242c3:	56                   	push   esi
c00242c4:	e8 af c4 fd ff       	call   c0000778 <memset>
c00242c9:	58                   	pop    eax
c00242ca:	5a                   	pop    edx
c00242cb:	6a 00                	push   0x0
c00242cd:	6a 00                	push   0x0
c00242cf:	6a 00                	push   0x0
c00242d1:	6a 00                	push   0x0
c00242d3:	56                   	push   esi
c00242d4:	53                   	push   ebx
c00242d5:	e8 86 fc ff ff       	call   c0023f60 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00242da:	83 c4 1c             	add    esp,0x1c
c00242dd:	6a 0c                	push   0xc
c00242df:	6a 00                	push   0x0
c00242e1:	56                   	push   esi
c00242e2:	e8 91 c4 fd ff       	call   c0000778 <memset>
c00242e7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00242ec:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00242f1:	59                   	pop    ecx
c00242f2:	58                   	pop    eax
c00242f3:	6a 01                	push   0x1
c00242f5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00242f9:	50                   	push   eax
c00242fa:	6a 00                	push   0x0
c00242fc:	6a 12                	push   0x12
c00242fe:	56                   	push   esi
c00242ff:	53                   	push   ebx
c0024300:	e8 5b fc ff ff       	call   c0023f60 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024305:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024309:	83 c4 20             	add    esp,0x20
c002430c:	83 e0 7f             	and    eax,0x7f
c002430f:	3c 70                	cmp    al,0x70
c0024311:	74 15                	je     c0024328 <ATAPI::detectMedia()+0x76>
c0024313:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002431a:	75 0c                	jne    c0024328 <ATAPI::detectMedia()+0x76>
c002431c:	83 ec 0c             	sub    esp,0xc
c002431f:	53                   	push   ebx
c0024320:	e8 5f ff ff ff       	call   c0024284 <ATAPI::diskInserted()>
c0024325:	83 c4 10             	add    esp,0x10
c0024328:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002432c:	83 e0 0f             	and    eax,0xf
c002432f:	3c 02                	cmp    al,0x2
c0024331:	75 1b                	jne    c002434e <ATAPI::detectMedia()+0x9c>
c0024333:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024338:	75 2d                	jne    c0024367 <ATAPI::detectMedia()+0xb5>
c002433a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024341:	74 24                	je     c0024367 <ATAPI::detectMedia()+0xb5>
c0024343:	83 ec 0c             	sub    esp,0xc
c0024346:	53                   	push   ebx
c0024347:	e8 d4 fe ff ff       	call   c0024220 <ATAPI::diskRemoved()>
c002434c:	eb 16                	jmp    c0024364 <ATAPI::detectMedia()+0xb2>
c002434e:	84 c0                	test   al,al
c0024350:	75 15                	jne    c0024367 <ATAPI::detectMedia()+0xb5>
c0024352:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024359:	75 0c                	jne    c0024367 <ATAPI::detectMedia()+0xb5>
c002435b:	83 ec 0c             	sub    esp,0xc
c002435e:	53                   	push   ebx
c002435f:	e8 20 ff ff ff       	call   c0024284 <ATAPI::diskInserted()>
c0024364:	83 c4 10             	add    esp,0x10
c0024367:	83 c4 24             	add    esp,0x24
c002436a:	5b                   	pop    ebx
c002436b:	5e                   	pop    esi
c002436c:	c3                   	ret    
c002436d:	90                   	nop

c002436e <ATAPI::open(int, int, void*)>:
c002436e:	53                   	push   ebx
c002436f:	83 ec 08             	sub    esp,0x8
c0024372:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024376:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002437a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002437e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024384:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002438a:	c1 e0 06             	shl    eax,0x6
c002438d:	01 d0                	add    eax,edx
c002438f:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024396:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002439c:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00243a3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00243ad:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00243b3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00243ba:	6a 04                	push   0x4
c00243bc:	6a 0c                	push   0xc
c00243be:	51                   	push   ecx
c00243bf:	52                   	push   edx
c00243c0:	e8 15 e5 ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243c5:	90                   	nop
c00243c6:	90                   	nop
c00243c7:	6a 00                	push   0x0
c00243c9:	6a 0c                	push   0xc
c00243cb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243d2:	50                   	push   eax
c00243d3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243d9:	e8 fc e4 ff ff       	call   c00228da <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243de:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00243e5:	83 c4 14             	add    esp,0x14
c00243e8:	53                   	push   ebx
c00243e9:	e8 c4 fe ff ff       	call   c00242b2 <ATAPI::detectMedia()>
c00243ee:	31 c0                	xor    eax,eax
c00243f0:	83 c4 18             	add    esp,0x18
c00243f3:	5b                   	pop    ebx
c00243f4:	c3                   	ret    
c00243f5:	90                   	nop

c00243f6 <ATAPI::read(unsigned long long, int, void*)>:
c00243f6:	55                   	push   ebp
c00243f7:	57                   	push   edi
c00243f8:	56                   	push   esi
c00243f9:	53                   	push   ebx
c00243fa:	83 ec 1c             	sub    esp,0x1c
c00243fd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024401:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024405:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024409:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024410:	74 41                	je     c0024453 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024412:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024416:	b9 03 00 00 00       	mov    ecx,0x3
c002441b:	fc                   	cld    
c002441c:	31 c0                	xor    eax,eax
c002441e:	86 fb                	xchg   bl,bh
c0024420:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024422:	c1 c3 10             	rol    ebx,0x10
c0024425:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002442a:	89 e8                	mov    eax,ebp
c002442c:	86 fb                	xchg   bl,bh
c002442e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024432:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024436:	50                   	push   eax
c0024437:	50                   	push   eax
c0024438:	55                   	push   ebp
c0024439:	c1 e5 0b             	shl    ebp,0xb
c002443c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024440:	6a 00                	push   0x0
c0024442:	55                   	push   ebp
c0024443:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024447:	50                   	push   eax
c0024448:	56                   	push   esi
c0024449:	e8 12 fb ff ff       	call   c0023f60 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002444e:	83 c4 20             	add    esp,0x20
c0024451:	eb 1a                	jmp    c002446d <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024453:	83 ec 0c             	sub    esp,0xc
c0024456:	56                   	push   esi
c0024457:	e8 56 fe ff ff       	call   c00242b2 <ATAPI::detectMedia()>
c002445c:	83 c4 10             	add    esp,0x10
c002445f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024466:	75 aa                	jne    c0024412 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024468:	b8 02 00 00 00       	mov    eax,0x2
c002446d:	83 c4 1c             	add    esp,0x1c
c0024470:	5b                   	pop    ebx
c0024471:	5e                   	pop    esi
c0024472:	5f                   	pop    edi
c0024473:	5d                   	pop    ebp
c0024474:	c3                   	ret    
c0024475:	90                   	nop

c0024476 <SATA::close(int, int, void*)>:
c0024476:	83 ec 0c             	sub    esp,0xc
c0024479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002447d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024483:	85 c0                	test   eax,eax
c0024485:	74 0c                	je     c0024493 <SATA::close(int, int, void*)+0x1d>
c0024487:	83 ec 0c             	sub    esp,0xc
c002448a:	8b 10                	mov    edx,DWORD PTR [eax]
c002448c:	50                   	push   eax
c002448d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024490:	83 c4 10             	add    esp,0x10
c0024493:	31 c0                	xor    eax,eax
c0024495:	83 c4 0c             	add    esp,0xc
c0024498:	c3                   	ret    
c0024499:	90                   	nop

c002449a <SATA::powerSaving(PowerSavingLevel)>:
c002449a:	c3                   	ret    
c002449b:	90                   	nop

c002449c <SATA::open(int, int, void*)>:
c002449c:	56                   	push   esi
c002449d:	53                   	push   ebx
c002449e:	50                   	push   eax
c002449f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00244a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00244a7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00244b1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00244b7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00244c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00244c5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00244cf:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00244d5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00244dc:	e8 02 ba fe ff       	call   c000fee3 <Phys::allocatePage()>
c00244e1:	89 c6                	mov    esi,eax
c00244e3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00244e9:	81 c6 00 10 00 00    	add    esi,0x1000
c00244ef:	e8 ef b9 fe ff       	call   c000fee3 <Phys::allocatePage()>
c00244f4:	39 c6                	cmp    esi,eax
c00244f6:	74 10                	je     c0024508 <SATA::open(int, int, void*)+0x6c>
c00244f8:	83 ec 0c             	sub    esp,0xc
c00244fb:	68 d0 c5 02 c0       	push   0xc002c5d0
c0024500:	e8 38 5b ff ff       	call   c001a03d <Krnl::panic(char const*)>
c0024505:	83 c4 10             	add    esp,0x10
c0024508:	83 ec 0c             	sub    esp,0xc
c002450b:	6a 02                	push   0x2
c002450d:	e8 13 d6 fe ff       	call   c0011b25 <Virt::allocateKernelVirtualPages(int)>
c0024512:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024518:	e8 98 d7 fe ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c002451d:	6a 03                	push   0x3
c002451f:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024525:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002452b:	50                   	push   eax
c002452c:	e8 bf dc fe ff       	call   c00121f0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024531:	83 c4 14             	add    esp,0x14
c0024534:	53                   	push   ebx
c0024535:	e8 8e fe fe ff       	call   c00143c8 <PhysicalDisk::startCache()>
c002453a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002453d:	e8 a8 1f ff ff       	call   c00164ea <createPartitionsForDisk(PhysicalDisk*)>
c0024542:	83 c4 14             	add    esp,0x14
c0024545:	31 c0                	xor    eax,eax
c0024547:	5b                   	pop    ebx
c0024548:	5e                   	pop    esi
c0024549:	c3                   	ret    

c002454a <SATA::SATA()>:
c002454a:	83 ec 0c             	sub    esp,0xc
c002454d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024551:	83 ec 04             	sub    esp,0x4
c0024554:	68 00 02 00 00       	push   0x200
c0024559:	68 e4 c5 02 c0       	push   0xc002c5e4
c002455e:	50                   	push   eax
c002455f:	e8 fc fd fe ff       	call   c0014360 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024564:	83 c4 10             	add    esp,0x10
c0024567:	ba 54 c6 02 c0       	mov    edx,0xc002c654
c002456c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024570:	89 10                	mov    DWORD PTR [eax],edx
c0024572:	90                   	nop
c0024573:	83 c4 0c             	add    esp,0xc
c0024576:	c3                   	ret    
c0024577:	90                   	nop

c0024578 <SATA::access(unsigned long long, int, void*, bool)>:
c0024578:	55                   	push   ebp
c0024579:	57                   	push   edi
c002457a:	56                   	push   esi
c002457b:	53                   	push   ebx
c002457c:	83 ec 2c             	sub    esp,0x2c
c002457f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024583:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024587:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002458b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c002458f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024593:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002459c:	7e 10                	jle    c00245ae <SATA::access(unsigned long long, int, void*, bool)+0x36>
c002459e:	83 ec 0c             	sub    esp,0xc
c00245a1:	68 f4 c5 02 c0       	push   0xc002c5f4
c00245a6:	e8 92 5a ff ff       	call   c001a03d <Krnl::panic(char const*)>
c00245ab:	83 c4 10             	add    esp,0x10
c00245ae:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c00245b4:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00245ba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00245c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00245c4:	89 f0                	mov    eax,esi
c00245c6:	c1 e0 07             	shl    eax,0x7
c00245c9:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00245cd:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00245d7:	53                   	push   ebx
c00245d8:	8d 46 02             	lea    eax,[esi+0x2]
c00245db:	53                   	push   ebx
c00245dc:	c1 e0 07             	shl    eax,0x7
c00245df:	bb 01 00 00 00       	mov    ebx,0x1
c00245e4:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c00245e8:	50                   	push   eax
c00245e9:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00245ef:	e8 aa ef ff ff       	call   c002359e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00245f4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00245f8:	83 c4 10             	add    esp,0x10
c00245fb:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024600:	0f 84 ce 01 00 00    	je     c00247d4 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024606:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002460a:	c1 e0 09             	shl    eax,0x9
c002460d:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024612:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024616:	74 17                	je     c002462f <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024618:	51                   	push   ecx
c0024619:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002461d:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024621:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024627:	e8 18 c1 fd ff       	call   c0000744 <memcpy>
c002462c:	83 c4 10             	add    esp,0x10
c002462f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024635:	8d 46 02             	lea    eax,[esi+0x2]
c0024638:	c1 e0 07             	shl    eax,0x7
c002463b:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c002463f:	8b 00                	mov    eax,DWORD PTR [eax]
c0024641:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024647:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002464d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024651:	c1 e1 05             	shl    ecx,0x5
c0024654:	01 c8                	add    eax,ecx
c0024656:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002465a:	8a 18                	mov    bl,BYTE PTR [eax]
c002465c:	83 e1 01             	and    ecx,0x1
c002465f:	83 e3 bf             	and    ebx,0xffffffbf
c0024662:	c1 e1 06             	shl    ecx,0x6
c0024665:	09 d9                	or     ecx,ebx
c0024667:	88 08                	mov    BYTE PTR [eax],cl
c0024669:	8b 08                	mov    ecx,DWORD PTR [eax]
c002466b:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024671:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024677:	89 08                	mov    DWORD PTR [eax],ecx
c0024679:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002467f:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024685:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002468b:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002468e:	52                   	push   edx
c002468f:	68 90 00 00 00       	push   0x90
c0024694:	6a 00                	push   0x0
c0024696:	53                   	push   ebx
c0024697:	e8 dc c0 fd ff       	call   c0000778 <memset>
c002469c:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c00246a2:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c00246a6:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00246ac:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00246b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00246b4:	83 c4 10             	add    esp,0x10
c00246b7:	8d 48 ff             	lea    ecx,[eax-0x1]
c00246ba:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00246c0:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c00246c6:	25 00 00 c0 ff       	and    eax,0xffc00000
c00246cb:	09 c8                	or     eax,ecx
c00246cd:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00246d3:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00246d6:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00246dd:	66 25 00 7f          	and    ax,0x7f00
c00246e1:	66 0d 27 80          	or     ax,0x8027
c00246e5:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c00246ea:	66 89 03             	mov    WORD PTR [ebx],ax
c00246ed:	19 c0                	sbb    eax,eax
c00246ef:	83 e0 f0             	and    eax,0xfffffff0
c00246f2:	83 c0 35             	add    eax,0x35
c00246f5:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c00246f8:	89 f8                	mov    eax,edi
c00246fa:	c1 e8 10             	shr    eax,0x10
c00246fd:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024700:	89 f8                	mov    eax,edi
c0024702:	c1 e8 18             	shr    eax,0x18
c0024705:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024708:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002470c:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002470f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024713:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024716:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002471a:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002471e:	89 f3                	mov    ebx,esi
c0024720:	31 c0                	xor    eax,eax
c0024722:	c1 e3 07             	shl    ebx,0x7
c0024725:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024729:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c002472f:	80 e1 88             	and    cl,0x88
c0024732:	74 0a                	je     c002473e <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024734:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024739:	74 0a                	je     c0024745 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c002473b:	40                   	inc    eax
c002473c:	eb eb                	jmp    c0024729 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c002473e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024743:	75 0a                	jne    c002474f <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024745:	83 ec 0c             	sub    esp,0xc
c0024748:	68 2d c6 02 c0       	push   0xc002c62d
c002474d:	eb 56                	jmp    c00247a5 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c002474f:	b8 01 00 00 00       	mov    eax,0x1
c0024754:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024758:	c1 e6 07             	shl    esi,0x7
c002475b:	d3 e0                	shl    eax,cl
c002475d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024761:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024767:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c002476d:	85 c8                	test   eax,ecx
c002476f:	74 20                	je     c0024791 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024771:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024777:	0f ba e1 1e          	bt     ecx,0x1e
c002477b:	73 ea                	jae    c0024767 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c002477d:	83 ec 0c             	sub    esp,0xc
c0024780:	31 db                	xor    ebx,ebx
c0024782:	68 3b c6 02 c0       	push   0xc002c63b
c0024787:	e8 b1 58 ff ff       	call   c001a03d <Krnl::panic(char const*)>
c002478c:	83 c4 10             	add    esp,0x10
c002478f:	eb 43                	jmp    c00247d4 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024791:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024797:	0f ba e0 1e          	bt     eax,0x1e
c002479b:	73 17                	jae    c00247b4 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c002479d:	83 ec 0c             	sub    esp,0xc
c00247a0:	68 3b c6 02 c0       	push   0xc002c63b
c00247a5:	e8 93 58 ff ff       	call   c001a03d <Krnl::panic(char const*)>
c00247aa:	bb 01 00 00 00       	mov    ebx,0x1
c00247af:	83 c4 10             	add    esp,0x10
c00247b2:	eb 20                	jmp    c00247d4 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c00247b4:	31 db                	xor    ebx,ebx
c00247b6:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c00247bb:	75 17                	jne    c00247d4 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c00247bd:	50                   	push   eax
c00247be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00247c2:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c00247c8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00247cc:	e8 73 bf fd ff       	call   c0000744 <memcpy>
c00247d1:	83 c4 10             	add    esp,0x10
c00247d4:	83 c4 2c             	add    esp,0x2c
c00247d7:	89 d8                	mov    eax,ebx
c00247d9:	5b                   	pop    ebx
c00247da:	5e                   	pop    esi
c00247db:	5f                   	pop    edi
c00247dc:	5d                   	pop    ebp
c00247dd:	c3                   	ret    

c00247de <SATA::read(unsigned long long, int, void*)>:
c00247de:	57                   	push   edi
c00247df:	b8 04 00 00 00       	mov    eax,0x4
c00247e4:	56                   	push   esi
c00247e5:	53                   	push   ebx
c00247e6:	83 ec 10             	sub    esp,0x10
c00247e9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00247ed:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00247f1:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00247f4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00247f8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00247fc:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024802:	77 3b                	ja     c002483f <SATA::read(unsigned long long, int, void*)+0x61>
c0024804:	b8 06 00 00 00       	mov    eax,0x6
c0024809:	85 d2                	test   edx,edx
c002480b:	74 32                	je     c002483f <SATA::read(unsigned long long, int, void*)+0x61>
c002480d:	50                   	push   eax
c002480e:	50                   	push   eax
c002480f:	6a 00                	push   0x0
c0024811:	52                   	push   edx
c0024812:	53                   	push   ebx
c0024813:	57                   	push   edi
c0024814:	56                   	push   esi
c0024815:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024819:	e8 5a fd ff ff       	call   c0024578 <SATA::access(unsigned long long, int, void*, bool)>
c002481e:	83 c4 20             	add    esp,0x20
c0024821:	85 c0                	test   eax,eax
c0024823:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024827:	75 11                	jne    c002483a <SATA::read(unsigned long long, int, void*)+0x5c>
c0024829:	01 1d e8 1e 03 c0    	add    DWORD PTR ds:0xc0031ee8,ebx
c002482f:	e8 46 c1 fe ff       	call   c001097a <VgaText::updateDiskUsage()>
c0024834:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024838:	eb 05                	jmp    c002483f <SATA::read(unsigned long long, int, void*)+0x61>
c002483a:	b8 01 00 00 00       	mov    eax,0x1
c002483f:	83 c4 10             	add    esp,0x10
c0024842:	5b                   	pop    ebx
c0024843:	5e                   	pop    esi
c0024844:	5f                   	pop    edi
c0024845:	c3                   	ret    

c0024846 <SATA::write(unsigned long long, int, void*)>:
c0024846:	55                   	push   ebp
c0024847:	b8 04 00 00 00       	mov    eax,0x4
c002484c:	57                   	push   edi
c002484d:	56                   	push   esi
c002484e:	53                   	push   ebx
c002484f:	83 ec 1c             	sub    esp,0x1c
c0024852:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024856:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002485a:	8d 75 ff             	lea    esi,[ebp-0x1]
c002485d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024861:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024865:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002486b:	77 56                	ja     c00248c3 <SATA::write(unsigned long long, int, void*)+0x7d>
c002486d:	b8 06 00 00 00       	mov    eax,0x6
c0024872:	85 ff                	test   edi,edi
c0024874:	74 4d                	je     c00248c3 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024876:	89 ee                	mov    esi,ebp
c0024878:	c1 e6 09             	shl    esi,0x9
c002487b:	01 fe                	add    esi,edi
c002487d:	89 c8                	mov    eax,ecx
c002487f:	89 da                	mov    edx,ebx
c0024881:	83 c0 01             	add    eax,0x1
c0024884:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024888:	83 d2 00             	adc    edx,0x0
c002488b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002488f:	50                   	push   eax
c0024890:	50                   	push   eax
c0024891:	6a 01                	push   0x1
c0024893:	57                   	push   edi
c0024894:	81 c7 00 02 00 00    	add    edi,0x200
c002489a:	6a 01                	push   0x1
c002489c:	53                   	push   ebx
c002489d:	51                   	push   ecx
c002489e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00248a2:	e8 d1 fc ff ff       	call   c0024578 <SATA::access(unsigned long long, int, void*, bool)>
c00248a7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00248ab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00248af:	83 c4 20             	add    esp,0x20
c00248b2:	39 f7                	cmp    edi,esi
c00248b4:	75 c7                	jne    c002487d <SATA::write(unsigned long long, int, void*)+0x37>
c00248b6:	01 2d e4 1e 03 c0    	add    DWORD PTR ds:0xc0031ee4,ebp
c00248bc:	e8 b9 c0 fe ff       	call   c001097a <VgaText::updateDiskUsage()>
c00248c1:	31 c0                	xor    eax,eax
c00248c3:	83 c4 1c             	add    esp,0x1c
c00248c6:	5b                   	pop    ebx
c00248c7:	5e                   	pop    esi
c00248c8:	5f                   	pop    edi
c00248c9:	5d                   	pop    ebp
c00248ca:	c3                   	ret    
c00248cb:	90                   	nop

c00248cc <SATAPI::write(unsigned long long, int, void*)>:
c00248cc:	b8 03 00 00 00       	mov    eax,0x3
c00248d1:	c3                   	ret    

c00248d2 <SATAPI::close(int, int, void*)>:
c00248d2:	83 ec 0c             	sub    esp,0xc
c00248d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248d9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00248df:	85 c0                	test   eax,eax
c00248e1:	74 0c                	je     c00248ef <SATAPI::close(int, int, void*)+0x1d>
c00248e3:	83 ec 0c             	sub    esp,0xc
c00248e6:	8b 10                	mov    edx,DWORD PTR [eax]
c00248e8:	50                   	push   eax
c00248e9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00248ec:	83 c4 10             	add    esp,0x10
c00248ef:	31 c0                	xor    eax,eax
c00248f1:	83 c4 0c             	add    esp,0xc
c00248f4:	c3                   	ret    
c00248f5:	90                   	nop

c00248f6 <SATAPI::SATAPI()>:
c00248f6:	83 ec 0c             	sub    esp,0xc
c00248f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248fd:	83 ec 04             	sub    esp,0x4
c0024900:	68 00 08 00 00       	push   0x800
c0024905:	68 84 c6 02 c0       	push   0xc002c684
c002490a:	50                   	push   eax
c002490b:	e8 50 fa fe ff       	call   c0014360 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024910:	83 c4 10             	add    esp,0x10
c0024913:	ba 30 c7 02 c0       	mov    edx,0xc002c730
c0024918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002491c:	89 10                	mov    DWORD PTR [eax],edx
c002491e:	90                   	nop
c002491f:	83 c4 0c             	add    esp,0xc
c0024922:	c3                   	ret    
c0024923:	90                   	nop

c0024924 <SATAPI::diskRemoved()>:
c0024924:	83 ec 18             	sub    esp,0x18
c0024927:	68 90 c6 02 c0       	push   0xc002c690
c002492c:	e8 e4 e1 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0024931:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024935:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c002493c:	83 c4 1c             	add    esp,0x1c
c002493f:	c3                   	ret    

c0024940 <SATAPI::diskInserted()>:
c0024940:	53                   	push   ebx
c0024941:	83 ec 14             	sub    esp,0x14
c0024944:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024948:	68 a7 c6 02 c0       	push   0xc002c6a7
c002494d:	e8 c3 e1 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0024952:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024959:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002495c:	e8 67 fa fe ff       	call   c00143c8 <PhysicalDisk::startCache()>
c0024961:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024965:	83 c4 18             	add    esp,0x18
c0024968:	5b                   	pop    ebx
c0024969:	e9 7c 1b ff ff       	jmp    c00164ea <createPartitionsForDisk(PhysicalDisk*)>

c002496e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002496e:	55                   	push   ebp
c002496f:	57                   	push   edi
c0024970:	56                   	push   esi
c0024971:	53                   	push   ebx
c0024972:	83 ec 24             	sub    esp,0x24
c0024975:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024979:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002497d:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0024983:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024987:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002498b:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0024991:	8d 5f 02             	lea    ebx,[edi+0x2]
c0024994:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002499a:	c1 e3 07             	shl    ebx,0x7
c002499d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00249a1:	89 f8                	mov    eax,edi
c00249a3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00249a7:	c1 e0 07             	shl    eax,0x7
c00249aa:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00249ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00249b2:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00249bc:	53                   	push   ebx
c00249bd:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c00249c3:	e8 d6 eb ff ff       	call   c002359e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00249c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00249cc:	83 c4 10             	add    esp,0x10
c00249cf:	b8 01 00 00 00       	mov    eax,0x1
c00249d4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00249d9:	0f 84 8a 01 00 00    	je     c0024b69 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00249df:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00249e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00249e7:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00249ed:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00249f3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00249f7:	c1 e1 05             	shl    ecx,0x5
c00249fa:	01 c8                	add    eax,ecx
c00249fc:	8b 08                	mov    ecx,DWORD PTR [eax]
c00249fe:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024a04:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024a0a:	89 08                	mov    DWORD PTR [eax],ecx
c0024a0c:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024a12:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024a18:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024a1e:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024a21:	52                   	push   edx
c0024a22:	68 90 00 00 00       	push   0x90
c0024a27:	6a 00                	push   0x0
c0024a29:	53                   	push   ebx
c0024a2a:	e8 49 bd fd ff       	call   c0000778 <memset>
c0024a2f:	83 c4 0c             	add    esp,0xc
c0024a32:	8d 43 40             	lea    eax,[ebx+0x40]
c0024a35:	6a 0c                	push   0xc
c0024a37:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024a3b:	50                   	push   eax
c0024a3c:	e8 03 bd fd ff       	call   c0000744 <memcpy>
c0024a41:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0024a47:	89 ea                	mov    edx,ebp
c0024a49:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024a4f:	c1 ea 18             	shr    edx,0x18
c0024a52:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024a56:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024a59:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024a5c:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024a60:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024a66:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024a6c:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024a71:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0024a75:	09 c8                	or     eax,ecx
c0024a77:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024a7b:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024a81:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024a84:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024a8b:	66 25 00 7f          	and    ax,0x7f00
c0024a8f:	66 0d 27 80          	or     ax,0x8027
c0024a93:	66 89 03             	mov    WORD PTR [ebx],ax
c0024a96:	89 e8                	mov    eax,ebp
c0024a98:	c1 e8 10             	shr    eax,0x10
c0024a9b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024a9e:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024aa2:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024aa5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024aa9:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024aac:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024ab0:	83 c4 10             	add    esp,0x10
c0024ab3:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024ab7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0024abb:	31 c0                	xor    eax,eax
c0024abd:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0024ac3:	80 e1 88             	and    cl,0x88
c0024ac6:	74 0a                	je     c0024ad2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0024ac8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024acd:	74 0a                	je     c0024ad9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024acf:	40                   	inc    eax
c0024ad0:	eb eb                	jmp    c0024abd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c0024ad2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024ad7:	75 0f                	jne    c0024ae8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0024ad9:	83 ec 0c             	sub    esp,0xc
c0024adc:	68 2d c6 02 c0       	push   0xc002c62d
c0024ae1:	e8 57 55 ff ff       	call   c001a03d <Krnl::panic(char const*)>
c0024ae6:	eb 3a                	jmp    c0024b22 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0024ae8:	b8 01 00 00 00       	mov    eax,0x1
c0024aed:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0024af1:	c1 e7 07             	shl    edi,0x7
c0024af4:	d3 e0                	shl    eax,cl
c0024af6:	03 3c 24             	add    edi,DWORD PTR [esp]
c0024af9:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0024aff:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0024b05:	85 d0                	test   eax,edx
c0024b07:	74 23                	je     c0024b2c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0024b09:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0024b0f:	0f ba e2 1e          	bt     edx,0x1e
c0024b13:	73 ea                	jae    c0024aff <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0024b15:	83 ec 0c             	sub    esp,0xc
c0024b18:	68 bf c6 02 c0       	push   0xc002c6bf
c0024b1d:	e8 f3 df fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0024b22:	83 c4 10             	add    esp,0x10
c0024b25:	b8 01 00 00 00       	mov    eax,0x1
c0024b2a:	eb 3d                	jmp    c0024b69 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0024b2c:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0024b32:	0f ba e0 1e          	bt     eax,0x1e
c0024b36:	73 0a                	jae    c0024b42 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0024b38:	83 ec 0c             	sub    esp,0xc
c0024b3b:	68 d2 c6 02 c0       	push   0xc002c6d2
c0024b40:	eb db                	jmp    c0024b1d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0024b42:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0024b47:	74 1e                	je     c0024b67 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0024b49:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0024b4e:	74 17                	je     c0024b67 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0024b50:	50                   	push   eax
c0024b51:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024b55:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0024b5b:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0024b5f:	e8 e0 bb fd ff       	call   c0000744 <memcpy>
c0024b64:	83 c4 10             	add    esp,0x10
c0024b67:	31 c0                	xor    eax,eax
c0024b69:	83 c4 1c             	add    esp,0x1c
c0024b6c:	5b                   	pop    ebx
c0024b6d:	5e                   	pop    esi
c0024b6e:	5f                   	pop    edi
c0024b6f:	5d                   	pop    ebp
c0024b70:	c3                   	ret    
c0024b71:	90                   	nop

c0024b72 <SATAPI::eject()>:
c0024b72:	57                   	push   edi
c0024b73:	b9 03 00 00 00       	mov    ecx,0x3
c0024b78:	53                   	push   ebx
c0024b79:	83 ec 14             	sub    esp,0x14
c0024b7c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024b80:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024b84:	fc                   	cld    
c0024b85:	31 c0                	xor    eax,eax
c0024b87:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024b89:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024b8e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024b93:	50                   	push   eax
c0024b94:	6a 00                	push   0x0
c0024b96:	6a 00                	push   0x0
c0024b98:	6a 00                	push   0x0
c0024b9a:	6a 00                	push   0x0
c0024b9c:	6a 02                	push   0x2
c0024b9e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024ba2:	50                   	push   eax
c0024ba3:	53                   	push   ebx
c0024ba4:	e8 c5 fd ff ff       	call   c002496e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024ba9:	83 c4 14             	add    esp,0x14
c0024bac:	53                   	push   ebx
c0024bad:	e8 72 fd ff ff       	call   c0024924 <SATAPI::diskRemoved()>
c0024bb2:	83 c4 24             	add    esp,0x24
c0024bb5:	31 c0                	xor    eax,eax
c0024bb7:	5b                   	pop    ebx
c0024bb8:	5f                   	pop    edi
c0024bb9:	c3                   	ret    

c0024bba <SATAPI::detectMedia()>:
c0024bba:	56                   	push   esi
c0024bbb:	53                   	push   ebx
c0024bbc:	83 ec 28             	sub    esp,0x28
c0024bbf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024bc3:	6a 0c                	push   0xc
c0024bc5:	6a 00                	push   0x0
c0024bc7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024bcb:	56                   	push   esi
c0024bcc:	e8 a7 bb fd ff       	call   c0000778 <memset>
c0024bd1:	83 c4 0c             	add    esp,0xc
c0024bd4:	6a 00                	push   0x0
c0024bd6:	6a 00                	push   0x0
c0024bd8:	6a 00                	push   0x0
c0024bda:	6a 00                	push   0x0
c0024bdc:	6a 00                	push   0x0
c0024bde:	56                   	push   esi
c0024bdf:	53                   	push   ebx
c0024be0:	e8 89 fd ff ff       	call   c002496e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024be5:	83 c4 1c             	add    esp,0x1c
c0024be8:	6a 0c                	push   0xc
c0024bea:	6a 00                	push   0x0
c0024bec:	56                   	push   esi
c0024bed:	e8 86 bb fd ff       	call   c0000778 <memset>
c0024bf2:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024bf7:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024bfc:	83 c4 0c             	add    esp,0xc
c0024bff:	6a 01                	push   0x1
c0024c01:	8d 44 24 16          	lea    eax,[esp+0x16]
c0024c05:	50                   	push   eax
c0024c06:	6a 00                	push   0x0
c0024c08:	6a 00                	push   0x0
c0024c0a:	6a 12                	push   0x12
c0024c0c:	56                   	push   esi
c0024c0d:	53                   	push   ebx
c0024c0e:	e8 5b fd ff ff       	call   c002496e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024c13:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024c17:	83 c4 20             	add    esp,0x20
c0024c1a:	83 e0 7f             	and    eax,0x7f
c0024c1d:	3c 70                	cmp    al,0x70
c0024c1f:	74 15                	je     c0024c36 <SATAPI::detectMedia()+0x7c>
c0024c21:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024c28:	75 0c                	jne    c0024c36 <SATAPI::detectMedia()+0x7c>
c0024c2a:	83 ec 0c             	sub    esp,0xc
c0024c2d:	53                   	push   ebx
c0024c2e:	e8 0d fd ff ff       	call   c0024940 <SATAPI::diskInserted()>
c0024c33:	83 c4 10             	add    esp,0x10
c0024c36:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024c3a:	83 e0 0f             	and    eax,0xf
c0024c3d:	3c 02                	cmp    al,0x2
c0024c3f:	75 1b                	jne    c0024c5c <SATAPI::detectMedia()+0xa2>
c0024c41:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024c46:	75 2d                	jne    c0024c75 <SATAPI::detectMedia()+0xbb>
c0024c48:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024c4f:	74 24                	je     c0024c75 <SATAPI::detectMedia()+0xbb>
c0024c51:	83 ec 0c             	sub    esp,0xc
c0024c54:	53                   	push   ebx
c0024c55:	e8 ca fc ff ff       	call   c0024924 <SATAPI::diskRemoved()>
c0024c5a:	eb 16                	jmp    c0024c72 <SATAPI::detectMedia()+0xb8>
c0024c5c:	84 c0                	test   al,al
c0024c5e:	75 15                	jne    c0024c75 <SATAPI::detectMedia()+0xbb>
c0024c60:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024c67:	75 0c                	jne    c0024c75 <SATAPI::detectMedia()+0xbb>
c0024c69:	83 ec 0c             	sub    esp,0xc
c0024c6c:	53                   	push   ebx
c0024c6d:	e8 ce fc ff ff       	call   c0024940 <SATAPI::diskInserted()>
c0024c72:	83 c4 10             	add    esp,0x10
c0024c75:	83 c4 24             	add    esp,0x24
c0024c78:	5b                   	pop    ebx
c0024c79:	5e                   	pop    esi
c0024c7a:	c3                   	ret    
c0024c7b:	90                   	nop

c0024c7c <SATAPI::open(int, int, void*)>:
c0024c7c:	56                   	push   esi
c0024c7d:	53                   	push   ebx
c0024c7e:	50                   	push   eax
c0024c7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024c83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c87:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024c91:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024c97:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024ca1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024ca5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024caf:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024cb5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024cbc:	e8 22 b2 fe ff       	call   c000fee3 <Phys::allocatePage()>
c0024cc1:	89 c6                	mov    esi,eax
c0024cc3:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024cc9:	81 c6 00 10 00 00    	add    esi,0x1000
c0024ccf:	e8 0f b2 fe ff       	call   c000fee3 <Phys::allocatePage()>
c0024cd4:	39 c6                	cmp    esi,eax
c0024cd6:	74 10                	je     c0024ce8 <SATAPI::open(int, int, void*)+0x6c>
c0024cd8:	83 ec 0c             	sub    esp,0xc
c0024cdb:	68 e7 c6 02 c0       	push   0xc002c6e7
c0024ce0:	e8 58 53 ff ff       	call   c001a03d <Krnl::panic(char const*)>
c0024ce5:	83 c4 10             	add    esp,0x10
c0024ce8:	83 ec 0c             	sub    esp,0xc
c0024ceb:	6a 02                	push   0x2
c0024ced:	e8 33 ce fe ff       	call   c0011b25 <Virt::allocateKernelVirtualPages(int)>
c0024cf2:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0024cf8:	e8 b8 cf fe ff       	call   c0011cb5 <Virt::getAKernelVAS()>
c0024cfd:	6a 03                	push   0x3
c0024cff:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0024d05:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024d0b:	50                   	push   eax
c0024d0c:	e8 df d4 fe ff       	call   c00121f0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024d11:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0024d18:	83 c4 14             	add    esp,0x14
c0024d1b:	53                   	push   ebx
c0024d1c:	e8 99 fe ff ff       	call   c0024bba <SATAPI::detectMedia()>
c0024d21:	83 c4 14             	add    esp,0x14
c0024d24:	31 c0                	xor    eax,eax
c0024d26:	5b                   	pop    ebx
c0024d27:	5e                   	pop    esi
c0024d28:	c3                   	ret    
c0024d29:	90                   	nop

c0024d2a <SATAPI::read(unsigned long long, int, void*)>:
c0024d2a:	55                   	push   ebp
c0024d2b:	57                   	push   edi
c0024d2c:	56                   	push   esi
c0024d2d:	53                   	push   ebx
c0024d2e:	83 ec 1c             	sub    esp,0x1c
c0024d31:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024d35:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024d39:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024d3d:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0024d44:	74 19                	je     c0024d5f <SATAPI::read(unsigned long long, int, void*)+0x35>
c0024d46:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0024d4b:	7e 2e                	jle    c0024d7b <SATAPI::read(unsigned long long, int, void*)+0x51>
c0024d4d:	83 ec 0c             	sub    esp,0xc
c0024d50:	68 fd c6 02 c0       	push   0xc002c6fd
c0024d55:	e8 e3 52 ff ff       	call   c001a03d <Krnl::panic(char const*)>
c0024d5a:	83 c4 10             	add    esp,0x10
c0024d5d:	eb 1c                	jmp    c0024d7b <SATAPI::read(unsigned long long, int, void*)+0x51>
c0024d5f:	83 ec 0c             	sub    esp,0xc
c0024d62:	55                   	push   ebp
c0024d63:	e8 52 fe ff ff       	call   c0024bba <SATAPI::detectMedia()>
c0024d68:	83 c4 10             	add    esp,0x10
c0024d6b:	b8 02 00 00 00       	mov    eax,0x2
c0024d70:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0024d77:	75 cd                	jne    c0024d46 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0024d79:	eb 49                	jmp    c0024dc4 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0024d7b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024d7f:	b9 03 00 00 00       	mov    ecx,0x3
c0024d84:	fc                   	cld    
c0024d85:	31 c0                	xor    eax,eax
c0024d87:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024d89:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024d8e:	89 d8                	mov    eax,ebx
c0024d90:	86 e0                	xchg   al,ah
c0024d92:	c1 c0 10             	rol    eax,0x10
c0024d95:	86 e0                	xchg   al,ah
c0024d97:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0024d9b:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0024d9f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024da3:	50                   	push   eax
c0024da4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024da8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0024dac:	56                   	push   esi
c0024dad:	53                   	push   ebx
c0024dae:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024db2:	c1 e0 0b             	shl    eax,0xb
c0024db5:	50                   	push   eax
c0024db6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024dba:	50                   	push   eax
c0024dbb:	55                   	push   ebp
c0024dbc:	e8 ad fb ff ff       	call   c002496e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024dc1:	83 c4 20             	add    esp,0x20
c0024dc4:	83 c4 1c             	add    esp,0x1c
c0024dc7:	5b                   	pop    ebx
c0024dc8:	5e                   	pop    esi
c0024dc9:	5f                   	pop    edi
c0024dca:	5d                   	pop    ebp
c0024dcb:	c3                   	ret    

c0024dcc <AVX::open(int, int, void*)>:
c0024dcc:	83 ec 0c             	sub    esp,0xc
c0024dcf:	e8 44 11 00 00       	call   c0025f18 <avxInit>
c0024dd4:	b8 00 00 00 00       	mov    eax,0x0
c0024dd9:	83 c4 0c             	add    esp,0xc
c0024ddc:	c3                   	ret    
c0024ddd:	90                   	nop

c0024dde <AVX::close(int, int, void*)>:
c0024dde:	83 ec 0c             	sub    esp,0xc
c0024de1:	e8 33 11 00 00       	call   c0025f19 <avxClose>
c0024de6:	b8 00 00 00 00       	mov    eax,0x0
c0024deb:	83 c4 0c             	add    esp,0xc
c0024dee:	c3                   	ret    
c0024def:	90                   	nop

c0024df0 <AVX::available()>:
c0024df0:	83 ec 0c             	sub    esp,0xc
c0024df3:	e8 18 11 00 00       	call   c0025f10 <avxDetect>
c0024df8:	85 c0                	test   eax,eax
c0024dfa:	0f 95 c0             	setne  al
c0024dfd:	83 c4 0c             	add    esp,0xc
c0024e00:	c3                   	ret    
c0024e01:	90                   	nop

c0024e02 <AVX::save(void*)>:
c0024e02:	83 ec 0c             	sub    esp,0xc
c0024e05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e09:	83 ec 0c             	sub    esp,0xc
c0024e0c:	50                   	push   eax
c0024e0d:	e8 04 11 00 00       	call   c0025f16 <avxSave>
c0024e12:	83 c4 10             	add    esp,0x10
c0024e15:	90                   	nop
c0024e16:	83 c4 0c             	add    esp,0xc
c0024e19:	c3                   	ret    

c0024e1a <AVX::load(void*)>:
c0024e1a:	83 ec 0c             	sub    esp,0xc
c0024e1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e21:	83 ec 0c             	sub    esp,0xc
c0024e24:	50                   	push   eax
c0024e25:	e8 ed 10 00 00       	call   c0025f17 <avxLoad>
c0024e2a:	83 c4 10             	add    esp,0x10
c0024e2d:	90                   	nop
c0024e2e:	83 c4 0c             	add    esp,0xc
c0024e31:	c3                   	ret    

c0024e32 <AVX::AVX()>:
c0024e32:	83 ec 0c             	sub    esp,0xc
c0024e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e39:	83 ec 08             	sub    esp,0x8
c0024e3c:	68 60 c7 02 c0       	push   0xc002c760
c0024e41:	50                   	push   eax
c0024e42:	e8 f7 f5 fe ff       	call   c001443e <FPU::FPU(char const*)>
c0024e47:	83 c4 10             	add    esp,0x10
c0024e4a:	ba 70 c7 02 c0       	mov    edx,0xc002c770
c0024e4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e53:	89 10                	mov    DWORD PTR [eax],edx
c0024e55:	90                   	nop
c0024e56:	83 c4 0c             	add    esp,0xc
c0024e59:	c3                   	ret    

c0024e5a <MMX::available()>:
c0024e5a:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c0024e5f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024e65:	83 e0 20             	and    eax,0x20
c0024e68:	84 c0                	test   al,al
c0024e6a:	0f 95 c0             	setne  al
c0024e6d:	c3                   	ret    

c0024e6e <MMX::open(int, int, void*)>:
c0024e6e:	83 ec 0c             	sub    esp,0xc
c0024e71:	e8 26 11 00 00       	call   c0025f9c <x87Init>
c0024e76:	b8 00 00 00 00       	mov    eax,0x0
c0024e7b:	83 c4 0c             	add    esp,0xc
c0024e7e:	c3                   	ret    
c0024e7f:	90                   	nop

c0024e80 <MMX::close(int, int, void*)>:
c0024e80:	83 ec 0c             	sub    esp,0xc
c0024e83:	e8 2e 11 00 00       	call   c0025fb6 <x87Close>
c0024e88:	b8 00 00 00 00       	mov    eax,0x0
c0024e8d:	83 c4 0c             	add    esp,0xc
c0024e90:	c3                   	ret    
c0024e91:	90                   	nop

c0024e92 <MMX::save(void*)>:
c0024e92:	83 ec 0c             	sub    esp,0xc
c0024e95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e99:	83 ec 0c             	sub    esp,0xc
c0024e9c:	50                   	push   eax
c0024e9d:	e8 ef 10 00 00       	call   c0025f91 <x87Save>
c0024ea2:	83 c4 10             	add    esp,0x10
c0024ea5:	90                   	nop
c0024ea6:	83 c4 0c             	add    esp,0xc
c0024ea9:	c3                   	ret    

c0024eaa <MMX::load(void*)>:
c0024eaa:	83 ec 0c             	sub    esp,0xc
c0024ead:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024eb1:	83 ec 0c             	sub    esp,0xc
c0024eb4:	50                   	push   eax
c0024eb5:	e8 dd 10 00 00       	call   c0025f97 <x87Load>
c0024eba:	83 c4 10             	add    esp,0x10
c0024ebd:	90                   	nop
c0024ebe:	83 c4 0c             	add    esp,0xc
c0024ec1:	c3                   	ret    

c0024ec2 <MMX::MMX()>:
c0024ec2:	83 ec 0c             	sub    esp,0xc
c0024ec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ec9:	83 ec 08             	sub    esp,0x8
c0024ecc:	68 a0 c7 02 c0       	push   0xc002c7a0
c0024ed1:	50                   	push   eax
c0024ed2:	e8 67 f5 fe ff       	call   c001443e <FPU::FPU(char const*)>
c0024ed7:	83 c4 10             	add    esp,0x10
c0024eda:	ba b0 c7 02 c0       	mov    edx,0xc002c7b0
c0024edf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ee3:	89 10                	mov    DWORD PTR [eax],edx
c0024ee5:	90                   	nop
c0024ee6:	83 c4 0c             	add    esp,0xc
c0024ee9:	c3                   	ret    

c0024eea <SSE::open(int, int, void*)>:
c0024eea:	83 ec 0c             	sub    esp,0xc
c0024eed:	e8 62 10 00 00       	call   c0025f54 <sseInit>
c0024ef2:	b8 00 00 00 00       	mov    eax,0x0
c0024ef7:	83 c4 0c             	add    esp,0xc
c0024efa:	c3                   	ret    
c0024efb:	90                   	nop

c0024efc <SSE::close(int, int, void*)>:
c0024efc:	83 ec 0c             	sub    esp,0xc
c0024eff:	e8 60 10 00 00       	call   c0025f64 <sseClose>
c0024f04:	b8 00 00 00 00       	mov    eax,0x0
c0024f09:	83 c4 0c             	add    esp,0xc
c0024f0c:	c3                   	ret    
c0024f0d:	90                   	nop

c0024f0e <SSE::available()>:
c0024f0e:	83 ec 1c             	sub    esp,0x1c
c0024f11:	e8 1a 10 00 00       	call   c0025f30 <absolutelyNoChanceInHell>
c0024f16:	85 c0                	test   eax,eax
c0024f18:	0f 95 c0             	setne  al
c0024f1b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024f1f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0024f23:	83 c4 1c             	add    esp,0x1c
c0024f26:	c3                   	ret    
c0024f27:	90                   	nop

c0024f28 <SSE::save(void*)>:
c0024f28:	83 ec 0c             	sub    esp,0xc
c0024f2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024f2f:	83 ec 0c             	sub    esp,0xc
c0024f32:	50                   	push   eax
c0024f33:	e8 10 10 00 00       	call   c0025f48 <sseSave>
c0024f38:	83 c4 10             	add    esp,0x10
c0024f3b:	90                   	nop
c0024f3c:	83 c4 0c             	add    esp,0xc
c0024f3f:	c3                   	ret    

c0024f40 <SSE::load(void*)>:
c0024f40:	83 ec 0c             	sub    esp,0xc
c0024f43:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024f47:	83 ec 0c             	sub    esp,0xc
c0024f4a:	50                   	push   eax
c0024f4b:	e8 fe 0f 00 00       	call   c0025f4e <sseLoad>
c0024f50:	83 c4 10             	add    esp,0x10
c0024f53:	90                   	nop
c0024f54:	83 c4 0c             	add    esp,0xc
c0024f57:	c3                   	ret    

c0024f58 <SSE::SSE()>:
c0024f58:	83 ec 0c             	sub    esp,0xc
c0024f5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f5f:	83 ec 08             	sub    esp,0x8
c0024f62:	68 e0 c7 02 c0       	push   0xc002c7e0
c0024f67:	50                   	push   eax
c0024f68:	e8 d1 f4 fe ff       	call   c001443e <FPU::FPU(char const*)>
c0024f6d:	83 c4 10             	add    esp,0x10
c0024f70:	ba f0 c7 02 c0       	mov    edx,0xc002c7f0
c0024f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f79:	89 10                	mov    DWORD PTR [eax],edx
c0024f7b:	90                   	nop
c0024f7c:	83 c4 0c             	add    esp,0xc
c0024f7f:	c3                   	ret    

c0024f80 <x87::open(int, int, void*)>:
c0024f80:	83 ec 0c             	sub    esp,0xc
c0024f83:	e8 14 10 00 00       	call   c0025f9c <x87Init>
c0024f88:	b8 00 00 00 00       	mov    eax,0x0
c0024f8d:	83 c4 0c             	add    esp,0xc
c0024f90:	c3                   	ret    
c0024f91:	90                   	nop

c0024f92 <x87::close(int, int, void*)>:
c0024f92:	83 ec 0c             	sub    esp,0xc
c0024f95:	e8 1c 10 00 00       	call   c0025fb6 <x87Close>
c0024f9a:	b8 00 00 00 00       	mov    eax,0x0
c0024f9f:	83 c4 0c             	add    esp,0xc
c0024fa2:	c3                   	ret    
c0024fa3:	90                   	nop

c0024fa4 <x87::available()>:
c0024fa4:	83 ec 0c             	sub    esp,0xc
c0024fa7:	e8 ca 0f 00 00       	call   c0025f76 <x87Detect>
c0024fac:	85 c0                	test   eax,eax
c0024fae:	0f 95 c0             	setne  al
c0024fb1:	83 c4 0c             	add    esp,0xc
c0024fb4:	c3                   	ret    
c0024fb5:	90                   	nop

c0024fb6 <x87::save(void*)>:
c0024fb6:	83 ec 0c             	sub    esp,0xc
c0024fb9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024fbd:	83 ec 0c             	sub    esp,0xc
c0024fc0:	50                   	push   eax
c0024fc1:	e8 cb 0f 00 00       	call   c0025f91 <x87Save>
c0024fc6:	83 c4 10             	add    esp,0x10
c0024fc9:	90                   	nop
c0024fca:	83 c4 0c             	add    esp,0xc
c0024fcd:	c3                   	ret    

c0024fce <x87::load(void*)>:
c0024fce:	83 ec 0c             	sub    esp,0xc
c0024fd1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024fd5:	83 ec 0c             	sub    esp,0xc
c0024fd8:	50                   	push   eax
c0024fd9:	e8 b9 0f 00 00       	call   c0025f97 <x87Load>
c0024fde:	83 c4 10             	add    esp,0x10
c0024fe1:	90                   	nop
c0024fe2:	83 c4 0c             	add    esp,0xc
c0024fe5:	c3                   	ret    

c0024fe6 <x87::x87()>:
c0024fe6:	83 ec 0c             	sub    esp,0xc
c0024fe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fed:	83 ec 08             	sub    esp,0x8
c0024ff0:	68 20 c8 02 c0       	push   0xc002c820
c0024ff5:	50                   	push   eax
c0024ff6:	e8 43 f4 fe ff       	call   c001443e <FPU::FPU(char const*)>
c0024ffb:	83 c4 10             	add    esp,0x10
c0024ffe:	ba 30 c8 02 c0       	mov    edx,0xc002c830
c0025003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025007:	89 10                	mov    DWORD PTR [eax],edx
c0025009:	90                   	nop
c002500a:	83 c4 0c             	add    esp,0xc
c002500d:	c3                   	ret    

c002500e <APIC::disable()>:
c002500e:	90                   	nop
c002500f:	c3                   	ret    

c0025010 <APIC::close(int, int, void*)>:
c0025010:	55                   	push   ebp
c0025011:	89 e5                	mov    ebp,esp
c0025013:	83 ec 08             	sub    esp,0x8
c0025016:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025019:	8b 00                	mov    eax,DWORD PTR [eax]
c002501b:	83 c0 3c             	add    eax,0x3c
c002501e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025020:	83 ec 0c             	sub    esp,0xc
c0025023:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025026:	ff d0                	call   eax
c0025028:	83 c4 10             	add    esp,0x10
c002502b:	b8 00 00 00 00       	mov    eax,0x0
c0025030:	c9                   	leave  
c0025031:	c3                   	ret    

c0025032 <IOAPIC::close(int, int, void*)>:
c0025032:	b8 00 00 00 00       	mov    eax,0x0
c0025037:	c3                   	ret    

c0025038 <APIC::io_wait()>:
c0025038:	eb 00                	jmp    c002503a <APIC::io_wait()+0x2>
c002503a:	eb 00                	jmp    c002503c <APIC::io_wait()+0x4>
c002503c:	90                   	nop
c002503d:	c3                   	ret    

c002503e <APIC::getBase()>:
c002503e:	55                   	push   ebp
c002503f:	89 e5                	mov    ebp,esp
c0025041:	83 ec 18             	sub    esp,0x18
c0025044:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c0025049:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002504f:	83 e0 08             	and    eax,0x8
c0025052:	84 c0                	test   al,al
c0025054:	75 07                	jne    c002505d <APIC::getBase()+0x1f>
c0025056:	b8 00 00 00 00       	mov    eax,0x0
c002505b:	eb 21                	jmp    c002507e <APIC::getBase()+0x40>
c002505d:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c0025062:	83 ec 08             	sub    esp,0x8
c0025065:	6a 1b                	push   0x1b
c0025067:	50                   	push   eax
c0025068:	e8 81 9d fe ff       	call   c000edee <Computer::rdmsr(unsigned int)>
c002506d:	83 c4 10             	add    esp,0x10
c0025070:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025073:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025076:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025079:	25 00 f0 ff ff       	and    eax,0xfffff000
c002507e:	c9                   	leave  
c002507f:	c3                   	ret    

c0025080 <APIC::eoi(unsigned char)>:
c0025080:	55                   	push   ebp
c0025081:	89 e5                	mov    ebp,esp
c0025083:	83 ec 28             	sub    esp,0x28
c0025086:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025089:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002508c:	83 ec 0c             	sub    esp,0xc
c002508f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025092:	e8 a7 ff ff ff       	call   c002503e <APIC::getBase()>
c0025097:	83 c4 10             	add    esp,0x10
c002509a:	05 b0 00 00 00       	add    eax,0xb0
c002509f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00250a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00250a5:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00250ab:	90                   	nop
c00250ac:	c9                   	leave  
c00250ad:	c3                   	ret    

c00250ae <APIC::open(int, int, void*)>:
c00250ae:	55                   	push   ebp
c00250af:	89 e5                	mov    ebp,esp
c00250b1:	57                   	push   edi
c00250b2:	56                   	push   esi
c00250b3:	53                   	push   ebx
c00250b4:	83 ec 2c             	sub    esp,0x2c
c00250b7:	83 ec 0c             	sub    esp,0xc
c00250ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00250bd:	e8 7c ff ff ff       	call   c002503e <APIC::getBase()>
c00250c2:	83 c4 10             	add    esp,0x10
c00250c5:	89 c2                	mov    edx,eax
c00250c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00250ca:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00250d0:	0f b6 f8             	movzx  edi,al
c00250d3:	89 d0                	mov    eax,edx
c00250d5:	ba 00 00 00 00       	mov    edx,0x0
c00250da:	89 c1                	mov    ecx,eax
c00250dc:	80 e5 ff             	and    ch,0xff
c00250df:	89 cb                	mov    ebx,ecx
c00250e1:	0f b6 f2             	movzx  esi,dl
c00250e4:	89 d8                	mov    eax,ebx
c00250e6:	89 f2                	mov    edx,esi
c00250e8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00250eb:	8d 5f 08             	lea    ebx,[edi+0x8]
c00250ee:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00250f2:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00250f6:	83 e0 00             	and    eax,0x0
c00250f9:	09 d0                	or     eax,edx
c00250fb:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00250ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025102:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025108:	8d 50 01             	lea    edx,[eax+0x1]
c002510b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002510e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025114:	0f b6 d0             	movzx  edx,al
c0025117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002511a:	83 c2 08             	add    edx,0x8
c002511d:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025121:	0f b6 c9             	movzx  ecx,cl
c0025124:	81 c9 00 00 01 00    	or     ecx,0x10000
c002512a:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002512e:	83 ec 0c             	sub    esp,0xc
c0025131:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025134:	e8 05 ff ff ff       	call   c002503e <APIC::getBase()>
c0025139:	83 c4 10             	add    esp,0x10
c002513c:	05 f0 00 00 00       	add    eax,0xf0
c0025141:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025144:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025147:	8b 00                	mov    eax,DWORD PTR [eax]
c0025149:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002514c:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025153:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002515a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002515d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025160:	89 10                	mov    DWORD PTR [eax],edx
c0025162:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025169:	a1 70 04 03 c0       	mov    eax,ds:0xc0030470
c002516e:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025171:	7d 7c                	jge    c00251ef <APIC::open(int, int, void*)+0x141>
c0025173:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025176:	8b 04 85 80 04 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfb80]
c002517d:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025180:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025183:	8b 04 85 80 04 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfb80]
c002518a:	c1 e8 08             	shr    eax,0x8
c002518d:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025191:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025194:	8b 04 85 80 04 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfb80]
c002519b:	c1 e8 18             	shr    eax,0x18
c002519e:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00251a1:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00251a5:	75 40                	jne    c00251e7 <APIC::open(int, int, void*)+0x139>
c00251a7:	83 ec 0c             	sub    esp,0xc
c00251aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00251ad:	e8 8c fe ff ff       	call   c002503e <APIC::getBase()>
c00251b2:	83 c4 10             	add    esp,0x10
c00251b5:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00251b9:	75 07                	jne    c00251c2 <APIC::open(int, int, void*)+0x114>
c00251bb:	ba 60 03 00 00       	mov    edx,0x360
c00251c0:	eb 05                	jmp    c00251c7 <APIC::open(int, int, void*)+0x119>
c00251c2:	ba 50 03 00 00       	mov    edx,0x350
c00251c7:	01 d0                	add    eax,edx
c00251c9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00251cc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00251cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00251d1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00251d4:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00251db:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00251df:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00251e2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00251e5:	89 10                	mov    DWORD PTR [eax],edx
c00251e7:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00251ea:	e9 7a ff ff ff       	jmp    c0025169 <APIC::open(int, int, void*)+0xbb>
c00251ef:	b8 00 00 00 00       	mov    eax,0x0
c00251f4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00251f7:	5b                   	pop    ebx
c00251f8:	5e                   	pop    esi
c00251f9:	5f                   	pop    edi
c00251fa:	5d                   	pop    ebp
c00251fb:	c3                   	ret    

c00251fc <IOAPIC::IOAPIC()>:
c00251fc:	83 ec 0c             	sub    esp,0xc
c00251ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025203:	83 ec 08             	sub    esp,0x8
c0025206:	68 60 c8 02 c0       	push   0xc002c860
c002520b:	50                   	push   eax
c002520c:	e8 1b ef fe ff       	call   c001412c <Device::Device(char const*)>
c0025211:	83 c4 10             	add    esp,0x10
c0025214:	ba 88 c9 02 c0       	mov    edx,0xc002c988
c0025219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002521d:	89 10                	mov    DWORD PTR [eax],edx
c002521f:	90                   	nop
c0025220:	83 c4 0c             	add    esp,0xc
c0025223:	c3                   	ret    

c0025224 <APIC::APIC()>:
c0025224:	53                   	push   ebx
c0025225:	83 ec 18             	sub    esp,0x18
c0025228:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002522c:	83 ec 08             	sub    esp,0x8
c002522f:	68 68 c8 02 c0       	push   0xc002c868
c0025234:	50                   	push   eax
c0025235:	e8 5e f6 fe ff       	call   c0014898 <InterruptController::InterruptController(char const*)>
c002523a:	83 c4 10             	add    esp,0x10
c002523d:	ba 40 c9 02 c0       	mov    edx,0xc002c940
c0025242:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025246:	89 10                	mov    DWORD PTR [eax],edx
c0025248:	a0 40 1f 03 c0       	mov    al,ds:0xc0031f40
c002524d:	83 f0 01             	xor    eax,0x1
c0025250:	84 c0                	test   al,al
c0025252:	0f 84 a1 00 00 00    	je     c00252f9 <APIC::APIC()+0xd5>
c0025258:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002525d:	a0 20 05 03 c0       	mov    al,ds:0xc0030520
c0025262:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025266:	0f 83 86 00 00 00    	jae    c00252f2 <APIC::APIC()+0xce>
c002526c:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025274:	83 ec 0c             	sub    esp,0xc
c0025277:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002527b:	e8 c6 a5 fe ff       	call   c000f846 <malloc>
c0025280:	83 c4 10             	add    esp,0x10
c0025283:	89 c3                	mov    ebx,eax
c0025285:	83 ec 0c             	sub    esp,0xc
c0025288:	53                   	push   ebx
c0025289:	e8 6e ff ff ff       	call   c00251fc <IOAPIC::IOAPIC()>
c002528e:	83 c4 10             	add    esp,0x10
c0025291:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025295:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002529a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002529e:	89 14 85 20 1f 03 c0 	mov    DWORD PTR [eax*4-0x3ffce0e0],edx
c00252a5:	a1 00 1f 03 c0       	mov    eax,ds:0xc0031f00
c00252aa:	40                   	inc    eax
c00252ab:	a3 00 1f 03 c0       	mov    ds:0xc0031f00,eax
c00252b0:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c00252b5:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00252bb:	83 ec 08             	sub    esp,0x8
c00252be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00252c2:	50                   	push   eax
c00252c3:	e8 74 ec fe ff       	call   c0013f3c <Device::addChild(Device*)>
c00252c8:	83 c4 10             	add    esp,0x10
c00252cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00252cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00252d1:	83 c0 08             	add    eax,0x8
c00252d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00252d6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00252db:	6a 00                	push   0x0
c00252dd:	6a 00                	push   0x0
c00252df:	52                   	push   edx
c00252e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00252e4:	ff d0                	call   eax
c00252e6:	83 c4 10             	add    esp,0x10
c00252e9:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00252ed:	e9 6b ff ff ff       	jmp    c002525d <APIC::APIC()+0x39>
c00252f2:	c6 05 40 1f 03 c0 01 	mov    BYTE PTR ds:0xc0031f40,0x1
c00252f9:	90                   	nop
c00252fa:	83 c4 18             	add    esp,0x18
c00252fd:	5b                   	pop    ebx
c00252fe:	c3                   	ret    
c00252ff:	90                   	nop

c0025300 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025300:	55                   	push   ebp
c0025301:	89 e5                	mov    ebp,esp
c0025303:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025306:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002530c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002530f:	72 1d                	jb     c002532e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025314:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002531a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002531d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025323:	01 d0                	add    eax,edx
c0025325:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025328:	73 04                	jae    c002532e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002532a:	b0 01                	mov    al,0x1
c002532c:	eb 02                	jmp    c0025330 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002532e:	b0 00                	mov    al,0x0
c0025330:	5d                   	pop    ebp
c0025331:	c3                   	ret    

c0025332 <IOAPIC::read(int)>:
c0025332:	55                   	push   ebp
c0025333:	89 e5                	mov    ebp,esp
c0025335:	83 ec 10             	sub    esp,0x10
c0025338:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002533b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025341:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025344:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025347:	0f b6 d0             	movzx  edx,al
c002534a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002534d:	89 10                	mov    DWORD PTR [eax],edx
c002534f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025352:	83 c0 10             	add    eax,0x10
c0025355:	8b 00                	mov    eax,DWORD PTR [eax]
c0025357:	c9                   	leave  
c0025358:	c3                   	ret    
c0025359:	90                   	nop

c002535a <IOAPIC::open(int, int, void*)>:
c002535a:	55                   	push   ebp
c002535b:	89 e5                	mov    ebp,esp
c002535d:	57                   	push   edi
c002535e:	56                   	push   esi
c002535f:	53                   	push   ebx
c0025360:	83 ec 0c             	sub    esp,0xc
c0025363:	83 ec 0c             	sub    esp,0xc
c0025366:	68 93 c8 02 c0       	push   0xc002c893
c002536b:	e8 a5 d7 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0025370:	83 c4 10             	add    esp,0x10
c0025373:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025376:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025379:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002537f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025382:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025388:	8b 14 85 60 05 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfaa0]
c002538f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025392:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025398:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002539b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00253a1:	8b 14 85 e0 05 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfa20]
c00253a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00253ab:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00253b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00253b4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00253ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00253bd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00253c3:	0f b6 f8             	movzx  edi,al
c00253c6:	89 d0                	mov    eax,edx
c00253c8:	ba 00 00 00 00       	mov    edx,0x0
c00253cd:	89 c1                	mov    ecx,eax
c00253cf:	80 e5 ff             	and    ch,0xff
c00253d2:	89 cb                	mov    ebx,ecx
c00253d4:	0f b6 f2             	movzx  esi,dl
c00253d7:	89 d8                	mov    eax,ebx
c00253d9:	89 f2                	mov    edx,esi
c00253db:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00253de:	8d 5f 08             	lea    ebx,[edi+0x8]
c00253e1:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00253e5:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00253e9:	83 e0 00             	and    eax,0x0
c00253ec:	09 d0                	or     eax,edx
c00253ee:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00253f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00253f5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00253fb:	8d 50 01             	lea    edx,[eax+0x1]
c00253fe:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025401:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025407:	0f b6 d0             	movzx  edx,al
c002540a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002540d:	83 c2 08             	add    edx,0x8
c0025410:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025414:	0f b6 c9             	movzx  ecx,cl
c0025417:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002541d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025421:	83 ec 08             	sub    esp,0x8
c0025424:	6a 01                	push   0x1
c0025426:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025429:	e8 04 ff ff ff       	call   c0025332 <IOAPIC::read(int)>
c002542e:	83 c4 10             	add    esp,0x10
c0025431:	c1 f8 10             	sar    eax,0x10
c0025434:	0f b6 c0             	movzx  eax,al
c0025437:	8d 50 01             	lea    edx,[eax+0x1]
c002543a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002543d:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025443:	b8 00 00 00 00       	mov    eax,0x0
c0025448:	8d 65 f4             	lea    esp,[ebp-0xc]
c002544b:	5b                   	pop    ebx
c002544c:	5e                   	pop    esi
c002544d:	5f                   	pop    edi
c002544e:	5d                   	pop    ebp
c002544f:	c3                   	ret    

c0025450 <IOAPIC::write(int, int)>:
c0025450:	55                   	push   ebp
c0025451:	89 e5                	mov    ebp,esp
c0025453:	83 ec 10             	sub    esp,0x10
c0025456:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025459:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002545f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025462:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025465:	0f b6 d0             	movzx  edx,al
c0025468:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002546b:	89 10                	mov    DWORD PTR [eax],edx
c002546d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025470:	8d 50 10             	lea    edx,[eax+0x10]
c0025473:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025476:	89 02                	mov    DWORD PTR [edx],eax
c0025478:	90                   	nop
c0025479:	c9                   	leave  
c002547a:	c3                   	ret    
c002547b:	90                   	nop

c002547c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002547c:	55                   	push   ebp
c002547d:	89 e5                	mov    ebp,esp
c002547f:	53                   	push   ebx
c0025480:	83 ec 2c             	sub    esp,0x2c
c0025483:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025486:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025489:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002548c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002548f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025492:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025495:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025498:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002549b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002549e:	88 d8                	mov    al,bl
c00254a0:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00254a3:	88 c8                	mov    al,cl
c00254a5:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00254a8:	88 d0                	mov    al,dl
c00254aa:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00254ad:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00254b1:	83 c0 08             	add    eax,0x8
c00254b4:	01 c0                	add    eax,eax
c00254b6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00254b9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00254bd:	83 c0 08             	add    eax,0x8
c00254c0:	01 c0                	add    eax,eax
c00254c2:	40                   	inc    eax
c00254c3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00254c6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00254c9:	50                   	push   eax
c00254ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254cd:	e8 60 fe ff ff       	call   c0025332 <IOAPIC::read(int)>
c00254d2:	83 c4 08             	add    esp,0x8
c00254d5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00254d8:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00254df:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00254e2:	c1 e0 18             	shl    eax,0x18
c00254e5:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00254e8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00254eb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00254ee:	52                   	push   edx
c00254ef:	50                   	push   eax
c00254f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254f3:	e8 58 ff ff ff       	call   c0025450 <IOAPIC::write(int, int)>
c00254f8:	83 c4 0c             	add    esp,0xc
c00254fb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00254fe:	50                   	push   eax
c00254ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025502:	e8 2b fe ff ff       	call   c0025332 <IOAPIC::read(int)>
c0025507:	83 c4 08             	add    esp,0x8
c002550a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002550d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025514:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002551b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025522:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025526:	74 09                	je     c0025531 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025528:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002552f:	eb 07                	jmp    c0025538 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025531:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025538:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002553c:	74 09                	je     c0025547 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c002553e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025545:	eb 07                	jmp    c002554e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025547:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002554e:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025555:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025559:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002555c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002555f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025562:	52                   	push   edx
c0025563:	50                   	push   eax
c0025564:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025567:	e8 e4 fe ff ff       	call   c0025450 <IOAPIC::write(int, int)>
c002556c:	83 c4 0c             	add    esp,0xc
c002556f:	90                   	nop
c0025570:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025573:	c9                   	leave  
c0025574:	c3                   	ret    
c0025575:	90                   	nop

c0025576 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025576:	55                   	push   ebp
c0025577:	89 e5                	mov    ebp,esp
c0025579:	57                   	push   edi
c002557a:	56                   	push   esi
c002557b:	53                   	push   ebx
c002557c:	83 ec 2c             	sub    esp,0x2c
c002557f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025582:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025585:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025589:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002558d:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025591:	74 5a                	je     c00255ed <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025593:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025597:	7f 44                	jg     c00255dd <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025599:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002559c:	05 e0 cd 02 c0       	add    eax,0xc002cde0
c00255a1:	8a 00                	mov    al,BYTE PTR [eax]
c00255a3:	0f b6 c0             	movzx  eax,al
c00255a6:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00255a9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00255ac:	66 8b 84 00 00 05 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfb00]
c00255b4:	0f b7 c0             	movzx  eax,ax
c00255b7:	83 e0 02             	and    eax,0x2
c00255ba:	85 c0                	test   eax,eax
c00255bc:	74 04                	je     c00255c2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00255be:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00255c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00255c5:	66 8b 84 00 00 05 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfb00]
c00255cd:	0f b7 c0             	movzx  eax,ax
c00255d0:	83 e0 08             	and    eax,0x8
c00255d3:	85 c0                	test   eax,eax
c00255d5:	74 16                	je     c00255ed <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00255d7:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00255db:	eb 10                	jmp    c00255ed <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00255dd:	83 ec 0c             	sub    esp,0xc
c00255e0:	68 a4 c8 02 c0       	push   0xc002c8a4
c00255e5:	e8 53 4a ff ff       	call   c001a03d <Krnl::panic(char const*)>
c00255ea:	83 c4 10             	add    esp,0x10
c00255ed:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00255f1:	a1 00 1f 03 c0       	mov    eax,ds:0xc0031f00
c00255f6:	83 ec 08             	sub    esp,0x8
c00255f9:	50                   	push   eax
c00255fa:	68 dc c8 02 c0       	push   0xc002c8dc
c00255ff:	e8 11 d5 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0025604:	83 c4 10             	add    esp,0x10
c0025607:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c002560e:	a1 00 1f 03 c0       	mov    eax,ds:0xc0031f00
c0025613:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025616:	7d 67                	jge    c002567f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025618:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002561b:	8b 04 85 20 1f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce0e0]
c0025622:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025625:	83 ec 08             	sub    esp,0x8
c0025628:	52                   	push   edx
c0025629:	50                   	push   eax
c002562a:	e8 d1 fc ff ff       	call   c0025300 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c002562f:	83 c4 10             	add    esp,0x10
c0025632:	84 c0                	test   al,al
c0025634:	74 44                	je     c002567a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025636:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025639:	8b 1c 85 20 1f 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce0e0]
c0025640:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025644:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025647:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c002564b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002564e:	83 c0 20             	add    eax,0x20
c0025651:	0f b6 f0             	movzx  esi,al
c0025654:	b8 00 00 00 00       	mov    eax,0x0
c0025659:	99                   	cdq    
c002565a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002565d:	0f b6 c9             	movzx  ecx,cl
c0025660:	83 ec 04             	sub    esp,0x4
c0025663:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025666:	57                   	push   edi
c0025667:	56                   	push   esi
c0025668:	52                   	push   edx
c0025669:	50                   	push   eax
c002566a:	51                   	push   ecx
c002566b:	53                   	push   ebx
c002566c:	e8 0b fe ff ff       	call   c002547c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025671:	83 c4 20             	add    esp,0x20
c0025674:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025678:	eb 05                	jmp    c002567f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002567a:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c002567d:	eb 8f                	jmp    c002560e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c002567f:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025682:	83 f0 01             	xor    eax,0x1
c0025685:	84 c0                	test   al,al
c0025687:	74 10                	je     c0025699 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025689:	83 ec 0c             	sub    esp,0xc
c002568c:	68 f3 c8 02 c0       	push   0xc002c8f3
c0025691:	e8 a7 49 ff ff       	call   c001a03d <Krnl::panic(char const*)>
c0025696:	83 c4 10             	add    esp,0x10
c0025699:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002569d:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00256a4:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00256a8:	7f 65                	jg     c002570f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00256aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256ad:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00256b0:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00256b7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00256ba:	01 ca                	add    edx,ecx
c00256bc:	83 c2 54             	add    edx,0x54
c00256bf:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00256c3:	85 c0                	test   eax,eax
c00256c5:	75 43                	jne    c002570a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00256c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256ca:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00256cd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00256d4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00256d7:	01 ca                	add    edx,ecx
c00256d9:	8d 4a 54             	lea    ecx,[edx+0x54]
c00256dc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00256df:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00256e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00256e9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00256f0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00256f3:	01 ca                	add    edx,ecx
c00256f5:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00256fb:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00256fe:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025702:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025705:	83 e8 20             	sub    eax,0x20
c0025708:	eb 1a                	jmp    c0025724 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c002570a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c002570d:	eb 95                	jmp    c00256a4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c002570f:	83 ec 0c             	sub    esp,0xc
c0025712:	68 00 c9 02 c0       	push   0xc002c900
c0025717:	e8 21 49 ff ff       	call   c001a03d <Krnl::panic(char const*)>
c002571c:	83 c4 10             	add    esp,0x10
c002571f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025724:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025727:	5b                   	pop    ebx
c0025728:	5e                   	pop    esi
c0025729:	5f                   	pop    edi
c002572a:	5d                   	pop    ebp
c002572b:	c3                   	ret    

c002572c <PIC::disable()>:
c002572c:	55                   	push   ebp
c002572d:	89 e5                	mov    ebp,esp
c002572f:	83 ec 10             	sub    esp,0x10
c0025732:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025738:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002573c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002573f:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025743:	ee                   	out    dx,al
c0025744:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002574a:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c002574e:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025751:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025755:	ee                   	out    dx,al
c0025756:	90                   	nop
c0025757:	c9                   	leave  
c0025758:	c3                   	ret    
c0025759:	90                   	nop

c002575a <PIC::close(int, int, void*)>:
c002575a:	55                   	push   ebp
c002575b:	89 e5                	mov    ebp,esp
c002575d:	83 ec 08             	sub    esp,0x8
c0025760:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025763:	8b 00                	mov    eax,DWORD PTR [eax]
c0025765:	83 c0 3c             	add    eax,0x3c
c0025768:	8b 00                	mov    eax,DWORD PTR [eax]
c002576a:	83 ec 0c             	sub    esp,0xc
c002576d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025770:	ff d0                	call   eax
c0025772:	83 c4 10             	add    esp,0x10
c0025775:	b8 00 00 00 00       	mov    eax,0x0
c002577a:	c9                   	leave  
c002577b:	c3                   	ret    

c002577c <PIC::PIC()>:
c002577c:	83 ec 0c             	sub    esp,0xc
c002577f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025783:	83 ec 08             	sub    esp,0x8
c0025786:	68 ac c9 02 c0       	push   0xc002c9ac
c002578b:	50                   	push   eax
c002578c:	e8 07 f1 fe ff       	call   c0014898 <InterruptController::InterruptController(char const*)>
c0025791:	83 c4 10             	add    esp,0x10
c0025794:	ba d8 c9 02 c0       	mov    edx,0xc002c9d8
c0025799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002579d:	89 10                	mov    DWORD PTR [eax],edx
c002579f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257a3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00257a9:	0f b6 d0             	movzx  edx,al
c00257ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257b0:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00257b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257bb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00257c1:	0f b6 d0             	movzx  edx,al
c00257c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257c8:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00257cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257d1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00257d7:	8d 50 01             	lea    edx,[eax+0x1]
c00257da:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00257de:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00257e4:	0f b6 d0             	movzx  edx,al
c00257e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257eb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00257ef:	83 e1 3f             	and    ecx,0x3f
c00257f2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00257f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257fa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025800:	0f b6 d0             	movzx  edx,al
c0025803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025807:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c002580e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025812:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025818:	0f b6 d0             	movzx  edx,al
c002581b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002581f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025828:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002582e:	8d 50 01             	lea    edx,[eax+0x1]
c0025831:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025835:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002583b:	0f b6 d0             	movzx  edx,al
c002583e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025842:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025846:	83 e1 3f             	and    ecx,0x3f
c0025849:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002584d:	90                   	nop
c002584e:	83 c4 0c             	add    esp,0xc
c0025851:	c3                   	ret    

c0025852 <PIC::ioWait()>:
c0025852:	eb 00                	jmp    c0025854 <PIC::ioWait()+0x2>
c0025854:	eb 00                	jmp    c0025856 <PIC::ioWait()+0x4>
c0025856:	90                   	nop
c0025857:	c3                   	ret    

c0025858 <PIC::getIRQReg(int)>:
c0025858:	55                   	push   ebp
c0025859:	89 e5                	mov    ebp,esp
c002585b:	83 ec 10             	sub    esp,0x10
c002585e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025861:	0f b6 c0             	movzx  eax,al
c0025864:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002586a:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002586d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025870:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025874:	ee                   	out    dx,al
c0025875:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025878:	0f b6 c0             	movzx  eax,al
c002587b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025881:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025884:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025887:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002588b:	ee                   	out    dx,al
c002588c:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025892:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025896:	89 c2                	mov    edx,eax
c0025898:	ec                   	in     al,dx
c0025899:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c002589c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002589f:	0f b6 c0             	movzx  eax,al
c00258a2:	c1 e0 08             	shl    eax,0x8
c00258a5:	89 c1                	mov    ecx,eax
c00258a7:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00258ad:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00258b1:	89 c2                	mov    edx,eax
c00258b3:	ec                   	in     al,dx
c00258b4:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00258b7:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00258ba:	0f b6 c0             	movzx  eax,al
c00258bd:	09 c8                	or     eax,ecx
c00258bf:	c9                   	leave  
c00258c0:	c3                   	ret    
c00258c1:	90                   	nop

c00258c2 <PIC::eoi(unsigned char)>:
c00258c2:	55                   	push   ebp
c00258c3:	89 e5                	mov    ebp,esp
c00258c5:	83 ec 14             	sub    esp,0x14
c00258c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258cb:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00258ce:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00258d2:	75 1e                	jne    c00258f2 <PIC::eoi(unsigned char)+0x30>
c00258d4:	6a 0b                	push   0xb
c00258d6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258d9:	e8 7a ff ff ff       	call   c0025858 <PIC::getIRQReg(int)>
c00258de:	83 c4 08             	add    esp,0x8
c00258e1:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00258e5:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00258e9:	25 80 00 00 00       	and    eax,0x80
c00258ee:	85 c0                	test   eax,eax
c00258f0:	74 5f                	je     c0025951 <PIC::eoi(unsigned char)+0x8f>
c00258f2:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00258f6:	75 2d                	jne    c0025925 <PIC::eoi(unsigned char)+0x63>
c00258f8:	6a 0b                	push   0xb
c00258fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258fd:	e8 56 ff ff ff       	call   c0025858 <PIC::getIRQReg(int)>
c0025902:	83 c4 08             	add    esp,0x8
c0025905:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025909:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002590c:	66 85 c0             	test   ax,ax
c002590f:	78 14                	js     c0025925 <PIC::eoi(unsigned char)+0x63>
c0025911:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025917:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c002591b:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002591e:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025922:	ee                   	out    dx,al
c0025923:	eb 2d                	jmp    c0025952 <PIC::eoi(unsigned char)+0x90>
c0025925:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025929:	76 12                	jbe    c002593d <PIC::eoi(unsigned char)+0x7b>
c002592b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025931:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025935:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025938:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002593c:	ee                   	out    dx,al
c002593d:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025943:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025947:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002594a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002594e:	ee                   	out    dx,al
c002594f:	eb 01                	jmp    c0025952 <PIC::eoi(unsigned char)+0x90>
c0025951:	90                   	nop
c0025952:	c9                   	leave  
c0025953:	c3                   	ret    

c0025954 <PIC::remap()>:
c0025954:	55                   	push   ebp
c0025955:	89 e5                	mov    ebp,esp
c0025957:	83 ec 48             	sub    esp,0x48
c002595a:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025961:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025968:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002596e:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025971:	89 c2                	mov    edx,eax
c0025973:	ec                   	in     al,dx
c0025974:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025977:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c002597a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002597d:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025983:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025986:	89 c2                	mov    edx,eax
c0025988:	ec                   	in     al,dx
c0025989:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002598c:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c002598f:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025992:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025998:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c002599c:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c002599f:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00259a2:	ee                   	out    dx,al
c00259a3:	83 ec 0c             	sub    esp,0xc
c00259a6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259a9:	e8 a4 fe ff ff       	call   c0025852 <PIC::ioWait()>
c00259ae:	83 c4 10             	add    esp,0x10
c00259b1:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00259b7:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00259bb:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00259be:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00259c1:	ee                   	out    dx,al
c00259c2:	83 ec 0c             	sub    esp,0xc
c00259c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259c8:	e8 85 fe ff ff       	call   c0025852 <PIC::ioWait()>
c00259cd:	83 c4 10             	add    esp,0x10
c00259d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00259d3:	0f b6 c0             	movzx  eax,al
c00259d6:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00259dc:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00259df:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00259e2:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00259e5:	ee                   	out    dx,al
c00259e6:	83 ec 0c             	sub    esp,0xc
c00259e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259ec:	e8 61 fe ff ff       	call   c0025852 <PIC::ioWait()>
c00259f1:	83 c4 10             	add    esp,0x10
c00259f4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00259f7:	0f b6 c0             	movzx  eax,al
c00259fa:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025a00:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025a03:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025a06:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025a09:	ee                   	out    dx,al
c0025a0a:	83 ec 0c             	sub    esp,0xc
c0025a0d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a10:	e8 3d fe ff ff       	call   c0025852 <PIC::ioWait()>
c0025a15:	83 c4 10             	add    esp,0x10
c0025a18:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025a1e:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025a22:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025a25:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025a28:	ee                   	out    dx,al
c0025a29:	83 ec 0c             	sub    esp,0xc
c0025a2c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a2f:	e8 1e fe ff ff       	call   c0025852 <PIC::ioWait()>
c0025a34:	83 c4 10             	add    esp,0x10
c0025a37:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025a3d:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025a41:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025a44:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a47:	ee                   	out    dx,al
c0025a48:	83 ec 0c             	sub    esp,0xc
c0025a4b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a4e:	e8 ff fd ff ff       	call   c0025852 <PIC::ioWait()>
c0025a53:	83 c4 10             	add    esp,0x10
c0025a56:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025a5c:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025a60:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025a63:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025a66:	ee                   	out    dx,al
c0025a67:	83 ec 0c             	sub    esp,0xc
c0025a6a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a6d:	e8 e0 fd ff ff       	call   c0025852 <PIC::ioWait()>
c0025a72:	83 c4 10             	add    esp,0x10
c0025a75:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025a7b:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025a7f:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025a82:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025a85:	ee                   	out    dx,al
c0025a86:	83 ec 0c             	sub    esp,0xc
c0025a89:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a8c:	e8 c1 fd ff ff       	call   c0025852 <PIC::ioWait()>
c0025a91:	83 c4 10             	add    esp,0x10
c0025a94:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025a98:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025a9e:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025aa1:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025aa4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025aa7:	ee                   	out    dx,al
c0025aa8:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025aac:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025ab2:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025ab5:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025ab8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025abb:	ee                   	out    dx,al
c0025abc:	90                   	nop
c0025abd:	c9                   	leave  
c0025abe:	c3                   	ret    
c0025abf:	90                   	nop

c0025ac0 <PIC::open(int, int, void*)>:
c0025ac0:	55                   	push   ebp
c0025ac1:	89 e5                	mov    ebp,esp
c0025ac3:	83 ec 18             	sub    esp,0x18
c0025ac6:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025acc:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025ad0:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025ad3:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025ad7:	ee                   	out    dx,al
c0025ad8:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025ade:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025ae2:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025ae5:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025ae9:	ee                   	out    dx,al
c0025aea:	83 ec 0c             	sub    esp,0xc
c0025aed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025af0:	e8 5f fe ff ff       	call   c0025954 <PIC::remap()>
c0025af5:	83 c4 10             	add    esp,0x10
c0025af8:	b8 00 00 00 00       	mov    eax,0x0
c0025afd:	c9                   	leave  
c0025afe:	c3                   	ret    
c0025aff:	90                   	nop

c0025b00 <APICTimer::close(int, int, void*)>:
c0025b00:	b8 00 00 00 00       	mov    eax,0x0
c0025b05:	c3                   	ret    

c0025b06 <apicTimerHandler(regs*, void*)>:
c0025b06:	83 ec 0c             	sub    esp,0xc
c0025b09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025b0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b0f:	99                   	cdq    
c0025b10:	52                   	push   edx
c0025b11:	50                   	push   eax
c0025b12:	6a 00                	push   0x0
c0025b14:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025b19:	e8 8e 07 00 00       	call   c00262ac <__udivdi3>
c0025b1e:	83 c4 10             	add    esp,0x10
c0025b21:	83 ec 08             	sub    esp,0x8
c0025b24:	52                   	push   edx
c0025b25:	50                   	push   eax
c0025b26:	e8 64 0d ff ff       	call   c001688f <timerHandler(unsigned long long)>
c0025b2b:	83 c4 10             	add    esp,0x10
c0025b2e:	90                   	nop
c0025b2f:	83 c4 0c             	add    esp,0xc
c0025b32:	c3                   	ret    
c0025b33:	90                   	nop

c0025b34 <APICTimer::write(int)>:
c0025b34:	53                   	push   ebx
c0025b35:	83 ec 28             	sub    esp,0x28
c0025b38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025b3c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025b40:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025b46:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c0025b4b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025b51:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025b57:	83 ec 0c             	sub    esp,0xc
c0025b5a:	50                   	push   eax
c0025b5b:	e8 de f4 ff ff       	call   c002503e <APIC::getBase()>
c0025b60:	83 c4 10             	add    esp,0x10
c0025b63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025b67:	a1 10 e2 02 c0       	mov    eax,ds:0xc002e210
c0025b6c:	8b 15 14 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e214
c0025b72:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025b76:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025b7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025b7e:	05 e0 03 00 00       	add    eax,0x3e0
c0025b83:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025b89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025b8d:	05 80 03 00 00       	add    eax,0x380
c0025b92:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025b98:	fb                   	sti    
c0025b99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b9d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025ba1:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025ba6:	83 d2 00             	adc    edx,0x0
c0025ba9:	89 c1                	mov    ecx,eax
c0025bab:	89 d3                	mov    ebx,edx
c0025bad:	a1 10 e2 02 c0       	mov    eax,ds:0xc002e210
c0025bb2:	8b 15 14 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e214
c0025bb8:	39 c8                	cmp    eax,ecx
c0025bba:	89 d0                	mov    eax,edx
c0025bbc:	19 d8                	sbb    eax,ebx
c0025bbe:	73 02                	jae    c0025bc2 <APICTimer::write(int)+0x8e>
c0025bc0:	eb d7                	jmp    c0025b99 <APICTimer::write(int)+0x65>
c0025bc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025bc6:	05 20 03 00 00       	add    eax,0x320
c0025bcb:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0025bd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025bd5:	05 90 03 00 00       	add    eax,0x390
c0025bda:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bdc:	f7 d0                	not    eax
c0025bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025be2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025be6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025bea:	ba 00 00 00 00       	mov    edx,0x0
c0025bef:	f7 f3                	div    ebx
c0025bf1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025bf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025bf9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025bff:	0d 00 00 02 00       	or     eax,0x20000
c0025c04:	89 c2                	mov    edx,eax
c0025c06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025c0a:	05 20 03 00 00       	add    eax,0x320
c0025c0f:	89 10                	mov    DWORD PTR [eax],edx
c0025c11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025c15:	05 e0 03 00 00       	add    eax,0x3e0
c0025c1a:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025c20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025c24:	05 80 03 00 00       	add    eax,0x380
c0025c29:	89 c2                	mov    edx,eax
c0025c2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025c2f:	89 02                	mov    DWORD PTR [edx],eax
c0025c31:	90                   	nop
c0025c32:	83 c4 28             	add    esp,0x28
c0025c35:	5b                   	pop    ebx
c0025c36:	c3                   	ret    
c0025c37:	90                   	nop

c0025c38 <APICTimer::open(int, int, void*)>:
c0025c38:	57                   	push   edi
c0025c39:	56                   	push   esi
c0025c3a:	53                   	push   ebx
c0025c3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c41:	83 c0 24             	add    eax,0x24
c0025c44:	8b 00                	mov    eax,DWORD PTR [eax]
c0025c46:	83 ec 08             	sub    esp,0x8
c0025c49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025c51:	ff d0                	call   eax
c0025c53:	83 c4 10             	add    esp,0x10
c0025c56:	a1 88 db 02 c0       	mov    eax,ds:0xc002db88
c0025c5b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025c61:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025c67:	83 ec 0c             	sub    esp,0xc
c0025c6a:	50                   	push   eax
c0025c6b:	e8 ce f3 ff ff       	call   c002503e <APIC::getBase()>
c0025c70:	83 c4 10             	add    esp,0x10
c0025c73:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0025c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c7d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025c83:	0f b6 f8             	movzx  edi,al
c0025c86:	89 d0                	mov    eax,edx
c0025c88:	ba 00 00 00 00       	mov    edx,0x0
c0025c8d:	89 c1                	mov    ecx,eax
c0025c8f:	80 e5 ff             	and    ch,0xff
c0025c92:	89 cb                	mov    ebx,ecx
c0025c94:	0f b6 f2             	movzx  esi,dl
c0025c97:	89 d8                	mov    eax,ebx
c0025c99:	89 f2                	mov    edx,esi
c0025c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025c9f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025ca2:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025ca6:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025caa:	83 e0 00             	and    eax,0x0
c0025cad:	09 d0                	or     eax,edx
c0025caf:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025cb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cb7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025cbd:	8d 50 01             	lea    edx,[eax+0x1]
c0025cc0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025cc4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025cca:	0f b6 d0             	movzx  edx,al
c0025ccd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cd1:	83 c2 08             	add    edx,0x8
c0025cd4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025cd8:	0f b6 c9             	movzx  ecx,cl
c0025cdb:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025ce1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025ce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ce9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025ced:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025cf7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025cfb:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0025d01:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025d05:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0025d0b:	83 ec 0c             	sub    esp,0xc
c0025d0e:	51                   	push   ecx
c0025d0f:	6a 01                	push   0x1
c0025d11:	68 06 5b 02 c0       	push   0xc0025b06
c0025d16:	52                   	push   edx
c0025d17:	50                   	push   eax
c0025d18:	e8 a3 e1 fe ff       	call   c0013ec0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025d1d:	83 c4 20             	add    esp,0x20
c0025d20:	89 c2                	mov    edx,eax
c0025d22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d26:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025d2c:	b8 00 00 00 00       	mov    eax,0x0
c0025d31:	5b                   	pop    ebx
c0025d32:	5e                   	pop    esi
c0025d33:	5f                   	pop    edi
c0025d34:	c3                   	ret    
c0025d35:	90                   	nop

c0025d36 <APICTimer::APICTimer()>:
c0025d36:	83 ec 0c             	sub    esp,0xc
c0025d39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d3d:	83 ec 08             	sub    esp,0x8
c0025d40:	68 18 ca 02 c0       	push   0xc002ca18
c0025d45:	50                   	push   eax
c0025d46:	e8 b5 0a ff ff       	call   c0016800 <Timer::Timer(char const*)>
c0025d4b:	83 c4 10             	add    esp,0x10
c0025d4e:	ba 2c ca 02 c0       	mov    edx,0xc002ca2c
c0025d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d57:	89 10                	mov    DWORD PTR [eax],edx
c0025d59:	90                   	nop
c0025d5a:	83 c4 0c             	add    esp,0xc
c0025d5d:	c3                   	ret    

c0025d5e <PIT::write(int)>:
c0025d5e:	83 ec 10             	sub    esp,0x10
c0025d61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d65:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025d69:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025d73:	a3 44 1f 03 c0       	mov    ds:0xc0031f44,eax
c0025d78:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0025d7d:	99                   	cdq    
c0025d7e:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0025d82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025d86:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0025d8d:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0025d92:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0025d96:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0025d9b:	ee                   	out    dx,al
c0025d9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025da0:	0f b6 c0             	movzx  eax,al
c0025da3:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0025daa:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0025dae:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0025db2:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0025db7:	ee                   	out    dx,al
c0025db8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025dbc:	c1 f8 08             	sar    eax,0x8
c0025dbf:	0f b6 c0             	movzx  eax,al
c0025dc2:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0025dc9:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0025dcd:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0025dd1:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0025dd6:	ee                   	out    dx,al
c0025dd7:	90                   	nop
c0025dd8:	83 c4 10             	add    esp,0x10
c0025ddb:	c3                   	ret    

c0025ddc <pitHandler(regs*, void*)>:
c0025ddc:	83 ec 0c             	sub    esp,0xc
c0025ddf:	a1 44 1f 03 c0       	mov    eax,ds:0xc0031f44
c0025de4:	99                   	cdq    
c0025de5:	52                   	push   edx
c0025de6:	50                   	push   eax
c0025de7:	6a 00                	push   0x0
c0025de9:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025dee:	e8 b9 04 00 00       	call   c00262ac <__udivdi3>
c0025df3:	83 c4 10             	add    esp,0x10
c0025df6:	83 ec 08             	sub    esp,0x8
c0025df9:	52                   	push   edx
c0025dfa:	50                   	push   eax
c0025dfb:	e8 8f 0a ff ff       	call   c001688f <timerHandler(unsigned long long)>
c0025e00:	83 c4 10             	add    esp,0x10
c0025e03:	90                   	nop
c0025e04:	83 c4 0c             	add    esp,0xc
c0025e07:	c3                   	ret    

c0025e08 <PIT::open(int, int, void*)>:
c0025e08:	83 ec 0c             	sub    esp,0xc
c0025e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e11:	83 c0 24             	add    eax,0x24
c0025e14:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e16:	83 ec 08             	sub    esp,0x8
c0025e19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025e1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025e21:	ff d0                	call   eax
c0025e23:	83 c4 10             	add    esp,0x10
c0025e26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e2a:	83 ec 0c             	sub    esp,0xc
c0025e2d:	6a 00                	push   0x0
c0025e2f:	6a 01                	push   0x1
c0025e31:	68 dc 5d 02 c0       	push   0xc0025ddc
c0025e36:	6a 00                	push   0x0
c0025e38:	50                   	push   eax
c0025e39:	e8 82 e0 fe ff       	call   c0013ec0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025e3e:	83 c4 20             	add    esp,0x20
c0025e41:	89 c2                	mov    edx,eax
c0025e43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e47:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025e4d:	b8 00 00 00 00       	mov    eax,0x0
c0025e52:	83 c4 0c             	add    esp,0xc
c0025e55:	c3                   	ret    

c0025e56 <PIT::close(int, int, void*)>:
c0025e56:	83 ec 0c             	sub    esp,0xc
c0025e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e5d:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0025e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e6b:	6a 01                	push   0x1
c0025e6d:	68 dc 5d 02 c0       	push   0xc0025ddc
c0025e72:	6a 00                	push   0x0
c0025e74:	50                   	push   eax
c0025e75:	e8 84 e0 fe ff       	call   c0013efe <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0025e7a:	83 c4 10             	add    esp,0x10
c0025e7d:	b8 00 00 00 00       	mov    eax,0x0
c0025e82:	83 c4 0c             	add    esp,0xc
c0025e85:	c3                   	ret    

c0025e86 <PIT::PIT()>:
c0025e86:	83 ec 0c             	sub    esp,0xc
c0025e89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e8d:	83 ec 08             	sub    esp,0x8
c0025e90:	68 54 ca 02 c0       	push   0xc002ca54
c0025e95:	50                   	push   eax
c0025e96:	e8 65 09 ff ff       	call   c0016800 <Timer::Timer(char const*)>
c0025e9b:	83 c4 10             	add    esp,0x10
c0025e9e:	ba 7c ca 02 c0       	mov    edx,0xc002ca7c
c0025ea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ea7:	89 10                	mov    DWORD PTR [eax],edx
c0025ea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ead:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025eb3:	0f b6 d0             	movzx  edx,al
c0025eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eba:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0025ec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ec5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ecb:	0f b6 d0             	movzx  edx,al
c0025ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ed2:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0025ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025edb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ee1:	8d 50 01             	lea    edx,[eax+0x1]
c0025ee4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025ee8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025eee:	0f b6 d0             	movzx  edx,al
c0025ef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025ef9:	83 e1 3f             	and    ecx,0x3f
c0025efc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025f00:	90                   	nop
c0025f01:	83 c4 0c             	add    esp,0xc
c0025f04:	c3                   	ret    
c0025f05:	66 90                	xchg   ax,ax
c0025f07:	66 90                	xchg   ax,ax
c0025f09:	66 90                	xchg   ax,ax
c0025f0b:	66 90                	xchg   ax,ax
c0025f0d:	66 90                	xchg   ax,ax
c0025f0f:	90                   	nop

c0025f10 <avxDetect>:
c0025f10:	b8 00 00 00 00       	mov    eax,0x0
c0025f15:	c3                   	ret    

c0025f16 <avxSave>:
c0025f16:	c3                   	ret    

c0025f17 <avxLoad>:
c0025f17:	c3                   	ret    

c0025f18 <avxInit>:
c0025f18:	c3                   	ret    

c0025f19 <avxClose>:
c0025f19:	c3                   	ret    

c0025f1a <wouldSheSayYes>:
c0025f1a:	c3                   	ret    
c0025f1b:	49                   	dec    ecx
c0025f1c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0025f20:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0025f24:	75 20                	jne    c0025f46 <sseDetect.noSSE+0x1>
c0025f26:	4e                   	dec    esi
c0025f27:	79 61                	jns    c0025f8a <x87Detect+0x14>
c0025f29:	68 2e 2e 2e 00       	push   0x2e2e2e
c0025f2e:	66 90                	xchg   ax,ax

c0025f30 <absolutelyNoChanceInHell>:
c0025f30:	b8 01 00 00 00       	mov    eax,0x1
c0025f35:	0f a2                	cpuid  
c0025f37:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0025f3d:	74 06                	je     c0025f45 <sseDetect.noSSE>
c0025f3f:	b8 01 00 00 00       	mov    eax,0x1
c0025f44:	c3                   	ret    

c0025f45 <sseDetect.noSSE>:
c0025f45:	31 c0                	xor    eax,eax
c0025f47:	c3                   	ret    

c0025f48 <sseSave>:
c0025f48:	0f ae 44 24 08       	fxsave [esp+0x8]
c0025f4d:	c3                   	ret    

c0025f4e <sseLoad>:
c0025f4e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0025f53:	c3                   	ret    

c0025f54 <sseInit>:
c0025f54:	e8 43 00 00 00       	call   c0025f9c <x87Init>
c0025f59:	0f 20 e0             	mov    eax,cr4
c0025f5c:	66 0d 00 06          	or     ax,0x600
c0025f60:	0f 22 e0             	mov    cr4,eax
c0025f63:	c3                   	ret    

c0025f64 <sseClose>:
c0025f64:	c3                   	ret    
c0025f65:	66 90                	xchg   ax,ax
c0025f67:	66 90                	xchg   ax,ax
c0025f69:	66 90                	xchg   ax,ax
c0025f6b:	66 90                	xchg   ax,ax
c0025f6d:	66 90                	xchg   ax,ax
c0025f6f:	90                   	nop

c0025f70 <value_37F>:
c0025f70:	7f 03                	jg     c0025f75 <value_37A+0x1>

c0025f72 <value_37E>:
c0025f72:	7e 03                	jle    c0025f77 <x87Detect+0x1>

c0025f74 <value_37A>:
c0025f74:	7a 03                	jp     c0025f79 <x87Detect+0x3>

c0025f76 <x87Detect>:
c0025f76:	b8 01 00 00 00       	mov    eax,0x1
c0025f7b:	0f a2                	cpuid  
c0025f7d:	f7 c2 01 00 00 00    	test   edx,0x1
c0025f83:	74 06                	je     c0025f8b <x87Detect.nox87>
c0025f85:	b8 01 00 00 00       	mov    eax,0x1
c0025f8a:	c3                   	ret    

c0025f8b <x87Detect.nox87>:
c0025f8b:	b8 00 00 00 00       	mov    eax,0x0
c0025f90:	c3                   	ret    

c0025f91 <x87Save>:
c0025f91:	9b dd 74 24 08       	fsave  [esp+0x8]
c0025f96:	c3                   	ret    

c0025f97 <x87Load>:
c0025f97:	dd 64 24 08          	frstor [esp+0x8]
c0025f9b:	c3                   	ret    

c0025f9c <x87Init>:
c0025f9c:	9b db e3             	finit  
c0025f9f:	0f 20 c0             	mov    eax,cr0
c0025fa2:	66 25 fb ff          	and    ax,0xfffb
c0025fa6:	66 0d 22 00          	or     ax,0x22
c0025faa:	0f 22 c0             	mov    cr0,eax
c0025fad:	0f 06                	clts   
c0025faf:	d9 2d 74 5f 02 c0    	fldcw  WORD PTR ds:0xc0025f74
c0025fb5:	c3                   	ret    

c0025fb6 <x87Close>:
c0025fb6:	c3                   	ret    
c0025fb7:	90                   	nop

c0025fb8 <__do_global_ctors_aux>:
c0025fb8:	a1 fc 8a 02 c0       	mov    eax,ds:0xc0028afc
c0025fbd:	83 f8 ff             	cmp    eax,0xffffffff
c0025fc0:	74 1a                	je     c0025fdc <__do_global_ctors_aux+0x24>
c0025fc2:	55                   	push   ebp
c0025fc3:	89 e5                	mov    ebp,esp
c0025fc5:	53                   	push   ebx
c0025fc6:	52                   	push   edx
c0025fc7:	bb fc 8a 02 c0       	mov    ebx,0xc0028afc
c0025fcc:	ff d0                	call   eax
c0025fce:	83 eb 04             	sub    ebx,0x4
c0025fd1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025fd3:	83 f8 ff             	cmp    eax,0xffffffff
c0025fd6:	75 f4                	jne    c0025fcc <__do_global_ctors_aux+0x14>
c0025fd8:	58                   	pop    eax
c0025fd9:	5b                   	pop    ebx
c0025fda:	5d                   	pop    ebp
c0025fdb:	c3                   	ret    
c0025fdc:	c3                   	ret    
c0025fdd:	66 90                	xchg   ax,ax
c0025fdf:	90                   	nop

c0025fe0 <__divdi3>:
c0025fe0:	55                   	push   ebp
c0025fe1:	57                   	push   edi
c0025fe2:	56                   	push   esi
c0025fe3:	53                   	push   ebx
c0025fe4:	83 ec 1c             	sub    esp,0x1c
c0025fe7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0025feb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025fef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025ff2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025ff6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0025ffa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0025ffe:	85 db                	test   ebx,ebx
c0026000:	0f 88 8e 00 00 00    	js     c0026094 <__divdi3+0xb4>
c0026006:	89 dd                	mov    ebp,ebx
c0026008:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026010:	89 d3                	mov    ebx,edx
c0026012:	85 d2                	test   edx,edx
c0026014:	79 0d                	jns    c0026023 <__divdi3+0x43>
c0026016:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002601a:	f7 d8                	neg    eax
c002601c:	83 d2 00             	adc    edx,0x0
c002601f:	f7 da                	neg    edx
c0026021:	89 d3                	mov    ebx,edx
c0026023:	89 c7                	mov    edi,eax
c0026025:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026028:	85 db                	test   ebx,ebx
c002602a:	75 48                	jne    c0026074 <__divdi3+0x94>
c002602c:	39 ef                	cmp    edi,ebp
c002602e:	76 24                	jbe    c0026054 <__divdi3+0x74>
c0026030:	89 ea                	mov    edx,ebp
c0026032:	f7 f7                	div    edi
c0026034:	89 c1                	mov    ecx,eax
c0026036:	31 f6                	xor    esi,esi
c0026038:	89 c8                	mov    eax,ecx
c002603a:	89 f2                	mov    edx,esi
c002603c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026040:	85 c9                	test   ecx,ecx
c0026042:	74 07                	je     c002604b <__divdi3+0x6b>
c0026044:	f7 d8                	neg    eax
c0026046:	83 d2 00             	adc    edx,0x0
c0026049:	f7 da                	neg    edx
c002604b:	83 c4 1c             	add    esp,0x1c
c002604e:	5b                   	pop    ebx
c002604f:	5e                   	pop    esi
c0026050:	5f                   	pop    edi
c0026051:	5d                   	pop    ebp
c0026052:	c3                   	ret    
c0026053:	90                   	nop
c0026054:	85 ff                	test   edi,edi
c0026056:	75 0b                	jne    c0026063 <__divdi3+0x83>
c0026058:	b8 01 00 00 00       	mov    eax,0x1
c002605d:	31 d2                	xor    edx,edx
c002605f:	f7 f3                	div    ebx
c0026061:	89 c7                	mov    edi,eax
c0026063:	31 d2                	xor    edx,edx
c0026065:	89 e8                	mov    eax,ebp
c0026067:	f7 f7                	div    edi
c0026069:	89 c6                	mov    esi,eax
c002606b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002606e:	f7 f7                	div    edi
c0026070:	89 c1                	mov    ecx,eax
c0026072:	eb c4                	jmp    c0026038 <__divdi3+0x58>
c0026074:	39 eb                	cmp    ebx,ebp
c0026076:	77 3c                	ja     c00260b4 <__divdi3+0xd4>
c0026078:	0f bd f3             	bsr    esi,ebx
c002607b:	83 f6 1f             	xor    esi,0x1f
c002607e:	75 40                	jne    c00260c0 <__divdi3+0xe0>
c0026080:	39 eb                	cmp    ebx,ebp
c0026082:	72 09                	jb     c002608d <__divdi3+0xad>
c0026084:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026087:	0f 87 97 00 00 00    	ja     c0026124 <__divdi3+0x144>
c002608d:	b9 01 00 00 00       	mov    ecx,0x1
c0026092:	eb a4                	jmp    c0026038 <__divdi3+0x58>
c0026094:	f7 d9                	neg    ecx
c0026096:	83 d3 00             	adc    ebx,0x0
c0026099:	f7 db                	neg    ebx
c002609b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002609e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00260a2:	89 dd                	mov    ebp,ebx
c00260a4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00260ac:	e9 5f ff ff ff       	jmp    c0026010 <__divdi3+0x30>
c00260b1:	8d 76 00             	lea    esi,[esi+0x0]
c00260b4:	31 f6                	xor    esi,esi
c00260b6:	31 c9                	xor    ecx,ecx
c00260b8:	e9 7b ff ff ff       	jmp    c0026038 <__divdi3+0x58>
c00260bd:	8d 76 00             	lea    esi,[esi+0x0]
c00260c0:	b8 20 00 00 00       	mov    eax,0x20
c00260c5:	29 f0                	sub    eax,esi
c00260c7:	89 f1                	mov    ecx,esi
c00260c9:	d3 e3                	shl    ebx,cl
c00260cb:	89 fa                	mov    edx,edi
c00260cd:	88 c1                	mov    cl,al
c00260cf:	d3 ea                	shr    edx,cl
c00260d1:	09 da                	or     edx,ebx
c00260d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00260d7:	89 f1                	mov    ecx,esi
c00260d9:	d3 e7                	shl    edi,cl
c00260db:	89 eb                	mov    ebx,ebp
c00260dd:	88 c1                	mov    cl,al
c00260df:	d3 eb                	shr    ebx,cl
c00260e1:	89 f1                	mov    ecx,esi
c00260e3:	d3 e5                	shl    ebp,cl
c00260e5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00260e8:	88 c1                	mov    cl,al
c00260ea:	d3 ea                	shr    edx,cl
c00260ec:	09 d5                	or     ebp,edx
c00260ee:	89 e8                	mov    eax,ebp
c00260f0:	89 da                	mov    edx,ebx
c00260f2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00260f6:	89 d3                	mov    ebx,edx
c00260f8:	89 c5                	mov    ebp,eax
c00260fa:	f7 e7                	mul    edi
c00260fc:	39 d3                	cmp    ebx,edx
c00260fe:	72 18                	jb     c0026118 <__divdi3+0x138>
c0026100:	74 0a                	je     c002610c <__divdi3+0x12c>
c0026102:	89 e9                	mov    ecx,ebp
c0026104:	31 f6                	xor    esi,esi
c0026106:	e9 2d ff ff ff       	jmp    c0026038 <__divdi3+0x58>
c002610b:	90                   	nop
c002610c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002610f:	89 f1                	mov    ecx,esi
c0026111:	d3 e7                	shl    edi,cl
c0026113:	39 c7                	cmp    edi,eax
c0026115:	73 eb                	jae    c0026102 <__divdi3+0x122>
c0026117:	90                   	nop
c0026118:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002611b:	31 f6                	xor    esi,esi
c002611d:	e9 16 ff ff ff       	jmp    c0026038 <__divdi3+0x58>
c0026122:	66 90                	xchg   ax,ax
c0026124:	31 c9                	xor    ecx,ecx
c0026126:	e9 0d ff ff ff       	jmp    c0026038 <__divdi3+0x58>
c002612b:	90                   	nop

c002612c <__moddi3>:
c002612c:	55                   	push   ebp
c002612d:	57                   	push   edi
c002612e:	56                   	push   esi
c002612f:	53                   	push   ebx
c0026130:	83 ec 2c             	sub    esp,0x2c
c0026133:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026137:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002613b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002613f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026143:	85 db                	test   ebx,ebx
c0026145:	0f 88 85 00 00 00    	js     c00261d0 <__moddi3+0xa4>
c002614b:	89 de                	mov    esi,ebx
c002614d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026155:	89 d7                	mov    edi,edx
c0026157:	85 d2                	test   edx,edx
c0026159:	79 09                	jns    c0026164 <__moddi3+0x38>
c002615b:	f7 d8                	neg    eax
c002615d:	83 d2 00             	adc    edx,0x0
c0026160:	f7 da                	neg    edx
c0026162:	89 d7                	mov    edi,edx
c0026164:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026168:	89 cd                	mov    ebp,ecx
c002616a:	85 ff                	test   edi,edi
c002616c:	75 52                	jne    c00261c0 <__moddi3+0x94>
c002616e:	89 c3                	mov    ebx,eax
c0026170:	39 f0                	cmp    eax,esi
c0026172:	76 24                	jbe    c0026198 <__moddi3+0x6c>
c0026174:	89 c8                	mov    eax,ecx
c0026176:	89 f2                	mov    edx,esi
c0026178:	f7 f3                	div    ebx
c002617a:	89 d6                	mov    esi,edx
c002617c:	89 f0                	mov    eax,esi
c002617e:	31 d2                	xor    edx,edx
c0026180:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026184:	85 c9                	test   ecx,ecx
c0026186:	74 07                	je     c002618f <__moddi3+0x63>
c0026188:	f7 d8                	neg    eax
c002618a:	83 d2 00             	adc    edx,0x0
c002618d:	f7 da                	neg    edx
c002618f:	83 c4 2c             	add    esp,0x2c
c0026192:	5b                   	pop    ebx
c0026193:	5e                   	pop    esi
c0026194:	5f                   	pop    edi
c0026195:	5d                   	pop    ebp
c0026196:	c3                   	ret    
c0026197:	90                   	nop
c0026198:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002619c:	85 db                	test   ebx,ebx
c002619e:	75 0d                	jne    c00261ad <__moddi3+0x81>
c00261a0:	b8 01 00 00 00       	mov    eax,0x1
c00261a5:	31 d2                	xor    edx,edx
c00261a7:	f7 f7                	div    edi
c00261a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00261ad:	89 f0                	mov    eax,esi
c00261af:	31 d2                	xor    edx,edx
c00261b1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00261b5:	f7 f7                	div    edi
c00261b7:	89 e8                	mov    eax,ebp
c00261b9:	f7 f7                	div    edi
c00261bb:	89 d6                	mov    esi,edx
c00261bd:	eb bd                	jmp    c002617c <__moddi3+0x50>
c00261bf:	90                   	nop
c00261c0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00261c4:	39 f7                	cmp    edi,esi
c00261c6:	76 20                	jbe    c00261e8 <__moddi3+0xbc>
c00261c8:	89 c8                	mov    eax,ecx
c00261ca:	89 f2                	mov    edx,esi
c00261cc:	eb b2                	jmp    c0026180 <__moddi3+0x54>
c00261ce:	66 90                	xchg   ax,ax
c00261d0:	f7 d9                	neg    ecx
c00261d2:	83 d3 00             	adc    ebx,0x0
c00261d5:	f7 db                	neg    ebx
c00261d7:	89 de                	mov    esi,ebx
c00261d9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00261e1:	e9 6f ff ff ff       	jmp    c0026155 <__moddi3+0x29>
c00261e6:	66 90                	xchg   ax,ax
c00261e8:	0f bd c7             	bsr    eax,edi
c00261eb:	83 f0 1f             	xor    eax,0x1f
c00261ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00261f2:	75 24                	jne    c0026218 <__moddi3+0xec>
c00261f4:	39 f7                	cmp    edi,esi
c00261f6:	72 06                	jb     c00261fe <__moddi3+0xd2>
c00261f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00261fc:	77 0c                	ja     c002620a <__moddi3+0xde>
c00261fe:	89 e9                	mov    ecx,ebp
c0026200:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026204:	19 fe                	sbb    esi,edi
c0026206:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002620a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002620e:	89 f2                	mov    edx,esi
c0026210:	e9 6b ff ff ff       	jmp    c0026180 <__moddi3+0x54>
c0026215:	8d 76 00             	lea    esi,[esi+0x0]
c0026218:	b8 20 00 00 00       	mov    eax,0x20
c002621d:	89 c2                	mov    edx,eax
c002621f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026223:	29 da                	sub    edx,ebx
c0026225:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026229:	88 d9                	mov    cl,bl
c002622b:	d3 e7                	shl    edi,cl
c002622d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026231:	88 d1                	mov    cl,dl
c0026233:	d3 e8                	shr    eax,cl
c0026235:	09 c7                	or     edi,eax
c0026237:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002623b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002623f:	89 d8                	mov    eax,ebx
c0026241:	88 d9                	mov    cl,bl
c0026243:	d3 e7                	shl    edi,cl
c0026245:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026249:	89 f3                	mov    ebx,esi
c002624b:	88 d1                	mov    cl,dl
c002624d:	d3 eb                	shr    ebx,cl
c002624f:	89 c7                	mov    edi,eax
c0026251:	88 c1                	mov    cl,al
c0026253:	d3 e6                	shl    esi,cl
c0026255:	89 e8                	mov    eax,ebp
c0026257:	88 d1                	mov    cl,dl
c0026259:	d3 e8                	shr    eax,cl
c002625b:	09 f0                	or     eax,esi
c002625d:	89 f9                	mov    ecx,edi
c002625f:	d3 e5                	shl    ebp,cl
c0026261:	89 da                	mov    edx,ebx
c0026263:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026267:	89 d3                	mov    ebx,edx
c0026269:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002626d:	89 c6                	mov    esi,eax
c002626f:	89 d1                	mov    ecx,edx
c0026271:	39 d3                	cmp    ebx,edx
c0026273:	72 27                	jb     c002629c <__moddi3+0x170>
c0026275:	74 21                	je     c0026298 <__moddi3+0x16c>
c0026277:	29 f5                	sub    ebp,esi
c0026279:	19 cb                	sbb    ebx,ecx
c002627b:	89 de                	mov    esi,ebx
c002627d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026281:	d3 e6                	shl    esi,cl
c0026283:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026287:	89 f9                	mov    ecx,edi
c0026289:	d3 ed                	shr    ebp,cl
c002628b:	09 ee                	or     esi,ebp
c002628d:	89 f0                	mov    eax,esi
c002628f:	d3 eb                	shr    ebx,cl
c0026291:	89 da                	mov    edx,ebx
c0026293:	e9 e8 fe ff ff       	jmp    c0026180 <__moddi3+0x54>
c0026298:	39 c5                	cmp    ebp,eax
c002629a:	73 db                	jae    c0026277 <__moddi3+0x14b>
c002629c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00262a0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00262a4:	89 d1                	mov    ecx,edx
c00262a6:	89 c6                	mov    esi,eax
c00262a8:	eb cd                	jmp    c0026277 <__moddi3+0x14b>
c00262aa:	66 90                	xchg   ax,ax

c00262ac <__udivdi3>:
c00262ac:	55                   	push   ebp
c00262ad:	57                   	push   edi
c00262ae:	56                   	push   esi
c00262af:	53                   	push   ebx
c00262b0:	83 ec 1c             	sub    esp,0x1c
c00262b3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00262b7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00262bb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00262bf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00262c3:	85 d2                	test   edx,edx
c00262c5:	75 41                	jne    c0026308 <__udivdi3+0x5c>
c00262c7:	39 f7                	cmp    edi,esi
c00262c9:	76 15                	jbe    c00262e0 <__udivdi3+0x34>
c00262cb:	89 e8                	mov    eax,ebp
c00262cd:	89 f2                	mov    edx,esi
c00262cf:	f7 f7                	div    edi
c00262d1:	31 db                	xor    ebx,ebx
c00262d3:	89 da                	mov    edx,ebx
c00262d5:	83 c4 1c             	add    esp,0x1c
c00262d8:	5b                   	pop    ebx
c00262d9:	5e                   	pop    esi
c00262da:	5f                   	pop    edi
c00262db:	5d                   	pop    ebp
c00262dc:	c3                   	ret    
c00262dd:	8d 76 00             	lea    esi,[esi+0x0]
c00262e0:	89 f9                	mov    ecx,edi
c00262e2:	85 ff                	test   edi,edi
c00262e4:	75 0b                	jne    c00262f1 <__udivdi3+0x45>
c00262e6:	b8 01 00 00 00       	mov    eax,0x1
c00262eb:	31 d2                	xor    edx,edx
c00262ed:	f7 f7                	div    edi
c00262ef:	89 c1                	mov    ecx,eax
c00262f1:	31 d2                	xor    edx,edx
c00262f3:	89 f0                	mov    eax,esi
c00262f5:	f7 f1                	div    ecx
c00262f7:	89 c3                	mov    ebx,eax
c00262f9:	89 e8                	mov    eax,ebp
c00262fb:	f7 f1                	div    ecx
c00262fd:	89 da                	mov    edx,ebx
c00262ff:	83 c4 1c             	add    esp,0x1c
c0026302:	5b                   	pop    ebx
c0026303:	5e                   	pop    esi
c0026304:	5f                   	pop    edi
c0026305:	5d                   	pop    ebp
c0026306:	c3                   	ret    
c0026307:	90                   	nop
c0026308:	39 f2                	cmp    edx,esi
c002630a:	77 1c                	ja     c0026328 <__udivdi3+0x7c>
c002630c:	0f bd da             	bsr    ebx,edx
c002630f:	83 f3 1f             	xor    ebx,0x1f
c0026312:	75 24                	jne    c0026338 <__udivdi3+0x8c>
c0026314:	39 f2                	cmp    edx,esi
c0026316:	72 08                	jb     c0026320 <__udivdi3+0x74>
c0026318:	39 ef                	cmp    edi,ebp
c002631a:	0f 87 84 00 00 00    	ja     c00263a4 <__udivdi3+0xf8>
c0026320:	b8 01 00 00 00       	mov    eax,0x1
c0026325:	eb ac                	jmp    c00262d3 <__udivdi3+0x27>
c0026327:	90                   	nop
c0026328:	31 db                	xor    ebx,ebx
c002632a:	31 c0                	xor    eax,eax
c002632c:	89 da                	mov    edx,ebx
c002632e:	83 c4 1c             	add    esp,0x1c
c0026331:	5b                   	pop    ebx
c0026332:	5e                   	pop    esi
c0026333:	5f                   	pop    edi
c0026334:	5d                   	pop    ebp
c0026335:	c3                   	ret    
c0026336:	66 90                	xchg   ax,ax
c0026338:	b8 20 00 00 00       	mov    eax,0x20
c002633d:	29 d8                	sub    eax,ebx
c002633f:	88 d9                	mov    cl,bl
c0026341:	d3 e2                	shl    edx,cl
c0026343:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026347:	89 fa                	mov    edx,edi
c0026349:	88 c1                	mov    cl,al
c002634b:	d3 ea                	shr    edx,cl
c002634d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026351:	09 d1                	or     ecx,edx
c0026353:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026357:	88 d9                	mov    cl,bl
c0026359:	d3 e7                	shl    edi,cl
c002635b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002635f:	89 f7                	mov    edi,esi
c0026361:	88 c1                	mov    cl,al
c0026363:	d3 ef                	shr    edi,cl
c0026365:	88 d9                	mov    cl,bl
c0026367:	d3 e6                	shl    esi,cl
c0026369:	89 ea                	mov    edx,ebp
c002636b:	88 c1                	mov    cl,al
c002636d:	d3 ea                	shr    edx,cl
c002636f:	09 d6                	or     esi,edx
c0026371:	89 f0                	mov    eax,esi
c0026373:	89 fa                	mov    edx,edi
c0026375:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026379:	89 d7                	mov    edi,edx
c002637b:	89 c6                	mov    esi,eax
c002637d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026381:	39 d7                	cmp    edi,edx
c0026383:	72 13                	jb     c0026398 <__udivdi3+0xec>
c0026385:	74 09                	je     c0026390 <__udivdi3+0xe4>
c0026387:	89 f0                	mov    eax,esi
c0026389:	31 db                	xor    ebx,ebx
c002638b:	e9 43 ff ff ff       	jmp    c00262d3 <__udivdi3+0x27>
c0026390:	88 d9                	mov    cl,bl
c0026392:	d3 e5                	shl    ebp,cl
c0026394:	39 c5                	cmp    ebp,eax
c0026396:	73 ef                	jae    c0026387 <__udivdi3+0xdb>
c0026398:	8d 46 ff             	lea    eax,[esi-0x1]
c002639b:	31 db                	xor    ebx,ebx
c002639d:	e9 31 ff ff ff       	jmp    c00262d3 <__udivdi3+0x27>
c00263a2:	66 90                	xchg   ax,ax
c00263a4:	31 c0                	xor    eax,eax
c00263a6:	e9 28 ff ff ff       	jmp    c00262d3 <__udivdi3+0x27>
c00263ab:	90                   	nop

c00263ac <__umoddi3>:
c00263ac:	55                   	push   ebp
c00263ad:	57                   	push   edi
c00263ae:	56                   	push   esi
c00263af:	53                   	push   ebx
c00263b0:	83 ec 1c             	sub    esp,0x1c
c00263b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00263b7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00263bb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00263bf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00263c3:	89 da                	mov    edx,ebx
c00263c5:	85 c0                	test   eax,eax
c00263c7:	75 37                	jne    c0026400 <__umoddi3+0x54>
c00263c9:	39 df                	cmp    edi,ebx
c00263cb:	76 13                	jbe    c00263e0 <__umoddi3+0x34>
c00263cd:	89 f0                	mov    eax,esi
c00263cf:	f7 f7                	div    edi
c00263d1:	89 d0                	mov    eax,edx
c00263d3:	31 d2                	xor    edx,edx
c00263d5:	83 c4 1c             	add    esp,0x1c
c00263d8:	5b                   	pop    ebx
c00263d9:	5e                   	pop    esi
c00263da:	5f                   	pop    edi
c00263db:	5d                   	pop    ebp
c00263dc:	c3                   	ret    
c00263dd:	8d 76 00             	lea    esi,[esi+0x0]
c00263e0:	89 fd                	mov    ebp,edi
c00263e2:	85 ff                	test   edi,edi
c00263e4:	75 0b                	jne    c00263f1 <__umoddi3+0x45>
c00263e6:	b8 01 00 00 00       	mov    eax,0x1
c00263eb:	31 d2                	xor    edx,edx
c00263ed:	f7 f7                	div    edi
c00263ef:	89 c5                	mov    ebp,eax
c00263f1:	89 d8                	mov    eax,ebx
c00263f3:	31 d2                	xor    edx,edx
c00263f5:	f7 f5                	div    ebp
c00263f7:	89 f0                	mov    eax,esi
c00263f9:	f7 f5                	div    ebp
c00263fb:	89 d0                	mov    eax,edx
c00263fd:	eb d4                	jmp    c00263d3 <__umoddi3+0x27>
c00263ff:	90                   	nop
c0026400:	89 f1                	mov    ecx,esi
c0026402:	39 d8                	cmp    eax,ebx
c0026404:	76 0a                	jbe    c0026410 <__umoddi3+0x64>
c0026406:	89 f0                	mov    eax,esi
c0026408:	83 c4 1c             	add    esp,0x1c
c002640b:	5b                   	pop    ebx
c002640c:	5e                   	pop    esi
c002640d:	5f                   	pop    edi
c002640e:	5d                   	pop    ebp
c002640f:	c3                   	ret    
c0026410:	0f bd e8             	bsr    ebp,eax
c0026413:	83 f5 1f             	xor    ebp,0x1f
c0026416:	75 1c                	jne    c0026434 <__umoddi3+0x88>
c0026418:	39 d8                	cmp    eax,ebx
c002641a:	72 04                	jb     c0026420 <__umoddi3+0x74>
c002641c:	39 f7                	cmp    edi,esi
c002641e:	77 08                	ja     c0026428 <__umoddi3+0x7c>
c0026420:	89 da                	mov    edx,ebx
c0026422:	29 fe                	sub    esi,edi
c0026424:	19 c2                	sbb    edx,eax
c0026426:	89 f1                	mov    ecx,esi
c0026428:	89 c8                	mov    eax,ecx
c002642a:	83 c4 1c             	add    esp,0x1c
c002642d:	5b                   	pop    ebx
c002642e:	5e                   	pop    esi
c002642f:	5f                   	pop    edi
c0026430:	5d                   	pop    ebp
c0026431:	c3                   	ret    
c0026432:	66 90                	xchg   ax,ax
c0026434:	ba 20 00 00 00       	mov    edx,0x20
c0026439:	29 ea                	sub    edx,ebp
c002643b:	89 e9                	mov    ecx,ebp
c002643d:	d3 e0                	shl    eax,cl
c002643f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026443:	89 f8                	mov    eax,edi
c0026445:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026449:	88 d1                	mov    cl,dl
c002644b:	d3 e8                	shr    eax,cl
c002644d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026451:	09 c1                	or     ecx,eax
c0026453:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026457:	89 e9                	mov    ecx,ebp
c0026459:	d3 e7                	shl    edi,cl
c002645b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002645f:	89 d8                	mov    eax,ebx
c0026461:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026465:	88 d1                	mov    cl,dl
c0026467:	d3 e8                	shr    eax,cl
c0026469:	89 c7                	mov    edi,eax
c002646b:	89 e9                	mov    ecx,ebp
c002646d:	d3 e3                	shl    ebx,cl
c002646f:	89 f0                	mov    eax,esi
c0026471:	88 d1                	mov    cl,dl
c0026473:	d3 e8                	shr    eax,cl
c0026475:	09 d8                	or     eax,ebx
c0026477:	89 e9                	mov    ecx,ebp
c0026479:	d3 e6                	shl    esi,cl
c002647b:	89 f3                	mov    ebx,esi
c002647d:	89 fa                	mov    edx,edi
c002647f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026483:	89 d1                	mov    ecx,edx
c0026485:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026489:	89 c6                	mov    esi,eax
c002648b:	89 d7                	mov    edi,edx
c002648d:	39 d1                	cmp    ecx,edx
c002648f:	72 27                	jb     c00264b8 <__umoddi3+0x10c>
c0026491:	74 21                	je     c00264b4 <__umoddi3+0x108>
c0026493:	89 ca                	mov    edx,ecx
c0026495:	29 f3                	sub    ebx,esi
c0026497:	19 fa                	sbb    edx,edi
c0026499:	89 d0                	mov    eax,edx
c002649b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002649f:	d3 e0                	shl    eax,cl
c00264a1:	89 e9                	mov    ecx,ebp
c00264a3:	d3 eb                	shr    ebx,cl
c00264a5:	09 d8                	or     eax,ebx
c00264a7:	d3 ea                	shr    edx,cl
c00264a9:	83 c4 1c             	add    esp,0x1c
c00264ac:	5b                   	pop    ebx
c00264ad:	5e                   	pop    esi
c00264ae:	5f                   	pop    edi
c00264af:	5d                   	pop    ebp
c00264b0:	c3                   	ret    
c00264b1:	8d 76 00             	lea    esi,[esi+0x0]
c00264b4:	39 c3                	cmp    ebx,eax
c00264b6:	73 db                	jae    c0026493 <__umoddi3+0xe7>
c00264b8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00264bc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00264c0:	89 d7                	mov    edi,edx
c00264c2:	89 c6                	mov    esi,eax
c00264c4:	eb cd                	jmp    c0026493 <__umoddi3+0xe7>

c00264c6 <__addsf3>:
c00264c6:	55                   	push   ebp
c00264c7:	89 e5                	mov    ebp,esp
c00264c9:	57                   	push   edi
c00264ca:	56                   	push   esi
c00264cb:	53                   	push   ebx
c00264cc:	83 ec 08             	sub    esp,0x8
c00264cf:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00264d2:	89 fa                	mov    edx,edi
c00264d4:	89 f8                	mov    eax,edi
c00264d6:	c1 f8 17             	sar    eax,0x17
c00264d9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00264dc:	c1 e2 08             	shl    edx,0x8
c00264df:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00264e5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00264e8:	89 de                	mov    esi,ebx
c00264ea:	c1 fe 17             	sar    esi,0x17
c00264ed:	c1 e3 08             	shl    ebx,0x8
c00264f0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00264f6:	31 f0                	xor    eax,esi
c00264f8:	0f 88 3b 01 00 00    	js     c0026639 <__addsf3+0x173>
c00264fe:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026501:	29 f1                	sub    ecx,esi
c0026503:	85 c9                	test   ecx,ecx
c0026505:	7e 54                	jle    c002655b <__addsf3+0x95>
c0026507:	89 f0                	mov    eax,esi
c0026509:	84 c0                	test   al,al
c002650b:	75 10                	jne    c002651d <__addsf3+0x57>
c002650d:	85 db                	test   ebx,ebx
c002650f:	0f 84 aa 02 00 00    	je     c00267bf <__addsf3+0x2f9>
c0026515:	49                   	dec    ecx
c0026516:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026519:	74 38                	je     c0026553 <__addsf3+0x8d>
c002651b:	eb 13                	jmp    c0026530 <__addsf3+0x6a>
c002651d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026520:	f7 d0                	not    eax
c0026522:	84 c0                	test   al,al
c0026524:	0f 84 95 02 00 00    	je     c00267bf <__addsf3+0x2f9>
c002652a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026530:	83 f9 1f             	cmp    ecx,0x1f
c0026533:	0f 8f 86 02 00 00    	jg     c00267bf <__addsf3+0x2f9>
c0026539:	89 de                	mov    esi,ebx
c002653b:	d3 ee                	shr    esi,cl
c002653d:	b8 20 00 00 00       	mov    eax,0x20
c0026542:	29 c8                	sub    eax,ecx
c0026544:	89 c1                	mov    ecx,eax
c0026546:	d3 e3                	shl    ebx,cl
c0026548:	31 c0                	xor    eax,eax
c002654a:	85 db                	test   ebx,ebx
c002654c:	0f 95 c0             	setne  al
c002654f:	09 f0                	or     eax,esi
c0026551:	01 d0                	add    eax,edx
c0026553:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026556:	e9 b6 00 00 00       	jmp    c0026611 <__addsf3+0x14b>
c002655b:	74 5c                	je     c00265b9 <__addsf3+0xf3>
c002655d:	89 f1                	mov    ecx,esi
c002655f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026562:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026565:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026569:	75 14                	jne    c002657f <__addsf3+0xb9>
c002656b:	85 d2                	test   edx,edx
c002656d:	0f 84 4c 02 00 00    	je     c00267bf <__addsf3+0x2f9>
c0026573:	49                   	dec    ecx
c0026574:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026577:	0f 84 94 00 00 00    	je     c0026611 <__addsf3+0x14b>
c002657d:	eb 12                	jmp    c0026591 <__addsf3+0xcb>
c002657f:	89 f0                	mov    eax,esi
c0026581:	f7 d0                	not    eax
c0026583:	84 c0                	test   al,al
c0026585:	0f 84 34 02 00 00    	je     c00267bf <__addsf3+0x2f9>
c002658b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026591:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026594:	83 f9 1f             	cmp    ecx,0x1f
c0026597:	0f 8f 22 02 00 00    	jg     c00267bf <__addsf3+0x2f9>
c002659d:	89 d7                	mov    edi,edx
c002659f:	d3 ef                	shr    edi,cl
c00265a1:	b8 20 00 00 00       	mov    eax,0x20
c00265a6:	29 c8                	sub    eax,ecx
c00265a8:	89 c1                	mov    ecx,eax
c00265aa:	d3 e2                	shl    edx,cl
c00265ac:	31 c0                	xor    eax,eax
c00265ae:	85 d2                	test   edx,edx
c00265b0:	0f 95 c0             	setne  al
c00265b3:	09 f8                	or     eax,edi
c00265b5:	01 d8                	add    eax,ebx
c00265b7:	eb 58                	jmp    c0026611 <__addsf3+0x14b>
c00265b9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00265bc:	8d 70 01             	lea    esi,[eax+0x1]
c00265bf:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00265c5:	75 32                	jne    c00265f9 <__addsf3+0x133>
c00265c7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00265cb:	75 1f                	jne    c00265ec <__addsf3+0x126>
c00265cd:	85 d2                	test   edx,edx
c00265cf:	0f 84 e0 01 00 00    	je     c00267b5 <__addsf3+0x2ef>
c00265d5:	85 db                	test   ebx,ebx
c00265d7:	0f 84 e2 01 00 00    	je     c00267bf <__addsf3+0x2f9>
c00265dd:	89 d0                	mov    eax,edx
c00265df:	01 d8                	add    eax,ebx
c00265e1:	0f 89 a9 01 00 00    	jns    c0026790 <__addsf3+0x2ca>
c00265e7:	e9 9d 01 00 00       	jmp    c0026789 <__addsf3+0x2c3>
c00265ec:	85 d2                	test   edx,edx
c00265ee:	0f 85 cb 01 00 00    	jne    c00267bf <__addsf3+0x2f9>
c00265f4:	e9 bc 01 00 00       	jmp    c00267b5 <__addsf3+0x2ef>
c00265f9:	31 c0                	xor    eax,eax
c00265fb:	89 f1                	mov    ecx,esi
c00265fd:	f7 d1                	not    ecx
c00265ff:	84 c9                	test   cl,cl
c0026601:	0f 84 90 01 00 00    	je     c0026797 <__addsf3+0x2d1>
c0026607:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002660a:	d1 e8                	shr    eax,1
c002660c:	e9 86 01 00 00       	jmp    c0026797 <__addsf3+0x2d1>
c0026611:	85 c0                	test   eax,eax
c0026613:	0f 89 7e 01 00 00    	jns    c0026797 <__addsf3+0x2d1>
c0026619:	46                   	inc    esi
c002661a:	89 f2                	mov    edx,esi
c002661c:	f7 d2                	not    edx
c002661e:	84 d2                	test   dl,dl
c0026620:	0f 84 6f 01 00 00    	je     c0026795 <__addsf3+0x2cf>
c0026626:	89 c2                	mov    edx,eax
c0026628:	83 e2 01             	and    edx,0x1
c002662b:	d1 e8                	shr    eax,1
c002662d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026632:	09 d0                	or     eax,edx
c0026634:	e9 5e 01 00 00       	jmp    c0026797 <__addsf3+0x2d1>
c0026639:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c002663d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026640:	89 f0                	mov    eax,esi
c0026642:	0f b6 c0             	movzx  eax,al
c0026645:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026648:	29 c1                	sub    ecx,eax
c002664a:	85 c9                	test   ecx,ecx
c002664c:	7e 55                	jle    c00266a3 <__addsf3+0x1dd>
c002664e:	85 c0                	test   eax,eax
c0026650:	75 11                	jne    c0026663 <__addsf3+0x19d>
c0026652:	85 db                	test   ebx,ebx
c0026654:	0f 84 65 01 00 00    	je     c00267bf <__addsf3+0x2f9>
c002665a:	49                   	dec    ecx
c002665b:	75 19                	jne    c0026676 <__addsf3+0x1b0>
c002665d:	89 d0                	mov    eax,edx
c002665f:	29 d8                	sub    eax,ebx
c0026661:	eb 38                	jmp    c002669b <__addsf3+0x1d5>
c0026663:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026666:	f7 d0                	not    eax
c0026668:	84 c0                	test   al,al
c002666a:	0f 84 4f 01 00 00    	je     c00267bf <__addsf3+0x2f9>
c0026670:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026676:	83 f9 1f             	cmp    ecx,0x1f
c0026679:	0f 8f 40 01 00 00    	jg     c00267bf <__addsf3+0x2f9>
c002667f:	89 de                	mov    esi,ebx
c0026681:	d3 ee                	shr    esi,cl
c0026683:	b8 20 00 00 00       	mov    eax,0x20
c0026688:	29 c8                	sub    eax,ecx
c002668a:	89 c1                	mov    ecx,eax
c002668c:	d3 e3                	shl    ebx,cl
c002668e:	31 c0                	xor    eax,eax
c0026690:	85 db                	test   ebx,ebx
c0026692:	0f 95 c0             	setne  al
c0026695:	09 f0                	or     eax,esi
c0026697:	29 c2                	sub    edx,eax
c0026699:	89 d0                	mov    eax,edx
c002669b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002669e:	e9 af 00 00 00       	jmp    c0026752 <__addsf3+0x28c>
c00266a3:	74 5c                	je     c0026701 <__addsf3+0x23b>
c00266a5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00266a8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00266ab:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00266af:	75 14                	jne    c00266c5 <__addsf3+0x1ff>
c00266b1:	85 d2                	test   edx,edx
c00266b3:	0f 84 06 01 00 00    	je     c00267bf <__addsf3+0x2f9>
c00266b9:	48                   	dec    eax
c00266ba:	75 1b                	jne    c00266d7 <__addsf3+0x211>
c00266bc:	89 d8                	mov    eax,ebx
c00266be:	29 d0                	sub    eax,edx
c00266c0:	e9 8d 00 00 00       	jmp    c0026752 <__addsf3+0x28c>
c00266c5:	89 f1                	mov    ecx,esi
c00266c7:	f7 d1                	not    ecx
c00266c9:	84 c9                	test   cl,cl
c00266cb:	0f 84 ee 00 00 00    	je     c00267bf <__addsf3+0x2f9>
c00266d1:	81 ca 00 00 00 80    	or     edx,0x80000000
c00266d7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00266da:	83 f8 1f             	cmp    eax,0x1f
c00266dd:	0f 8f dc 00 00 00    	jg     c00267bf <__addsf3+0x2f9>
c00266e3:	89 d7                	mov    edi,edx
c00266e5:	88 c1                	mov    cl,al
c00266e7:	d3 ef                	shr    edi,cl
c00266e9:	b9 20 00 00 00       	mov    ecx,0x20
c00266ee:	29 c1                	sub    ecx,eax
c00266f0:	d3 e2                	shl    edx,cl
c00266f2:	31 c0                	xor    eax,eax
c00266f4:	85 d2                	test   edx,edx
c00266f6:	0f 95 c0             	setne  al
c00266f9:	09 f8                	or     eax,edi
c00266fb:	29 c3                	sub    ebx,eax
c00266fd:	89 d8                	mov    eax,ebx
c00266ff:	eb 51                	jmp    c0026752 <__addsf3+0x28c>
c0026701:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026704:	40                   	inc    eax
c0026705:	a8 fe                	test   al,0xfe
c0026707:	75 3d                	jne    c0026746 <__addsf3+0x280>
c0026709:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002670d:	0f 85 a7 00 00 00    	jne    c00267ba <__addsf3+0x2f4>
c0026713:	85 d2                	test   edx,edx
c0026715:	75 12                	jne    c0026729 <__addsf3+0x263>
c0026717:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002671a:	85 db                	test   ebx,ebx
c002671c:	0f 85 9d 00 00 00    	jne    c00267bf <__addsf3+0x2f9>
c0026722:	31 ff                	xor    edi,edi
c0026724:	e9 96 00 00 00       	jmp    c00267bf <__addsf3+0x2f9>
c0026729:	85 db                	test   ebx,ebx
c002672b:	0f 84 8e 00 00 00    	je     c00267bf <__addsf3+0x2f9>
c0026731:	89 d0                	mov    eax,edx
c0026733:	29 d8                	sub    eax,ebx
c0026735:	79 06                	jns    c002673d <__addsf3+0x277>
c0026737:	89 d8                	mov    eax,ebx
c0026739:	29 d0                	sub    eax,edx
c002673b:	eb 5a                	jmp    c0026797 <__addsf3+0x2d1>
c002673d:	bf 00 00 00 00       	mov    edi,0x0
c0026742:	74 7b                	je     c00267bf <__addsf3+0x2f9>
c0026744:	eb 4a                	jmp    c0026790 <__addsf3+0x2ca>
c0026746:	89 d0                	mov    eax,edx
c0026748:	29 d8                	sub    eax,ebx
c002674a:	79 12                	jns    c002675e <__addsf3+0x298>
c002674c:	89 d8                	mov    eax,ebx
c002674e:	29 d0                	sub    eax,edx
c0026750:	eb 09                	jmp    c002675b <__addsf3+0x295>
c0026752:	85 c0                	test   eax,eax
c0026754:	79 41                	jns    c0026797 <__addsf3+0x2d1>
c0026756:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002675b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c002675e:	31 f6                	xor    esi,esi
c0026760:	85 c0                	test   eax,eax
c0026762:	74 33                	je     c0026797 <__addsf3+0x2d1>
c0026764:	0f bd c8             	bsr    ecx,eax
c0026767:	83 f1 1f             	xor    ecx,0x1f
c002676a:	d3 e0                	shl    eax,cl
c002676c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026770:	39 ca                	cmp    edx,ecx
c0026772:	7f 10                	jg     c0026784 <__addsf3+0x2be>
c0026774:	29 d1                	sub    ecx,edx
c0026776:	41                   	inc    ecx
c0026777:	d3 e8                	shr    eax,cl
c0026779:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002677c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026782:	eb 13                	jmp    c0026797 <__addsf3+0x2d1>
c0026784:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026787:	29 ce                	sub    esi,ecx
c0026789:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002678e:	eb 07                	jmp    c0026797 <__addsf3+0x2d1>
c0026790:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026793:	eb 02                	jmp    c0026797 <__addsf3+0x2d1>
c0026795:	31 c0                	xor    eax,eax
c0026797:	89 c2                	mov    edx,eax
c0026799:	c1 ea 08             	shr    edx,0x8
c002679c:	a8 7f                	test   al,0x7f
c002679e:	0f 95 c1             	setne  cl
c00267a1:	09 d1                	or     ecx,edx
c00267a3:	83 e1 01             	and    ecx,0x1
c00267a6:	c1 e8 07             	shr    eax,0x7
c00267a9:	21 c8                	and    eax,ecx
c00267ab:	c1 e6 17             	shl    esi,0x17
c00267ae:	09 d6                	or     esi,edx
c00267b0:	8d 3c 30             	lea    edi,[eax+esi*1]
c00267b3:	eb 0a                	jmp    c00267bf <__addsf3+0x2f9>
c00267b5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00267b8:	eb 05                	jmp    c00267bf <__addsf3+0x2f9>
c00267ba:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00267bf:	89 f8                	mov    eax,edi
c00267c1:	5a                   	pop    edx
c00267c2:	59                   	pop    ecx
c00267c3:	5b                   	pop    ebx
c00267c4:	5e                   	pop    esi
c00267c5:	5f                   	pop    edi
c00267c6:	5d                   	pop    ebp
c00267c7:	c3                   	ret    

c00267c8 <__subsf3>:
c00267c8:	55                   	push   ebp
c00267c9:	89 e5                	mov    ebp,esp
c00267cb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267ce:	05 00 00 00 80       	add    eax,0x80000000
c00267d3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00267d6:	5d                   	pop    ebp
c00267d7:	e9 ea fc ff ff       	jmp    c00264c6 <__addsf3>

c00267dc <__negsf2>:
c00267dc:	55                   	push   ebp
c00267dd:	89 e5                	mov    ebp,esp
c00267df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00267e2:	05 00 00 00 80       	add    eax,0x80000000
c00267e7:	5d                   	pop    ebp
c00267e8:	c3                   	ret    

c00267e9 <__mulsf3>:
c00267e9:	55                   	push   ebp
c00267ea:	89 e5                	mov    ebp,esp
c00267ec:	57                   	push   edi
c00267ed:	56                   	push   esi
c00267ee:	53                   	push   ebx
c00267ef:	83 ec 1c             	sub    esp,0x1c
c00267f2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00267f5:	89 f0                	mov    eax,esi
c00267f7:	89 f1                	mov    ecx,esi
c00267f9:	c1 f9 17             	sar    ecx,0x17
c00267fc:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00267ff:	c1 e0 08             	shl    eax,0x8
c0026802:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026807:	89 c1                	mov    ecx,eax
c0026809:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002680c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002680f:	89 c7                	mov    edi,eax
c0026811:	c1 ff 17             	sar    edi,0x17
c0026814:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026818:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002681b:	89 f8                	mov    eax,edi
c002681d:	0f b6 c0             	movzx  eax,al
c0026820:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026823:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026827:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002682a:	42                   	inc    edx
c002682b:	80 e2 fe             	and    dl,0xfe
c002682e:	75 7b                	jne    c00268ab <__mulsf3+0xc2>
c0026830:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026834:	74 54                	je     c002688a <__mulsf3+0xa1>
c0026836:	85 c9                	test   ecx,ecx
c0026838:	0f 85 64 01 00 00    	jne    c00269a2 <__mulsf3+0x1b9>
c002683e:	8d 57 01             	lea    edx,[edi+0x1]
c0026841:	80 e2 fe             	and    dl,0xfe
c0026844:	75 1f                	jne    c0026865 <__mulsf3+0x7c>
c0026846:	85 c0                	test   eax,eax
c0026848:	b8 00 00 00 00       	mov    eax,0x0
c002684d:	74 29                	je     c0026878 <__mulsf3+0x8f>
c002684f:	53                   	push   ebx
c0026850:	53                   	push   ebx
c0026851:	50                   	push   eax
c0026852:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026855:	e8 96 05 00 00       	call   c0026df0 <__nesf2>
c002685a:	83 c4 10             	add    esp,0x10
c002685d:	85 c0                	test   eax,eax
c002685f:	0f 85 3a 01 00 00    	jne    c002699f <__mulsf3+0x1b6>
c0026865:	85 ff                	test   edi,edi
c0026867:	0f 89 35 01 00 00    	jns    c00269a2 <__mulsf3+0x1b9>
c002686d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026873:	e9 2a 01 00 00       	jmp    c00269a2 <__mulsf3+0x1b9>
c0026878:	51                   	push   ecx
c0026879:	51                   	push   ecx
c002687a:	50                   	push   eax
c002687b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002687e:	e8 6d 05 00 00       	call   c0026df0 <__nesf2>
c0026883:	83 c4 10             	add    esp,0x10
c0026886:	85 c0                	test   eax,eax
c0026888:	eb 15                	jmp    c002689f <__mulsf3+0xb6>
c002688a:	85 c9                	test   ecx,ecx
c002688c:	74 0b                	je     c0026899 <__mulsf3+0xb0>
c002688e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026891:	01 c9                	add    ecx,ecx
c0026893:	78 16                	js     c00268ab <__mulsf3+0xc2>
c0026895:	89 d3                	mov    ebx,edx
c0026897:	eb f5                	jmp    c002688e <__mulsf3+0xa5>
c0026899:	89 f8                	mov    eax,edi
c002689b:	f7 d0                	not    eax
c002689d:	84 c0                	test   al,al
c002689f:	75 c4                	jne    c0026865 <__mulsf3+0x7c>
c00268a1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00268a6:	e9 f7 00 00 00       	jmp    c00269a2 <__mulsf3+0x1b9>
c00268ab:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00268ae:	c1 e6 08             	shl    esi,0x8
c00268b1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00268b7:	8d 57 01             	lea    edx,[edi+0x1]
c00268ba:	80 e2 fe             	and    dl,0xfe
c00268bd:	75 63                	jne    c0026922 <__mulsf3+0x139>
c00268bf:	85 c0                	test   eax,eax
c00268c1:	74 2f                	je     c00268f2 <__mulsf3+0x109>
c00268c3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00268c7:	0f 89 d2 00 00 00    	jns    c002699f <__mulsf3+0x1b6>
c00268cd:	52                   	push   edx
c00268ce:	52                   	push   edx
c00268cf:	6a 00                	push   0x0
c00268d1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00268d4:	e8 dc 04 00 00       	call   c0026db5 <__eqsf2>
c00268d9:	83 c4 10             	add    esp,0x10
c00268dc:	85 c0                	test   eax,eax
c00268de:	0f 85 bb 00 00 00    	jne    c002699f <__mulsf3+0x1b6>
c00268e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00268e7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00268ed:	e9 b0 00 00 00       	jmp    c00269a2 <__mulsf3+0x1b9>
c00268f2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00268f5:	50                   	push   eax
c00268f6:	50                   	push   eax
c00268f7:	6a 00                	push   0x0
c00268f9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00268fc:	e8 b4 04 00 00       	call   c0026db5 <__eqsf2>
c0026901:	83 c4 10             	add    esp,0x10
c0026904:	85 c0                	test   eax,eax
c0026906:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026909:	75 0c                	jne    c0026917 <__mulsf3+0x12e>
c002690b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002690f:	0f 89 8a 00 00 00    	jns    c002699f <__mulsf3+0x1b6>
c0026915:	eb cd                	jmp    c00268e4 <__mulsf3+0xfb>
c0026917:	8d 43 ff             	lea    eax,[ebx-0x1]
c002691a:	01 f6                	add    esi,esi
c002691c:	78 04                	js     c0026922 <__mulsf3+0x139>
c002691e:	89 c3                	mov    ebx,eax
c0026920:	eb f5                	jmp    c0026917 <__mulsf3+0x12e>
c0026922:	89 c8                	mov    eax,ecx
c0026924:	0d 00 00 00 80       	or     eax,0x80000000
c0026929:	81 ce 00 00 00 80    	or     esi,0x80000000
c002692f:	f7 e6                	mul    esi
c0026931:	85 c0                	test   eax,eax
c0026933:	0f 95 c0             	setne  al
c0026936:	0f b6 c0             	movzx  eax,al
c0026939:	09 c2                	or     edx,eax
c002693b:	78 03                	js     c0026940 <__mulsf3+0x157>
c002693d:	01 d2                	add    edx,edx
c002693f:	4b                   	dec    ebx
c0026940:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026946:	7f 22                	jg     c002696a <__mulsf3+0x181>
c0026948:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002694e:	85 db                	test   ebx,ebx
c0026950:	7f 23                	jg     c0026975 <__mulsf3+0x18c>
c0026952:	83 fb e9             	cmp    ebx,0xffffffe9
c0026955:	7c 1a                	jl     c0026971 <__mulsf3+0x188>
c0026957:	81 ca 00 00 00 80    	or     edx,0x80000000
c002695d:	b9 01 00 00 00       	mov    ecx,0x1
c0026962:	29 d9                	sub    ecx,ebx
c0026964:	d3 ea                	shr    edx,cl
c0026966:	31 db                	xor    ebx,ebx
c0026968:	eb 0b                	jmp    c0026975 <__mulsf3+0x18c>
c002696a:	bb ff 00 00 00       	mov    ebx,0xff
c002696f:	eb 02                	jmp    c0026973 <__mulsf3+0x18a>
c0026971:	31 db                	xor    ebx,ebx
c0026973:	31 d2                	xor    edx,edx
c0026975:	89 d0                	mov    eax,edx
c0026977:	c1 e8 08             	shr    eax,0x8
c002697a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002697d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026983:	09 fb                	or     ebx,edi
c0026985:	c1 e3 17             	shl    ebx,0x17
c0026988:	09 c3                	or     ebx,eax
c002698a:	f6 c2 7f             	test   dl,0x7f
c002698d:	0f 95 c1             	setne  cl
c0026990:	09 c8                	or     eax,ecx
c0026992:	83 e0 01             	and    eax,0x1
c0026995:	c1 ea 07             	shr    edx,0x7
c0026998:	21 c2                	and    edx,eax
c002699a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002699d:	eb 03                	jmp    c00269a2 <__mulsf3+0x1b9>
c002699f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00269a2:	89 f0                	mov    eax,esi
c00269a4:	8d 65 f4             	lea    esp,[ebp-0xc]
c00269a7:	5b                   	pop    ebx
c00269a8:	5e                   	pop    esi
c00269a9:	5f                   	pop    edi
c00269aa:	5d                   	pop    ebp
c00269ab:	c3                   	ret    

c00269ac <__divsf3>:
c00269ac:	55                   	push   ebp
c00269ad:	89 e5                	mov    ebp,esp
c00269af:	57                   	push   edi
c00269b0:	56                   	push   esi
c00269b1:	53                   	push   ebx
c00269b2:	83 ec 1c             	sub    esp,0x1c
c00269b5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00269b8:	89 d8                	mov    eax,ebx
c00269ba:	89 d9                	mov    ecx,ebx
c00269bc:	c1 f9 17             	sar    ecx,0x17
c00269bf:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00269c2:	c1 e0 08             	shl    eax,0x8
c00269c5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00269ca:	89 c1                	mov    ecx,eax
c00269cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00269cf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00269d2:	89 c7                	mov    edi,eax
c00269d4:	c1 ff 17             	sar    edi,0x17
c00269d7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00269db:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00269de:	89 f8                	mov    eax,edi
c00269e0:	0f b6 c0             	movzx  eax,al
c00269e3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00269e6:	29 c6                	sub    esi,eax
c00269e8:	83 c6 7f             	add    esi,0x7f
c00269eb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00269ee:	42                   	inc    edx
c00269ef:	80 e2 fe             	and    dl,0xfe
c00269f2:	0f 85 9c 00 00 00    	jne    c0026a94 <__divsf3+0xe8>
c00269f8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00269fc:	74 33                	je     c0026a31 <__divsf3+0x85>
c00269fe:	85 c9                	test   ecx,ecx
c0026a00:	0f 85 c7 01 00 00    	jne    c0026bcd <__divsf3+0x221>
c0026a06:	8d 57 01             	lea    edx,[edi+0x1]
c0026a09:	80 e2 fe             	and    dl,0xfe
c0026a0c:	75 2f                	jne    c0026a3d <__divsf3+0x91>
c0026a0e:	85 c0                	test   eax,eax
c0026a10:	74 2b                	je     c0026a3d <__divsf3+0x91>
c0026a12:	51                   	push   ecx
c0026a13:	51                   	push   ecx
c0026a14:	6a 00                	push   0x0
c0026a16:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026a19:	e8 d2 03 00 00       	call   c0026df0 <__nesf2>
c0026a1e:	83 c4 10             	add    esp,0x10
c0026a21:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026a24:	85 c0                	test   eax,eax
c0026a26:	0f 85 a1 01 00 00    	jne    c0026bcd <__divsf3+0x221>
c0026a2c:	e9 92 01 00 00       	jmp    c0026bc3 <__divsf3+0x217>
c0026a31:	85 c9                	test   ecx,ecx
c0026a33:	75 1b                	jne    c0026a50 <__divsf3+0xa4>
c0026a35:	8d 57 01             	lea    edx,[edi+0x1]
c0026a38:	80 e2 fe             	and    dl,0xfe
c0026a3b:	74 1e                	je     c0026a5b <__divsf3+0xaf>
c0026a3d:	85 ff                	test   edi,edi
c0026a3f:	0f 89 88 01 00 00    	jns    c0026bcd <__divsf3+0x221>
c0026a45:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026a4b:	e9 7d 01 00 00       	jmp    c0026bcd <__divsf3+0x221>
c0026a50:	8d 56 ff             	lea    edx,[esi-0x1]
c0026a53:	01 c9                	add    ecx,ecx
c0026a55:	78 3d                	js     c0026a94 <__divsf3+0xe8>
c0026a57:	89 d6                	mov    esi,edx
c0026a59:	eb f5                	jmp    c0026a50 <__divsf3+0xa4>
c0026a5b:	85 c0                	test   eax,eax
c0026a5d:	b8 00 00 00 00       	mov    eax,0x0
c0026a62:	74 18                	je     c0026a7c <__divsf3+0xd0>
c0026a64:	52                   	push   edx
c0026a65:	52                   	push   edx
c0026a66:	50                   	push   eax
c0026a67:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026a6a:	e8 81 03 00 00       	call   c0026df0 <__nesf2>
c0026a6f:	83 c4 10             	add    esp,0x10
c0026a72:	85 c0                	test   eax,eax
c0026a74:	0f 85 50 01 00 00    	jne    c0026bca <__divsf3+0x21e>
c0026a7a:	eb c1                	jmp    c0026a3d <__divsf3+0x91>
c0026a7c:	56                   	push   esi
c0026a7d:	56                   	push   esi
c0026a7e:	50                   	push   eax
c0026a7f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026a82:	e8 69 03 00 00       	call   c0026df0 <__nesf2>
c0026a87:	83 c4 10             	add    esp,0x10
c0026a8a:	85 c0                	test   eax,eax
c0026a8c:	0f 84 31 01 00 00    	je     c0026bc3 <__divsf3+0x217>
c0026a92:	eb a9                	jmp    c0026a3d <__divsf3+0x91>
c0026a94:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026a97:	c1 e3 08             	shl    ebx,0x8
c0026a9a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026aa0:	8d 57 01             	lea    edx,[edi+0x1]
c0026aa3:	80 e2 fe             	and    dl,0xfe
c0026aa6:	75 71                	jne    c0026b19 <__divsf3+0x16d>
c0026aa8:	85 c0                	test   eax,eax
c0026aaa:	ba 00 00 00 00       	mov    edx,0x0
c0026aaf:	74 2f                	je     c0026ae0 <__divsf3+0x134>
c0026ab1:	51                   	push   ecx
c0026ab2:	51                   	push   ecx
c0026ab3:	52                   	push   edx
c0026ab4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ab7:	e8 f9 02 00 00       	call   c0026db5 <__eqsf2>
c0026abc:	83 c4 10             	add    esp,0x10
c0026abf:	85 c0                	test   eax,eax
c0026ac1:	0f 85 03 01 00 00    	jne    c0026bca <__divsf3+0x21e>
c0026ac7:	31 d2                	xor    edx,edx
c0026ac9:	89 d3                	mov    ebx,edx
c0026acb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026ace:	31 f8                	xor    eax,edi
c0026ad0:	0f 89 f7 00 00 00    	jns    c0026bcd <__divsf3+0x221>
c0026ad6:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026adb:	e9 ed 00 00 00       	jmp    c0026bcd <__divsf3+0x221>
c0026ae0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026ae3:	50                   	push   eax
c0026ae4:	50                   	push   eax
c0026ae5:	52                   	push   edx
c0026ae6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ae9:	e8 c7 02 00 00       	call   c0026db5 <__eqsf2>
c0026aee:	83 c4 10             	add    esp,0x10
c0026af1:	85 c0                	test   eax,eax
c0026af3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026af6:	75 16                	jne    c0026b0e <__divsf3+0x162>
c0026af8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026afb:	31 fb                	xor    ebx,edi
c0026afd:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026b03:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026b09:	e9 bf 00 00 00       	jmp    c0026bcd <__divsf3+0x221>
c0026b0e:	8d 46 01             	lea    eax,[esi+0x1]
c0026b11:	01 db                	add    ebx,ebx
c0026b13:	78 04                	js     c0026b19 <__divsf3+0x16d>
c0026b15:	89 c6                	mov    esi,eax
c0026b17:	eb f5                	jmp    c0026b0e <__divsf3+0x162>
c0026b19:	89 c8                	mov    eax,ecx
c0026b1b:	0d 00 00 00 80       	or     eax,0x80000000
c0026b20:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026b26:	31 d2                	xor    edx,edx
c0026b28:	39 d8                	cmp    eax,ebx
c0026b2a:	72 07                	jb     c0026b33 <__divsf3+0x187>
c0026b2c:	29 d8                	sub    eax,ebx
c0026b2e:	ba 01 00 00 00       	mov    edx,0x1
c0026b33:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026b3a:	01 d2                	add    edx,edx
c0026b3c:	89 c1                	mov    ecx,eax
c0026b3e:	01 c0                	add    eax,eax
c0026b40:	85 c9                	test   ecx,ecx
c0026b42:	78 04                	js     c0026b48 <__divsf3+0x19c>
c0026b44:	39 c3                	cmp    ebx,eax
c0026b46:	77 05                	ja     c0026b4d <__divsf3+0x1a1>
c0026b48:	29 d8                	sub    eax,ebx
c0026b4a:	83 ca 01             	or     edx,0x1
c0026b4d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026b50:	75 e8                	jne    c0026b3a <__divsf3+0x18e>
c0026b52:	85 c0                	test   eax,eax
c0026b54:	0f 95 c0             	setne  al
c0026b57:	0f b6 c0             	movzx  eax,al
c0026b5a:	c1 e2 06             	shl    edx,0x6
c0026b5d:	09 c2                	or     edx,eax
c0026b5f:	78 03                	js     c0026b64 <__divsf3+0x1b8>
c0026b61:	01 d2                	add    edx,edx
c0026b63:	4e                   	dec    esi
c0026b64:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026b6a:	7f 22                	jg     c0026b8e <__divsf3+0x1e2>
c0026b6c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026b72:	85 f6                	test   esi,esi
c0026b74:	7f 23                	jg     c0026b99 <__divsf3+0x1ed>
c0026b76:	83 fe e9             	cmp    esi,0xffffffe9
c0026b79:	7c 1a                	jl     c0026b95 <__divsf3+0x1e9>
c0026b7b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b81:	b9 01 00 00 00       	mov    ecx,0x1
c0026b86:	29 f1                	sub    ecx,esi
c0026b88:	d3 ea                	shr    edx,cl
c0026b8a:	31 f6                	xor    esi,esi
c0026b8c:	eb 0b                	jmp    c0026b99 <__divsf3+0x1ed>
c0026b8e:	be ff 00 00 00       	mov    esi,0xff
c0026b93:	eb 02                	jmp    c0026b97 <__divsf3+0x1eb>
c0026b95:	31 f6                	xor    esi,esi
c0026b97:	31 d2                	xor    edx,edx
c0026b99:	89 d0                	mov    eax,edx
c0026b9b:	c1 e8 08             	shr    eax,0x8
c0026b9e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026ba1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026ba7:	09 fe                	or     esi,edi
c0026ba9:	c1 e6 17             	shl    esi,0x17
c0026bac:	09 c6                	or     esi,eax
c0026bae:	f6 c2 7f             	test   dl,0x7f
c0026bb1:	0f 95 c1             	setne  cl
c0026bb4:	09 c8                	or     eax,ecx
c0026bb6:	83 e0 01             	and    eax,0x1
c0026bb9:	c1 ea 07             	shr    edx,0x7
c0026bbc:	21 c2                	and    edx,eax
c0026bbe:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0026bc1:	eb 0a                	jmp    c0026bcd <__divsf3+0x221>
c0026bc3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0026bc8:	eb 03                	jmp    c0026bcd <__divsf3+0x221>
c0026bca:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026bcd:	89 d8                	mov    eax,ebx
c0026bcf:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026bd2:	5b                   	pop    ebx
c0026bd3:	5e                   	pop    esi
c0026bd4:	5f                   	pop    edi
c0026bd5:	5d                   	pop    ebp
c0026bd6:	c3                   	ret    

c0026bd7 <__floatsisf>:
c0026bd7:	55                   	push   ebp
c0026bd8:	89 e5                	mov    ebp,esp
c0026bda:	53                   	push   ebx
c0026bdb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026bde:	85 d2                	test   edx,edx
c0026be0:	7e 2b                	jle    c0026c0d <__floatsisf+0x36>
c0026be2:	0f bd ca             	bsr    ecx,edx
c0026be5:	83 f1 1f             	xor    ecx,0x1f
c0026be8:	d3 e2                	shl    edx,cl
c0026bea:	89 d0                	mov    eax,edx
c0026bec:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026bf1:	89 c3                	mov    ebx,eax
c0026bf3:	c1 eb 08             	shr    ebx,0x8
c0026bf6:	80 e2 7f             	and    dl,0x7f
c0026bf9:	0f 95 c2             	setne  dl
c0026bfc:	09 da                	or     edx,ebx
c0026bfe:	83 e2 01             	and    edx,0x1
c0026c01:	c1 e8 07             	shr    eax,0x7
c0026c04:	21 c2                	and    edx,eax
c0026c06:	b8 9e 00 00 00       	mov    eax,0x9e
c0026c0b:	eb 32                	jmp    c0026c3f <__floatsisf+0x68>
c0026c0d:	b8 00 00 00 00       	mov    eax,0x0
c0026c12:	74 34                	je     c0026c48 <__floatsisf+0x71>
c0026c14:	f7 da                	neg    edx
c0026c16:	0f bd ca             	bsr    ecx,edx
c0026c19:	83 f1 1f             	xor    ecx,0x1f
c0026c1c:	d3 e2                	shl    edx,cl
c0026c1e:	89 d0                	mov    eax,edx
c0026c20:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026c25:	89 c3                	mov    ebx,eax
c0026c27:	c1 eb 08             	shr    ebx,0x8
c0026c2a:	80 e2 7f             	and    dl,0x7f
c0026c2d:	0f 95 c2             	setne  dl
c0026c30:	09 da                	or     edx,ebx
c0026c32:	83 e2 01             	and    edx,0x1
c0026c35:	c1 e8 07             	shr    eax,0x7
c0026c38:	21 c2                	and    edx,eax
c0026c3a:	b8 9e 01 00 00       	mov    eax,0x19e
c0026c3f:	29 c8                	sub    eax,ecx
c0026c41:	c1 e0 17             	shl    eax,0x17
c0026c44:	09 d8                	or     eax,ebx
c0026c46:	01 d0                	add    eax,edx
c0026c48:	5b                   	pop    ebx
c0026c49:	5d                   	pop    ebp
c0026c4a:	c3                   	ret    

c0026c4b <__floatunsisf>:
c0026c4b:	55                   	push   ebp
c0026c4c:	89 e5                	mov    ebp,esp
c0026c4e:	53                   	push   ebx
c0026c4f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026c52:	31 c0                	xor    eax,eax
c0026c54:	85 d2                	test   edx,edx
c0026c56:	74 32                	je     c0026c8a <__floatunsisf+0x3f>
c0026c58:	0f bd ca             	bsr    ecx,edx
c0026c5b:	83 f1 1f             	xor    ecx,0x1f
c0026c5e:	d3 e2                	shl    edx,cl
c0026c60:	89 d0                	mov    eax,edx
c0026c62:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026c67:	89 c3                	mov    ebx,eax
c0026c69:	c1 eb 08             	shr    ebx,0x8
c0026c6c:	80 e2 7f             	and    dl,0x7f
c0026c6f:	0f 95 c2             	setne  dl
c0026c72:	09 da                	or     edx,ebx
c0026c74:	83 e2 01             	and    edx,0x1
c0026c77:	c1 e8 07             	shr    eax,0x7
c0026c7a:	21 c2                	and    edx,eax
c0026c7c:	b8 9e 00 00 00       	mov    eax,0x9e
c0026c81:	29 c8                	sub    eax,ecx
c0026c83:	c1 e0 17             	shl    eax,0x17
c0026c86:	09 d8                	or     eax,ebx
c0026c88:	01 d0                	add    eax,edx
c0026c8a:	5b                   	pop    ebx
c0026c8b:	5d                   	pop    ebp
c0026c8c:	c3                   	ret    

c0026c8d <__fixsfsi>:
c0026c8d:	55                   	push   ebp
c0026c8e:	89 e5                	mov    ebp,esp
c0026c90:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026c93:	89 d1                	mov    ecx,edx
c0026c95:	c1 e1 08             	shl    ecx,0x8
c0026c98:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0026c9e:	c1 fa 17             	sar    edx,0x17
c0026ca1:	78 1c                	js     c0026cbf <__fixsfsi+0x32>
c0026ca3:	83 ea 7f             	sub    edx,0x7f
c0026ca6:	31 c0                	xor    eax,eax
c0026ca8:	83 fa 1e             	cmp    edx,0x1e
c0026cab:	77 40                	ja     c0026ced <__fixsfsi+0x60>
c0026cad:	89 c8                	mov    eax,ecx
c0026caf:	0d 00 00 00 80       	or     eax,0x80000000
c0026cb4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026cb9:	29 d1                	sub    ecx,edx
c0026cbb:	d3 e8                	shr    eax,cl
c0026cbd:	eb 2e                	jmp    c0026ced <__fixsfsi+0x60>
c0026cbf:	31 c0                	xor    eax,eax
c0026cc1:	81 c2 81 00 00 00    	add    edx,0x81
c0026cc7:	78 24                	js     c0026ced <__fixsfsi+0x60>
c0026cc9:	83 fa 1e             	cmp    edx,0x1e
c0026ccc:	7e 09                	jle    c0026cd7 <__fixsfsi+0x4a>
c0026cce:	83 fa 1f             	cmp    edx,0x1f
c0026cd1:	75 18                	jne    c0026ceb <__fixsfsi+0x5e>
c0026cd3:	85 c9                	test   ecx,ecx
c0026cd5:	75 14                	jne    c0026ceb <__fixsfsi+0x5e>
c0026cd7:	89 c8                	mov    eax,ecx
c0026cd9:	0d 00 00 00 80       	or     eax,0x80000000
c0026cde:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026ce3:	29 d1                	sub    ecx,edx
c0026ce5:	d3 e8                	shr    eax,cl
c0026ce7:	f7 d8                	neg    eax
c0026ce9:	eb 02                	jmp    c0026ced <__fixsfsi+0x60>
c0026ceb:	31 c0                	xor    eax,eax
c0026ced:	5d                   	pop    ebp
c0026cee:	c3                   	ret    

c0026cef <__fixunssfsi>:
c0026cef:	55                   	push   ebp
c0026cf0:	89 e5                	mov    ebp,esp
c0026cf2:	53                   	push   ebx
c0026cf3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026cf6:	89 d3                	mov    ebx,edx
c0026cf8:	c1 fb 17             	sar    ebx,0x17
c0026cfb:	83 eb 7f             	sub    ebx,0x7f
c0026cfe:	31 c0                	xor    eax,eax
c0026d00:	83 fb 1f             	cmp    ebx,0x1f
c0026d03:	77 18                	ja     c0026d1d <__fixunssfsi+0x2e>
c0026d05:	89 d0                	mov    eax,edx
c0026d07:	c1 e0 08             	shl    eax,0x8
c0026d0a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026d0f:	0d 00 00 00 80       	or     eax,0x80000000
c0026d14:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026d19:	29 d9                	sub    ecx,ebx
c0026d1b:	d3 e8                	shr    eax,cl
c0026d1d:	5b                   	pop    ebx
c0026d1e:	5d                   	pop    ebp
c0026d1f:	c3                   	ret    

c0026d20 <__cmpsf2>:
c0026d20:	55                   	push   ebp
c0026d21:	89 e5                	mov    ebp,esp
c0026d23:	57                   	push   edi
c0026d24:	56                   	push   esi
c0026d25:	53                   	push   ebx
c0026d26:	83 ec 24             	sub    esp,0x24
c0026d29:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d2c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d2f:	e8 4f 10 00 00       	call   c0027d83 <__truncdfsf2>
c0026d34:	5a                   	pop    edx
c0026d35:	59                   	pop    ecx
c0026d36:	89 c3                	mov    ebx,eax
c0026d38:	c1 e8 17             	shr    eax,0x17
c0026d3b:	0f b6 f0             	movzx  esi,al
c0026d3e:	89 d8                	mov    eax,ebx
c0026d40:	c1 e8 1f             	shr    eax,0x1f
c0026d43:	31 c6                	xor    esi,eax
c0026d45:	c1 e3 08             	shl    ebx,0x8
c0026d48:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026d4b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026d4e:	e8 30 10 00 00       	call   c0027d83 <__truncdfsf2>
c0026d53:	83 c4 10             	add    esp,0x10
c0026d56:	89 c1                	mov    ecx,eax
c0026d58:	c1 e9 17             	shr    ecx,0x17
c0026d5b:	0f b6 c9             	movzx  ecx,cl
c0026d5e:	89 c7                	mov    edi,eax
c0026d60:	c1 ef 1f             	shr    edi,0x1f
c0026d63:	89 ca                	mov    edx,ecx
c0026d65:	31 fa                	xor    edx,edi
c0026d67:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0026d6a:	c1 e0 08             	shl    eax,0x8
c0026d6d:	89 c2                	mov    edx,eax
c0026d6f:	89 d8                	mov    eax,ebx
c0026d71:	09 d0                	or     eax,edx
c0026d73:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026d78:	09 f0                	or     eax,esi
c0026d7a:	75 08                	jne    c0026d84 <__cmpsf2+0x64>
c0026d7c:	31 c0                	xor    eax,eax
c0026d7e:	39 f9                	cmp    ecx,edi
c0026d80:	75 0c                	jne    c0026d8e <__cmpsf2+0x6e>
c0026d82:	eb 29                	jmp    c0026dad <__cmpsf2+0x8d>
c0026d84:	b8 01 00 00 00       	mov    eax,0x1
c0026d89:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0026d8c:	7f 1f                	jg     c0026dad <__cmpsf2+0x8d>
c0026d8e:	83 c8 ff             	or     eax,0xffffffff
c0026d91:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0026d94:	7c 17                	jl     c0026dad <__cmpsf2+0x8d>
c0026d96:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026d9c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026da2:	b8 01 00 00 00       	mov    eax,0x1
c0026da7:	39 d3                	cmp    ebx,edx
c0026da9:	77 02                	ja     c0026dad <__cmpsf2+0x8d>
c0026dab:	19 c0                	sbb    eax,eax
c0026dad:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026db0:	5b                   	pop    ebx
c0026db1:	5e                   	pop    esi
c0026db2:	5f                   	pop    edi
c0026db3:	5d                   	pop    ebp
c0026db4:	c3                   	ret    

c0026db5 <__eqsf2>:
c0026db5:	55                   	push   ebp
c0026db6:	89 e5                	mov    ebp,esp
c0026db8:	83 ec 24             	sub    esp,0x24
c0026dbb:	6a 01                	push   0x1
c0026dbd:	83 ec 0c             	sub    esp,0xc
c0026dc0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026dc3:	e8 df 10 00 00       	call   c0027ea7 <__extendsfdf2>
c0026dc8:	83 c4 10             	add    esp,0x10
c0026dcb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026dce:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026dd1:	52                   	push   edx
c0026dd2:	50                   	push   eax
c0026dd3:	50                   	push   eax
c0026dd4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026dd7:	e8 cb 10 00 00       	call   c0027ea7 <__extendsfdf2>
c0026ddc:	59                   	pop    ecx
c0026ddd:	59                   	pop    ecx
c0026dde:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026de1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026de4:	52                   	push   edx
c0026de5:	50                   	push   eax
c0026de6:	e8 35 ff ff ff       	call   c0026d20 <__cmpsf2>
c0026deb:	83 c4 20             	add    esp,0x20
c0026dee:	c9                   	leave  
c0026def:	c3                   	ret    

c0026df0 <__nesf2>:
c0026df0:	eb c3                	jmp    c0026db5 <__eqsf2>

c0026df2 <__gtsf2>:
c0026df2:	55                   	push   ebp
c0026df3:	89 e5                	mov    ebp,esp
c0026df5:	83 ec 24             	sub    esp,0x24
c0026df8:	6a ff                	push   0xffffffff
c0026dfa:	83 ec 0c             	sub    esp,0xc
c0026dfd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e00:	e8 a2 10 00 00       	call   c0027ea7 <__extendsfdf2>
c0026e05:	83 c4 10             	add    esp,0x10
c0026e08:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026e0b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026e0e:	52                   	push   edx
c0026e0f:	50                   	push   eax
c0026e10:	50                   	push   eax
c0026e11:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e14:	e8 8e 10 00 00       	call   c0027ea7 <__extendsfdf2>
c0026e19:	59                   	pop    ecx
c0026e1a:	59                   	pop    ecx
c0026e1b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026e1e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026e21:	52                   	push   edx
c0026e22:	50                   	push   eax
c0026e23:	e8 f8 fe ff ff       	call   c0026d20 <__cmpsf2>
c0026e28:	83 c4 20             	add    esp,0x20
c0026e2b:	c9                   	leave  
c0026e2c:	c3                   	ret    

c0026e2d <__gesf2>:
c0026e2d:	eb c3                	jmp    c0026df2 <__gtsf2>

c0026e2f <__ltsf2>:
c0026e2f:	eb 84                	jmp    c0026db5 <__eqsf2>

c0026e31 <__lesf2>:
c0026e31:	eb 82                	jmp    c0026db5 <__eqsf2>

c0026e33 <__adddf3>:
c0026e33:	55                   	push   ebp
c0026e34:	89 e5                	mov    ebp,esp
c0026e36:	57                   	push   edi
c0026e37:	56                   	push   esi
c0026e38:	53                   	push   ebx
c0026e39:	83 ec 24             	sub    esp,0x24
c0026e3c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026e3f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026e42:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026e45:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026e48:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026e4b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0026e4e:	89 c8                	mov    eax,ecx
c0026e50:	89 ce                	mov    esi,ecx
c0026e52:	c1 fe 14             	sar    esi,0x14
c0026e55:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0026e58:	89 fb                	mov    ebx,edi
c0026e5a:	89 fa                	mov    edx,edi
c0026e5c:	c1 e2 0b             	shl    edx,0xb
c0026e5f:	c1 e0 0b             	shl    eax,0xb
c0026e62:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026e67:	c1 eb 15             	shr    ebx,0x15
c0026e6a:	09 d8                	or     eax,ebx
c0026e6c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0026e6f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0026e72:	c1 fe 14             	sar    esi,0x14
c0026e75:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0026e78:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026e7b:	89 f3                	mov    ebx,esi
c0026e7d:	c1 e3 0b             	shl    ebx,0xb
c0026e80:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026e83:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026e86:	c1 e3 0b             	shl    ebx,0xb
c0026e89:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0026e8f:	c1 ee 15             	shr    esi,0x15
c0026e92:	09 f3                	or     ebx,esi
c0026e94:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0026e97:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026e9a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0026e9d:	0f 88 5f 02 00 00    	js     c0027102 <__adddf3+0x2cf>
c0026ea3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026ea6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0026ea9:	85 db                	test   ebx,ebx
c0026eab:	0f 8e c7 00 00 00    	jle    c0026f78 <__adddf3+0x145>
c0026eb1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0026eb8:	75 1a                	jne    c0026ed4 <__adddf3+0xa1>
c0026eba:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026ebd:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0026ec0:	0f 84 b2 05 00 00    	je     c0027478 <__adddf3+0x645>
c0026ec6:	4b                   	dec    ebx
c0026ec7:	75 23                	jne    c0026eec <__adddf3+0xb9>
c0026ec9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0026ecc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0026ecf:	e9 99 00 00 00       	jmp    c0026f6d <__adddf3+0x13a>
c0026ed4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026ed7:	f7 d6                	not    esi
c0026ed9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026edf:	0f 84 93 05 00 00    	je     c0027478 <__adddf3+0x645>
c0026ee5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026eec:	83 fb 1f             	cmp    ebx,0x1f
c0026eef:	7e 42                	jle    c0026f33 <__adddf3+0x100>
c0026ef1:	83 fb 3f             	cmp    ebx,0x3f
c0026ef4:	0f 8f 7e 05 00 00    	jg     c0027478 <__adddf3+0x645>
c0026efa:	83 e3 1f             	and    ebx,0x1f
c0026efd:	89 d9                	mov    ecx,ebx
c0026eff:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026f02:	d3 ef                	shr    edi,cl
c0026f04:	31 db                	xor    ebx,ebx
c0026f06:	85 c9                	test   ecx,ecx
c0026f08:	74 15                	je     c0026f1f <__adddf3+0xec>
c0026f0a:	be 20 00 00 00       	mov    esi,0x20
c0026f0f:	29 ce                	sub    esi,ecx
c0026f11:	89 f1                	mov    ecx,esi
c0026f13:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026f16:	d3 e6                	shl    esi,cl
c0026f18:	31 db                	xor    ebx,ebx
c0026f1a:	85 f6                	test   esi,esi
c0026f1c:	0f 95 c3             	setne  bl
c0026f1f:	31 c9                	xor    ecx,ecx
c0026f21:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026f25:	0f 95 c1             	setne  cl
c0026f28:	09 cf                	or     edi,ecx
c0026f2a:	09 fb                	or     ebx,edi
c0026f2c:	01 da                	add    edx,ebx
c0026f2e:	83 d0 00             	adc    eax,0x0
c0026f31:	eb 3a                	jmp    c0026f6d <__adddf3+0x13a>
c0026f33:	bf 20 00 00 00       	mov    edi,0x20
c0026f38:	29 df                	sub    edi,ebx
c0026f3a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026f3d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026f40:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026f43:	d3 e6                	shl    esi,cl
c0026f45:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026f48:	88 d9                	mov    cl,bl
c0026f4a:	d3 ef                	shr    edi,cl
c0026f4c:	09 fe                	or     esi,edi
c0026f4e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026f51:	88 d9                	mov    cl,bl
c0026f53:	d3 ef                	shr    edi,cl
c0026f55:	89 fb                	mov    ebx,edi
c0026f57:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026f5a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026f5d:	d3 e7                	shl    edi,cl
c0026f5f:	85 ff                	test   edi,edi
c0026f61:	0f 95 c1             	setne  cl
c0026f64:	0f b6 c9             	movzx  ecx,cl
c0026f67:	09 ce                	or     esi,ecx
c0026f69:	01 f2                	add    edx,esi
c0026f6b:	11 d8                	adc    eax,ebx
c0026f6d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026f70:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026f73:	e9 52 01 00 00       	jmp    c00270ca <__adddf3+0x297>
c0026f78:	0f 84 d5 00 00 00    	je     c0027053 <__adddf3+0x220>
c0026f7e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026f81:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0026f84:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026f87:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026f8a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0026f91:	75 20                	jne    c0026fb3 <__adddf3+0x180>
c0026f93:	89 d6                	mov    esi,edx
c0026f95:	09 c6                	or     esi,eax
c0026f97:	0f 84 db 04 00 00    	je     c0027478 <__adddf3+0x645>
c0026f9d:	4b                   	dec    ebx
c0026f9e:	75 29                	jne    c0026fc9 <__adddf3+0x196>
c0026fa0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026fa3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026fa6:	01 d1                	add    ecx,edx
c0026fa8:	11 c6                	adc    esi,eax
c0026faa:	89 f0                	mov    eax,esi
c0026fac:	89 ca                	mov    edx,ecx
c0026fae:	e9 17 01 00 00       	jmp    c00270ca <__adddf3+0x297>
c0026fb3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026fb6:	f7 d6                	not    esi
c0026fb8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026fbe:	0f 84 b4 04 00 00    	je     c0027478 <__adddf3+0x645>
c0026fc4:	0d 00 00 00 80       	or     eax,0x80000000
c0026fc9:	83 fb 1f             	cmp    ebx,0x1f
c0026fcc:	7e 48                	jle    c0027016 <__adddf3+0x1e3>
c0026fce:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026fd1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026fd4:	83 fb 3f             	cmp    ebx,0x3f
c0026fd7:	0f 8f 9b 04 00 00    	jg     c0027478 <__adddf3+0x645>
c0026fdd:	83 e3 1f             	and    ebx,0x1f
c0026fe0:	89 d9                	mov    ecx,ebx
c0026fe2:	89 c7                	mov    edi,eax
c0026fe4:	d3 ef                	shr    edi,cl
c0026fe6:	31 db                	xor    ebx,ebx
c0026fe8:	85 c9                	test   ecx,ecx
c0026fea:	74 12                	je     c0026ffe <__adddf3+0x1cb>
c0026fec:	be 20 00 00 00       	mov    esi,0x20
c0026ff1:	29 ce                	sub    esi,ecx
c0026ff3:	89 f1                	mov    ecx,esi
c0026ff5:	d3 e0                	shl    eax,cl
c0026ff7:	31 db                	xor    ebx,ebx
c0026ff9:	85 c0                	test   eax,eax
c0026ffb:	0f 95 c3             	setne  bl
c0026ffe:	31 c0                	xor    eax,eax
c0027000:	85 d2                	test   edx,edx
c0027002:	0f 95 c0             	setne  al
c0027005:	09 c7                	or     edi,eax
c0027007:	09 fb                	or     ebx,edi
c0027009:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002700c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002700f:	01 da                	add    edx,ebx
c0027011:	83 d6 00             	adc    esi,0x0
c0027014:	eb 39                	jmp    c002704f <__adddf3+0x21c>
c0027016:	be 20 00 00 00       	mov    esi,0x20
c002701b:	29 de                	sub    esi,ebx
c002701d:	89 c7                	mov    edi,eax
c002701f:	89 f1                	mov    ecx,esi
c0027021:	d3 e7                	shl    edi,cl
c0027023:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027026:	89 d7                	mov    edi,edx
c0027028:	88 d9                	mov    cl,bl
c002702a:	d3 ef                	shr    edi,cl
c002702c:	89 f9                	mov    ecx,edi
c002702e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027031:	09 cf                	or     edi,ecx
c0027033:	88 d9                	mov    cl,bl
c0027035:	d3 e8                	shr    eax,cl
c0027037:	89 f1                	mov    ecx,esi
c0027039:	d3 e2                	shl    edx,cl
c002703b:	85 d2                	test   edx,edx
c002703d:	0f 95 c2             	setne  dl
c0027040:	0f b6 d2             	movzx  edx,dl
c0027043:	09 d7                	or     edi,edx
c0027045:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027048:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002704b:	01 fa                	add    edx,edi
c002704d:	11 c6                	adc    esi,eax
c002704f:	89 f0                	mov    eax,esi
c0027051:	eb 77                	jmp    c00270ca <__adddf3+0x297>
c0027053:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027056:	46                   	inc    esi
c0027057:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002705a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027060:	75 41                	jne    c00270a3 <__adddf3+0x270>
c0027062:	89 d3                	mov    ebx,edx
c0027064:	09 c3                	or     ebx,eax
c0027066:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002706d:	75 27                	jne    c0027096 <__adddf3+0x263>
c002706f:	85 db                	test   ebx,ebx
c0027071:	0f 84 fb 03 00 00    	je     c0027472 <__adddf3+0x63f>
c0027077:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002707a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002707d:	0f 84 f5 03 00 00    	je     c0027478 <__adddf3+0x645>
c0027083:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027086:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027089:	85 c0                	test   eax,eax
c002708b:	0f 89 91 03 00 00    	jns    c0027422 <__adddf3+0x5ef>
c0027091:	e9 85 03 00 00       	jmp    c002741b <__adddf3+0x5e8>
c0027096:	85 db                	test   ebx,ebx
c0027098:	0f 85 da 03 00 00    	jne    c0027478 <__adddf3+0x645>
c002709e:	e9 cf 03 00 00       	jmp    c0027472 <__adddf3+0x63f>
c00270a3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00270a6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00270a9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00270ac:	f7 d1                	not    ecx
c00270ae:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00270b4:	0f 84 70 03 00 00    	je     c002742a <__adddf3+0x5f7>
c00270ba:	d1 ea                	shr    edx,1
c00270bc:	89 c1                	mov    ecx,eax
c00270be:	c1 e1 1f             	shl    ecx,0x1f
c00270c1:	09 ca                	or     edx,ecx
c00270c3:	d1 e8                	shr    eax,1
c00270c5:	e9 6f 03 00 00       	jmp    c0027439 <__adddf3+0x606>
c00270ca:	85 c0                	test   eax,eax
c00270cc:	0f 89 67 03 00 00    	jns    c0027439 <__adddf3+0x606>
c00270d2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00270d5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00270d8:	f7 d1                	not    ecx
c00270da:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00270e0:	0f 84 44 03 00 00    	je     c002742a <__adddf3+0x5f7>
c00270e6:	89 d1                	mov    ecx,edx
c00270e8:	d1 e9                	shr    ecx,1
c00270ea:	83 e2 01             	and    edx,0x1
c00270ed:	09 ca                	or     edx,ecx
c00270ef:	89 c1                	mov    ecx,eax
c00270f1:	c1 e1 1f             	shl    ecx,0x1f
c00270f4:	09 ca                	or     edx,ecx
c00270f6:	d1 e8                	shr    eax,1
c00270f8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00270fd:	e9 37 03 00 00       	jmp    c0027439 <__adddf3+0x606>
c0027102:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027105:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002710b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002710e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027111:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027117:	29 de                	sub    esi,ebx
c0027119:	85 f6                	test   esi,esi
c002711b:	0f 8e bd 00 00 00    	jle    c00271de <__adddf3+0x3ab>
c0027121:	85 db                	test   ebx,ebx
c0027123:	75 17                	jne    c002713c <__adddf3+0x309>
c0027125:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027128:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002712b:	0f 84 47 03 00 00    	je     c0027478 <__adddf3+0x645>
c0027131:	4e                   	dec    esi
c0027132:	75 20                	jne    c0027154 <__adddf3+0x321>
c0027134:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027137:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002713a:	eb 5b                	jmp    c0027197 <__adddf3+0x364>
c002713c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002713f:	f7 d3                	not    ebx
c0027141:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027147:	0f 84 2b 03 00 00    	je     c0027478 <__adddf3+0x645>
c002714d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027154:	83 fe 1f             	cmp    esi,0x1f
c0027157:	7e 49                	jle    c00271a2 <__adddf3+0x36f>
c0027159:	83 fe 3f             	cmp    esi,0x3f
c002715c:	0f 8f 16 03 00 00    	jg     c0027478 <__adddf3+0x645>
c0027162:	83 e6 1f             	and    esi,0x1f
c0027165:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027168:	89 f1                	mov    ecx,esi
c002716a:	d3 ef                	shr    edi,cl
c002716c:	31 db                	xor    ebx,ebx
c002716e:	85 f6                	test   esi,esi
c0027170:	74 13                	je     c0027185 <__adddf3+0x352>
c0027172:	b9 20 00 00 00       	mov    ecx,0x20
c0027177:	29 f1                	sub    ecx,esi
c0027179:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002717c:	d3 e6                	shl    esi,cl
c002717e:	31 db                	xor    ebx,ebx
c0027180:	85 f6                	test   esi,esi
c0027182:	0f 95 c3             	setne  bl
c0027185:	31 c9                	xor    ecx,ecx
c0027187:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002718b:	0f 95 c1             	setne  cl
c002718e:	09 cf                	or     edi,ecx
c0027190:	09 fb                	or     ebx,edi
c0027192:	29 da                	sub    edx,ebx
c0027194:	83 d8 00             	sbb    eax,0x0
c0027197:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002719a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002719d:	e9 aa 01 00 00       	jmp    c002734c <__adddf3+0x519>
c00271a2:	bf 20 00 00 00       	mov    edi,0x20
c00271a7:	29 f7                	sub    edi,esi
c00271a9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00271ac:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00271af:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00271b2:	d3 e3                	shl    ebx,cl
c00271b4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00271b7:	89 f1                	mov    ecx,esi
c00271b9:	d3 ef                	shr    edi,cl
c00271bb:	09 fb                	or     ebx,edi
c00271bd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00271c0:	89 f1                	mov    ecx,esi
c00271c2:	d3 ef                	shr    edi,cl
c00271c4:	89 fe                	mov    esi,edi
c00271c6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00271c9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00271cc:	d3 e7                	shl    edi,cl
c00271ce:	85 ff                	test   edi,edi
c00271d0:	0f 95 c1             	setne  cl
c00271d3:	0f b6 c9             	movzx  ecx,cl
c00271d6:	09 cb                	or     ebx,ecx
c00271d8:	29 da                	sub    edx,ebx
c00271da:	19 f0                	sbb    eax,esi
c00271dc:	eb b9                	jmp    c0027197 <__adddf3+0x364>
c00271de:	0f 84 cd 00 00 00    	je     c00272b1 <__adddf3+0x47e>
c00271e4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00271e7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00271ea:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00271ed:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00271f1:	75 1b                	jne    c002720e <__adddf3+0x3db>
c00271f3:	89 d6                	mov    esi,edx
c00271f5:	09 c6                	or     esi,eax
c00271f7:	0f 84 7b 02 00 00    	je     c0027478 <__adddf3+0x645>
c00271fd:	4b                   	dec    ebx
c00271fe:	75 24                	jne    c0027224 <__adddf3+0x3f1>
c0027200:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027203:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027206:	29 d1                	sub    ecx,edx
c0027208:	19 c6                	sbb    esi,eax
c002720a:	89 ca                	mov    edx,ecx
c002720c:	eb 61                	jmp    c002726f <__adddf3+0x43c>
c002720e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027211:	f7 d6                	not    esi
c0027213:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027219:	0f 84 59 02 00 00    	je     c0027478 <__adddf3+0x645>
c002721f:	0d 00 00 00 80       	or     eax,0x80000000
c0027224:	83 fb 1f             	cmp    ebx,0x1f
c0027227:	7e 4d                	jle    c0027276 <__adddf3+0x443>
c0027229:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002722c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002722f:	83 fb 3f             	cmp    ebx,0x3f
c0027232:	0f 8f 40 02 00 00    	jg     c0027478 <__adddf3+0x645>
c0027238:	83 e3 1f             	and    ebx,0x1f
c002723b:	89 d9                	mov    ecx,ebx
c002723d:	89 c7                	mov    edi,eax
c002723f:	d3 ef                	shr    edi,cl
c0027241:	31 db                	xor    ebx,ebx
c0027243:	85 c9                	test   ecx,ecx
c0027245:	74 12                	je     c0027259 <__adddf3+0x426>
c0027247:	be 20 00 00 00       	mov    esi,0x20
c002724c:	29 ce                	sub    esi,ecx
c002724e:	89 f1                	mov    ecx,esi
c0027250:	d3 e0                	shl    eax,cl
c0027252:	31 db                	xor    ebx,ebx
c0027254:	85 c0                	test   eax,eax
c0027256:	0f 95 c3             	setne  bl
c0027259:	31 c0                	xor    eax,eax
c002725b:	85 d2                	test   edx,edx
c002725d:	0f 95 c0             	setne  al
c0027260:	09 c7                	or     edi,eax
c0027262:	09 fb                	or     ebx,edi
c0027264:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027267:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002726a:	29 da                	sub    edx,ebx
c002726c:	83 de 00             	sbb    esi,0x0
c002726f:	89 f0                	mov    eax,esi
c0027271:	e9 d6 00 00 00       	jmp    c002734c <__adddf3+0x519>
c0027276:	be 20 00 00 00       	mov    esi,0x20
c002727b:	29 de                	sub    esi,ebx
c002727d:	89 c7                	mov    edi,eax
c002727f:	89 f1                	mov    ecx,esi
c0027281:	d3 e7                	shl    edi,cl
c0027283:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027286:	89 d7                	mov    edi,edx
c0027288:	88 d9                	mov    cl,bl
c002728a:	d3 ef                	shr    edi,cl
c002728c:	89 f9                	mov    ecx,edi
c002728e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027291:	09 cf                	or     edi,ecx
c0027293:	88 d9                	mov    cl,bl
c0027295:	d3 e8                	shr    eax,cl
c0027297:	89 f1                	mov    ecx,esi
c0027299:	d3 e2                	shl    edx,cl
c002729b:	85 d2                	test   edx,edx
c002729d:	0f 95 c2             	setne  dl
c00272a0:	0f b6 d2             	movzx  edx,dl
c00272a3:	09 d7                	or     edi,edx
c00272a5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00272a8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00272ab:	29 fa                	sub    edx,edi
c00272ad:	19 c6                	sbb    esi,eax
c00272af:	eb be                	jmp    c002726f <__adddf3+0x43c>
c00272b1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00272b4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00272b7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00272bd:	75 6a                	jne    c0027329 <__adddf3+0x4f6>
c00272bf:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00272c3:	75 58                	jne    c002731d <__adddf3+0x4ea>
c00272c5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00272c8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00272cb:	89 d6                	mov    esi,edx
c00272cd:	09 c6                	or     esi,eax
c00272cf:	75 17                	jne    c00272e8 <__adddf3+0x4b5>
c00272d1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00272d4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00272d7:	85 db                	test   ebx,ebx
c00272d9:	0f 85 99 01 00 00    	jne    c0027478 <__adddf3+0x645>
c00272df:	31 ff                	xor    edi,edi
c00272e1:	31 c9                	xor    ecx,ecx
c00272e3:	e9 90 01 00 00       	jmp    c0027478 <__adddf3+0x645>
c00272e8:	85 db                	test   ebx,ebx
c00272ea:	0f 84 88 01 00 00    	je     c0027478 <__adddf3+0x645>
c00272f0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00272f3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00272f6:	85 c0                	test   eax,eax
c00272f8:	79 10                	jns    c002730a <__adddf3+0x4d7>
c00272fa:	31 c9                	xor    ecx,ecx
c00272fc:	f7 da                	neg    edx
c00272fe:	0f 95 c1             	setne  cl
c0027301:	01 c8                	add    eax,ecx
c0027303:	f7 d8                	neg    eax
c0027305:	e9 2f 01 00 00       	jmp    c0027439 <__adddf3+0x606>
c002730a:	31 ff                	xor    edi,edi
c002730c:	31 c9                	xor    ecx,ecx
c002730e:	89 c3                	mov    ebx,eax
c0027310:	09 d3                	or     ebx,edx
c0027312:	0f 84 60 01 00 00    	je     c0027478 <__adddf3+0x645>
c0027318:	e9 05 01 00 00       	jmp    c0027422 <__adddf3+0x5ef>
c002731d:	31 ff                	xor    edi,edi
c002731f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027324:	e9 4f 01 00 00       	jmp    c0027478 <__adddf3+0x645>
c0027329:	89 c1                	mov    ecx,eax
c002732b:	89 d0                	mov    eax,edx
c002732d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027330:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027333:	89 ca                	mov    edx,ecx
c0027335:	85 c9                	test   ecx,ecx
c0027337:	79 2c                	jns    c0027365 <__adddf3+0x532>
c0027339:	31 c9                	xor    ecx,ecx
c002733b:	f7 d8                	neg    eax
c002733d:	0f 95 c1             	setne  cl
c0027340:	01 ca                	add    edx,ecx
c0027342:	f7 da                	neg    edx
c0027344:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027347:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002734a:	eb 19                	jmp    c0027365 <__adddf3+0x532>
c002734c:	85 c0                	test   eax,eax
c002734e:	0f 89 e5 00 00 00    	jns    c0027439 <__adddf3+0x606>
c0027354:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027359:	89 c1                	mov    ecx,eax
c002735b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002735e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027361:	89 d0                	mov    eax,edx
c0027363:	89 ca                	mov    edx,ecx
c0027365:	85 d2                	test   edx,edx
c0027367:	74 59                	je     c00273c2 <__adddf3+0x58f>
c0027369:	0f bd da             	bsr    ebx,edx
c002736c:	83 f3 1f             	xor    ebx,0x1f
c002736f:	88 d9                	mov    cl,bl
c0027371:	d3 e2                	shl    edx,cl
c0027373:	bf 20 00 00 00       	mov    edi,0x20
c0027378:	89 f9                	mov    ecx,edi
c002737a:	29 d9                	sub    ecx,ebx
c002737c:	89 c6                	mov    esi,eax
c002737e:	d3 ee                	shr    esi,cl
c0027380:	09 d6                	or     esi,edx
c0027382:	88 d9                	mov    cl,bl
c0027384:	d3 e0                	shl    eax,cl
c0027386:	89 c2                	mov    edx,eax
c0027388:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002738b:	25 ff 07 00 00       	and    eax,0x7ff
c0027390:	39 d8                	cmp    eax,ebx
c0027392:	7f 22                	jg     c00273b6 <__adddf3+0x583>
c0027394:	29 c3                	sub    ebx,eax
c0027396:	43                   	inc    ebx
c0027397:	88 d9                	mov    cl,bl
c0027399:	d3 ea                	shr    edx,cl
c002739b:	29 df                	sub    edi,ebx
c002739d:	89 f9                	mov    ecx,edi
c002739f:	89 f0                	mov    eax,esi
c00273a1:	d3 e0                	shl    eax,cl
c00273a3:	09 c2                	or     edx,eax
c00273a5:	89 f0                	mov    eax,esi
c00273a7:	88 d9                	mov    cl,bl
c00273a9:	d3 e8                	shr    eax,cl
c00273ab:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00273ae:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00273b4:	eb 6f                	jmp    c0027425 <__adddf3+0x5f2>
c00273b6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00273b9:	29 d8                	sub    eax,ebx
c00273bb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00273be:	89 f0                	mov    eax,esi
c00273c0:	eb 59                	jmp    c002741b <__adddf3+0x5e8>
c00273c2:	85 c0                	test   eax,eax
c00273c4:	74 6a                	je     c0027430 <__adddf3+0x5fd>
c00273c6:	0f bd c8             	bsr    ecx,eax
c00273c9:	83 f1 1f             	xor    ecx,0x1f
c00273cc:	d3 e0                	shl    eax,cl
c00273ce:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00273d1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00273d7:	83 c1 20             	add    ecx,0x20
c00273da:	39 cb                	cmp    ebx,ecx
c00273dc:	7f 35                	jg     c0027413 <__adddf3+0x5e0>
c00273de:	29 d9                	sub    ecx,ebx
c00273e0:	8d 71 01             	lea    esi,[ecx+0x1]
c00273e3:	83 fe 1f             	cmp    esi,0x1f
c00273e6:	7e 09                	jle    c00273f1 <__adddf3+0x5be>
c00273e8:	83 e9 1f             	sub    ecx,0x1f
c00273eb:	d3 e8                	shr    eax,cl
c00273ed:	89 c3                	mov    ebx,eax
c00273ef:	eb 11                	jmp    c0027402 <__adddf3+0x5cf>
c00273f1:	b9 20 00 00 00       	mov    ecx,0x20
c00273f6:	29 f1                	sub    ecx,esi
c00273f8:	89 c3                	mov    ebx,eax
c00273fa:	d3 e3                	shl    ebx,cl
c00273fc:	89 f1                	mov    ecx,esi
c00273fe:	d3 e8                	shr    eax,cl
c0027400:	89 c2                	mov    edx,eax
c0027402:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027405:	25 00 f8 ff ff       	and    eax,0xfffff800
c002740a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002740d:	89 d0                	mov    eax,edx
c002740f:	89 da                	mov    edx,ebx
c0027411:	eb 26                	jmp    c0027439 <__adddf3+0x606>
c0027413:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027416:	29 cf                	sub    edi,ecx
c0027418:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002741b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027420:	eb 17                	jmp    c0027439 <__adddf3+0x606>
c0027422:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027425:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027428:	eb 0f                	jmp    c0027439 <__adddf3+0x606>
c002742a:	31 d2                	xor    edx,edx
c002742c:	31 c0                	xor    eax,eax
c002742e:	eb 09                	jmp    c0027439 <__adddf3+0x606>
c0027430:	89 c2                	mov    edx,eax
c0027432:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027439:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002743c:	c1 e1 14             	shl    ecx,0x14
c002743f:	89 c3                	mov    ebx,eax
c0027441:	c1 eb 0b             	shr    ebx,0xb
c0027444:	09 d9                	or     ecx,ebx
c0027446:	89 d3                	mov    ebx,edx
c0027448:	c1 eb 0b             	shr    ebx,0xb
c002744b:	c1 e0 15             	shl    eax,0x15
c002744e:	09 d8                	or     eax,ebx
c0027450:	89 c7                	mov    edi,eax
c0027452:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027458:	0f 95 c0             	setne  al
c002745b:	89 c6                	mov    esi,eax
c002745d:	09 f3                	or     ebx,esi
c002745f:	83 e3 01             	and    ebx,0x1
c0027462:	c1 ea 0a             	shr    edx,0xa
c0027465:	21 da                	and    edx,ebx
c0027467:	89 f8                	mov    eax,edi
c0027469:	01 d0                	add    eax,edx
c002746b:	83 d1 00             	adc    ecx,0x0
c002746e:	89 c7                	mov    edi,eax
c0027470:	eb 06                	jmp    c0027478 <__adddf3+0x645>
c0027472:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027475:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027478:	89 f8                	mov    eax,edi
c002747a:	89 ca                	mov    edx,ecx
c002747c:	83 c4 24             	add    esp,0x24
c002747f:	5b                   	pop    ebx
c0027480:	5e                   	pop    esi
c0027481:	5f                   	pop    edi
c0027482:	5d                   	pop    ebp
c0027483:	c3                   	ret    

c0027484 <__subdf3>:
c0027484:	55                   	push   ebp
c0027485:	89 e5                	mov    ebp,esp
c0027487:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002748a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002748d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027493:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027496:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027499:	5d                   	pop    ebp
c002749a:	e9 94 f9 ff ff       	jmp    c0026e33 <__adddf3>

c002749f <__negdf2>:
c002749f:	55                   	push   ebp
c00274a0:	89 e5                	mov    ebp,esp
c00274a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00274a5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00274a8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00274ae:	5d                   	pop    ebp
c00274af:	c3                   	ret    

c00274b0 <__muldf3>:
c00274b0:	55                   	push   ebp
c00274b1:	89 e5                	mov    ebp,esp
c00274b3:	57                   	push   edi
c00274b4:	56                   	push   esi
c00274b5:	53                   	push   ebx
c00274b6:	83 ec 24             	sub    esp,0x24
c00274b9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00274bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00274bf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00274c2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00274c5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00274c8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00274cb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00274ce:	89 c8                	mov    eax,ecx
c00274d0:	c1 f8 14             	sar    eax,0x14
c00274d3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00274d6:	89 f8                	mov    eax,edi
c00274d8:	89 fb                	mov    ebx,edi
c00274da:	c1 e3 0b             	shl    ebx,0xb
c00274dd:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00274e0:	c1 e1 0b             	shl    ecx,0xb
c00274e3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00274e9:	c1 e8 15             	shr    eax,0x15
c00274ec:	09 c1                	or     ecx,eax
c00274ee:	89 d6                	mov    esi,edx
c00274f0:	89 d0                	mov    eax,edx
c00274f2:	c1 f8 14             	sar    eax,0x14
c00274f5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00274f8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00274fb:	89 c3                	mov    ebx,eax
c00274fd:	c1 e3 0b             	shl    ebx,0xb
c0027500:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027503:	c1 e6 0b             	shl    esi,0xb
c0027506:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002750c:	c1 e8 15             	shr    eax,0x15
c002750f:	09 c6                	or     esi,eax
c0027511:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027514:	25 ff 07 00 00       	and    eax,0x7ff
c0027519:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002751c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002751f:	25 ff 07 00 00       	and    eax,0x7ff
c0027524:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027527:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002752a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002752d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027534:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027537:	40                   	inc    eax
c0027538:	a9 fe 07 00 00       	test   eax,0x7fe
c002753d:	0f 85 8d 00 00 00    	jne    c00275d0 <__muldf3+0x120>
c0027543:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027546:	09 c8                	or     eax,ecx
c0027548:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c002754c:	74 44                	je     c0027592 <__muldf3+0xe2>
c002754e:	85 c0                	test   eax,eax
c0027550:	0f 85 31 02 00 00    	jne    c0027787 <__muldf3+0x2d7>
c0027556:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027559:	40                   	inc    eax
c002755a:	a9 fe 07 00 00       	test   eax,0x7fe
c002755f:	75 13                	jne    c0027574 <__muldf3+0xc4>
c0027561:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027564:	09 f1                	or     ecx,esi
c0027566:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002756a:	74 22                	je     c002758e <__muldf3+0xde>
c002756c:	85 c9                	test   ecx,ecx
c002756e:	0f 85 0d 02 00 00    	jne    c0027781 <__muldf3+0x2d1>
c0027574:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027578:	0f 89 09 02 00 00    	jns    c0027787 <__muldf3+0x2d7>
c002757e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027581:	05 00 00 00 80       	add    eax,0x80000000
c0027586:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027589:	e9 f9 01 00 00       	jmp    c0027787 <__muldf3+0x2d7>
c002758e:	85 c9                	test   ecx,ecx
c0027590:	eb 2e                	jmp    c00275c0 <__muldf3+0x110>
c0027592:	85 c0                	test   eax,eax
c0027594:	74 20                	je     c00275b6 <__muldf3+0x106>
c0027596:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027599:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002759c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002759f:	c1 ef 1f             	shr    edi,0x1f
c00275a2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00275a5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00275a8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00275ab:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00275ae:	09 f9                	or     ecx,edi
c00275b0:	78 1e                	js     c00275d0 <__muldf3+0x120>
c00275b2:	89 c3                	mov    ebx,eax
c00275b4:	eb e0                	jmp    c0027596 <__muldf3+0xe6>
c00275b6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00275b9:	f7 d0                	not    eax
c00275bb:	a9 ff 07 00 00       	test   eax,0x7ff
c00275c0:	75 b2                	jne    c0027574 <__muldf3+0xc4>
c00275c2:	31 ff                	xor    edi,edi
c00275c4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00275cb:	e9 b7 01 00 00       	jmp    c0027787 <__muldf3+0x2d7>
c00275d0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00275d3:	40                   	inc    eax
c00275d4:	a9 fe 07 00 00       	test   eax,0x7fe
c00275d9:	75 57                	jne    c0027632 <__muldf3+0x182>
c00275db:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00275de:	09 f0                	or     eax,esi
c00275e0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00275e4:	74 23                	je     c0027609 <__muldf3+0x159>
c00275e6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00275ea:	0f 89 91 01 00 00    	jns    c0027781 <__muldf3+0x2d1>
c00275f0:	85 c0                	test   eax,eax
c00275f2:	0f 85 89 01 00 00    	jne    c0027781 <__muldf3+0x2d1>
c00275f8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00275fb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027601:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027604:	e9 7e 01 00 00       	jmp    c0027787 <__muldf3+0x2d7>
c0027609:	85 c0                	test   eax,eax
c002760b:	75 0c                	jne    c0027619 <__muldf3+0x169>
c002760d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027611:	0f 89 6a 01 00 00    	jns    c0027781 <__muldf3+0x2d1>
c0027617:	eb df                	jmp    c00275f8 <__muldf3+0x148>
c0027619:	01 f6                	add    esi,esi
c002761b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002761e:	c1 ea 1f             	shr    edx,0x1f
c0027621:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027624:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027627:	8d 43 ff             	lea    eax,[ebx-0x1]
c002762a:	09 d6                	or     esi,edx
c002762c:	78 04                	js     c0027632 <__muldf3+0x182>
c002762e:	89 c3                	mov    ebx,eax
c0027630:	eb e7                	jmp    c0027619 <__muldf3+0x169>
c0027632:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027638:	81 ce 00 00 00 80    	or     esi,0x80000000
c002763e:	89 c8                	mov    eax,ecx
c0027640:	f7 e6                	mul    esi
c0027642:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027645:	89 c7                	mov    edi,eax
c0027647:	89 c8                	mov    eax,ecx
c0027649:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c002764c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c002764f:	89 c1                	mov    ecx,eax
c0027651:	89 f0                	mov    eax,esi
c0027653:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027656:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027659:	89 c6                	mov    esi,eax
c002765b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002765e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027661:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027664:	31 c0                	xor    eax,eax
c0027666:	01 f1                	add    ecx,esi
c0027668:	0f 92 c0             	setb   al
c002766b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002766e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027671:	83 d6 00             	adc    esi,0x0
c0027674:	01 c7                	add    edi,eax
c0027676:	83 d6 00             	adc    esi,0x0
c0027679:	01 ca                	add    edx,ecx
c002767b:	0f 92 c1             	setb   cl
c002767e:	0f b6 c9             	movzx  ecx,cl
c0027681:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027684:	83 d6 00             	adc    esi,0x0
c0027687:	01 cf                	add    edi,ecx
c0027689:	83 d6 00             	adc    esi,0x0
c002768c:	31 c9                	xor    ecx,ecx
c002768e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027691:	0f 95 c1             	setne  cl
c0027694:	09 cf                	or     edi,ecx
c0027696:	85 f6                	test   esi,esi
c0027698:	78 0c                	js     c00276a6 <__muldf3+0x1f6>
c002769a:	01 f6                	add    esi,esi
c002769c:	89 f8                	mov    eax,edi
c002769e:	c1 e8 1f             	shr    eax,0x1f
c00276a1:	09 c6                	or     esi,eax
c00276a3:	01 ff                	add    edi,edi
c00276a5:	4b                   	dec    ebx
c00276a6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00276ac:	0f 8f 85 00 00 00    	jg     c0027737 <__muldf3+0x287>
c00276b2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00276b8:	85 db                	test   ebx,ebx
c00276ba:	0f 8f 84 00 00 00    	jg     c0027744 <__muldf3+0x294>
c00276c0:	83 fb cc             	cmp    ebx,0xffffffcc
c00276c3:	7c 79                	jl     c002773e <__muldf3+0x28e>
c00276c5:	ba 01 00 00 00       	mov    edx,0x1
c00276ca:	29 da                	sub    edx,ebx
c00276cc:	81 ce 00 00 00 80    	or     esi,0x80000000
c00276d2:	83 fa 1f             	cmp    edx,0x1f
c00276d5:	7e 30                	jle    c0027707 <__muldf3+0x257>
c00276d7:	83 fa 20             	cmp    edx,0x20
c00276da:	75 0b                	jne    c00276e7 <__muldf3+0x237>
c00276dc:	31 c0                	xor    eax,eax
c00276de:	85 ff                	test   edi,edi
c00276e0:	0f 95 c0             	setne  al
c00276e3:	89 c7                	mov    edi,eax
c00276e5:	eb 1a                	jmp    c0027701 <__muldf3+0x251>
c00276e7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00276ea:	89 f0                	mov    eax,esi
c00276ec:	d3 e0                	shl    eax,cl
c00276ee:	09 f8                	or     eax,edi
c00276f0:	0f 95 c0             	setne  al
c00276f3:	0f b6 c0             	movzx  eax,al
c00276f6:	89 c7                	mov    edi,eax
c00276f8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00276fd:	29 d9                	sub    ecx,ebx
c00276ff:	d3 ee                	shr    esi,cl
c0027701:	09 f7                	or     edi,esi
c0027703:	31 db                	xor    ebx,ebx
c0027705:	eb 3b                	jmp    c0027742 <__muldf3+0x292>
c0027707:	83 c3 1f             	add    ebx,0x1f
c002770a:	89 f0                	mov    eax,esi
c002770c:	88 d9                	mov    cl,bl
c002770e:	d3 e0                	shl    eax,cl
c0027710:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027713:	89 f8                	mov    eax,edi
c0027715:	88 d1                	mov    cl,dl
c0027717:	d3 e8                	shr    eax,cl
c0027719:	89 c1                	mov    ecx,eax
c002771b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002771e:	09 c8                	or     eax,ecx
c0027720:	88 d9                	mov    cl,bl
c0027722:	d3 e7                	shl    edi,cl
c0027724:	31 db                	xor    ebx,ebx
c0027726:	85 ff                	test   edi,edi
c0027728:	0f 95 c3             	setne  bl
c002772b:	89 df                	mov    edi,ebx
c002772d:	09 c7                	or     edi,eax
c002772f:	88 d1                	mov    cl,dl
c0027731:	d3 ee                	shr    esi,cl
c0027733:	31 db                	xor    ebx,ebx
c0027735:	eb 0d                	jmp    c0027744 <__muldf3+0x294>
c0027737:	bb ff 07 00 00       	mov    ebx,0x7ff
c002773c:	eb 02                	jmp    c0027740 <__muldf3+0x290>
c002773e:	31 db                	xor    ebx,ebx
c0027740:	31 ff                	xor    edi,edi
c0027742:	31 f6                	xor    esi,esi
c0027744:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027747:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c002774a:	25 00 f8 ff ff       	and    eax,0xfffff800
c002774f:	09 c3                	or     ebx,eax
c0027751:	c1 e3 14             	shl    ebx,0x14
c0027754:	89 f0                	mov    eax,esi
c0027756:	c1 e8 0b             	shr    eax,0xb
c0027759:	09 c3                	or     ebx,eax
c002775b:	89 f8                	mov    eax,edi
c002775d:	c1 e8 0b             	shr    eax,0xb
c0027760:	c1 e6 15             	shl    esi,0x15
c0027763:	09 c6                	or     esi,eax
c0027765:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002776b:	0f 95 c1             	setne  cl
c002776e:	09 c8                	or     eax,ecx
c0027770:	83 e0 01             	and    eax,0x1
c0027773:	c1 ef 0a             	shr    edi,0xa
c0027776:	21 c7                	and    edi,eax
c0027778:	01 f7                	add    edi,esi
c002777a:	83 d3 00             	adc    ebx,0x0
c002777d:	89 da                	mov    edx,ebx
c002777f:	eb 03                	jmp    c0027784 <__muldf3+0x2d4>
c0027781:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027784:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027787:	89 f8                	mov    eax,edi
c0027789:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002778c:	83 c4 24             	add    esp,0x24
c002778f:	5b                   	pop    ebx
c0027790:	5e                   	pop    esi
c0027791:	5f                   	pop    edi
c0027792:	5d                   	pop    ebp
c0027793:	c3                   	ret    

c0027794 <__divdf3>:
c0027794:	55                   	push   ebp
c0027795:	89 e5                	mov    ebp,esp
c0027797:	57                   	push   edi
c0027798:	56                   	push   esi
c0027799:	53                   	push   ebx
c002779a:	83 ec 2c             	sub    esp,0x2c
c002779d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00277a0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00277a3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00277a6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00277a9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00277ac:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00277af:	89 ce                	mov    esi,ecx
c00277b1:	89 c8                	mov    eax,ecx
c00277b3:	c1 f8 14             	sar    eax,0x14
c00277b6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00277b9:	89 f8                	mov    eax,edi
c00277bb:	89 fb                	mov    ebx,edi
c00277bd:	c1 e3 0b             	shl    ebx,0xb
c00277c0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00277c3:	c1 e6 0b             	shl    esi,0xb
c00277c6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00277cc:	c1 e8 15             	shr    eax,0x15
c00277cf:	09 c6                	or     esi,eax
c00277d1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00277d4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00277d7:	89 c2                	mov    edx,eax
c00277d9:	c1 fa 14             	sar    edx,0x14
c00277dc:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00277df:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00277e2:	89 de                	mov    esi,ebx
c00277e4:	c1 e6 0b             	shl    esi,0xb
c00277e7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00277ea:	c1 e0 0b             	shl    eax,0xb
c00277ed:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00277f2:	c1 eb 15             	shr    ebx,0x15
c00277f5:	09 d8                	or     eax,ebx
c00277f7:	89 c2                	mov    edx,eax
c00277f9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00277fc:	25 ff 07 00 00       	and    eax,0x7ff
c0027801:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027804:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027807:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002780d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027810:	29 d8                	sub    eax,ebx
c0027812:	05 ff 03 00 00       	add    eax,0x3ff
c0027817:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002781a:	46                   	inc    esi
c002781b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027821:	0f 85 a5 00 00 00    	jne    c00278cc <__divdf3+0x138>
c0027827:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002782a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c002782d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027831:	74 2a                	je     c002785d <__divdf3+0xc9>
c0027833:	85 f6                	test   esi,esi
c0027835:	0f 85 cc 02 00 00    	jne    c0027b07 <__divdf3+0x373>
c002783b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002783e:	40                   	inc    eax
c002783f:	a9 fe 07 00 00       	test   eax,0x7fe
c0027844:	75 26                	jne    c002786c <__divdf3+0xd8>
c0027846:	85 db                	test   ebx,ebx
c0027848:	74 22                	je     c002786c <__divdf3+0xd8>
c002784a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002784d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027850:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027853:	09 d0                	or     eax,edx
c0027855:	0f 85 ac 02 00 00    	jne    c0027b07 <__divdf3+0x373>
c002785b:	eb 63                	jmp    c00278c0 <__divdf3+0x12c>
c002785d:	85 f6                	test   esi,esi
c002785f:	75 22                	jne    c0027883 <__divdf3+0xef>
c0027861:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027864:	40                   	inc    eax
c0027865:	a9 fe 07 00 00       	test   eax,0x7fe
c002786a:	74 36                	je     c00278a2 <__divdf3+0x10e>
c002786c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027870:	0f 89 91 02 00 00    	jns    c0027b07 <__divdf3+0x373>
c0027876:	89 f8                	mov    eax,edi
c0027878:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002787e:	e9 80 02 00 00       	jmp    c0027b03 <__divdf3+0x36f>
c0027883:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027886:	01 f6                	add    esi,esi
c0027888:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002788b:	c1 ef 1f             	shr    edi,0x1f
c002788e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027891:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027894:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027897:	09 f7                	or     edi,esi
c0027899:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002789c:	78 2e                	js     c00278cc <__divdf3+0x138>
c002789e:	89 c8                	mov    eax,ecx
c00278a0:	eb e1                	jmp    c0027883 <__divdf3+0xef>
c00278a2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00278a5:	09 d0                	or     eax,edx
c00278a7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00278ab:	74 0f                	je     c00278bc <__divdf3+0x128>
c00278ad:	85 c0                	test   eax,eax
c00278af:	74 bb                	je     c002786c <__divdf3+0xd8>
c00278b1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00278b4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00278b7:	e9 4b 02 00 00       	jmp    c0027b07 <__divdf3+0x373>
c00278bc:	85 c0                	test   eax,eax
c00278be:	75 ac                	jne    c002786c <__divdf3+0xd8>
c00278c0:	31 ff                	xor    edi,edi
c00278c2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00278c7:	e9 3b 02 00 00       	jmp    c0027b07 <__divdf3+0x373>
c00278cc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278cf:	8d 4f 01             	lea    ecx,[edi+0x1]
c00278d2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00278d8:	75 6b                	jne    c0027945 <__divdf3+0x1b1>
c00278da:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00278dd:	09 d6                	or     esi,edx
c00278df:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00278e3:	74 28                	je     c002790d <__divdf3+0x179>
c00278e5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00278e8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00278eb:	85 f6                	test   esi,esi
c00278ed:	0f 85 14 02 00 00    	jne    c0027b07 <__divdf3+0x373>
c00278f3:	31 ff                	xor    edi,edi
c00278f5:	31 c9                	xor    ecx,ecx
c00278f7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00278fa:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00278fd:	0f 89 04 02 00 00    	jns    c0027b07 <__divdf3+0x373>
c0027903:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027908:	e9 fa 01 00 00       	jmp    c0027b07 <__divdf3+0x373>
c002790d:	85 f6                	test   esi,esi
c002790f:	75 1b                	jne    c002792c <__divdf3+0x198>
c0027911:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027914:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027917:	25 00 00 00 80       	and    eax,0x80000000
c002791c:	31 c9                	xor    ecx,ecx
c002791e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027923:	89 cf                	mov    edi,ecx
c0027925:	89 c1                	mov    ecx,eax
c0027927:	e9 db 01 00 00       	jmp    c0027b07 <__divdf3+0x373>
c002792c:	01 d2                	add    edx,edx
c002792e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027931:	c1 eb 1f             	shr    ebx,0x1f
c0027934:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027937:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002793a:	8d 48 01             	lea    ecx,[eax+0x1]
c002793d:	09 da                	or     edx,ebx
c002793f:	78 04                	js     c0027945 <__divdf3+0x1b1>
c0027941:	89 c8                	mov    eax,ecx
c0027943:	eb e7                	jmp    c002792c <__divdf3+0x198>
c0027945:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027948:	81 ce 00 00 00 80    	or     esi,0x80000000
c002794e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027954:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027957:	39 d6                	cmp    esi,edx
c0027959:	77 0d                	ja     c0027968 <__divdf3+0x1d4>
c002795b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002795e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027961:	72 1b                	jb     c002797e <__divdf3+0x1ea>
c0027963:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027966:	75 16                	jne    c002797e <__divdf3+0x1ea>
c0027968:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002796b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002796e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027971:	83 de 00             	sbb    esi,0x0
c0027974:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027977:	ba 01 00 00 00       	mov    edx,0x1
c002797c:	eb 02                	jmp    c0027980 <__divdf3+0x1ec>
c002797e:	31 d2                	xor    edx,edx
c0027980:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027987:	31 ff                	xor    edi,edi
c0027989:	01 ff                	add    edi,edi
c002798b:	89 d1                	mov    ecx,edx
c002798d:	c1 e9 1f             	shr    ecx,0x1f
c0027990:	09 cf                	or     edi,ecx
c0027992:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027995:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027998:	89 da                	mov    edx,ebx
c002799a:	89 f3                	mov    ebx,esi
c002799c:	8d 34 36             	lea    esi,[esi+esi*1]
c002799f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00279a2:	c1 e9 1f             	shr    ecx,0x1f
c00279a5:	09 ce                	or     esi,ecx
c00279a7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00279aa:	01 c9                	add    ecx,ecx
c00279ac:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00279af:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00279b2:	85 db                	test   ebx,ebx
c00279b4:	78 29                	js     c00279df <__divdf3+0x24b>
c00279b6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00279b9:	72 07                	jb     c00279c2 <__divdf3+0x22e>
c00279bb:	75 3c                	jne    c00279f9 <__divdf3+0x265>
c00279bd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00279c0:	77 37                	ja     c00279f9 <__divdf3+0x265>
c00279c2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00279c5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00279c8:	31 d2                	xor    edx,edx
c00279ca:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00279cd:	0f 97 c2             	seta   dl
c00279d0:	29 d6                	sub    esi,edx
c00279d2:	89 d9                	mov    ecx,ebx
c00279d4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00279d7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00279da:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00279dd:	eb 17                	jmp    c00279f6 <__divdf3+0x262>
c00279df:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00279e2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00279e5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00279e8:	0f 97 c1             	seta   cl
c00279eb:	0f b6 c9             	movzx  ecx,cl
c00279ee:	29 ce                	sub    esi,ecx
c00279f0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00279f3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00279f6:	83 ca 01             	or     edx,0x1
c00279f9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00279fc:	75 8b                	jne    c0027989 <__divdf3+0x1f5>
c00279fe:	c1 e7 09             	shl    edi,0x9
c0027a01:	89 d1                	mov    ecx,edx
c0027a03:	c1 e9 17             	shr    ecx,0x17
c0027a06:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027a09:	09 f3                	or     ebx,esi
c0027a0b:	0f 95 c3             	setne  bl
c0027a0e:	0f b6 db             	movzx  ebx,bl
c0027a11:	c1 e2 09             	shl    edx,0x9
c0027a14:	09 d3                	or     ebx,edx
c0027a16:	89 ca                	mov    edx,ecx
c0027a18:	09 fa                	or     edx,edi
c0027a1a:	78 0c                	js     c0027a28 <__divdf3+0x294>
c0027a1c:	01 d2                	add    edx,edx
c0027a1e:	89 d9                	mov    ecx,ebx
c0027a20:	c1 e9 1f             	shr    ecx,0x1f
c0027a23:	09 ca                	or     edx,ecx
c0027a25:	01 db                	add    ebx,ebx
c0027a27:	48                   	dec    eax
c0027a28:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027a2d:	0f 8f 83 00 00 00    	jg     c0027ab6 <__divdf3+0x322>
c0027a33:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027a39:	85 c0                	test   eax,eax
c0027a3b:	0f 8f 82 00 00 00    	jg     c0027ac3 <__divdf3+0x32f>
c0027a41:	83 f8 cc             	cmp    eax,0xffffffcc
c0027a44:	7c 77                	jl     c0027abd <__divdf3+0x329>
c0027a46:	be 01 00 00 00       	mov    esi,0x1
c0027a4b:	29 c6                	sub    esi,eax
c0027a4d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027a53:	83 fe 1f             	cmp    esi,0x1f
c0027a56:	7e 2f                	jle    c0027a87 <__divdf3+0x2f3>
c0027a58:	83 fe 20             	cmp    esi,0x20
c0027a5b:	75 0a                	jne    c0027a67 <__divdf3+0x2d3>
c0027a5d:	85 db                	test   ebx,ebx
c0027a5f:	0f 95 c3             	setne  bl
c0027a62:	0f b6 db             	movzx  ebx,bl
c0027a65:	eb 1a                	jmp    c0027a81 <__divdf3+0x2ed>
c0027a67:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027a6a:	89 d7                	mov    edi,edx
c0027a6c:	d3 e7                	shl    edi,cl
c0027a6e:	89 f9                	mov    ecx,edi
c0027a70:	09 d9                	or     ecx,ebx
c0027a72:	0f 95 c3             	setne  bl
c0027a75:	0f b6 db             	movzx  ebx,bl
c0027a78:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027a7d:	29 c1                	sub    ecx,eax
c0027a7f:	d3 ea                	shr    edx,cl
c0027a81:	09 d3                	or     ebx,edx
c0027a83:	31 c0                	xor    eax,eax
c0027a85:	eb 3a                	jmp    c0027ac1 <__divdf3+0x32d>
c0027a87:	83 c0 1f             	add    eax,0x1f
c0027a8a:	89 d7                	mov    edi,edx
c0027a8c:	88 c1                	mov    cl,al
c0027a8e:	d3 e7                	shl    edi,cl
c0027a90:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027a93:	89 df                	mov    edi,ebx
c0027a95:	89 f1                	mov    ecx,esi
c0027a97:	d3 ef                	shr    edi,cl
c0027a99:	89 f9                	mov    ecx,edi
c0027a9b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027a9e:	09 cf                	or     edi,ecx
c0027aa0:	88 c1                	mov    cl,al
c0027aa2:	d3 e3                	shl    ebx,cl
c0027aa4:	85 db                	test   ebx,ebx
c0027aa6:	0f 95 c3             	setne  bl
c0027aa9:	0f b6 db             	movzx  ebx,bl
c0027aac:	09 fb                	or     ebx,edi
c0027aae:	89 f1                	mov    ecx,esi
c0027ab0:	d3 ea                	shr    edx,cl
c0027ab2:	31 c0                	xor    eax,eax
c0027ab4:	eb 0d                	jmp    c0027ac3 <__divdf3+0x32f>
c0027ab6:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027abb:	eb 02                	jmp    c0027abf <__divdf3+0x32b>
c0027abd:	31 c0                	xor    eax,eax
c0027abf:	31 db                	xor    ebx,ebx
c0027ac1:	31 d2                	xor    edx,edx
c0027ac3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027ac6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027ac9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027acf:	09 c8                	or     eax,ecx
c0027ad1:	c1 e0 14             	shl    eax,0x14
c0027ad4:	89 d1                	mov    ecx,edx
c0027ad6:	c1 e9 0b             	shr    ecx,0xb
c0027ad9:	09 c8                	or     eax,ecx
c0027adb:	89 c6                	mov    esi,eax
c0027add:	89 d9                	mov    ecx,ebx
c0027adf:	c1 e9 0b             	shr    ecx,0xb
c0027ae2:	c1 e2 15             	shl    edx,0x15
c0027ae5:	09 ca                	or     edx,ecx
c0027ae7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027aed:	0f 95 c0             	setne  al
c0027af0:	09 c1                	or     ecx,eax
c0027af2:	83 e1 01             	and    ecx,0x1
c0027af5:	c1 eb 0a             	shr    ebx,0xa
c0027af8:	21 cb                	and    ebx,ecx
c0027afa:	01 d3                	add    ebx,edx
c0027afc:	89 d8                	mov    eax,ebx
c0027afe:	83 d6 00             	adc    esi,0x0
c0027b01:	89 f2                	mov    edx,esi
c0027b03:	89 c7                	mov    edi,eax
c0027b05:	89 d1                	mov    ecx,edx
c0027b07:	89 f8                	mov    eax,edi
c0027b09:	89 ca                	mov    edx,ecx
c0027b0b:	83 c4 2c             	add    esp,0x2c
c0027b0e:	5b                   	pop    ebx
c0027b0f:	5e                   	pop    esi
c0027b10:	5f                   	pop    edi
c0027b11:	5d                   	pop    ebp
c0027b12:	c3                   	ret    

c0027b13 <__floatsidf>:
c0027b13:	55                   	push   ebp
c0027b14:	89 e5                	mov    ebp,esp
c0027b16:	56                   	push   esi
c0027b17:	53                   	push   ebx
c0027b18:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027b1b:	85 db                	test   ebx,ebx
c0027b1d:	7e 15                	jle    c0027b34 <__floatsidf+0x21>
c0027b1f:	0f bd cb             	bsr    ecx,ebx
c0027b22:	83 f1 1f             	xor    ecx,0x1f
c0027b25:	d3 e3                	shl    ebx,cl
c0027b27:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027b2d:	b8 1e 04 00 00       	mov    eax,0x41e
c0027b32:	eb 21                	jmp    c0027b55 <__floatsidf+0x42>
c0027b34:	b8 00 00 00 00       	mov    eax,0x0
c0027b39:	ba 00 00 00 00       	mov    edx,0x0
c0027b3e:	74 2a                	je     c0027b6a <__floatsidf+0x57>
c0027b40:	f7 db                	neg    ebx
c0027b42:	0f bd cb             	bsr    ecx,ebx
c0027b45:	83 f1 1f             	xor    ecx,0x1f
c0027b48:	d3 e3                	shl    ebx,cl
c0027b4a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027b50:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027b55:	29 c8                	sub    eax,ecx
c0027b57:	c1 e0 14             	shl    eax,0x14
c0027b5a:	89 c1                	mov    ecx,eax
c0027b5c:	89 de                	mov    esi,ebx
c0027b5e:	c1 ee 0b             	shr    esi,0xb
c0027b61:	09 f1                	or     ecx,esi
c0027b63:	89 ca                	mov    edx,ecx
c0027b65:	c1 e3 15             	shl    ebx,0x15
c0027b68:	89 d8                	mov    eax,ebx
c0027b6a:	5b                   	pop    ebx
c0027b6b:	5e                   	pop    esi
c0027b6c:	5d                   	pop    ebp
c0027b6d:	c3                   	ret    

c0027b6e <__floatunsidf>:
c0027b6e:	55                   	push   ebp
c0027b6f:	89 e5                	mov    ebp,esp
c0027b71:	56                   	push   esi
c0027b72:	53                   	push   ebx
c0027b73:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027b76:	85 db                	test   ebx,ebx
c0027b78:	74 2a                	je     c0027ba4 <__floatunsidf+0x36>
c0027b7a:	0f bd cb             	bsr    ecx,ebx
c0027b7d:	83 f1 1f             	xor    ecx,0x1f
c0027b80:	d3 e3                	shl    ebx,cl
c0027b82:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027b88:	b8 1e 04 00 00       	mov    eax,0x41e
c0027b8d:	29 c8                	sub    eax,ecx
c0027b8f:	c1 e0 14             	shl    eax,0x14
c0027b92:	89 c1                	mov    ecx,eax
c0027b94:	89 de                	mov    esi,ebx
c0027b96:	c1 ee 0b             	shr    esi,0xb
c0027b99:	09 f1                	or     ecx,esi
c0027b9b:	89 ca                	mov    edx,ecx
c0027b9d:	c1 e3 15             	shl    ebx,0x15
c0027ba0:	89 d8                	mov    eax,ebx
c0027ba2:	eb 04                	jmp    c0027ba8 <__floatunsidf+0x3a>
c0027ba4:	31 c0                	xor    eax,eax
c0027ba6:	31 d2                	xor    edx,edx
c0027ba8:	5b                   	pop    ebx
c0027ba9:	5e                   	pop    esi
c0027baa:	5d                   	pop    ebp
c0027bab:	c3                   	ret    

c0027bac <__fixdfsi>:
c0027bac:	55                   	push   ebp
c0027bad:	89 e5                	mov    ebp,esp
c0027baf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027bb2:	89 d1                	mov    ecx,edx
c0027bb4:	c1 e1 0b             	shl    ecx,0xb
c0027bb7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027bbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027bc0:	c1 e8 15             	shr    eax,0x15
c0027bc3:	09 c1                	or     ecx,eax
c0027bc5:	c1 fa 14             	sar    edx,0x14
c0027bc8:	78 1f                	js     c0027be9 <__fixdfsi+0x3d>
c0027bca:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0027bd0:	31 c0                	xor    eax,eax
c0027bd2:	83 fa 1e             	cmp    edx,0x1e
c0027bd5:	77 40                	ja     c0027c17 <__fixdfsi+0x6b>
c0027bd7:	89 c8                	mov    eax,ecx
c0027bd9:	0d 00 00 00 80       	or     eax,0x80000000
c0027bde:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027be3:	29 d1                	sub    ecx,edx
c0027be5:	d3 e8                	shr    eax,cl
c0027be7:	eb 2e                	jmp    c0027c17 <__fixdfsi+0x6b>
c0027be9:	31 c0                	xor    eax,eax
c0027beb:	81 c2 01 04 00 00    	add    edx,0x401
c0027bf1:	78 24                	js     c0027c17 <__fixdfsi+0x6b>
c0027bf3:	83 fa 1e             	cmp    edx,0x1e
c0027bf6:	7e 09                	jle    c0027c01 <__fixdfsi+0x55>
c0027bf8:	83 fa 1f             	cmp    edx,0x1f
c0027bfb:	75 18                	jne    c0027c15 <__fixdfsi+0x69>
c0027bfd:	85 c9                	test   ecx,ecx
c0027bff:	75 14                	jne    c0027c15 <__fixdfsi+0x69>
c0027c01:	89 c8                	mov    eax,ecx
c0027c03:	0d 00 00 00 80       	or     eax,0x80000000
c0027c08:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c0d:	29 d1                	sub    ecx,edx
c0027c0f:	d3 e8                	shr    eax,cl
c0027c11:	f7 d8                	neg    eax
c0027c13:	eb 02                	jmp    c0027c17 <__fixdfsi+0x6b>
c0027c15:	31 c0                	xor    eax,eax
c0027c17:	5d                   	pop    ebp
c0027c18:	c3                   	ret    

c0027c19 <__fixunsdfsi>:
c0027c19:	55                   	push   ebp
c0027c1a:	89 e5                	mov    ebp,esp
c0027c1c:	53                   	push   ebx
c0027c1d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0027c20:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027c23:	89 d3                	mov    ebx,edx
c0027c25:	c1 fb 14             	sar    ebx,0x14
c0027c28:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0027c2e:	31 c0                	xor    eax,eax
c0027c30:	83 fb 1f             	cmp    ebx,0x1f
c0027c33:	77 1d                	ja     c0027c52 <__fixunsdfsi+0x39>
c0027c35:	89 d0                	mov    eax,edx
c0027c37:	c1 e0 0b             	shl    eax,0xb
c0027c3a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027c3f:	c1 e9 15             	shr    ecx,0x15
c0027c42:	09 c8                	or     eax,ecx
c0027c44:	0d 00 00 00 80       	or     eax,0x80000000
c0027c49:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c4e:	29 d9                	sub    ecx,ebx
c0027c50:	d3 e8                	shr    eax,cl
c0027c52:	5b                   	pop    ebx
c0027c53:	5d                   	pop    ebp
c0027c54:	c3                   	ret    

c0027c55 <__cmpdf2>:
c0027c55:	55                   	push   ebp
c0027c56:	89 e5                	mov    ebp,esp
c0027c58:	57                   	push   edi
c0027c59:	56                   	push   esi
c0027c5a:	53                   	push   ebx
c0027c5b:	83 ec 0c             	sub    esp,0xc
c0027c5e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027c61:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027c64:	89 ca                	mov    edx,ecx
c0027c66:	c1 ea 14             	shr    edx,0x14
c0027c69:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0027c6f:	89 cb                	mov    ebx,ecx
c0027c71:	c1 fb 1f             	sar    ebx,0x1f
c0027c74:	31 da                	xor    edx,ebx
c0027c76:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027c79:	89 df                	mov    edi,ebx
c0027c7b:	c1 e7 0b             	shl    edi,0xb
c0027c7e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c81:	c1 e1 0b             	shl    ecx,0xb
c0027c84:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027c8a:	c1 eb 15             	shr    ebx,0x15
c0027c8d:	09 d9                	or     ecx,ebx
c0027c8f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0027c92:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027c95:	89 ce                	mov    esi,ecx
c0027c97:	c1 ee 14             	shr    esi,0x14
c0027c9a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027ca0:	89 cb                	mov    ebx,ecx
c0027ca2:	c1 fb 1f             	sar    ebx,0x1f
c0027ca5:	31 de                	xor    esi,ebx
c0027ca7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0027caa:	89 df                	mov    edi,ebx
c0027cac:	c1 e7 0b             	shl    edi,0xb
c0027caf:	c1 e1 0b             	shl    ecx,0xb
c0027cb2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027cb8:	c1 eb 15             	shr    ebx,0x15
c0027cbb:	09 d9                	or     ecx,ebx
c0027cbd:	89 d3                	mov    ebx,edx
c0027cbf:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027cc5:	43                   	inc    ebx
c0027cc6:	83 fb 01             	cmp    ebx,0x1
c0027cc9:	77 08                	ja     c0027cd3 <__cmpdf2+0x7e>
c0027ccb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027cce:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027cd1:	75 68                	jne    c0027d3b <__cmpdf2+0xe6>
c0027cd3:	89 f3                	mov    ebx,esi
c0027cd5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027cdb:	43                   	inc    ebx
c0027cdc:	83 fb 01             	cmp    ebx,0x1
c0027cdf:	77 06                	ja     c0027ce7 <__cmpdf2+0x92>
c0027ce1:	89 fb                	mov    ebx,edi
c0027ce3:	09 cb                	or     ebx,ecx
c0027ce5:	75 54                	jne    c0027d3b <__cmpdf2+0xe6>
c0027ce7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027cea:	09 f8                	or     eax,edi
c0027cec:	09 c8                	or     eax,ecx
c0027cee:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0027cf1:	75 12                	jne    c0027d05 <__cmpdf2+0xb0>
c0027cf3:	8d 42 01             	lea    eax,[edx+0x1]
c0027cf6:	83 f8 01             	cmp    eax,0x1
c0027cf9:	77 0a                	ja     c0027d05 <__cmpdf2+0xb0>
c0027cfb:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027cfe:	31 c0                	xor    eax,eax
c0027d00:	83 fb 01             	cmp    ebx,0x1
c0027d03:	76 36                	jbe    c0027d3b <__cmpdf2+0xe6>
c0027d05:	b8 01 00 00 00       	mov    eax,0x1
c0027d0a:	39 f2                	cmp    edx,esi
c0027d0c:	7f 2d                	jg     c0027d3b <__cmpdf2+0xe6>
c0027d0e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0027d13:	7c 26                	jl     c0027d3b <__cmpdf2+0xe6>
c0027d15:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027d18:	77 07                	ja     c0027d21 <__cmpdf2+0xcc>
c0027d1a:	72 16                	jb     c0027d32 <__cmpdf2+0xdd>
c0027d1c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0027d1f:	76 0a                	jbe    c0027d2b <__cmpdf2+0xd6>
c0027d21:	89 d0                	mov    eax,edx
c0027d23:	c1 f8 1f             	sar    eax,0x1f
c0027d26:	83 c8 01             	or     eax,0x1
c0027d29:	eb 10                	jmp    c0027d3b <__cmpdf2+0xe6>
c0027d2b:	b8 00 00 00 00       	mov    eax,0x0
c0027d30:	73 09                	jae    c0027d3b <__cmpdf2+0xe6>
c0027d32:	89 d0                	mov    eax,edx
c0027d34:	c1 f8 1f             	sar    eax,0x1f
c0027d37:	83 e0 02             	and    eax,0x2
c0027d3a:	48                   	dec    eax
c0027d3b:	83 c4 0c             	add    esp,0xc
c0027d3e:	5b                   	pop    ebx
c0027d3f:	5e                   	pop    esi
c0027d40:	5f                   	pop    edi
c0027d41:	5d                   	pop    ebp
c0027d42:	c3                   	ret    

c0027d43 <__eqdf2>:
c0027d43:	55                   	push   ebp
c0027d44:	89 e5                	mov    ebp,esp
c0027d46:	50                   	push   eax
c0027d47:	6a 01                	push   0x1
c0027d49:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027d4c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027d4f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d55:	e8 fb fe ff ff       	call   c0027c55 <__cmpdf2>
c0027d5a:	83 c4 18             	add    esp,0x18
c0027d5d:	c9                   	leave  
c0027d5e:	c3                   	ret    

c0027d5f <__nedf2>:
c0027d5f:	eb e2                	jmp    c0027d43 <__eqdf2>

c0027d61 <__gtdf2>:
c0027d61:	55                   	push   ebp
c0027d62:	89 e5                	mov    ebp,esp
c0027d64:	50                   	push   eax
c0027d65:	6a ff                	push   0xffffffff
c0027d67:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027d6a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027d6d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d70:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d73:	e8 dd fe ff ff       	call   c0027c55 <__cmpdf2>
c0027d78:	83 c4 18             	add    esp,0x18
c0027d7b:	c9                   	leave  
c0027d7c:	c3                   	ret    

c0027d7d <__gedf2>:
c0027d7d:	eb e2                	jmp    c0027d61 <__gtdf2>

c0027d7f <__ltdf2>:
c0027d7f:	eb c2                	jmp    c0027d43 <__eqdf2>

c0027d81 <__ledf2>:
c0027d81:	eb c0                	jmp    c0027d43 <__eqdf2>

c0027d83 <__truncdfsf2>:
c0027d83:	55                   	push   ebp
c0027d84:	89 e5                	mov    ebp,esp
c0027d86:	57                   	push   edi
c0027d87:	56                   	push   esi
c0027d88:	53                   	push   ebx
c0027d89:	83 ec 0c             	sub    esp,0xc
c0027d8c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027d8f:	89 d1                	mov    ecx,edx
c0027d91:	c1 f9 14             	sar    ecx,0x14
c0027d94:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027d97:	89 df                	mov    edi,ebx
c0027d99:	c1 e7 0b             	shl    edi,0xb
c0027d9c:	89 d0                	mov    eax,edx
c0027d9e:	c1 e0 0b             	shl    eax,0xb
c0027da1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027da6:	c1 eb 15             	shr    ebx,0x15
c0027da9:	09 d8                	or     eax,ebx
c0027dab:	89 cb                	mov    ebx,ecx
c0027dad:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027db3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0027db9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0027dbf:	0f 86 9e 00 00 00    	jbe    c0027e63 <__truncdfsf2+0xe0>
c0027dc5:	85 db                	test   ebx,ebx
c0027dc7:	75 0a                	jne    c0027dd3 <__truncdfsf2+0x50>
c0027dc9:	c1 fa 17             	sar    edx,0x17
c0027dcc:	30 d2                	xor    dl,dl
c0027dce:	e9 84 00 00 00       	jmp    c0027e57 <__truncdfsf2+0xd4>
c0027dd3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0027dd9:	83 fe 83             	cmp    esi,0xffffff83
c0027ddc:	7d 4b                	jge    c0027e29 <__truncdfsf2+0xa6>
c0027dde:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0027de3:	29 f1                	sub    ecx,esi
c0027de5:	83 f9 1f             	cmp    ecx,0x1f
c0027de8:	7f 6b                	jg     c0027e55 <__truncdfsf2+0xd2>
c0027dea:	0d 00 00 00 80       	or     eax,0x80000000
c0027def:	89 c3                	mov    ebx,eax
c0027df1:	d3 eb                	shr    ebx,cl
c0027df3:	be 01 00 00 00       	mov    esi,0x1
c0027df8:	d3 e6                	shl    esi,cl
c0027dfa:	4e                   	dec    esi
c0027dfb:	21 f0                	and    eax,esi
c0027dfd:	09 f8                	or     eax,edi
c0027dff:	0f 95 c0             	setne  al
c0027e02:	0f b6 c0             	movzx  eax,al
c0027e05:	09 c3                	or     ebx,eax
c0027e07:	89 d9                	mov    ecx,ebx
c0027e09:	c1 e9 08             	shr    ecx,0x8
c0027e0c:	f6 c3 7f             	test   bl,0x7f
c0027e0f:	0f 95 c0             	setne  al
c0027e12:	09 c8                	or     eax,ecx
c0027e14:	83 e0 01             	and    eax,0x1
c0027e17:	c1 eb 07             	shr    ebx,0x7
c0027e1a:	21 c3                	and    ebx,eax
c0027e1c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0027e22:	09 d1                	or     ecx,edx
c0027e24:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0027e27:	eb 76                	jmp    c0027e9f <__truncdfsf2+0x11c>
c0027e29:	83 c6 80             	add    esi,0xffffff80
c0027e2c:	7e 1d                	jle    c0027e4b <__truncdfsf2+0xc8>
c0027e2e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0027e34:	75 0b                	jne    c0027e41 <__truncdfsf2+0xbe>
c0027e36:	09 f8                	or     eax,edi
c0027e38:	74 09                	je     c0027e43 <__truncdfsf2+0xc0>
c0027e3a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0027e3f:	eb 02                	jmp    c0027e43 <__truncdfsf2+0xc0>
c0027e41:	31 c0                	xor    eax,eax
c0027e43:	c1 fa 17             	sar    edx,0x17
c0027e46:	80 ca ff             	or     dl,0xff
c0027e49:	eb 0e                	jmp    c0027e59 <__truncdfsf2+0xd6>
c0027e4b:	c1 fa 1f             	sar    edx,0x1f
c0027e4e:	c1 e2 08             	shl    edx,0x8
c0027e51:	09 ca                	or     edx,ecx
c0027e53:	eb 04                	jmp    c0027e59 <__truncdfsf2+0xd6>
c0027e55:	31 d2                	xor    edx,edx
c0027e57:	31 c0                	xor    eax,eax
c0027e59:	c1 e2 17             	shl    edx,0x17
c0027e5c:	c1 e8 08             	shr    eax,0x8
c0027e5f:	09 d0                	or     eax,edx
c0027e61:	eb 3c                	jmp    c0027e9f <__truncdfsf2+0x11c>
c0027e63:	81 e9 80 03 00 00    	sub    ecx,0x380
c0027e69:	89 ca                	mov    edx,ecx
c0027e6b:	c1 fa 0b             	sar    edx,0xb
c0027e6e:	c1 e2 08             	shl    edx,0x8
c0027e71:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027e74:	31 db                	xor    ebx,ebx
c0027e76:	85 ff                	test   edi,edi
c0027e78:	0f 95 c3             	setne  bl
c0027e7b:	09 d8                	or     eax,ebx
c0027e7d:	89 c3                	mov    ebx,eax
c0027e7f:	c1 eb 08             	shr    ebx,0x8
c0027e82:	a8 7f                	test   al,0x7f
c0027e84:	0f 95 c2             	setne  dl
c0027e87:	89 d6                	mov    esi,edx
c0027e89:	09 de                	or     esi,ebx
c0027e8b:	83 e6 01             	and    esi,0x1
c0027e8e:	c1 e8 07             	shr    eax,0x7
c0027e91:	21 f0                	and    eax,esi
c0027e93:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027e96:	09 ca                	or     edx,ecx
c0027e98:	c1 e2 17             	shl    edx,0x17
c0027e9b:	09 da                	or     edx,ebx
c0027e9d:	01 d0                	add    eax,edx
c0027e9f:	83 c4 0c             	add    esp,0xc
c0027ea2:	5b                   	pop    ebx
c0027ea3:	5e                   	pop    esi
c0027ea4:	5f                   	pop    edi
c0027ea5:	5d                   	pop    ebp
c0027ea6:	c3                   	ret    

c0027ea7 <__extendsfdf2>:
c0027ea7:	55                   	push   ebp
c0027ea8:	89 e5                	mov    ebp,esp
c0027eaa:	57                   	push   edi
c0027eab:	56                   	push   esi
c0027eac:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027eaf:	89 d1                	mov    ecx,edx
c0027eb1:	c1 f9 17             	sar    ecx,0x17
c0027eb4:	c1 e2 08             	shl    edx,0x8
c0027eb7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027ebd:	89 c8                	mov    eax,ecx
c0027ebf:	80 e4 f8             	and    ah,0xf8
c0027ec2:	8d 71 01             	lea    esi,[ecx+0x1]
c0027ec5:	81 e6 fe 00 00 00    	and    esi,0xfe
c0027ecb:	75 27                	jne    c0027ef4 <__extendsfdf2+0x4d>
c0027ecd:	81 e1 ff 00 00 00    	and    ecx,0xff
c0027ed3:	75 18                	jne    c0027eed <__extendsfdf2+0x46>
c0027ed5:	85 d2                	test   edx,edx
c0027ed7:	74 20                	je     c0027ef9 <__extendsfdf2+0x52>
c0027ed9:	41                   	inc    ecx
c0027eda:	01 d2                	add    edx,edx
c0027edc:	79 fb                	jns    c0027ed9 <__extendsfdf2+0x32>
c0027ede:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027ee4:	29 c8                	sub    eax,ecx
c0027ee6:	05 81 03 00 00       	add    eax,0x381
c0027eeb:	eb 0c                	jmp    c0027ef9 <__extendsfdf2+0x52>
c0027eed:	05 00 07 00 00       	add    eax,0x700
c0027ef2:	eb 05                	jmp    c0027ef9 <__extendsfdf2+0x52>
c0027ef4:	05 80 03 00 00       	add    eax,0x380
c0027ef9:	c1 e0 14             	shl    eax,0x14
c0027efc:	89 c1                	mov    ecx,eax
c0027efe:	89 d0                	mov    eax,edx
c0027f00:	c1 e8 0b             	shr    eax,0xb
c0027f03:	09 c1                	or     ecx,eax
c0027f05:	c1 e2 15             	shl    edx,0x15
c0027f08:	89 d0                	mov    eax,edx
c0027f0a:	89 ca                	mov    edx,ecx
c0027f0c:	5e                   	pop    esi
c0027f0d:	5f                   	pop    edi
c0027f0e:	5d                   	pop    ebp
c0027f0f:	c3                   	ret    

c0027f10 <fabs>:
c0027f10:	83 ec 0c             	sub    esp,0xc
c0027f13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f17:	89 04 24             	mov    DWORD PTR [esp],eax
c0027f1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027f1e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027f23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027f27:	dd 04 24             	fld    QWORD PTR [esp]
c0027f2a:	83 c4 0c             	add    esp,0xc
c0027f2d:	c3                   	ret    
c0027f2e:	66 90                	xchg   ax,ax

c0027f30 <lrint>:
c0027f30:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0027f34:	83 ec 04             	sub    esp,0x4
c0027f37:	db 1c 24             	fistp  DWORD PTR [esp]
c0027f3a:	58                   	pop    eax
c0027f3b:	c3                   	ret    

c0027f3c <lrintf>:
c0027f3c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0027f40:	83 ec 04             	sub    esp,0x4
c0027f43:	db 1c 24             	fistp  DWORD PTR [esp]
c0027f46:	58                   	pop    eax
c0027f47:	c3                   	ret    

Disassembly of section .init:

c0027f48 <_init>:
c0027f48:	55                   	push   ebp
c0027f49:	89 e5                	mov    ebp,esp
c0027f4b:	e8 c8 81 fd ff       	call   c0000118 <frame_dummy>
c0027f50:	e8 63 e0 ff ff       	call   c0025fb8 <__do_global_ctors_aux>
c0027f55:	5d                   	pop    ebp
c0027f56:	c3                   	ret    

Disassembly of section .fini:

c0027f57 <_fini>:
c0027f57:	55                   	push   ebp
c0027f58:	89 e5                	mov    ebp,esp
c0027f5a:	e8 49 81 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0027f5f:	5d                   	pop    ebp
c0027f60:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0027f62 <Computer::~Computer()>:
c0027f62:	83 ec 0c             	sub    esp,0xc
c0027f65:	ba a8 9a 02 c0       	mov    edx,0xc0029aa8
c0027f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f6e:	89 10                	mov    DWORD PTR [eax],edx
c0027f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f74:	83 ec 0c             	sub    esp,0xc
c0027f77:	50                   	push   eax
c0027f78:	e8 91 be fe ff       	call   c0013e0e <Device::~Device()>
c0027f7d:	83 c4 10             	add    esp,0x10
c0027f80:	90                   	nop
c0027f81:	83 c4 0c             	add    esp,0xc
c0027f84:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0027f86 <Computer::~Computer()>:
c0027f86:	83 ec 0c             	sub    esp,0xc
c0027f89:	83 ec 0c             	sub    esp,0xc
c0027f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f90:	e8 cd ff ff ff       	call   c0027f62 <Computer::~Computer()>
c0027f95:	83 c4 10             	add    esp,0x10
c0027f98:	83 ec 08             	sub    esp,0x8
c0027f9b:	68 ec 01 00 00       	push   0x1ec
c0027fa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027fa4:	e8 8c aa fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0027fa9:	83 c4 10             	add    esp,0x10
c0027fac:	83 c4 0c             	add    esp,0xc
c0027faf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0027fb0 <idleCommon()>:
c0027fb0:	83 ec 0c             	sub    esp,0xc
c0027fb3:	e8 14 57 ff ff       	call   c001d6cc <lockScheduler()>
c0027fb8:	e8 4b 5a ff ff       	call   c001da08 <schedule()>
c0027fbd:	83 c4 0c             	add    esp,0xc
c0027fc0:	e9 09 57 ff ff       	jmp    c001d6ce <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0027fc6 <LinkedList<UnixFile>::~LinkedList()>:
c0027fc6:	90                   	nop
c0027fc7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0027fc8 <LinkedList<UnixFile>::LinkedList()>:
c0027fc8:	83 ec 0c             	sub    esp,0xc
c0027fcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fcf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027fd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fd9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fe4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027feb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027fef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ff9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028004:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002800b:	83 ec 0c             	sub    esp,0xc
c002800e:	68 66 9d 02 c0       	push   0xc0029d66
c0028013:	e8 fd aa fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0028018:	83 c4 10             	add    esp,0x10
c002801b:	90                   	nop
c002801c:	83 c4 0c             	add    esp,0xc
c002801f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028020 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028020:	83 ec 0c             	sub    esp,0xc
c0028023:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028028:	75 10                	jne    c002803a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002802a:	83 ec 0c             	sub    esp,0xc
c002802d:	68 80 9d 02 c0       	push   0xc0029d80
c0028032:	e8 06 20 ff ff       	call   c001a03d <Krnl::panic(char const*)>
c0028037:	83 c4 10             	add    esp,0x10
c002803a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002803e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028040:	85 c0                	test   eax,eax
c0028042:	74 34                	je     c0028078 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028048:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002804b:	85 c0                	test   eax,eax
c002804d:	74 29                	je     c0028078 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002804f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028053:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028056:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002805a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002805d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028061:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028065:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002806c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002806f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028076:	eb 65                	jmp    c00280dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002807c:	8b 00                	mov    eax,DWORD PTR [eax]
c002807e:	85 c0                	test   eax,eax
c0028080:	75 4b                	jne    c00280cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028086:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028089:	85 c0                	test   eax,eax
c002808b:	75 40                	jne    c00280cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002808d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028091:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028095:	89 10                	mov    DWORD PTR [eax],edx
c0028097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002809b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002809f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00280a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00280a9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00280b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00280b7:	85 c0                	test   eax,eax
c00280b9:	74 22                	je     c00280dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00280bb:	83 ec 0c             	sub    esp,0xc
c00280be:	68 a2 9d 02 c0       	push   0xc0029da2
c00280c3:	e8 75 1f ff ff       	call   c001a03d <Krnl::panic(char const*)>
c00280c8:	83 c4 10             	add    esp,0x10
c00280cb:	eb 10                	jmp    c00280dd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00280cd:	83 ec 0c             	sub    esp,0xc
c00280d0:	68 ac 9d 02 c0       	push   0xc0029dac
c00280d5:	e8 63 1f ff ff       	call   c001a03d <Krnl::panic(char const*)>
c00280da:	83 c4 10             	add    esp,0x10
c00280dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280e1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00280e4:	8d 50 01             	lea    edx,[eax+0x1]
c00280e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00280eb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00280ee:	90                   	nop
c00280ef:	83 c4 0c             	add    esp,0xc
c00280f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00280f4 <LinkedList<UnixFile>::getFirstElement()>:
c00280f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00280f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00280fa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00280fc <LinkedList<UnixFile>::removeFirst()>:
c00280fc:	83 ec 0c             	sub    esp,0xc
c00280ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028103:	8b 00                	mov    eax,DWORD PTR [eax]
c0028105:	85 c0                	test   eax,eax
c0028107:	75 12                	jne    c002811b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028109:	83 ec 0c             	sub    esp,0xc
c002810c:	68 b8 9d 02 c0       	push   0xc0029db8
c0028111:	e8 27 1f ff ff       	call   c001a03d <Krnl::panic(char const*)>
c0028116:	83 c4 10             	add    esp,0x10
c0028119:	eb 7e                	jmp    c0028199 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002811b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002811f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028122:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028125:	85 c0                	test   eax,eax
c0028127:	74 10                	je     c0028139 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028129:	83 ec 0c             	sub    esp,0xc
c002812c:	68 03 9e 02 c0       	push   0xc0029e03
c0028131:	e8 07 1f ff ff       	call   c001a03d <Krnl::panic(char const*)>
c0028136:	83 c4 10             	add    esp,0x10
c0028139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002813d:	8b 00                	mov    eax,DWORD PTR [eax]
c002813f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028142:	85 c0                	test   eax,eax
c0028144:	75 33                	jne    c0028179 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002814a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028154:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002815b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002815f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028162:	83 f8 01             	cmp    eax,0x1
c0028165:	74 21                	je     c0028188 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028167:	83 ec 0c             	sub    esp,0xc
c002816a:	68 dc 9d 02 c0       	push   0xc0029ddc
c002816f:	e8 c9 1e ff ff       	call   c001a03d <Krnl::panic(char const*)>
c0028174:	83 c4 10             	add    esp,0x10
c0028177:	eb 0f                	jmp    c0028188 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002817d:	8b 00                	mov    eax,DWORD PTR [eax]
c002817f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028186:	89 10                	mov    DWORD PTR [eax],edx
c0028188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002818c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002818f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028196:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028199:	83 c4 0c             	add    esp,0xc
c002819c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002819e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002819e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00281a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00281a5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00281a6 <DriverlessDevice::~DriverlessDevice()>:
c00281a6:	ba e4 a4 02 c0       	mov    edx,0xc002a4e4
c00281ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00281af:	89 10                	mov    DWORD PTR [eax],edx
c00281b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00281b5:	50                   	push   eax
c00281b6:	e8 53 bc fe ff       	call   c0013e0e <Device::~Device()>
c00281bb:	83 c4 04             	add    esp,0x4
c00281be:	90                   	nop
c00281bf:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00281c0 <DriverlessDevice::~DriverlessDevice()>:
c00281c0:	83 ec 0c             	sub    esp,0xc
c00281c3:	83 ec 0c             	sub    esp,0xc
c00281c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00281ca:	e8 d7 ff ff ff       	call   c00281a6 <DriverlessDevice::~DriverlessDevice()>
c00281cf:	83 c4 10             	add    esp,0x10
c00281d2:	83 ec 08             	sub    esp,0x8
c00281d5:	68 58 01 00 00       	push   0x158
c00281da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00281de:	e8 52 a8 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c00281e3:	83 c4 10             	add    esp,0x10
c00281e6:	83 c4 0c             	add    esp,0xc
c00281e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00281ea <LinkedList<Device>::addElement(Device*)>:
c00281ea:	83 ec 0c             	sub    esp,0xc
c00281ed:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00281f2:	75 10                	jne    c0028204 <LinkedList<Device>::addElement(Device*)+0x1a>
c00281f4:	83 ec 0c             	sub    esp,0xc
c00281f7:	68 80 9d 02 c0       	push   0xc0029d80
c00281fc:	e8 3c 1e ff ff       	call   c001a03d <Krnl::panic(char const*)>
c0028201:	83 c4 10             	add    esp,0x10
c0028204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028208:	8b 00                	mov    eax,DWORD PTR [eax]
c002820a:	85 c0                	test   eax,eax
c002820c:	74 3a                	je     c0028248 <LinkedList<Device>::addElement(Device*)+0x5e>
c002820e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028212:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028215:	85 c0                	test   eax,eax
c0028217:	74 2f                	je     c0028248 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002821d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028220:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028224:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002822a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002822e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028232:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028239:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002823c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028246:	eb 68                	jmp    c00282b0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002824c:	8b 00                	mov    eax,DWORD PTR [eax]
c002824e:	85 c0                	test   eax,eax
c0028250:	75 4e                	jne    c00282a0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028256:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028259:	85 c0                	test   eax,eax
c002825b:	75 43                	jne    c00282a0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002825d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028261:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028265:	89 10                	mov    DWORD PTR [eax],edx
c0028267:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002826b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002826f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028276:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028279:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028287:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002828a:	85 c0                	test   eax,eax
c002828c:	74 22                	je     c00282b0 <LinkedList<Device>::addElement(Device*)+0xc6>
c002828e:	83 ec 0c             	sub    esp,0xc
c0028291:	68 a2 9d 02 c0       	push   0xc0029da2
c0028296:	e8 a2 1d ff ff       	call   c001a03d <Krnl::panic(char const*)>
c002829b:	83 c4 10             	add    esp,0x10
c002829e:	eb 10                	jmp    c00282b0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00282a0:	83 ec 0c             	sub    esp,0xc
c00282a3:	68 ac 9d 02 c0       	push   0xc0029dac
c00282a8:	e8 90 1d ff ff       	call   c001a03d <Krnl::panic(char const*)>
c00282ad:	83 c4 10             	add    esp,0x10
c00282b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00282b7:	8d 50 01             	lea    edx,[eax+0x1]
c00282ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282be:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00282c1:	90                   	nop
c00282c2:	83 c4 0c             	add    esp,0xc
c00282c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00282c6 <LinkedList<Device>::LinkedList()>:
c00282c6:	83 ec 0c             	sub    esp,0xc
c00282c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00282d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00282de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282e2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00282e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00282f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00282fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028302:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028309:	83 ec 0c             	sub    esp,0xc
c002830c:	68 66 9d 02 c0       	push   0xc0029d66
c0028311:	e8 ff a7 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c0028316:	83 c4 10             	add    esp,0x10
c0028319:	90                   	nop
c002831a:	83 c4 0c             	add    esp,0xc
c002831d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002831e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002831e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028322:	8b 00                	mov    eax,DWORD PTR [eax]
c0028324:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028326 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028326:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002832a:	8b 00                	mov    eax,DWORD PTR [eax]
c002832c:	85 c0                	test   eax,eax
c002832e:	75 0e                	jne    c002833e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028330:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028334:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028337:	85 c0                	test   eax,eax
c0028339:	75 03                	jne    c002833e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002833b:	b0 01                	mov    al,0x1
c002833d:	c3                   	ret    
c002833e:	b0 00                	mov    al,0x0
c0028340:	90                   	nop
c0028341:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028342 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028342:	83 ec 0c             	sub    esp,0xc
c0028345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028349:	8b 00                	mov    eax,DWORD PTR [eax]
c002834b:	85 c0                	test   eax,eax
c002834d:	75 15                	jne    c0028364 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002834f:	83 ec 0c             	sub    esp,0xc
c0028352:	68 b8 9d 02 c0       	push   0xc0029db8
c0028357:	e8 e1 1c ff ff       	call   c001a03d <Krnl::panic(char const*)>
c002835c:	83 c4 10             	add    esp,0x10
c002835f:	e9 88 00 00 00       	jmp    c00283ec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028368:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002836b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002836e:	85 c0                	test   eax,eax
c0028370:	0f 95 c0             	setne  al
c0028373:	84 c0                	test   al,al
c0028375:	74 10                	je     c0028387 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028377:	83 ec 0c             	sub    esp,0xc
c002837a:	68 03 9e 02 c0       	push   0xc0029e03
c002837f:	e8 b9 1c ff ff       	call   c001a03d <Krnl::panic(char const*)>
c0028384:	83 c4 10             	add    esp,0x10
c0028387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002838b:	8b 00                	mov    eax,DWORD PTR [eax]
c002838d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028390:	85 c0                	test   eax,eax
c0028392:	0f 94 c0             	sete   al
c0028395:	84 c0                	test   al,al
c0028397:	74 33                	je     c00283cc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028399:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002839d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00283a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00283ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00283b5:	83 f8 01             	cmp    eax,0x1
c00283b8:	74 21                	je     c00283db <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00283ba:	83 ec 0c             	sub    esp,0xc
c00283bd:	68 dc 9d 02 c0       	push   0xc0029ddc
c00283c2:	e8 76 1c ff ff       	call   c001a03d <Krnl::panic(char const*)>
c00283c7:	83 c4 10             	add    esp,0x10
c00283ca:	eb 0f                	jmp    c00283db <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00283cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00283d2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00283d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283d9:	89 10                	mov    DWORD PTR [eax],edx
c00283db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283df:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00283e2:	8d 50 ff             	lea    edx,[eax-0x1]
c00283e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283e9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00283ec:	83 c4 0c             	add    esp,0xc
c00283ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00283f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00283f0:	83 ec 0c             	sub    esp,0xc
c00283f3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00283f8:	75 10                	jne    c002840a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00283fa:	83 ec 0c             	sub    esp,0xc
c00283fd:	68 80 9d 02 c0       	push   0xc0029d80
c0028402:	e8 36 1c ff ff       	call   c001a03d <Krnl::panic(char const*)>
c0028407:	83 c4 10             	add    esp,0x10
c002840a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002840e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028410:	85 c0                	test   eax,eax
c0028412:	74 34                	je     c0028448 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028418:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002841b:	85 c0                	test   eax,eax
c002841d:	74 29                	je     c0028448 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002841f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028423:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028426:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002842a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002842d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028431:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028435:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002843c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002843f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028446:	eb 65                	jmp    c00284ad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002844c:	8b 00                	mov    eax,DWORD PTR [eax]
c002844e:	85 c0                	test   eax,eax
c0028450:	75 4b                	jne    c002849d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028456:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028459:	85 c0                	test   eax,eax
c002845b:	75 40                	jne    c002849d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002845d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028461:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028465:	89 10                	mov    DWORD PTR [eax],edx
c0028467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002846b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002846f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028476:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028479:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028484:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028487:	85 c0                	test   eax,eax
c0028489:	74 22                	je     c00284ad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002848b:	83 ec 0c             	sub    esp,0xc
c002848e:	68 a2 9d 02 c0       	push   0xc0029da2
c0028493:	e8 a5 1b ff ff       	call   c001a03d <Krnl::panic(char const*)>
c0028498:	83 c4 10             	add    esp,0x10
c002849b:	eb 10                	jmp    c00284ad <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002849d:	83 ec 0c             	sub    esp,0xc
c00284a0:	68 ac 9d 02 c0       	push   0xc0029dac
c00284a5:	e8 93 1b ff ff       	call   c001a03d <Krnl::panic(char const*)>
c00284aa:	83 c4 10             	add    esp,0x10
c00284ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284b4:	8d 50 01             	lea    edx,[eax+0x1]
c00284b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284bb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00284be:	90                   	nop
c00284bf:	83 c4 0c             	add    esp,0xc
c00284c2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00284c4 <ACPI::~ACPI()>:
c00284c4:	83 ec 0c             	sub    esp,0xc
c00284c7:	ba 2c ae 02 c0       	mov    edx,0xc002ae2c
c00284cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284d0:	89 10                	mov    DWORD PTR [eax],edx
c00284d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284d6:	83 ec 0c             	sub    esp,0xc
c00284d9:	50                   	push   eax
c00284da:	e8 2f b9 fe ff       	call   c0013e0e <Device::~Device()>
c00284df:	83 c4 10             	add    esp,0x10
c00284e2:	90                   	nop
c00284e3:	83 c4 0c             	add    esp,0xc
c00284e6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00284e8 <ACPI::~ACPI()>:
c00284e8:	83 ec 0c             	sub    esp,0xc
c00284eb:	83 ec 0c             	sub    esp,0xc
c00284ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00284f2:	e8 cd ff ff ff       	call   c00284c4 <ACPI::~ACPI()>
c00284f7:	83 c4 10             	add    esp,0x10
c00284fa:	83 ec 08             	sub    esp,0x8
c00284fd:	68 68 12 00 00       	push   0x1268
c0028502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028506:	e8 2a a5 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c002850b:	83 c4 10             	add    esp,0x10
c002850e:	83 c4 0c             	add    esp,0xc
c0028511:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028512 <CPU::~CPU()>:
c0028512:	83 ec 0c             	sub    esp,0xc
c0028515:	ba 1c b2 02 c0       	mov    edx,0xc002b21c
c002851a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002851e:	89 10                	mov    DWORD PTR [eax],edx
c0028520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028524:	83 ec 0c             	sub    esp,0xc
c0028527:	50                   	push   eax
c0028528:	e8 e1 b8 fe ff       	call   c0013e0e <Device::~Device()>
c002852d:	83 c4 10             	add    esp,0x10
c0028530:	90                   	nop
c0028531:	83 c4 0c             	add    esp,0xc
c0028534:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028536 <CPU::~CPU()>:
c0028536:	83 ec 0c             	sub    esp,0xc
c0028539:	83 ec 0c             	sub    esp,0xc
c002853c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028540:	e8 cd ff ff ff       	call   c0028512 <CPU::~CPU()>
c0028545:	83 c4 10             	add    esp,0x10
c0028548:	83 ec 08             	sub    esp,0x8
c002854b:	68 98 11 00 00       	push   0x1198
c0028550:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028554:	e8 dc a4 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0028559:	83 c4 10             	add    esp,0x10
c002855c:	83 c4 0c             	add    esp,0xc
c002855f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028560 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028560:	90                   	nop
c0028561:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028562 <ThreadControlBlock::ThreadControlBlock()>:
c0028562:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028566:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002856d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028571:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002857c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028583:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028587:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002858e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028592:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028596:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002859a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002859e:	90                   	nop
c002859f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00285a0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00285a0:	83 ec 0c             	sub    esp,0xc
c00285a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285a7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00285ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285bc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00285c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00285cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285d1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285dc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00285e3:	83 ec 0c             	sub    esp,0xc
c00285e6:	68 66 9d 02 c0       	push   0xc0029d66
c00285eb:	e8 25 a5 fe ff       	call   c0012b15 <Dbg::kprintf(char const*, ...)>
c00285f0:	83 c4 10             	add    esp,0x10
c00285f3:	90                   	nop
c00285f4:	83 c4 0c             	add    esp,0xc
c00285f7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00285f8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00285f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00285fc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00285ff:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028600 <Vm::_FPUState::_FPUState()>:
c0028600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028604:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002860b:	90                   	nop
c002860c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002860e <PCI::~PCI()>:
c002860e:	83 ec 0c             	sub    esp,0xc
c0028611:	ba d8 c1 02 c0       	mov    edx,0xc002c1d8
c0028616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002861a:	89 10                	mov    DWORD PTR [eax],edx
c002861c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028620:	83 ec 0c             	sub    esp,0xc
c0028623:	50                   	push   eax
c0028624:	e8 bd b1 fe ff       	call   c00137e6 <Bus::~Bus()>
c0028629:	83 c4 10             	add    esp,0x10
c002862c:	90                   	nop
c002862d:	83 c4 0c             	add    esp,0xc
c0028630:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028632 <PCI::~PCI()>:
c0028632:	83 ec 0c             	sub    esp,0xc
c0028635:	83 ec 0c             	sub    esp,0xc
c0028638:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002863c:	e8 cd ff ff ff       	call   c002860e <PCI::~PCI()>
c0028641:	83 c4 10             	add    esp,0x10
c0028644:	83 ec 08             	sub    esp,0x8
c0028647:	68 58 01 00 00       	push   0x158
c002864c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028650:	e8 e0 a3 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0028655:	83 c4 10             	add    esp,0x10
c0028658:	83 c4 0c             	add    esp,0xc
c002865b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002865c <IDE::~IDE()>:
c002865c:	83 ec 0c             	sub    esp,0xc
c002865f:	ba 3c c4 02 c0       	mov    edx,0xc002c43c
c0028664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028668:	89 10                	mov    DWORD PTR [eax],edx
c002866a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002866e:	83 ec 0c             	sub    esp,0xc
c0028671:	50                   	push   eax
c0028672:	e8 87 bc fe ff       	call   c00142fe <HardDiskController::~HardDiskController()>
c0028677:	83 c4 10             	add    esp,0x10
c002867a:	90                   	nop
c002867b:	83 c4 0c             	add    esp,0xc
c002867e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028680 <IDE::~IDE()>:
c0028680:	83 ec 0c             	sub    esp,0xc
c0028683:	83 ec 0c             	sub    esp,0xc
c0028686:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002868a:	e8 cd ff ff ff       	call   c002865c <IDE::~IDE()>
c002868f:	83 c4 10             	add    esp,0x10
c0028692:	83 ec 08             	sub    esp,0x8
c0028695:	68 70 02 00 00       	push   0x270
c002869a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002869e:	e8 92 a3 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c00286a3:	83 c4 10             	add    esp,0x10
c00286a6:	83 c4 0c             	add    esp,0xc
c00286a9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00286aa <SATABus::~SATABus()>:
c00286aa:	83 ec 0c             	sub    esp,0xc
c00286ad:	ba 1c c5 02 c0       	mov    edx,0xc002c51c
c00286b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b6:	89 10                	mov    DWORD PTR [eax],edx
c00286b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286bc:	83 ec 0c             	sub    esp,0xc
c00286bf:	50                   	push   eax
c00286c0:	e8 39 bc fe ff       	call   c00142fe <HardDiskController::~HardDiskController()>
c00286c5:	83 c4 10             	add    esp,0x10
c00286c8:	90                   	nop
c00286c9:	83 c4 0c             	add    esp,0xc
c00286cc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00286ce <SATABus::~SATABus()>:
c00286ce:	83 ec 0c             	sub    esp,0xc
c00286d1:	83 ec 0c             	sub    esp,0xc
c00286d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286d8:	e8 cd ff ff ff       	call   c00286aa <SATABus::~SATABus()>
c00286dd:	83 c4 10             	add    esp,0x10
c00286e0:	83 ec 08             	sub    esp,0x8
c00286e3:	68 64 01 00 00       	push   0x164
c00286e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00286ec:	e8 44 a3 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c00286f1:	83 c4 10             	add    esp,0x10
c00286f4:	83 c4 0c             	add    esp,0xc
c00286f7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00286f8 <ATA::~ATA()>:
c00286f8:	83 ec 0c             	sub    esp,0xc
c00286fb:	ba 68 c5 02 c0       	mov    edx,0xc002c568
c0028700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028704:	89 10                	mov    DWORD PTR [eax],edx
c0028706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002870a:	83 ec 0c             	sub    esp,0xc
c002870d:	50                   	push   eax
c002870e:	e8 dd bc fe ff       	call   c00143f0 <PhysicalDisk::~PhysicalDisk()>
c0028713:	83 c4 10             	add    esp,0x10
c0028716:	90                   	nop
c0028717:	83 c4 0c             	add    esp,0xc
c002871a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002871c <ATA::~ATA()>:
c002871c:	83 ec 0c             	sub    esp,0xc
c002871f:	83 ec 0c             	sub    esp,0xc
c0028722:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028726:	e8 cd ff ff ff       	call   c00286f8 <ATA::~ATA()>
c002872b:	83 c4 10             	add    esp,0x10
c002872e:	83 ec 08             	sub    esp,0x8
c0028731:	68 7c 01 00 00       	push   0x17c
c0028736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002873a:	e8 f6 a2 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c002873f:	83 c4 10             	add    esp,0x10
c0028742:	83 c4 0c             	add    esp,0xc
c0028745:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028746 <ATAPI::~ATAPI()>:
c0028746:	83 ec 0c             	sub    esp,0xc
c0028749:	ba a0 c5 02 c0       	mov    edx,0xc002c5a0
c002874e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028752:	89 10                	mov    DWORD PTR [eax],edx
c0028754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028758:	83 ec 0c             	sub    esp,0xc
c002875b:	50                   	push   eax
c002875c:	e8 8f bc fe ff       	call   c00143f0 <PhysicalDisk::~PhysicalDisk()>
c0028761:	83 c4 10             	add    esp,0x10
c0028764:	90                   	nop
c0028765:	83 c4 0c             	add    esp,0xc
c0028768:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002876a <ATAPI::~ATAPI()>:
c002876a:	83 ec 0c             	sub    esp,0xc
c002876d:	83 ec 0c             	sub    esp,0xc
c0028770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028774:	e8 cd ff ff ff       	call   c0028746 <ATAPI::~ATAPI()>
c0028779:	83 c4 10             	add    esp,0x10
c002877c:	83 ec 08             	sub    esp,0x8
c002877f:	68 80 01 00 00       	push   0x180
c0028784:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028788:	e8 a8 a2 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c002878d:	83 c4 10             	add    esp,0x10
c0028790:	83 c4 0c             	add    esp,0xc
c0028793:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028794 <SATA::~SATA()>:
c0028794:	83 ec 0c             	sub    esp,0xc
c0028797:	ba 54 c6 02 c0       	mov    edx,0xc002c654
c002879c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a0:	89 10                	mov    DWORD PTR [eax],edx
c00287a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a6:	83 ec 0c             	sub    esp,0xc
c00287a9:	50                   	push   eax
c00287aa:	e8 41 bc fe ff       	call   c00143f0 <PhysicalDisk::~PhysicalDisk()>
c00287af:	83 c4 10             	add    esp,0x10
c00287b2:	90                   	nop
c00287b3:	83 c4 0c             	add    esp,0xc
c00287b6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00287b8 <SATA::~SATA()>:
c00287b8:	83 ec 0c             	sub    esp,0xc
c00287bb:	83 ec 0c             	sub    esp,0xc
c00287be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287c2:	e8 cd ff ff ff       	call   c0028794 <SATA::~SATA()>
c00287c7:	83 c4 10             	add    esp,0x10
c00287ca:	83 ec 08             	sub    esp,0x8
c00287cd:	68 7c 01 00 00       	push   0x17c
c00287d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287d6:	e8 5a a2 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c00287db:	83 c4 10             	add    esp,0x10
c00287de:	83 c4 0c             	add    esp,0xc
c00287e1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00287e2 <SATAPI::~SATAPI()>:
c00287e2:	83 ec 0c             	sub    esp,0xc
c00287e5:	ba 30 c7 02 c0       	mov    edx,0xc002c730
c00287ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ee:	89 10                	mov    DWORD PTR [eax],edx
c00287f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f4:	83 ec 0c             	sub    esp,0xc
c00287f7:	50                   	push   eax
c00287f8:	e8 f3 bb fe ff       	call   c00143f0 <PhysicalDisk::~PhysicalDisk()>
c00287fd:	83 c4 10             	add    esp,0x10
c0028800:	90                   	nop
c0028801:	83 c4 0c             	add    esp,0xc
c0028804:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028806 <SATAPI::~SATAPI()>:
c0028806:	83 ec 0c             	sub    esp,0xc
c0028809:	83 ec 0c             	sub    esp,0xc
c002880c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028810:	e8 cd ff ff ff       	call   c00287e2 <SATAPI::~SATAPI()>
c0028815:	83 c4 10             	add    esp,0x10
c0028818:	83 ec 08             	sub    esp,0x8
c002881b:	68 80 01 00 00       	push   0x180
c0028820:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028824:	e8 0c a2 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0028829:	83 c4 10             	add    esp,0x10
c002882c:	83 c4 0c             	add    esp,0xc
c002882f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028830 <AVX::~AVX()>:
c0028830:	83 ec 0c             	sub    esp,0xc
c0028833:	ba 70 c7 02 c0       	mov    edx,0xc002c770
c0028838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883c:	89 10                	mov    DWORD PTR [eax],edx
c002883e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028842:	83 ec 0c             	sub    esp,0xc
c0028845:	50                   	push   eax
c0028846:	e8 29 bc fe ff       	call   c0014474 <FPU::~FPU()>
c002884b:	83 c4 10             	add    esp,0x10
c002884e:	90                   	nop
c002884f:	83 c4 0c             	add    esp,0xc
c0028852:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028854 <AVX::~AVX()>:
c0028854:	83 ec 0c             	sub    esp,0xc
c0028857:	83 ec 0c             	sub    esp,0xc
c002885a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002885e:	e8 cd ff ff ff       	call   c0028830 <AVX::~AVX()>
c0028863:	83 c4 10             	add    esp,0x10
c0028866:	83 ec 08             	sub    esp,0x8
c0028869:	68 58 01 00 00       	push   0x158
c002886e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028872:	e8 be a1 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0028877:	83 c4 10             	add    esp,0x10
c002887a:	83 c4 0c             	add    esp,0xc
c002887d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002887e <MMX::~MMX()>:
c002887e:	83 ec 0c             	sub    esp,0xc
c0028881:	ba b0 c7 02 c0       	mov    edx,0xc002c7b0
c0028886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888a:	89 10                	mov    DWORD PTR [eax],edx
c002888c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028890:	83 ec 0c             	sub    esp,0xc
c0028893:	50                   	push   eax
c0028894:	e8 db bb fe ff       	call   c0014474 <FPU::~FPU()>
c0028899:	83 c4 10             	add    esp,0x10
c002889c:	90                   	nop
c002889d:	83 c4 0c             	add    esp,0xc
c00288a0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00288a2 <MMX::~MMX()>:
c00288a2:	83 ec 0c             	sub    esp,0xc
c00288a5:	83 ec 0c             	sub    esp,0xc
c00288a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288ac:	e8 cd ff ff ff       	call   c002887e <MMX::~MMX()>
c00288b1:	83 c4 10             	add    esp,0x10
c00288b4:	83 ec 08             	sub    esp,0x8
c00288b7:	68 58 01 00 00       	push   0x158
c00288bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288c0:	e8 70 a1 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c00288c5:	83 c4 10             	add    esp,0x10
c00288c8:	83 c4 0c             	add    esp,0xc
c00288cb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00288cc <SSE::~SSE()>:
c00288cc:	83 ec 0c             	sub    esp,0xc
c00288cf:	ba f0 c7 02 c0       	mov    edx,0xc002c7f0
c00288d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d8:	89 10                	mov    DWORD PTR [eax],edx
c00288da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288de:	83 ec 0c             	sub    esp,0xc
c00288e1:	50                   	push   eax
c00288e2:	e8 8d bb fe ff       	call   c0014474 <FPU::~FPU()>
c00288e7:	83 c4 10             	add    esp,0x10
c00288ea:	90                   	nop
c00288eb:	83 c4 0c             	add    esp,0xc
c00288ee:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00288f0 <SSE::~SSE()>:
c00288f0:	83 ec 0c             	sub    esp,0xc
c00288f3:	83 ec 0c             	sub    esp,0xc
c00288f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288fa:	e8 cd ff ff ff       	call   c00288cc <SSE::~SSE()>
c00288ff:	83 c4 10             	add    esp,0x10
c0028902:	83 ec 08             	sub    esp,0x8
c0028905:	68 58 01 00 00       	push   0x158
c002890a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002890e:	e8 22 a1 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0028913:	83 c4 10             	add    esp,0x10
c0028916:	83 c4 0c             	add    esp,0xc
c0028919:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002891a <x87::~x87()>:
c002891a:	83 ec 0c             	sub    esp,0xc
c002891d:	ba 30 c8 02 c0       	mov    edx,0xc002c830
c0028922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028926:	89 10                	mov    DWORD PTR [eax],edx
c0028928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002892c:	83 ec 0c             	sub    esp,0xc
c002892f:	50                   	push   eax
c0028930:	e8 3f bb fe ff       	call   c0014474 <FPU::~FPU()>
c0028935:	83 c4 10             	add    esp,0x10
c0028938:	90                   	nop
c0028939:	83 c4 0c             	add    esp,0xc
c002893c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002893e <x87::~x87()>:
c002893e:	83 ec 0c             	sub    esp,0xc
c0028941:	83 ec 0c             	sub    esp,0xc
c0028944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028948:	e8 cd ff ff ff       	call   c002891a <x87::~x87()>
c002894d:	83 c4 10             	add    esp,0x10
c0028950:	83 ec 08             	sub    esp,0x8
c0028953:	68 58 01 00 00       	push   0x158
c0028958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002895c:	e8 d4 a0 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0028961:	83 c4 10             	add    esp,0x10
c0028964:	83 c4 0c             	add    esp,0xc
c0028967:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028968 <IOAPIC::~IOAPIC()>:
c0028968:	83 ec 0c             	sub    esp,0xc
c002896b:	ba 88 c9 02 c0       	mov    edx,0xc002c988
c0028970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028974:	89 10                	mov    DWORD PTR [eax],edx
c0028976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897a:	83 ec 0c             	sub    esp,0xc
c002897d:	50                   	push   eax
c002897e:	e8 8b b4 fe ff       	call   c0013e0e <Device::~Device()>
c0028983:	83 c4 10             	add    esp,0x10
c0028986:	90                   	nop
c0028987:	83 c4 0c             	add    esp,0xc
c002898a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002898c <IOAPIC::~IOAPIC()>:
c002898c:	83 ec 0c             	sub    esp,0xc
c002898f:	83 ec 0c             	sub    esp,0xc
c0028992:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028996:	e8 cd ff ff ff       	call   c0028968 <IOAPIC::~IOAPIC()>
c002899b:	83 c4 10             	add    esp,0x10
c002899e:	83 ec 08             	sub    esp,0x8
c00289a1:	68 68 01 00 00       	push   0x168
c00289a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289aa:	e8 86 a0 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c00289af:	83 c4 10             	add    esp,0x10
c00289b2:	83 c4 0c             	add    esp,0xc
c00289b5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00289b6 <APIC::~APIC()>:
c00289b6:	83 ec 0c             	sub    esp,0xc
c00289b9:	ba 40 c9 02 c0       	mov    edx,0xc002c940
c00289be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c2:	89 10                	mov    DWORD PTR [eax],edx
c00289c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c8:	83 ec 0c             	sub    esp,0xc
c00289cb:	50                   	push   eax
c00289cc:	e8 6d bf fe ff       	call   c001493e <InterruptController::~InterruptController()>
c00289d1:	83 c4 10             	add    esp,0x10
c00289d4:	90                   	nop
c00289d5:	83 c4 0c             	add    esp,0xc
c00289d8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00289da <APIC::~APIC()>:
c00289da:	83 ec 0c             	sub    esp,0xc
c00289dd:	83 ec 0c             	sub    esp,0xc
c00289e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289e4:	e8 cd ff ff ff       	call   c00289b6 <APIC::~APIC()>
c00289e9:	83 c4 10             	add    esp,0x10
c00289ec:	83 ec 08             	sub    esp,0x8
c00289ef:	68 58 21 00 00       	push   0x2158
c00289f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289f8:	e8 38 a0 fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c00289fd:	83 c4 10             	add    esp,0x10
c0028a00:	83 c4 0c             	add    esp,0xc
c0028a03:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028a04 <PIC::~PIC()>:
c0028a04:	83 ec 0c             	sub    esp,0xc
c0028a07:	ba d8 c9 02 c0       	mov    edx,0xc002c9d8
c0028a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a10:	89 10                	mov    DWORD PTR [eax],edx
c0028a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a16:	83 ec 0c             	sub    esp,0xc
c0028a19:	50                   	push   eax
c0028a1a:	e8 1f bf fe ff       	call   c001493e <InterruptController::~InterruptController()>
c0028a1f:	83 c4 10             	add    esp,0x10
c0028a22:	90                   	nop
c0028a23:	83 c4 0c             	add    esp,0xc
c0028a26:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028a28 <PIC::~PIC()>:
c0028a28:	83 ec 0c             	sub    esp,0xc
c0028a2b:	83 ec 0c             	sub    esp,0xc
c0028a2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a32:	e8 cd ff ff ff       	call   c0028a04 <PIC::~PIC()>
c0028a37:	83 c4 10             	add    esp,0x10
c0028a3a:	83 ec 08             	sub    esp,0x8
c0028a3d:	68 58 21 00 00       	push   0x2158
c0028a42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a46:	e8 ea 9f fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0028a4b:	83 c4 10             	add    esp,0x10
c0028a4e:	83 c4 0c             	add    esp,0xc
c0028a51:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028a52 <APICTimer::~APICTimer()>:
c0028a52:	83 ec 0c             	sub    esp,0xc
c0028a55:	ba 2c ca 02 c0       	mov    edx,0xc002ca2c
c0028a5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a5e:	89 10                	mov    DWORD PTR [eax],edx
c0028a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a64:	83 ec 0c             	sub    esp,0xc
c0028a67:	50                   	push   eax
c0028a68:	e8 c9 dd fe ff       	call   c0016836 <Timer::~Timer()>
c0028a6d:	83 c4 10             	add    esp,0x10
c0028a70:	90                   	nop
c0028a71:	83 c4 0c             	add    esp,0xc
c0028a74:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028a76 <APICTimer::~APICTimer()>:
c0028a76:	83 ec 0c             	sub    esp,0xc
c0028a79:	83 ec 0c             	sub    esp,0xc
c0028a7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a80:	e8 cd ff ff ff       	call   c0028a52 <APICTimer::~APICTimer()>
c0028a85:	83 c4 10             	add    esp,0x10
c0028a88:	83 ec 08             	sub    esp,0x8
c0028a8b:	68 60 01 00 00       	push   0x160
c0028a90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a94:	e8 9c 9f fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0028a99:	83 c4 10             	add    esp,0x10
c0028a9c:	83 c4 0c             	add    esp,0xc
c0028a9f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028aa0 <PIT::~PIT()>:
c0028aa0:	83 ec 0c             	sub    esp,0xc
c0028aa3:	ba 7c ca 02 c0       	mov    edx,0xc002ca7c
c0028aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aac:	89 10                	mov    DWORD PTR [eax],edx
c0028aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab2:	83 ec 0c             	sub    esp,0xc
c0028ab5:	50                   	push   eax
c0028ab6:	e8 7b dd fe ff       	call   c0016836 <Timer::~Timer()>
c0028abb:	83 c4 10             	add    esp,0x10
c0028abe:	90                   	nop
c0028abf:	83 c4 0c             	add    esp,0xc
c0028ac2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028ac4 <PIT::~PIT()>:
c0028ac4:	83 ec 0c             	sub    esp,0xc
c0028ac7:	83 ec 0c             	sub    esp,0xc
c0028aca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ace:	e8 cd ff ff ff       	call   c0028aa0 <PIT::~PIT()>
c0028ad3:	83 c4 10             	add    esp,0x10
c0028ad6:	83 ec 08             	sub    esp,0x8
c0028ad9:	68 5c 01 00 00       	push   0x15c
c0028ade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ae2:	e8 4e 9f fe ff       	call   c0012a35 <operator delete(void*, unsigned long)>
c0028ae7:	83 c4 10             	add    esp,0x10
c0028aea:	83 c4 0c             	add    esp,0xc
c0028aed:	c3                   	ret    
